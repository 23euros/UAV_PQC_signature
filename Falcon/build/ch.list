
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	08006c61 	.word	0x08006c61
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	080002bb 	.word	0x080002bb
 8000070:	080002bb 	.word	0x080002bb
 8000074:	080002bb 	.word	0x080002bb
 8000078:	080002bb 	.word	0x080002bb
 800007c:	080002bb 	.word	0x080002bb
 8000080:	080002bb 	.word	0x080002bb
 8000084:	080002bb 	.word	0x080002bb
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	080010f1 	.word	0x080010f1
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	08001001 	.word	0x08001001
 80000d8:	08001031 	.word	0x08001031
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	080002bb 	.word	0x080002bb
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	080002bb 	.word	0x080002bb
 8000124:	080002bb 	.word	0x080002bb
 8000128:	080002bb 	.word	0x080002bb
 800012c:	080002bb 	.word	0x080002bb
 8000130:	080002bb 	.word	0x080002bb
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	080002bb 	.word	0x080002bb
 8000154:	080002bb 	.word	0x080002bb
 8000158:	080002bb 	.word	0x080002bb
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4826      	ldr	r0, [pc, #152]	; (800027c <endfiniloop+0x6>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4825      	ldr	r0, [pc, #148]	; (8000280 <endfiniloop+0xa>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 80001ee:	4825      	ldr	r0, [pc, #148]	; (8000284 <endfiniloop+0xe>)
                ldr     r1, =SCB_VTOR
 80001f0:	4925      	ldr	r1, [pc, #148]	; (8000288 <endfiniloop+0x12>)
                str     r0, [r1]
 80001f2:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001f4:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001f6:	f380 8814 	msr	CONTROL, r0
                isb
 80001fa:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 80001fe:	f000 f8c7 	bl	8000390 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000202:	f001 fd2d 	bl	8001c60 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000206:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 800020a:	4920      	ldr	r1, [pc, #128]	; (800028c <endfiniloop+0x16>)
                ldr     r2, =__main_stack_end__
 800020c:	4a1b      	ldr	r2, [pc, #108]	; (800027c <endfiniloop+0x6>)

0800020e <msloop>:
msloop:
                cmp     r1, r2
 800020e:	4291      	cmp	r1, r2
                itt     lo
 8000210:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000212:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000216:	e7fa      	bcc.n	800020e <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000218:	491d      	ldr	r1, [pc, #116]	; (8000290 <endfiniloop+0x1a>)
                ldr     r2, =__process_stack_end__
 800021a:	4a19      	ldr	r2, [pc, #100]	; (8000280 <endfiniloop+0xa>)

0800021c <psloop>:
psloop:
                cmp     r1, r2
 800021c:	4291      	cmp	r1, r2
                itt     lo
 800021e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000220:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 8000224:	e7fa      	bcc.n	800021c <psloop>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 8000226:	491b      	ldr	r1, [pc, #108]	; (8000294 <endfiniloop+0x1e>)
                ldr     r2, =__data_base__
 8000228:	4a1b      	ldr	r2, [pc, #108]	; (8000298 <endfiniloop+0x22>)
                ldr     r3, =__data_end__
 800022a:	4b1c      	ldr	r3, [pc, #112]	; (800029c <endfiniloop+0x26>)

0800022c <dloop>:
dloop:
                cmp     r2, r3
 800022c:	429a      	cmp	r2, r3
                ittt    lo
 800022e:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000230:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 8000234:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 8000238:	e7f8      	bcc.n	800022c <dloop>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 800023a:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 800023c:	4918      	ldr	r1, [pc, #96]	; (80002a0 <endfiniloop+0x2a>)
                ldr     r2, =__bss_end__
 800023e:	4a19      	ldr	r2, [pc, #100]	; (80002a4 <endfiniloop+0x2e>)

08000240 <bloop>:
bloop:
                cmp     r1, r2
 8000240:	4291      	cmp	r1, r2
                itt     lo
 8000242:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000244:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 8000248:	e7fa      	bcc.n	8000240 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 800024a:	f000 f8b9 	bl	80003c0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 800024e:	f000 f8a7 	bl	80003a0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000252:	4c15      	ldr	r4, [pc, #84]	; (80002a8 <endfiniloop+0x32>)
                ldr     r5, =__init_array_end__
 8000254:	4d15      	ldr	r5, [pc, #84]	; (80002ac <endfiniloop+0x36>)

08000256 <initloop>:
initloop:
                cmp     r4, r5
 8000256:	42ac      	cmp	r4, r5
                bge     endinitloop
 8000258:	da03      	bge.n	8000262 <endinitloop>
                ldr     r1, [r4], #4
 800025a:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 800025e:	4788      	blx	r1
                b       initloop
 8000260:	e7f9      	b.n	8000256 <initloop>

08000262 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000262:	f00f fc0d 	bl	800fa80 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 8000266:	4c12      	ldr	r4, [pc, #72]	; (80002b0 <endfiniloop+0x3a>)
                ldr     r5, =__fini_array_end__
 8000268:	4d12      	ldr	r5, [pc, #72]	; (80002b4 <endfiniloop+0x3e>)

0800026a <finiloop>:
finiloop:
                cmp     r4, r5
 800026a:	42ac      	cmp	r4, r5
                bge     endfiniloop
 800026c:	da03      	bge.n	8000276 <endfiniloop>
                ldr     r1, [r4], #4
 800026e:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000272:	4788      	blx	r1
                b       finiloop
 8000274:	e7f9      	b.n	800026a <finiloop>

08000276 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 8000276:	f000 b89b 	b.w	80003b0 <__default_exit>
 800027a:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 800027c:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000280:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000284:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 8000288:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	08026bd4 	.word	0x08026bd4
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	20000938 	.word	0x20000938
                ldr     r1, =__bss_base__
 80002a0:	20000938 	.word	0x20000938
                ldr     r2, =__bss_end__
 80002a4:	20019120 	.word	0x20019120
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <__port_thread_start>:
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f002 ffe8 	bl	80032b0 <chThdExit>

080002e0 <.zombies>:
.zombies:       b       .zombies
 80002e0:	e7fe      	b.n	80002e0 <.zombies>

080002e2 <__port_switch_from_isr>:
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
#endif
                bl      chSchDoPreemption
 80002e2:	f002 fc85 	bl	8002bf0 <chSchDoPreemption>

080002e6 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e8:	e7fe      	b.n	80002e8 <__port_exit_from_isr+0x2>
 80002ea:	0000      	movs	r0, r0
 80002ec:	0000      	movs	r0, r0
	...

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8000390:	bf00      	nop
 8000392:	4770      	bx	lr
	...

080003a0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80003a0:	bf00      	nop
 80003a2:	4770      	bx	lr
	...

080003b0 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 80003b0:	e7fe      	b.n	80003b0 <__default_exit>
 80003b2:	bf00      	nop
	...

080003c0 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80003c0:	b084      	sub	sp, #16
#if CRT0_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <__init_ram_areas+0x60>)
 80003c4:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 80003c6:	9b03      	ldr	r3, [sp, #12]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
 80003cc:	9b03      	ldr	r3, [sp, #12]
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	9301      	str	r3, [sp, #4]

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 80003d2:	e009      	b.n	80003e8 <__init_ram_areas+0x28>
      *p = *tp;
 80003d4:	9b02      	ldr	r3, [sp, #8]
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	9b01      	ldr	r3, [sp, #4]
 80003da:	601a      	str	r2, [r3, #0]
      p++;
 80003dc:	9b01      	ldr	r3, [sp, #4]
 80003de:	3304      	adds	r3, #4
 80003e0:	9301      	str	r3, [sp, #4]
      tp++;
 80003e2:	9b02      	ldr	r3, [sp, #8]
 80003e4:	3304      	adds	r3, #4
 80003e6:	9302      	str	r3, [sp, #8]
    while (p < rap->clear_area) {
 80003e8:	9b03      	ldr	r3, [sp, #12]
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	9a01      	ldr	r2, [sp, #4]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d3f0      	bcc.n	80003d4 <__init_ram_areas+0x14>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 80003f2:	e005      	b.n	8000400 <__init_ram_areas+0x40>
      *p = 0;
 80003f4:	9b01      	ldr	r3, [sp, #4]
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
      p++;
 80003fa:	9b01      	ldr	r3, [sp, #4]
 80003fc:	3304      	adds	r3, #4
 80003fe:	9301      	str	r3, [sp, #4]
    while (p < rap->no_init_area) {
 8000400:	9b03      	ldr	r3, [sp, #12]
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	9a01      	ldr	r2, [sp, #4]
 8000406:	429a      	cmp	r2, r3
 8000408:	d3f4      	bcc.n	80003f4 <__init_ram_areas+0x34>
    }
    rap++;
 800040a:	9b03      	ldr	r3, [sp, #12]
 800040c:	3310      	adds	r3, #16
 800040e:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8000410:	9b03      	ldr	r3, [sp, #12]
 8000412:	4a04      	ldr	r2, [pc, #16]	; (8000424 <__init_ram_areas+0x64>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d3d6      	bcc.n	80003c6 <__init_ram_areas+0x6>
#endif
}
 8000418:	bf00      	nop
 800041a:	bf00      	nop
 800041c:	b004      	add	sp, #16
 800041e:	4770      	bx	lr
 8000420:	0801c8b0 	.word	0x0801c8b0
 8000424:	0801c930 	.word	0x0801c930
	...

08000430 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
 8000430:	bf00      	nop
 8000432:	4770      	bx	lr
	...

08000440 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8000440:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 8000442:	f7ff fff5 	bl	8000430 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 8000446:	f000 fef3 	bl	8001230 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 800044a:	f000 ffe9 	bl	8001420 <_pal_lld_init>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 800044e:	f000 fcaf 	bl	8000db0 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8000452:	f001 fc0d 	bl	8001c70 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8000456:	f000 f83b 	bl	80004d0 <stInit>
#endif
}
 800045a:	bf00      	nop
 800045c:	bd08      	pop	{r3, pc}
 800045e:	bf00      	nop

08000460 <st_lld_get_counter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000466:	4618      	mov	r0, r3
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	0000      	movs	r0, r0
	...

08000470 <st_lld_start_alarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t abstime) {
 8000470:	b082      	sub	sp, #8
 8000472:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000474:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000478:	9b01      	ldr	r3, [sp, #4]
 800047a:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800047c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000488:	2202      	movs	r2, #2
 800048a:	60da      	str	r2, [r3, #12]
#else
  STM32_ST_TIM->DIER  |= STM32_TIM_DIER_CC1IE;
#endif
}
 800048c:	bf00      	nop
 800048e:	b002      	add	sp, #8
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
	...

080004a0 <st_lld_stop_alarm>:
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
 80004a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004a4:	2200      	movs	r2, #0
 80004a6:	60da      	str	r2, [r3, #12]
#else
 STM32_ST_TIM->DIER &= ~STM32_TIM_DIER_CC1IE;
#endif
}
 80004a8:	bf00      	nop
 80004aa:	4770      	bx	lr
 80004ac:	0000      	movs	r0, r0
	...

080004b0 <st_lld_set_alarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {
 80004b0:	b082      	sub	sp, #8
 80004b2:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80004b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b8:	9b01      	ldr	r3, [sp, #4]
 80004ba:	6353      	str	r3, [r2, #52]	; 0x34
}
 80004bc:	bf00      	nop
 80004be:	b002      	add	sp, #8
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
	...

080004d0 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 80004d0:	b508      	push	{r3, lr}

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
 80004d2:	f001 f89d 	bl	8001610 <st_lld_init>
}
 80004d6:	bf00      	nop
 80004d8:	bd08      	pop	{r3, pc}
 80004da:	bf00      	nop
 80004dc:	0000      	movs	r0, r0
	...

080004e0 <stGetCounter>:
 *
 * @return              The counter value.
 *
 * @api
 */
systime_t stGetCounter(void) {
 80004e0:	b508      	push	{r3, lr}

  return st_lld_get_counter();
 80004e2:	f7ff ffbd 	bl	8000460 <st_lld_get_counter>
 80004e6:	4603      	mov	r3, r0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	bd08      	pop	{r3, pc}
 80004ec:	0000      	movs	r0, r0
	...

080004f0 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 80004f0:	b500      	push	{lr}
 80004f2:	b083      	sub	sp, #12
 80004f4:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
 80004f6:	9801      	ldr	r0, [sp, #4]
 80004f8:	f7ff ffba 	bl	8000470 <st_lld_start_alarm>
}
 80004fc:	bf00      	nop
 80004fe:	b003      	add	sp, #12
 8000500:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000510 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
 8000510:	b508      	push	{r3, lr}

  st_lld_stop_alarm();
 8000512:	f7ff ffc5 	bl	80004a0 <st_lld_stop_alarm>
}
 8000516:	bf00      	nop
 8000518:	bd08      	pop	{r3, pc}
 800051a:	bf00      	nop
 800051c:	0000      	movs	r0, r0
	...

08000520 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8000520:	b500      	push	{lr}
 8000522:	b083      	sub	sp, #12
 8000524:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
 8000526:	9801      	ldr	r0, [sp, #4]
 8000528:	f7ff ffc2 	bl	80004b0 <st_lld_set_alarm>
}
 800052c:	bf00      	nop
 800052e:	b003      	add	sp, #12
 8000530:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000540 <ch_queue_init.lto_priv.1>:
 *
 * @param[out] qp       pointer to the queue header
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {
 8000540:	b082      	sub	sp, #8
 8000542:	9001      	str	r0, [sp, #4]

  qp->next = qp;
 8000544:	9b01      	ldr	r3, [sp, #4]
 8000546:	9a01      	ldr	r2, [sp, #4]
 8000548:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 800054a:	9b01      	ldr	r3, [sp, #4]
 800054c:	9a01      	ldr	r2, [sp, #4]
 800054e:	605a      	str	r2, [r3, #4]
}
 8000550:	bf00      	nop
 8000552:	b002      	add	sp, #8
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
	...

08000560 <chSysLock.lto_priv.1>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to disabling interrupts.
 *
 * @special
 */
static inline void chSysLock(void) {
 8000560:	b082      	sub	sp, #8
 8000562:	2330      	movs	r3, #48	; 0x30
 8000564:	9301      	str	r3, [sp, #4]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000566:	9b01      	ldr	r3, [sp, #4]
 8000568:	f383 8811 	msr	BASEPRI, r3
}
 800056c:	bf00      	nop
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800056e:	bf00      	nop

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
}
 8000570:	bf00      	nop
 8000572:	b002      	add	sp, #8
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
	...

08000580 <chSysUnlock.lto_priv.1>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to enabling interrupts.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8000580:	b082      	sub	sp, #8
 8000582:	2300      	movs	r3, #0
 8000584:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000586:	9b01      	ldr	r3, [sp, #4]
 8000588:	f383 8811 	msr	BASEPRI, r3
}
 800058c:	bf00      	nop
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800058e:	bf00      	nop
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
              (currcore->rlist.current->hdr.pqueue.prio >= currcore->rlist.pqueue.next->prio),
              "priority order violation");

  port_unlock();
}
 8000590:	bf00      	nop
 8000592:	b002      	add	sp, #8
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
	...

080005a0 <chThdQueueObjectInit.lto_priv.1>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 80005a0:	b500      	push	{lr}
 80005a2:	b083      	sub	sp, #12
 80005a4:	9001      	str	r0, [sp, #4]

  ch_queue_init(&tqp->queue);
 80005a6:	9b01      	ldr	r3, [sp, #4]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ffc9 	bl	8000540 <ch_queue_init.lto_priv.1>
}
 80005ae:	bf00      	nop
 80005b0:	b003      	add	sp, #12
 80005b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80005b6:	bf00      	nop
	...

080005c0 <osalSysLock.lto_priv.1>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 80005c0:	b508      	push	{r3, lr}

  chSysLock();
 80005c2:	f7ff ffcd 	bl	8000560 <chSysLock.lto_priv.1>
}
 80005c6:	bf00      	nop
 80005c8:	bd08      	pop	{r3, pc}
 80005ca:	bf00      	nop
 80005cc:	0000      	movs	r0, r0
	...

080005d0 <osalSysUnlock.lto_priv.1>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 80005d0:	b508      	push	{r3, lr}

  chSysUnlock();
 80005d2:	f7ff ffd5 	bl	8000580 <chSysUnlock.lto_priv.1>
}
 80005d6:	bf00      	nop
 80005d8:	bd08      	pop	{r3, pc}
 80005da:	bf00      	nop
 80005dc:	0000      	movs	r0, r0
	...

080005e0 <osalThreadQueueObjectInit.lto_priv.1>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 80005e0:	b500      	push	{lr}
 80005e2:	b083      	sub	sp, #12
 80005e4:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
 80005e6:	9801      	ldr	r0, [sp, #4]
 80005e8:	f7ff ffda 	bl	80005a0 <chThdQueueObjectInit.lto_priv.1>
}
 80005ec:	bf00      	nop
 80005ee:	b003      	add	sp, #12
 80005f0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000600 <osalThreadEnqueueTimeoutS.lto_priv.1>:
 *                      specification.
 *
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {
 8000600:	b500      	push	{lr}
 8000602:	b083      	sub	sp, #12
 8000604:	9001      	str	r0, [sp, #4]
 8000606:	9100      	str	r1, [sp, #0]

  return chThdEnqueueTimeoutS(tqp, timeout);
 8000608:	9900      	ldr	r1, [sp, #0]
 800060a:	9801      	ldr	r0, [sp, #4]
 800060c:	f002 ffb8 	bl	8003580 <chThdEnqueueTimeoutS>
 8000610:	4603      	mov	r3, r0
}
 8000612:	4618      	mov	r0, r3
 8000614:	b003      	add	sp, #12
 8000616:	f85d fb04 	ldr.w	pc, [sp], #4
 800061a:	bf00      	nop
 800061c:	0000      	movs	r0, r0
	...

08000620 <osalThreadDequeueNextI.lto_priv.1>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8000620:	b500      	push	{lr}
 8000622:	b083      	sub	sp, #12
 8000624:	9001      	str	r0, [sp, #4]
 8000626:	9100      	str	r1, [sp, #0]

  chThdDequeueNextI(tqp, msg);
 8000628:	9900      	ldr	r1, [sp, #0]
 800062a:	9801      	ldr	r0, [sp, #4]
 800062c:	f002 ffc8 	bl	80035c0 <chThdDequeueNextI>
}
 8000630:	bf00      	nop
 8000632:	b003      	add	sp, #12
 8000634:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000640 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 8000640:	b500      	push	{lr}
 8000642:	b087      	sub	sp, #28
 8000644:	9003      	str	r0, [sp, #12]
 8000646:	9102      	str	r1, [sp, #8]
 8000648:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 800064a:	9b03      	ldr	r3, [sp, #12]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	9a01      	ldr	r2, [sp, #4]
 8000650:	429a      	cmp	r2, r3
 8000652:	d902      	bls.n	800065a <iq_read+0x1a>
    n = iqGetFullI(iqp);
 8000654:	9b03      	ldr	r3, [sp, #12]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800065a:	9b03      	ldr	r3, [sp, #12]
 800065c:	691a      	ldr	r2, [r3, #16]
 800065e:	9b03      	ldr	r3, [sp, #12]
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 8000666:	9a01      	ldr	r2, [sp, #4]
 8000668:	9b05      	ldr	r3, [sp, #20]
 800066a:	429a      	cmp	r2, r3
 800066c:	d20d      	bcs.n	800068a <iq_read+0x4a>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800066e:	9b03      	ldr	r3, [sp, #12]
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	9a01      	ldr	r2, [sp, #4]
 8000674:	4619      	mov	r1, r3
 8000676:	9802      	ldr	r0, [sp, #8]
 8000678:	f01b ffde 	bl	801c638 <memcpy>
    iqp->q_rdptr += n;
 800067c:	9b03      	ldr	r3, [sp, #12]
 800067e:	699a      	ldr	r2, [r3, #24]
 8000680:	9b01      	ldr	r3, [sp, #4]
 8000682:	441a      	add	r2, r3
 8000684:	9b03      	ldr	r3, [sp, #12]
 8000686:	619a      	str	r2, [r3, #24]
 8000688:	e02b      	b.n	80006e2 <iq_read+0xa2>
  }
  else if (n > s1) {
 800068a:	9a01      	ldr	r2, [sp, #4]
 800068c:	9b05      	ldr	r3, [sp, #20]
 800068e:	429a      	cmp	r2, r3
 8000690:	d91c      	bls.n	80006cc <iq_read+0x8c>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000692:	9b03      	ldr	r3, [sp, #12]
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	9a05      	ldr	r2, [sp, #20]
 8000698:	4619      	mov	r1, r3
 800069a:	9802      	ldr	r0, [sp, #8]
 800069c:	f01b ffcc 	bl	801c638 <memcpy>
    bp += s1;
 80006a0:	9a02      	ldr	r2, [sp, #8]
 80006a2:	9b05      	ldr	r3, [sp, #20]
 80006a4:	4413      	add	r3, r2
 80006a6:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 80006a8:	9a01      	ldr	r2, [sp, #4]
 80006aa:	9b05      	ldr	r3, [sp, #20]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	9304      	str	r3, [sp, #16]
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80006b0:	9b03      	ldr	r3, [sp, #12]
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	9a04      	ldr	r2, [sp, #16]
 80006b6:	4619      	mov	r1, r3
 80006b8:	9802      	ldr	r0, [sp, #8]
 80006ba:	f01b ffbd 	bl	801c638 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80006be:	9b03      	ldr	r3, [sp, #12]
 80006c0:	68da      	ldr	r2, [r3, #12]
 80006c2:	9b04      	ldr	r3, [sp, #16]
 80006c4:	441a      	add	r2, r3
 80006c6:	9b03      	ldr	r3, [sp, #12]
 80006c8:	619a      	str	r2, [r3, #24]
 80006ca:	e00a      	b.n	80006e2 <iq_read+0xa2>
  }
  else {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80006cc:	9b03      	ldr	r3, [sp, #12]
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	9a01      	ldr	r2, [sp, #4]
 80006d2:	4619      	mov	r1, r3
 80006d4:	9802      	ldr	r0, [sp, #8]
 80006d6:	f01b ffaf 	bl	801c638 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80006da:	9b03      	ldr	r3, [sp, #12]
 80006dc:	68da      	ldr	r2, [r3, #12]
 80006de:	9b03      	ldr	r3, [sp, #12]
 80006e0:	619a      	str	r2, [r3, #24]
  }

  iqp->q_counter -= n;
 80006e2:	9b03      	ldr	r3, [sp, #12]
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	9b01      	ldr	r3, [sp, #4]
 80006e8:	1ad2      	subs	r2, r2, r3
 80006ea:	9b03      	ldr	r3, [sp, #12]
 80006ec:	609a      	str	r2, [r3, #8]
  return n;
 80006ee:	9b01      	ldr	r3, [sp, #4]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	b007      	add	sp, #28
 80006f4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000700 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 8000700:	b500      	push	{lr}
 8000702:	b087      	sub	sp, #28
 8000704:	9003      	str	r0, [sp, #12]
 8000706:	9102      	str	r1, [sp, #8]
 8000708:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 800070a:	9b03      	ldr	r3, [sp, #12]
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	9a01      	ldr	r2, [sp, #4]
 8000710:	429a      	cmp	r2, r3
 8000712:	d902      	bls.n	800071a <oq_write+0x1a>
    n = oqGetEmptyI(oqp);
 8000714:	9b03      	ldr	r3, [sp, #12]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800071a:	9b03      	ldr	r3, [sp, #12]
 800071c:	691a      	ldr	r2, [r3, #16]
 800071e:	9b03      	ldr	r3, [sp, #12]
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 8000726:	9a01      	ldr	r2, [sp, #4]
 8000728:	9b05      	ldr	r3, [sp, #20]
 800072a:	429a      	cmp	r2, r3
 800072c:	d20d      	bcs.n	800074a <oq_write+0x4a>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800072e:	9b03      	ldr	r3, [sp, #12]
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	9a01      	ldr	r2, [sp, #4]
 8000734:	9902      	ldr	r1, [sp, #8]
 8000736:	4618      	mov	r0, r3
 8000738:	f01b ff7e 	bl	801c638 <memcpy>
    oqp->q_wrptr += n;
 800073c:	9b03      	ldr	r3, [sp, #12]
 800073e:	695a      	ldr	r2, [r3, #20]
 8000740:	9b01      	ldr	r3, [sp, #4]
 8000742:	441a      	add	r2, r3
 8000744:	9b03      	ldr	r3, [sp, #12]
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	e02b      	b.n	80007a2 <oq_write+0xa2>
  }
  else if (n > s1) {
 800074a:	9a01      	ldr	r2, [sp, #4]
 800074c:	9b05      	ldr	r3, [sp, #20]
 800074e:	429a      	cmp	r2, r3
 8000750:	d91c      	bls.n	800078c <oq_write+0x8c>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000752:	9b03      	ldr	r3, [sp, #12]
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	9a05      	ldr	r2, [sp, #20]
 8000758:	9902      	ldr	r1, [sp, #8]
 800075a:	4618      	mov	r0, r3
 800075c:	f01b ff6c 	bl	801c638 <memcpy>
    bp += s1;
 8000760:	9a02      	ldr	r2, [sp, #8]
 8000762:	9b05      	ldr	r3, [sp, #20]
 8000764:	4413      	add	r3, r2
 8000766:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 8000768:	9a01      	ldr	r2, [sp, #4]
 800076a:	9b05      	ldr	r3, [sp, #20]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	9304      	str	r3, [sp, #16]
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8000770:	9b03      	ldr	r3, [sp, #12]
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	9a04      	ldr	r2, [sp, #16]
 8000776:	9902      	ldr	r1, [sp, #8]
 8000778:	4618      	mov	r0, r3
 800077a:	f01b ff5d 	bl	801c638 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 800077e:	9b03      	ldr	r3, [sp, #12]
 8000780:	68da      	ldr	r2, [r3, #12]
 8000782:	9b04      	ldr	r3, [sp, #16]
 8000784:	441a      	add	r2, r3
 8000786:	9b03      	ldr	r3, [sp, #12]
 8000788:	615a      	str	r2, [r3, #20]
 800078a:	e00a      	b.n	80007a2 <oq_write+0xa2>
  }
  else {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800078c:	9b03      	ldr	r3, [sp, #12]
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	9a01      	ldr	r2, [sp, #4]
 8000792:	9902      	ldr	r1, [sp, #8]
 8000794:	4618      	mov	r0, r3
 8000796:	f01b ff4f 	bl	801c638 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 800079a:	9b03      	ldr	r3, [sp, #12]
 800079c:	68da      	ldr	r2, [r3, #12]
 800079e:	9b03      	ldr	r3, [sp, #12]
 80007a0:	615a      	str	r2, [r3, #20]
  }

  oqp->q_counter -= n;
 80007a2:	9b03      	ldr	r3, [sp, #12]
 80007a4:	689a      	ldr	r2, [r3, #8]
 80007a6:	9b01      	ldr	r3, [sp, #4]
 80007a8:	1ad2      	subs	r2, r2, r3
 80007aa:	9b03      	ldr	r3, [sp, #12]
 80007ac:	609a      	str	r2, [r3, #8]
  return n;
 80007ae:	9b01      	ldr	r3, [sp, #4]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	b007      	add	sp, #28
 80007b4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080007c0 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 80007c0:	b500      	push	{lr}
 80007c2:	b085      	sub	sp, #20
 80007c4:	9003      	str	r0, [sp, #12]
 80007c6:	9102      	str	r1, [sp, #8]
 80007c8:	9201      	str	r2, [sp, #4]
 80007ca:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&iqp->q_waiting);
 80007cc:	9b03      	ldr	r3, [sp, #12]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff06 	bl	80005e0 <osalThreadQueueObjectInit.lto_priv.1>
  iqp->q_counter = 0;
 80007d4:	9b03      	ldr	r3, [sp, #12]
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
 80007da:	9b03      	ldr	r3, [sp, #12]
 80007dc:	9a02      	ldr	r2, [sp, #8]
 80007de:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 80007e0:	9b03      	ldr	r3, [sp, #12]
 80007e2:	9a02      	ldr	r2, [sp, #8]
 80007e4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 80007e6:	9b03      	ldr	r3, [sp, #12]
 80007e8:	9a02      	ldr	r2, [sp, #8]
 80007ea:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 80007ec:	9a02      	ldr	r2, [sp, #8]
 80007ee:	9b01      	ldr	r3, [sp, #4]
 80007f0:	441a      	add	r2, r3
 80007f2:	9b03      	ldr	r3, [sp, #12]
 80007f4:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
 80007f6:	9b03      	ldr	r3, [sp, #12]
 80007f8:	9a00      	ldr	r2, [sp, #0]
 80007fa:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 80007fc:	9b03      	ldr	r3, [sp, #12]
 80007fe:	9a06      	ldr	r2, [sp, #24]
 8000800:	621a      	str	r2, [r3, #32]
}
 8000802:	bf00      	nop
 8000804:	b005      	add	sp, #20
 8000806:	f85d fb04 	ldr.w	pc, [sp], #4
 800080a:	bf00      	nop
 800080c:	0000      	movs	r0, r0
	...

08000810 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8000810:	b500      	push	{lr}
 8000812:	b083      	sub	sp, #12
 8000814:	9001      	str	r0, [sp, #4]
 8000816:	460b      	mov	r3, r1
 8000818:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 800081c:	9b01      	ldr	r3, [sp, #4]
 800081e:	695a      	ldr	r2, [r3, #20]
 8000820:	9b01      	ldr	r3, [sp, #4]
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	429a      	cmp	r2, r3
 8000826:	d105      	bne.n	8000834 <iqPutI+0x24>
 8000828:	9b01      	ldr	r3, [sp, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <iqPutI+0x24>
 8000830:	2301      	movs	r3, #1
 8000832:	e000      	b.n	8000836 <iqPutI+0x26>
 8000834:	2300      	movs	r3, #0
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	f083 0301 	eor.w	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d01d      	beq.n	8000882 <iqPutI+0x72>
    iqp->q_counter++;
 8000846:	9b01      	ldr	r3, [sp, #4]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	9b01      	ldr	r3, [sp, #4]
 800084e:	609a      	str	r2, [r3, #8]
    *iqp->q_wrptr++ = b;
 8000850:	9b01      	ldr	r3, [sp, #4]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	1c59      	adds	r1, r3, #1
 8000856:	9a01      	ldr	r2, [sp, #4]
 8000858:	6151      	str	r1, [r2, #20]
 800085a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800085e:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8000860:	9b01      	ldr	r3, [sp, #4]
 8000862:	695a      	ldr	r2, [r3, #20]
 8000864:	9b01      	ldr	r3, [sp, #4]
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	429a      	cmp	r2, r3
 800086a:	d303      	bcc.n	8000874 <iqPutI+0x64>
      iqp->q_wrptr = iqp->q_buffer;
 800086c:	9b01      	ldr	r3, [sp, #4]
 800086e:	68da      	ldr	r2, [r3, #12]
 8000870:	9b01      	ldr	r3, [sp, #4]
 8000872:	615a      	str	r2, [r3, #20]
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 8000874:	9b01      	ldr	r3, [sp, #4]
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fed1 	bl	8000620 <osalThreadDequeueNextI.lto_priv.1>

    return MSG_OK;
 800087e:	2300      	movs	r3, #0
 8000880:	e001      	b.n	8000886 <iqPutI+0x76>
  }

  return MSG_TIMEOUT;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000886:	4618      	mov	r0, r3
 8000888:	b003      	add	sp, #12
 800088a:	f85d fb04 	ldr.w	pc, [sp], #4
 800088e:	bf00      	nop

08000890 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8000890:	b500      	push	{lr}
 8000892:	b085      	sub	sp, #20
 8000894:	9001      	str	r0, [sp, #4]
 8000896:	9100      	str	r1, [sp, #0]
  uint8_t b;

  osalSysLock();
 8000898:	f7ff fe92 	bl	80005c0 <osalSysLock.lto_priv.1>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 800089c:	e00c      	b.n	80008b8 <iqGetTimeout+0x28>
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800089e:	9b01      	ldr	r3, [sp, #4]
 80008a0:	9900      	ldr	r1, [sp, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff feac 	bl	8000600 <osalThreadEnqueueTimeoutS.lto_priv.1>
 80008a8:	9002      	str	r0, [sp, #8]
    if (msg < MSG_OK) {
 80008aa:	9b02      	ldr	r3, [sp, #8]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	da03      	bge.n	80008b8 <iqGetTimeout+0x28>
      osalSysUnlock();
 80008b0:	f7ff fe8e 	bl	80005d0 <osalSysUnlock.lto_priv.1>
      return msg;
 80008b4:	9b02      	ldr	r3, [sp, #8]
 80008b6:	e026      	b.n	8000906 <iqGetTimeout+0x76>
  while (iqIsEmptyI(iqp)) {
 80008b8:	9b01      	ldr	r3, [sp, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d0ee      	beq.n	800089e <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 80008c0:	9b01      	ldr	r3, [sp, #4]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	1e5a      	subs	r2, r3, #1
 80008c6:	9b01      	ldr	r3, [sp, #4]
 80008c8:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
 80008ca:	9b01      	ldr	r3, [sp, #4]
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	1c59      	adds	r1, r3, #1
 80008d0:	9a01      	ldr	r2, [sp, #4]
 80008d2:	6191      	str	r1, [r2, #24]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	f88d 300f 	strb.w	r3, [sp, #15]
  if (iqp->q_rdptr >= iqp->q_top) {
 80008da:	9b01      	ldr	r3, [sp, #4]
 80008dc:	699a      	ldr	r2, [r3, #24]
 80008de:	9b01      	ldr	r3, [sp, #4]
 80008e0:	691b      	ldr	r3, [r3, #16]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d303      	bcc.n	80008ee <iqGetTimeout+0x5e>
    iqp->q_rdptr = iqp->q_buffer;
 80008e6:	9b01      	ldr	r3, [sp, #4]
 80008e8:	68da      	ldr	r2, [r3, #12]
 80008ea:	9b01      	ldr	r3, [sp, #4]
 80008ec:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 80008ee:	9b01      	ldr	r3, [sp, #4]
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <iqGetTimeout+0x6e>
    iqp->q_notify(iqp);
 80008f6:	9b01      	ldr	r3, [sp, #4]
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	9801      	ldr	r0, [sp, #4]
 80008fc:	4798      	blx	r3
  }

  osalSysUnlock();
 80008fe:	f7ff fe67 	bl	80005d0 <osalSysUnlock.lto_priv.1>

  return (msg_t)b;
 8000902:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8000906:	4618      	mov	r0, r3
 8000908:	b005      	add	sp, #20
 800090a:	f85d fb04 	ldr.w	pc, [sp], #4
 800090e:	bf00      	nop

08000910 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8000910:	b500      	push	{lr}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	9003      	str	r0, [sp, #12]
 8000916:	9102      	str	r1, [sp, #8]
 8000918:	9201      	str	r2, [sp, #4]
 800091a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = iqp->q_notify;
 800091c:	9b03      	ldr	r3, [sp, #12]
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8000922:	9b01      	ldr	r3, [sp, #4]
 8000924:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8000926:	f7ff fe4b 	bl	80005c0 <osalSysLock.lto_priv.1>

  while (n > 0U) {
 800092a:	e024      	b.n	8000976 <iqReadTimeout+0x66>
    size_t done;

    done = iq_read(iqp, bp, n);
 800092c:	9a01      	ldr	r2, [sp, #4]
 800092e:	9902      	ldr	r1, [sp, #8]
 8000930:	9803      	ldr	r0, [sp, #12]
 8000932:	f7ff fe85 	bl	8000640 <iq_read>
 8000936:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8000938:	9b05      	ldr	r3, [sp, #20]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d109      	bne.n	8000952 <iqReadTimeout+0x42>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800093e:	9b03      	ldr	r3, [sp, #12]
 8000940:	9900      	ldr	r1, [sp, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fe5c 	bl	8000600 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8000948:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 800094a:	9b04      	ldr	r3, [sp, #16]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d012      	beq.n	8000976 <iqReadTimeout+0x66>
        break;
 8000950:	e014      	b.n	800097c <iqReadTimeout+0x6c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 8000952:	9b07      	ldr	r3, [sp, #28]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <iqReadTimeout+0x4e>
        nfy(iqp);
 8000958:	9b07      	ldr	r3, [sp, #28]
 800095a:	9803      	ldr	r0, [sp, #12]
 800095c:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 800095e:	f7ff fe37 	bl	80005d0 <osalSysUnlock.lto_priv.1>

      n  -= done;
 8000962:	9a01      	ldr	r2, [sp, #4]
 8000964:	9b05      	ldr	r3, [sp, #20]
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	9301      	str	r3, [sp, #4]
      bp += done;
 800096a:	9a02      	ldr	r2, [sp, #8]
 800096c:	9b05      	ldr	r3, [sp, #20]
 800096e:	4413      	add	r3, r2
 8000970:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8000972:	f7ff fe25 	bl	80005c0 <osalSysLock.lto_priv.1>
  while (n > 0U) {
 8000976:	9b01      	ldr	r3, [sp, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1d7      	bne.n	800092c <iqReadTimeout+0x1c>
    }
  }

  osalSysUnlock();
 800097c:	f7ff fe28 	bl	80005d0 <osalSysUnlock.lto_priv.1>
  return max - n;
 8000980:	9a06      	ldr	r2, [sp, #24]
 8000982:	9b01      	ldr	r3, [sp, #4]
 8000984:	1ad3      	subs	r3, r2, r3
}
 8000986:	4618      	mov	r0, r3
 8000988:	b009      	add	sp, #36	; 0x24
 800098a:	f85d fb04 	ldr.w	pc, [sp], #4
 800098e:	bf00      	nop

08000990 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 8000990:	b500      	push	{lr}
 8000992:	b085      	sub	sp, #20
 8000994:	9003      	str	r0, [sp, #12]
 8000996:	9102      	str	r1, [sp, #8]
 8000998:	9201      	str	r2, [sp, #4]
 800099a:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
 800099c:	9b03      	ldr	r3, [sp, #12]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe1e 	bl	80005e0 <osalThreadQueueObjectInit.lto_priv.1>
  oqp->q_counter = size;
 80009a4:	9b03      	ldr	r3, [sp, #12]
 80009a6:	9a01      	ldr	r2, [sp, #4]
 80009a8:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
 80009aa:	9b03      	ldr	r3, [sp, #12]
 80009ac:	9a02      	ldr	r2, [sp, #8]
 80009ae:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 80009b0:	9b03      	ldr	r3, [sp, #12]
 80009b2:	9a02      	ldr	r2, [sp, #8]
 80009b4:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 80009b6:	9b03      	ldr	r3, [sp, #12]
 80009b8:	9a02      	ldr	r2, [sp, #8]
 80009ba:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 80009bc:	9a02      	ldr	r2, [sp, #8]
 80009be:	9b01      	ldr	r3, [sp, #4]
 80009c0:	441a      	add	r2, r3
 80009c2:	9b03      	ldr	r3, [sp, #12]
 80009c4:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
 80009c6:	9b03      	ldr	r3, [sp, #12]
 80009c8:	9a00      	ldr	r2, [sp, #0]
 80009ca:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 80009cc:	9b03      	ldr	r3, [sp, #12]
 80009ce:	9a06      	ldr	r2, [sp, #24]
 80009d0:	621a      	str	r2, [r3, #32]
}
 80009d2:	bf00      	nop
 80009d4:	b005      	add	sp, #20
 80009d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80009da:	bf00      	nop
 80009dc:	0000      	movs	r0, r0
	...

080009e0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 80009e0:	b500      	push	{lr}
 80009e2:	b087      	sub	sp, #28
 80009e4:	9003      	str	r0, [sp, #12]
 80009e6:	460b      	mov	r3, r1
 80009e8:	9201      	str	r2, [sp, #4]
 80009ea:	f88d 300b 	strb.w	r3, [sp, #11]

  osalSysLock();
 80009ee:	f7ff fde7 	bl	80005c0 <osalSysLock.lto_priv.1>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 80009f2:	e00c      	b.n	8000a0e <oqPutTimeout+0x2e>
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80009f4:	9b03      	ldr	r3, [sp, #12]
 80009f6:	9901      	ldr	r1, [sp, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fe01 	bl	8000600 <osalThreadEnqueueTimeoutS.lto_priv.1>
 80009fe:	9005      	str	r0, [sp, #20]
    if (msg < MSG_OK) {
 8000a00:	9b05      	ldr	r3, [sp, #20]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	da03      	bge.n	8000a0e <oqPutTimeout+0x2e>
      osalSysUnlock();
 8000a06:	f7ff fde3 	bl	80005d0 <osalSysUnlock.lto_priv.1>
      return msg;
 8000a0a:	9b05      	ldr	r3, [sp, #20]
 8000a0c:	e025      	b.n	8000a5a <oqPutTimeout+0x7a>
  while (oqIsFullI(oqp)) {
 8000a0e:	9b03      	ldr	r3, [sp, #12]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0ee      	beq.n	80009f4 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8000a16:	9b03      	ldr	r3, [sp, #12]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	1e5a      	subs	r2, r3, #1
 8000a1c:	9b03      	ldr	r3, [sp, #12]
 8000a1e:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 8000a20:	9b03      	ldr	r3, [sp, #12]
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	1c59      	adds	r1, r3, #1
 8000a26:	9a03      	ldr	r2, [sp, #12]
 8000a28:	6151      	str	r1, [r2, #20]
 8000a2a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000a2e:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000a30:	9b03      	ldr	r3, [sp, #12]
 8000a32:	695a      	ldr	r2, [r3, #20]
 8000a34:	9b03      	ldr	r3, [sp, #12]
 8000a36:	691b      	ldr	r3, [r3, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d303      	bcc.n	8000a44 <oqPutTimeout+0x64>
    oqp->q_wrptr = oqp->q_buffer;
 8000a3c:	9b03      	ldr	r3, [sp, #12]
 8000a3e:	68da      	ldr	r2, [r3, #12]
 8000a40:	9b03      	ldr	r3, [sp, #12]
 8000a42:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8000a44:	9b03      	ldr	r3, [sp, #12]
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d003      	beq.n	8000a54 <oqPutTimeout+0x74>
    oqp->q_notify(oqp);
 8000a4c:	9b03      	ldr	r3, [sp, #12]
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	9803      	ldr	r0, [sp, #12]
 8000a52:	4798      	blx	r3
  }

  osalSysUnlock();
 8000a54:	f7ff fdbc 	bl	80005d0 <osalSysUnlock.lto_priv.1>

  return MSG_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	b007      	add	sp, #28
 8000a5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a62:	bf00      	nop
	...

08000a70 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 8000a70:	b500      	push	{lr}
 8000a72:	b085      	sub	sp, #20
 8000a74:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8000a76:	9b01      	ldr	r3, [sp, #4]
 8000a78:	695a      	ldr	r2, [r3, #20]
 8000a7a:	9b01      	ldr	r3, [sp, #4]
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d105      	bne.n	8000a8e <oqGetI+0x1e>
 8000a82:	9b01      	ldr	r3, [sp, #4]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <oqGetI+0x1e>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <oqGetI+0x20>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	f083 0301 	eor.w	r3, r3, #1
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d01e      	beq.n	8000ade <oqGetI+0x6e>
    uint8_t b;

    oqp->q_counter++;
 8000aa0:	9b01      	ldr	r3, [sp, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	9b01      	ldr	r3, [sp, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
    b = *oqp->q_rdptr++;
 8000aaa:	9b01      	ldr	r3, [sp, #4]
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	1c59      	adds	r1, r3, #1
 8000ab0:	9a01      	ldr	r2, [sp, #4]
 8000ab2:	6191      	str	r1, [r2, #24]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	f88d 300f 	strb.w	r3, [sp, #15]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000aba:	9b01      	ldr	r3, [sp, #4]
 8000abc:	699a      	ldr	r2, [r3, #24]
 8000abe:	9b01      	ldr	r3, [sp, #4]
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d303      	bcc.n	8000ace <oqGetI+0x5e>
      oqp->q_rdptr = oqp->q_buffer;
 8000ac6:	9b01      	ldr	r3, [sp, #4]
 8000ac8:	68da      	ldr	r2, [r3, #12]
 8000aca:	9b01      	ldr	r3, [sp, #4]
 8000acc:	619a      	str	r2, [r3, #24]
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 8000ace:	9b01      	ldr	r3, [sp, #4]
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fda4 	bl	8000620 <osalThreadDequeueNextI.lto_priv.1>

    return (msg_t)b;
 8000ad8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000adc:	e001      	b.n	8000ae2 <oqGetI+0x72>
  }

  return MSG_TIMEOUT;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	b005      	add	sp, #20
 8000ae6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000aea:	bf00      	nop
 8000aec:	0000      	movs	r0, r0
	...

08000af0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000af0:	b500      	push	{lr}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	9003      	str	r0, [sp, #12]
 8000af6:	9102      	str	r1, [sp, #8]
 8000af8:	9201      	str	r2, [sp, #4]
 8000afa:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = oqp->q_notify;
 8000afc:	9b03      	ldr	r3, [sp, #12]
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8000b02:	9b01      	ldr	r3, [sp, #4]
 8000b04:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8000b06:	f7ff fd5b 	bl	80005c0 <osalSysLock.lto_priv.1>

  while (n > 0U) {
 8000b0a:	e024      	b.n	8000b56 <oqWriteTimeout+0x66>
    size_t done;

    done = oq_write(oqp, bp, n);
 8000b0c:	9a01      	ldr	r2, [sp, #4]
 8000b0e:	9902      	ldr	r1, [sp, #8]
 8000b10:	9803      	ldr	r0, [sp, #12]
 8000b12:	f7ff fdf5 	bl	8000700 <oq_write>
 8000b16:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8000b18:	9b05      	ldr	r3, [sp, #20]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d109      	bne.n	8000b32 <oqWriteTimeout+0x42>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000b1e:	9b03      	ldr	r3, [sp, #12]
 8000b20:	9900      	ldr	r1, [sp, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fd6c 	bl	8000600 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8000b28:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8000b2a:	9b04      	ldr	r3, [sp, #16]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d012      	beq.n	8000b56 <oqWriteTimeout+0x66>
        break;
 8000b30:	e014      	b.n	8000b5c <oqWriteTimeout+0x6c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8000b32:	9b07      	ldr	r3, [sp, #28]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d002      	beq.n	8000b3e <oqWriteTimeout+0x4e>
        nfy(oqp);
 8000b38:	9b07      	ldr	r3, [sp, #28]
 8000b3a:	9803      	ldr	r0, [sp, #12]
 8000b3c:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8000b3e:	f7ff fd47 	bl	80005d0 <osalSysUnlock.lto_priv.1>

      n  -= done;
 8000b42:	9a01      	ldr	r2, [sp, #4]
 8000b44:	9b05      	ldr	r3, [sp, #20]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	9301      	str	r3, [sp, #4]
      bp += done;
 8000b4a:	9a02      	ldr	r2, [sp, #8]
 8000b4c:	9b05      	ldr	r3, [sp, #20]
 8000b4e:	4413      	add	r3, r2
 8000b50:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8000b52:	f7ff fd35 	bl	80005c0 <osalSysLock.lto_priv.1>
  while (n > 0U) {
 8000b56:	9b01      	ldr	r3, [sp, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1d7      	bne.n	8000b0c <oqWriteTimeout+0x1c>
    }
  }

  osalSysUnlock();
 8000b5c:	f7ff fd38 	bl	80005d0 <osalSysUnlock.lto_priv.1>
  return max - n;
 8000b60:	9a06      	ldr	r2, [sp, #24]
 8000b62:	9b01      	ldr	r3, [sp, #4]
 8000b64:	1ad3      	subs	r3, r2, r3
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	b009      	add	sp, #36	; 0x24
 8000b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b6e:	bf00      	nop

08000b70 <chSysLock.lto_priv.2>:
static inline void chSysLock(void) {
 8000b70:	b082      	sub	sp, #8
 8000b72:	2330      	movs	r3, #48	; 0x30
 8000b74:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000b76:	9b01      	ldr	r3, [sp, #4]
 8000b78:	f383 8811 	msr	BASEPRI, r3
}
 8000b7c:	bf00      	nop
}
 8000b7e:	bf00      	nop
}
 8000b80:	bf00      	nop
 8000b82:	b002      	add	sp, #8
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
	...

08000b90 <chSysUnlock.lto_priv.2>:
static inline void chSysUnlock(void) {
 8000b90:	b082      	sub	sp, #8
 8000b92:	2300      	movs	r3, #0
 8000b94:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000b96:	9b01      	ldr	r3, [sp, #4]
 8000b98:	f383 8811 	msr	BASEPRI, r3
}
 8000b9c:	bf00      	nop
}
 8000b9e:	bf00      	nop
}
 8000ba0:	bf00      	nop
 8000ba2:	b002      	add	sp, #8
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
	...

08000bb0 <chEvtObjectInit.lto_priv.0>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	9001      	str	r0, [sp, #4]

  esp->next = (event_listener_t *)esp;
 8000bb4:	9b01      	ldr	r3, [sp, #4]
 8000bb6:	9a01      	ldr	r2, [sp, #4]
 8000bb8:	601a      	str	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	b002      	add	sp, #8
 8000bbe:	4770      	bx	lr

08000bc0 <osalSysLock.lto_priv.2>:
static inline void osalSysLock(void) {
 8000bc0:	b508      	push	{r3, lr}
  chSysLock();
 8000bc2:	f7ff ffd5 	bl	8000b70 <chSysLock.lto_priv.2>
}
 8000bc6:	bf00      	nop
 8000bc8:	bd08      	pop	{r3, pc}
 8000bca:	bf00      	nop
 8000bcc:	0000      	movs	r0, r0
	...

08000bd0 <osalSysUnlock.lto_priv.2>:
static inline void osalSysUnlock(void) {
 8000bd0:	b508      	push	{r3, lr}
  chSysUnlock();
 8000bd2:	f7ff ffdd 	bl	8000b90 <chSysUnlock.lto_priv.2>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd08      	pop	{r3, pc}
 8000bda:	bf00      	nop
 8000bdc:	0000      	movs	r0, r0
	...

08000be0 <osalEventObjectInit>:
 *
 * @param[out] esp      pointer to the event source object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
 8000be0:	b500      	push	{lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	9001      	str	r0, [sp, #4]

  chEvtObjectInit(esp);
 8000be6:	9801      	ldr	r0, [sp, #4]
 8000be8:	f7ff ffe2 	bl	8000bb0 <chEvtObjectInit.lto_priv.0>
}
 8000bec:	bf00      	nop
 8000bee:	b003      	add	sp, #12
 8000bf0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000c00 <osalEventBroadcastFlagsI.lto_priv.1>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 8000c00:	b500      	push	{lr}
 8000c02:	b083      	sub	sp, #12
 8000c04:	9001      	str	r0, [sp, #4]
 8000c06:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
 8000c08:	9900      	ldr	r1, [sp, #0]
 8000c0a:	9801      	ldr	r0, [sp, #4]
 8000c0c:	f003 fc90 	bl	8004530 <chEvtBroadcastFlagsI>
}
 8000c10:	bf00      	nop
 8000c12:	b003      	add	sp, #12
 8000c14:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000c20 <_write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8000c20:	b500      	push	{lr}
 8000c22:	b085      	sub	sp, #20
 8000c24:	9003      	str	r0, [sp, #12]
 8000c26:	9102      	str	r1, [sp, #8]
 8000c28:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000c2a:	9b03      	ldr	r3, [sp, #12]
 8000c2c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295
 8000c34:	9a01      	ldr	r2, [sp, #4]
 8000c36:	9902      	ldr	r1, [sp, #8]
 8000c38:	f7ff ff5a 	bl	8000af0 <oqWriteTimeout>
 8000c3c:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	b005      	add	sp, #20
 8000c42:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c46:	bf00      	nop
	...

08000c50 <_read>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8000c50:	b500      	push	{lr}
 8000c52:	b085      	sub	sp, #20
 8000c54:	9003      	str	r0, [sp, #12]
 8000c56:	9102      	str	r1, [sp, #8]
 8000c58:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000c5a:	9b03      	ldr	r3, [sp, #12]
 8000c5c:	f103 000c 	add.w	r0, r3, #12
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	9a01      	ldr	r2, [sp, #4]
 8000c66:	9902      	ldr	r1, [sp, #8]
 8000c68:	f7ff fe52 	bl	8000910 <iqReadTimeout>
 8000c6c:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	b005      	add	sp, #20
 8000c72:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c76:	bf00      	nop
	...

08000c80 <_put>:

static msg_t _put(void *ip, uint8_t b) {
 8000c80:	b500      	push	{lr}
 8000c82:	b083      	sub	sp, #12
 8000c84:	9001      	str	r0, [sp, #4]
 8000c86:	460b      	mov	r3, r1
 8000c88:	f88d 3003 	strb.w	r3, [sp, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000c8c:	9b01      	ldr	r3, [sp, #4]
 8000c8e:	3330      	adds	r3, #48	; 0x30
 8000c90:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fea1 	bl	80009e0 <oqPutTimeout>
 8000c9e:	4603      	mov	r3, r0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	b003      	add	sp, #12
 8000ca4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000cb0 <_get>:

static msg_t _get(void *ip) {
 8000cb0:	b500      	push	{lr}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000cb6:	9b01      	ldr	r3, [sp, #4]
 8000cb8:	330c      	adds	r3, #12
 8000cba:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fde6 	bl	8000890 <iqGetTimeout>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	b003      	add	sp, #12
 8000cca:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cce:	bf00      	nop

08000cd0 <_putt>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8000cd0:	b500      	push	{lr}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	9003      	str	r0, [sp, #12]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	9201      	str	r2, [sp, #4]
 8000cda:	f88d 300b 	strb.w	r3, [sp, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000cde:	9b03      	ldr	r3, [sp, #12]
 8000ce0:	3330      	adds	r3, #48	; 0x30
 8000ce2:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8000ce6:	9a01      	ldr	r2, [sp, #4]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fe79 	bl	80009e0 <oqPutTimeout>
 8000cee:	4603      	mov	r3, r0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	b005      	add	sp, #20
 8000cf4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000d00 <_gett>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 8000d00:	b500      	push	{lr}
 8000d02:	b083      	sub	sp, #12
 8000d04:	9001      	str	r0, [sp, #4]
 8000d06:	9100      	str	r1, [sp, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000d08:	9b01      	ldr	r3, [sp, #4]
 8000d0a:	330c      	adds	r3, #12
 8000d0c:	9900      	ldr	r1, [sp, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fdbe 	bl	8000890 <iqGetTimeout>
 8000d14:	4603      	mov	r3, r0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	b003      	add	sp, #12
 8000d1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d1e:	bf00      	nop

08000d20 <_writet>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 8000d20:	b500      	push	{lr}
 8000d22:	b085      	sub	sp, #20
 8000d24:	9003      	str	r0, [sp, #12]
 8000d26:	9102      	str	r1, [sp, #8]
 8000d28:	9201      	str	r2, [sp, #4]
 8000d2a:	9300      	str	r3, [sp, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000d2c:	9b03      	ldr	r3, [sp, #12]
 8000d2e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000d32:	9b00      	ldr	r3, [sp, #0]
 8000d34:	9a01      	ldr	r2, [sp, #4]
 8000d36:	9902      	ldr	r1, [sp, #8]
 8000d38:	f7ff feda 	bl	8000af0 <oqWriteTimeout>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	b005      	add	sp, #20
 8000d42:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d46:	bf00      	nop
	...

08000d50 <_readt>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 8000d50:	b500      	push	{lr}
 8000d52:	b085      	sub	sp, #20
 8000d54:	9003      	str	r0, [sp, #12]
 8000d56:	9102      	str	r1, [sp, #8]
 8000d58:	9201      	str	r2, [sp, #4]
 8000d5a:	9300      	str	r3, [sp, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000d5c:	9b03      	ldr	r3, [sp, #12]
 8000d5e:	f103 000c 	add.w	r0, r3, #12
 8000d62:	9b00      	ldr	r3, [sp, #0]
 8000d64:	9a01      	ldr	r2, [sp, #4]
 8000d66:	9902      	ldr	r1, [sp, #8]
 8000d68:	f7ff fdd2 	bl	8000910 <iqReadTimeout>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	b005      	add	sp, #20
 8000d72:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d76:	bf00      	nop
	...

08000d80 <_ctl>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8000d80:	b086      	sub	sp, #24
 8000d82:	9003      	str	r0, [sp, #12]
 8000d84:	9102      	str	r1, [sp, #8]
 8000d86:	9201      	str	r2, [sp, #4]
  SerialDriver *sdp = (SerialDriver *)ip;
 8000d88:	9b03      	ldr	r3, [sp, #12]
 8000d8a:	9305      	str	r3, [sp, #20]

  osalDbgCheck(sdp != NULL);

  switch (operation) {
 8000d8c:	9b02      	ldr	r3, [sp, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <_ctl+0x1a>
 8000d92:	9b02      	ldr	r3, [sp, #8]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d103      	bne.n	8000da0 <_ctl+0x20>
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
    break;
 8000d98:	e005      	b.n	8000da6 <_ctl+0x26>
  case CHN_CTL_INVALID:
    return HAL_RET_UNKNOWN_CTL;
 8000d9a:	f06f 0313 	mvn.w	r3, #19
 8000d9e:	e003      	b.n	8000da8 <_ctl+0x28>
  default:
#if defined(SD_LLD_IMPLEMENTS_CTL)
    /* Delegating to the LLD if supported.*/
    return sd_lld_control(sdp, operation, arg);
#else
    return HAL_RET_UNKNOWN_CTL;
 8000da0:	f06f 0313 	mvn.w	r3, #19
 8000da4:	e000      	b.n	8000da8 <_ctl+0x28>
#endif
  }
  return HAL_RET_SUCCESS;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	b006      	add	sp, #24
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 8000db0:	b508      	push	{r3, lr}

  sd_lld_init();
 8000db2:	f000 fd8d 	bl	80018d0 <sd_lld_init>
}
 8000db6:	bf00      	nop
 8000db8:	bd08      	pop	{r3, pc}
 8000dba:	bf00      	nop
 8000dbc:	0000      	movs	r0, r0
	...

08000dc0 <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000dc0:	b500      	push	{lr}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	9005      	str	r0, [sp, #20]
 8000dc6:	9104      	str	r1, [sp, #16]
 8000dc8:	9203      	str	r2, [sp, #12]

  sdp->vmt = &vmt;
 8000dca:	9b05      	ldr	r3, [sp, #20]
 8000dcc:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <sdObjectInit+0x58>)
 8000dce:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
 8000dd0:	9b05      	ldr	r3, [sp, #20]
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff03 	bl	8000be0 <osalEventObjectInit>
  sdp->state = SD_STOP;
 8000dda:	9b05      	ldr	r3, [sp, #20]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	721a      	strb	r2, [r3, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000de0:	9b05      	ldr	r3, [sp, #20]
 8000de2:	f103 000c 	add.w	r0, r3, #12
 8000de6:	9b05      	ldr	r3, [sp, #20]
 8000de8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8000dec:	9b05      	ldr	r3, [sp, #20]
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	9b04      	ldr	r3, [sp, #16]
 8000df2:	2210      	movs	r2, #16
 8000df4:	f7ff fce4 	bl	80007c0 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000df8:	9b05      	ldr	r3, [sp, #20]
 8000dfa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000dfe:	9b05      	ldr	r3, [sp, #20]
 8000e00:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8000e04:	9b05      	ldr	r3, [sp, #20]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	9b03      	ldr	r3, [sp, #12]
 8000e0a:	2210      	movs	r2, #16
 8000e0c:	f7ff fdc0 	bl	8000990 <oqObjectInit>
}
 8000e10:	bf00      	nop
 8000e12:	b007      	add	sp, #28
 8000e14:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e18:	0801c930 	.word	0x0801c930
 8000e1c:	00000000 	.word	0x00000000

08000e20 <sdStart>:
 *                      configuration is used.
 * @return              The operation status.
 *
 * @api
 */
msg_t sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8000e20:	b500      	push	{lr}
 8000e22:	b085      	sub	sp, #20
 8000e24:	9001      	str	r0, [sp, #4]
 8000e26:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck(sdp != NULL);

  osalSysLock();
 8000e28:	f7ff feca 	bl	8000bc0 <osalSysLock.lto_priv.2>
                "invalid state");

#if defined(SD_LLD_ENHANCED_API)
  msg = sd_lld_start(sdp, config);
#else
  sd_lld_start(sdp, config);
 8000e2c:	9900      	ldr	r1, [sp, #0]
 8000e2e:	9801      	ldr	r0, [sp, #4]
 8000e30:	f000 fd7e 	bl	8001930 <sd_lld_start>
  msg = HAL_RET_SUCCESS;
 8000e34:	2300      	movs	r3, #0
 8000e36:	9303      	str	r3, [sp, #12]
#endif
  if (msg == HAL_RET_SUCCESS) {
 8000e38:	9b03      	ldr	r3, [sp, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d103      	bne.n	8000e46 <sdStart+0x26>
    sdp->state = SD_READY;
 8000e3e:	9b01      	ldr	r3, [sp, #4]
 8000e40:	2202      	movs	r2, #2
 8000e42:	721a      	strb	r2, [r3, #8]
 8000e44:	e002      	b.n	8000e4c <sdStart+0x2c>
  }
  else {
    sdp->state = SD_STOP;
 8000e46:	9b01      	ldr	r3, [sp, #4]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	721a      	strb	r2, [r3, #8]
  }

  osalSysUnlock();
 8000e4c:	f7ff fec0 	bl	8000bd0 <osalSysUnlock.lto_priv.2>

  return msg;
 8000e50:	9b03      	ldr	r3, [sp, #12]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	b005      	add	sp, #20
 8000e56:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e5a:	bf00      	nop
 8000e5c:	0000      	movs	r0, r0
	...

08000e60 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8000e60:	b500      	push	{lr}
 8000e62:	b083      	sub	sp, #12
 8000e64:	9001      	str	r0, [sp, #4]
 8000e66:	460b      	mov	r3, r1
 8000e68:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000e6c:	9b01      	ldr	r3, [sp, #4]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d105      	bne.n	8000e80 <sdIncomingDataI+0x20>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 8000e74:	9b01      	ldr	r3, [sp, #4]
 8000e76:	3304      	adds	r3, #4
 8000e78:	2104      	movs	r1, #4
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fec0 	bl	8000c00 <osalEventBroadcastFlagsI.lto_priv.1>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8000e80:	9b01      	ldr	r3, [sp, #4]
 8000e82:	330c      	adds	r3, #12
 8000e84:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fcc0 	bl	8000810 <iqPutI>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	da06      	bge.n	8000ea4 <sdIncomingDataI+0x44>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 8000e96:	9b01      	ldr	r3, [sp, #4]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff feae 	bl	8000c00 <osalEventBroadcastFlagsI.lto_priv.1>
}
 8000ea4:	bf00      	nop
 8000ea6:	b003      	add	sp, #12
 8000ea8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eac:	0000      	movs	r0, r0
	...

08000eb0 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	9001      	str	r0, [sp, #4]
 8000eb4:	9100      	str	r1, [sp, #0]
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8000eb6:	9b00      	ldr	r3, [sp, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4a11      	ldr	r2, [pc, #68]	; (8000f00 <nvicEnableVector+0x50>)
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	b2d9      	uxtb	r1, r3
 8000ec0:	9b01      	ldr	r3, [sp, #4]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000ec8:	460a      	mov	r2, r1
 8000eca:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000ecc:	9b01      	ldr	r3, [sp, #4]
 8000ece:	f003 021f 	and.w	r2, r3, #31
 8000ed2:	490b      	ldr	r1, [pc, #44]	; (8000f00 <nvicEnableVector+0x50>)
 8000ed4:	9b01      	ldr	r3, [sp, #4]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	3360      	adds	r3, #96	; 0x60
 8000ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000ee4:	9b01      	ldr	r3, [sp, #4]
 8000ee6:	f003 021f 	and.w	r2, r3, #31
 8000eea:	4905      	ldr	r1, [pc, #20]	; (8000f00 <nvicEnableVector+0x50>)
 8000eec:	9b01      	ldr	r3, [sp, #4]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3)
  /* If the IRQ is enabled from secure mode then it is marked as secure
     interrupt in ITNS.*/
  NVIC->__ITNS[n >> 5U] &= ~(1U << (n & 0x1FU));
#endif
}
 8000efa:	bf00      	nop
 8000efc:	b002      	add	sp, #8
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
	...

08000f10 <exti0_irq_init>:

static inline void exti0_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI0_NUMBER, STM32_IRQ_EXTI0_PRIORITY);
#endif
}
 8000f10:	bf00      	nop
 8000f12:	4770      	bx	lr
	...

08000f20 <exti1_irq_init>:

static inline void exti1_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI1_NUMBER, STM32_IRQ_EXTI1_PRIORITY);
#endif
}
 8000f20:	bf00      	nop
 8000f22:	4770      	bx	lr
	...

08000f30 <exti2_irq_init>:

static inline void exti2_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI2_NUMBER, STM32_IRQ_EXTI2_PRIORITY);
#endif
}
 8000f30:	bf00      	nop
 8000f32:	4770      	bx	lr
	...

08000f40 <exti3_irq_init>:

static inline void exti3_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI3_NUMBER, STM32_IRQ_EXTI3_PRIORITY);
#endif
}
 8000f40:	bf00      	nop
 8000f42:	4770      	bx	lr
	...

08000f50 <exti4_irq_init>:

static inline void exti4_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI4_NUMBER, STM32_IRQ_EXTI4_PRIORITY);
#endif
}
 8000f50:	bf00      	nop
 8000f52:	4770      	bx	lr
	...

08000f60 <exti5_9_irq_init>:

static inline void exti5_9_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI5_9_NUMBER, STM32_IRQ_EXTI5_9_PRIORITY);
#endif
}
 8000f60:	bf00      	nop
 8000f62:	4770      	bx	lr
	...

08000f70 <exti10_15_irq_init>:

static inline void exti10_15_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI10_15_NUMBER, STM32_IRQ_EXTI10_15_PRIORITY);
#endif
}
 8000f70:	bf00      	nop
 8000f72:	4770      	bx	lr
	...

08000f80 <exti16_irq_init>:

static inline void exti16_irq_init(void) {
#if defined(STM32_EXTI16_IS_USED)
  nvicEnableVector(STM32_EXTI16_NUMBER, STM32_IRQ_EXTI16_PRIORITY);
#endif
}
 8000f80:	bf00      	nop
 8000f82:	4770      	bx	lr
	...

08000f90 <exti17_irq_init>:

static inline void exti17_irq_init(void) {
#if defined(STM32_EXTI17_IS_USED)
  nvicEnableVector(STM32_EXTI17_NUMBER, STM32_IRQ_EXTI17_PRIORITY);
#endif
}
 8000f90:	bf00      	nop
 8000f92:	4770      	bx	lr
	...

08000fa0 <exti18_irq_init>:

static inline void exti18_irq_init(void) {
#if defined(STM32_EXTI18_IS_USED)
  nvicEnableVector(STM32_EXTI18_NUMBER, STM32_IRQ_EXTI18_PRIORITY);
#endif
}
 8000fa0:	bf00      	nop
 8000fa2:	4770      	bx	lr
	...

08000fb0 <exti19_irq_init>:

static inline void exti19_irq_init(void) {
#if defined(STM32_EXTI19_IS_USED)
  nvicEnableVector(STM32_EXTI19_NUMBER, STM32_IRQ_EXTI19_PRIORITY);
#endif
}
 8000fb0:	bf00      	nop
 8000fb2:	4770      	bx	lr
	...

08000fc0 <exti20_irq_init>:

static inline void exti20_irq_init(void) {
#if defined(STM32_EXTI20_IS_USED)
  nvicEnableVector(STM32_EXTI20_NUMBER, STM32_IRQ_EXTI20_PRIORITY);
#endif
}
 8000fc0:	bf00      	nop
 8000fc2:	4770      	bx	lr
	...

08000fd0 <exti21_irq_init>:

static inline void exti21_irq_init(void) {
#if defined(STM32_EXTI21_IS_USED)
  nvicEnableVector(STM32_EXTI21_NUMBER, STM32_IRQ_EXTI21_PRIORITY);
#endif
}
 8000fd0:	bf00      	nop
 8000fd2:	4770      	bx	lr
	...

08000fe0 <exti22_irq_init>:

static inline void exti22_irq_init(void) {
#if defined(STM32_EXTI22_IS_USED)
  nvicEnableVector(STM32_EXTI22_NUMBER, STM32_IRQ_EXTI22_PRIORITY);
#endif
}
 8000fe0:	bf00      	nop
 8000fe2:	4770      	bx	lr
	...

08000ff0 <usart1_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void usart1_irq_init(void) {
 8000ff0:	b508      	push	{r3, lr}
#if defined(STM32_USART1_IS_USED)
  nvicEnableVector(STM32_USART1_NUMBER, STM32_IRQ_USART1_PRIORITY);
 8000ff2:	210c      	movs	r1, #12
 8000ff4:	2025      	movs	r0, #37	; 0x25
 8000ff6:	f7ff ff5b 	bl	8000eb0 <nvicEnableVector>
#endif
}
 8000ffa:	bf00      	nop
 8000ffc:	bd08      	pop	{r3, pc}
 8000ffe:	bf00      	nop

08001000 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8001000:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART1
  sd_lld_serve_interrupt(&SD1);
 8001002:	4803      	ldr	r0, [pc, #12]	; (8001010 <VectorD4+0x10>)
 8001004:	f000 fcdc 	bl	80019c0 <sd_lld_serve_interrupt>
#if STM32_UART_USE_USART1
  uart_lld_serve_interrupt(&UARTD1);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 8001008:	f005 fe7a 	bl	8006d00 <__port_irq_epilogue>
}
 800100c:	bf00      	nop
 800100e:	bd08      	pop	{r3, pc}
 8001010:	20000938 	.word	0x20000938
	...

08001020 <usart2_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void usart2_irq_init(void) {
 8001020:	b508      	push	{r3, lr}
#if defined(STM32_USART2_IS_USED)
  nvicEnableVector(STM32_USART2_NUMBER, STM32_IRQ_USART2_PRIORITY);
 8001022:	210c      	movs	r1, #12
 8001024:	2026      	movs	r0, #38	; 0x26
 8001026:	f7ff ff43 	bl	8000eb0 <nvicEnableVector>
#endif
}
 800102a:	bf00      	nop
 800102c:	bd08      	pop	{r3, pc}
 800102e:	bf00      	nop

08001030 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001030:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART2
  sd_lld_serve_interrupt(&SD2);
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <VectorD8+0x10>)
 8001034:	f000 fcc4 	bl	80019c0 <sd_lld_serve_interrupt>
#if STM32_UART_USE_USART2
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 8001038:	f005 fe62 	bl	8006d00 <__port_irq_epilogue>
}
 800103c:	bf00      	nop
 800103e:	bd08      	pop	{r3, pc}
 8001040:	200009b8 	.word	0x200009b8
	...

08001050 <usart3_irq_init>:

static inline void usart3_irq_init(void) {
#if defined(STM32_USART3_IS_USED)
  nvicEnableVector(STM32_USART3_NUMBER, STM32_IRQ_USART3_PRIORITY);
#endif
}
 8001050:	bf00      	nop
 8001052:	4770      	bx	lr
	...

08001060 <uart4_irq_init>:

static inline void uart4_irq_init(void) {
#if defined(STM32_UART4_IS_USED)
  nvicEnableVector(STM32_UART4_NUMBER, STM32_IRQ_UART4_PRIORITY);
#endif
}
 8001060:	bf00      	nop
 8001062:	4770      	bx	lr
	...

08001070 <uart5_irq_init>:

static inline void uart5_irq_init(void) {
#if defined(STM32_UART5_IS_USED)
  nvicEnableVector(STM32_UART5_NUMBER, STM32_IRQ_UART5_PRIORITY);
#endif
}
 8001070:	bf00      	nop
 8001072:	4770      	bx	lr
	...

08001080 <usart6_irq_init>:

static inline void usart6_irq_init(void) {
#if defined(STM32_USART6_IS_USED)
  nvicEnableVector(STM32_USART6_NUMBER, STM32_IRQ_USART6_PRIORITY);
#endif
}
 8001080:	bf00      	nop
 8001082:	4770      	bx	lr
	...

08001090 <uart7_irq_init>:

static inline void uart7_irq_init(void) {
#if defined(STM32_UART7_IS_USED)
  nvicEnableVector(STM32_UART7_NUMBER, STM32_IRQ_UART7_PRIORITY);
#endif
}
 8001090:	bf00      	nop
 8001092:	4770      	bx	lr
	...

080010a0 <uart8_irq_init>:

static inline void uart8_irq_init(void) {
#if defined(STM32_UART8_IS_USED)
  nvicEnableVector(STM32_UART8_NUMBER, STM32_IRQ_UART8_PRIORITY);
#endif
}
 80010a0:	bf00      	nop
 80010a2:	4770      	bx	lr
	...

080010b0 <uart9_irq_init>:

static inline void uart9_irq_init(void) {
#if defined(STM32_UART9_IS_USED)
  nvicEnableVector(STM32_UART9_NUMBER, STM32_IRQ_UART9_PRIORITY);
#endif
}
 80010b0:	bf00      	nop
 80010b2:	4770      	bx	lr
	...

080010c0 <uart10_irq_init>:

static inline void uart10_irq_init(void) {
#if defined(STM32_UART10_IS_USED)
  nvicEnableVector(STM32_UART10_NUMBER, STM32_IRQ_UART10_PRIORITY);
#endif
}
 80010c0:	bf00      	nop
 80010c2:	4770      	bx	lr
	...

080010d0 <tim1_tim9_tim10_tim11_irq_init>:
#endif
#if defined(STM32_TIM1_IS_USED)
  nvicEnableVector(STM32_TIM1_CC_NUMBER,
                   STM32_IRQ_TIM1_CC_PRIORITY);
#endif
}
 80010d0:	bf00      	nop
 80010d2:	4770      	bx	lr
	...

080010e0 <tim2_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void tim2_irq_init(void) {
 80010e0:	b508      	push	{r3, lr}
#if defined(STM32_TIM2_IS_USED)
  nvicEnableVector(STM32_TIM2_NUMBER, STM32_IRQ_TIM2_PRIORITY);
 80010e2:	2107      	movs	r1, #7
 80010e4:	201c      	movs	r0, #28
 80010e6:	f7ff fee3 	bl	8000eb0 <nvicEnableVector>
#endif
}
 80010ea:	bf00      	nop
 80010ec:	bd08      	pop	{r3, pc}
 80010ee:	bf00      	nop

080010f0 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 80010f0:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD2);
#endif
#endif
#if 1
#if STM32_ST_USE_TIM2
  st_lld_serve_interrupt();
 80010f2:	f000 facd 	bl	8001690 <st_lld_serve_interrupt>
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 80010f6:	f005 fe03 	bl	8006d00 <__port_irq_epilogue>
}
 80010fa:	bf00      	nop
 80010fc:	bd08      	pop	{r3, pc}
 80010fe:	bf00      	nop

08001100 <tim3_irq_init>:

static inline void tim3_irq_init(void) {
#if defined(STM32_TIM3_IS_USED)
  nvicEnableVector(STM32_TIM3_NUMBER, STM32_IRQ_TIM3_PRIORITY);
#endif
}
 8001100:	bf00      	nop
 8001102:	4770      	bx	lr
	...

08001110 <tim4_irq_init>:

static inline void tim4_irq_init(void) {
#if defined(STM32_TIM4_IS_USED)
  nvicEnableVector(STM32_TIM4_NUMBER, STM32_IRQ_TIM4_PRIORITY);
#endif
}
 8001110:	bf00      	nop
 8001112:	4770      	bx	lr
	...

08001120 <tim5_irq_init>:

static inline void tim5_irq_init(void) {
#if defined(STM32_TIM5_IS_USED)
  nvicEnableVector(STM32_TIM5_NUMBER, STM32_IRQ_TIM5_PRIORITY);
#endif
}
 8001120:	bf00      	nop
 8001122:	4770      	bx	lr
	...

08001130 <tim6_irq_init>:

static inline void tim6_irq_init(void) {
#if defined(STM32_TIM6_IS_USED)
  nvicEnableVector(STM32_TIM6_NUMBER, STM32_IRQ_TIM6_PRIORITY);
#endif
}
 8001130:	bf00      	nop
 8001132:	4770      	bx	lr
	...

08001140 <tim7_irq_init>:

static inline void tim7_irq_init(void) {
#if defined(STM32_TIM7_IS_USED)
  nvicEnableVector(STM32_TIM7_NUMBER, STM32_IRQ_TIM7_PRIORITY);
#endif
}
 8001140:	bf00      	nop
 8001142:	4770      	bx	lr
	...

08001150 <tim8_tim12_tim13_tim14_irq_init>:
#endif
#if defined(STM32_TIM8_IS_USED)
  nvicEnableVector(STM32_TIM8_CC_NUMBER,
                   STM32_IRQ_TIM8_CC_PRIORITY);
#endif
}
 8001150:	bf00      	nop
 8001152:	4770      	bx	lr
	...

08001160 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 8001160:	b508      	push	{r3, lr}

  exti0_irq_init();
 8001162:	f7ff fed5 	bl	8000f10 <exti0_irq_init>
  exti1_irq_init();
 8001166:	f7ff fedb 	bl	8000f20 <exti1_irq_init>
  exti2_irq_init();
 800116a:	f7ff fee1 	bl	8000f30 <exti2_irq_init>
  exti3_irq_init();
 800116e:	f7ff fee7 	bl	8000f40 <exti3_irq_init>
  exti4_irq_init();
 8001172:	f7ff feed 	bl	8000f50 <exti4_irq_init>
  exti5_9_irq_init();
 8001176:	f7ff fef3 	bl	8000f60 <exti5_9_irq_init>
  exti10_15_irq_init();
 800117a:	f7ff fef9 	bl	8000f70 <exti10_15_irq_init>
  exti16_irq_init();
 800117e:	f7ff feff 	bl	8000f80 <exti16_irq_init>
  exti17_irq_init();
 8001182:	f7ff ff05 	bl	8000f90 <exti17_irq_init>
  exti18_irq_init();
 8001186:	f7ff ff0b 	bl	8000fa0 <exti18_irq_init>
  exti19_irq_init();
 800118a:	f7ff ff11 	bl	8000fb0 <exti19_irq_init>
  exti20_irq_init();
 800118e:	f7ff ff17 	bl	8000fc0 <exti20_irq_init>
  exti21_irq_init();
 8001192:	f7ff ff1d 	bl	8000fd0 <exti21_irq_init>
  exti22_irq_init();
 8001196:	f7ff ff23 	bl	8000fe0 <exti22_irq_init>

  tim1_tim9_tim10_tim11_irq_init();
 800119a:	f7ff ff99 	bl	80010d0 <tim1_tim9_tim10_tim11_irq_init>
  tim2_irq_init();
 800119e:	f7ff ff9f 	bl	80010e0 <tim2_irq_init>
  tim3_irq_init();
 80011a2:	f7ff ffad 	bl	8001100 <tim3_irq_init>
  tim4_irq_init();
 80011a6:	f7ff ffb3 	bl	8001110 <tim4_irq_init>
  tim5_irq_init();
 80011aa:	f7ff ffb9 	bl	8001120 <tim5_irq_init>
  tim6_irq_init();
 80011ae:	f7ff ffbf 	bl	8001130 <tim6_irq_init>
  tim7_irq_init();
 80011b2:	f7ff ffc5 	bl	8001140 <tim7_irq_init>
  tim8_tim12_tim13_tim14_irq_init();
 80011b6:	f7ff ffcb 	bl	8001150 <tim8_tim12_tim13_tim14_irq_init>

  usart1_irq_init();
 80011ba:	f7ff ff19 	bl	8000ff0 <usart1_irq_init>
  usart2_irq_init();
 80011be:	f7ff ff2f 	bl	8001020 <usart2_irq_init>
  usart3_irq_init();
 80011c2:	f7ff ff45 	bl	8001050 <usart3_irq_init>
  uart4_irq_init();
 80011c6:	f7ff ff4b 	bl	8001060 <uart4_irq_init>
  uart5_irq_init();
 80011ca:	f7ff ff51 	bl	8001070 <uart5_irq_init>
  usart6_irq_init();
 80011ce:	f7ff ff57 	bl	8001080 <usart6_irq_init>
  uart7_irq_init();
 80011d2:	f7ff ff5d 	bl	8001090 <uart7_irq_init>
  uart8_irq_init();
 80011d6:	f7ff ff63 	bl	80010a0 <uart8_irq_init>
  uart9_irq_init();
 80011da:	f7ff ff69 	bl	80010b0 <uart9_irq_init>
  uart10_irq_init();
 80011de:	f7ff ff6f 	bl	80010c0 <uart10_irq_init>
}
 80011e2:	bf00      	nop
 80011e4:	bd08      	pop	{r3, pc}
 80011e6:	bf00      	nop
	...

080011f0 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <hal_lld_backup_domain_init+0x38>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <hal_lld_backup_domain_init+0x38>)
 80011f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fa:	6013      	str	r3, [r2, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <hal_lld_backup_domain_init+0x3c>)
 80011fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001208:	d006      	beq.n	8001218 <hal_lld_backup_domain_init+0x28>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <hal_lld_backup_domain_init+0x3c>)
 800120c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001210:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <hal_lld_backup_domain_init+0x3c>)
 8001214:	2200      	movs	r2, #0
 8001216:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <hal_lld_backup_domain_init+0x38>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a02      	ldr	r2, [pc, #8]	; (8001228 <hal_lld_backup_domain_init+0x38>)
 800121e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001222:	6053      	str	r3, [r2, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
 8001224:	bf00      	nop
 8001226:	4770      	bx	lr
 8001228:	40007000 	.word	0x40007000
 800122c:	40023800 	.word	0x40023800

08001230 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8001230:	b508      	push	{r3, lr}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <hal_lld_init+0x9c>)
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	4a25      	ldr	r2, [pc, #148]	; (80012cc <hal_lld_init+0x9c>)
 8001238:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 800123c:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
 8001240:	6113      	str	r3, [r2, #16]
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <hal_lld_init+0x9c>)
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	4a21      	ldr	r2, [pc, #132]	; (80012cc <hal_lld_init+0x9c>)
 8001248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800124c:	6113      	str	r3, [r2, #16]
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <hal_lld_init+0x9c>)
 8001250:	691b      	ldr	r3, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <hal_lld_init+0x9c>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <hal_lld_init+0x9c>)
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <hal_lld_init+0x9c>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <hal_lld_init+0x9c>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <hal_lld_init+0x9c>)
 800126a:	695b      	ldr	r3, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <hal_lld_init+0x9c>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	4a16      	ldr	r2, [pc, #88]	; (80012cc <hal_lld_init+0x9c>)
 8001272:	f063 5380 	orn	r3, r3, #268435456	; 0x10000000
 8001276:	6213      	str	r3, [r2, #32]
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <hal_lld_init+0x9c>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <hal_lld_init+0x9c>)
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	6213      	str	r3, [r2, #32]
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <hal_lld_init+0x9c>)
 8001286:	6a1b      	ldr	r3, [r3, #32]
  rccResetAPB2(~0);
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <hal_lld_init+0x9c>)
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <hal_lld_init+0x9c>)
 800128e:	f04f 32ff 	mov.w	r2, #4294967295
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <hal_lld_init+0x9c>)
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <hal_lld_init+0x9c>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <hal_lld_init+0x9c>)
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <hal_lld_init+0x9c>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <hal_lld_init+0x9c>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <hal_lld_init+0x9c>)
 80012b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b2:	4a06      	ldr	r2, [pc, #24]	; (80012cc <hal_lld_init+0x9c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <hal_lld_init+0x9c>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 80012be:	f7ff ff97 	bl	80011f0 <hal_lld_backup_domain_init>
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
 80012c2:	f7ff ff4d 	bl	8001160 <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 80012c6:	bf00      	nop
 80012c8:	bd08      	pop	{r3, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800

080012d0 <stm32_clock_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80012d0:	4b4a      	ldr	r3, [pc, #296]	; (80013fc <stm32_clock_init+0x12c>)
 80012d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012d6:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80012d8:	4b49      	ldr	r3, [pc, #292]	; (8001400 <stm32_clock_init+0x130>)
 80012da:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80012de:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80012e0:	4b46      	ldr	r3, [pc, #280]	; (80013fc <stm32_clock_init+0x12c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a45      	ldr	r2, [pc, #276]	; (80013fc <stm32_clock_init+0x12c>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80012ec:	bf00      	nop
 80012ee:	4b43      	ldr	r3, [pc, #268]	; (80013fc <stm32_clock_init+0x12c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f9      	beq.n	80012ee <stm32_clock_init+0x1e>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80012fa:	4b40      	ldr	r3, [pc, #256]	; (80013fc <stm32_clock_init+0x12c>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	4a3f      	ldr	r2, [pc, #252]	; (80013fc <stm32_clock_init+0x12c>)
 8001300:	f023 0303 	bic.w	r3, r3, #3
 8001304:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001306:	bf00      	nop
 8001308:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <stm32_clock_init+0x12c>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 030c 	and.w	r3, r3, #12
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f9      	bne.n	8001308 <stm32_clock_init+0x38>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001314:	4b39      	ldr	r3, [pc, #228]	; (80013fc <stm32_clock_init+0x12c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a38      	ldr	r2, [pc, #224]	; (80013fc <stm32_clock_init+0x12c>)
 800131a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800131e:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001320:	4b36      	ldr	r3, [pc, #216]	; (80013fc <stm32_clock_init+0x12c>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8001326:	4b35      	ldr	r3, [pc, #212]	; (80013fc <stm32_clock_init+0x12c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a34      	ldr	r2, [pc, #208]	; (80013fc <stm32_clock_init+0x12c>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001330:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001332:	bf00      	nop
 8001334:	4b31      	ldr	r3, [pc, #196]	; (80013fc <stm32_clock_init+0x12c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f9      	beq.n	8001334 <stm32_clock_init+0x64>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001340:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <stm32_clock_init+0x12c>)
 8001342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001344:	4a2d      	ldr	r2, [pc, #180]	; (80013fc <stm32_clock_init+0x12c>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800134c:	bf00      	nop
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <stm32_clock_init+0x12c>)
 8001350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f9      	beq.n	800134e <stm32_clock_init+0x7e>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800135a:	4b28      	ldr	r3, [pc, #160]	; (80013fc <stm32_clock_init+0x12c>)
 800135c:	4a29      	ldr	r2, [pc, #164]	; (8001404 <stm32_clock_init+0x134>)
 800135e:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001360:	4b26      	ldr	r3, [pc, #152]	; (80013fc <stm32_clock_init+0x12c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a25      	ldr	r2, [pc, #148]	; (80013fc <stm32_clock_init+0x12c>)
 8001366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800136a:	6013      	str	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800136c:	bf00      	nop
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <stm32_clock_init+0x130>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f9      	beq.n	800136e <stm32_clock_init+0x9e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800137a:	bf00      	nop
 800137c:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <stm32_clock_init+0x12c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f9      	beq.n	800137c <stm32_clock_init+0xac>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <stm32_clock_init+0x12c>)
 800138a:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <stm32_clock_init+0x138>)
 800138c:	609a      	str	r2, [r3, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <stm32_clock_init+0x13c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1f      	ldr	r2, [pc, #124]	; (8001410 <stm32_clock_init+0x140>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d109      	bne.n	80013ac <stm32_clock_init+0xdc>
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <stm32_clock_init+0x144>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <stm32_clock_init+0x148>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d104      	bne.n	80013ac <stm32_clock_init+0xdc>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <stm32_clock_init+0x14c>)
 80013a4:	f240 1205 	movw	r2, #261	; 0x105
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	e003      	b.n	80013b4 <stm32_clock_init+0xe4>
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <stm32_clock_init+0x14c>)
 80013ae:	f240 7205 	movw	r2, #1797	; 0x705
 80013b2:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 80013b4:	bf00      	nop
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <stm32_clock_init+0x14c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d1f9      	bne.n	80013b6 <stm32_clock_init+0xe6>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <stm32_clock_init+0x12c>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <stm32_clock_init+0x12c>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80013ce:	bf00      	nop
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <stm32_clock_init+0x12c>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d1f9      	bne.n	80013d0 <stm32_clock_init+0x100>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <stm32_clock_init+0x12c>)
 80013de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <stm32_clock_init+0x12c>)
 80013e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e6:	6453      	str	r3, [r2, #68]	; 0x44
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <stm32_clock_init+0x12c>)
 80013ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013ec:	4a03      	ldr	r2, [pc, #12]	; (80013fc <stm32_clock_init+0x12c>)
 80013ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f2:	6653      	str	r3, [r2, #100]	; 0x64
 80013f4:	4b01      	ldr	r3, [pc, #4]	; (80013fc <stm32_clock_init+0x12c>)
 80013f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 80013f8:	bf00      	nop
 80013fa:	4770      	bx	lr
 80013fc:	40023800 	.word	0x40023800
 8001400:	40007000 	.word	0x40007000
 8001404:	07405408 	.word	0x07405408
 8001408:	38889400 	.word	0x38889400
 800140c:	e0042000 	.word	0xe0042000
 8001410:	20006411 	.word	0x20006411
 8001414:	e000ed00 	.word	0xe000ed00
 8001418:	410fc241 	.word	0x410fc241
 800141c:	40023c00 	.word	0x40023c00

08001420 <_pal_lld_init>:

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
  }
#endif
}
 8001420:	bf00      	nop
 8001422:	4770      	bx	lr
	...

08001430 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8001430:	b08e      	sub	sp, #56	; 0x38
 8001432:	9003      	str	r0, [sp, #12]
 8001434:	9102      	str	r1, [sp, #8]
 8001436:	9201      	str	r2, [sp, #4]

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001438:	9b01      	ldr	r3, [sp, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	930d      	str	r3, [sp, #52]	; 0x34
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8001440:	9b01      	ldr	r3, [sp, #4]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	930c      	str	r3, [sp, #48]	; 0x30
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800144a:	9b01      	ldr	r3, [sp, #4]
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	930b      	str	r3, [sp, #44]	; 0x2c
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8001454:	9b01      	ldr	r3, [sp, #4]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	930a      	str	r3, [sp, #40]	; 0x28
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800145e:	9b01      	ldr	r3, [sp, #4]
 8001460:	09db      	lsrs	r3, r3, #7
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	9308      	str	r3, [sp, #32]
  uint32_t bit     = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	9309      	str	r3, [sp, #36]	; 0x24
  while (true) {
    if ((mask & 1) != 0) {
 800146c:	9b02      	ldr	r3, [sp, #8]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d079      	beq.n	800156a <_pal_lld_setgroupmode+0x13a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8001476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	9a08      	ldr	r2, [sp, #32]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	9307      	str	r3, [sp, #28]
      m1 = 1 << bit;
 8001486:	2201      	movs	r2, #1
 8001488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	9306      	str	r3, [sp, #24]
      m2 = 3 << (bit * 2);
 8001490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	9305      	str	r3, [sp, #20]
      m4 = 15 << ((bit & 7) * 4);
 800149c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	220f      	movs	r2, #15
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	9304      	str	r3, [sp, #16]
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80014ac:	9b03      	ldr	r3, [sp, #12]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	9b06      	ldr	r3, [sp, #24]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	401a      	ands	r2, r3
 80014b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014b8:	431a      	orrs	r2, r3
 80014ba:	9b03      	ldr	r3, [sp, #12]
 80014bc:	605a      	str	r2, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80014be:	9b03      	ldr	r3, [sp, #12]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	9b05      	ldr	r3, [sp, #20]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	401a      	ands	r2, r3
 80014c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014ca:	431a      	orrs	r2, r3
 80014cc:	9b03      	ldr	r3, [sp, #12]
 80014ce:	609a      	str	r2, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80014d0:	9b03      	ldr	r3, [sp, #12]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	9b05      	ldr	r3, [sp, #20]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	401a      	ands	r2, r3
 80014da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014dc:	431a      	orrs	r2, r3
 80014de:	9b03      	ldr	r3, [sp, #12]
 80014e0:	60da      	str	r2, [r3, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80014e2:	9b01      	ldr	r3, [sp, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d11f      	bne.n	800152c <_pal_lld_setgroupmode+0xfc>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 80014ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014ee:	2b07      	cmp	r3, #7
 80014f0:	d809      	bhi.n	8001506 <_pal_lld_setgroupmode+0xd6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80014f2:	9b03      	ldr	r3, [sp, #12]
 80014f4:	6a1a      	ldr	r2, [r3, #32]
 80014f6:	9b04      	ldr	r3, [sp, #16]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	401a      	ands	r2, r3
 80014fc:	9b07      	ldr	r3, [sp, #28]
 80014fe:	431a      	orrs	r2, r3
 8001500:	9b03      	ldr	r3, [sp, #12]
 8001502:	621a      	str	r2, [r3, #32]
 8001504:	e008      	b.n	8001518 <_pal_lld_setgroupmode+0xe8>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001506:	9b03      	ldr	r3, [sp, #12]
 8001508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800150a:	9b04      	ldr	r3, [sp, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	401a      	ands	r2, r3
 8001510:	9b07      	ldr	r3, [sp, #28]
 8001512:	431a      	orrs	r2, r3
 8001514:	9b03      	ldr	r3, [sp, #12]
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
        port->MODER   = (port->MODER & ~m2) | moder;
 8001518:	9b03      	ldr	r3, [sp, #12]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	9b05      	ldr	r3, [sp, #20]
 800151e:	43db      	mvns	r3, r3
 8001520:	401a      	ands	r2, r3
 8001522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001524:	431a      	orrs	r2, r3
 8001526:	9b03      	ldr	r3, [sp, #12]
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e01e      	b.n	800156a <_pal_lld_setgroupmode+0x13a>
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 800152c:	9b03      	ldr	r3, [sp, #12]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	9b05      	ldr	r3, [sp, #20]
 8001532:	43db      	mvns	r3, r3
 8001534:	401a      	ands	r2, r3
 8001536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001538:	431a      	orrs	r2, r3
 800153a:	9b03      	ldr	r3, [sp, #12]
 800153c:	601a      	str	r2, [r3, #0]
        if (bit < 8)
 800153e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001540:	2b07      	cmp	r3, #7
 8001542:	d809      	bhi.n	8001558 <_pal_lld_setgroupmode+0x128>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001544:	9b03      	ldr	r3, [sp, #12]
 8001546:	6a1a      	ldr	r2, [r3, #32]
 8001548:	9b04      	ldr	r3, [sp, #16]
 800154a:	43db      	mvns	r3, r3
 800154c:	401a      	ands	r2, r3
 800154e:	9b07      	ldr	r3, [sp, #28]
 8001550:	431a      	orrs	r2, r3
 8001552:	9b03      	ldr	r3, [sp, #12]
 8001554:	621a      	str	r2, [r3, #32]
 8001556:	e008      	b.n	800156a <_pal_lld_setgroupmode+0x13a>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001558:	9b03      	ldr	r3, [sp, #12]
 800155a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800155c:	9b04      	ldr	r3, [sp, #16]
 800155e:	43db      	mvns	r3, r3
 8001560:	401a      	ands	r2, r3
 8001562:	9b07      	ldr	r3, [sp, #28]
 8001564:	431a      	orrs	r2, r3
 8001566:	9b03      	ldr	r3, [sp, #12]
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
 800156a:	9b02      	ldr	r3, [sp, #8]
 800156c:	085b      	lsrs	r3, r3, #1
 800156e:	9302      	str	r3, [sp, #8]
    if (!mask)
 8001570:	9b02      	ldr	r3, [sp, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00f      	beq.n	8001596 <_pal_lld_setgroupmode+0x166>
      return;
    otyper <<= 1;
 8001576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	930c      	str	r3, [sp, #48]	; 0x30
    ospeedr <<= 2;
 800157c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	930b      	str	r3, [sp, #44]	; 0x2c
    pupdr <<= 2;
 8001582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	930a      	str	r3, [sp, #40]	; 0x28
    moder <<= 2;
 8001588:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	930d      	str	r3, [sp, #52]	; 0x34
    bit++;
 800158e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001590:	3301      	adds	r3, #1
 8001592:	9309      	str	r3, [sp, #36]	; 0x24
    if ((mask & 1) != 0) {
 8001594:	e76a      	b.n	800146c <_pal_lld_setgroupmode+0x3c>
      return;
 8001596:	bf00      	nop
  }
}
 8001598:	b00e      	add	sp, #56	; 0x38
 800159a:	4770      	bx	lr
 800159c:	0000      	movs	r0, r0
	...

080015a0 <chSysLockFromISR.lto_priv.0>:
 *          not be limited to disabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 80015a0:	b082      	sub	sp, #8
 80015a2:	2330      	movs	r3, #48	; 0x30
 80015a4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80015a6:	9b01      	ldr	r3, [sp, #4]
 80015a8:	f383 8811 	msr	BASEPRI, r3
}
 80015ac:	bf00      	nop
}
 80015ae:	bf00      	nop
 * @note    Same as @p port_lock() in this port.
 */
__STATIC_FORCEINLINE void port_lock_from_isr(void) {

  port_lock();
}
 80015b0:	bf00      	nop

  port_lock_from_isr();
  __stats_start_measure_crit_isr();
  __dbg_check_lock_from_isr();
}
 80015b2:	bf00      	nop
 80015b4:	b002      	add	sp, #8
 80015b6:	4770      	bx	lr
	...

080015c0 <chSysUnlockFromISR.lto_priv.0>:
 *          not be limited to enabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 80015c0:	b082      	sub	sp, #8
 80015c2:	2300      	movs	r3, #0
 80015c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80015c6:	9b01      	ldr	r3, [sp, #4]
 80015c8:	f383 8811 	msr	BASEPRI, r3
}
 80015cc:	bf00      	nop
}
 80015ce:	bf00      	nop
 * @note    Same as @p port_unlock() in this port.
 */
__STATIC_FORCEINLINE void port_unlock_from_isr(void) {

  port_unlock();
}
 80015d0:	bf00      	nop

  __dbg_check_unlock_from_isr();
  __stats_stop_measure_crit_isr();
  port_unlock_from_isr();
}
 80015d2:	bf00      	nop
 80015d4:	b002      	add	sp, #8
 80015d6:	4770      	bx	lr
	...

080015e0 <osalSysLockFromISR.lto_priv.0>:
static inline void osalSysLockFromISR(void) {
 80015e0:	b508      	push	{r3, lr}
  chSysLockFromISR();
 80015e2:	f7ff ffdd 	bl	80015a0 <chSysLockFromISR.lto_priv.0>
}
 80015e6:	bf00      	nop
 80015e8:	bd08      	pop	{r3, pc}
 80015ea:	bf00      	nop
 80015ec:	0000      	movs	r0, r0
	...

080015f0 <osalSysUnlockFromISR.lto_priv.0>:
static inline void osalSysUnlockFromISR(void) {
 80015f0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 80015f2:	f7ff ffe5 	bl	80015c0 <chSysUnlockFromISR.lto_priv.0>
}
 80015f6:	bf00      	nop
 80015f8:	bd08      	pop	{r3, pc}
 80015fa:	bf00      	nop
 80015fc:	0000      	movs	r0, r0
	...

08001600 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
 8001600:	b508      	push	{r3, lr}
  chSysTimerHandlerI();
 8001602:	f000 fc85 	bl	8001f10 <chSysTimerHandlerI>
}
 8001606:	bf00      	nop
 8001608:	bd08      	pop	{r3, pc}
 800160a:	bf00      	nop
 800160c:	0000      	movs	r0, r0
	...

08001610 <st_lld_init>:
                "clock rounding error");
  osalDbgAssert(((ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1U) < 0x10000,
                "clock prescaler overflow");

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <st_lld_init+0x70>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	4a1a      	ldr	r2, [pc, #104]	; (8001680 <st_lld_init+0x70>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <st_lld_init+0x70>)
 800161e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001620:	4a17      	ldr	r2, [pc, #92]	; (8001680 <st_lld_init+0x70>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6613      	str	r3, [r2, #96]	; 0x60
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <st_lld_init+0x70>)
 800162a:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <st_lld_init+0x74>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a14      	ldr	r2, [pc, #80]	; (8001684 <st_lld_init+0x74>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001646:	f04f 32ff 	mov.w	r2, #4294967295
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800164c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8001654:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001658:	2200      	movs	r2, #0
 800165a:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 800165c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8001664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800166c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001670:	2201      	movs	r2, #1
 8001672:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001678:	2201      	movs	r2, #1
 800167a:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 800167c:	bf00      	nop
 800167e:	4770      	bx	lr
 8001680:	40023800 	.word	0x40023800
 8001684:	e0042000 	.word	0xe0042000
	...

08001690 <st_lld_serve_interrupt>:

/**
 * @brief   IRQ handling code.
 */
void st_lld_serve_interrupt(void) {
 8001690:	b500      	push	{lr}
 8001692:	b083      	sub	sp, #12
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;
 8001694:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001698:	9301      	str	r3, [sp, #4]

  sr  = timp->SR;
 800169a:	9b01      	ldr	r3, [sp, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	9300      	str	r3, [sp, #0]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80016a0:	9b01      	ldr	r3, [sp, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	9a00      	ldr	r2, [sp, #0]
 80016a8:	4013      	ands	r3, r2
 80016aa:	9300      	str	r3, [sp, #0]
  timp->SR = ~sr;
 80016ac:	9b00      	ldr	r3, [sp, #0]
 80016ae:	43da      	mvns	r2, r3
 80016b0:	9b01      	ldr	r3, [sp, #4]
 80016b2:	611a      	str	r2, [r3, #16]

  if ((sr & TIM_SR_CC1IF) != 0U)
 80016b4:	9b00      	ldr	r3, [sp, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <st_lld_serve_interrupt+0x3a>
#endif
  {
    osalSysLockFromISR();
 80016be:	f7ff ff8f 	bl	80015e0 <osalSysLockFromISR.lto_priv.0>
    osalOsTimerHandlerI();
 80016c2:	f7ff ff9d 	bl	8001600 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
 80016c6:	f7ff ff93 	bl	80015f0 <osalSysUnlockFromISR.lto_priv.0>
      st_callbacks[3](3U);
    }
  }
#endif
#endif
}
 80016ca:	bf00      	nop
 80016cc:	b003      	add	sp, #12
 80016ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80016d2:	bf00      	nop
	...

080016e0 <chSysLockFromISR.lto_priv.1>:
static inline void chSysLockFromISR(void) {
 80016e0:	b082      	sub	sp, #8
 80016e2:	2330      	movs	r3, #48	; 0x30
 80016e4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80016e6:	9b01      	ldr	r3, [sp, #4]
 80016e8:	f383 8811 	msr	BASEPRI, r3
}
 80016ec:	bf00      	nop
}
 80016ee:	bf00      	nop
}
 80016f0:	bf00      	nop
}
 80016f2:	bf00      	nop
 80016f4:	b002      	add	sp, #8
 80016f6:	4770      	bx	lr
	...

08001700 <chSysUnlockFromISR.lto_priv.1>:
static inline void chSysUnlockFromISR(void) {
 8001700:	b082      	sub	sp, #8
 8001702:	2300      	movs	r3, #0
 8001704:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001706:	9b01      	ldr	r3, [sp, #4]
 8001708:	f383 8811 	msr	BASEPRI, r3
}
 800170c:	bf00      	nop
}
 800170e:	bf00      	nop
}
 8001710:	bf00      	nop
}
 8001712:	bf00      	nop
 8001714:	b002      	add	sp, #8
 8001716:	4770      	bx	lr
	...

08001720 <osalSysLockFromISR.lto_priv.1>:
static inline void osalSysLockFromISR(void) {
 8001720:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8001722:	f7ff ffdd 	bl	80016e0 <chSysLockFromISR.lto_priv.1>
}
 8001726:	bf00      	nop
 8001728:	bd08      	pop	{r3, pc}
 800172a:	bf00      	nop
 800172c:	0000      	movs	r0, r0
	...

08001730 <osalSysUnlockFromISR.lto_priv.1>:
static inline void osalSysUnlockFromISR(void) {
 8001730:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8001732:	f7ff ffe5 	bl	8001700 <chSysUnlockFromISR.lto_priv.1>
}
 8001736:	bf00      	nop
 8001738:	bd08      	pop	{r3, pc}
 800173a:	bf00      	nop
 800173c:	0000      	movs	r0, r0
	...

08001740 <osalEventBroadcastFlagsI.lto_priv.2>:
                                            eventflags_t flags) {
 8001740:	b500      	push	{lr}
 8001742:	b083      	sub	sp, #12
 8001744:	9001      	str	r0, [sp, #4]
 8001746:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8001748:	9900      	ldr	r1, [sp, #0]
 800174a:	9801      	ldr	r0, [sp, #4]
 800174c:	f002 fef0 	bl	8004530 <chEvtBroadcastFlagsI>
}
 8001750:	bf00      	nop
 8001752:	b003      	add	sp, #12
 8001754:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001760 <usart_init>:
 * @details This function must be invoked with interrupts disabled.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 8001760:	b084      	sub	sp, #16
 8001762:	9001      	str	r0, [sp, #4]
 8001764:	9100      	str	r1, [sp, #0]
  uint32_t brr;
  USART_TypeDef *u = sdp->usart;
 8001766:	9b01      	ldr	r3, [sp, #4]
 8001768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800176a:	9302      	str	r3, [sp, #8]

  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 800176c:	9b01      	ldr	r3, [sp, #4]
 800176e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001770:	9b00      	ldr	r3, [sp, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	085b      	lsrs	r3, r3, #1
 8001776:	441a      	add	r2, r3
 8001778:	9b00      	ldr	r3, [sp, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001780:	9303      	str	r3, [sp, #12]

#if defined(USART_CR1_OVER8)
  /* Correcting BRR value when oversampling by 8 instead of 16.
     Fraction is still 4 bits wide, but only lower 3 bits used.
     Mantissa is doubled, but Fraction is left the same.*/
  if (config->cr1 & USART_CR1_OVER8)
 8001782:	9b00      	ldr	r3, [sp, #0]
 8001784:	889b      	ldrh	r3, [r3, #4]
 8001786:	b21b      	sxth	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	da08      	bge.n	800179e <usart_init+0x3e>
    brr = ((brr & ~7) * 2) | (brr & 7);
 800178c:	9b03      	ldr	r3, [sp, #12]
 800178e:	f023 0307 	bic.w	r3, r3, #7
 8001792:	005a      	lsls	r2, r3, #1
 8001794:	9b03      	ldr	r3, [sp, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	4313      	orrs	r3, r2
 800179c:	9303      	str	r3, [sp, #12]
#endif

  osalDbgAssert(brr < 0x10000, "invalid BRR value");

  u->BRR = brr;
 800179e:	9b02      	ldr	r3, [sp, #8]
 80017a0:	9a03      	ldr	r2, [sp, #12]
 80017a2:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80017a4:	9b00      	ldr	r3, [sp, #0]
 80017a6:	88db      	ldrh	r3, [r3, #6]
 80017a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	9b02      	ldr	r3, [sp, #8]
 80017b2:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80017b4:	9b00      	ldr	r3, [sp, #0]
 80017b6:	891b      	ldrh	r3, [r3, #8]
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	b29b      	uxth	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	9b02      	ldr	r3, [sp, #8]
 80017c2:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80017c4:	9b00      	ldr	r3, [sp, #0]
 80017c6:	889b      	ldrh	r3, [r3, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80017c8:	f443 5304 	orr.w	r3, r3, #8448	; 0x2100
 80017cc:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	461a      	mov	r2, r3
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80017d4:	9b02      	ldr	r3, [sp, #8]
 80017d6:	60da      	str	r2, [r3, #12]
                         USART_CR1_RE;
  u->SR = 0;
 80017d8:	9b02      	ldr	r3, [sp, #8]
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80017de:	9b02      	ldr	r3, [sp, #8]
 80017e0:	681b      	ldr	r3, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80017e2:	9b02      	ldr	r3, [sp, #8]
 80017e4:	685b      	ldr	r3, [r3, #4]

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 80017e6:	9b00      	ldr	r3, [sp, #0]
 80017e8:	889b      	ldrh	r3, [r3, #4]
 80017ea:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 80017ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f2:	d104      	bne.n	80017fe <usart_init+0x9e>
    sdp->rxmask = 0x7F;
 80017f4:	9b01      	ldr	r3, [sp, #4]
 80017f6:	227f      	movs	r2, #127	; 0x7f
 80017f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }
  else {
    sdp->rxmask = 0xFF;
  }
}
 80017fc:	e003      	b.n	8001806 <usart_init+0xa6>
    sdp->rxmask = 0xFF;
 80017fe:	9b01      	ldr	r3, [sp, #4]
 8001800:	22ff      	movs	r2, #255	; 0xff
 8001802:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 8001806:	bf00      	nop
 8001808:	b004      	add	sp, #16
 800180a:	4770      	bx	lr
 800180c:	0000      	movs	r0, r0
	...

08001810 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
 8001810:	b500      	push	{lr}
 8001812:	b085      	sub	sp, #20
 8001814:	9001      	str	r0, [sp, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	f8ad 3002 	strh.w	r3, [sp, #2]
  eventflags_t sts = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	9303      	str	r3, [sp, #12]

  if (sr & USART_SR_ORE)
 8001820:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <set_error+0x24>
    sts |= SD_OVERRUN_ERROR;
 800182c:	9b03      	ldr	r3, [sp, #12]
 800182e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001832:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_PE)
 8001834:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <set_error+0x38>
    sts |= SD_PARITY_ERROR;
 8001840:	9b03      	ldr	r3, [sp, #12]
 8001842:	f043 0320 	orr.w	r3, r3, #32
 8001846:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_FE)
 8001848:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <set_error+0x4c>
    sts |= SD_FRAMING_ERROR;
 8001854:	9b03      	ldr	r3, [sp, #12]
 8001856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800185a:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_NE)
 800185c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <set_error+0x60>
    sts |= SD_NOISE_ERROR;
 8001868:	9b03      	ldr	r3, [sp, #12]
 800186a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186e:	9303      	str	r3, [sp, #12]
  chnAddFlagsI(sdp, sts);
 8001870:	9b01      	ldr	r3, [sp, #4]
 8001872:	3304      	adds	r3, #4
 8001874:	9903      	ldr	r1, [sp, #12]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff62 	bl	8001740 <osalEventBroadcastFlagsI.lto_priv.2>
}
 800187c:	bf00      	nop
 800187e:	b005      	add	sp, #20
 8001880:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001890 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {
 8001890:	b082      	sub	sp, #8
 8001892:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <notify1+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <notify1+0x18>)
 800189a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	b002      	add	sp, #8
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40011000 	.word	0x40011000
 80018ac:	00000000 	.word	0x00000000

080018b0 <notify2>:
#endif

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {
 80018b0:	b082      	sub	sp, #8
 80018b2:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <notify2+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4a03      	ldr	r2, [pc, #12]	; (80018c8 <notify2+0x18>)
 80018ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	b002      	add	sp, #8
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40004400 	.word	0x40004400
 80018cc:	00000000 	.word	0x00000000

080018d0 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 80018d0:	b508      	push	{r3, lr}

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 80018d2:	4a0c      	ldr	r2, [pc, #48]	; (8001904 <sd_lld_init+0x34>)
 80018d4:	2100      	movs	r1, #0
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <sd_lld_init+0x38>)
 80018d8:	f7ff fa72 	bl	8000dc0 <sdObjectInit>
  SD1.usart = USART1;
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <sd_lld_init+0x38>)
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <sd_lld_init+0x3c>)
 80018e0:	675a      	str	r2, [r3, #116]	; 0x74
  SD1.clock = STM32_PCLK2;
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <sd_lld_init+0x38>)
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <sd_lld_init+0x40>)
 80018e6:	679a      	str	r2, [r3, #120]	; 0x78
  nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
#endif
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <sd_lld_init+0x44>)
 80018ea:	2100      	movs	r1, #0
 80018ec:	480a      	ldr	r0, [pc, #40]	; (8001918 <sd_lld_init+0x48>)
 80018ee:	f7ff fa67 	bl	8000dc0 <sdObjectInit>
  SD2.usart = USART2;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <sd_lld_init+0x48>)
 80018f4:	4a09      	ldr	r2, [pc, #36]	; (800191c <sd_lld_init+0x4c>)
 80018f6:	675a      	str	r2, [r3, #116]	; 0x74
  SD2.clock = STM32_PCLK1;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <sd_lld_init+0x48>)
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <sd_lld_init+0x50>)
 80018fc:	679a      	str	r2, [r3, #120]	; 0x78
  SD10.clock = STM32_PCLK2;
#if !defined(STM32_UART10_SUPPRESS_ISR) && defined(STM32_UART10_NUMBER)
  nvicEnableVector(STM32_UART10_NUMBER, STM32_SERIAL_UART10_PRIORITY);
#endif
#endif
}
 80018fe:	bf00      	nop
 8001900:	bd08      	pop	{r3, pc}
 8001902:	bf00      	nop
 8001904:	08001891 	.word	0x08001891
 8001908:	20000938 	.word	0x20000938
 800190c:	40011000 	.word	0x40011000
 8001910:	0501bd00 	.word	0x0501bd00
 8001914:	080018b1 	.word	0x080018b1
 8001918:	200009b8 	.word	0x200009b8
 800191c:	40004400 	.word	0x40004400
 8001920:	0280de80 	.word	0x0280de80
	...

08001930 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8001930:	b500      	push	{lr}
 8001932:	b083      	sub	sp, #12
 8001934:	9001      	str	r0, [sp, #4]
 8001936:	9100      	str	r1, [sp, #0]

  if (config == NULL)
 8001938:	9b00      	ldr	r3, [sp, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <sd_lld_start+0x12>
    config = &default_config;
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <sd_lld_start+0x74>)
 8001940:	9300      	str	r3, [sp, #0]

  if (sdp->state == SD_STOP) {
 8001942:	9b01      	ldr	r3, [sp, #4]
 8001944:	7a1b      	ldrb	r3, [r3, #8]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d123      	bne.n	8001992 <sd_lld_start+0x62>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
 800194a:	9b01      	ldr	r3, [sp, #4]
 800194c:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <sd_lld_start+0x78>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10d      	bne.n	800196e <sd_lld_start+0x3e>
      rccEnableUSART1(true);
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <sd_lld_start+0x7c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a15      	ldr	r2, [pc, #84]	; (80019ac <sd_lld_start+0x7c>)
 8001958:	f043 0310 	orr.w	r3, r3, #16
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <sd_lld_start+0x7c>)
 8001960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <sd_lld_start+0x7c>)
 8001964:	f043 0310 	orr.w	r3, r3, #16
 8001968:	6653      	str	r3, [r2, #100]	; 0x64
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <sd_lld_start+0x7c>)
 800196c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 800196e:	9b01      	ldr	r3, [sp, #4]
 8001970:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <sd_lld_start+0x80>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d10d      	bne.n	8001992 <sd_lld_start+0x62>
      rccEnableUSART2(true);
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <sd_lld_start+0x7c>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <sd_lld_start+0x7c>)
 800197c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <sd_lld_start+0x7c>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	4a09      	ldr	r2, [pc, #36]	; (80019ac <sd_lld_start+0x7c>)
 8001988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198c:	6613      	str	r3, [r2, #96]	; 0x60
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <sd_lld_start+0x7c>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    if (&SD10 == sdp) {
      rccEnableUART10(true);
    }
#endif
  }
  usart_init(sdp, config);
 8001992:	9900      	ldr	r1, [sp, #0]
 8001994:	9801      	ldr	r0, [sp, #4]
 8001996:	f7ff fee3 	bl	8001760 <usart_init>
}
 800199a:	bf00      	nop
 800199c:	b003      	add	sp, #12
 800199e:	f85d fb04 	ldr.w	pc, [sp], #4
 80019a2:	bf00      	nop
 80019a4:	0801c958 	.word	0x0801c958
 80019a8:	20000938 	.word	0x20000938
 80019ac:	40023800 	.word	0x40023800
 80019b0:	200009b8 	.word	0x200009b8
	...

080019c0 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 80019c0:	b500      	push	{lr}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
 80019c6:	9b01      	ldr	r3, [sp, #4]
 80019c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ca:	9306      	str	r3, [sp, #24]
  uint16_t cr1 = u->CR1;
 80019cc:	9b06      	ldr	r3, [sp, #24]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f8ad 3016 	strh.w	r3, [sp, #22]
  uint16_t sr = u->SR;
 80019d4:	9b06      	ldr	r3, [sp, #24]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8ad 301e 	strh.w	r3, [sp, #30]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 80019dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00e      	beq.n	8001a06 <sd_lld_serve_interrupt+0x46>
    osalSysLockFromISR();
 80019e8:	f7ff fe9a 	bl	8001720 <osalSysLockFromISR.lto_priv.1>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
 80019ec:	9b01      	ldr	r3, [sp, #4]
 80019ee:	3304      	adds	r3, #4
 80019f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fea3 	bl	8001740 <osalEventBroadcastFlagsI.lto_priv.2>
    u->SR = ~USART_SR_LBD;
 80019fa:	9b06      	ldr	r3, [sp, #24]
 80019fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001a00:	601a      	str	r2, [r3, #0]
    osalSysUnlockFromISR();
 8001a02:	f7ff fe95 	bl	8001730 <osalSysUnlockFromISR.lto_priv.1>
  }

  /* Data available.*/
  osalSysLockFromISR();
 8001a06:	f7ff fe8b 	bl	8001720 <osalSysLockFromISR.lto_priv.1>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001a0a:	e024      	b.n	8001a56 <sd_lld_serve_interrupt+0x96>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8001a0c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <sd_lld_serve_interrupt+0x64>
      set_error(sdp, sr);
 8001a18:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	9801      	ldr	r0, [sp, #4]
 8001a20:	f7ff fef6 	bl	8001810 <set_error>
    b = (uint8_t)u->DR & sdp->rxmask;
 8001a24:	9b06      	ldr	r3, [sp, #24]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	9b01      	ldr	r3, [sp, #4]
 8001a2c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001a30:	4013      	ands	r3, r2
 8001a32:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sr & USART_SR_RXNE)
 8001a36:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <sd_lld_serve_interrupt+0x8e>
      sdIncomingDataI(sdp, b);
 8001a42:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001a46:	4619      	mov	r1, r3
 8001a48:	9801      	ldr	r0, [sp, #4]
 8001a4a:	f7ff fa09 	bl	8000e60 <sdIncomingDataI>
    sr = u->SR;
 8001a4e:	9b06      	ldr	r3, [sp, #24]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8ad 301e 	strh.w	r3, [sp, #30]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001a56:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8001a5a:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1d4      	bne.n	8001a0c <sd_lld_serve_interrupt+0x4c>
  }
  osalSysUnlockFromISR();
 8001a62:	f7ff fe65 	bl	8001730 <osalSysUnlockFromISR.lto_priv.1>

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001a66:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d022      	beq.n	8001ab8 <sd_lld_serve_interrupt+0xf8>
 8001a72:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8001a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d01c      	beq.n	8001ab8 <sd_lld_serve_interrupt+0xf8>
    msg_t b;
    osalSysLockFromISR();
 8001a7e:	f7ff fe4f 	bl	8001720 <osalSysLockFromISR.lto_priv.1>
    b = oqGetI(&sdp->oqueue);
 8001a82:	9b01      	ldr	r3, [sp, #4]
 8001a84:	3330      	adds	r3, #48	; 0x30
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fff2 	bl	8000a70 <oqGetI>
 8001a8c:	9004      	str	r0, [sp, #16]
    if (b < MSG_OK) {
 8001a8e:	9b04      	ldr	r3, [sp, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	da0c      	bge.n	8001aae <sd_lld_serve_interrupt+0xee>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 8001a94:	9b01      	ldr	r3, [sp, #4]
 8001a96:	3304      	adds	r3, #4
 8001a98:	2108      	movs	r1, #8
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fe50 	bl	8001740 <osalEventBroadcastFlagsI.lto_priv.2>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8001aa0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8001aa4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001aa8:	9b06      	ldr	r3, [sp, #24]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	e002      	b.n	8001ab4 <sd_lld_serve_interrupt+0xf4>
    }
    else
      u->DR = b;
 8001aae:	9a04      	ldr	r2, [sp, #16]
 8001ab0:	9b06      	ldr	r3, [sp, #24]
 8001ab2:	605a      	str	r2, [r3, #4]
    osalSysUnlockFromISR();
 8001ab4:	f7ff fe3c 	bl	8001730 <osalSysUnlockFromISR.lto_priv.1>
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8001ab8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8001abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d027      	beq.n	8001b14 <sd_lld_serve_interrupt+0x154>
 8001ac4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8001ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d021      	beq.n	8001b14 <sd_lld_serve_interrupt+0x154>
    osalSysLockFromISR();
 8001ad0:	f7ff fe26 	bl	8001720 <osalSysLockFromISR.lto_priv.1>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8001ad4:	9b01      	ldr	r3, [sp, #4]
 8001ad6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ad8:	9b01      	ldr	r3, [sp, #4]
 8001ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d105      	bne.n	8001aec <sd_lld_serve_interrupt+0x12c>
 8001ae0:	9b01      	ldr	r3, [sp, #4]
 8001ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <sd_lld_serve_interrupt+0x12c>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <sd_lld_serve_interrupt+0x12e>
 8001aec:	2300      	movs	r3, #0
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00b      	beq.n	8001b10 <sd_lld_serve_interrupt+0x150>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 8001af8:	9b01      	ldr	r3, [sp, #4]
 8001afa:	3304      	adds	r3, #4
 8001afc:	2110      	movs	r1, #16
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fe1e 	bl	8001740 <osalEventBroadcastFlagsI.lto_priv.2>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001b04:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8001b08:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001b0c:	9b06      	ldr	r3, [sp, #24]
 8001b0e:	60da      	str	r2, [r3, #12]
    }
    osalSysUnlockFromISR();
 8001b10:	f7ff fe0e 	bl	8001730 <osalSysUnlockFromISR.lto_priv.1>
  }
}
 8001b14:	bf00      	nop
 8001b16:	b009      	add	sp, #36	; 0x24
 8001b18:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b1c:	0000      	movs	r0, r0
	...

08001b20 <gpio_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {
 8001b20:	b082      	sub	sp, #8
 8001b22:	9001      	str	r0, [sp, #4]
 8001b24:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
 8001b26:	9b00      	ldr	r3, [sp, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	9b01      	ldr	r3, [sp, #4]
 8001b2c:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001b2e:	9b00      	ldr	r3, [sp, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	9b01      	ldr	r3, [sp, #4]
 8001b34:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8001b36:	9b00      	ldr	r3, [sp, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	9b01      	ldr	r3, [sp, #4]
 8001b3c:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 8001b3e:	9b00      	ldr	r3, [sp, #0]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	9b01      	ldr	r3, [sp, #4]
 8001b44:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8001b46:	9b00      	ldr	r3, [sp, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	9b01      	ldr	r3, [sp, #4]
 8001b4c:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8001b4e:	9b00      	ldr	r3, [sp, #0]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001b56:	9b00      	ldr	r3, [sp, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	9b01      	ldr	r3, [sp, #4]
 8001b5c:	601a      	str	r2, [r3, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	b002      	add	sp, #8
 8001b62:	4770      	bx	lr
	...

08001b70 <stm32_gpio_init>:

static void stm32_gpio_init(void) {
 8001b70:	b508      	push	{r3, lr}

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <stm32_gpio_init+0x98>)
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	4a24      	ldr	r2, [pc, #144]	; (8001c08 <stm32_gpio_init+0x98>)
 8001b78:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8001b7c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8001b80:	6113      	str	r3, [r2, #16]
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <stm32_gpio_init+0x98>)
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	4a20      	ldr	r2, [pc, #128]	; (8001c08 <stm32_gpio_init+0x98>)
 8001b88:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	6113      	str	r3, [r2, #16]
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <stm32_gpio_init+0x98>)
 8001b94:	691b      	ldr	r3, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <stm32_gpio_init+0x98>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a1b      	ldr	r2, [pc, #108]	; (8001c08 <stm32_gpio_init+0x98>)
 8001b9c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8001ba0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <stm32_gpio_init+0x98>)
 8001ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001baa:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <stm32_gpio_init+0x98>)
 8001bac:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8001bb0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8001bb4:	6513      	str	r3, [r2, #80]	; 0x50
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <stm32_gpio_init+0x98>)
 8001bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
 8001bba:	4914      	ldr	r1, [pc, #80]	; (8001c0c <stm32_gpio_init+0x9c>)
 8001bbc:	4814      	ldr	r0, [pc, #80]	; (8001c10 <stm32_gpio_init+0xa0>)
 8001bbe:	f7ff ffaf 	bl	8001b20 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
 8001bc2:	4914      	ldr	r1, [pc, #80]	; (8001c14 <stm32_gpio_init+0xa4>)
 8001bc4:	4814      	ldr	r0, [pc, #80]	; (8001c18 <stm32_gpio_init+0xa8>)
 8001bc6:	f7ff ffab 	bl	8001b20 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
 8001bca:	4914      	ldr	r1, [pc, #80]	; (8001c1c <stm32_gpio_init+0xac>)
 8001bcc:	4814      	ldr	r0, [pc, #80]	; (8001c20 <stm32_gpio_init+0xb0>)
 8001bce:	f7ff ffa7 	bl	8001b20 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
 8001bd2:	4914      	ldr	r1, [pc, #80]	; (8001c24 <stm32_gpio_init+0xb4>)
 8001bd4:	4814      	ldr	r0, [pc, #80]	; (8001c28 <stm32_gpio_init+0xb8>)
 8001bd6:	f7ff ffa3 	bl	8001b20 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
 8001bda:	4914      	ldr	r1, [pc, #80]	; (8001c2c <stm32_gpio_init+0xbc>)
 8001bdc:	4814      	ldr	r0, [pc, #80]	; (8001c30 <stm32_gpio_init+0xc0>)
 8001bde:	f7ff ff9f 	bl	8001b20 <gpio_init>
#endif
#if STM32_HAS_GPIOF
  gpio_init(GPIOF, &gpio_default_config.PFData);
 8001be2:	4914      	ldr	r1, [pc, #80]	; (8001c34 <stm32_gpio_init+0xc4>)
 8001be4:	4814      	ldr	r0, [pc, #80]	; (8001c38 <stm32_gpio_init+0xc8>)
 8001be6:	f7ff ff9b 	bl	8001b20 <gpio_init>
#endif
#if STM32_HAS_GPIOG
  gpio_init(GPIOG, &gpio_default_config.PGData);
 8001bea:	4914      	ldr	r1, [pc, #80]	; (8001c3c <stm32_gpio_init+0xcc>)
 8001bec:	4814      	ldr	r0, [pc, #80]	; (8001c40 <stm32_gpio_init+0xd0>)
 8001bee:	f7ff ff97 	bl	8001b20 <gpio_init>
#endif
#if STM32_HAS_GPIOH
  gpio_init(GPIOH, &gpio_default_config.PHData);
 8001bf2:	4914      	ldr	r1, [pc, #80]	; (8001c44 <stm32_gpio_init+0xd4>)
 8001bf4:	4814      	ldr	r0, [pc, #80]	; (8001c48 <stm32_gpio_init+0xd8>)
 8001bf6:	f7ff ff93 	bl	8001b20 <gpio_init>
#endif
#if STM32_HAS_GPIOI
  gpio_init(GPIOI, &gpio_default_config.PIData);
 8001bfa:	4914      	ldr	r1, [pc, #80]	; (8001c4c <stm32_gpio_init+0xdc>)
 8001bfc:	4814      	ldr	r0, [pc, #80]	; (8001c50 <stm32_gpio_init+0xe0>)
 8001bfe:	f7ff ff8f 	bl	8001b20 <gpio_init>
  gpio_init(GPIOJ, &gpio_default_config.PJData);
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
#endif
}
 8001c02:	bf00      	nop
 8001c04:	bd08      	pop	{r3, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	0801c964 	.word	0x0801c964
 8001c10:	40020000 	.word	0x40020000
 8001c14:	0801c980 	.word	0x0801c980
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	0801c99c 	.word	0x0801c99c
 8001c20:	40020800 	.word	0x40020800
 8001c24:	0801c9b8 	.word	0x0801c9b8
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	0801c9d4 	.word	0x0801c9d4
 8001c30:	40021000 	.word	0x40021000
 8001c34:	0801c9f0 	.word	0x0801c9f0
 8001c38:	40021400 	.word	0x40021400
 8001c3c:	0801ca0c 	.word	0x0801ca0c
 8001c40:	40021800 	.word	0x40021800
 8001c44:	0801ca28 	.word	0x0801ca28
 8001c48:	40021c00 	.word	0x40021c00
 8001c4c:	0801ca44 	.word	0x0801ca44
 8001c50:	40022000 	.word	0x40022000
	...

08001c60 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8001c60:	b508      	push	{r3, lr}

  stm32_gpio_init();
 8001c62:	f7ff ff85 	bl	8001b70 <stm32_gpio_init>
  stm32_clock_init();
 8001c66:	f7ff fb33 	bl	80012d0 <stm32_clock_init>
}
 8001c6a:	bf00      	nop
 8001c6c:	bd08      	pop	{r3, pc}
 8001c6e:	bf00      	nop

08001c70 <boardInit>:
 * @brief   Board-specific initialization code.
 * @note    You can add your board-specific code here.
 */
void boardInit(void) {

}
 8001c70:	bf00      	nop
 8001c72:	4770      	bx	lr
	...

08001c80 <__tm_calibration_object_init>:
 *
 * @param[out] tcp      pointer to the @p tm_calibration_t structure
 *
 * @notapi
 */
static inline void __tm_calibration_object_init(tm_calibration_t *tcp) {
 8001c80:	b500      	push	{lr}
 8001c82:	b08b      	sub	sp, #44	; 0x2c
 8001c84:	9001      	str	r0, [sp, #4]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 8001c86:	9b01      	ldr	r3, [sp, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
  chTMObjectInit(&tm);
 8001c8c:	ab02      	add	r3, sp, #8
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f001 fcfe 	bl	8003690 <chTMObjectInit>
  i = TM_CALIBRATION_LOOP;
 8001c94:	2304      	movs	r3, #4
 8001c96:	9309      	str	r3, [sp, #36]	; 0x24
  do {
    chTMStartMeasurementX(&tm);
 8001c98:	ab02      	add	r3, sp, #8
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fd18 	bl	80036d0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8001ca0:	ab02      	add	r3, sp, #8
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f001 fd24 	bl	80036f0 <chTMStopMeasurementX>
    i--;
 8001ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001caa:	3b01      	subs	r3, #1
 8001cac:	9309      	str	r3, [sp, #36]	; 0x24
  } while (i > 0U);
 8001cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f1      	bne.n	8001c98 <__tm_calibration_object_init+0x18>
  tcp->offset = tm.best;
 8001cb4:	9a02      	ldr	r2, [sp, #8]
 8001cb6:	9b01      	ldr	r3, [sp, #4]
 8001cb8:	601a      	str	r2, [r3, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	b00b      	add	sp, #44	; 0x2c
 8001cbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cc2:	bf00      	nop
	...

08001cd0 <chSysLock.lto_priv.3>:
static inline void chSysLock(void) {
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	2330      	movs	r3, #48	; 0x30
 8001cd4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001cd6:	9b01      	ldr	r3, [sp, #4]
 8001cd8:	f383 8811 	msr	BASEPRI, r3
}
 8001cdc:	bf00      	nop
}
 8001cde:	bf00      	nop
}
 8001ce0:	bf00      	nop
 8001ce2:	b002      	add	sp, #8
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
	...

08001cf0 <chSysUnlock.lto_priv.3>:
static inline void chSysUnlock(void) {
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001cf6:	9b01      	ldr	r3, [sp, #4]
 8001cf8:	f383 8811 	msr	BASEPRI, r3
}
 8001cfc:	bf00      	nop
}
 8001cfe:	bf00      	nop
}
 8001d00:	bf00      	nop
 8001d02:	b002      	add	sp, #8
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
	...

08001d10 <chSysLockFromISR.lto_priv.2>:
static inline void chSysLockFromISR(void) {
 8001d10:	b082      	sub	sp, #8
 8001d12:	2330      	movs	r3, #48	; 0x30
 8001d14:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001d16:	9b01      	ldr	r3, [sp, #4]
 8001d18:	f383 8811 	msr	BASEPRI, r3
}
 8001d1c:	bf00      	nop
}
 8001d1e:	bf00      	nop
}
 8001d20:	bf00      	nop
}
 8001d22:	bf00      	nop
 8001d24:	b002      	add	sp, #8
 8001d26:	4770      	bx	lr
	...

08001d30 <chSysUnlockFromISR.lto_priv.2>:
static inline void chSysUnlockFromISR(void) {
 8001d30:	b082      	sub	sp, #8
 8001d32:	2300      	movs	r3, #0
 8001d34:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001d36:	9b01      	ldr	r3, [sp, #4]
 8001d38:	f383 8811 	msr	BASEPRI, r3
}
 8001d3c:	bf00      	nop
}
 8001d3e:	bf00      	nop
}
 8001d40:	bf00      	nop
}
 8001d42:	bf00      	nop
 8001d44:	b002      	add	sp, #8
 8001d46:	4770      	bx	lr
	...

08001d50 <__oslib_init>:
/**
 * @brief   Initialization of all library modules.
 *
 * @notapi
 */
static inline void __oslib_init(void) {
 8001d50:	b508      	push	{r3, lr}

#if CH_CFG_USE_MEMCORE == TRUE
  __core_init();
 8001d52:	f003 f9bd 	bl	80050d0 <__core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  __heap_init();
 8001d56:	f003 fa53 	bl	8005200 <__heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  __factory_init();
 8001d5a:	f004 fcb9 	bl	80066d0 <__factory_init>
#endif
}
 8001d5e:	bf00      	nop
 8001d60:	bd08      	pop	{r3, pc}
 8001d62:	bf00      	nop
	...

08001d70 <chSysInit>:
 *          interrupts are enabled.
 * @post    the system is in @p ch_sys_running state.
 *
 * @special
 */
void chSysInit(void) {
 8001d70:	b500      	push	{lr}
 8001d72:	b083      	sub	sp, #12
  unsigned i;

  /* System object initialization.*/
  ch_system.state = ch_sys_initializing;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <chSysInit+0x4c>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	e008      	b.n	8001d92 <chSysInit+0x22>
    ch_system.instances[i] = NULL;
 8001d80:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <chSysInit+0x4c>)
 8001d82:	9b01      	ldr	r3, [sp, #4]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
 8001d8c:	9b01      	ldr	r3, [sp, #4]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	9b01      	ldr	r3, [sp, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f3      	beq.n	8001d80 <chSysInit+0x10>
  }

#if CH_CFG_USE_TM == TRUE
  /* Time Measurement calibration.*/
  __tm_calibration_object_init(&ch_system.tmc);
 8001d98:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <chSysInit+0x50>)
 8001d9a:	f7ff ff71 	bl	8001c80 <__tm_calibration_object_init>

  /* User system initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* OS library modules.*/
  __oslib_init();
 8001d9e:	f7ff ffd7 	bl	8001d50 <__oslib_init>

  /* Initializing default OS instance.*/
  chInstanceObjectInit(&ch0, &ch_core0_cfg);
 8001da2:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <chSysInit+0x54>)
 8001da4:	4808      	ldr	r0, [pc, #32]	; (8001dc8 <chSysInit+0x58>)
 8001da6:	f000 fffb 	bl	8002da0 <chInstanceObjectInit>

  /* It is alive now.*/
  ch_system.state = ch_sys_running;
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <chSysInit+0x4c>)
 8001dac:	2202      	movs	r2, #2
 8001dae:	701a      	strb	r2, [r3, #0]
  chSysUnlock();
 8001db0:	f7ff ff9e 	bl	8001cf0 <chSysUnlock.lto_priv.3>
}
 8001db4:	bf00      	nop
 8001db6:	b003      	add	sp, #12
 8001db8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dbc:	20000a38 	.word	0x20000a38
 8001dc0:	20000a40 	.word	0x20000a40
 8001dc4:	0801d46c 	.word	0x0801d46c
 8001dc8:	20000a48 	.word	0x20000a48
 8001dcc:	00000000 	.word	0x00000000

08001dd0 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	9001      	str	r0, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd4:	b672      	cpsid	i
}
 8001dd6:	bf00      	nop
 *          the priority mask to level 0.
 */
__STATIC_FORCEINLINE void port_disable(void) {

  __disable_irq();
}
 8001dd8:	bf00      	nop

  /* Logging the event.*/
  __trace_halt(reason);

  /* Pointing to the passed message.*/
  currcore->dbg.panic_msg = reason;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <chSysHalt+0x1c>)
 8001ddc:	9b01      	ldr	r3, [sp, #4]
 8001dde:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
     via some inter-core messaging or other means.*/
  PORT_SYSTEM_HALT_HOOK();
#endif

  /* Entering the halted state.*/
  ch_system.state = ch_sys_halted;
 8001de2:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <chSysHalt+0x20>)
 8001de4:	2203      	movs	r2, #3
 8001de6:	701a      	strb	r2, [r3, #0]

  /* Harmless infinite loop.*/
  while (true) {
 8001de8:	e7fe      	b.n	8001de8 <chSysHalt+0x18>
 8001dea:	bf00      	nop
 8001dec:	20000a48 	.word	0x20000a48
 8001df0:	20000a38 	.word	0x20000a38
	...

08001e00 <chSysIntegrityCheckI>:
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 8001e00:	b088      	sub	sp, #32
 8001e02:	9001      	str	r0, [sp, #4]
  os_instance_t *oip = currcore;
 8001e04:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <chSysIntegrityCheckI+0x10c>)
 8001e06:	9303      	str	r3, [sp, #12]
  cnt_t n;

  chDbgCheckClassI();

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001e08:	9b01      	ldr	r3, [sp, #4]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d022      	beq.n	8001e58 <chSysIntegrityCheckI+0x58>
    ch_priority_queue_t *pqp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	9307      	str	r3, [sp, #28]
    pqp = oip->rlist.pqueue.next;
 8001e16:	9b03      	ldr	r3, [sp, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	9306      	str	r3, [sp, #24]
    while (pqp != &oip->rlist.pqueue) {
 8001e1c:	e005      	b.n	8001e2a <chSysIntegrityCheckI+0x2a>
      n++;
 8001e1e:	9b07      	ldr	r3, [sp, #28]
 8001e20:	3301      	adds	r3, #1
 8001e22:	9307      	str	r3, [sp, #28]
      pqp = pqp->next;
 8001e24:	9b06      	ldr	r3, [sp, #24]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	9306      	str	r3, [sp, #24]
    while (pqp != &oip->rlist.pqueue) {
 8001e2a:	9b03      	ldr	r3, [sp, #12]
 8001e2c:	9a06      	ldr	r2, [sp, #24]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d1f5      	bne.n	8001e1e <chSysIntegrityCheckI+0x1e>
    }

    /* Scanning the ready list backward.*/
    pqp = oip->rlist.pqueue.prev;
 8001e32:	9b03      	ldr	r3, [sp, #12]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	9306      	str	r3, [sp, #24]
    while (pqp != &oip->rlist.pqueue) {
 8001e38:	e005      	b.n	8001e46 <chSysIntegrityCheckI+0x46>
      n--;
 8001e3a:	9b07      	ldr	r3, [sp, #28]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	9307      	str	r3, [sp, #28]
      pqp = pqp->prev;
 8001e40:	9b06      	ldr	r3, [sp, #24]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	9306      	str	r3, [sp, #24]
    while (pqp != &oip->rlist.pqueue) {
 8001e46:	9b03      	ldr	r3, [sp, #12]
 8001e48:	9a06      	ldr	r2, [sp, #24]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d1f5      	bne.n	8001e3a <chSysIntegrityCheckI+0x3a>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8001e4e:	9b07      	ldr	r3, [sp, #28]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <chSysIntegrityCheckI+0x58>
      return true;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e055      	b.n	8001f04 <chSysIntegrityCheckI+0x104>
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 8001e58:	9b01      	ldr	r3, [sp, #4]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d024      	beq.n	8001eac <chSysIntegrityCheckI+0xac>
    ch_delta_list_t *dlp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	9307      	str	r3, [sp, #28]
    dlp = oip->vtlist.dlist.next;
 8001e66:	9b03      	ldr	r3, [sp, #12]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	9305      	str	r3, [sp, #20]
    while (dlp != &oip->vtlist.dlist) {
 8001e6c:	e005      	b.n	8001e7a <chSysIntegrityCheckI+0x7a>
      n++;
 8001e6e:	9b07      	ldr	r3, [sp, #28]
 8001e70:	3301      	adds	r3, #1
 8001e72:	9307      	str	r3, [sp, #28]
      dlp = dlp->next;
 8001e74:	9b05      	ldr	r3, [sp, #20]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	9305      	str	r3, [sp, #20]
    while (dlp != &oip->vtlist.dlist) {
 8001e7a:	9b03      	ldr	r3, [sp, #12]
 8001e7c:	3310      	adds	r3, #16
 8001e7e:	9a05      	ldr	r2, [sp, #20]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d1f4      	bne.n	8001e6e <chSysIntegrityCheckI+0x6e>
    }

    /* Scanning the timers list backward.*/
    dlp = oip->vtlist.dlist.prev;
 8001e84:	9b03      	ldr	r3, [sp, #12]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	9305      	str	r3, [sp, #20]
    while (dlp != &oip->vtlist.dlist) {
 8001e8a:	e005      	b.n	8001e98 <chSysIntegrityCheckI+0x98>
      n--;
 8001e8c:	9b07      	ldr	r3, [sp, #28]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	9307      	str	r3, [sp, #28]
      dlp = dlp->prev;
 8001e92:	9b05      	ldr	r3, [sp, #20]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	9305      	str	r3, [sp, #20]
    while (dlp != &oip->vtlist.dlist) {
 8001e98:	9b03      	ldr	r3, [sp, #12]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	9a05      	ldr	r2, [sp, #20]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d1f4      	bne.n	8001e8c <chSysIntegrityCheckI+0x8c>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8001ea2:	9b07      	ldr	r3, [sp, #28]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <chSysIntegrityCheckI+0xac>
      return true;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e02b      	b.n	8001f04 <chSysIntegrityCheckI+0x104>
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 8001eac:	9b01      	ldr	r3, [sp, #4]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d025      	beq.n	8001f02 <chSysIntegrityCheckI+0x102>
    ch_queue_t *qp, *rqp;

    /* Registry header, access to this list depends on the current
       kernel configuration.*/
    rqp = REG_HEADER(oip);
 8001eb6:	9b03      	ldr	r3, [sp, #12]
 8001eb8:	3328      	adds	r3, #40	; 0x28
 8001eba:	9302      	str	r3, [sp, #8]

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9307      	str	r3, [sp, #28]
    qp = rqp->next;
 8001ec0:	9b02      	ldr	r3, [sp, #8]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	9304      	str	r3, [sp, #16]
    while (qp != rqp) {
 8001ec6:	e005      	b.n	8001ed4 <chSysIntegrityCheckI+0xd4>
      n++;
 8001ec8:	9b07      	ldr	r3, [sp, #28]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	9307      	str	r3, [sp, #28]
      qp = qp->next;
 8001ece:	9b04      	ldr	r3, [sp, #16]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	9304      	str	r3, [sp, #16]
    while (qp != rqp) {
 8001ed4:	9a04      	ldr	r2, [sp, #16]
 8001ed6:	9b02      	ldr	r3, [sp, #8]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d1f5      	bne.n	8001ec8 <chSysIntegrityCheckI+0xc8>
    }

    /* Scanning the ready list backward.*/
    qp = rqp->prev;
 8001edc:	9b02      	ldr	r3, [sp, #8]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	9304      	str	r3, [sp, #16]
    while (qp != rqp) {
 8001ee2:	e005      	b.n	8001ef0 <chSysIntegrityCheckI+0xf0>
      n--;
 8001ee4:	9b07      	ldr	r3, [sp, #28]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	9307      	str	r3, [sp, #28]
      qp = qp->prev;
 8001eea:	9b04      	ldr	r3, [sp, #16]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	9304      	str	r3, [sp, #16]
    while (qp != rqp) {
 8001ef0:	9a04      	ldr	r2, [sp, #16]
 8001ef2:	9b02      	ldr	r3, [sp, #8]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d1f5      	bne.n	8001ee4 <chSysIntegrityCheckI+0xe4>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8001ef8:	9b07      	ldr	r3, [sp, #28]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <chSysIntegrityCheckI+0x102>
      return true;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <chSysIntegrityCheckI+0x104>
  if ((testmask & CH_INTEGRITY_PORT) != 0U) {
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	b008      	add	sp, #32
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000a48 	.word	0x20000a48

08001f10 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8001f10:	b508      	push	{r3, lr}
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currtp->time++;
#endif
  chVTDoTickI();
 8001f12:	f000 faed 	bl	80024f0 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
 8001f16:	bf00      	nop
 8001f18:	bd08      	pop	{r3, pc}
 8001f1a:	bf00      	nop
 8001f1c:	0000      	movs	r0, r0
	...

08001f20 <chSysGetStatusAndLockX>:
 * @return              The previous system status, the encoding of this
 *                      status word is architecture-dependent and opaque.
 *
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {
 8001f20:	b500      	push	{lr}
 8001f22:	b087      	sub	sp, #28
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f24:	f3ef 8311 	mrs	r3, BASEPRI
 8001f28:	9303      	str	r3, [sp, #12]
  return(result);
 8001f2a:	9b03      	ldr	r3, [sp, #12]
  sts = (syssts_t)__get_BASEPRI();
 8001f2c:	9302      	str	r3, [sp, #8]
  return sts;
 8001f2e:	9b02      	ldr	r3, [sp, #8]

  syssts_t sts = port_get_irq_status();
 8001f30:	9305      	str	r3, [sp, #20]
 8001f32:	9b05      	ldr	r3, [sp, #20]
 8001f34:	9304      	str	r3, [sp, #16]
  return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 8001f36:	9b04      	ldr	r3, [sp, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
  if (port_irq_enabled(sts)) {
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d011      	beq.n	8001f6a <chSysGetStatusAndLockX+0x4a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f46:	f3ef 8305 	mrs	r3, IPSR
 8001f4a:	9301      	str	r3, [sp, #4]
  return(result);
 8001f4c:	9b01      	ldr	r3, [sp, #4]
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8001f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
    if (port_is_isr_context()) {
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <chSysGetStatusAndLockX+0x46>
      chSysLockFromISR();
 8001f60:	f7ff fed6 	bl	8001d10 <chSysLockFromISR.lto_priv.2>
 8001f64:	e001      	b.n	8001f6a <chSysGetStatusAndLockX+0x4a>
    }
    else {
      chSysLock();
 8001f66:	f7ff feb3 	bl	8001cd0 <chSysLock.lto_priv.3>
    }
  }
  return sts;
 8001f6a:	9b05      	ldr	r3, [sp, #20]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	b007      	add	sp, #28
 8001f70:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001f80 <chSysRestoreStatusX>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8001f80:	b500      	push	{lr}
 8001f82:	b085      	sub	sp, #20
 8001f84:	9001      	str	r0, [sp, #4]
 8001f86:	9b01      	ldr	r3, [sp, #4]
 8001f88:	9303      	str	r3, [sp, #12]
  return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 8001f8a:	9b03      	ldr	r3, [sp, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3

  if (port_irq_enabled(sts)) {
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d013      	beq.n	8001fc2 <chSysRestoreStatusX+0x42>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f9a:	f3ef 8305 	mrs	r3, IPSR
 8001f9e:	9302      	str	r3, [sp, #8]
  return(result);
 8001fa0:	9b02      	ldr	r3, [sp, #8]
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8001fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf14      	ite	ne
 8001faa:	2301      	movne	r3, #1
 8001fac:	2300      	moveq	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
    if (port_is_isr_context()) {
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <chSysRestoreStatusX+0x3a>
      chSysUnlockFromISR();
 8001fb4:	f7ff febc 	bl	8001d30 <chSysUnlockFromISR.lto_priv.2>
    else {
      chSchRescheduleS();
      chSysUnlock();
    }
  }
}
 8001fb8:	e003      	b.n	8001fc2 <chSysRestoreStatusX+0x42>
      chSchRescheduleS();
 8001fba:	f000 fdd9 	bl	8002b70 <chSchRescheduleS>
      chSysUnlock();
 8001fbe:	f7ff fe97 	bl	8001cf0 <chSysUnlock.lto_priv.3>
}
 8001fc2:	bf00      	nop
 8001fc4:	b005      	add	sp, #20
 8001fc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fca:	bf00      	nop
 8001fcc:	0000      	movs	r0, r0
	...

08001fd0 <chRFCUCollectFaultsI>:
/**
 * @brief   Adds fault flags to the current mask.
 *
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	9001      	str	r0, [sp, #4]

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <chRFCUCollectFaultsI+0x18>)
 8001fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd8:	9b01      	ldr	r3, [sp, #4]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	4a02      	ldr	r2, [pc, #8]	; (8001fe8 <chRFCUCollectFaultsI+0x18>)
 8001fde:	6353      	str	r3, [r2, #52]	; 0x34
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
 8001fe0:	bf00      	nop
 8001fe2:	b002      	add	sp, #8
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000a48 	.word	0x20000a48
 8001fec:	00000000 	.word	0x00000000

08001ff0 <chTimeAddX.lto_priv.0>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	9001      	str	r0, [sp, #4]
 8001ff4:	9100      	str	r1, [sp, #0]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 8001ff6:	9a01      	ldr	r2, [sp, #4]
 8001ff8:	9b00      	ldr	r3, [sp, #0]
 8001ffa:	4413      	add	r3, r2
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	b002      	add	sp, #8
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
	...

08002010 <chTimeDiffX.lto_priv.0>:
 * @param[in] end       second system time
 * @return              The interval representing the time difference.
 *
 * @xclass
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 8002010:	b082      	sub	sp, #8
 8002012:	9001      	str	r0, [sp, #4]
 8002014:	9100      	str	r1, [sp, #0]

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8002016:	9a00      	ldr	r2, [sp, #0]
 8002018:	9b01      	ldr	r3, [sp, #4]
 800201a:	1ad3      	subs	r3, r2, r3
  /*lint -restore*/
}
 800201c:	4618      	mov	r0, r3
 800201e:	b002      	add	sp, #8
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
	...

08002030 <ch_dlist_isempty>:
 * @param[in] dlhp      pointer to the delta list header
 * @return              The status of the delta list.
 *
 * @notapi
 */
static inline bool ch_dlist_isempty(ch_delta_list_t *dlhp) {
 8002030:	b082      	sub	sp, #8
 8002032:	9001      	str	r0, [sp, #4]

  return (bool)(dlhp == dlhp->next);
 8002034:	9b01      	ldr	r3, [sp, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	9a01      	ldr	r2, [sp, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	bf0c      	ite	eq
 800203e:	2301      	moveq	r3, #1
 8002040:	2300      	movne	r3, #0
 8002042:	b2db      	uxtb	r3, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	b002      	add	sp, #8
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	0000      	movs	r0, r0
	...

08002050 <ch_dlist_isfirst>:
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline bool ch_dlist_isfirst(ch_delta_list_t *dlhp,
                                    ch_delta_list_t *dlp) {
 8002050:	b082      	sub	sp, #8
 8002052:	9001      	str	r0, [sp, #4]
 8002054:	9100      	str	r1, [sp, #0]

  return (bool)(dlhp->next == dlp);
 8002056:	9b01      	ldr	r3, [sp, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	9a00      	ldr	r2, [sp, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
}
 8002066:	4618      	mov	r0, r3
 8002068:	b002      	add	sp, #8
 800206a:	4770      	bx	lr
 800206c:	0000      	movs	r0, r0
	...

08002070 <ch_dlist_insert_after>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
                                         ch_delta_list_t *dlp,
                                         sysinterval_t delta) {
 8002070:	b084      	sub	sp, #16
 8002072:	9003      	str	r0, [sp, #12]
 8002074:	9102      	str	r1, [sp, #8]
 8002076:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
 8002078:	9b02      	ldr	r3, [sp, #8]
 800207a:	9a01      	ldr	r2, [sp, #4]
 800207c:	609a      	str	r2, [r3, #8]
  dlp->prev       = dlhp;
 800207e:	9b02      	ldr	r3, [sp, #8]
 8002080:	9a03      	ldr	r2, [sp, #12]
 8002082:	605a      	str	r2, [r3, #4]
  dlp->next       = dlp->prev->next;
 8002084:	9b02      	ldr	r3, [sp, #8]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	9b02      	ldr	r3, [sp, #8]
 800208c:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp;
 800208e:	9b02      	ldr	r3, [sp, #8]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	9a02      	ldr	r2, [sp, #8]
 8002094:	605a      	str	r2, [r3, #4]
  dlhp->next      = dlp;
 8002096:	9b03      	ldr	r3, [sp, #12]
 8002098:	9a02      	ldr	r2, [sp, #8]
 800209a:	601a      	str	r2, [r3, #0]
}
 800209c:	bf00      	nop
 800209e:	b004      	add	sp, #16
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
	...

080020b0 <ch_dlist_insert_before>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
                                          ch_delta_list_t *dlp,
                                          sysinterval_t delta) {
 80020b0:	b084      	sub	sp, #16
 80020b2:	9003      	str	r0, [sp, #12]
 80020b4:	9102      	str	r1, [sp, #8]
 80020b6:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
 80020b8:	9b02      	ldr	r3, [sp, #8]
 80020ba:	9a01      	ldr	r2, [sp, #4]
 80020bc:	609a      	str	r2, [r3, #8]
  dlp->next       = dlhp;
 80020be:	9b02      	ldr	r3, [sp, #8]
 80020c0:	9a03      	ldr	r2, [sp, #12]
 80020c2:	601a      	str	r2, [r3, #0]
  dlp->prev       = dlp->next->prev;
 80020c4:	9b02      	ldr	r3, [sp, #8]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	9b02      	ldr	r3, [sp, #8]
 80020cc:	605a      	str	r2, [r3, #4]
  dlp->prev->next = dlp;
 80020ce:	9b02      	ldr	r3, [sp, #8]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	9a02      	ldr	r2, [sp, #8]
 80020d4:	601a      	str	r2, [r3, #0]
  dlhp->prev      = dlp;
 80020d6:	9b03      	ldr	r3, [sp, #12]
 80020d8:	9a02      	ldr	r2, [sp, #8]
 80020da:	605a      	str	r2, [r3, #4]
}
 80020dc:	bf00      	nop
 80020de:	b004      	add	sp, #16
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
	...

080020f0 <ch_dlist_insert>:
 *
 * @notapi
 */
static inline void ch_dlist_insert(ch_delta_list_t *dlhp,
                                   ch_delta_list_t *dlep,
                                   sysinterval_t delta) {
 80020f0:	b500      	push	{lr}
 80020f2:	b087      	sub	sp, #28
 80020f4:	9003      	str	r0, [sp, #12]
 80020f6:	9102      	str	r1, [sp, #8]
 80020f8:	9201      	str	r2, [sp, #4]
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
 80020fa:	9b03      	ldr	r3, [sp, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	9305      	str	r3, [sp, #20]
  while (likely(dlp->delta < delta)) {
 8002100:	e007      	b.n	8002112 <ch_dlist_insert+0x22>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
 8002102:	9b05      	ldr	r3, [sp, #20]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	9a01      	ldr	r2, [sp, #4]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	9301      	str	r3, [sp, #4]
    dlp = dlp->next;
 800210c:	9b05      	ldr	r3, [sp, #20]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	9305      	str	r3, [sp, #20]
  while (likely(dlp->delta < delta)) {
 8002112:	9b05      	ldr	r3, [sp, #20]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	9a01      	ldr	r2, [sp, #4]
 8002118:	429a      	cmp	r2, r3
 800211a:	bf8c      	ite	hi
 800211c:	2301      	movhi	r3, #1
 800211e:	2300      	movls	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ed      	bne.n	8002102 <ch_dlist_insert+0x12>
  }

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);
 8002126:	9a01      	ldr	r2, [sp, #4]
 8002128:	9902      	ldr	r1, [sp, #8]
 800212a:	9805      	ldr	r0, [sp, #20]
 800212c:	f7ff ffc0 	bl	80020b0 <ch_dlist_insert_before>

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
 8002130:	9b05      	ldr	r3, [sp, #20]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	9b01      	ldr	r3, [sp, #4]
 8002136:	1ad2      	subs	r2, r2, r3
 8002138:	9b05      	ldr	r3, [sp, #20]
 800213a:	609a      	str	r2, [r3, #8]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
 800213c:	9b03      	ldr	r3, [sp, #12]
 800213e:	f04f 32ff 	mov.w	r2, #4294967295
 8002142:	609a      	str	r2, [r3, #8]
}
 8002144:	bf00      	nop
 8002146:	b007      	add	sp, #28
 8002148:	f85d fb04 	ldr.w	pc, [sp], #4
 800214c:	0000      	movs	r0, r0
	...

08002150 <ch_dlist_remove_first>:
 *
 * @param[in] dlhp      pointer to the delta list header
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_remove_first(ch_delta_list_t *dlhp) {
 8002150:	b084      	sub	sp, #16
 8002152:	9001      	str	r0, [sp, #4]
  ch_delta_list_t *dlp = dlhp->next;
 8002154:	9b01      	ldr	r3, [sp, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	9303      	str	r3, [sp, #12]

  dlhp->next       = dlp->next;
 800215a:	9b03      	ldr	r3, [sp, #12]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	9b01      	ldr	r3, [sp, #4]
 8002160:	601a      	str	r2, [r3, #0]
  dlhp->next->prev = dlhp;
 8002162:	9b01      	ldr	r3, [sp, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	9a01      	ldr	r2, [sp, #4]
 8002168:	605a      	str	r2, [r3, #4]

  return dlp;
 800216a:	9b03      	ldr	r3, [sp, #12]
}
 800216c:	4618      	mov	r0, r3
 800216e:	b004      	add	sp, #16
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
	...

08002180 <ch_dlist_dequeue>:
 *
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {
 8002180:	b082      	sub	sp, #8
 8002182:	9001      	str	r0, [sp, #4]

  dlp->prev->next = dlp->next;
 8002184:	9b01      	ldr	r3, [sp, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	9a01      	ldr	r2, [sp, #4]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp->prev;
 800218e:	9b01      	ldr	r3, [sp, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	9a01      	ldr	r2, [sp, #4]
 8002194:	6852      	ldr	r2, [r2, #4]
 8002196:	605a      	str	r2, [r3, #4]

  return dlp;
 8002198:	9b01      	ldr	r3, [sp, #4]
}
 800219a:	4618      	mov	r0, r3
 800219c:	b002      	add	sp, #8
 800219e:	4770      	bx	lr

080021a0 <port_timer_start_alarm>:
 *
 * @param[in] time      the time to be set for the first alarm
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {
 80021a0:	b500      	push	{lr}
 80021a2:	b083      	sub	sp, #12
 80021a4:	9001      	str	r0, [sp, #4]

  stStartAlarm(time);
 80021a6:	9801      	ldr	r0, [sp, #4]
 80021a8:	f7fe f9a2 	bl	80004f0 <stStartAlarm>
}
 80021ac:	bf00      	nop
 80021ae:	b003      	add	sp, #12
 80021b0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080021c0 <port_timer_stop_alarm>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {
 80021c0:	b508      	push	{r3, lr}

  stStopAlarm();
 80021c2:	f7fe f9a5 	bl	8000510 <stStopAlarm>
}
 80021c6:	bf00      	nop
 80021c8:	bd08      	pop	{r3, pc}
 80021ca:	bf00      	nop
 80021cc:	0000      	movs	r0, r0
	...

080021d0 <port_timer_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {
 80021d0:	b500      	push	{lr}
 80021d2:	b083      	sub	sp, #12
 80021d4:	9001      	str	r0, [sp, #4]

  stSetAlarm(time);
 80021d6:	9801      	ldr	r0, [sp, #4]
 80021d8:	f7fe f9a2 	bl	8000520 <stSetAlarm>
}
 80021dc:	bf00      	nop
 80021de:	b003      	add	sp, #12
 80021e0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080021f0 <port_timer_get_time.lto_priv.0>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 80021f0:	b508      	push	{r3, lr}

  return stGetCounter();
 80021f2:	f7fe f975 	bl	80004e0 <stGetCounter>
 80021f6:	4603      	mov	r3, r0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd08      	pop	{r3, pc}
 80021fc:	0000      	movs	r0, r0
	...

08002200 <chSysLockFromISR.lto_priv.3>:
static inline void chSysLockFromISR(void) {
 8002200:	b082      	sub	sp, #8
 8002202:	2330      	movs	r3, #48	; 0x30
 8002204:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002206:	9b01      	ldr	r3, [sp, #4]
 8002208:	f383 8811 	msr	BASEPRI, r3
}
 800220c:	bf00      	nop
}
 800220e:	bf00      	nop
}
 8002210:	bf00      	nop
}
 8002212:	bf00      	nop
 8002214:	b002      	add	sp, #8
 8002216:	4770      	bx	lr
	...

08002220 <chSysUnlockFromISR.lto_priv.3>:
static inline void chSysUnlockFromISR(void) {
 8002220:	b082      	sub	sp, #8
 8002222:	2300      	movs	r3, #0
 8002224:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002226:	9b01      	ldr	r3, [sp, #4]
 8002228:	f383 8811 	msr	BASEPRI, r3
}
 800222c:	bf00      	nop
}
 800222e:	bf00      	nop
}
 8002230:	bf00      	nop
}
 8002232:	bf00      	nop
 8002234:	b002      	add	sp, #8
 8002236:	4770      	bx	lr
	...

08002240 <chVTGetSystemTimeX.lto_priv.0>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 8002240:	b508      	push	{r3, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return currcore->vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 8002242:	f7ff ffd5 	bl	80021f0 <port_timer_get_time.lto_priv.0>
 8002246:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd08      	pop	{r3, pc}
 800224c:	0000      	movs	r0, r0
	...

08002250 <vt_set_alarm>:
 *          in order to compensate for the event.
 *
 * @param[in] now       last known system time
 * @param[in] delay     delay over @p now
 */
static void vt_set_alarm(systime_t now, sysinterval_t delay) {
 8002250:	b500      	push	{lr}
 8002252:	b087      	sub	sp, #28
 8002254:	9001      	str	r0, [sp, #4]
 8002256:	9100      	str	r1, [sp, #0]
  sysinterval_t currdelta;

  /* Initial delta is what is configured statically.*/
  currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8002258:	2302      	movs	r3, #2
 800225a:	9305      	str	r3, [sp, #20]

  if (delay < currdelta) {
 800225c:	9a00      	ldr	r2, [sp, #0]
 800225e:	9b05      	ldr	r3, [sp, #20]
 8002260:	429a      	cmp	r2, r3
 8002262:	d201      	bcs.n	8002268 <vt_set_alarm+0x18>
    /* We need to avoid that the system time goes past the alarm we are
       going to set before the alarm is actually set.*/
    delay = currdelta;
 8002264:	9b05      	ldr	r3, [sp, #20]
 8002266:	9300      	str	r3, [sp, #0]
  while (true) {
    sysinterval_t nowdelta;
    systime_t newnow;

    /* Setting up the alarm on the next deadline.*/
    port_timer_set_alarm(chTimeAddX(now, delay));
 8002268:	9900      	ldr	r1, [sp, #0]
 800226a:	9801      	ldr	r0, [sp, #4]
 800226c:	f7ff fec0 	bl	8001ff0 <chTimeAddX.lto_priv.0>
 8002270:	4603      	mov	r3, r0
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ffac 	bl	80021d0 <port_timer_set_alarm>
       current time skipped past the calculated deadline.
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
 8002278:	f7ff ffe2 	bl	8002240 <chVTGetSystemTimeX.lto_priv.0>
 800227c:	9004      	str	r0, [sp, #16]
    nowdelta = chTimeDiffX(now, newnow);
 800227e:	9904      	ldr	r1, [sp, #16]
 8002280:	9801      	ldr	r0, [sp, #4]
 8002282:	f7ff fec5 	bl	8002010 <chTimeDiffX.lto_priv.0>
 8002286:	9003      	str	r0, [sp, #12]
    if (likely(nowdelta < delay)) {
 8002288:	9a03      	ldr	r2, [sp, #12]
 800228a:	9b00      	ldr	r3, [sp, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	bf34      	ite	cc
 8002290:	2301      	movcc	r3, #1
 8002292:	2300      	movcs	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d107      	bne.n	80022aa <vt_set_alarm+0x5a>
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 800229a:	9b05      	ldr	r3, [sp, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	9305      	str	r3, [sp, #20]

    /* Current time becomes the new "base" time.*/
    now = newnow;
 80022a0:	9b04      	ldr	r3, [sp, #16]
 80022a2:	9301      	str	r3, [sp, #4]
    delay = currdelta;
 80022a4:	9b05      	ldr	r3, [sp, #20]
 80022a6:	9300      	str	r3, [sp, #0]
  while (true) {
 80022a8:	e7de      	b.n	8002268 <vt_set_alarm+0x18>
      break;
 80022aa:	bf00      	nop
  }

#if !defined(CH_VT_RFCU_DISABLED)
  /* Checking if a skip occurred.*/
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 80022ac:	9b05      	ldr	r3, [sp, #20]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d902      	bls.n	80022b8 <vt_set_alarm+0x68>
    chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 80022b2:	2001      	movs	r0, #1
 80022b4:	f7ff fe8c 	bl	8001fd0 <chRFCUCollectFaultsI>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 80022b8:	bf00      	nop
 80022ba:	b007      	add	sp, #28
 80022bc:	f85d fb04 	ldr.w	pc, [sp], #4

080022c0 <vt_insert_first>:
 * @note    This is the special case when the delta list is initially empty.
 */
static void vt_insert_first(virtual_timers_list_t *vtlp,
                            virtual_timer_t *vtp,
                            systime_t now,
                            sysinterval_t delay) {
 80022c0:	b500      	push	{lr}
 80022c2:	b087      	sub	sp, #28
 80022c4:	9003      	str	r0, [sp, #12]
 80022c6:	9102      	str	r1, [sp, #8]
 80022c8:	9201      	str	r2, [sp, #4]
 80022ca:	9300      	str	r3, [sp, #0]
  sysinterval_t currdelta;

  /* The delta list is empty, the current time becomes the new
     delta list base time, the timer is inserted.*/
  vtlp->lasttime = now;
 80022cc:	9b03      	ldr	r3, [sp, #12]
 80022ce:	9a01      	ldr	r2, [sp, #4]
 80022d0:	60da      	str	r2, [r3, #12]
  ch_dlist_insert_after(&vtlp->dlist, &vtp->dlist, delay);
 80022d2:	9b03      	ldr	r3, [sp, #12]
 80022d4:	9902      	ldr	r1, [sp, #8]
 80022d6:	9a00      	ldr	r2, [sp, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fec9 	bl	8002070 <ch_dlist_insert_after>

  /* Initial delta is what is configured statically.*/
  currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80022de:	2302      	movs	r3, #2
 80022e0:	9305      	str	r3, [sp, #20]

  /* If the requested delay is lower than the minimum safe delta then it
     is raised to the minimum safe value.*/
  if (delay < currdelta) {
 80022e2:	9a00      	ldr	r2, [sp, #0]
 80022e4:	9b05      	ldr	r3, [sp, #20]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d201      	bcs.n	80022ee <vt_insert_first+0x2e>
    /* We need to avoid that the system time goes past the alarm we are
       going to set before the alarm is actually set.*/
    delay = currdelta;
 80022ea:	9b05      	ldr	r3, [sp, #20]
 80022ec:	9300      	str	r3, [sp, #0]
  }
#endif

  /* Being the first element inserted in the list the alarm timer
     is started.*/
  port_timer_start_alarm(chTimeAddX(vtlp->lasttime, delay));
 80022ee:	9b03      	ldr	r3, [sp, #12]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	9900      	ldr	r1, [sp, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fe7b 	bl	8001ff0 <chTimeAddX.lto_priv.0>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff4f 	bl	80021a0 <port_timer_start_alarm>
       current time skipped past the calculated deadline.
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
 8002302:	f7ff ff9d 	bl	8002240 <chVTGetSystemTimeX.lto_priv.0>
 8002306:	9004      	str	r0, [sp, #16]
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8002308:	9904      	ldr	r1, [sp, #16]
 800230a:	9801      	ldr	r0, [sp, #4]
 800230c:	f7ff fe80 	bl	8002010 <chTimeDiffX.lto_priv.0>
 8002310:	4602      	mov	r2, r0
 8002312:	9b00      	ldr	r3, [sp, #0]
 8002314:	4293      	cmp	r3, r2
 8002316:	bf8c      	ite	hi
 8002318:	2301      	movhi	r3, #1
 800231a:	2300      	movls	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10f      	bne.n	8002342 <vt_insert_first+0x82>
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 8002322:	9b05      	ldr	r3, [sp, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	9305      	str	r3, [sp, #20]

    /* Setting up the alarm on the next deadline.*/
    port_timer_set_alarm(chTimeAddX(now, currdelta));
 8002328:	9905      	ldr	r1, [sp, #20]
 800232a:	9801      	ldr	r0, [sp, #4]
 800232c:	f7ff fe60 	bl	8001ff0 <chTimeAddX.lto_priv.0>
 8002330:	4603      	mov	r3, r0
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff ff4c 	bl	80021d0 <port_timer_set_alarm>

    /* Current time becomes the new "base" time.*/
    now = newnow;
 8002338:	9b04      	ldr	r3, [sp, #16]
 800233a:	9301      	str	r3, [sp, #4]
    delay = currdelta;
 800233c:	9b05      	ldr	r3, [sp, #20]
 800233e:	9300      	str	r3, [sp, #0]
  while (true) {
 8002340:	e7df      	b.n	8002302 <vt_insert_first+0x42>
      break;
 8002342:	bf00      	nop
  }

#if !defined(CH_VT_RFCU_DISABLED)
  /* Checking if a skip occurred.*/
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 8002344:	9b05      	ldr	r3, [sp, #20]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d902      	bls.n	8002350 <vt_insert_first+0x90>
    chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 800234a:	2001      	movs	r0, #1
 800234c:	f7ff fe40 	bl	8001fd0 <chRFCUCollectFaultsI>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 8002350:	bf00      	nop
 8002352:	b007      	add	sp, #28
 8002354:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002360 <vt_enqueue>:
/**
 * @brief   Enqueues a virtual timer in a virtual timers list.
 */
static void vt_enqueue(virtual_timers_list_t *vtlp,
                       virtual_timer_t *vtp,
                       sysinterval_t delay) {
 8002360:	b500      	push	{lr}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	9003      	str	r0, [sp, #12]
 8002366:	9102      	str	r1, [sp, #8]
 8002368:	9201      	str	r2, [sp, #4]
  sysinterval_t delta;

#if CH_CFG_ST_TIMEDELTA > 0
  {
    sysinterval_t nowdelta;
    systime_t now = chVTGetSystemTimeX();
 800236a:	f7ff ff69 	bl	8002240 <chVTGetSystemTimeX.lto_priv.0>
 800236e:	9006      	str	r0, [sp, #24]

    /* Special case where the timers list is empty.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8002370:	9b03      	ldr	r3, [sp, #12]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fe5c 	bl	8002030 <ch_dlist_isempty>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <vt_enqueue+0x2c>

      vt_insert_first(vtlp, vtp, now, delay);
 800237e:	9b01      	ldr	r3, [sp, #4]
 8002380:	9a06      	ldr	r2, [sp, #24]
 8002382:	9902      	ldr	r1, [sp, #8]
 8002384:	9803      	ldr	r0, [sp, #12]
 8002386:	f7ff ff9b 	bl	80022c0 <vt_insert_first>

      return;
 800238a:	e020      	b.n	80023ce <vt_enqueue+0x6e>
    }

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'deltanow'.*/
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 800238c:	9b03      	ldr	r3, [sp, #12]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	9906      	ldr	r1, [sp, #24]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fe3c 	bl	8002010 <chTimeDiffX.lto_priv.0>
 8002398:	9005      	str	r0, [sp, #20]
    delta    = nowdelta + delay;
 800239a:	9a05      	ldr	r2, [sp, #20]
 800239c:	9b01      	ldr	r3, [sp, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	9307      	str	r3, [sp, #28]

    /* Scenario where a very large delay exceeded the numeric range, the
       delta is shortened to make it fit the numeric range, the timer
       will be triggered "deltanow" cycles earlier.*/
    if (delta < nowdelta) {
 80023a2:	9a07      	ldr	r2, [sp, #28]
 80023a4:	9b05      	ldr	r3, [sp, #20]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d201      	bcs.n	80023ae <vt_enqueue+0x4e>
      delta = delay;
 80023aa:	9b01      	ldr	r3, [sp, #4]
 80023ac:	9307      	str	r3, [sp, #28]
    }

    /* Checking if this timer would become the first in the delta list, this
       requires changing the current alarm setting.*/
    if (delta < vtlp->dlist.next->delta) {
 80023ae:	9b03      	ldr	r3, [sp, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	9a07      	ldr	r2, [sp, #28]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d203      	bcs.n	80023c2 <vt_enqueue+0x62>

      vt_set_alarm(now, delay);
 80023ba:	9901      	ldr	r1, [sp, #4]
 80023bc:	9806      	ldr	r0, [sp, #24]
 80023be:	f7ff ff47 	bl	8002250 <vt_set_alarm>

  /* Delta is initially equal to the specified delay.*/
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 80023c2:	9b03      	ldr	r3, [sp, #12]
 80023c4:	9902      	ldr	r1, [sp, #8]
 80023c6:	9a07      	ldr	r2, [sp, #28]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fe91 	bl	80020f0 <ch_dlist_insert>
}
 80023ce:	b009      	add	sp, #36	; 0x24
 80023d0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080023e0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 80023e0:	b500      	push	{lr}
 80023e2:	b087      	sub	sp, #28
 80023e4:	9003      	str	r0, [sp, #12]
 80023e6:	9102      	str	r1, [sp, #8]
 80023e8:	9201      	str	r2, [sp, #4]
 80023ea:	9300      	str	r3, [sp, #0]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <chVTDoSetI+0x34>)
 80023ee:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  /* Timer initialization.*/
  vtp->par     = par;
 80023f0:	9b03      	ldr	r3, [sp, #12]
 80023f2:	9a00      	ldr	r2, [sp, #0]
 80023f4:	611a      	str	r2, [r3, #16]
  vtp->func    = vtfunc;
 80023f6:	9b03      	ldr	r3, [sp, #12]
 80023f8:	9a01      	ldr	r2, [sp, #4]
 80023fa:	60da      	str	r2, [r3, #12]
  vtp->reload  = (sysinterval_t)0;
 80023fc:	9b03      	ldr	r3, [sp, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	615a      	str	r2, [r3, #20]

  /* Inserting the timer in the delta list.*/
  vt_enqueue(vtlp, vtp, delay);
 8002402:	9a02      	ldr	r2, [sp, #8]
 8002404:	9903      	ldr	r1, [sp, #12]
 8002406:	9805      	ldr	r0, [sp, #20]
 8002408:	f7ff ffaa 	bl	8002360 <vt_enqueue>
}
 800240c:	bf00      	nop
 800240e:	b007      	add	sp, #28
 8002410:	f85d fb04 	ldr.w	pc, [sp], #4
 8002414:	20000a58 	.word	0x20000a58
	...

08002420 <chVTDoResetI>:
 *
 * @param[in] vtp       pointer to a @p virtual_timer_t structure
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8002420:	b500      	push	{lr}
 8002422:	b087      	sub	sp, #28
 8002424:	9001      	str	r0, [sp, #4]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 8002426:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <chVTDoResetI+0xc0>)
 8002428:	9305      	str	r3, [sp, #20]
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 800242a:	9b05      	ldr	r3, [sp, #20]
 800242c:	9a01      	ldr	r2, [sp, #4]
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fe0d 	bl	8002050 <ch_dlist_isfirst>
 8002436:	4603      	mov	r3, r0
 8002438:	f083 0301 	eor.w	r3, r3, #1
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d014      	beq.n	800246c <chVTDoResetI+0x4c>

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
 8002442:	9b01      	ldr	r3, [sp, #4]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fe9b 	bl	8002180 <ch_dlist_dequeue>

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
 800244a:	9b01      	ldr	r3, [sp, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6899      	ldr	r1, [r3, #8]
 8002450:	9b01      	ldr	r3, [sp, #4]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	9b01      	ldr	r3, [sp, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	440a      	add	r2, r1
 800245a:	609a      	str	r2, [r3, #8]

    /* Marking timer as not armed.*/
    vtp->dlist.next = NULL;
 800245c:	9b01      	ldr	r3, [sp, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 8002462:	9b05      	ldr	r3, [sp, #20]
 8002464:	f04f 32ff 	mov.w	r2, #4294967295
 8002468:	609a      	str	r2, [r3, #8]

    return;
 800246a:	e035      	b.n	80024d8 <chVTDoResetI+0xb8>
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
 800246c:	9b05      	ldr	r3, [sp, #20]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fe6e 	bl	8002150 <ch_dlist_remove_first>
  vtp->dlist.next = NULL;
 8002474:	9b01      	ldr	r3, [sp, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 800247a:	9b05      	ldr	r3, [sp, #20]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fdd7 	bl	8002030 <ch_dlist_isempty>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <chVTDoResetI+0x6e>

    port_timer_stop_alarm();
 8002488:	f7ff fe9a 	bl	80021c0 <port_timer_stop_alarm>

    return;
 800248c:	e024      	b.n	80024d8 <chVTDoResetI+0xb8>
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 800248e:	9b05      	ldr	r3, [sp, #20]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6899      	ldr	r1, [r3, #8]
 8002494:	9b01      	ldr	r3, [sp, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	9b05      	ldr	r3, [sp, #20]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	440a      	add	r2, r1
 800249e:	609a      	str	r2, [r3, #8]

  /* Distance in ticks between the last alarm event and current time.*/
  now = chVTGetSystemTimeX();
 80024a0:	f7ff fece 	bl	8002240 <chVTGetSystemTimeX.lto_priv.0>
 80024a4:	9004      	str	r0, [sp, #16]
  nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80024a6:	9b05      	ldr	r3, [sp, #20]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	9904      	ldr	r1, [sp, #16]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fdaf 	bl	8002010 <chTimeDiffX.lto_priv.0>
 80024b2:	9003      	str	r0, [sp, #12]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 80024b4:	9b05      	ldr	r3, [sp, #20]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	9a03      	ldr	r2, [sp, #12]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d20a      	bcs.n	80024d6 <chVTDoResetI+0xb6>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;
 80024c0:	9b05      	ldr	r3, [sp, #20]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	9b03      	ldr	r3, [sp, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	9302      	str	r3, [sp, #8]

  /* Setting up the alarm.*/
  vt_set_alarm(now, delta);
 80024cc:	9902      	ldr	r1, [sp, #8]
 80024ce:	9804      	ldr	r0, [sp, #16]
 80024d0:	f7ff febe 	bl	8002250 <vt_set_alarm>
 80024d4:	e000      	b.n	80024d8 <chVTDoResetI+0xb8>
    return;
 80024d6:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80024d8:	b007      	add	sp, #28
 80024da:	f85d fb04 	ldr.w	pc, [sp], #4
 80024de:	bf00      	nop
 80024e0:	20000a58 	.word	0x20000a58
	...

080024f0 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
 80024f0:	b500      	push	{lr}
 80024f2:	b089      	sub	sp, #36	; 0x24
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 80024f4:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <chVTDoTickI+0x138>)
 80024f6:	9305      	str	r3, [sp, #20]
     than the interval between "now" and "lasttime".*/
  while (true) {
    systime_t lasttime;

    /* First timer in the delta list.*/
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 80024f8:	9b05      	ldr	r3, [sp, #20]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	9304      	str	r3, [sp, #16]

    /* Delta between current time and last execution time.*/
    now = chVTGetSystemTimeX();
 80024fe:	f7ff fe9f 	bl	8002240 <chVTGetSystemTimeX.lto_priv.0>
 8002502:	9003      	str	r0, [sp, #12]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8002504:	9b05      	ldr	r3, [sp, #20]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	9903      	ldr	r1, [sp, #12]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fd80 	bl	8002010 <chTimeDiffX.lto_priv.0>
 8002510:	9002      	str	r0, [sp, #8]

    /* Loop break condition.
       Note that the list scan is limited by the delta list header having
       "vtlp->dlist.delta == (sysinterval_t)-1" which is greater than all
       deltas*/
    if (nowdelta < vtp->dlist.delta) {
 8002512:	9b04      	ldr	r3, [sp, #16]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	9a02      	ldr	r2, [sp, #8]
 8002518:	429a      	cmp	r2, r3
 800251a:	d366      	bcc.n	80025ea <chVTDoTickI+0xfa>
      break;
    }

    /* Last time deadline is updated to the next timer's time.*/
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
 800251c:	9b05      	ldr	r3, [sp, #20]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	9b04      	ldr	r3, [sp, #16]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4619      	mov	r1, r3
 8002526:	4610      	mov	r0, r2
 8002528:	f7ff fd62 	bl	8001ff0 <chTimeAddX.lto_priv.0>
 800252c:	9001      	str	r0, [sp, #4]
    vtlp->lasttime = lasttime;
 800252e:	9b05      	ldr	r3, [sp, #20]
 8002530:	9a01      	ldr	r2, [sp, #4]
 8002532:	60da      	str	r2, [r3, #12]

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
 8002534:	9b04      	ldr	r3, [sp, #16]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fe22 	bl	8002180 <ch_dlist_dequeue>
    vtp->dlist.next = NULL;
 800253c:	9b04      	ldr	r3, [sp, #16]
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8002542:	9b05      	ldr	r3, [sp, #20]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fd73 	bl	8002030 <ch_dlist_isempty>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <chVTDoTickI+0x64>
      port_timer_stop_alarm();
 8002550:	f7ff fe36 	bl	80021c0 <port_timer_stop_alarm>
    }

    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();
 8002554:	f7ff fe64 	bl	8002220 <chSysUnlockFromISR.lto_priv.3>

    vtp->func(vtp, vtp->par);
 8002558:	9b04      	ldr	r3, [sp, #16]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	9a04      	ldr	r2, [sp, #16]
 800255e:	6912      	ldr	r2, [r2, #16]
 8002560:	4611      	mov	r1, r2
 8002562:	9804      	ldr	r0, [sp, #16]
 8002564:	4798      	blx	r3

    chSysLockFromISR();
 8002566:	f7ff fe4b 	bl	8002200 <chSysLockFromISR.lto_priv.3>

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 800256a:	9b04      	ldr	r3, [sp, #16]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	bf14      	ite	ne
 8002572:	2301      	movne	r3, #1
 8002574:	2300      	moveq	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0bd      	beq.n	80024f8 <chVTDoTickI+0x8>
      sysinterval_t delta, delay;

      /* Refreshing the now delta after spending time in the callback for
         a more accurate detection of too fast reloads.*/
      now = chVTGetSystemTimeX();
 800257c:	f7ff fe60 	bl	8002240 <chVTGetSystemTimeX.lto_priv.0>
 8002580:	9003      	str	r0, [sp, #12]
      nowdelta = chTimeDiffX(lasttime, now);
 8002582:	9903      	ldr	r1, [sp, #12]
 8002584:	9801      	ldr	r0, [sp, #4]
 8002586:	f7ff fd43 	bl	8002010 <chTimeDiffX.lto_priv.0>
 800258a:	9002      	str	r0, [sp, #8]

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 800258c:	9b04      	ldr	r3, [sp, #16]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	9a02      	ldr	r2, [sp, #8]
 8002592:	429a      	cmp	r2, r3
 8002594:	d905      	bls.n	80025a2 <chVTDoTickI+0xb2>
        /* System time is already past the deadline, logging the fault and
           proceeding with a minimum delay.*/

        chDbgAssert(false, "skipped deadline");
        chRFCUCollectFaultsI(CH_RFCU_VT_SKIPPED_DEADLINE);
 8002596:	2002      	movs	r0, #2
 8002598:	f7ff fd1a 	bl	8001fd0 <chRFCUCollectFaultsI>

        delay = (sysinterval_t)0;
 800259c:	2300      	movs	r3, #0
 800259e:	9306      	str	r3, [sp, #24]
 80025a0:	e004      	b.n	80025ac <chVTDoTickI+0xbc>
      }
      else {
        /* Enqueuing the timer again using the calculated delta.*/
        delay = vtp->reload - nowdelta;
 80025a2:	9b04      	ldr	r3, [sp, #16]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	9b02      	ldr	r3, [sp, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	9306      	str	r3, [sp, #24]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 80025ac:	9b05      	ldr	r3, [sp, #20]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fd3e 	bl	8002030 <ch_dlist_isempty>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <chVTDoTickI+0xd8>

        vt_insert_first(vtlp, vtp, now, delay);
 80025ba:	9b06      	ldr	r3, [sp, #24]
 80025bc:	9a03      	ldr	r2, [sp, #12]
 80025be:	9904      	ldr	r1, [sp, #16]
 80025c0:	9805      	ldr	r0, [sp, #20]
 80025c2:	f7ff fe7d 	bl	80022c0 <vt_insert_first>

        return;
 80025c6:	e02c      	b.n	8002622 <chVTDoTickI+0x132>

      /* Delay as delta from 'lasttime'. Note, it can overflow and the value
         becomes lower than 'nowdelta'. In that case the delta is shortened
         to make it fit the numeric range and the timer will be triggered
         "nowdelta" cycles earlier.*/
      delta = nowdelta + delay;
 80025c8:	9a02      	ldr	r2, [sp, #8]
 80025ca:	9b06      	ldr	r3, [sp, #24]
 80025cc:	4413      	add	r3, r2
 80025ce:	9307      	str	r3, [sp, #28]
      if (delta < nowdelta) {
 80025d0:	9a07      	ldr	r2, [sp, #28]
 80025d2:	9b02      	ldr	r3, [sp, #8]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d201      	bcs.n	80025dc <chVTDoTickI+0xec>
        delta = delay;
 80025d8:	9b06      	ldr	r3, [sp, #24]
 80025da:	9307      	str	r3, [sp, #28]
      }

      /* Insert into delta list. */
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 80025dc:	9b05      	ldr	r3, [sp, #20]
 80025de:	9904      	ldr	r1, [sp, #16]
 80025e0:	9a07      	ldr	r2, [sp, #28]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fd84 	bl	80020f0 <ch_dlist_insert>
  while (true) {
 80025e8:	e786      	b.n	80024f8 <chVTDoTickI+0x8>
      break;
 80025ea:	bf00      	nop
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80025ec:	9b05      	ldr	r3, [sp, #20]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fd1e 	bl	8002030 <ch_dlist_isempty>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d112      	bne.n	8002620 <chVTDoTickI+0x130>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
 80025fa:	9b05      	ldr	r3, [sp, #20]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	9b02      	ldr	r3, [sp, #8]
 8002600:	441a      	add	r2, r3
 8002602:	9b05      	ldr	r3, [sp, #20]
 8002604:	60da      	str	r2, [r3, #12]
  vtp->dlist.delta -= nowdelta;
 8002606:	9b04      	ldr	r3, [sp, #16]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	9b02      	ldr	r3, [sp, #8]
 800260c:	1ad2      	subs	r2, r2, r3
 800260e:	9b04      	ldr	r3, [sp, #16]
 8002610:	609a      	str	r2, [r3, #8]

  /* Update alarm time to next timer.*/
  vt_set_alarm(now, vtp->dlist.delta);
 8002612:	9b04      	ldr	r3, [sp, #16]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	4619      	mov	r1, r3
 8002618:	9803      	ldr	r0, [sp, #12]
 800261a:	f7ff fe19 	bl	8002250 <vt_set_alarm>
 800261e:	e000      	b.n	8002622 <chVTDoTickI+0x132>
    return;
 8002620:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8002622:	b009      	add	sp, #36	; 0x24
 8002624:	f85d fb04 	ldr.w	pc, [sp], #4
 8002628:	20000a58 	.word	0x20000a58
 800262c:	00000000 	.word	0x00000000

08002630 <chVTGetTimeStampI>:
 *
 * @return              The time stamp.
 *
 * @iclass
 */
systimestamp_t chVTGetTimeStampI(void) {
 8002630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002632:	b087      	sub	sp, #28
  os_instance_t * oip = currcore;
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <chVTGetTimeStampI+0x50>)
 8002636:	9305      	str	r3, [sp, #20]
  systime_t now;

  chDbgCheckClassI();

  /* Current system time.*/
  now = chVTGetSystemTimeX();
 8002638:	f7ff fe02 	bl	8002240 <chVTGetSystemTimeX.lto_priv.0>
 800263c:	9004      	str	r0, [sp, #16]

  /* Last time stamp generated.*/
  last = oip->vtlist.laststamp;
 800263e:	9b05      	ldr	r3, [sp, #20]
 8002640:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002644:	e9cd 2302 	strd	r2, r3, [sp, #8]

  /* Interval between the last time stamp and current time used for a new
     time stamp. Note that this fails if the interval is larger than a
     systime_t type.*/
  stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 8002648:	9b02      	ldr	r3, [sp, #8]
 800264a:	9904      	ldr	r1, [sp, #16]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fcdf 	bl	8002010 <chTimeDiffX.lto_priv.0>
 8002652:	4603      	mov	r3, r0
 8002654:	2200      	movs	r2, #0
 8002656:	461c      	mov	r4, r3
 8002658:	4615      	mov	r5, r2
 800265a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800265e:	1916      	adds	r6, r2, r4
 8002660:	eb43 0705 	adc.w	r7, r3, r5
 8002664:	e9cd 6700 	strd	r6, r7, [sp]

  chDbgAssert(oip->vtlist.laststamp <= stamp, "wrapped");

  /* Storing the new stamp.*/
  oip->vtlist.laststamp = stamp;
 8002668:	9905      	ldr	r1, [sp, #20]
 800266a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800266e:	e9c1 2308 	strd	r2, r3, [r1, #32]

  return stamp;
 8002672:	e9dd 2300 	ldrd	r2, r3, [sp]
}
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	b007      	add	sp, #28
 800267c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800267e:	bf00      	nop
 8002680:	20000a48 	.word	0x20000a48
	...

08002690 <ch_queue_dequeue.lto_priv.0>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 8002690:	b082      	sub	sp, #8
 8002692:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 8002694:	9b01      	ldr	r3, [sp, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	9a01      	ldr	r2, [sp, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 800269e:	9b01      	ldr	r3, [sp, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	9a01      	ldr	r2, [sp, #4]
 80026a4:	6852      	ldr	r2, [r2, #4]
 80026a6:	605a      	str	r2, [r3, #4]
  return p;
 80026a8:	9b01      	ldr	r3, [sp, #4]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	b002      	add	sp, #8
 80026ae:	4770      	bx	lr

080026b0 <ch_pqueue_remove_highest>:
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
 80026b0:	b084      	sub	sp, #16
 80026b2:	9001      	str	r0, [sp, #4]
  ch_priority_queue_t *p = pqp->next;
 80026b4:	9b01      	ldr	r3, [sp, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	9303      	str	r3, [sp, #12]
  pqp->next       = p->next;
 80026ba:	9b03      	ldr	r3, [sp, #12]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	9b01      	ldr	r3, [sp, #4]
 80026c0:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 80026c2:	9b01      	ldr	r3, [sp, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	9a01      	ldr	r2, [sp, #4]
 80026c8:	605a      	str	r2, [r3, #4]
  return p;
 80026ca:	9b03      	ldr	r3, [sp, #12]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	b004      	add	sp, #16
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
	...

080026e0 <ch_pqueue_insert_behind>:
                                                           ch_priority_queue_t *p) {
 80026e0:	b082      	sub	sp, #8
 80026e2:	9001      	str	r0, [sp, #4]
 80026e4:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
 80026e6:	9b01      	ldr	r3, [sp, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio >= p->prio));
 80026ec:	9b01      	ldr	r3, [sp, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	9b00      	ldr	r3, [sp, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	bf2c      	ite	cs
 80026f8:	2301      	movcs	r3, #1
 80026fa:	2300      	movcc	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f1      	bne.n	80026e6 <ch_pqueue_insert_behind+0x6>
  p->next       = pqp;
 8002702:	9b00      	ldr	r3, [sp, #0]
 8002704:	9a01      	ldr	r2, [sp, #4]
 8002706:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8002708:	9b01      	ldr	r3, [sp, #4]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	9b00      	ldr	r3, [sp, #0]
 800270e:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8002710:	9b00      	ldr	r3, [sp, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	9a00      	ldr	r2, [sp, #0]
 8002716:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 8002718:	9b01      	ldr	r3, [sp, #4]
 800271a:	9a00      	ldr	r2, [sp, #0]
 800271c:	605a      	str	r2, [r3, #4]
  return p;
 800271e:	9b00      	ldr	r3, [sp, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	b002      	add	sp, #8
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
	...

08002730 <ch_pqueue_insert_ahead>:
                                                          ch_priority_queue_t *p) {
 8002730:	b082      	sub	sp, #8
 8002732:	9001      	str	r0, [sp, #4]
 8002734:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
 8002736:	9b01      	ldr	r3, [sp, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio > p->prio));
 800273c:	9b01      	ldr	r3, [sp, #4]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	9b00      	ldr	r3, [sp, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	429a      	cmp	r2, r3
 8002746:	bf8c      	ite	hi
 8002748:	2301      	movhi	r3, #1
 800274a:	2300      	movls	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f1      	bne.n	8002736 <ch_pqueue_insert_ahead+0x6>
  p->next       = pqp;
 8002752:	9b00      	ldr	r3, [sp, #0]
 8002754:	9a01      	ldr	r2, [sp, #4]
 8002756:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8002758:	9b01      	ldr	r3, [sp, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	9b00      	ldr	r3, [sp, #0]
 800275e:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8002760:	9b00      	ldr	r3, [sp, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	9a00      	ldr	r2, [sp, #0]
 8002766:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 8002768:	9b01      	ldr	r3, [sp, #4]
 800276a:	9a00      	ldr	r2, [sp, #0]
 800276c:	605a      	str	r2, [r3, #4]
  return p;
 800276e:	9b00      	ldr	r3, [sp, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	b002      	add	sp, #8
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
	...

08002780 <chSysLockFromISR.lto_priv.4>:
static inline void chSysLockFromISR(void) {
 8002780:	b082      	sub	sp, #8
 8002782:	2330      	movs	r3, #48	; 0x30
 8002784:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002786:	9b01      	ldr	r3, [sp, #4]
 8002788:	f383 8811 	msr	BASEPRI, r3
}
 800278c:	bf00      	nop
}
 800278e:	bf00      	nop
}
 8002790:	bf00      	nop
}
 8002792:	bf00      	nop
 8002794:	b002      	add	sp, #8
 8002796:	4770      	bx	lr
	...

080027a0 <chSysUnlockFromISR.lto_priv.4>:
static inline void chSysUnlockFromISR(void) {
 80027a0:	b082      	sub	sp, #8
 80027a2:	2300      	movs	r3, #0
 80027a4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80027a6:	9b01      	ldr	r3, [sp, #4]
 80027a8:	f383 8811 	msr	BASEPRI, r3
}
 80027ac:	bf00      	nop
}
 80027ae:	bf00      	nop
}
 80027b0:	bf00      	nop
}
 80027b2:	bf00      	nop
 80027b4:	b002      	add	sp, #8
 80027b6:	4770      	bx	lr
	...

080027c0 <chVTIsArmedI.lto_priv.0>:
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 * @return              true if the timer is armed.
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 80027c0:	b082      	sub	sp, #8
 80027c2:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bool)(vtp->dlist.next != NULL);
 80027c4:	9b01      	ldr	r3, [sp, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf14      	ite	ne
 80027cc:	2301      	movne	r3, #1
 80027ce:	2300      	moveq	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	b002      	add	sp, #8
 80027d6:	4770      	bx	lr
	...

080027e0 <chSemFastSignalI.lto_priv.0>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 80027e0:	b082      	sub	sp, #8
 80027e2:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  sp->cnt++;
 80027e4:	9b01      	ldr	r3, [sp, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	9b01      	ldr	r3, [sp, #4]
 80027ec:	609a      	str	r2, [r3, #8]
}
 80027ee:	bf00      	nop
 80027f0:	b002      	add	sp, #8
 80027f2:	4770      	bx	lr
	...

08002800 <__sch_ready_behind>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_behind(thread_t *tp) {
 8002800:	b500      	push	{lr}
 8002802:	b083      	sub	sp, #12
 8002804:	9001      	str	r0, [sp, #4]

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8002806:	9b01      	ldr	r3, [sp, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800280e:	9b01      	ldr	r3, [sp, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	461a      	mov	r2, r3
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f7ff ff61 	bl	80026e0 <ch_pqueue_insert_behind>
 800281e:	4603      	mov	r3, r0
                                           &tp->hdr.pqueue));
}
 8002820:	4618      	mov	r0, r3
 8002822:	b003      	add	sp, #12
 8002824:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002830 <__sch_ready_ahead>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_ahead(thread_t *tp) {
 8002830:	b500      	push	{lr}
 8002832:	b083      	sub	sp, #12
 8002834:	9001      	str	r0, [sp, #4]

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8002836:	9b01      	ldr	r3, [sp, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 800283e:	9b01      	ldr	r3, [sp, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	461a      	mov	r2, r3
 8002844:	9b01      	ldr	r3, [sp, #4]
 8002846:	4619      	mov	r1, r3
 8002848:	4610      	mov	r0, r2
 800284a:	f7ff ff71 	bl	8002730 <ch_pqueue_insert_ahead>
 800284e:	4603      	mov	r3, r0
                                          &tp->hdr.pqueue));
}
 8002850:	4618      	mov	r0, r3
 8002852:	b003      	add	sp, #12
 8002854:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002860 <__sch_reschedule_behind>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @notapi
 */
static void __sch_reschedule_behind(void) {
 8002860:	b500      	push	{lr}
 8002862:	b087      	sub	sp, #28
  os_instance_t *oip = currcore;
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <__sch_reschedule_behind+0x5c>)
 8002866:	9305      	str	r3, [sp, #20]
  thread_t *otp = __instance_get_currthread(oip);
 8002868:	9b05      	ldr	r3, [sp, #20]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	9304      	str	r3, [sp, #16]
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 800286e:	9b05      	ldr	r3, [sp, #20]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff1d 	bl	80026b0 <ch_pqueue_remove_highest>
 8002876:	9003      	str	r0, [sp, #12]
  ntp->state = CH_STATE_CURRENT;
 8002878:	9b03      	ldr	r3, [sp, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8002880:	9b05      	ldr	r3, [sp, #20]
 8002882:	9a03      	ldr	r2, [sp, #12]
 8002884:	60da      	str	r2, [r3, #12]
  /* It went behind peers so it gets a new time quantum.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Placing in ready list behind peers.*/
  otp = __sch_ready_behind(otp);
 8002886:	9804      	ldr	r0, [sp, #16]
 8002888:	f7ff ffba 	bl	8002800 <__sch_ready_behind>
 800288c:	9004      	str	r0, [sp, #16]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800288e:	f3ef 8309 	mrs	r3, PSP
 8002892:	9301      	str	r3, [sp, #4]
  return(result);
 8002894:	9b01      	ldr	r3, [sp, #4]

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8002896:	9302      	str	r3, [sp, #8]
 8002898:	9b02      	ldr	r3, [sp, #8]
 800289a:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800289e:	9b04      	ldr	r3, [sp, #16]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d202      	bcs.n	80028ac <__sch_reschedule_behind+0x4c>
 80028a6:	4806      	ldr	r0, [pc, #24]	; (80028c0 <__sch_reschedule_behind+0x60>)
 80028a8:	f7ff fa92 	bl	8001dd0 <chSysHalt>
 80028ac:	9904      	ldr	r1, [sp, #16]
 80028ae:	9803      	ldr	r0, [sp, #12]
 80028b0:	f7fd fd06 	bl	80002c0 <__port_switch>
}
 80028b4:	bf00      	nop
 80028b6:	b007      	add	sp, #28
 80028b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80028bc:	20000a48 	.word	0x20000a48
 80028c0:	0801d480 	.word	0x0801d480
	...

080028d0 <__sch_reschedule_ahead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @notapi
 */
static void __sch_reschedule_ahead(void) {
 80028d0:	b500      	push	{lr}
 80028d2:	b087      	sub	sp, #28
  os_instance_t *oip = currcore;
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <__sch_reschedule_ahead+0x5c>)
 80028d6:	9305      	str	r3, [sp, #20]
  thread_t *otp = __instance_get_currthread(oip);
 80028d8:	9b05      	ldr	r3, [sp, #20]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	9304      	str	r3, [sp, #16]
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 80028de:	9b05      	ldr	r3, [sp, #20]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fee5 	bl	80026b0 <ch_pqueue_remove_highest>
 80028e6:	9003      	str	r0, [sp, #12]
  ntp->state = CH_STATE_CURRENT;
 80028e8:	9b03      	ldr	r3, [sp, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 80028f0:	9b05      	ldr	r3, [sp, #20]
 80028f2:	9a03      	ldr	r2, [sp, #12]
 80028f4:	60da      	str	r2, [r3, #12]
  if (otp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = __sch_ready_ahead(otp);
 80028f6:	9804      	ldr	r0, [sp, #16]
 80028f8:	f7ff ff9a 	bl	8002830 <__sch_ready_ahead>
 80028fc:	9004      	str	r0, [sp, #16]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80028fe:	f3ef 8309 	mrs	r3, PSP
 8002902:	9301      	str	r3, [sp, #4]
  return(result);
 8002904:	9b01      	ldr	r3, [sp, #4]

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8002906:	9302      	str	r3, [sp, #8]
 8002908:	9b02      	ldr	r3, [sp, #8]
 800290a:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800290e:	9b04      	ldr	r3, [sp, #16]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	429a      	cmp	r2, r3
 8002914:	d202      	bcs.n	800291c <__sch_reschedule_ahead+0x4c>
 8002916:	4806      	ldr	r0, [pc, #24]	; (8002930 <__sch_reschedule_ahead+0x60>)
 8002918:	f7ff fa5a 	bl	8001dd0 <chSysHalt>
 800291c:	9904      	ldr	r1, [sp, #16]
 800291e:	9803      	ldr	r0, [sp, #12]
 8002920:	f7fd fcce 	bl	80002c0 <__port_switch>
}
 8002924:	bf00      	nop
 8002926:	b007      	add	sp, #28
 8002928:	f85d fb04 	ldr.w	pc, [sp], #4
 800292c:	20000a48 	.word	0x20000a48
 8002930:	0801d480 	.word	0x0801d480
	...

08002940 <__sch_wakeup>:

/*
 * Timeout wakeup callback.
 */
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8002940:	b500      	push	{lr}
 8002942:	b085      	sub	sp, #20
 8002944:	9001      	str	r0, [sp, #4]
 8002946:	9100      	str	r1, [sp, #0]
  thread_t *tp = threadref(p);
 8002948:	9b00      	ldr	r3, [sp, #0]
 800294a:	9303      	str	r3, [sp, #12]

  (void)vtp;

  chSysLockFromISR();
 800294c:	f7ff ff18 	bl	8002780 <chSysLockFromISR.lto_priv.4>
  switch (tp->state) {
 8002950:	9b03      	ldr	r3, [sp, #12]
 8002952:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d82e      	bhi.n	80029b8 <__sch_wakeup+0x78>
 800295a:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <__sch_wakeup+0x20>)
 800295c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002960:	08002995 	.word	0x08002995
 8002964:	080029b9 	.word	0x080029b9
 8002968:	080029b9 	.word	0x080029b9
 800296c:	0800299b 	.word	0x0800299b
 8002970:	080029af 	.word	0x080029af
 8002974:	080029a5 	.word	0x080029a5
 8002978:	080029b9 	.word	0x080029b9
 800297c:	080029af 	.word	0x080029af
 8002980:	080029b9 	.word	0x080029b9
 8002984:	080029b9 	.word	0x080029b9
 8002988:	080029b9 	.word	0x080029b9
 800298c:	080029b9 	.word	0x080029b9
 8002990:	080029af 	.word	0x080029af
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 8002994:	f7ff ff04 	bl	80027a0 <chSysUnlockFromISR.lto_priv.4>
    return;
 8002998:	e019      	b.n	80029ce <__sch_wakeup+0x8e>
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 800299a:	9b03      	ldr	r3, [sp, #12]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
    break;
 80029a2:	e00a      	b.n	80029ba <__sch_wakeup+0x7a>
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 80029a4:	9b03      	ldr	r3, [sp, #12]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff19 	bl	80027e0 <chSemFastSignalI.lto_priv.0>
#endif
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) ch_queue_dequeue(&tp->hdr.queue);
 80029ae:	9b03      	ldr	r3, [sp, #12]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fe6d 	bl	8002690 <ch_queue_dequeue.lto_priv.0>
    break;
 80029b6:	e000      	b.n	80029ba <__sch_wakeup+0x7a>
  default:
    /* Any other state, nothing to do.*/
    break;
 80029b8:	bf00      	nop
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 80029ba:	9b03      	ldr	r3, [sp, #12]
 80029bc:	f04f 32ff 	mov.w	r2, #4294967295
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
 80029c2:	9803      	ldr	r0, [sp, #12]
 80029c4:	f7ff ff1c 	bl	8002800 <__sch_ready_behind>
  chSysUnlockFromISR();
 80029c8:	f7ff feea 	bl	80027a0 <chSysUnlockFromISR.lto_priv.4>

  return;
 80029cc:	bf00      	nop
}
 80029ce:	b005      	add	sp, #20
 80029d0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080029e0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80029e0:	b500      	push	{lr}
 80029e2:	b083      	sub	sp, #12
 80029e4:	9001      	str	r0, [sp, #4]
       the other core.*/
    chSysNotifyInstance(tp->owner);
  }
#endif

  return __sch_ready_behind(tp);
 80029e6:	9801      	ldr	r0, [sp, #4]
 80029e8:	f7ff ff0a 	bl	8002800 <__sch_ready_behind>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	b003      	add	sp, #12
 80029f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80029f6:	bf00      	nop
	...

08002a00 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8002a00:	b500      	push	{lr}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	4603      	mov	r3, r0
 8002a06:	f88d 3007 	strb.w	r3, [sp, #7]
  os_instance_t *oip = currcore;
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <chSchGoSleepS+0x64>)
 8002a0c:	9306      	str	r3, [sp, #24]
  thread_t *otp = __instance_get_currthread(oip);
 8002a0e:	9b06      	ldr	r3, [sp, #24]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	9305      	str	r3, [sp, #20]

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  chDbgAssert(otp->owner == oip, "invalid core");

  /* New state.*/
  otp->state = newstate;
 8002a14:	9b05      	ldr	r3, [sp, #20]
 8002a16:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 8002a1e:	9b06      	ldr	r3, [sp, #24]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fe45 	bl	80026b0 <ch_pqueue_remove_highest>
 8002a26:	9007      	str	r0, [sp, #28]
  ntp->state = CH_STATE_CURRENT;
 8002a28:	9b07      	ldr	r3, [sp, #28]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8002a30:	9b06      	ldr	r3, [sp, #24]
 8002a32:	9a07      	ldr	r2, [sp, #28]
 8002a34:	60da      	str	r2, [r3, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002a36:	f3ef 8309 	mrs	r3, PSP
 8002a3a:	9303      	str	r3, [sp, #12]
  return(result);
 8002a3c:	9b03      	ldr	r3, [sp, #12]
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8002a3e:	9304      	str	r3, [sp, #16]
 8002a40:	9b04      	ldr	r3, [sp, #16]
 8002a42:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 8002a46:	9b05      	ldr	r3, [sp, #20]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d202      	bcs.n	8002a54 <chSchGoSleepS+0x54>
 8002a4e:	4806      	ldr	r0, [pc, #24]	; (8002a68 <chSchGoSleepS+0x68>)
 8002a50:	f7ff f9be 	bl	8001dd0 <chSysHalt>
 8002a54:	9905      	ldr	r1, [sp, #20]
 8002a56:	9807      	ldr	r0, [sp, #28]
 8002a58:	f7fd fc32 	bl	80002c0 <__port_switch>
}
 8002a5c:	bf00      	nop
 8002a5e:	b009      	add	sp, #36	; 0x24
 8002a60:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a64:	20000a48 	.word	0x20000a48
 8002a68:	0801d480 	.word	0x0801d480
 8002a6c:	00000000 	.word	0x00000000

08002a70 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002a70:	b500      	push	{lr}
 8002a72:	b08b      	sub	sp, #44	; 0x2c
 8002a74:	4603      	mov	r3, r0
 8002a76:	9100      	str	r1, [sp, #0]
 8002a78:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *tp = __instance_get_currthread(currcore);
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <chSchGoSleepTimeoutS+0x60>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	9309      	str	r3, [sp, #36]	; 0x24

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 8002a82:	9b00      	ldr	r3, [sp, #0]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d016      	beq.n	8002ab8 <chSchGoSleepTimeoutS+0x48>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 8002a8a:	a803      	add	r0, sp, #12
 8002a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a8e:	4a11      	ldr	r2, [pc, #68]	; (8002ad4 <chSchGoSleepTimeoutS+0x64>)
 8002a90:	9900      	ldr	r1, [sp, #0]
 8002a92:	f7ff fca5 	bl	80023e0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8002a96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ffb0 	bl	8002a00 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8002aa0:	ab03      	add	r3, sp, #12
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fe8c 	bl	80027c0 <chVTIsArmedI.lto_priv.0>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <chSchGoSleepTimeoutS+0x52>
      chVTDoResetI(&vt);
 8002aae:	ab03      	add	r3, sp, #12
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fcb5 	bl	8002420 <chVTDoResetI>
 8002ab6:	e004      	b.n	8002ac2 <chSchGoSleepTimeoutS+0x52>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8002ab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff9f 	bl	8002a00 <chSchGoSleepS>
  }

  return tp->u.rdymsg;
 8002ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	b00b      	add	sp, #44	; 0x2c
 8002aca:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ace:	bf00      	nop
 8002ad0:	20000a48 	.word	0x20000a48
 8002ad4:	08002941 	.word	0x08002941
	...

08002ae0 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002ae0:	b500      	push	{lr}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	9001      	str	r0, [sp, #4]
 8002ae6:	9100      	str	r1, [sp, #0]
  os_instance_t *oip = currcore;
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <chSchWakeupS+0x7c>)
 8002aea:	9304      	str	r3, [sp, #16]
  thread_t *otp = __instance_get_currthread(oip);
 8002aec:	9b04      	ldr	r3, [sp, #16]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	9305      	str	r3, [sp, #20]
              (oip->rlist.current->hdr.pqueue.prio >= oip->rlist.pqueue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8002af2:	9b01      	ldr	r3, [sp, #4]
 8002af4:	9a00      	ldr	r2, [sp, #0]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.
     Note, we are favoring the path where the woken thread has higher
     priority.*/
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8002af8:	9b01      	ldr	r3, [sp, #4]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	9b05      	ldr	r3, [sp, #20]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	bf94      	ite	ls
 8002b04:	2301      	movls	r3, #1
 8002b06:	2300      	movhi	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <chSchWakeupS+0x36>
    (void) __sch_ready_behind(ntp);
 8002b0e:	9801      	ldr	r0, [sp, #4]
 8002b10:	f7ff fe76 	bl	8002800 <__sch_ready_behind>
    __instance_set_currthread(oip, ntp);

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8002b14:	e01d      	b.n	8002b52 <chSchWakeupS+0x72>
    otp = __sch_ready_ahead(otp);
 8002b16:	9805      	ldr	r0, [sp, #20]
 8002b18:	f7ff fe8a 	bl	8002830 <__sch_ready_ahead>
 8002b1c:	9005      	str	r0, [sp, #20]
    ntp->state = CH_STATE_CURRENT;
 8002b1e:	9b01      	ldr	r3, [sp, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    __instance_set_currthread(oip, ntp);
 8002b26:	9b04      	ldr	r3, [sp, #16]
 8002b28:	9a01      	ldr	r2, [sp, #4]
 8002b2a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002b2c:	f3ef 8309 	mrs	r3, PSP
 8002b30:	9302      	str	r3, [sp, #8]
  return(result);
 8002b32:	9b02      	ldr	r3, [sp, #8]
    chSysSwitch(ntp, otp);
 8002b34:	9303      	str	r3, [sp, #12]
 8002b36:	9b03      	ldr	r3, [sp, #12]
 8002b38:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 8002b3c:	9b05      	ldr	r3, [sp, #20]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d202      	bcs.n	8002b4a <chSchWakeupS+0x6a>
 8002b44:	4806      	ldr	r0, [pc, #24]	; (8002b60 <chSchWakeupS+0x80>)
 8002b46:	f7ff f943 	bl	8001dd0 <chSysHalt>
 8002b4a:	9905      	ldr	r1, [sp, #20]
 8002b4c:	9801      	ldr	r0, [sp, #4]
 8002b4e:	f7fd fbb7 	bl	80002c0 <__port_switch>
}
 8002b52:	bf00      	nop
 8002b54:	b007      	add	sp, #28
 8002b56:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b5a:	bf00      	nop
 8002b5c:	20000a48 	.word	0x20000a48
 8002b60:	0801d480 	.word	0x0801d480
	...

08002b70 <chSchRescheduleS>:
 * @note    Only local threads are considered, other cores are signaled
 *          and perform a reschedule locally.
 *
 * @sclass
 */
void chSchRescheduleS(void) {
 8002b70:	b500      	push	{lr}
 8002b72:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <chSchRescheduleS+0x34>)
 8002b76:	9301      	str	r3, [sp, #4]
  thread_t *tp = __instance_get_currthread(oip);
 8002b78:	9b01      	ldr	r3, [sp, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	9300      	str	r3, [sp, #0]

  chDbgCheckClassS();

  /* Note, we are favoring the path where the reschedule is necessary
     because higher priority threads are ready.*/
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002b7e:	9b01      	ldr	r3, [sp, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	9b00      	ldr	r3, [sp, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	bf8c      	ite	hi
 8002b8c:	2301      	movhi	r3, #1
 8002b8e:	2300      	movls	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <chSchRescheduleS+0x2a>
    __sch_reschedule_ahead();
 8002b96:	f7ff fe9b 	bl	80028d0 <__sch_reschedule_ahead>
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	b003      	add	sp, #12
 8002b9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ba2:	bf00      	nop
 8002ba4:	20000a48 	.word	0x20000a48
	...

08002bb0 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 8002bb0:	b084      	sub	sp, #16
  os_instance_t *oip = currcore;
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <chSchIsPreemptionRequired+0x30>)
 8002bb4:	9303      	str	r3, [sp, #12]
  thread_t *tp = __instance_get_currthread(oip);
 8002bb6:	9b03      	ldr	r3, [sp, #12]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	9302      	str	r3, [sp, #8]

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002bbc:	9b03      	ldr	r3, [sp, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	9301      	str	r3, [sp, #4]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8002bc4:	9b02      	ldr	r3, [sp, #8]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8002bca:	9a01      	ldr	r2, [sp, #4]
 8002bcc:	9b00      	ldr	r3, [sp, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	bf8c      	ite	hi
 8002bd2:	2301      	movhi	r3, #1
 8002bd4:	2300      	movls	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
#endif
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	b004      	add	sp, #16
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20000a48 	.word	0x20000a48
	...

08002bf0 <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
 8002bf0:	b500      	push	{lr}
 8002bf2:	b087      	sub	sp, #28
  os_instance_t *oip = currcore;
 8002bf4:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <chSchDoPreemption+0x5c>)
 8002bf6:	9305      	str	r3, [sp, #20]
  thread_t *otp = __instance_get_currthread(oip);
 8002bf8:	9b05      	ldr	r3, [sp, #20]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	9304      	str	r3, [sp, #16]
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 8002bfe:	9b05      	ldr	r3, [sp, #20]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fd55 	bl	80026b0 <ch_pqueue_remove_highest>
 8002c06:	9003      	str	r0, [sp, #12]
  ntp->state = CH_STATE_CURRENT;
 8002c08:	9b03      	ldr	r3, [sp, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8002c10:	9b05      	ldr	r3, [sp, #20]
 8002c12:	9a03      	ldr	r2, [sp, #12]
 8002c14:	60da      	str	r2, [r3, #12]
    otp = __sch_ready_ahead(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
 8002c16:	9804      	ldr	r0, [sp, #16]
 8002c18:	f7ff fe0a 	bl	8002830 <__sch_ready_ahead>
 8002c1c:	9004      	str	r0, [sp, #16]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002c1e:	f3ef 8309 	mrs	r3, PSP
 8002c22:	9301      	str	r3, [sp, #4]
  return(result);
 8002c24:	9b01      	ldr	r3, [sp, #4]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8002c26:	9302      	str	r3, [sp, #8]
 8002c28:	9b02      	ldr	r3, [sp, #8]
 8002c2a:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 8002c2e:	9b04      	ldr	r3, [sp, #16]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d202      	bcs.n	8002c3c <chSchDoPreemption+0x4c>
 8002c36:	4806      	ldr	r0, [pc, #24]	; (8002c50 <chSchDoPreemption+0x60>)
 8002c38:	f7ff f8ca 	bl	8001dd0 <chSysHalt>
 8002c3c:	9904      	ldr	r1, [sp, #16]
 8002c3e:	9803      	ldr	r0, [sp, #12]
 8002c40:	f7fd fb3e 	bl	80002c0 <__port_switch>
}
 8002c44:	bf00      	nop
 8002c46:	b007      	add	sp, #28
 8002c48:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c4c:	20000a48 	.word	0x20000a48
 8002c50:	0801d480 	.word	0x0801d480
	...

08002c60 <chSchDoYieldS>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal or higher priority, if any.
 *
 * @sclass
 */
void chSchDoYieldS(void) {
 8002c60:	b500      	push	{lr}
 8002c62:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <chSchDoYieldS+0x34>)
 8002c66:	9301      	str	r3, [sp, #4]
  thread_t *tp = __instance_get_currthread(oip);
 8002c68:	9b01      	ldr	r3, [sp, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	9300      	str	r3, [sp, #0]

  chDbgCheckClassS();

  /* If this function has been called then it is likely there are threads
     at same priority level.*/
  if (likely(firstprio(&oip->rlist.pqueue) >= tp->hdr.pqueue.prio)) {
 8002c6e:	9b01      	ldr	r3, [sp, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	9b00      	ldr	r3, [sp, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	bf2c      	ite	cs
 8002c7c:	2301      	movcs	r3, #1
 8002c7e:	2300      	movcc	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <chSchDoYieldS+0x2a>
    __sch_reschedule_behind();
 8002c86:	f7ff fdeb 	bl	8002860 <__sch_reschedule_behind>
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	b003      	add	sp, #12
 8002c8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c92:	bf00      	nop
 8002c94:	20000a48 	.word	0x20000a48
	...

08002ca0 <__rfcu_object_init>:
 *
 * @param[out] rfcup    pointer to the @p rfcu_t structure
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	9001      	str	r0, [sp, #4]

  rfcup->mask = (rfcu_mask_t)0;
 8002ca4:	9b01      	ldr	r3, [sp, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
}
 8002caa:	bf00      	nop
 8002cac:	b002      	add	sp, #8
 8002cae:	4770      	bx	lr

08002cb0 <__dbg_object_init>:
 *
 * @param[out] sdp      pointer to the @p system_debug_t structure
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	9001      	str	r0, [sp, #4]

  sdp->panic_msg = NULL;
 8002cb4:	9b01      	ldr	r3, [sp, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  /* The initial state is assumed to be within a critical zone.*/
  sdp->isr_cnt  = (cnt_t)0;
  sdp->lock_cnt = (cnt_t)1;
#endif
}
 8002cba:	bf00      	nop
 8002cbc:	b002      	add	sp, #8
 8002cbe:	4770      	bx	lr

08002cc0 <ch_queue_init.lto_priv.2>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8002cc4:	9b01      	ldr	r3, [sp, #4]
 8002cc6:	9a01      	ldr	r2, [sp, #4]
 8002cc8:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 8002cca:	9b01      	ldr	r3, [sp, #4]
 8002ccc:	9a01      	ldr	r2, [sp, #4]
 8002cce:	605a      	str	r2, [r3, #4]
}
 8002cd0:	bf00      	nop
 8002cd2:	b002      	add	sp, #8
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
	...

08002ce0 <ch_pqueue_init>:
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	9001      	str	r0, [sp, #4]
  pqp->next = pqp;
 8002ce4:	9b01      	ldr	r3, [sp, #4]
 8002ce6:	9a01      	ldr	r2, [sp, #4]
 8002ce8:	601a      	str	r2, [r3, #0]
  pqp->prev = pqp;
 8002cea:	9b01      	ldr	r3, [sp, #4]
 8002cec:	9a01      	ldr	r2, [sp, #4]
 8002cee:	605a      	str	r2, [r3, #4]
  pqp->prio = (tprio_t)0;
 8002cf0:	9b01      	ldr	r3, [sp, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
}
 8002cf6:	bf00      	nop
 8002cf8:	b002      	add	sp, #8
 8002cfa:	4770      	bx	lr
 8002cfc:	0000      	movs	r0, r0
	...

08002d00 <ch_dlist_init>:
static inline void ch_dlist_init(ch_delta_list_t *dlhp) {
 8002d00:	b082      	sub	sp, #8
 8002d02:	9001      	str	r0, [sp, #4]
  dlhp->next  = dlhp;
 8002d04:	9b01      	ldr	r3, [sp, #4]
 8002d06:	9a01      	ldr	r2, [sp, #4]
 8002d08:	601a      	str	r2, [r3, #0]
  dlhp->prev  = dlhp;
 8002d0a:	9b01      	ldr	r3, [sp, #4]
 8002d0c:	9a01      	ldr	r2, [sp, #4]
 8002d0e:	605a      	str	r2, [r3, #4]
  dlhp->delta = (sysinterval_t)-1;
 8002d10:	9b01      	ldr	r3, [sp, #4]
 8002d12:	f04f 32ff 	mov.w	r2, #4294967295
 8002d16:	609a      	str	r2, [r3, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	b002      	add	sp, #8
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop

08002d20 <port_timer_get_time.lto_priv.1>:
static inline systime_t port_timer_get_time(void) {
 8002d20:	b508      	push	{r3, lr}
  return stGetCounter();
 8002d22:	f7fd fbdd 	bl	80004e0 <stGetCounter>
 8002d26:	4603      	mov	r3, r0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	bd08      	pop	{r3, pc}
 8002d2c:	0000      	movs	r0, r0
	...

08002d30 <chVTGetSystemTimeX.lto_priv.1>:
static inline systime_t chVTGetSystemTimeX(void) {
 8002d30:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8002d32:	f7ff fff5 	bl	8002d20 <port_timer_get_time.lto_priv.1>
 8002d36:	4603      	mov	r3, r0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd08      	pop	{r3, pc}
 8002d3c:	0000      	movs	r0, r0
	...

08002d40 <__vt_object_init>:
 *
 * @param[out] vtlp     pointer to the @p virtual_timers_list_t structure
 *
 * @notapi
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {
 8002d40:	b530      	push	{r4, r5, lr}
 8002d42:	b083      	sub	sp, #12
 8002d44:	9001      	str	r0, [sp, #4]

  ch_dlist_init(&vtlp->dlist);
 8002d46:	9b01      	ldr	r3, [sp, #4]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ffd9 	bl	8002d00 <ch_dlist_init>
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 8002d4e:	9b01      	ldr	r3, [sp, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	60da      	str	r2, [r3, #12]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8002d54:	f7ff ffec 	bl	8002d30 <chVTGetSystemTimeX.lto_priv.1>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	461c      	mov	r4, r3
 8002d5e:	4615      	mov	r5, r2
 8002d60:	9b01      	ldr	r3, [sp, #4]
 8002d62:	e9c3 4504 	strd	r4, r5, [r3, #16]
#endif
}
 8002d66:	bf00      	nop
 8002d68:	b003      	add	sp, #12
 8002d6a:	bd30      	pop	{r4, r5, pc}
 8002d6c:	0000      	movs	r0, r0
	...

08002d70 <__reg_object_init>:
 *
 * @param[out] rp       pointer to a @p registry_t structure
 *
 * @init
 */
static inline void __reg_object_init(registry_t *rp) {
 8002d70:	b500      	push	{lr}
 8002d72:	b083      	sub	sp, #12
 8002d74:	9001      	str	r0, [sp, #4]

  ch_queue_init(&rp->queue);
 8002d76:	9b01      	ldr	r3, [sp, #4]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ffa1 	bl	8002cc0 <ch_queue_init.lto_priv.2>
}
 8002d7e:	bf00      	nop
 8002d80:	b003      	add	sp, #12
 8002d82:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d86:	bf00      	nop
	...

08002d90 <__idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void __idle_thread(void *p) {
 8002d90:	b082      	sub	sp, #8
 8002d92:	9001      	str	r0, [sp, #4]
__STATIC_FORCEINLINE void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 8002d94:	bf00      	nop
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8002d96:	e7fd      	b.n	8002d94 <__idle_thread+0x4>
	...

08002da0 <chInstanceObjectInit>:
 * @param[in] oicp      pointer to the @p os_instance_config_t structure
 *
 * @special
 */
void chInstanceObjectInit(os_instance_t *oip,
                          const os_instance_config_t *oicp) {
 8002da0:	b500      	push	{lr}
 8002da2:	b08b      	sub	sp, #44	; 0x2c
 8002da4:	9001      	str	r0, [sp, #4]
 8002da6:	9100      	str	r1, [sp, #0]

  /* Registering into the global system structure.*/
#if CH_CFG_SMP_MODE == TRUE
  core_id = port_get_core_id();
#else
  core_id = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	9309      	str	r3, [sp, #36]	; 0x24
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 8002dac:	4a28      	ldr	r2, [pc, #160]	; (8002e50 <chInstanceObjectInit+0xb0>)
 8002dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	9a01      	ldr	r2, [sp, #4]
 8002db6:	605a      	str	r2, [r3, #4]

  /* Core associated to this instance.*/
  oip->core_id = core_id;
 8002db8:	9b01      	ldr	r3, [sp, #4]
 8002dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 8002dbe:	9b01      	ldr	r3, [sp, #4]
 8002dc0:	9a00      	ldr	r2, [sp, #0]
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Port initialization for the current instance.*/
  port_init(oip);
 8002dc4:	9801      	ldr	r0, [sp, #4]
 8002dc6:	f003 ff6b 	bl	8006ca0 <port_init>

  /* Ready list initialization.*/
  ch_pqueue_init(&oip->rlist.pqueue);
 8002dca:	9b01      	ldr	r3, [sp, #4]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff87 	bl	8002ce0 <ch_pqueue_init>

#if (CH_CFG_USE_REGISTRY == TRUE) && (CH_CFG_SMP_MODE == FALSE)
  /* Registry initialization when SMP mode is disabled.*/
  __reg_object_init(&oip->reglist);
 8002dd2:	9b01      	ldr	r3, [sp, #4]
 8002dd4:	3328      	adds	r3, #40	; 0x28
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff ffca 	bl	8002d70 <__reg_object_init>
#endif

#if CH_CFG_SMP_MODE == FALSE
  /* RFCU initialization when SMP mode is disabled.*/
  __rfcu_object_init(&oip->rfcu);
 8002ddc:	9b01      	ldr	r3, [sp, #4]
 8002dde:	3334      	adds	r3, #52	; 0x34
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff5d 	bl	8002ca0 <__rfcu_object_init>
#endif

  /* Virtual timers list initialization.*/
  __vt_object_init(&oip->vtlist);
 8002de6:	9b01      	ldr	r3, [sp, #4]
 8002de8:	3310      	adds	r3, #16
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff ffa8 	bl	8002d40 <__vt_object_init>

  /* Debug support initialization.*/
  __dbg_object_init(&oip->dbg);
 8002df0:	9b01      	ldr	r3, [sp, #4]
 8002df2:	3384      	adds	r3, #132	; 0x84
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff5b 	bl	8002cb0 <__dbg_object_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 8002dfa:	9b01      	ldr	r3, [sp, #4]
 8002dfc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <chInstanceObjectInit+0xb4>)
 8002e04:	9801      	ldr	r0, [sp, #4]
 8002e06:	f000 f93b 	bl	8003080 <__thd_object_init>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	9b01      	ldr	r3, [sp, #4]
 8002e0e:	60da      	str	r2, [r3, #12]
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
                                         "idle", IDLEPRIO);
#endif

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
 8002e10:	9b01      	ldr	r3, [sp, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	9a00      	ldr	r2, [sp, #0]
 8002e16:	6852      	ldr	r2, [r2, #4]
 8002e18:	621a      	str	r2, [r3, #32]
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 8002e1a:	9b01      	ldr	r3, [sp, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    thread_descriptor_t idle_descriptor = {
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <chInstanceObjectInit+0xb8>)
 8002e26:	9303      	str	r3, [sp, #12]
      .name     = "idle",
      .wbase    = oicp->idlethread_base,
 8002e28:	9b00      	ldr	r3, [sp, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
    thread_descriptor_t idle_descriptor = {
 8002e2c:	9304      	str	r3, [sp, #16]
      .wend     = oicp->idlethread_end,
 8002e2e:	9b00      	ldr	r3, [sp, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
    thread_descriptor_t idle_descriptor = {
 8002e32:	9305      	str	r3, [sp, #20]
 8002e34:	2301      	movs	r3, #1
 8002e36:	9306      	str	r3, [sp, #24]
 8002e38:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <chInstanceObjectInit+0xbc>)
 8002e3a:	9307      	str	r3, [sp, #28]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9308      	str	r3, [sp, #32]
#endif

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreateI(&idle_descriptor);
 8002e40:	ab03      	add	r3, sp, #12
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f98c 	bl	8003160 <chThdCreateI>
  }
#endif
}
 8002e48:	bf00      	nop
 8002e4a:	b00b      	add	sp, #44	; 0x2c
 8002e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e50:	20000a38 	.word	0x20000a38
 8002e54:	0801d4a0 	.word	0x0801d4a0
 8002e58:	0801d490 	.word	0x0801d490
 8002e5c:	08002d91 	.word	0x08002d91

08002e60 <chTimeDiffX.lto_priv.1>:
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 8002e60:	b082      	sub	sp, #8
 8002e62:	9001      	str	r0, [sp, #4]
 8002e64:	9100      	str	r1, [sp, #0]
  return (sysinterval_t)((systime_t)(end - start));
 8002e66:	9a00      	ldr	r2, [sp, #0]
 8002e68:	9b01      	ldr	r3, [sp, #4]
 8002e6a:	1ad3      	subs	r3, r2, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	b002      	add	sp, #8
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
	...

08002e80 <ch_list_init>:
static inline void ch_list_init(ch_list_t *lp) {
 8002e80:	b082      	sub	sp, #8
 8002e82:	9001      	str	r0, [sp, #4]
  lp->next = lp;
 8002e84:	9b01      	ldr	r3, [sp, #4]
 8002e86:	9a01      	ldr	r2, [sp, #4]
 8002e88:	601a      	str	r2, [r3, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	b002      	add	sp, #8
 8002e8e:	4770      	bx	lr

08002e90 <ch_list_notempty>:
static inline bool ch_list_notempty(ch_list_t *lp) {
 8002e90:	b082      	sub	sp, #8
 8002e92:	9001      	str	r0, [sp, #4]
  return (bool)(lp->next != lp);
 8002e94:	9b01      	ldr	r3, [sp, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	9a01      	ldr	r2, [sp, #4]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	bf14      	ite	ne
 8002e9e:	2301      	movne	r3, #1
 8002ea0:	2300      	moveq	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	b002      	add	sp, #8
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	0000      	movs	r0, r0
	...

08002eb0 <ch_list_link>:
static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	9001      	str	r0, [sp, #4]
 8002eb4:	9100      	str	r1, [sp, #0]
  p->next = lp->next;
 8002eb6:	9b01      	ldr	r3, [sp, #4]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	9b00      	ldr	r3, [sp, #0]
 8002ebc:	601a      	str	r2, [r3, #0]
  lp->next = p;
 8002ebe:	9b01      	ldr	r3, [sp, #4]
 8002ec0:	9a00      	ldr	r2, [sp, #0]
 8002ec2:	601a      	str	r2, [r3, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	b002      	add	sp, #8
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	0000      	movs	r0, r0
	...

08002ed0 <ch_list_unlink>:
static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	9001      	str	r0, [sp, #4]
  ch_list_t *p = lp->next;
 8002ed4:	9b01      	ldr	r3, [sp, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	9303      	str	r3, [sp, #12]
  lp->next = p->next;
 8002eda:	9b03      	ldr	r3, [sp, #12]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	9b01      	ldr	r3, [sp, #4]
 8002ee0:	601a      	str	r2, [r3, #0]
  return p;
 8002ee2:	9b03      	ldr	r3, [sp, #12]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	b004      	add	sp, #16
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	0000      	movs	r0, r0
	...

08002ef0 <ch_queue_init.lto_priv.3>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8002ef4:	9b01      	ldr	r3, [sp, #4]
 8002ef6:	9a01      	ldr	r2, [sp, #4]
 8002ef8:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 8002efa:	9b01      	ldr	r3, [sp, #4]
 8002efc:	9a01      	ldr	r2, [sp, #4]
 8002efe:	605a      	str	r2, [r3, #4]
}
 8002f00:	bf00      	nop
 8002f02:	b002      	add	sp, #8
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
	...

08002f10 <ch_queue_notempty.lto_priv.0>:
static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 8002f10:	b082      	sub	sp, #8
 8002f12:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next != qp);
 8002f14:	9b01      	ldr	r3, [sp, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	9a01      	ldr	r2, [sp, #4]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	bf14      	ite	ne
 8002f1e:	2301      	movne	r3, #1
 8002f20:	2300      	moveq	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	b002      	add	sp, #8
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	0000      	movs	r0, r0
	...

08002f30 <ch_queue_insert.lto_priv.0>:
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 8002f30:	b082      	sub	sp, #8
 8002f32:	9001      	str	r0, [sp, #4]
 8002f34:	9100      	str	r1, [sp, #0]
  p->next       = qp;
 8002f36:	9b00      	ldr	r3, [sp, #0]
 8002f38:	9a01      	ldr	r2, [sp, #4]
 8002f3a:	601a      	str	r2, [r3, #0]
  p->prev       = qp->prev;
 8002f3c:	9b01      	ldr	r3, [sp, #4]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	9b00      	ldr	r3, [sp, #0]
 8002f42:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8002f44:	9b00      	ldr	r3, [sp, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	9a00      	ldr	r2, [sp, #0]
 8002f4a:	601a      	str	r2, [r3, #0]
  qp->prev      = p;
 8002f4c:	9b01      	ldr	r3, [sp, #4]
 8002f4e:	9a00      	ldr	r2, [sp, #0]
 8002f50:	605a      	str	r2, [r3, #4]
}
 8002f52:	bf00      	nop
 8002f54:	b002      	add	sp, #8
 8002f56:	4770      	bx	lr
	...

08002f60 <ch_queue_fifo_remove.lto_priv.0>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 8002f60:	b084      	sub	sp, #16
 8002f62:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
 8002f64:	9b01      	ldr	r3, [sp, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
 8002f6a:	9b03      	ldr	r3, [sp, #12]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	9b01      	ldr	r3, [sp, #4]
 8002f70:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 8002f72:	9b01      	ldr	r3, [sp, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	9a01      	ldr	r2, [sp, #4]
 8002f78:	605a      	str	r2, [r3, #4]
  return p;
 8002f7a:	9b03      	ldr	r3, [sp, #12]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	b004      	add	sp, #16
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
	...

08002f90 <ch_queue_dequeue.lto_priv.1>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 8002f90:	b082      	sub	sp, #8
 8002f92:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 8002f94:	9b01      	ldr	r3, [sp, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	9a01      	ldr	r2, [sp, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 8002f9e:	9b01      	ldr	r3, [sp, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	9a01      	ldr	r2, [sp, #4]
 8002fa4:	6852      	ldr	r2, [r2, #4]
 8002fa6:	605a      	str	r2, [r3, #4]
  return p;
 8002fa8:	9b01      	ldr	r3, [sp, #4]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	b002      	add	sp, #8
 8002fae:	4770      	bx	lr

08002fb0 <port_timer_get_time.lto_priv.2>:
static inline systime_t port_timer_get_time(void) {
 8002fb0:	b508      	push	{r3, lr}
  return stGetCounter();
 8002fb2:	f7fd fa95 	bl	80004e0 <stGetCounter>
 8002fb6:	4603      	mov	r3, r0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd08      	pop	{r3, pc}
 8002fbc:	0000      	movs	r0, r0
	...

08002fc0 <chSysLock.lto_priv.4>:
static inline void chSysLock(void) {
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	2330      	movs	r3, #48	; 0x30
 8002fc4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002fc6:	9b01      	ldr	r3, [sp, #4]
 8002fc8:	f383 8811 	msr	BASEPRI, r3
}
 8002fcc:	bf00      	nop
}
 8002fce:	bf00      	nop
}
 8002fd0:	bf00      	nop
 8002fd2:	b002      	add	sp, #8
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
	...

08002fe0 <chSysUnlock.lto_priv.4>:
static inline void chSysUnlock(void) {
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002fe6:	9b01      	ldr	r3, [sp, #4]
 8002fe8:	f383 8811 	msr	BASEPRI, r3
}
 8002fec:	bf00      	nop
}
 8002fee:	bf00      	nop
}
 8002ff0:	bf00      	nop
 8002ff2:	b002      	add	sp, #8
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
	...

08003000 <chVTGetSystemTimeX.lto_priv.2>:
static inline systime_t chVTGetSystemTimeX(void) {
 8003000:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8003002:	f7ff ffd5 	bl	8002fb0 <port_timer_get_time.lto_priv.2>
 8003006:	4603      	mov	r3, r0
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd08      	pop	{r3, pc}
 800300c:	0000      	movs	r0, r0
	...

08003010 <chThdGetSelfX.lto_priv.0>:
  return __sch_get_currthread();
 8003010:	4b01      	ldr	r3, [pc, #4]	; (8003018 <chThdGetSelfX.lto_priv.0+0x8>)
 8003012:	68db      	ldr	r3, [r3, #12]
}
 8003014:	4618      	mov	r0, r3
 8003016:	4770      	bx	lr
 8003018:	20000a48 	.word	0x20000a48
 800301c:	00000000 	.word	0x00000000

08003020 <chThdGetWorkingAreaX.lto_priv.0>:
static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {
 8003020:	b082      	sub	sp, #8
 8003022:	9001      	str	r0, [sp, #4]
  return tp->wabase;
 8003024:	9b01      	ldr	r3, [sp, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
}
 8003028:	4618      	mov	r0, r3
 800302a:	b002      	add	sp, #8
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop

08003030 <chThdSleepS>:
static inline void chThdSleepS(sysinterval_t ticks) {
 8003030:	b500      	push	{lr}
 8003032:	b083      	sub	sp, #12
 8003034:	9001      	str	r0, [sp, #4]
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003036:	9901      	ldr	r1, [sp, #4]
 8003038:	2008      	movs	r0, #8
 800303a:	f7ff fd19 	bl	8002a70 <chSchGoSleepTimeoutS>
}
 800303e:	bf00      	nop
 8003040:	b003      	add	sp, #12
 8003042:	f85d fb04 	ldr.w	pc, [sp], #4
 8003046:	bf00      	nop
	...

08003050 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8003050:	b500      	push	{lr}
 8003052:	b085      	sub	sp, #20
 8003054:	9001      	str	r0, [sp, #4]
 8003056:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(ch_queue_notempty(&tqp->queue), "empty queue");

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));
 8003058:	9b01      	ldr	r3, [sp, #4]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff ff80 	bl	8002f60 <ch_queue_fifo_remove.lto_priv.0>
 8003060:	9003      	str	r0, [sp, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8003062:	9b03      	ldr	r3, [sp, #12]
 8003064:	9a00      	ldr	r2, [sp, #0]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28
  (void) chSchReadyI(tp);
 8003068:	9803      	ldr	r0, [sp, #12]
 800306a:	f7ff fcb9 	bl	80029e0 <chSchReadyI>
}
 800306e:	bf00      	nop
 8003070:	b005      	add	sp, #20
 8003072:	f85d fb04 	ldr.w	pc, [sp], #4
 8003076:	bf00      	nop
	...

08003080 <__thd_object_init>:
 * @notapi
 */
thread_t *__thd_object_init(os_instance_t *oip,
                            thread_t *tp,
                            const char *name,
                            tprio_t prio) {
 8003080:	b500      	push	{lr}
 8003082:	b085      	sub	sp, #20
 8003084:	9003      	str	r0, [sp, #12]
 8003086:	9102      	str	r1, [sp, #8]
 8003088:	9201      	str	r2, [sp, #4]
 800308a:	9300      	str	r3, [sp, #0]

  tp->hdr.pqueue.prio   = prio;
 800308c:	9b02      	ldr	r3, [sp, #8]
 800308e:	9a00      	ldr	r2, [sp, #0]
 8003090:	609a      	str	r2, [r3, #8]
  tp->state             = CH_STATE_WTSTART;
 8003092:	9b02      	ldr	r3, [sp, #8]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  tp->flags             = CH_FLAG_MODE_STATIC;
 800309a:	9b02      	ldr	r3, [sp, #8]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  tp->owner             = oip;
 80030a2:	9b02      	ldr	r3, [sp, #8]
 80030a4:	9a03      	ldr	r2, [sp, #12]
 80030a6:	619a      	str	r2, [r3, #24]
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks             = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio          = prio;
 80030a8:	9b02      	ldr	r3, [sp, #8]
 80030aa:	9a00      	ldr	r2, [sp, #0]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40
  tp->mtxlist           = NULL;
 80030ae:	9b02      	ldr	r3, [sp, #8]
 80030b0:	2200      	movs	r2, #0
 80030b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending          = (eventmask_t)0;
 80030b4:	9b02      	ldr	r3, [sp, #8]
 80030b6:	2200      	movs	r2, #0
 80030b8:	639a      	str	r2, [r3, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time              = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs              = (trefs_t)1;
 80030ba:	9b02      	ldr	r3, [sp, #8]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  tp->name              = name;
 80030c2:	9b02      	ldr	r3, [sp, #8]
 80030c4:	9a01      	ldr	r2, [sp, #4]
 80030c6:	61da      	str	r2, [r3, #28]
  REG_INSERT(oip, tp);
 80030c8:	9b03      	ldr	r3, [sp, #12]
 80030ca:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80030ce:	9b02      	ldr	r3, [sp, #8]
 80030d0:	3310      	adds	r3, #16
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f7ff ff2b 	bl	8002f30 <ch_queue_insert.lto_priv.0>
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  ch_list_init(&tp->waiting);
 80030da:	9b02      	ldr	r3, [sp, #8]
 80030dc:	332c      	adds	r3, #44	; 0x2c
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fece 	bl	8002e80 <ch_list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  ch_queue_init(&tp->msgqueue);
 80030e4:	9b02      	ldr	r3, [sp, #8]
 80030e6:	3330      	adds	r3, #48	; 0x30
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ff01 	bl	8002ef0 <ch_queue_init.lto_priv.3>
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
 80030ee:	9b02      	ldr	r3, [sp, #8]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	b005      	add	sp, #20
 80030f4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003100 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8003100:	b500      	push	{lr}
 8003102:	b085      	sub	sp, #20
 8003104:	9001      	str	r0, [sp, #4]
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = threadref(((uint8_t *)tdp->wend -
 8003106:	9b01      	ldr	r3, [sp, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	3b48      	subs	r3, #72	; 0x48
 800310c:	9303      	str	r3, [sp, #12]
                 MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN)));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 800310e:	9b01      	ldr	r3, [sp, #4]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	9b03      	ldr	r3, [sp, #12]
 8003114:	621a      	str	r2, [r3, #32]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003116:	9b03      	ldr	r3, [sp, #12]
 8003118:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800311c:	9b03      	ldr	r3, [sp, #12]
 800311e:	60da      	str	r2, [r3, #12]
 8003120:	9b01      	ldr	r3, [sp, #4]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	9b03      	ldr	r3, [sp, #12]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	9b01      	ldr	r3, [sp, #4]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	9b03      	ldr	r3, [sp, #12]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	9b03      	ldr	r3, [sp, #12]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a07      	ldr	r2, [pc, #28]	; (8003158 <chThdCreateSuspendedI+0x58>)
 800313a:	621a      	str	r2, [r3, #32]
  if (tdp->instance != NULL) {
    return __thd_object_init(tdp->instance, tp, tdp->name, tdp->prio);
  }
#endif

  return __thd_object_init(currcore, tp, tdp->name, tdp->prio);
 800313c:	9b01      	ldr	r3, [sp, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	9b01      	ldr	r3, [sp, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	9903      	ldr	r1, [sp, #12]
 8003146:	4805      	ldr	r0, [pc, #20]	; (800315c <chThdCreateSuspendedI+0x5c>)
 8003148:	f7ff ff9a 	bl	8003080 <__thd_object_init>
 800314c:	4603      	mov	r3, r0
}
 800314e:	4618      	mov	r0, r3
 8003150:	b005      	add	sp, #20
 8003152:	f85d fb04 	ldr.w	pc, [sp], #4
 8003156:	bf00      	nop
 8003158:	080002d1 	.word	0x080002d1
 800315c:	20000a48 	.word	0x20000a48

08003160 <chThdCreateI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 8003160:	b500      	push	{lr}
 8003162:	b083      	sub	sp, #12
 8003164:	9001      	str	r0, [sp, #4]

  return chSchReadyI(chThdCreateSuspendedI(tdp));
 8003166:	9801      	ldr	r0, [sp, #4]
 8003168:	f7ff ffca 	bl	8003100 <chThdCreateSuspendedI>
 800316c:	4603      	mov	r3, r0
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fc36 	bl	80029e0 <chSchReadyI>
 8003174:	4603      	mov	r3, r0
}
 8003176:	4618      	mov	r0, r3
 8003178:	b003      	add	sp, #12
 800317a:	f85d fb04 	ldr.w	pc, [sp], #4
 800317e:	bf00      	nop

08003180 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8003180:	b500      	push	{lr}
 8003182:	b085      	sub	sp, #20
 8003184:	9001      	str	r0, [sp, #4]

#if CH_DBG_FILL_THREADS == TRUE
  __thd_stackfill((uint8_t *)tdp->wbase, (uint8_t *)tdp->wend);
#endif

  chSysLock();
 8003186:	f7ff ff1b 	bl	8002fc0 <chSysLock.lto_priv.4>
  tp = chThdCreateSuspendedI(tdp);
 800318a:	9801      	ldr	r0, [sp, #4]
 800318c:	f7ff ffb8 	bl	8003100 <chThdCreateSuspendedI>
 8003190:	9003      	str	r0, [sp, #12]
  chSchWakeupS(tp, MSG_OK);
 8003192:	2100      	movs	r1, #0
 8003194:	9803      	ldr	r0, [sp, #12]
 8003196:	f7ff fca3 	bl	8002ae0 <chSchWakeupS>
  chSysUnlock();
 800319a:	f7ff ff21 	bl	8002fe0 <chSysUnlock.lto_priv.4>

  return tp;
 800319e:	9b03      	ldr	r3, [sp, #12]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	b005      	add	sp, #20
 80031a4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080031b0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 80031b0:	b500      	push	{lr}
 80031b2:	b087      	sub	sp, #28
 80031b4:	9003      	str	r0, [sp, #12]
 80031b6:	9102      	str	r1, [sp, #8]
 80031b8:	9201      	str	r2, [sp, #4]
 80031ba:	9300      	str	r3, [sp, #0]

#if CH_DBG_FILL_THREADS == TRUE
  __thd_stackfill((uint8_t *)wsp, (uint8_t *)wsp + size);
#endif

  chSysLock();
 80031bc:	f7ff ff00 	bl	8002fc0 <chSysLock.lto_priv.4>

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = threadref(((uint8_t *)wsp + size -
 80031c0:	9b02      	ldr	r3, [sp, #8]
 80031c2:	3b48      	subs	r3, #72	; 0x48
 80031c4:	9a03      	ldr	r2, [sp, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	9305      	str	r3, [sp, #20]
                 MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN)));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 80031ca:	9b05      	ldr	r3, [sp, #20]
 80031cc:	9a03      	ldr	r2, [sp, #12]
 80031ce:	621a      	str	r2, [r3, #32]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80031d0:	9b05      	ldr	r3, [sp, #20]
 80031d2:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 80031d6:	9b05      	ldr	r3, [sp, #20]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	9b05      	ldr	r3, [sp, #20]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	9a00      	ldr	r2, [sp, #0]
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	9b05      	ldr	r3, [sp, #20]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	9a08      	ldr	r2, [sp, #32]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	9b05      	ldr	r3, [sp, #20]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <chThdCreateStatic+0x68>)
 80031f0:	621a      	str	r2, [r3, #32]

  tp = __thd_object_init(currcore, tp, "noname", prio);
 80031f2:	9b01      	ldr	r3, [sp, #4]
 80031f4:	4a09      	ldr	r2, [pc, #36]	; (800321c <chThdCreateStatic+0x6c>)
 80031f6:	9905      	ldr	r1, [sp, #20]
 80031f8:	4809      	ldr	r0, [pc, #36]	; (8003220 <chThdCreateStatic+0x70>)
 80031fa:	f7ff ff41 	bl	8003080 <__thd_object_init>
 80031fe:	9005      	str	r0, [sp, #20]

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8003200:	2100      	movs	r1, #0
 8003202:	9805      	ldr	r0, [sp, #20]
 8003204:	f7ff fc6c 	bl	8002ae0 <chSchWakeupS>
  chSysUnlock();
 8003208:	f7ff feea 	bl	8002fe0 <chSysUnlock.lto_priv.4>

  return tp;
 800320c:	9b05      	ldr	r3, [sp, #20]
}
 800320e:	4618      	mov	r0, r3
 8003210:	b007      	add	sp, #28
 8003212:	f85d fb04 	ldr.w	pc, [sp], #4
 8003216:	bf00      	nop
 8003218:	080002d1 	.word	0x080002d1
 800321c:	0801d498 	.word	0x0801d498
 8003220:	20000a48 	.word	0x20000a48
	...

08003230 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8003230:	b510      	push	{r4, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	9001      	str	r0, [sp, #4]

  chSysLock();
 8003236:	f7ff fec3 	bl	8002fc0 <chSysLock.lto_priv.4>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
  tp->refs--;
 800323a:	9b01      	ldr	r3, [sp, #4]
 800323c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003240:	3b01      	subs	r3, #1
 8003242:	b2da      	uxtb	r2, r3
 8003244:	9b01      	ldr	r3, [sp, #4]
 8003246:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator.*/
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 800324a:	9b01      	ldr	r3, [sp, #4]
 800324c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003250:	2b00      	cmp	r3, #0
 8003252:	d129      	bne.n	80032a8 <chThdRelease+0x78>
 8003254:	9b01      	ldr	r3, [sp, #4]
 8003256:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800325a:	2b0f      	cmp	r3, #15
 800325c:	d124      	bne.n	80032a8 <chThdRelease+0x78>
    REG_REMOVE(tp);
 800325e:	9b01      	ldr	r3, [sp, #4]
 8003260:	3310      	adds	r3, #16
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fe94 	bl	8002f90 <ch_queue_dequeue.lto_priv.1>
    chSysUnlock();
 8003268:	f7ff feba 	bl	8002fe0 <chSysUnlock.lto_priv.4>

#if CH_CFG_USE_DYNAMIC == TRUE
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 800326c:	9b01      	ldr	r3, [sp, #4]
 800326e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d002      	beq.n	8003280 <chThdRelease+0x50>
 800327a:	2b02      	cmp	r3, #2
 800327c:	d008      	beq.n	8003290 <chThdRelease+0x60>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
      break;
#endif
    default:
      /* Nothing else to do for static threads.*/
      break;
 800327e:	e012      	b.n	80032a6 <chThdRelease+0x76>
      chHeapFree(chThdGetWorkingAreaX(tp));
 8003280:	9801      	ldr	r0, [sp, #4]
 8003282:	f7ff fecd 	bl	8003020 <chThdGetWorkingAreaX.lto_priv.0>
 8003286:	4603      	mov	r3, r0
 8003288:	4618      	mov	r0, r3
 800328a:	f002 f8d1 	bl	8005430 <chHeapFree>
      break;
 800328e:	e00a      	b.n	80032a6 <chThdRelease+0x76>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8003290:	9b01      	ldr	r3, [sp, #4]
 8003292:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003294:	9801      	ldr	r0, [sp, #4]
 8003296:	f7ff fec3 	bl	8003020 <chThdGetWorkingAreaX.lto_priv.0>
 800329a:	4603      	mov	r3, r0
 800329c:	4619      	mov	r1, r3
 800329e:	4620      	mov	r0, r4
 80032a0:	f002 fa5e 	bl	8005760 <chPoolFree>
      break;
 80032a4:	bf00      	nop
    }
#endif /* CH_CFG_USE_DYNAMIC == TRUE */
    return;
 80032a6:	e001      	b.n	80032ac <chThdRelease+0x7c>
  }
  chSysUnlock();
 80032a8:	f7ff fe9a 	bl	8002fe0 <chSysUnlock.lto_priv.4>
}
 80032ac:	b002      	add	sp, #8
 80032ae:	bd10      	pop	{r4, pc}

080032b0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 80032b0:	b500      	push	{lr}
 80032b2:	b083      	sub	sp, #12
 80032b4:	9001      	str	r0, [sp, #4]

  chSysLock();
 80032b6:	f7ff fe83 	bl	8002fc0 <chSysLock.lto_priv.4>
  chThdExitS(msg);
 80032ba:	9801      	ldr	r0, [sp, #4]
 80032bc:	f000 f808 	bl	80032d0 <chThdExitS>
  /* The thread never returns here.*/
}
 80032c0:	bf00      	nop
 80032c2:	b003      	add	sp, #12
 80032c4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080032d0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 80032d0:	b500      	push	{lr}
 80032d2:	b085      	sub	sp, #20
 80032d4:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 80032d6:	f7ff fe9b 	bl	8003010 <chThdGetSelfX.lto_priv.0>
 80032da:	9003      	str	r0, [sp, #12]

  /* Storing exit message.*/
  currtp->u.exitcode = msg;
 80032dc:	9b03      	ldr	r3, [sp, #12]
 80032de:	9a01      	ldr	r2, [sp, #4]
 80032e0:	629a      	str	r2, [r3, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 80032e2:	e008      	b.n	80032f6 <chThdExitS+0x26>
    (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
 80032e4:	9b03      	ldr	r3, [sp, #12]
 80032e6:	332c      	adds	r3, #44	; 0x2c
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fdf1 	bl	8002ed0 <ch_list_unlink>
 80032ee:	4603      	mov	r3, r0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fb75 	bl	80029e0 <chSchReadyI>
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 80032f6:	9b03      	ldr	r3, [sp, #12]
 80032f8:	332c      	adds	r3, #44	; 0x2c
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fdc8 	bl	8002e90 <ch_list_notempty>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1ee      	bne.n	80032e4 <chThdExitS+0x14>
  }
#endif

#if CH_CFG_USE_REGISTRY == TRUE
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8003306:	9b03      	ldr	r3, [sp, #12]
 8003308:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d010      	beq.n	800333c <chThdExitS+0x6c>
#if CH_CFG_USE_DYNAMIC == TRUE
    /* Static threads are immediately removed from the registry because there
       is no memory to recover.*/
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 800331a:	9b03      	ldr	r3, [sp, #12]
 800331c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d004      	beq.n	800333c <chThdExitS+0x6c>
      REG_REMOVE(currtp);
 8003332:	9b03      	ldr	r3, [sp, #12]
 8003334:	3310      	adds	r3, #16
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fe2a 	bl	8002f90 <ch_queue_dequeue.lto_priv.1>
#endif
  }
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 800333c:	200f      	movs	r0, #15
 800333e:	f7ff fb5f 	bl	8002a00 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8003342:	bf00      	nop
 8003344:	b005      	add	sp, #20
 8003346:	f85d fb04 	ldr.w	pc, [sp], #4
 800334a:	bf00      	nop
 800334c:	0000      	movs	r0, r0
	...

08003350 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8003350:	b500      	push	{lr}
 8003352:	b085      	sub	sp, #20
 8003354:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8003356:	f7ff fe5b 	bl	8003010 <chThdGetSelfX.lto_priv.0>
 800335a:	9002      	str	r0, [sp, #8]
  msg_t msg;

  chDbgCheck(tp != NULL);

  chSysLock();
 800335c:	f7ff fe30 	bl	8002fc0 <chSysLock.lto_priv.4>
  chDbgAssert(tp != currtp, "waiting self");
#if CH_CFG_USE_REGISTRY == TRUE
  chDbgAssert(tp->refs > (trefs_t)0, "no references");
#endif

  if (likely(tp->state != CH_STATE_FINAL)) {
 8003360:	9b01      	ldr	r3, [sp, #4]
 8003362:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003366:	2b0f      	cmp	r3, #15
 8003368:	bf14      	ite	ne
 800336a:	2301      	movne	r3, #1
 800336c:	2300      	moveq	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <chThdWait+0x38>
    ch_list_link(&tp->waiting, &currtp->hdr.list);
 8003374:	9b01      	ldr	r3, [sp, #4]
 8003376:	332c      	adds	r3, #44	; 0x2c
 8003378:	9a02      	ldr	r2, [sp, #8]
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fd97 	bl	8002eb0 <ch_list_link>
    chSchGoSleepS(CH_STATE_WTEXIT);
 8003382:	2009      	movs	r0, #9
 8003384:	f7ff fb3c 	bl	8002a00 <chSchGoSleepS>
  }
  msg = tp->u.exitcode;
 8003388:	9b01      	ldr	r3, [sp, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	9303      	str	r3, [sp, #12]
  chSysUnlock();
 800338e:	f7ff fe27 	bl	8002fe0 <chSysUnlock.lto_priv.4>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Releasing a reference to the thread.*/
  chThdRelease(tp);
 8003392:	9801      	ldr	r0, [sp, #4]
 8003394:	f7ff ff4c 	bl	8003230 <chThdRelease>
#endif

  return msg;
 8003398:	9b03      	ldr	r3, [sp, #12]
}
 800339a:	4618      	mov	r0, r3
 800339c:	b005      	add	sp, #20
 800339e:	f85d fb04 	ldr.w	pc, [sp], #4
 80033a2:	bf00      	nop
	...

080033b0 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 80033b0:	b500      	push	{lr}
 80033b2:	b085      	sub	sp, #20
 80033b4:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 80033b6:	f7ff fe2b 	bl	8003010 <chThdGetSelfX.lto_priv.0>
 80033ba:	9003      	str	r0, [sp, #12]
  tprio_t oldprio;

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
 80033bc:	f7ff fe00 	bl	8002fc0 <chSysLock.lto_priv.4>
#if CH_CFG_USE_MUTEXES == TRUE
  oldprio = currtp->realprio;
 80033c0:	9b03      	ldr	r3, [sp, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	9302      	str	r3, [sp, #8]
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 80033c6:	9b03      	ldr	r3, [sp, #12]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	9b03      	ldr	r3, [sp, #12]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d004      	beq.n	80033dc <chThdSetPriority+0x2c>
      (newprio > currtp->hdr.pqueue.prio)) {
 80033d2:	9b03      	ldr	r3, [sp, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 80033d6:	9a01      	ldr	r2, [sp, #4]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d902      	bls.n	80033e2 <chThdSetPriority+0x32>
    currtp->hdr.pqueue.prio = newprio;
 80033dc:	9b03      	ldr	r3, [sp, #12]
 80033de:	9a01      	ldr	r2, [sp, #4]
 80033e0:	609a      	str	r2, [r3, #8]
  }
  currtp->realprio = newprio;
 80033e2:	9b03      	ldr	r3, [sp, #12]
 80033e4:	9a01      	ldr	r2, [sp, #4]
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
#else
  oldprio = currtp->hdr.pqueue.prio;
  currtp->hdr.pqueue.prio = newprio;
#endif
  chSchRescheduleS();
 80033e8:	f7ff fbc2 	bl	8002b70 <chSchRescheduleS>
  chSysUnlock();
 80033ec:	f7ff fdf8 	bl	8002fe0 <chSysUnlock.lto_priv.4>

  return oldprio;
 80033f0:	9b02      	ldr	r3, [sp, #8]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	b005      	add	sp, #20
 80033f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80033fa:	bf00      	nop
 80033fc:	0000      	movs	r0, r0
	...

08003400 <chThdTerminate>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdTerminate(thread_t *tp) {
 8003400:	b500      	push	{lr}
 8003402:	b083      	sub	sp, #12
 8003404:	9001      	str	r0, [sp, #4]

  chSysLock();
 8003406:	f7ff fddb 	bl	8002fc0 <chSysLock.lto_priv.4>
  tp->flags |= CH_FLAG_TERMINATE;
 800340a:	9b01      	ldr	r3, [sp, #4]
 800340c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003410:	f043 0304 	orr.w	r3, r3, #4
 8003414:	b2da      	uxtb	r2, r3
 8003416:	9b01      	ldr	r3, [sp, #4]
 8003418:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  chSysUnlock();
 800341c:	f7ff fde0 	bl	8002fe0 <chSysUnlock.lto_priv.4>
}
 8003420:	bf00      	nop
 8003422:	b003      	add	sp, #12
 8003424:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003430 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 8003430:	b500      	push	{lr}
 8003432:	b083      	sub	sp, #12
 8003434:	9001      	str	r0, [sp, #4]

  chSysLock();
 8003436:	f7ff fdc3 	bl	8002fc0 <chSysLock.lto_priv.4>
  chThdSleepS(time);
 800343a:	9801      	ldr	r0, [sp, #4]
 800343c:	f7ff fdf8 	bl	8003030 <chThdSleepS>
  chSysUnlock();
 8003440:	f7ff fdce 	bl	8002fe0 <chSysUnlock.lto_priv.4>
}
 8003444:	bf00      	nop
 8003446:	b003      	add	sp, #12
 8003448:	f85d fb04 	ldr.w	pc, [sp], #4
 800344c:	0000      	movs	r0, r0
	...

08003450 <chThdSleepUntil>:
 *
 * @param[in] time      absolute system time
 *
 * @api
 */
void chThdSleepUntil(systime_t time) {
 8003450:	b500      	push	{lr}
 8003452:	b085      	sub	sp, #20
 8003454:	9001      	str	r0, [sp, #4]
  sysinterval_t interval;

  chSysLock();
 8003456:	f7ff fdb3 	bl	8002fc0 <chSysLock.lto_priv.4>
  interval = chTimeDiffX(chVTGetSystemTimeX(), time);
 800345a:	f7ff fdd1 	bl	8003000 <chVTGetSystemTimeX.lto_priv.2>
 800345e:	4603      	mov	r3, r0
 8003460:	9901      	ldr	r1, [sp, #4]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fcfc 	bl	8002e60 <chTimeDiffX.lto_priv.1>
 8003468:	9003      	str	r0, [sp, #12]
  if (likely(interval > (sysinterval_t)0)) {
 800346a:	9b03      	ldr	r3, [sp, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <chThdSleepUntil+0x30>
    chThdSleepS(interval);
 800347a:	9803      	ldr	r0, [sp, #12]
 800347c:	f7ff fdd8 	bl	8003030 <chThdSleepS>
  }
  chSysUnlock();
 8003480:	f7ff fdae 	bl	8002fe0 <chSysUnlock.lto_priv.4>
}
 8003484:	bf00      	nop
 8003486:	b005      	add	sp, #20
 8003488:	f85d fb04 	ldr.w	pc, [sp], #4
 800348c:	0000      	movs	r0, r0
	...

08003490 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8003490:	b508      	push	{r3, lr}

  chSysLock();
 8003492:	f7ff fd95 	bl	8002fc0 <chSysLock.lto_priv.4>
  chSchDoYieldS();
 8003496:	f7ff fbe3 	bl	8002c60 <chSchDoYieldS>
  chSysUnlock();
 800349a:	f7ff fda1 	bl	8002fe0 <chSysUnlock.lto_priv.4>
}
 800349e:	bf00      	nop
 80034a0:	bd08      	pop	{r3, pc}
 80034a2:	bf00      	nop
	...

080034b0 <chThdSuspendTimeoutS>:
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 80034b0:	b500      	push	{lr}
 80034b2:	b085      	sub	sp, #20
 80034b4:	9001      	str	r0, [sp, #4]
 80034b6:	9100      	str	r1, [sp, #0]
  thread_t *tp = chThdGetSelfX();
 80034b8:	f7ff fdaa 	bl	8003010 <chThdGetSelfX.lto_priv.0>
 80034bc:	9003      	str	r0, [sp, #12]

  chDbgAssert(*trp == NULL, "not NULL");

  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80034be:	9b00      	ldr	r3, [sp, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <chThdSuspendTimeoutS+0x24>
    return MSG_TIMEOUT;
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295
 80034d2:	e00a      	b.n	80034ea <chThdSuspendTimeoutS+0x3a>
  }

  *trp = tp;
 80034d4:	9b01      	ldr	r3, [sp, #4]
 80034d6:	9a03      	ldr	r2, [sp, #12]
 80034d8:	601a      	str	r2, [r3, #0]
  tp->u.wttrp = trp;
 80034da:	9b03      	ldr	r3, [sp, #12]
 80034dc:	9a01      	ldr	r2, [sp, #4]
 80034de:	629a      	str	r2, [r3, #40]	; 0x28

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80034e0:	9900      	ldr	r1, [sp, #0]
 80034e2:	2003      	movs	r0, #3
 80034e4:	f7ff fac4 	bl	8002a70 <chSchGoSleepTimeoutS>
 80034e8:	4603      	mov	r3, r0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	b005      	add	sp, #20
 80034ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80034f2:	bf00      	nop
	...

08003500 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8003500:	b500      	push	{lr}
 8003502:	b085      	sub	sp, #20
 8003504:	9001      	str	r0, [sp, #4]
 8003506:	9100      	str	r1, [sp, #0]

  if (*trp != NULL) {
 8003508:	9b01      	ldr	r3, [sp, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <chThdResumeI+0x28>
    thread_t *tp = *trp;
 8003510:	9b01      	ldr	r3, [sp, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	9303      	str	r3, [sp, #12]

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8003516:	9b01      	ldr	r3, [sp, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
 800351c:	9b03      	ldr	r3, [sp, #12]
 800351e:	9a00      	ldr	r2, [sp, #0]
 8003520:	629a      	str	r2, [r3, #40]	; 0x28
    (void) chSchReadyI(tp);
 8003522:	9803      	ldr	r0, [sp, #12]
 8003524:	f7ff fa5c 	bl	80029e0 <chSchReadyI>
  }
}
 8003528:	bf00      	nop
 800352a:	b005      	add	sp, #20
 800352c:	f85d fb04 	ldr.w	pc, [sp], #4

08003530 <chThdResumeS>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeS(thread_reference_t *trp, msg_t msg) {
 8003530:	b500      	push	{lr}
 8003532:	b085      	sub	sp, #20
 8003534:	9001      	str	r0, [sp, #4]
 8003536:	9100      	str	r1, [sp, #0]

  if (*trp != NULL) {
 8003538:	9b01      	ldr	r3, [sp, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d009      	beq.n	8003554 <chThdResumeS+0x24>
    thread_t *tp = *trp;
 8003540:	9b01      	ldr	r3, [sp, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	9303      	str	r3, [sp, #12]

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8003546:	9b01      	ldr	r3, [sp, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
    chSchWakeupS(tp, msg);
 800354c:	9900      	ldr	r1, [sp, #0]
 800354e:	9803      	ldr	r0, [sp, #12]
 8003550:	f7ff fac6 	bl	8002ae0 <chSchWakeupS>
  }
}
 8003554:	bf00      	nop
 8003556:	b005      	add	sp, #20
 8003558:	f85d fb04 	ldr.w	pc, [sp], #4
 800355c:	0000      	movs	r0, r0
	...

08003560 <chThdResume>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @api
 */
void chThdResume(thread_reference_t *trp, msg_t msg) {
 8003560:	b500      	push	{lr}
 8003562:	b083      	sub	sp, #12
 8003564:	9001      	str	r0, [sp, #4]
 8003566:	9100      	str	r1, [sp, #0]

  chSysLock();
 8003568:	f7ff fd2a 	bl	8002fc0 <chSysLock.lto_priv.4>
  chThdResumeS(trp, msg);
 800356c:	9900      	ldr	r1, [sp, #0]
 800356e:	9801      	ldr	r0, [sp, #4]
 8003570:	f7ff ffde 	bl	8003530 <chThdResumeS>
  chSysUnlock();
 8003574:	f7ff fd34 	bl	8002fe0 <chSysUnlock.lto_priv.4>
}
 8003578:	bf00      	nop
 800357a:	b003      	add	sp, #12
 800357c:	f85d fb04 	ldr.w	pc, [sp], #4

08003580 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8003580:	b500      	push	{lr}
 8003582:	b085      	sub	sp, #20
 8003584:	9001      	str	r0, [sp, #4]
 8003586:	9100      	str	r1, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
 8003588:	f7ff fd42 	bl	8003010 <chThdGetSelfX.lto_priv.0>
 800358c:	9003      	str	r0, [sp, #12]

  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800358e:	9b00      	ldr	r3, [sp, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <chThdEnqueueTimeoutS+0x24>
    return MSG_TIMEOUT;
 800359e:	f04f 33ff 	mov.w	r3, #4294967295
 80035a2:	e009      	b.n	80035b8 <chThdEnqueueTimeoutS+0x38>
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);
 80035a4:	9b01      	ldr	r3, [sp, #4]
 80035a6:	9903      	ldr	r1, [sp, #12]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fcc1 	bl	8002f30 <ch_queue_insert.lto_priv.0>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80035ae:	9900      	ldr	r1, [sp, #0]
 80035b0:	2004      	movs	r0, #4
 80035b2:	f7ff fa5d 	bl	8002a70 <chSchGoSleepTimeoutS>
 80035b6:	4603      	mov	r3, r0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	b005      	add	sp, #20
 80035bc:	f85d fb04 	ldr.w	pc, [sp], #4

080035c0 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80035c0:	b500      	push	{lr}
 80035c2:	b083      	sub	sp, #12
 80035c4:	9001      	str	r0, [sp, #4]
 80035c6:	9100      	str	r1, [sp, #0]

  if (ch_queue_notempty(&tqp->queue)) {
 80035c8:	9b01      	ldr	r3, [sp, #4]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fca0 	bl	8002f10 <ch_queue_notempty.lto_priv.0>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <chThdDequeueNextI+0x1e>
    chThdDoDequeueNextI(tqp, msg);
 80035d6:	9900      	ldr	r1, [sp, #0]
 80035d8:	9801      	ldr	r0, [sp, #4]
 80035da:	f7ff fd39 	bl	8003050 <chThdDoDequeueNextI>
  }
}
 80035de:	bf00      	nop
 80035e0:	b003      	add	sp, #12
 80035e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80035e6:	bf00      	nop
	...

080035f0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80035f0:	b500      	push	{lr}
 80035f2:	b083      	sub	sp, #12
 80035f4:	9001      	str	r0, [sp, #4]
 80035f6:	9100      	str	r1, [sp, #0]

  while (ch_queue_notempty(&tqp->queue)) {
 80035f8:	e003      	b.n	8003602 <chThdDequeueAllI+0x12>
    chThdDoDequeueNextI(tqp, msg);
 80035fa:	9900      	ldr	r1, [sp, #0]
 80035fc:	9801      	ldr	r0, [sp, #4]
 80035fe:	f7ff fd27 	bl	8003050 <chThdDoDequeueNextI>
  while (ch_queue_notempty(&tqp->queue)) {
 8003602:	9b01      	ldr	r3, [sp, #4]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fc83 	bl	8002f10 <ch_queue_notempty.lto_priv.0>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f4      	bne.n	80035fa <chThdDequeueAllI+0xa>
  }
}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	b003      	add	sp, #12
 8003616:	f85d fb04 	ldr.w	pc, [sp], #4
 800361a:	bf00      	nop
 800361c:	0000      	movs	r0, r0
	...

08003620 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
 8003620:	b4f0      	push	{r4, r5, r6, r7}
 8003622:	b084      	sub	sp, #16
 8003624:	9003      	str	r0, [sp, #12]
 8003626:	9102      	str	r1, [sp, #8]
 8003628:	9201      	str	r2, [sp, #4]

  tmp->n++;
 800362a:	9b03      	ldr	r3, [sp, #12]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	9b03      	ldr	r3, [sp, #12]
 8003632:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
 8003634:	9b03      	ldr	r3, [sp, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	9a02      	ldr	r2, [sp, #8]
 800363a:	1ad2      	subs	r2, r2, r3
 800363c:	9b01      	ldr	r3, [sp, #4]
 800363e:	1ad2      	subs	r2, r2, r3
 8003640:	9b03      	ldr	r3, [sp, #12]
 8003642:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8003644:	9b03      	ldr	r3, [sp, #12]
 8003646:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800364a:	9903      	ldr	r1, [sp, #12]
 800364c:	6889      	ldr	r1, [r1, #8]
 800364e:	2000      	movs	r0, #0
 8003650:	460c      	mov	r4, r1
 8003652:	4605      	mov	r5, r0
 8003654:	1916      	adds	r6, r2, r4
 8003656:	eb43 0705 	adc.w	r7, r3, r5
 800365a:	9b03      	ldr	r3, [sp, #12]
 800365c:	e9c3 6704 	strd	r6, r7, [r3, #16]
  if (tmp->last > tmp->worst) {
 8003660:	9b03      	ldr	r3, [sp, #12]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	9b03      	ldr	r3, [sp, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d903      	bls.n	8003674 <tm_stop+0x54>
    tmp->worst = tmp->last;
 800366c:	9b03      	ldr	r3, [sp, #12]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	9b03      	ldr	r3, [sp, #12]
 8003672:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
 8003674:	9b03      	ldr	r3, [sp, #12]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	9b03      	ldr	r3, [sp, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d203      	bcs.n	8003688 <tm_stop+0x68>
    tmp->best = tmp->last;
 8003680:	9b03      	ldr	r3, [sp, #12]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	9b03      	ldr	r3, [sp, #12]
 8003686:	601a      	str	r2, [r3, #0]
  }
}
 8003688:	bf00      	nop
 800368a:	b004      	add	sp, #16
 800368c:	bcf0      	pop	{r4, r5, r6, r7}
 800368e:	4770      	bx	lr

08003690 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
 8003690:	b082      	sub	sp, #8
 8003692:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
 8003694:	9b01      	ldr	r3, [sp, #4]
 8003696:	f04f 32ff 	mov.w	r2, #4294967295
 800369a:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
 800369c:	9b01      	ldr	r3, [sp, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
 80036a2:	9b01      	ldr	r3, [sp, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
 80036a8:	9b01      	ldr	r3, [sp, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
 80036ae:	9901      	ldr	r1, [sp, #4]
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80036bc:	bf00      	nop
 80036be:	b002      	add	sp, #8
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
	...

080036d0 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
 80036d0:	b082      	sub	sp, #8
 80036d2:	9001      	str	r0, [sp, #4]
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <chTMStartMeasurementX+0x14>)
 80036d6:	685a      	ldr	r2, [r3, #4]

  tmp->last = chSysGetRealtimeCounterX();
 80036d8:	9b01      	ldr	r3, [sp, #4]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	b002      	add	sp, #8
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	e0001000 	.word	0xe0001000
	...

080036f0 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80036f0:	b500      	push	{lr}
 80036f2:	b083      	sub	sp, #12
 80036f4:	9001      	str	r0, [sp, #4]
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <chTMStopMeasurementX+0x20>)
 80036f8:	685b      	ldr	r3, [r3, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 80036fa:	4a06      	ldr	r2, [pc, #24]	; (8003714 <chTMStopMeasurementX+0x24>)
 80036fc:	6892      	ldr	r2, [r2, #8]
 80036fe:	4619      	mov	r1, r3
 8003700:	9801      	ldr	r0, [sp, #4]
 8003702:	f7ff ff8d 	bl	8003620 <tm_stop>
}
 8003706:	bf00      	nop
 8003708:	b003      	add	sp, #12
 800370a:	f85d fb04 	ldr.w	pc, [sp], #4
 800370e:	bf00      	nop
 8003710:	e0001000 	.word	0xe0001000
 8003714:	20000a38 	.word	0x20000a38
	...

08003720 <ch_queue_init.lto_priv.4>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8003720:	b082      	sub	sp, #8
 8003722:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8003724:	9b01      	ldr	r3, [sp, #4]
 8003726:	9a01      	ldr	r2, [sp, #4]
 8003728:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 800372a:	9b01      	ldr	r3, [sp, #4]
 800372c:	9a01      	ldr	r2, [sp, #4]
 800372e:	605a      	str	r2, [r3, #4]
}
 8003730:	bf00      	nop
 8003732:	b002      	add	sp, #8
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
	...

08003740 <ch_queue_notempty.lto_priv.1>:
static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 8003740:	b082      	sub	sp, #8
 8003742:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next != qp);
 8003744:	9b01      	ldr	r3, [sp, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	9a01      	ldr	r2, [sp, #4]
 800374a:	429a      	cmp	r2, r3
 800374c:	bf14      	ite	ne
 800374e:	2301      	movne	r3, #1
 8003750:	2300      	moveq	r3, #0
 8003752:	b2db      	uxtb	r3, r3
}
 8003754:	4618      	mov	r0, r3
 8003756:	b002      	add	sp, #8
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	0000      	movs	r0, r0
	...

08003760 <ch_queue_insert.lto_priv.1>:
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 8003760:	b082      	sub	sp, #8
 8003762:	9001      	str	r0, [sp, #4]
 8003764:	9100      	str	r1, [sp, #0]
  p->next       = qp;
 8003766:	9b00      	ldr	r3, [sp, #0]
 8003768:	9a01      	ldr	r2, [sp, #4]
 800376a:	601a      	str	r2, [r3, #0]
  p->prev       = qp->prev;
 800376c:	9b01      	ldr	r3, [sp, #4]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	9b00      	ldr	r3, [sp, #0]
 8003772:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8003774:	9b00      	ldr	r3, [sp, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	9a00      	ldr	r2, [sp, #0]
 800377a:	601a      	str	r2, [r3, #0]
  qp->prev      = p;
 800377c:	9b01      	ldr	r3, [sp, #4]
 800377e:	9a00      	ldr	r2, [sp, #0]
 8003780:	605a      	str	r2, [r3, #4]
}
 8003782:	bf00      	nop
 8003784:	b002      	add	sp, #8
 8003786:	4770      	bx	lr
	...

08003790 <ch_queue_fifo_remove.lto_priv.1>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 8003790:	b084      	sub	sp, #16
 8003792:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
 8003794:	9b01      	ldr	r3, [sp, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
 800379a:	9b03      	ldr	r3, [sp, #12]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	9b01      	ldr	r3, [sp, #4]
 80037a0:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 80037a2:	9b01      	ldr	r3, [sp, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	9a01      	ldr	r2, [sp, #4]
 80037a8:	605a      	str	r2, [r3, #4]
  return p;
 80037aa:	9b03      	ldr	r3, [sp, #12]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	b004      	add	sp, #16
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
	...

080037c0 <ch_queue_lifo_remove>:
static inline ch_queue_t *ch_queue_lifo_remove(ch_queue_t *qp) {
 80037c0:	b084      	sub	sp, #16
 80037c2:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->prev;
 80037c4:	9b01      	ldr	r3, [sp, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	9303      	str	r3, [sp, #12]
  qp->prev       = p->prev;
 80037ca:	9b03      	ldr	r3, [sp, #12]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	9b01      	ldr	r3, [sp, #4]
 80037d0:	605a      	str	r2, [r3, #4]
  qp->prev->next = qp;
 80037d2:	9b01      	ldr	r3, [sp, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	9a01      	ldr	r2, [sp, #4]
 80037d8:	601a      	str	r2, [r3, #0]
  return p;
 80037da:	9b03      	ldr	r3, [sp, #12]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	b004      	add	sp, #16
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
	...

080037f0 <chSysLock.lto_priv.6>:
static inline void chSysLock(void) {
 80037f0:	b082      	sub	sp, #8
 80037f2:	2330      	movs	r3, #48	; 0x30
 80037f4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80037f6:	9b01      	ldr	r3, [sp, #4]
 80037f8:	f383 8811 	msr	BASEPRI, r3
}
 80037fc:	bf00      	nop
}
 80037fe:	bf00      	nop
}
 8003800:	bf00      	nop
 8003802:	b002      	add	sp, #8
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
	...

08003810 <chSysUnlock.lto_priv.6>:
static inline void chSysUnlock(void) {
 8003810:	b082      	sub	sp, #8
 8003812:	2300      	movs	r3, #0
 8003814:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003816:	9b01      	ldr	r3, [sp, #4]
 8003818:	f383 8811 	msr	BASEPRI, r3
}
 800381c:	bf00      	nop
}
 800381e:	bf00      	nop
}
 8003820:	bf00      	nop
 8003822:	b002      	add	sp, #8
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
	...

08003830 <chThdGetSelfX.lto_priv.1>:
  return __sch_get_currthread();
 8003830:	4b01      	ldr	r3, [pc, #4]	; (8003838 <chThdGetSelfX.lto_priv.1+0x8>)
 8003832:	68db      	ldr	r3, [r3, #12]
}
 8003834:	4618      	mov	r0, r3
 8003836:	4770      	bx	lr
 8003838:	20000a48 	.word	0x20000a48
 800383c:	00000000 	.word	0x00000000

08003840 <chSemObjectInit>:
 * @param[in] n         initial value of the semaphore counter. Must be
 *                      non-negative.
 *
 * @init
 */
void chSemObjectInit(semaphore_t *sp, cnt_t n) {
 8003840:	b500      	push	{lr}
 8003842:	b083      	sub	sp, #12
 8003844:	9001      	str	r0, [sp, #4]
 8003846:	9100      	str	r1, [sp, #0]

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  ch_queue_init(&sp->queue);
 8003848:	9b01      	ldr	r3, [sp, #4]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff ff68 	bl	8003720 <ch_queue_init.lto_priv.4>
  sp->cnt = n;
 8003850:	9b01      	ldr	r3, [sp, #4]
 8003852:	9a00      	ldr	r2, [sp, #0]
 8003854:	609a      	str	r2, [r3, #8]
}
 8003856:	bf00      	nop
 8003858:	b003      	add	sp, #12
 800385a:	f85d fb04 	ldr.w	pc, [sp], #4
 800385e:	bf00      	nop

08003860 <chSemResetWithMessage>:
 *                      be non-negative.
 * @param[in] msg       message to be sent
 *
 * @api
 */
void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg) {
 8003860:	b500      	push	{lr}
 8003862:	b085      	sub	sp, #20
 8003864:	9003      	str	r0, [sp, #12]
 8003866:	9102      	str	r1, [sp, #8]
 8003868:	9201      	str	r2, [sp, #4]

  chSysLock();
 800386a:	f7ff ffc1 	bl	80037f0 <chSysLock.lto_priv.6>
  chSemResetWithMessageI(sp, n, msg);
 800386e:	9a01      	ldr	r2, [sp, #4]
 8003870:	9902      	ldr	r1, [sp, #8]
 8003872:	9803      	ldr	r0, [sp, #12]
 8003874:	f000 f80c 	bl	8003890 <chSemResetWithMessageI>
  chSchRescheduleS();
 8003878:	f7ff f97a 	bl	8002b70 <chSchRescheduleS>
  chSysUnlock();
 800387c:	f7ff ffc8 	bl	8003810 <chSysUnlock.lto_priv.6>
}
 8003880:	bf00      	nop
 8003882:	b005      	add	sp, #20
 8003884:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003890 <chSemResetWithMessageI>:
 *                      be non-negative.
 * @param[in] msg       message to be sent
 *
 * @iclass
 */
void chSemResetWithMessageI(semaphore_t *sp, cnt_t n, msg_t msg) {
 8003890:	b500      	push	{lr}
 8003892:	b085      	sub	sp, #20
 8003894:	9003      	str	r0, [sp, #12]
 8003896:	9102      	str	r1, [sp, #8]
 8003898:	9201      	str	r2, [sp, #4]
  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  sp->cnt = n;
 800389a:	9b03      	ldr	r3, [sp, #12]
 800389c:	9a02      	ldr	r2, [sp, #8]
 800389e:	609a      	str	r2, [r3, #8]
  while (ch_queue_notempty(&sp->queue)) {
 80038a0:	e00a      	b.n	80038b8 <chSemResetWithMessageI+0x28>
    chSchReadyI(threadref(ch_queue_lifo_remove(&sp->queue)))->u.rdymsg = msg;
 80038a2:	9b03      	ldr	r3, [sp, #12]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ff8b 	bl	80037c0 <ch_queue_lifo_remove>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff f897 	bl	80029e0 <chSchReadyI>
 80038b2:	4602      	mov	r2, r0
 80038b4:	9b01      	ldr	r3, [sp, #4]
 80038b6:	6293      	str	r3, [r2, #40]	; 0x28
  while (ch_queue_notempty(&sp->queue)) {
 80038b8:	9b03      	ldr	r3, [sp, #12]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff ff40 	bl	8003740 <ch_queue_notempty.lto_priv.1>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1ed      	bne.n	80038a2 <chSemResetWithMessageI+0x12>
  }
}
 80038c6:	bf00      	nop
 80038c8:	bf00      	nop
 80038ca:	b005      	add	sp, #20
 80038cc:	f85d fb04 	ldr.w	pc, [sp], #4

080038d0 <chSemWait>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 80038d0:	b500      	push	{lr}
 80038d2:	b085      	sub	sp, #20
 80038d4:	9001      	str	r0, [sp, #4]
  msg_t msg;

  chSysLock();
 80038d6:	f7ff ff8b 	bl	80037f0 <chSysLock.lto_priv.6>
  msg = chSemWaitS(sp);
 80038da:	9801      	ldr	r0, [sp, #4]
 80038dc:	f000 f808 	bl	80038f0 <chSemWaitS>
 80038e0:	9003      	str	r0, [sp, #12]
  chSysUnlock();
 80038e2:	f7ff ff95 	bl	8003810 <chSysUnlock.lto_priv.6>

  return msg;
 80038e6:	9b03      	ldr	r3, [sp, #12]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	b005      	add	sp, #20
 80038ec:	f85d fb04 	ldr.w	pc, [sp], #4

080038f0 <chSemWaitS>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @sclass
 */
msg_t chSemWaitS(semaphore_t *sp) {
 80038f0:	b500      	push	{lr}
 80038f2:	b085      	sub	sp, #20
 80038f4:	9001      	str	r0, [sp, #4]
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 80038f6:	9b01      	ldr	r3, [sp, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	1e5a      	subs	r2, r3, #1
 80038fc:	9b01      	ldr	r3, [sp, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	9b01      	ldr	r3, [sp, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	da11      	bge.n	800392c <chSemWaitS+0x3c>
    thread_t *currtp = chThdGetSelfX();
 8003908:	f7ff ff92 	bl	8003830 <chThdGetSelfX.lto_priv.1>
 800390c:	9003      	str	r0, [sp, #12]
    currtp->u.wtsemp = sp;
 800390e:	9b03      	ldr	r3, [sp, #12]
 8003910:	9a01      	ldr	r2, [sp, #4]
 8003912:	629a      	str	r2, [r3, #40]	; 0x28
    sem_insert(&sp->queue, currtp);
 8003914:	9b01      	ldr	r3, [sp, #4]
 8003916:	9a03      	ldr	r2, [sp, #12]
 8003918:	4611      	mov	r1, r2
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff ff20 	bl	8003760 <ch_queue_insert.lto_priv.1>
    chSchGoSleepS(CH_STATE_WTSEM);
 8003920:	2005      	movs	r0, #5
 8003922:	f7ff f86d 	bl	8002a00 <chSchGoSleepS>

    return currtp->u.rdymsg;
 8003926:	9b03      	ldr	r3, [sp, #12]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	e000      	b.n	800392e <chSemWaitS+0x3e>
  }

  return MSG_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	b005      	add	sp, #20
 8003932:	f85d fb04 	ldr.w	pc, [sp], #4
 8003936:	bf00      	nop
	...

08003940 <chSemWaitTimeout>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @api
 */
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 8003940:	b500      	push	{lr}
 8003942:	b085      	sub	sp, #20
 8003944:	9001      	str	r0, [sp, #4]
 8003946:	9100      	str	r1, [sp, #0]
  msg_t msg;

  chSysLock();
 8003948:	f7ff ff52 	bl	80037f0 <chSysLock.lto_priv.6>
  msg = chSemWaitTimeoutS(sp, timeout);
 800394c:	9900      	ldr	r1, [sp, #0]
 800394e:	9801      	ldr	r0, [sp, #4]
 8003950:	f000 f80e 	bl	8003970 <chSemWaitTimeoutS>
 8003954:	9003      	str	r0, [sp, #12]
  chSysUnlock();
 8003956:	f7ff ff5b 	bl	8003810 <chSysUnlock.lto_priv.6>

  return msg;
 800395a:	9b03      	ldr	r3, [sp, #12]
}
 800395c:	4618      	mov	r0, r3
 800395e:	b005      	add	sp, #20
 8003960:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003970 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, sysinterval_t timeout) {
 8003970:	b500      	push	{lr}
 8003972:	b085      	sub	sp, #20
 8003974:	9001      	str	r0, [sp, #4]
 8003976:	9100      	str	r1, [sp, #0]
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 8003978:	9b01      	ldr	r3, [sp, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	1e5a      	subs	r2, r3, #1
 800397e:	9b01      	ldr	r3, [sp, #4]
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	9b01      	ldr	r3, [sp, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	da21      	bge.n	80039ce <chSemWaitTimeoutS+0x5e>
    if (unlikely(TIME_IMMEDIATE == timeout)) {
 800398a:	9b00      	ldr	r3, [sp, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf0c      	ite	eq
 8003990:	2301      	moveq	r3, #1
 8003992:	2300      	movne	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <chSemWaitTimeoutS+0x3a>
      sp->cnt++;
 800399a:	9b01      	ldr	r3, [sp, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	9b01      	ldr	r3, [sp, #4]
 80039a2:	609a      	str	r2, [r3, #8]

      return MSG_TIMEOUT;
 80039a4:	f04f 33ff 	mov.w	r3, #4294967295
 80039a8:	e012      	b.n	80039d0 <chSemWaitTimeoutS+0x60>
    }
    thread_t *currtp = chThdGetSelfX();
 80039aa:	f7ff ff41 	bl	8003830 <chThdGetSelfX.lto_priv.1>
 80039ae:	9003      	str	r0, [sp, #12]
    currtp->u.wtsemp = sp;
 80039b0:	9b03      	ldr	r3, [sp, #12]
 80039b2:	9a01      	ldr	r2, [sp, #4]
 80039b4:	629a      	str	r2, [r3, #40]	; 0x28
    sem_insert(&sp->queue, currtp);
 80039b6:	9b01      	ldr	r3, [sp, #4]
 80039b8:	9a03      	ldr	r2, [sp, #12]
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff fecf 	bl	8003760 <ch_queue_insert.lto_priv.1>

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 80039c2:	9900      	ldr	r1, [sp, #0]
 80039c4:	2005      	movs	r0, #5
 80039c6:	f7ff f853 	bl	8002a70 <chSchGoSleepTimeoutS>
 80039ca:	4603      	mov	r3, r0
 80039cc:	e000      	b.n	80039d0 <chSemWaitTimeoutS+0x60>
  }

  return MSG_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	b005      	add	sp, #20
 80039d4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080039e0 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 80039e0:	b500      	push	{lr}
 80039e2:	b083      	sub	sp, #12
 80039e4:	9001      	str	r0, [sp, #4]

  chDbgCheck(sp != NULL);

  chSysLock();
 80039e6:	f7ff ff03 	bl	80037f0 <chSysLock.lto_priv.6>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");
  if (++sp->cnt <= (cnt_t)0) {
 80039ea:	9b01      	ldr	r3, [sp, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	9b01      	ldr	r3, [sp, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	9b01      	ldr	r3, [sp, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	dc08      	bgt.n	8003a0e <chSemSignal+0x2e>
    chSchWakeupS(threadref(ch_queue_fifo_remove(&sp->queue)), MSG_OK);
 80039fc:	9b01      	ldr	r3, [sp, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fec6 	bl	8003790 <ch_queue_fifo_remove.lto_priv.1>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff f869 	bl	8002ae0 <chSchWakeupS>
  }
  chSysUnlock();
 8003a0e:	f7ff feff 	bl	8003810 <chSysUnlock.lto_priv.6>
}
 8003a12:	bf00      	nop
 8003a14:	b003      	add	sp, #12
 8003a16:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a1a:	bf00      	nop
 8003a1c:	0000      	movs	r0, r0
	...

08003a20 <chSemSignalI>:
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8003a20:	b500      	push	{lr}
 8003a22:	b085      	sub	sp, #20
 8003a24:	9001      	str	r0, [sp, #4]
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8003a26:	9b01      	ldr	r3, [sp, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	9b01      	ldr	r3, [sp, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	9b01      	ldr	r3, [sp, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	dc0a      	bgt.n	8003a4e <chSemSignalI+0x2e>
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = threadref(ch_queue_fifo_remove(&sp->queue));
 8003a38:	9b01      	ldr	r3, [sp, #4]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff fea8 	bl	8003790 <ch_queue_fifo_remove.lto_priv.1>
 8003a40:	9003      	str	r0, [sp, #12]
    tp->u.rdymsg = MSG_OK;
 8003a42:	9b03      	ldr	r3, [sp, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
    (void) chSchReadyI(tp);
 8003a48:	9803      	ldr	r0, [sp, #12]
 8003a4a:	f7fe ffc9 	bl	80029e0 <chSchReadyI>
  }
}
 8003a4e:	bf00      	nop
 8003a50:	b005      	add	sp, #20
 8003a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a56:	bf00      	nop
	...

08003a60 <chSemAddCounterI>:
 * @param[in] n         value to be added to the semaphore counter. The value
 *                      must be positive.
 *
 * @iclass
 */
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 8003a60:	b500      	push	{lr}
 8003a62:	b083      	sub	sp, #12
 8003a64:	9001      	str	r0, [sp, #4]
 8003a66:	9100      	str	r1, [sp, #0]
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
 8003a68:	e016      	b.n	8003a98 <chSemAddCounterI+0x38>
    if (++sp->cnt <= (cnt_t)0) {
 8003a6a:	9b01      	ldr	r3, [sp, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	9b01      	ldr	r3, [sp, #4]
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	9b01      	ldr	r3, [sp, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	dc0a      	bgt.n	8003a92 <chSemAddCounterI+0x32>
      chSchReadyI(threadref(ch_queue_fifo_remove(&sp->queue)))->u.rdymsg = MSG_OK;
 8003a7c:	9b01      	ldr	r3, [sp, #4]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fe86 	bl	8003790 <ch_queue_fifo_remove.lto_priv.1>
 8003a84:	4603      	mov	r3, r0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe ffaa 	bl	80029e0 <chSchReadyI>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2200      	movs	r2, #0
 8003a90:	629a      	str	r2, [r3, #40]	; 0x28
    }
    n--;
 8003a92:	9b00      	ldr	r3, [sp, #0]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	9300      	str	r3, [sp, #0]
  while (n > (cnt_t)0) {
 8003a98:	9b00      	ldr	r3, [sp, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	dce5      	bgt.n	8003a6a <chSemAddCounterI+0xa>
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	b003      	add	sp, #12
 8003aa4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003ab0 <chSemSignalWait>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8003ab0:	b500      	push	{lr}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	9001      	str	r0, [sp, #4]
 8003ab6:	9100      	str	r1, [sp, #0]
  msg_t msg;

  chDbgCheck((sps != NULL) && (spw != NULL));

  chSysLock();
 8003ab8:	f7ff fe9a 	bl	80037f0 <chSysLock.lto_priv.6>
              ((sps->cnt < (cnt_t)0) && ch_queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && ch_queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && ch_queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 8003abc:	9b01      	ldr	r3, [sp, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	9b01      	ldr	r3, [sp, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
 8003ac6:	9b01      	ldr	r3, [sp, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	dc0a      	bgt.n	8003ae4 <chSemSignalWait+0x34>
    chSchReadyI(threadref(ch_queue_fifo_remove(&sps->queue)))->u.rdymsg = MSG_OK;
 8003ace:	9b01      	ldr	r3, [sp, #4]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff fe5d 	bl	8003790 <ch_queue_fifo_remove.lto_priv.1>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe ff81 	bl	80029e0 <chSchReadyI>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (--spw->cnt < (cnt_t)0) {
 8003ae4:	9b00      	ldr	r3, [sp, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	1e5a      	subs	r2, r3, #1
 8003aea:	9b00      	ldr	r3, [sp, #0]
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	9b00      	ldr	r3, [sp, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	da12      	bge.n	8003b1c <chSemSignalWait+0x6c>
    thread_t *currtp = chThdGetSelfX();
 8003af6:	f7ff fe9b 	bl	8003830 <chThdGetSelfX.lto_priv.1>
 8003afa:	9002      	str	r0, [sp, #8]
    sem_insert(&spw->queue, currtp);
 8003afc:	9b00      	ldr	r3, [sp, #0]
 8003afe:	9a02      	ldr	r2, [sp, #8]
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff fe2c 	bl	8003760 <ch_queue_insert.lto_priv.1>
    currtp->u.wtsemp = spw;
 8003b08:	9b02      	ldr	r3, [sp, #8]
 8003b0a:	9a00      	ldr	r2, [sp, #0]
 8003b0c:	629a      	str	r2, [r3, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTSEM);
 8003b0e:	2005      	movs	r0, #5
 8003b10:	f7fe ff76 	bl	8002a00 <chSchGoSleepS>
    msg = currtp->u.rdymsg;
 8003b14:	9b02      	ldr	r3, [sp, #8]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	9303      	str	r3, [sp, #12]
 8003b1a:	e003      	b.n	8003b24 <chSemSignalWait+0x74>
  }
  else {
    chSchRescheduleS();
 8003b1c:	f7ff f828 	bl	8002b70 <chSchRescheduleS>
    msg = MSG_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	9303      	str	r3, [sp, #12]
  }
  chSysUnlock();
 8003b24:	f7ff fe74 	bl	8003810 <chSysUnlock.lto_priv.6>

  return msg;
 8003b28:	9b03      	ldr	r3, [sp, #12]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	b005      	add	sp, #20
 8003b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b32:	bf00      	nop
	...

08003b40 <ch_queue_init.lto_priv.5>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8003b40:	b082      	sub	sp, #8
 8003b42:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8003b44:	9b01      	ldr	r3, [sp, #4]
 8003b46:	9a01      	ldr	r2, [sp, #4]
 8003b48:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 8003b4a:	9b01      	ldr	r3, [sp, #4]
 8003b4c:	9a01      	ldr	r2, [sp, #4]
 8003b4e:	605a      	str	r2, [r3, #4]
}
 8003b50:	bf00      	nop
 8003b52:	b002      	add	sp, #8
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
	...

08003b60 <ch_queue_notempty.lto_priv.2>:
static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 8003b60:	b082      	sub	sp, #8
 8003b62:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next != qp);
 8003b64:	9b01      	ldr	r3, [sp, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	9a01      	ldr	r2, [sp, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	bf14      	ite	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	2300      	moveq	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	b002      	add	sp, #8
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	0000      	movs	r0, r0
	...

08003b80 <ch_queue_fifo_remove.lto_priv.2>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 8003b80:	b084      	sub	sp, #16
 8003b82:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
 8003b84:	9b01      	ldr	r3, [sp, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
 8003b8a:	9b03      	ldr	r3, [sp, #12]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	9b01      	ldr	r3, [sp, #4]
 8003b90:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 8003b92:	9b01      	ldr	r3, [sp, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	9a01      	ldr	r2, [sp, #4]
 8003b98:	605a      	str	r2, [r3, #4]
  return p;
 8003b9a:	9b03      	ldr	r3, [sp, #12]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	b004      	add	sp, #16
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
	...

08003bb0 <ch_queue_dequeue.lto_priv.2>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 8003bb4:	9b01      	ldr	r3, [sp, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	9a01      	ldr	r2, [sp, #4]
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 8003bbe:	9b01      	ldr	r3, [sp, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	9a01      	ldr	r2, [sp, #4]
 8003bc4:	6852      	ldr	r2, [r2, #4]
 8003bc6:	605a      	str	r2, [r3, #4]
  return p;
 8003bc8:	9b01      	ldr	r3, [sp, #4]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	b002      	add	sp, #8
 8003bce:	4770      	bx	lr

08003bd0 <chSysLock.lto_priv.7>:
static inline void chSysLock(void) {
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	2330      	movs	r3, #48	; 0x30
 8003bd4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003bd6:	9b01      	ldr	r3, [sp, #4]
 8003bd8:	f383 8811 	msr	BASEPRI, r3
}
 8003bdc:	bf00      	nop
}
 8003bde:	bf00      	nop
}
 8003be0:	bf00      	nop
 8003be2:	b002      	add	sp, #8
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
	...

08003bf0 <chSysUnlock.lto_priv.7>:
static inline void chSysUnlock(void) {
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003bf6:	9b01      	ldr	r3, [sp, #4]
 8003bf8:	f383 8811 	msr	BASEPRI, r3
}
 8003bfc:	bf00      	nop
}
 8003bfe:	bf00      	nop
}
 8003c00:	bf00      	nop
 8003c02:	b002      	add	sp, #8
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
	...

08003c10 <ch_sch_prio_insert.lto_priv.0>:
/*===========================================================================*/

/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {
 8003c10:	b084      	sub	sp, #16
 8003c12:	9001      	str	r0, [sp, #4]
 8003c14:	9100      	str	r1, [sp, #0]

  ch_queue_t *cp = qp;
 8003c16:	9b01      	ldr	r3, [sp, #4]
 8003c18:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->next;
 8003c1a:	9b03      	ldr	r3, [sp, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	9303      	str	r3, [sp, #12]
  } while ((cp != qp) &&
 8003c20:	9a03      	ldr	r2, [sp, #12]
 8003c22:	9b01      	ldr	r3, [sp, #4]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d005      	beq.n	8003c34 <ch_sch_prio_insert.lto_priv.0+0x24>
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 8003c28:	9b03      	ldr	r3, [sp, #12]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	9b00      	ldr	r3, [sp, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
  } while ((cp != qp) &&
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d2f2      	bcs.n	8003c1a <ch_sch_prio_insert.lto_priv.0+0xa>
  tp->next       = cp;
 8003c34:	9b00      	ldr	r3, [sp, #0]
 8003c36:	9a03      	ldr	r2, [sp, #12]
 8003c38:	601a      	str	r2, [r3, #0]
  tp->prev       = cp->prev;
 8003c3a:	9b03      	ldr	r3, [sp, #12]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	9b00      	ldr	r3, [sp, #0]
 8003c40:	605a      	str	r2, [r3, #4]
  tp->prev->next = tp;
 8003c42:	9b00      	ldr	r3, [sp, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	9a00      	ldr	r2, [sp, #0]
 8003c48:	601a      	str	r2, [r3, #0]
  cp->prev       = tp;
 8003c4a:	9b03      	ldr	r3, [sp, #12]
 8003c4c:	9a00      	ldr	r2, [sp, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
}
 8003c50:	bf00      	nop
 8003c52:	b004      	add	sp, #16
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
	...

08003c60 <chThdGetSelfX.lto_priv.2>:
  return __sch_get_currthread();
 8003c60:	4b01      	ldr	r3, [pc, #4]	; (8003c68 <chThdGetSelfX.lto_priv.2+0x8>)
 8003c62:	68db      	ldr	r3, [r3, #12]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	4770      	bx	lr
 8003c68:	20000a48 	.word	0x20000a48
 8003c6c:	00000000 	.word	0x00000000

08003c70 <chMtxQueueNotEmptyS>:
 * @param[out] mp       pointer to a @p mutex_t structure
 * @return              The mutex queue status.
 *
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {
 8003c70:	b500      	push	{lr}
 8003c72:	b083      	sub	sp, #12
 8003c74:	9001      	str	r0, [sp, #4]

  chDbgCheckClassS();

  return ch_queue_notempty(&mp->queue);
 8003c76:	9b01      	ldr	r3, [sp, #4]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff71 	bl	8003b60 <ch_queue_notempty.lto_priv.2>
 8003c7e:	4603      	mov	r3, r0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	b003      	add	sp, #12
 8003c84:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003c90 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8003c90:	b500      	push	{lr}
 8003c92:	b083      	sub	sp, #12
 8003c94:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
 8003c96:	9b01      	ldr	r3, [sp, #4]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff51 	bl	8003b40 <ch_queue_init.lto_priv.5>
  mp->owner = NULL;
 8003c9e:	9b01      	ldr	r3, [sp, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 8003ca4:	bf00      	nop
 8003ca6:	b003      	add	sp, #12
 8003ca8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cac:	0000      	movs	r0, r0
	...

08003cb0 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8003cb0:	b500      	push	{lr}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	9001      	str	r0, [sp, #4]

  chSysLock();
 8003cb6:	f7ff ff8b 	bl	8003bd0 <chSysLock.lto_priv.7>
  chMtxLockS(mp);
 8003cba:	9801      	ldr	r0, [sp, #4]
 8003cbc:	f000 f808 	bl	8003cd0 <chMtxLockS>
  chSysUnlock();
 8003cc0:	f7ff ff96 	bl	8003bf0 <chSysUnlock.lto_priv.7>
}
 8003cc4:	bf00      	nop
 8003cc6:	b003      	add	sp, #12
 8003cc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ccc:	0000      	movs	r0, r0
	...

08003cd0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8003cd6:	f7ff ffc3 	bl	8003c60 <chThdGetSelfX.lto_priv.2>
 8003cda:	9003      	str	r0, [sp, #12]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8003cdc:	9b01      	ldr	r3, [sp, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d04e      	beq.n	8003d82 <chMtxLockS+0xb2>
    else {
#endif
      /* Priority inheritance protocol; explores the thread-mutex dependencies
         boosting the priority of all the affected threads to equal the
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;
 8003ce4:	9b01      	ldr	r3, [sp, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	9302      	str	r3, [sp, #8]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8003cea:	e037      	b.n	8003d5c <chMtxLockS+0x8c>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 8003cec:	9b03      	ldr	r3, [sp, #12]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	9b02      	ldr	r3, [sp, #8]
 8003cf2:	609a      	str	r2, [r3, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8003cf4:	9b02      	ldr	r3, [sp, #8]
 8003cf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cfa:	2b07      	cmp	r3, #7
 8003cfc:	d016      	beq.n	8003d2c <chMtxLockS+0x5c>
 8003cfe:	2b07      	cmp	r3, #7
 8003d00:	dc2a      	bgt.n	8003d58 <chMtxLockS+0x88>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01f      	beq.n	8003d46 <chMtxLockS+0x76>
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d126      	bne.n	8003d58 <chMtxLockS+0x88>
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8003d0a:	9b02      	ldr	r3, [sp, #8]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	461c      	mov	r4, r3
 8003d10:	9b02      	ldr	r3, [sp, #8]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ff4c 	bl	8003bb0 <ch_queue_dequeue.lto_priv.2>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f7ff ff77 	bl	8003c10 <ch_sch_prio_insert.lto_priv.0>
                             ch_queue_dequeue(&tp->hdr.queue));
          tp = tp->u.wtmtxp->owner;
 8003d22:	9b02      	ldr	r3, [sp, #8]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	9302      	str	r3, [sp, #8]
          /*lint -e{9042} [16.1] Continues the while.*/
          continue;
 8003d2a:	e017      	b.n	8003d5c <chMtxLockS+0x8c>
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8003d2c:	9b02      	ldr	r3, [sp, #8]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	461c      	mov	r4, r3
 8003d32:	9b02      	ldr	r3, [sp, #8]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff ff3b 	bl	8003bb0 <ch_queue_dequeue.lto_priv.2>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f7ff ff66 	bl	8003c10 <ch_sch_prio_insert.lto_priv.0>
                             ch_queue_dequeue(&tp->hdr.queue));
          break;
 8003d44:	e009      	b.n	8003d5a <chMtxLockS+0x8a>
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(threadref(ch_queue_dequeue(&tp->hdr.queue)));
 8003d46:	9b02      	ldr	r3, [sp, #8]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff ff31 	bl	8003bb0 <ch_queue_dequeue.lto_priv.2>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fe fe45 	bl	80029e0 <chSchReadyI>
          break;
 8003d56:	e000      	b.n	8003d5a <chMtxLockS+0x8a>
        default:
          /* Nothing to do for other states.*/
          break;
 8003d58:	bf00      	nop
        }
        break;
 8003d5a:	e005      	b.n	8003d68 <chMtxLockS+0x98>
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8003d5c:	9b02      	ldr	r3, [sp, #8]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	9b03      	ldr	r3, [sp, #12]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d3c1      	bcc.n	8003cec <chMtxLockS+0x1c>
      }

      /* Sleep on the mutex.*/
      ch_sch_prio_insert(&mp->queue, &currtp->hdr.queue);
 8003d68:	9b01      	ldr	r3, [sp, #4]
 8003d6a:	9a03      	ldr	r2, [sp, #12]
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ff4e 	bl	8003c10 <ch_sch_prio_insert.lto_priv.0>
      currtp->u.wtmtxp = mp;
 8003d74:	9b03      	ldr	r3, [sp, #12]
 8003d76:	9a01      	ldr	r2, [sp, #4]
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28
      chSchGoSleepS(CH_STATE_WTMTX);
 8003d7a:	2006      	movs	r0, #6
 8003d7c:	f7fe fe40 	bl	8002a00 <chSchGoSleepS>
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = currtp;
    mp->next = currtp->mtxlist;
    currtp->mtxlist = mp;
  }
}
 8003d80:	e009      	b.n	8003d96 <chMtxLockS+0xc6>
    mp->owner = currtp;
 8003d82:	9b01      	ldr	r3, [sp, #4]
 8003d84:	9a03      	ldr	r2, [sp, #12]
 8003d86:	609a      	str	r2, [r3, #8]
    mp->next = currtp->mtxlist;
 8003d88:	9b03      	ldr	r3, [sp, #12]
 8003d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d8c:	9b01      	ldr	r3, [sp, #4]
 8003d8e:	60da      	str	r2, [r3, #12]
    currtp->mtxlist = mp;
 8003d90:	9b03      	ldr	r3, [sp, #12]
 8003d92:	9a01      	ldr	r2, [sp, #4]
 8003d94:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003d96:	bf00      	nop
 8003d98:	b004      	add	sp, #16
 8003d9a:	bd10      	pop	{r4, pc}
 8003d9c:	0000      	movs	r0, r0
	...

08003da0 <chMtxTryLock>:
 * @retval true         if the mutex has been successfully acquired
 * @retval false        if the lock attempt failed.
 *
 * @api
 */
bool chMtxTryLock(mutex_t *mp) {
 8003da0:	b500      	push	{lr}
 8003da2:	b085      	sub	sp, #20
 8003da4:	9001      	str	r0, [sp, #4]
  bool b;

  chSysLock();
 8003da6:	f7ff ff13 	bl	8003bd0 <chSysLock.lto_priv.7>
  b = chMtxTryLockS(mp);
 8003daa:	9801      	ldr	r0, [sp, #4]
 8003dac:	f000 f810 	bl	8003dd0 <chMtxTryLockS>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f88d 300f 	strb.w	r3, [sp, #15]
  chSysUnlock();
 8003db6:	f7ff ff1b 	bl	8003bf0 <chSysUnlock.lto_priv.7>

  return b;
 8003dba:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	b005      	add	sp, #20
 8003dc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dc6:	bf00      	nop
	...

08003dd0 <chMtxTryLockS>:
 * @retval true         if the mutex has been successfully acquired
 * @retval false        if the lock attempt failed.
 *
 * @sclass
 */
bool chMtxTryLockS(mutex_t *mp) {
 8003dd0:	b500      	push	{lr}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8003dd6:	f7ff ff43 	bl	8003c60 <chThdGetSelfX.lto_priv.2>
 8003dda:	9003      	str	r0, [sp, #12]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 8003ddc:	9b01      	ldr	r3, [sp, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <chMtxTryLockS+0x18>
    if (mp->owner == currtp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e00a      	b.n	8003dfe <chMtxTryLockS+0x2e>

  chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

  mp->cnt++;
#endif
  mp->owner = currtp;
 8003de8:	9b01      	ldr	r3, [sp, #4]
 8003dea:	9a03      	ldr	r2, [sp, #12]
 8003dec:	609a      	str	r2, [r3, #8]
  mp->next = currtp->mtxlist;
 8003dee:	9b03      	ldr	r3, [sp, #12]
 8003df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003df2:	9b01      	ldr	r3, [sp, #4]
 8003df4:	60da      	str	r2, [r3, #12]
  currtp->mtxlist = mp;
 8003df6:	9b03      	ldr	r3, [sp, #12]
 8003df8:	9a01      	ldr	r2, [sp, #4]
 8003dfa:	63da      	str	r2, [r3, #60]	; 0x3c
  return true;
 8003dfc:	2301      	movs	r3, #1
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	b005      	add	sp, #20
 8003e02:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e06:	bf00      	nop
	...

08003e10 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8003e10:	b500      	push	{lr}
 8003e12:	b087      	sub	sp, #28
 8003e14:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8003e16:	f7ff ff23 	bl	8003c60 <chThdGetSelfX.lto_priv.2>
 8003e1a:	9003      	str	r0, [sp, #12]
  mutex_t *lmp;

  chDbgCheck(mp != NULL);

  chSysLock();
 8003e1c:	f7ff fed8 	bl	8003bd0 <chSysLock.lto_priv.7>
    chDbgAssert(currtp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;
 8003e20:	9b01      	ldr	r3, [sp, #4]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	9b03      	ldr	r3, [sp, #12]
 8003e26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8003e28:	9801      	ldr	r0, [sp, #4]
 8003e2a:	f7ff ff21 	bl	8003c70 <chMtxQueueNotEmptyS>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d034      	beq.n	8003e9e <chMtxUnlock+0x8e>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 8003e34:	9b03      	ldr	r3, [sp, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	9305      	str	r3, [sp, #20]
      lmp = currtp->mtxlist;
 8003e3a:	9b03      	ldr	r3, [sp, #12]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3e:	9304      	str	r3, [sp, #16]
      while (lmp != NULL) {
 8003e40:	e012      	b.n	8003e68 <chMtxUnlock+0x58>
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8003e42:	9804      	ldr	r0, [sp, #16]
 8003e44:	f7ff ff14 	bl	8003c70 <chMtxQueueNotEmptyS>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <chMtxUnlock+0x52>
            ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
 8003e4e:	9b04      	ldr	r3, [sp, #16]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
        if (chMtxQueueNotEmptyS(lmp) &&
 8003e54:	9a05      	ldr	r2, [sp, #20]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d203      	bcs.n	8003e62 <chMtxUnlock+0x52>
          newprio = (threadref(lmp->queue.next))->hdr.pqueue.prio;
 8003e5a:	9b04      	ldr	r3, [sp, #16]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	9305      	str	r3, [sp, #20]
        }
        lmp = lmp->next;
 8003e62:	9b04      	ldr	r3, [sp, #16]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	9304      	str	r3, [sp, #16]
      while (lmp != NULL) {
 8003e68:	9b04      	ldr	r3, [sp, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e9      	bne.n	8003e42 <chMtxUnlock+0x32>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 8003e6e:	9b03      	ldr	r3, [sp, #12]
 8003e70:	9a05      	ldr	r2, [sp, #20]
 8003e72:	609a      	str	r2, [r3, #8]
      /* Awakens the highest priority thread waiting for the unlocked mutex and
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = threadref(ch_queue_fifo_remove(&mp->queue));
 8003e74:	9b01      	ldr	r3, [sp, #4]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fe82 	bl	8003b80 <ch_queue_fifo_remove.lto_priv.2>
 8003e7c:	9002      	str	r0, [sp, #8]
      mp->owner = tp;
 8003e7e:	9b01      	ldr	r3, [sp, #4]
 8003e80:	9a02      	ldr	r2, [sp, #8]
 8003e82:	609a      	str	r2, [r3, #8]
      mp->next = tp->mtxlist;
 8003e84:	9b02      	ldr	r3, [sp, #8]
 8003e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e88:	9b01      	ldr	r3, [sp, #4]
 8003e8a:	60da      	str	r2, [r3, #12]
      tp->mtxlist = mp;
 8003e8c:	9b02      	ldr	r3, [sp, #8]
 8003e8e:	9a01      	ldr	r2, [sp, #4]
 8003e90:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8003e92:	9802      	ldr	r0, [sp, #8]
 8003e94:	f7fe fda4 	bl	80029e0 <chSchReadyI>
      chSchRescheduleS();
 8003e98:	f7fe fe6a 	bl	8002b70 <chSchRescheduleS>
 8003e9c:	e002      	b.n	8003ea4 <chMtxUnlock+0x94>
    }
    else {
      mp->owner = NULL;
 8003e9e:	9b01      	ldr	r3, [sp, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	609a      	str	r2, [r3, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
 8003ea4:	f7ff fea4 	bl	8003bf0 <chSysUnlock.lto_priv.7>
}
 8003ea8:	bf00      	nop
 8003eaa:	b007      	add	sp, #28
 8003eac:	f85d fb04 	ldr.w	pc, [sp], #4

08003eb0 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8003eb0:	b500      	push	{lr}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8003eb6:	f7ff fed3 	bl	8003c60 <chThdGetSelfX.lto_priv.2>
 8003eba:	9003      	str	r0, [sp, #12]
    chDbgAssert(currtp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;
 8003ebc:	9b01      	ldr	r3, [sp, #4]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	9b03      	ldr	r3, [sp, #12]
 8003ec2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8003ec4:	9801      	ldr	r0, [sp, #4]
 8003ec6:	f7ff fed3 	bl	8003c70 <chMtxQueueNotEmptyS>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d032      	beq.n	8003f36 <chMtxUnlockS+0x86>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 8003ed0:	9b03      	ldr	r3, [sp, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	9304      	str	r3, [sp, #16]
      lmp = currtp->mtxlist;
 8003ed6:	9b03      	ldr	r3, [sp, #12]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	9305      	str	r3, [sp, #20]
      while (lmp != NULL) {
 8003edc:	e012      	b.n	8003f04 <chMtxUnlockS+0x54>
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8003ede:	9805      	ldr	r0, [sp, #20]
 8003ee0:	f7ff fec6 	bl	8003c70 <chMtxQueueNotEmptyS>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <chMtxUnlockS+0x4e>
            ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
 8003eea:	9b05      	ldr	r3, [sp, #20]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
        if (chMtxQueueNotEmptyS(lmp) &&
 8003ef0:	9a04      	ldr	r2, [sp, #16]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d203      	bcs.n	8003efe <chMtxUnlockS+0x4e>
          newprio = threadref(lmp->queue.next)->hdr.pqueue.prio;
 8003ef6:	9b05      	ldr	r3, [sp, #20]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	9304      	str	r3, [sp, #16]
        }
        lmp = lmp->next;
 8003efe:	9b05      	ldr	r3, [sp, #20]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	9305      	str	r3, [sp, #20]
      while (lmp != NULL) {
 8003f04:	9b05      	ldr	r3, [sp, #20]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e9      	bne.n	8003ede <chMtxUnlockS+0x2e>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 8003f0a:	9b03      	ldr	r3, [sp, #12]
 8003f0c:	9a04      	ldr	r2, [sp, #16]
 8003f0e:	609a      	str	r2, [r3, #8]
      /* Awakens the highest priority thread waiting for the unlocked mutex and
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = threadref(ch_queue_fifo_remove(&mp->queue));
 8003f10:	9b01      	ldr	r3, [sp, #4]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fe34 	bl	8003b80 <ch_queue_fifo_remove.lto_priv.2>
 8003f18:	9002      	str	r0, [sp, #8]
      mp->owner = tp;
 8003f1a:	9b01      	ldr	r3, [sp, #4]
 8003f1c:	9a02      	ldr	r2, [sp, #8]
 8003f1e:	609a      	str	r2, [r3, #8]
      mp->next = tp->mtxlist;
 8003f20:	9b02      	ldr	r3, [sp, #8]
 8003f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f24:	9b01      	ldr	r3, [sp, #4]
 8003f26:	60da      	str	r2, [r3, #12]
      tp->mtxlist = mp;
 8003f28:	9b02      	ldr	r3, [sp, #8]
 8003f2a:	9a01      	ldr	r2, [sp, #4]
 8003f2c:	63da      	str	r2, [r3, #60]	; 0x3c
      (void) chSchReadyI(tp);
 8003f2e:	9802      	ldr	r0, [sp, #8]
 8003f30:	f7fe fd56 	bl	80029e0 <chSchReadyI>
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8003f34:	e002      	b.n	8003f3c <chMtxUnlockS+0x8c>
      mp->owner = NULL;
 8003f36:	9b01      	ldr	r3, [sp, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
}
 8003f3c:	bf00      	nop
 8003f3e:	b007      	add	sp, #28
 8003f40:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003f50 <chMtxUnlockAllS>:
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @sclass
 */
void chMtxUnlockAllS(void) {
 8003f50:	b500      	push	{lr}
 8003f52:	b085      	sub	sp, #20
  thread_t *currtp = chThdGetSelfX();
 8003f54:	f7ff fe84 	bl	8003c60 <chThdGetSelfX.lto_priv.2>
 8003f58:	9003      	str	r0, [sp, #12]

  if (currtp->mtxlist != NULL) {
 8003f5a:	9b03      	ldr	r3, [sp, #12]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d02c      	beq.n	8003fbc <chMtxUnlockAllS+0x6c>
    do {
      mutex_t *mp = currtp->mtxlist;
 8003f62:	9b03      	ldr	r3, [sp, #12]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	9302      	str	r3, [sp, #8]
      currtp->mtxlist = mp->next;
 8003f68:	9b02      	ldr	r3, [sp, #8]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	9b03      	ldr	r3, [sp, #12]
 8003f6e:	63da      	str	r2, [r3, #60]	; 0x3c
      if (chMtxQueueNotEmptyS(mp)) {
 8003f70:	9802      	ldr	r0, [sp, #8]
 8003f72:	f7ff fe7d 	bl	8003c70 <chMtxQueueNotEmptyS>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d012      	beq.n	8003fa2 <chMtxUnlockAllS+0x52>
        thread_t *tp;
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)1;
#endif
        tp = threadref(ch_queue_fifo_remove(&mp->queue));
 8003f7c:	9b02      	ldr	r3, [sp, #8]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff fdfe 	bl	8003b80 <ch_queue_fifo_remove.lto_priv.2>
 8003f84:	9001      	str	r0, [sp, #4]
        mp->owner   = tp;
 8003f86:	9b02      	ldr	r3, [sp, #8]
 8003f88:	9a01      	ldr	r2, [sp, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
        mp->next    = tp->mtxlist;
 8003f8c:	9b01      	ldr	r3, [sp, #4]
 8003f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f90:	9b02      	ldr	r3, [sp, #8]
 8003f92:	60da      	str	r2, [r3, #12]
        tp->mtxlist = mp;
 8003f94:	9b01      	ldr	r3, [sp, #4]
 8003f96:	9a02      	ldr	r2, [sp, #8]
 8003f98:	63da      	str	r2, [r3, #60]	; 0x3c
        (void) chSchReadyI(tp);
 8003f9a:	9801      	ldr	r0, [sp, #4]
 8003f9c:	f7fe fd20 	bl	80029e0 <chSchReadyI>
 8003fa0:	e002      	b.n	8003fa8 <chMtxUnlockAllS+0x58>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 8003fa2:	9b02      	ldr	r3, [sp, #8]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	609a      	str	r2, [r3, #8]
      }
    } while (currtp->mtxlist != NULL);
 8003fa8:	9b03      	ldr	r3, [sp, #12]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1d8      	bne.n	8003f62 <chMtxUnlockAllS+0x12>
    currtp->hdr.pqueue.prio = currtp->realprio;
 8003fb0:	9b03      	ldr	r3, [sp, #12]
 8003fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fb4:	9b03      	ldr	r3, [sp, #12]
 8003fb6:	609a      	str	r2, [r3, #8]
    chSchRescheduleS();
 8003fb8:	f7fe fdda 	bl	8002b70 <chSchRescheduleS>
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	b005      	add	sp, #20
 8003fc0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003fd0 <chMtxUnlockAll>:
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8003fd0:	b508      	push	{r3, lr}

  chSysLock();
 8003fd2:	f7ff fdfd 	bl	8003bd0 <chSysLock.lto_priv.7>
  chMtxUnlockAllS();
 8003fd6:	f7ff ffbb 	bl	8003f50 <chMtxUnlockAllS>
  chSysUnlock();
 8003fda:	f7ff fe09 	bl	8003bf0 <chSysUnlock.lto_priv.7>
}
 8003fde:	bf00      	nop
 8003fe0:	bd08      	pop	{r3, pc}
 8003fe2:	bf00      	nop
	...

08003ff0 <ch_queue_init.lto_priv.6>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8003ff4:	9b01      	ldr	r3, [sp, #4]
 8003ff6:	9a01      	ldr	r2, [sp, #4]
 8003ff8:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 8003ffa:	9b01      	ldr	r3, [sp, #4]
 8003ffc:	9a01      	ldr	r2, [sp, #4]
 8003ffe:	605a      	str	r2, [r3, #4]
}
 8004000:	bf00      	nop
 8004002:	b002      	add	sp, #8
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
	...

08004010 <ch_queue_notempty.lto_priv.3>:
static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 8004010:	b082      	sub	sp, #8
 8004012:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next != qp);
 8004014:	9b01      	ldr	r3, [sp, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	9a01      	ldr	r2, [sp, #4]
 800401a:	429a      	cmp	r2, r3
 800401c:	bf14      	ite	ne
 800401e:	2301      	movne	r3, #1
 8004020:	2300      	moveq	r3, #0
 8004022:	b2db      	uxtb	r3, r3
}
 8004024:	4618      	mov	r0, r3
 8004026:	b002      	add	sp, #8
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	0000      	movs	r0, r0
	...

08004030 <ch_queue_fifo_remove.lto_priv.3>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 8004030:	b084      	sub	sp, #16
 8004032:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
 8004034:	9b01      	ldr	r3, [sp, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
 800403a:	9b03      	ldr	r3, [sp, #12]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	9b01      	ldr	r3, [sp, #4]
 8004040:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 8004042:	9b01      	ldr	r3, [sp, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	9a01      	ldr	r2, [sp, #4]
 8004048:	605a      	str	r2, [r3, #4]
  return p;
 800404a:	9b03      	ldr	r3, [sp, #12]
}
 800404c:	4618      	mov	r0, r3
 800404e:	b004      	add	sp, #16
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
	...

08004060 <chSysLock.lto_priv.8>:
static inline void chSysLock(void) {
 8004060:	b082      	sub	sp, #8
 8004062:	2330      	movs	r3, #48	; 0x30
 8004064:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004066:	9b01      	ldr	r3, [sp, #4]
 8004068:	f383 8811 	msr	BASEPRI, r3
}
 800406c:	bf00      	nop
}
 800406e:	bf00      	nop
}
 8004070:	bf00      	nop
 8004072:	b002      	add	sp, #8
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
	...

08004080 <chSysUnlock.lto_priv.8>:
static inline void chSysUnlock(void) {
 8004080:	b082      	sub	sp, #8
 8004082:	2300      	movs	r3, #0
 8004084:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004086:	9b01      	ldr	r3, [sp, #4]
 8004088:	f383 8811 	msr	BASEPRI, r3
}
 800408c:	bf00      	nop
}
 800408e:	bf00      	nop
}
 8004090:	bf00      	nop
 8004092:	b002      	add	sp, #8
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
	...

080040a0 <ch_sch_prio_insert.lto_priv.1>:
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {
 80040a0:	b084      	sub	sp, #16
 80040a2:	9001      	str	r0, [sp, #4]
 80040a4:	9100      	str	r1, [sp, #0]
  ch_queue_t *cp = qp;
 80040a6:	9b01      	ldr	r3, [sp, #4]
 80040a8:	9303      	str	r3, [sp, #12]
    cp = cp->next;
 80040aa:	9b03      	ldr	r3, [sp, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	9303      	str	r3, [sp, #12]
  } while ((cp != qp) &&
 80040b0:	9a03      	ldr	r2, [sp, #12]
 80040b2:	9b01      	ldr	r3, [sp, #4]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d005      	beq.n	80040c4 <ch_sch_prio_insert.lto_priv.1+0x24>
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 80040b8:	9b03      	ldr	r3, [sp, #12]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	9b00      	ldr	r3, [sp, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
  } while ((cp != qp) &&
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d2f2      	bcs.n	80040aa <ch_sch_prio_insert.lto_priv.1+0xa>
  tp->next       = cp;
 80040c4:	9b00      	ldr	r3, [sp, #0]
 80040c6:	9a03      	ldr	r2, [sp, #12]
 80040c8:	601a      	str	r2, [r3, #0]
  tp->prev       = cp->prev;
 80040ca:	9b03      	ldr	r3, [sp, #12]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	9b00      	ldr	r3, [sp, #0]
 80040d0:	605a      	str	r2, [r3, #4]
  tp->prev->next = tp;
 80040d2:	9b00      	ldr	r3, [sp, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	9a00      	ldr	r2, [sp, #0]
 80040d8:	601a      	str	r2, [r3, #0]
  cp->prev       = tp;
 80040da:	9b03      	ldr	r3, [sp, #12]
 80040dc:	9a00      	ldr	r2, [sp, #0]
 80040de:	605a      	str	r2, [r3, #4]
}
 80040e0:	bf00      	nop
 80040e2:	b004      	add	sp, #16
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
	...

080040f0 <chThdGetSelfX.lto_priv.3>:
  return __sch_get_currthread();
 80040f0:	4b01      	ldr	r3, [pc, #4]	; (80040f8 <chThdGetSelfX.lto_priv.3+0x8>)
 80040f2:	68db      	ldr	r3, [r3, #12]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	4770      	bx	lr
 80040f8:	20000a48 	.word	0x20000a48
 80040fc:	00000000 	.word	0x00000000

08004100 <chMtxGetNextMutexX>:
 * @return              A pointer to the next mutex in the stack.
 * @retval NULL         if the stack is empty.
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {
 8004100:	b508      	push	{r3, lr}

  return chThdGetSelfX()->mtxlist;
 8004102:	f7ff fff5 	bl	80040f0 <chThdGetSelfX.lto_priv.3>
 8004106:	4603      	mov	r3, r0
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800410a:	4618      	mov	r0, r3
 800410c:	bd08      	pop	{r3, pc}
 800410e:	bf00      	nop

08004110 <chCondObjectInit>:
 *
 * @param[out] cp       pointer to a @p condition_variable_t structure
 *
 * @init
 */
void chCondObjectInit(condition_variable_t *cp) {
 8004110:	b500      	push	{lr}
 8004112:	b083      	sub	sp, #12
 8004114:	9001      	str	r0, [sp, #4]

  chDbgCheck(cp != NULL);

  ch_queue_init(&cp->queue);
 8004116:	9b01      	ldr	r3, [sp, #4]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff ff69 	bl	8003ff0 <ch_queue_init.lto_priv.6>
}
 800411e:	bf00      	nop
 8004120:	b003      	add	sp, #12
 8004122:	f85d fb04 	ldr.w	pc, [sp], #4
 8004126:	bf00      	nop
	...

08004130 <chCondSignal>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8004130:	b500      	push	{lr}
 8004132:	b083      	sub	sp, #12
 8004134:	9001      	str	r0, [sp, #4]

  chDbgCheck(cp != NULL);

  chSysLock();
 8004136:	f7ff ff93 	bl	8004060 <chSysLock.lto_priv.8>
  if (ch_queue_notempty(&cp->queue)) {
 800413a:	9b01      	ldr	r3, [sp, #4]
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff ff67 	bl	8004010 <ch_queue_notempty.lto_priv.3>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <chCondSignal+0x2a>
    chSchWakeupS(threadref(ch_queue_fifo_remove(&cp->queue)), MSG_OK);
 8004148:	9b01      	ldr	r3, [sp, #4]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff ff70 	bl	8004030 <ch_queue_fifo_remove.lto_priv.3>
 8004150:	4603      	mov	r3, r0
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe fcc3 	bl	8002ae0 <chSchWakeupS>
  }
  chSysUnlock();
 800415a:	f7ff ff91 	bl	8004080 <chSysUnlock.lto_priv.8>
}
 800415e:	bf00      	nop
 8004160:	b003      	add	sp, #12
 8004162:	f85d fb04 	ldr.w	pc, [sp], #4
 8004166:	bf00      	nop
	...

08004170 <chCondSignalI>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 8004170:	b500      	push	{lr}
 8004172:	b085      	sub	sp, #20
 8004174:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (ch_queue_notempty(&cp->queue)) {
 8004176:	9b01      	ldr	r3, [sp, #4]
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff ff49 	bl	8004010 <ch_queue_notempty.lto_priv.3>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <chCondSignalI+0x2a>
    thread_t *tp = threadref(ch_queue_fifo_remove(&cp->queue));
 8004184:	9b01      	ldr	r3, [sp, #4]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff ff52 	bl	8004030 <ch_queue_fifo_remove.lto_priv.3>
 800418c:	9003      	str	r0, [sp, #12]
    tp->u.rdymsg = MSG_OK;
 800418e:	9b03      	ldr	r3, [sp, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
    (void) chSchReadyI(tp);
 8004194:	9803      	ldr	r0, [sp, #12]
 8004196:	f7fe fc23 	bl	80029e0 <chSchReadyI>
  }
}
 800419a:	bf00      	nop
 800419c:	b005      	add	sp, #20
 800419e:	f85d fb04 	ldr.w	pc, [sp], #4
 80041a2:	bf00      	nop
	...

080041b0 <chCondBroadcast>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondBroadcast(condition_variable_t *cp) {
 80041b0:	b500      	push	{lr}
 80041b2:	b083      	sub	sp, #12
 80041b4:	9001      	str	r0, [sp, #4]

  chSysLock();
 80041b6:	f7ff ff53 	bl	8004060 <chSysLock.lto_priv.8>
  chCondBroadcastI(cp);
 80041ba:	9801      	ldr	r0, [sp, #4]
 80041bc:	f000 f808 	bl	80041d0 <chCondBroadcastI>
  chSchRescheduleS();
 80041c0:	f7fe fcd6 	bl	8002b70 <chSchRescheduleS>
  chSysUnlock();
 80041c4:	f7ff ff5c 	bl	8004080 <chSysUnlock.lto_priv.8>
}
 80041c8:	bf00      	nop
 80041ca:	b003      	add	sp, #12
 80041cc:	f85d fb04 	ldr.w	pc, [sp], #4

080041d0 <chCondBroadcastI>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondBroadcastI(condition_variable_t *cp) {
 80041d0:	b500      	push	{lr}
 80041d2:	b083      	sub	sp, #12
 80041d4:	9001      	str	r0, [sp, #4]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (ch_queue_notempty(&cp->queue)) {
 80041d6:	e00b      	b.n	80041f0 <chCondBroadcastI+0x20>
    chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 80041d8:	9b01      	ldr	r3, [sp, #4]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ff28 	bl	8004030 <ch_queue_fifo_remove.lto_priv.3>
 80041e0:	4603      	mov	r3, r0
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe fbfc 	bl	80029e0 <chSchReadyI>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f06f 0201 	mvn.w	r2, #1
 80041ee:	629a      	str	r2, [r3, #40]	; 0x28
  while (ch_queue_notempty(&cp->queue)) {
 80041f0:	9b01      	ldr	r3, [sp, #4]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff ff0c 	bl	8004010 <ch_queue_notempty.lto_priv.3>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1ec      	bne.n	80041d8 <chCondBroadcastI+0x8>
  }
}
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	b003      	add	sp, #12
 8004204:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004210 <chCondWait>:
 * @retval MSG_RESET    if the condition variable has been signaled using
 *                      @p chCondBroadcast().
 *
 * @api
 */
msg_t chCondWait(condition_variable_t *cp) {
 8004210:	b500      	push	{lr}
 8004212:	b085      	sub	sp, #20
 8004214:	9001      	str	r0, [sp, #4]
  msg_t msg;

  chSysLock();
 8004216:	f7ff ff23 	bl	8004060 <chSysLock.lto_priv.8>
  msg = chCondWaitS(cp);
 800421a:	9801      	ldr	r0, [sp, #4]
 800421c:	f000 f808 	bl	8004230 <chCondWaitS>
 8004220:	9003      	str	r0, [sp, #12]
  chSysUnlock();
 8004222:	f7ff ff2d 	bl	8004080 <chSysUnlock.lto_priv.8>
  return msg;
 8004226:	9b03      	ldr	r3, [sp, #12]
}
 8004228:	4618      	mov	r0, r3
 800422a:	b005      	add	sp, #20
 800422c:	f85d fb04 	ldr.w	pc, [sp], #4

08004230 <chCondWaitS>:
 * @retval MSG_RESET    if the condition variable has been signaled using
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
 8004230:	b500      	push	{lr}
 8004232:	b087      	sub	sp, #28
 8004234:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8004236:	f7ff ff5b 	bl	80040f0 <chThdGetSelfX.lto_priv.3>
 800423a:	9004      	str	r0, [sp, #16]
  mutex_t *mp = chMtxGetNextMutexX();
 800423c:	f7ff ff60 	bl	8004100 <chMtxGetNextMutexX>
 8004240:	9005      	str	r0, [sp, #20]
  chDbgCheckClassS();
  chDbgCheck(cp != NULL);
  chDbgAssert(mp != NULL, "not owning a mutex");

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 8004242:	9805      	ldr	r0, [sp, #20]
 8004244:	f7ff fe34 	bl	8003eb0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currtp->u.wtobjp = cp;
 8004248:	9b04      	ldr	r3, [sp, #16]
 800424a:	9a01      	ldr	r2, [sp, #4]
 800424c:	629a      	str	r2, [r3, #40]	; 0x28
  ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
 800424e:	9b01      	ldr	r3, [sp, #4]
 8004250:	9a04      	ldr	r2, [sp, #16]
 8004252:	4611      	mov	r1, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff ff23 	bl	80040a0 <ch_sch_prio_insert.lto_priv.1>
  chSchGoSleepS(CH_STATE_WTCOND);
 800425a:	2007      	movs	r0, #7
 800425c:	f7fe fbd0 	bl	8002a00 <chSchGoSleepS>
  msg = currtp->u.rdymsg;
 8004260:	9b04      	ldr	r3, [sp, #16]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	9303      	str	r3, [sp, #12]
  chMtxLockS(mp);
 8004266:	9805      	ldr	r0, [sp, #20]
 8004268:	f7ff fd32 	bl	8003cd0 <chMtxLockS>

  return msg;
 800426c:	9b03      	ldr	r3, [sp, #12]
}
 800426e:	4618      	mov	r0, r3
 8004270:	b007      	add	sp, #28
 8004272:	f85d fb04 	ldr.w	pc, [sp], #4
 8004276:	bf00      	nop
	...

08004280 <chCondWaitTimeout>:
 * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 *                      the specified timeout.
 *
 * @api
 */
msg_t chCondWaitTimeout(condition_variable_t *cp, sysinterval_t timeout) {
 8004280:	b500      	push	{lr}
 8004282:	b085      	sub	sp, #20
 8004284:	9001      	str	r0, [sp, #4]
 8004286:	9100      	str	r1, [sp, #0]
  msg_t msg;

  chSysLock();
 8004288:	f7ff feea 	bl	8004060 <chSysLock.lto_priv.8>
  msg = chCondWaitTimeoutS(cp, timeout);
 800428c:	9900      	ldr	r1, [sp, #0]
 800428e:	9801      	ldr	r0, [sp, #4]
 8004290:	f000 f80e 	bl	80042b0 <chCondWaitTimeoutS>
 8004294:	9003      	str	r0, [sp, #12]
  chSysUnlock();
 8004296:	f7ff fef3 	bl	8004080 <chSysUnlock.lto_priv.8>

  return msg;
 800429a:	9b03      	ldr	r3, [sp, #12]
}
 800429c:	4618      	mov	r0, r3
 800429e:	b005      	add	sp, #20
 80042a0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080042b0 <chCondWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chCondWaitTimeoutS(condition_variable_t *cp, sysinterval_t timeout) {
 80042b0:	b500      	push	{lr}
 80042b2:	b087      	sub	sp, #28
 80042b4:	9001      	str	r0, [sp, #4]
 80042b6:	9100      	str	r1, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
 80042b8:	f7ff ff1a 	bl	80040f0 <chThdGetSelfX.lto_priv.3>
 80042bc:	9005      	str	r0, [sp, #20]
  mutex_t *mp = chMtxGetNextMutexX();
 80042be:	f7ff ff1f 	bl	8004100 <chMtxGetNextMutexX>
 80042c2:	9004      	str	r0, [sp, #16]
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(mp != NULL, "not owning a mutex");

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 80042c4:	9804      	ldr	r0, [sp, #16]
 80042c6:	f7ff fdf3 	bl	8003eb0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currtp->u.wtobjp = cp;
 80042ca:	9b05      	ldr	r3, [sp, #20]
 80042cc:	9a01      	ldr	r2, [sp, #4]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28
  ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
 80042d0:	9b01      	ldr	r3, [sp, #4]
 80042d2:	9a05      	ldr	r2, [sp, #20]
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fee2 	bl	80040a0 <ch_sch_prio_insert.lto_priv.1>
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
 80042dc:	9900      	ldr	r1, [sp, #0]
 80042de:	2007      	movs	r0, #7
 80042e0:	f7fe fbc6 	bl	8002a70 <chSchGoSleepTimeoutS>
 80042e4:	9003      	str	r0, [sp, #12]
  if (msg != MSG_TIMEOUT) {
 80042e6:	9b03      	ldr	r3, [sp, #12]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d002      	beq.n	80042f4 <chCondWaitTimeoutS+0x44>
    chMtxLockS(mp);
 80042ee:	9804      	ldr	r0, [sp, #16]
 80042f0:	f7ff fcee 	bl	8003cd0 <chMtxLockS>
  }

  return msg;
 80042f4:	9b03      	ldr	r3, [sp, #12]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	b007      	add	sp, #28
 80042fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80042fe:	bf00      	nop

08004300 <chSysLock.lto_priv.9>:
static inline void chSysLock(void) {
 8004300:	b082      	sub	sp, #8
 8004302:	2330      	movs	r3, #48	; 0x30
 8004304:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004306:	9b01      	ldr	r3, [sp, #4]
 8004308:	f383 8811 	msr	BASEPRI, r3
}
 800430c:	bf00      	nop
}
 800430e:	bf00      	nop
}
 8004310:	bf00      	nop
 8004312:	b002      	add	sp, #8
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
	...

08004320 <chSysUnlock.lto_priv.9>:
static inline void chSysUnlock(void) {
 8004320:	b082      	sub	sp, #8
 8004322:	2300      	movs	r3, #0
 8004324:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004326:	9b01      	ldr	r3, [sp, #4]
 8004328:	f383 8811 	msr	BASEPRI, r3
}
 800432c:	bf00      	nop
}
 800432e:	bf00      	nop
}
 8004330:	bf00      	nop
 8004332:	b002      	add	sp, #8
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
	...

08004340 <chThdGetSelfX.lto_priv.4>:
  return __sch_get_currthread();
 8004340:	4b01      	ldr	r3, [pc, #4]	; (8004348 <chThdGetSelfX.lto_priv.4+0x8>)
 8004342:	68db      	ldr	r3, [r3, #12]
}
 8004344:	4618      	mov	r0, r3
 8004346:	4770      	bx	lr
 8004348:	20000a48 	.word	0x20000a48
 800434c:	00000000 	.word	0x00000000

08004350 <chEvtAddEventsI>:
 * @param[in] events    the events to be added
 * @return              The mask of currently pending events.
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {
 8004350:	b082      	sub	sp, #8
 8004352:	9001      	str	r0, [sp, #4]

  return __sch_get_currthread()->epending |= events;
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <chEvtAddEventsI+0x1c>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800435a:	4b04      	ldr	r3, [pc, #16]	; (800436c <chEvtAddEventsI+0x1c>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	9a01      	ldr	r2, [sp, #4]
 8004360:	430a      	orrs	r2, r1
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8004366:	4618      	mov	r0, r3
 8004368:	b002      	add	sp, #8
 800436a:	4770      	bx	lr
 800436c:	20000a48 	.word	0x20000a48

08004370 <chEvtRegisterMaskWithFlagsI>:
 * @iclass
 */
void chEvtRegisterMaskWithFlagsI(event_source_t *esp,
                                 event_listener_t *elp,
                                 eventmask_t events,
                                 eventflags_t wflags) {
 8004370:	b500      	push	{lr}
 8004372:	b087      	sub	sp, #28
 8004374:	9003      	str	r0, [sp, #12]
 8004376:	9102      	str	r1, [sp, #8]
 8004378:	9201      	str	r2, [sp, #4]
 800437a:	9300      	str	r3, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
 800437c:	f7ff ffe0 	bl	8004340 <chThdGetSelfX.lto_priv.4>
 8004380:	9005      	str	r0, [sp, #20]

  chDbgCheckClassI();
  chDbgCheck((esp != NULL) && (elp != NULL));

  elp->next     = esp->next;
 8004382:	9b03      	ldr	r3, [sp, #12]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	9b02      	ldr	r3, [sp, #8]
 8004388:	601a      	str	r2, [r3, #0]
  esp->next     = elp;
 800438a:	9b03      	ldr	r3, [sp, #12]
 800438c:	9a02      	ldr	r2, [sp, #8]
 800438e:	601a      	str	r2, [r3, #0]
  elp->listener = currtp;
 8004390:	9b02      	ldr	r3, [sp, #8]
 8004392:	9a05      	ldr	r2, [sp, #20]
 8004394:	605a      	str	r2, [r3, #4]
  elp->events   = events;
 8004396:	9b02      	ldr	r3, [sp, #8]
 8004398:	9a01      	ldr	r2, [sp, #4]
 800439a:	609a      	str	r2, [r3, #8]
  elp->flags    = (eventflags_t)0;
 800439c:	9b02      	ldr	r3, [sp, #8]
 800439e:	2200      	movs	r2, #0
 80043a0:	60da      	str	r2, [r3, #12]
  elp->wflags   = wflags;
 80043a2:	9b02      	ldr	r3, [sp, #8]
 80043a4:	9a00      	ldr	r2, [sp, #0]
 80043a6:	611a      	str	r2, [r3, #16]
}
 80043a8:	bf00      	nop
 80043aa:	b007      	add	sp, #28
 80043ac:	f85d fb04 	ldr.w	pc, [sp], #4

080043b0 <chEvtRegisterMaskWithFlags>:
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
                                event_listener_t *elp,
                                eventmask_t events,
                                eventflags_t wflags) {
 80043b0:	b500      	push	{lr}
 80043b2:	b085      	sub	sp, #20
 80043b4:	9003      	str	r0, [sp, #12]
 80043b6:	9102      	str	r1, [sp, #8]
 80043b8:	9201      	str	r2, [sp, #4]
 80043ba:	9300      	str	r3, [sp, #0]

  chSysLock();
 80043bc:	f7ff ffa0 	bl	8004300 <chSysLock.lto_priv.9>
  chEvtRegisterMaskWithFlagsI(esp, elp, events, wflags);
 80043c0:	9b00      	ldr	r3, [sp, #0]
 80043c2:	9a01      	ldr	r2, [sp, #4]
 80043c4:	9902      	ldr	r1, [sp, #8]
 80043c6:	9803      	ldr	r0, [sp, #12]
 80043c8:	f7ff ffd2 	bl	8004370 <chEvtRegisterMaskWithFlagsI>
  chSysUnlock();
 80043cc:	f7ff ffa8 	bl	8004320 <chSysUnlock.lto_priv.9>
}
 80043d0:	bf00      	nop
 80043d2:	b005      	add	sp, #20
 80043d4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080043e0 <chEvtUnregister>:
 * @param[in] esp       pointer to the  @p event_source_t structure
 * @param[in] elp       pointer to the @p event_listener_t structure
 *
 * @api
 */
void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
 80043e0:	b500      	push	{lr}
 80043e2:	b085      	sub	sp, #20
 80043e4:	9001      	str	r0, [sp, #4]
 80043e6:	9100      	str	r1, [sp, #0]
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 80043e8:	9b01      	ldr	r3, [sp, #4]
 80043ea:	9303      	str	r3, [sp, #12]
  /*lint -restore*/
  chSysLock();
 80043ec:	f7ff ff88 	bl	8004300 <chSysLock.lto_priv.9>
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->next != (event_listener_t *)esp) {
 80043f0:	e00c      	b.n	800440c <chEvtUnregister+0x2c>
  /*lint -restore*/
    if (p->next == elp) {
 80043f2:	9b03      	ldr	r3, [sp, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	9a00      	ldr	r2, [sp, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d104      	bne.n	8004406 <chEvtUnregister+0x26>
      p->next = elp->next;
 80043fc:	9b00      	ldr	r3, [sp, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	9b03      	ldr	r3, [sp, #12]
 8004402:	601a      	str	r2, [r3, #0]
      break;
 8004404:	e007      	b.n	8004416 <chEvtUnregister+0x36>
    }
    p = p->next;
 8004406:	9b03      	ldr	r3, [sp, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	9303      	str	r3, [sp, #12]
  while (p->next != (event_listener_t *)esp) {
 800440c:	9b03      	ldr	r3, [sp, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	9a01      	ldr	r2, [sp, #4]
 8004412:	429a      	cmp	r2, r3
 8004414:	d1ed      	bne.n	80043f2 <chEvtUnregister+0x12>
  }
  chSysUnlock();
 8004416:	f7ff ff83 	bl	8004320 <chSysUnlock.lto_priv.9>
}
 800441a:	bf00      	nop
 800441c:	b005      	add	sp, #20
 800441e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004422:	bf00      	nop
	...

08004430 <chEvtGetAndClearEventsI>:
 * @param[in] events    the events to be cleared
 * @return              The mask of pending events that were cleared.
 *
 * @iclass
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
 8004430:	b500      	push	{lr}
 8004432:	b085      	sub	sp, #20
 8004434:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8004436:	f7ff ff83 	bl	8004340 <chThdGetSelfX.lto_priv.4>
 800443a:	9003      	str	r0, [sp, #12]
  eventmask_t m;

  chDbgCheckClassI();

  m = currtp->epending & events;
 800443c:	9b03      	ldr	r3, [sp, #12]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	9a01      	ldr	r2, [sp, #4]
 8004442:	4013      	ands	r3, r2
 8004444:	9302      	str	r3, [sp, #8]
  currtp->epending &= ~events;
 8004446:	9b03      	ldr	r3, [sp, #12]
 8004448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444a:	9b01      	ldr	r3, [sp, #4]
 800444c:	43db      	mvns	r3, r3
 800444e:	401a      	ands	r2, r3
 8004450:	9b03      	ldr	r3, [sp, #12]
 8004452:	639a      	str	r2, [r3, #56]	; 0x38

  return m;
 8004454:	9b02      	ldr	r3, [sp, #8]
}
 8004456:	4618      	mov	r0, r3
 8004458:	b005      	add	sp, #20
 800445a:	f85d fb04 	ldr.w	pc, [sp], #4
 800445e:	bf00      	nop

08004460 <chEvtGetAndClearEvents>:
 * @param[in] events    the events to be cleared
 * @return              The mask of pending events that were cleared.
 *
 * @api
 */
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
 8004460:	b500      	push	{lr}
 8004462:	b085      	sub	sp, #20
 8004464:	9001      	str	r0, [sp, #4]
  eventmask_t m;

  chSysLock();
 8004466:	f7ff ff4b 	bl	8004300 <chSysLock.lto_priv.9>
  m = chEvtGetAndClearEventsI(events);
 800446a:	9801      	ldr	r0, [sp, #4]
 800446c:	f7ff ffe0 	bl	8004430 <chEvtGetAndClearEventsI>
 8004470:	9003      	str	r0, [sp, #12]
  chSysUnlock();
 8004472:	f7ff ff55 	bl	8004320 <chSysUnlock.lto_priv.9>

  return m;
 8004476:	9b03      	ldr	r3, [sp, #12]
}
 8004478:	4618      	mov	r0, r3
 800447a:	b005      	add	sp, #20
 800447c:	f85d fb04 	ldr.w	pc, [sp], #4

08004480 <chEvtAddEvents>:
 * @param[in] events    the events to be added
 * @return              The mask of currently pending events.
 *
 * @api
 */
eventmask_t chEvtAddEvents(eventmask_t events) {
 8004480:	b500      	push	{lr}
 8004482:	b085      	sub	sp, #20
 8004484:	9001      	str	r0, [sp, #4]
  eventmask_t newevt;

  chSysLock();
 8004486:	f7ff ff3b 	bl	8004300 <chSysLock.lto_priv.9>
  newevt = chEvtAddEventsI(events);
 800448a:	9801      	ldr	r0, [sp, #4]
 800448c:	f7ff ff60 	bl	8004350 <chEvtAddEventsI>
 8004490:	9003      	str	r0, [sp, #12]
  chSysUnlock();
 8004492:	f7ff ff45 	bl	8004320 <chSysUnlock.lto_priv.9>

  return newevt;
 8004496:	9b03      	ldr	r3, [sp, #12]
}
 8004498:	4618      	mov	r0, r3
 800449a:	b005      	add	sp, #20
 800449c:	f85d fb04 	ldr.w	pc, [sp], #4

080044a0 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 80044a0:	b500      	push	{lr}
 80044a2:	b083      	sub	sp, #12
 80044a4:	9001      	str	r0, [sp, #4]
 80044a6:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 80044a8:	9b01      	ldr	r3, [sp, #4]
 80044aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ac:	9b00      	ldr	r3, [sp, #0]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	9b01      	ldr	r3, [sp, #4]
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80044b4:	9b01      	ldr	r3, [sp, #4]
 80044b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044ba:	2b0a      	cmp	r3, #10
 80044bc:	d106      	bne.n	80044cc <chEvtSignalI+0x2c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80044be:	9b01      	ldr	r3, [sp, #4]
 80044c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c2:	9b01      	ldr	r3, [sp, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	4013      	ands	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10d      	bne.n	80044e8 <chEvtSignalI+0x48>
      ((tp->state == CH_STATE_WTANDEVT) &&
 80044cc:	9b01      	ldr	r3, [sp, #4]
 80044ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80044d2:	2b0b      	cmp	r3, #11
 80044d4:	d10e      	bne.n	80044f4 <chEvtSignalI+0x54>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80044d6:	9b01      	ldr	r3, [sp, #4]
 80044d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044da:	9b01      	ldr	r3, [sp, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	401a      	ands	r2, r3
 80044e0:	9b01      	ldr	r3, [sp, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      ((tp->state == CH_STATE_WTANDEVT) &&
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d105      	bne.n	80044f4 <chEvtSignalI+0x54>
    tp->u.rdymsg = MSG_OK;
 80044e8:	9b01      	ldr	r3, [sp, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	629a      	str	r2, [r3, #40]	; 0x28
    (void) chSchReadyI(tp);
 80044ee:	9801      	ldr	r0, [sp, #4]
 80044f0:	f7fe fa76 	bl	80029e0 <chSchReadyI>
  }
}
 80044f4:	bf00      	nop
 80044f6:	b003      	add	sp, #12
 80044f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80044fc:	0000      	movs	r0, r0
	...

08004500 <chEvtSignal>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @api
 */
void chEvtSignal(thread_t *tp, eventmask_t events) {
 8004500:	b500      	push	{lr}
 8004502:	b083      	sub	sp, #12
 8004504:	9001      	str	r0, [sp, #4]
 8004506:	9100      	str	r1, [sp, #0]

  chDbgCheck(tp != NULL);

  chSysLock();
 8004508:	f7ff fefa 	bl	8004300 <chSysLock.lto_priv.9>
  chEvtSignalI(tp, events);
 800450c:	9900      	ldr	r1, [sp, #0]
 800450e:	9801      	ldr	r0, [sp, #4]
 8004510:	f7ff ffc6 	bl	80044a0 <chEvtSignalI>
  chSchRescheduleS();
 8004514:	f7fe fb2c 	bl	8002b70 <chSchRescheduleS>
  chSysUnlock();
 8004518:	f7ff ff02 	bl	8004320 <chSysUnlock.lto_priv.9>
}
 800451c:	bf00      	nop
 800451e:	b003      	add	sp, #12
 8004520:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004530 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8004530:	b500      	push	{lr}
 8004532:	b085      	sub	sp, #20
 8004534:	9001      	str	r0, [sp, #4]
 8004536:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8004538:	9b01      	ldr	r3, [sp, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	9303      	str	r3, [sp, #12]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800453e:	e019      	b.n	8004574 <chEvtBroadcastFlagsI+0x44>
  /*lint -restore*/
    elp->flags |= flags;
 8004540:	9b03      	ldr	r3, [sp, #12]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	9b00      	ldr	r3, [sp, #0]
 8004546:	431a      	orrs	r2, r3
 8004548:	9b03      	ldr	r3, [sp, #12]
 800454a:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800454c:	9b00      	ldr	r3, [sp, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <chEvtBroadcastFlagsI+0x2e>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8004552:	9b03      	ldr	r3, [sp, #12]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	9b00      	ldr	r3, [sp, #0]
 8004558:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
 800455a:	2b00      	cmp	r3, #0
 800455c:	d007      	beq.n	800456e <chEvtBroadcastFlagsI+0x3e>
      chEvtSignalI(elp->listener, elp->events);
 800455e:	9b03      	ldr	r3, [sp, #12]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	9b03      	ldr	r3, [sp, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f7ff ff99 	bl	80044a0 <chEvtSignalI>
    }
    elp = elp->next;
 800456e:	9b03      	ldr	r3, [sp, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	9303      	str	r3, [sp, #12]
  while (elp != (event_listener_t *)esp) {
 8004574:	9a03      	ldr	r2, [sp, #12]
 8004576:	9b01      	ldr	r3, [sp, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	d1e1      	bne.n	8004540 <chEvtBroadcastFlagsI+0x10>
  }
}
 800457c:	bf00      	nop
 800457e:	bf00      	nop
 8004580:	b005      	add	sp, #20
 8004582:	f85d fb04 	ldr.w	pc, [sp], #4
 8004586:	bf00      	nop
	...

08004590 <chEvtBroadcastFlags>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {
 8004590:	b500      	push	{lr}
 8004592:	b083      	sub	sp, #12
 8004594:	9001      	str	r0, [sp, #4]
 8004596:	9100      	str	r1, [sp, #0]

  chSysLock();
 8004598:	f7ff feb2 	bl	8004300 <chSysLock.lto_priv.9>
  chEvtBroadcastFlagsI(esp, flags);
 800459c:	9900      	ldr	r1, [sp, #0]
 800459e:	9801      	ldr	r0, [sp, #4]
 80045a0:	f7ff ffc6 	bl	8004530 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 80045a4:	f7fe fae4 	bl	8002b70 <chSchRescheduleS>
  chSysUnlock();
 80045a8:	f7ff feba 	bl	8004320 <chSysUnlock.lto_priv.9>
}
 80045ac:	bf00      	nop
 80045ae:	b003      	add	sp, #12
 80045b0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080045c0 <chEvtDispatch>:
 * @param[in] handlers  an array of @p evhandler_t. The array must have size
 *                      equal to the number of bits in eventmask_t.
 *
 * @api
 */
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
 80045c0:	b500      	push	{lr}
 80045c2:	b085      	sub	sp, #20
 80045c4:	9001      	str	r0, [sp, #4]
 80045c6:	9100      	str	r1, [sp, #0]
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	9303      	str	r3, [sp, #12]
  while (events != (eventmask_t)0) {
 80045cc:	e019      	b.n	8004602 <chEvtDispatch+0x42>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 80045ce:	9b03      	ldr	r3, [sp, #12]
 80045d0:	9a00      	ldr	r2, [sp, #0]
 80045d2:	fa22 f303 	lsr.w	r3, r2, r3
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00e      	beq.n	80045fc <chEvtDispatch+0x3c>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 80045de:	9b03      	ldr	r3, [sp, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	9a00      	ldr	r2, [sp, #0]
 80045ea:	4013      	ands	r3, r2
 80045ec:	9300      	str	r3, [sp, #0]
      handlers[eid](eid);
 80045ee:	9b03      	ldr	r3, [sp, #12]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	9a01      	ldr	r2, [sp, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	9803      	ldr	r0, [sp, #12]
 80045fa:	4798      	blx	r3
    }
    eid++;
 80045fc:	9b03      	ldr	r3, [sp, #12]
 80045fe:	3301      	adds	r3, #1
 8004600:	9303      	str	r3, [sp, #12]
  while (events != (eventmask_t)0) {
 8004602:	9b00      	ldr	r3, [sp, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e2      	bne.n	80045ce <chEvtDispatch+0xe>
  }
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	b005      	add	sp, #20
 800460e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004612:	bf00      	nop
	...

08004620 <chEvtWaitOne>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8004620:	b500      	push	{lr}
 8004622:	b085      	sub	sp, #20
 8004624:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8004626:	f7ff fe8b 	bl	8004340 <chThdGetSelfX.lto_priv.4>
 800462a:	9002      	str	r0, [sp, #8]
  eventmask_t m;

  chSysLock();
 800462c:	f7ff fe68 	bl	8004300 <chSysLock.lto_priv.9>
  m = currtp->epending & events;
 8004630:	9b02      	ldr	r3, [sp, #8]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	9a01      	ldr	r2, [sp, #4]
 8004636:	4013      	ands	r3, r2
 8004638:	9303      	str	r3, [sp, #12]
  if (m == (eventmask_t)0) {
 800463a:	9b03      	ldr	r3, [sp, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <chEvtWaitOne+0x36>
    currtp->u.ewmask = events;
 8004640:	9b02      	ldr	r3, [sp, #8]
 8004642:	9a01      	ldr	r2, [sp, #4]
 8004644:	629a      	str	r2, [r3, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTOREVT);
 8004646:	200a      	movs	r0, #10
 8004648:	f7fe f9da 	bl	8002a00 <chSchGoSleepS>
    m = currtp->epending & events;
 800464c:	9b02      	ldr	r3, [sp, #8]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	9a01      	ldr	r2, [sp, #4]
 8004652:	4013      	ands	r3, r2
 8004654:	9303      	str	r3, [sp, #12]
  }
  m ^= m & (m - (eventmask_t)1);
 8004656:	9b03      	ldr	r3, [sp, #12]
 8004658:	425b      	negs	r3, r3
 800465a:	9a03      	ldr	r2, [sp, #12]
 800465c:	4013      	ands	r3, r2
 800465e:	9303      	str	r3, [sp, #12]
  currtp->epending &= ~m;
 8004660:	9b02      	ldr	r3, [sp, #8]
 8004662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004664:	9b03      	ldr	r3, [sp, #12]
 8004666:	43db      	mvns	r3, r3
 8004668:	401a      	ands	r2, r3
 800466a:	9b02      	ldr	r3, [sp, #8]
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
  chSysUnlock();
 800466e:	f7ff fe57 	bl	8004320 <chSysUnlock.lto_priv.9>

  return m;
 8004672:	9b03      	ldr	r3, [sp, #12]
}
 8004674:	4618      	mov	r0, r3
 8004676:	b005      	add	sp, #20
 8004678:	f85d fb04 	ldr.w	pc, [sp], #4
 800467c:	0000      	movs	r0, r0
	...

08004680 <chEvtWaitAny>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8004680:	b500      	push	{lr}
 8004682:	b085      	sub	sp, #20
 8004684:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8004686:	f7ff fe5b 	bl	8004340 <chThdGetSelfX.lto_priv.4>
 800468a:	9002      	str	r0, [sp, #8]
  eventmask_t m;

  chSysLock();
 800468c:	f7ff fe38 	bl	8004300 <chSysLock.lto_priv.9>
  m = currtp->epending & events;
 8004690:	9b02      	ldr	r3, [sp, #8]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	9a01      	ldr	r2, [sp, #4]
 8004696:	4013      	ands	r3, r2
 8004698:	9303      	str	r3, [sp, #12]
  if (m == (eventmask_t)0) {
 800469a:	9b03      	ldr	r3, [sp, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <chEvtWaitAny+0x36>
    currtp->u.ewmask = events;
 80046a0:	9b02      	ldr	r3, [sp, #8]
 80046a2:	9a01      	ldr	r2, [sp, #4]
 80046a4:	629a      	str	r2, [r3, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTOREVT);
 80046a6:	200a      	movs	r0, #10
 80046a8:	f7fe f9aa 	bl	8002a00 <chSchGoSleepS>
    m = currtp->epending & events;
 80046ac:	9b02      	ldr	r3, [sp, #8]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	9a01      	ldr	r2, [sp, #4]
 80046b2:	4013      	ands	r3, r2
 80046b4:	9303      	str	r3, [sp, #12]
  }
  currtp->epending &= ~m;
 80046b6:	9b02      	ldr	r3, [sp, #8]
 80046b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ba:	9b03      	ldr	r3, [sp, #12]
 80046bc:	43db      	mvns	r3, r3
 80046be:	401a      	ands	r2, r3
 80046c0:	9b02      	ldr	r3, [sp, #8]
 80046c2:	639a      	str	r2, [r3, #56]	; 0x38
  chSysUnlock();
 80046c4:	f7ff fe2c 	bl	8004320 <chSysUnlock.lto_priv.9>

  return m;
 80046c8:	9b03      	ldr	r3, [sp, #12]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	b005      	add	sp, #20
 80046ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80046d2:	bf00      	nop
	...

080046e0 <chEvtWaitAll>:
 *                      for, @p ALL_EVENTS requires all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
 80046e0:	b500      	push	{lr}
 80046e2:	b085      	sub	sp, #20
 80046e4:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 80046e6:	f7ff fe2b 	bl	8004340 <chThdGetSelfX.lto_priv.4>
 80046ea:	9003      	str	r0, [sp, #12]

  chSysLock();
 80046ec:	f7ff fe08 	bl	8004300 <chSysLock.lto_priv.9>
  if ((currtp->epending & events) != events) {
 80046f0:	9b03      	ldr	r3, [sp, #12]
 80046f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f4:	9b01      	ldr	r3, [sp, #4]
 80046f6:	4013      	ands	r3, r2
 80046f8:	9a01      	ldr	r2, [sp, #4]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d005      	beq.n	800470a <chEvtWaitAll+0x2a>
    currtp->u.ewmask = events;
 80046fe:	9b03      	ldr	r3, [sp, #12]
 8004700:	9a01      	ldr	r2, [sp, #4]
 8004702:	629a      	str	r2, [r3, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8004704:	200b      	movs	r0, #11
 8004706:	f7fe f97b 	bl	8002a00 <chSchGoSleepS>
  }
  currtp->epending &= ~events;
 800470a:	9b03      	ldr	r3, [sp, #12]
 800470c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800470e:	9b01      	ldr	r3, [sp, #4]
 8004710:	43db      	mvns	r3, r3
 8004712:	401a      	ands	r2, r3
 8004714:	9b03      	ldr	r3, [sp, #12]
 8004716:	639a      	str	r2, [r3, #56]	; 0x38
  chSysUnlock();
 8004718:	f7ff fe02 	bl	8004320 <chSysUnlock.lto_priv.9>

  return events;
 800471c:	9b01      	ldr	r3, [sp, #4]
}
 800471e:	4618      	mov	r0, r3
 8004720:	b005      	add	sp, #20
 8004722:	f85d fb04 	ldr.w	pc, [sp], #4
 8004726:	bf00      	nop
	...

08004730 <chEvtWaitOneTimeout>:
 * @return              The mask of the lowest event id served and cleared.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
 8004730:	b500      	push	{lr}
 8004732:	b085      	sub	sp, #20
 8004734:	9001      	str	r0, [sp, #4]
 8004736:	9100      	str	r1, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
 8004738:	f7ff fe02 	bl	8004340 <chThdGetSelfX.lto_priv.4>
 800473c:	9002      	str	r0, [sp, #8]
  eventmask_t m;

  chSysLock();
 800473e:	f7ff fddf 	bl	8004300 <chSysLock.lto_priv.9>
  m = currtp->epending & events;
 8004742:	9b02      	ldr	r3, [sp, #8]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	9a01      	ldr	r2, [sp, #4]
 8004748:	4013      	ands	r3, r2
 800474a:	9303      	str	r3, [sp, #12]
  if (m == (eventmask_t)0) {
 800474c:	9b03      	ldr	r3, [sp, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d119      	bne.n	8004786 <chEvtWaitOneTimeout+0x56>
    if (TIME_IMMEDIATE == timeout) {
 8004752:	9b00      	ldr	r3, [sp, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d103      	bne.n	8004760 <chEvtWaitOneTimeout+0x30>
      chSysUnlock();
 8004758:	f7ff fde2 	bl	8004320 <chSysUnlock.lto_priv.9>
      return (eventmask_t)0;
 800475c:	2300      	movs	r3, #0
 800475e:	e021      	b.n	80047a4 <chEvtWaitOneTimeout+0x74>
    }
    currtp->u.ewmask = events;
 8004760:	9b02      	ldr	r3, [sp, #8]
 8004762:	9a01      	ldr	r2, [sp, #4]
 8004764:	629a      	str	r2, [r3, #40]	; 0x28
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8004766:	9900      	ldr	r1, [sp, #0]
 8004768:	200a      	movs	r0, #10
 800476a:	f7fe f981 	bl	8002a70 <chSchGoSleepTimeoutS>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	da03      	bge.n	800477c <chEvtWaitOneTimeout+0x4c>
      chSysUnlock();
 8004774:	f7ff fdd4 	bl	8004320 <chSysUnlock.lto_priv.9>
      return (eventmask_t)0;
 8004778:	2300      	movs	r3, #0
 800477a:	e013      	b.n	80047a4 <chEvtWaitOneTimeout+0x74>
    }
    m = currtp->epending & events;
 800477c:	9b02      	ldr	r3, [sp, #8]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	9a01      	ldr	r2, [sp, #4]
 8004782:	4013      	ands	r3, r2
 8004784:	9303      	str	r3, [sp, #12]
  }
  m ^= m & (m - (eventmask_t)1);
 8004786:	9b03      	ldr	r3, [sp, #12]
 8004788:	425b      	negs	r3, r3
 800478a:	9a03      	ldr	r2, [sp, #12]
 800478c:	4013      	ands	r3, r2
 800478e:	9303      	str	r3, [sp, #12]
  currtp->epending &= ~m;
 8004790:	9b02      	ldr	r3, [sp, #8]
 8004792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004794:	9b03      	ldr	r3, [sp, #12]
 8004796:	43db      	mvns	r3, r3
 8004798:	401a      	ands	r2, r3
 800479a:	9b02      	ldr	r3, [sp, #8]
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
  chSysUnlock();
 800479e:	f7ff fdbf 	bl	8004320 <chSysUnlock.lto_priv.9>

  return m;
 80047a2:	9b03      	ldr	r3, [sp, #12]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	b005      	add	sp, #20
 80047a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80047ac:	0000      	movs	r0, r0
	...

080047b0 <chEvtWaitAnyTimeout>:
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
 80047b0:	b500      	push	{lr}
 80047b2:	b085      	sub	sp, #20
 80047b4:	9001      	str	r0, [sp, #4]
 80047b6:	9100      	str	r1, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
 80047b8:	f7ff fdc2 	bl	8004340 <chThdGetSelfX.lto_priv.4>
 80047bc:	9002      	str	r0, [sp, #8]
  eventmask_t m;

  chSysLock();
 80047be:	f7ff fd9f 	bl	8004300 <chSysLock.lto_priv.9>
  m = currtp->epending & events;
 80047c2:	9b02      	ldr	r3, [sp, #8]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	9a01      	ldr	r2, [sp, #4]
 80047c8:	4013      	ands	r3, r2
 80047ca:	9303      	str	r3, [sp, #12]
  if (m == (eventmask_t)0) {
 80047cc:	9b03      	ldr	r3, [sp, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d119      	bne.n	8004806 <chEvtWaitAnyTimeout+0x56>
    if (TIME_IMMEDIATE == timeout) {
 80047d2:	9b00      	ldr	r3, [sp, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d103      	bne.n	80047e0 <chEvtWaitAnyTimeout+0x30>
      chSysUnlock();
 80047d8:	f7ff fda2 	bl	8004320 <chSysUnlock.lto_priv.9>
      return (eventmask_t)0;
 80047dc:	2300      	movs	r3, #0
 80047de:	e01c      	b.n	800481a <chEvtWaitAnyTimeout+0x6a>
    }
    currtp->u.ewmask = events;
 80047e0:	9b02      	ldr	r3, [sp, #8]
 80047e2:	9a01      	ldr	r2, [sp, #4]
 80047e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80047e6:	9900      	ldr	r1, [sp, #0]
 80047e8:	200a      	movs	r0, #10
 80047ea:	f7fe f941 	bl	8002a70 <chSchGoSleepTimeoutS>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	da03      	bge.n	80047fc <chEvtWaitAnyTimeout+0x4c>
      chSysUnlock();
 80047f4:	f7ff fd94 	bl	8004320 <chSysUnlock.lto_priv.9>
      return (eventmask_t)0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e00e      	b.n	800481a <chEvtWaitAnyTimeout+0x6a>
    }
    m = currtp->epending & events;
 80047fc:	9b02      	ldr	r3, [sp, #8]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	9a01      	ldr	r2, [sp, #4]
 8004802:	4013      	ands	r3, r2
 8004804:	9303      	str	r3, [sp, #12]
  }
  currtp->epending &= ~m;
 8004806:	9b02      	ldr	r3, [sp, #8]
 8004808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800480a:	9b03      	ldr	r3, [sp, #12]
 800480c:	43db      	mvns	r3, r3
 800480e:	401a      	ands	r2, r3
 8004810:	9b02      	ldr	r3, [sp, #8]
 8004812:	639a      	str	r2, [r3, #56]	; 0x38
  chSysUnlock();
 8004814:	f7ff fd84 	bl	8004320 <chSysUnlock.lto_priv.9>

  return m;
 8004818:	9b03      	ldr	r3, [sp, #12]
}
 800481a:	4618      	mov	r0, r3
 800481c:	b005      	add	sp, #20
 800481e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004822:	bf00      	nop
	...

08004830 <chEvtWaitAllTimeout>:
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
 8004830:	b500      	push	{lr}
 8004832:	b085      	sub	sp, #20
 8004834:	9001      	str	r0, [sp, #4]
 8004836:	9100      	str	r1, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
 8004838:	f7ff fd82 	bl	8004340 <chThdGetSelfX.lto_priv.4>
 800483c:	9003      	str	r0, [sp, #12]

  chSysLock();
 800483e:	f7ff fd5f 	bl	8004300 <chSysLock.lto_priv.9>
  if ((currtp->epending & events) != events) {
 8004842:	9b03      	ldr	r3, [sp, #12]
 8004844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004846:	9b01      	ldr	r3, [sp, #4]
 8004848:	4013      	ands	r3, r2
 800484a:	9a01      	ldr	r2, [sp, #4]
 800484c:	429a      	cmp	r2, r3
 800484e:	d014      	beq.n	800487a <chEvtWaitAllTimeout+0x4a>
    if (TIME_IMMEDIATE == timeout) {
 8004850:	9b00      	ldr	r3, [sp, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d103      	bne.n	800485e <chEvtWaitAllTimeout+0x2e>
      chSysUnlock();
 8004856:	f7ff fd63 	bl	8004320 <chSysUnlock.lto_priv.9>
      return (eventmask_t)0;
 800485a:	2300      	movs	r3, #0
 800485c:	e017      	b.n	800488e <chEvtWaitAllTimeout+0x5e>
    }
    currtp->u.ewmask = events;
 800485e:	9b03      	ldr	r3, [sp, #12]
 8004860:	9a01      	ldr	r2, [sp, #4]
 8004862:	629a      	str	r2, [r3, #40]	; 0x28
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8004864:	9900      	ldr	r1, [sp, #0]
 8004866:	200b      	movs	r0, #11
 8004868:	f7fe f902 	bl	8002a70 <chSchGoSleepTimeoutS>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	da03      	bge.n	800487a <chEvtWaitAllTimeout+0x4a>
      chSysUnlock();
 8004872:	f7ff fd55 	bl	8004320 <chSysUnlock.lto_priv.9>
      return (eventmask_t)0;
 8004876:	2300      	movs	r3, #0
 8004878:	e009      	b.n	800488e <chEvtWaitAllTimeout+0x5e>
    }
  }
  currtp->epending &= ~events;
 800487a:	9b03      	ldr	r3, [sp, #12]
 800487c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800487e:	9b01      	ldr	r3, [sp, #4]
 8004880:	43db      	mvns	r3, r3
 8004882:	401a      	ands	r2, r3
 8004884:	9b03      	ldr	r3, [sp, #12]
 8004886:	639a      	str	r2, [r3, #56]	; 0x38
  chSysUnlock();
 8004888:	f7ff fd4a 	bl	8004320 <chSysUnlock.lto_priv.9>

  return events;
 800488c:	9b01      	ldr	r3, [sp, #4]
}
 800488e:	4618      	mov	r0, r3
 8004890:	b005      	add	sp, #20
 8004892:	f85d fb04 	ldr.w	pc, [sp], #4
 8004896:	bf00      	nop
	...

080048a0 <ch_queue_insert.lto_priv.2>:
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 80048a0:	b082      	sub	sp, #8
 80048a2:	9001      	str	r0, [sp, #4]
 80048a4:	9100      	str	r1, [sp, #0]
  p->next       = qp;
 80048a6:	9b00      	ldr	r3, [sp, #0]
 80048a8:	9a01      	ldr	r2, [sp, #4]
 80048aa:	601a      	str	r2, [r3, #0]
  p->prev       = qp->prev;
 80048ac:	9b01      	ldr	r3, [sp, #4]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	9b00      	ldr	r3, [sp, #0]
 80048b2:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 80048b4:	9b00      	ldr	r3, [sp, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	9a00      	ldr	r2, [sp, #0]
 80048ba:	601a      	str	r2, [r3, #0]
  qp->prev      = p;
 80048bc:	9b01      	ldr	r3, [sp, #4]
 80048be:	9a00      	ldr	r2, [sp, #0]
 80048c0:	605a      	str	r2, [r3, #4]
}
 80048c2:	bf00      	nop
 80048c4:	b002      	add	sp, #8
 80048c6:	4770      	bx	lr
	...

080048d0 <ch_queue_fifo_remove.lto_priv.4>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 80048d0:	b084      	sub	sp, #16
 80048d2:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
 80048d4:	9b01      	ldr	r3, [sp, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
 80048da:	9b03      	ldr	r3, [sp, #12]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	9b01      	ldr	r3, [sp, #4]
 80048e0:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 80048e2:	9b01      	ldr	r3, [sp, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	9a01      	ldr	r2, [sp, #4]
 80048e8:	605a      	str	r2, [r3, #4]
  return p;
 80048ea:	9b03      	ldr	r3, [sp, #12]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	b004      	add	sp, #16
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
	...

08004900 <chSysLock.lto_priv.10>:
static inline void chSysLock(void) {
 8004900:	b082      	sub	sp, #8
 8004902:	2330      	movs	r3, #48	; 0x30
 8004904:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004906:	9b01      	ldr	r3, [sp, #4]
 8004908:	f383 8811 	msr	BASEPRI, r3
}
 800490c:	bf00      	nop
}
 800490e:	bf00      	nop
}
 8004910:	bf00      	nop
 8004912:	b002      	add	sp, #8
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
	...

08004920 <chSysUnlock.lto_priv.10>:
static inline void chSysUnlock(void) {
 8004920:	b082      	sub	sp, #8
 8004922:	2300      	movs	r3, #0
 8004924:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004926:	9b01      	ldr	r3, [sp, #4]
 8004928:	f383 8811 	msr	BASEPRI, r3
}
 800492c:	bf00      	nop
}
 800492e:	bf00      	nop
}
 8004930:	bf00      	nop
 8004932:	b002      	add	sp, #8
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
	...

08004940 <chThdGetSelfX.lto_priv.5>:
  return __sch_get_currthread();
 8004940:	4b01      	ldr	r3, [pc, #4]	; (8004948 <chThdGetSelfX.lto_priv.5+0x8>)
 8004942:	68db      	ldr	r3, [r3, #12]
}
 8004944:	4618      	mov	r0, r3
 8004946:	4770      	bx	lr
 8004948:	20000a48 	.word	0x20000a48
 800494c:	00000000 	.word	0x00000000

08004950 <chMsgIsPendingI>:
 * @param[in] tp        pointer to the thread
 * @return              The pending messages status.
 *
 * @iclass
 */
static inline bool chMsgIsPendingI(thread_t *tp) {
 8004950:	b082      	sub	sp, #8
 8004952:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != &tp->msgqueue);
 8004954:	9b01      	ldr	r3, [sp, #4]
 8004956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004958:	9b01      	ldr	r3, [sp, #4]
 800495a:	3330      	adds	r3, #48	; 0x30
 800495c:	429a      	cmp	r2, r3
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
}
 8004966:	4618      	mov	r0, r3
 8004968:	b002      	add	sp, #8
 800496a:	4770      	bx	lr
 800496c:	0000      	movs	r0, r0
	...

08004970 <chMsgReleaseS>:
 * @param[in] tp        pointer to the thread
 * @param[in] msg       message to be returned to the sender
 *
 * @sclass
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {
 8004970:	b500      	push	{lr}
 8004972:	b083      	sub	sp, #12
 8004974:	9001      	str	r0, [sp, #4]
 8004976:	9100      	str	r1, [sp, #0]

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8004978:	9900      	ldr	r1, [sp, #0]
 800497a:	9801      	ldr	r0, [sp, #4]
 800497c:	f7fe f8b0 	bl	8002ae0 <chSchWakeupS>
}
 8004980:	bf00      	nop
 8004982:	b003      	add	sp, #12
 8004984:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004990 <chMsgSend>:
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8004990:	b500      	push	{lr}
 8004992:	b085      	sub	sp, #20
 8004994:	9001      	str	r0, [sp, #4]
 8004996:	9100      	str	r1, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
 8004998:	f7ff ffd2 	bl	8004940 <chThdGetSelfX.lto_priv.5>
 800499c:	9003      	str	r0, [sp, #12]

  chDbgCheck(tp != NULL);

  chSysLock();
 800499e:	f7ff ffaf 	bl	8004900 <chSysLock.lto_priv.10>
  currtp->u.sentmsg = msg;
 80049a2:	9b03      	ldr	r3, [sp, #12]
 80049a4:	9a00      	ldr	r2, [sp, #0]
 80049a6:	629a      	str	r2, [r3, #40]	; 0x28
  __ch_msg_insert(&tp->msgqueue, currtp);
 80049a8:	9b01      	ldr	r3, [sp, #4]
 80049aa:	3330      	adds	r3, #48	; 0x30
 80049ac:	9a03      	ldr	r2, [sp, #12]
 80049ae:	4611      	mov	r1, r2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff ff75 	bl	80048a0 <ch_queue_insert.lto_priv.2>
  if (tp->state == CH_STATE_WTMSG) {
 80049b6:	9b01      	ldr	r3, [sp, #4]
 80049b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049bc:	2b0e      	cmp	r3, #14
 80049be:	d102      	bne.n	80049c6 <chMsgSend+0x36>
    (void) chSchReadyI(tp);
 80049c0:	9801      	ldr	r0, [sp, #4]
 80049c2:	f7fe f80d 	bl	80029e0 <chSchReadyI>
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 80049c6:	200c      	movs	r0, #12
 80049c8:	f7fe f81a 	bl	8002a00 <chSchGoSleepS>
  msg = currtp->u.rdymsg;
 80049cc:	9b03      	ldr	r3, [sp, #12]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	9300      	str	r3, [sp, #0]
  chSysUnlock();
 80049d2:	f7ff ffa5 	bl	8004920 <chSysUnlock.lto_priv.10>

  return msg;
 80049d6:	9b00      	ldr	r3, [sp, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	b005      	add	sp, #20
 80049dc:	f85d fb04 	ldr.w	pc, [sp], #4

080049e0 <chMsgWaitS>:
 *
 * @return              A pointer to the thread carrying the message.
 *
 * @sclass
 */
thread_t *chMsgWaitS(void) {
 80049e0:	b500      	push	{lr}
 80049e2:	b083      	sub	sp, #12
  thread_t *currtp = chThdGetSelfX();
 80049e4:	f7ff ffac 	bl	8004940 <chThdGetSelfX.lto_priv.5>
 80049e8:	9001      	str	r0, [sp, #4]
  thread_t *tp;

  chDbgCheckClassS();

  if (!chMsgIsPendingI(currtp)) {
 80049ea:	9801      	ldr	r0, [sp, #4]
 80049ec:	f7ff ffb0 	bl	8004950 <chMsgIsPendingI>
 80049f0:	4603      	mov	r3, r0
 80049f2:	f083 0301 	eor.w	r3, r3, #1
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <chMsgWaitS+0x22>
    chSchGoSleepS(CH_STATE_WTMSG);
 80049fc:	200e      	movs	r0, #14
 80049fe:	f7fd ffff 	bl	8002a00 <chSchGoSleepS>
  }
  tp = threadref(ch_queue_fifo_remove(&currtp->msgqueue));
 8004a02:	9b01      	ldr	r3, [sp, #4]
 8004a04:	3330      	adds	r3, #48	; 0x30
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff ff62 	bl	80048d0 <ch_queue_fifo_remove.lto_priv.4>
 8004a0c:	9000      	str	r0, [sp, #0]
  tp->state = CH_STATE_SNDMSG;
 8004a0e:	9b00      	ldr	r3, [sp, #0]
 8004a10:	220d      	movs	r2, #13
 8004a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return tp;
 8004a16:	9b00      	ldr	r3, [sp, #0]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	b003      	add	sp, #12
 8004a1c:	f85d fb04 	ldr.w	pc, [sp], #4

08004a20 <chMsgRelease>:
 * @param[in] tp        pointer to the thread
 * @param[in] msg       message to be returned to the sender
 *
 * @api
 */
void chMsgRelease(thread_t *tp, msg_t msg) {
 8004a20:	b500      	push	{lr}
 8004a22:	b083      	sub	sp, #12
 8004a24:	9001      	str	r0, [sp, #4]
 8004a26:	9100      	str	r1, [sp, #0]

  chSysLock();
 8004a28:	f7ff ff6a 	bl	8004900 <chSysLock.lto_priv.10>
  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");
  chMsgReleaseS(tp, msg);
 8004a2c:	9900      	ldr	r1, [sp, #0]
 8004a2e:	9801      	ldr	r0, [sp, #4]
 8004a30:	f7ff ff9e 	bl	8004970 <chMsgReleaseS>
  chSysUnlock();
 8004a34:	f7ff ff74 	bl	8004920 <chSysUnlock.lto_priv.10>
}
 8004a38:	bf00      	nop
 8004a3a:	b003      	add	sp, #12
 8004a3c:	f85d fb04 	ldr.w	pc, [sp], #4

08004a40 <chSysLock.lto_priv.11>:
static inline void chSysLock(void) {
 8004a40:	b082      	sub	sp, #8
 8004a42:	2330      	movs	r3, #48	; 0x30
 8004a44:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004a46:	9b01      	ldr	r3, [sp, #4]
 8004a48:	f383 8811 	msr	BASEPRI, r3
}
 8004a4c:	bf00      	nop
}
 8004a4e:	bf00      	nop
}
 8004a50:	bf00      	nop
 8004a52:	b002      	add	sp, #8
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
	...

08004a60 <chSysUnlock.lto_priv.11>:
static inline void chSysUnlock(void) {
 8004a60:	b082      	sub	sp, #8
 8004a62:	2300      	movs	r3, #0
 8004a64:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004a66:	9b01      	ldr	r3, [sp, #4]
 8004a68:	f383 8811 	msr	BASEPRI, r3
}
 8004a6c:	bf00      	nop
}
 8004a6e:	bf00      	nop
}
 8004a70:	bf00      	nop
 8004a72:	b002      	add	sp, #8
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
	...

08004a80 <chThdCreateFromHeap>:
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              const char *name, tprio_t prio,
                              tfunc_t pf, void *arg) {
 8004a80:	b500      	push	{lr}
 8004a82:	b08f      	sub	sp, #60	; 0x3c
 8004a84:	9003      	str	r0, [sp, #12]
 8004a86:	9102      	str	r1, [sp, #8]
 8004a88:	9201      	str	r2, [sp, #4]
 8004a8a:	9300      	str	r3, [sp, #0]
  thread_t *tp;
  void *wbase, *wend;

  wbase = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8004a8c:	2208      	movs	r2, #8
 8004a8e:	9902      	ldr	r1, [sp, #8]
 8004a90:	9803      	ldr	r0, [sp, #12]
 8004a92:	f000 fbfd 	bl	8005290 <chHeapAllocAligned>
 8004a96:	900d      	str	r0, [sp, #52]	; 0x34
  if (wbase == NULL) {
 8004a98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <chThdCreateFromHeap+0x22>
    return NULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e021      	b.n	8004ae6 <chThdCreateFromHeap+0x66>
  }
  wend = (void *)((uint8_t *)wbase + size);
 8004aa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004aa4:	9b02      	ldr	r3, [sp, #8]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	930c      	str	r3, [sp, #48]	; 0x30

  thread_descriptor_t td = THD_DESCRIPTOR(name, wbase, wend, prio, pf, arg);
 8004aaa:	9b01      	ldr	r3, [sp, #4]
 8004aac:	9305      	str	r3, [sp, #20]
 8004aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ab0:	9306      	str	r3, [sp, #24]
 8004ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ab4:	9307      	str	r3, [sp, #28]
 8004ab6:	9b00      	ldr	r3, [sp, #0]
 8004ab8:	9308      	str	r3, [sp, #32]
 8004aba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004abc:	9309      	str	r3, [sp, #36]	; 0x24
 8004abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ac0:	930a      	str	r3, [sp, #40]	; 0x28

#if CH_DBG_FILL_THREADS == TRUE
  __thd_stackfill((uint8_t *)wbase, (uint8_t *)wend);
#endif

  chSysLock();
 8004ac2:	f7ff ffbd 	bl	8004a40 <chSysLock.lto_priv.11>
  tp = chThdCreateSuspendedI(&td);
 8004ac6:	ab05      	add	r3, sp, #20
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe fb19 	bl	8003100 <chThdCreateSuspendedI>
 8004ace:	900b      	str	r0, [sp, #44]	; 0x2c
  tp->flags = CH_FLAG_MODE_HEAP;
 8004ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  chSchWakeupS(tp, MSG_OK);
 8004ad8:	2100      	movs	r1, #0
 8004ada:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004adc:	f7fe f800 	bl	8002ae0 <chSchWakeupS>
  chSysUnlock();
 8004ae0:	f7ff ffbe 	bl	8004a60 <chSysUnlock.lto_priv.11>

  return tp;
 8004ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	b00f      	add	sp, #60	; 0x3c
 8004aea:	f85d fb04 	ldr.w	pc, [sp], #4
 8004aee:	bf00      	nop

08004af0 <chThdCreateFromMemoryPool>:
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
                                    tprio_t prio, tfunc_t pf, void *arg) {
 8004af0:	b500      	push	{lr}
 8004af2:	b08f      	sub	sp, #60	; 0x3c
 8004af4:	9003      	str	r0, [sp, #12]
 8004af6:	9102      	str	r1, [sp, #8]
 8004af8:	9201      	str	r2, [sp, #4]
 8004afa:	9300      	str	r3, [sp, #0]
  thread_t *tp;
  void *wbase, *wend;

  chDbgCheck(mp != NULL);

  wbase = chPoolAlloc(mp);
 8004afc:	9803      	ldr	r0, [sp, #12]
 8004afe:	f000 fe0f 	bl	8005720 <chPoolAlloc>
 8004b02:	900d      	str	r0, [sp, #52]	; 0x34
  if (wbase == NULL) {
 8004b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <chThdCreateFromMemoryPool+0x1e>
    return NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e025      	b.n	8004b5a <chThdCreateFromMemoryPool+0x6a>
  }
  wend = (void *)((uint8_t *)wbase + mp->object_size);
 8004b0e:	9b03      	ldr	r3, [sp, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b14:	4413      	add	r3, r2
 8004b16:	930c      	str	r3, [sp, #48]	; 0x30

  thread_descriptor_t td = THD_DESCRIPTOR(name, wbase, wend, prio, pf, arg);
 8004b18:	9b02      	ldr	r3, [sp, #8]
 8004b1a:	9305      	str	r3, [sp, #20]
 8004b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b1e:	9306      	str	r3, [sp, #24]
 8004b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b22:	9307      	str	r3, [sp, #28]
 8004b24:	9b01      	ldr	r3, [sp, #4]
 8004b26:	9308      	str	r3, [sp, #32]
 8004b28:	9b00      	ldr	r3, [sp, #0]
 8004b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b2e:	930a      	str	r3, [sp, #40]	; 0x28

#if CH_DBG_FILL_THREADS == TRUE
  __thd_stackfill((uint8_t *)wbase, (uint8_t *)wend);
#endif

  chSysLock();
 8004b30:	f7ff ff86 	bl	8004a40 <chSysLock.lto_priv.11>
  tp = chThdCreateSuspendedI(&td);
 8004b34:	ab05      	add	r3, sp, #20
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe fae2 	bl	8003100 <chThdCreateSuspendedI>
 8004b3c:	900b      	str	r0, [sp, #44]	; 0x2c
  tp->flags = CH_FLAG_MODE_MPOOL;
 8004b3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  tp->mpool = mp;
 8004b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b48:	9a03      	ldr	r2, [sp, #12]
 8004b4a:	645a      	str	r2, [r3, #68]	; 0x44
  chSchWakeupS(tp, MSG_OK);
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004b50:	f7fd ffc6 	bl	8002ae0 <chSchWakeupS>
  chSysUnlock();
 8004b54:	f7ff ff84 	bl	8004a60 <chSysUnlock.lto_priv.11>

  return tp;
 8004b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	b00f      	add	sp, #60	; 0x3c
 8004b5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b62:	bf00      	nop
	...

08004b70 <ch_queue_init.lto_priv.7>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8004b70:	b082      	sub	sp, #8
 8004b72:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8004b74:	9b01      	ldr	r3, [sp, #4]
 8004b76:	9a01      	ldr	r2, [sp, #4]
 8004b78:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 8004b7a:	9b01      	ldr	r3, [sp, #4]
 8004b7c:	9a01      	ldr	r2, [sp, #4]
 8004b7e:	605a      	str	r2, [r3, #4]
}
 8004b80:	bf00      	nop
 8004b82:	b002      	add	sp, #8
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
	...

08004b90 <chSysLock.lto_priv.12>:
static inline void chSysLock(void) {
 8004b90:	b082      	sub	sp, #8
 8004b92:	2330      	movs	r3, #48	; 0x30
 8004b94:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004b96:	9b01      	ldr	r3, [sp, #4]
 8004b98:	f383 8811 	msr	BASEPRI, r3
}
 8004b9c:	bf00      	nop
}
 8004b9e:	bf00      	nop
}
 8004ba0:	bf00      	nop
 8004ba2:	b002      	add	sp, #8
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
	...

08004bb0 <chSysUnlock.lto_priv.12>:
static inline void chSysUnlock(void) {
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004bb6:	9b01      	ldr	r3, [sp, #4]
 8004bb8:	f383 8811 	msr	BASEPRI, r3
}
 8004bbc:	bf00      	nop
}
 8004bbe:	bf00      	nop
}
 8004bc0:	bf00      	nop
 8004bc2:	b002      	add	sp, #8
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
	...

08004bd0 <chThdQueueObjectInit.lto_priv.2>:
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 8004bd0:	b500      	push	{lr}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	9001      	str	r0, [sp, #4]
  ch_queue_init(&tqp->queue);
 8004bd6:	9b01      	ldr	r3, [sp, #4]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff ffc9 	bl	8004b70 <ch_queue_init.lto_priv.7>
}
 8004bde:	bf00      	nop
 8004be0:	b003      	add	sp, #12
 8004be2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004be6:	bf00      	nop
	...

08004bf0 <chMBGetSizeI.lto_priv.0>:
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 * @return              The size of the mailbox.
 *
 * @iclass
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	9001      	str	r0, [sp, #4]

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
 8004bf4:	9b01      	ldr	r3, [sp, #4]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	9b01      	ldr	r3, [sp, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	109b      	asrs	r3, r3, #2
  /*lint -restore*/
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	b002      	add	sp, #8
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
	...

08004c10 <chMBGetUsedCountI.lto_priv.0>:
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 * @return              The number of queued messages.
 *
 * @iclass
 */
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {
 8004c10:	b082      	sub	sp, #8
 8004c12:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return mbp->cnt;
 8004c14:	9b01      	ldr	r3, [sp, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	b002      	add	sp, #8
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop

08004c20 <chMBGetFreeCountI.lto_priv.0>:
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 * @return              The number of empty message slots.
 *
 * @iclass
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {
 8004c20:	b510      	push	{r4, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004c26:	9801      	ldr	r0, [sp, #4]
 8004c28:	f7ff ffe2 	bl	8004bf0 <chMBGetSizeI.lto_priv.0>
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	9801      	ldr	r0, [sp, #4]
 8004c30:	f7ff ffee 	bl	8004c10 <chMBGetUsedCountI.lto_priv.0>
 8004c34:	4603      	mov	r3, r0
 8004c36:	1ae3      	subs	r3, r4, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	b002      	add	sp, #8
 8004c3c:	bd10      	pop	{r4, pc}
 8004c3e:	bf00      	nop

08004c40 <chMBObjectInit>:
 * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
 * @param[in] n         number of elements in the buffer array
 *
 * @init
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {
 8004c40:	b500      	push	{lr}
 8004c42:	b085      	sub	sp, #20
 8004c44:	9003      	str	r0, [sp, #12]
 8004c46:	9102      	str	r1, [sp, #8]
 8004c48:	9201      	str	r2, [sp, #4]

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8004c4a:	9b03      	ldr	r3, [sp, #12]
 8004c4c:	9a02      	ldr	r2, [sp, #8]
 8004c4e:	601a      	str	r2, [r3, #0]
  mbp->rdptr  = buf;
 8004c50:	9b03      	ldr	r3, [sp, #12]
 8004c52:	9a02      	ldr	r2, [sp, #8]
 8004c54:	60da      	str	r2, [r3, #12]
  mbp->wrptr  = buf;
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	9a02      	ldr	r2, [sp, #8]
 8004c5a:	609a      	str	r2, [r3, #8]
  mbp->top    = &buf[n];
 8004c5c:	9b01      	ldr	r3, [sp, #4]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	9a02      	ldr	r2, [sp, #8]
 8004c62:	441a      	add	r2, r3
 8004c64:	9b03      	ldr	r3, [sp, #12]
 8004c66:	605a      	str	r2, [r3, #4]
  mbp->cnt    = (size_t)0;
 8004c68:	9b03      	ldr	r3, [sp, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	611a      	str	r2, [r3, #16]
  mbp->reset  = false;
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	751a      	strb	r2, [r3, #20]
  chThdQueueObjectInit(&mbp->qw);
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	3318      	adds	r3, #24
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff ffa9 	bl	8004bd0 <chThdQueueObjectInit.lto_priv.2>
  chThdQueueObjectInit(&mbp->qr);
 8004c7e:	9b03      	ldr	r3, [sp, #12]
 8004c80:	3320      	adds	r3, #32
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff ffa4 	bl	8004bd0 <chThdQueueObjectInit.lto_priv.2>
}
 8004c88:	bf00      	nop
 8004c8a:	b005      	add	sp, #20
 8004c8c:	f85d fb04 	ldr.w	pc, [sp], #4

08004c90 <chMBReset>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBReset(mailbox_t *mbp) {
 8004c90:	b500      	push	{lr}
 8004c92:	b083      	sub	sp, #12
 8004c94:	9001      	str	r0, [sp, #4]

  chSysLock();
 8004c96:	f7ff ff7b 	bl	8004b90 <chSysLock.lto_priv.12>
  chMBResetI(mbp);
 8004c9a:	9801      	ldr	r0, [sp, #4]
 8004c9c:	f000 f808 	bl	8004cb0 <chMBResetI>
  chSchRescheduleS();
 8004ca0:	f7fd ff66 	bl	8002b70 <chSchRescheduleS>
  chSysUnlock();
 8004ca4:	f7ff ff84 	bl	8004bb0 <chSysUnlock.lto_priv.12>
}
 8004ca8:	bf00      	nop
 8004caa:	b003      	add	sp, #12
 8004cac:	f85d fb04 	ldr.w	pc, [sp], #4

08004cb0 <chMBResetI>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBResetI(mailbox_t *mbp) {
 8004cb0:	b500      	push	{lr}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->wrptr = mbp->buffer;
 8004cb6:	9b01      	ldr	r3, [sp, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	9b01      	ldr	r3, [sp, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
  mbp->rdptr = mbp->buffer;
 8004cbe:	9b01      	ldr	r3, [sp, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	9b01      	ldr	r3, [sp, #4]
 8004cc4:	60da      	str	r2, [r3, #12]
  mbp->cnt   = (size_t)0;
 8004cc6:	9b01      	ldr	r3, [sp, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	611a      	str	r2, [r3, #16]
  mbp->reset = true;
 8004ccc:	9b01      	ldr	r3, [sp, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	751a      	strb	r2, [r3, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8004cd2:	9b01      	ldr	r3, [sp, #4]
 8004cd4:	3318      	adds	r3, #24
 8004cd6:	f06f 0101 	mvn.w	r1, #1
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fe fc88 	bl	80035f0 <chThdDequeueAllI>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8004ce0:	9b01      	ldr	r3, [sp, #4]
 8004ce2:	3320      	adds	r3, #32
 8004ce4:	f06f 0101 	mvn.w	r1, #1
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fe fc81 	bl	80035f0 <chThdDequeueAllI>
}
 8004cee:	bf00      	nop
 8004cf0:	b003      	add	sp, #12
 8004cf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cf6:	bf00      	nop
	...

08004d00 <chMBPostTimeout>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8004d00:	b500      	push	{lr}
 8004d02:	b087      	sub	sp, #28
 8004d04:	9003      	str	r0, [sp, #12]
 8004d06:	9102      	str	r1, [sp, #8]
 8004d08:	9201      	str	r2, [sp, #4]
  msg_t rdymsg;

  chSysLock();
 8004d0a:	f7ff ff41 	bl	8004b90 <chSysLock.lto_priv.12>
  rdymsg = chMBPostTimeoutS(mbp, msg, timeout);
 8004d0e:	9a01      	ldr	r2, [sp, #4]
 8004d10:	9902      	ldr	r1, [sp, #8]
 8004d12:	9803      	ldr	r0, [sp, #12]
 8004d14:	f000 f80c 	bl	8004d30 <chMBPostTimeoutS>
 8004d18:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 8004d1a:	f7ff ff49 	bl	8004bb0 <chSysUnlock.lto_priv.12>

  return rdymsg;
 8004d1e:	9b05      	ldr	r3, [sp, #20]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	b007      	add	sp, #28
 8004d24:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004d30 <chMBPostTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8004d30:	b500      	push	{lr}
 8004d32:	b087      	sub	sp, #28
 8004d34:	9003      	str	r0, [sp, #12]
 8004d36:	9102      	str	r1, [sp, #8]
 8004d38:	9201      	str	r2, [sp, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 8004d3a:	9b03      	ldr	r3, [sp, #12]
 8004d3c:	7d1b      	ldrb	r3, [r3, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <chMBPostTimeoutS+0x18>
      return MSG_RESET;
 8004d42:	f06f 0301 	mvn.w	r3, #1
 8004d46:	e030      	b.n	8004daa <chMBPostTimeoutS+0x7a>
    }

    /* Is there a free message slot in queue? if so then post.*/
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8004d48:	9803      	ldr	r0, [sp, #12]
 8004d4a:	f7ff ff69 	bl	8004c20 <chMBGetFreeCountI.lto_priv.0>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01f      	beq.n	8004d94 <chMBPostTimeoutS+0x64>
      *mbp->wrptr++ = msg;
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	1d19      	adds	r1, r3, #4
 8004d5a:	9a03      	ldr	r2, [sp, #12]
 8004d5c:	6091      	str	r1, [r2, #8]
 8004d5e:	9a02      	ldr	r2, [sp, #8]
 8004d60:	601a      	str	r2, [r3, #0]
      if (mbp->wrptr >= mbp->top) {
 8004d62:	9b03      	ldr	r3, [sp, #12]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	9b03      	ldr	r3, [sp, #12]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d303      	bcc.n	8004d76 <chMBPostTimeoutS+0x46>
        mbp->wrptr = mbp->buffer;
 8004d6e:	9b03      	ldr	r3, [sp, #12]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	9b03      	ldr	r3, [sp, #12]
 8004d74:	609a      	str	r2, [r3, #8]
      }
      mbp->cnt++;
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	611a      	str	r2, [r3, #16]

      /* If there is a reader waiting then makes it ready.*/
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8004d80:	9b03      	ldr	r3, [sp, #12]
 8004d82:	3320      	adds	r3, #32
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fe fc1a 	bl	80035c0 <chThdDequeueNextI>
      chSchRescheduleS();
 8004d8c:	f7fd fef0 	bl	8002b70 <chSchRescheduleS>

      return MSG_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	e00a      	b.n	8004daa <chMBPostTimeoutS+0x7a>
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8004d94:	9b03      	ldr	r3, [sp, #12]
 8004d96:	3318      	adds	r3, #24
 8004d98:	9901      	ldr	r1, [sp, #4]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe fbf0 	bl	8003580 <chThdEnqueueTimeoutS>
 8004da0:	9005      	str	r0, [sp, #20]
  } while (rdymsg == MSG_OK);
 8004da2:	9b05      	ldr	r3, [sp, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0c8      	beq.n	8004d3a <chMBPostTimeoutS+0xa>

  return rdymsg;
 8004da8:	9b05      	ldr	r3, [sp, #20]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	b007      	add	sp, #28
 8004dae:	f85d fb04 	ldr.w	pc, [sp], #4
 8004db2:	bf00      	nop
	...

08004dc0 <chMBPostI>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8004dc0:	b500      	push	{lr}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	9001      	str	r0, [sp, #4]
 8004dc6:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8004dc8:	9b01      	ldr	r3, [sp, #4]
 8004dca:	7d1b      	ldrb	r3, [r3, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <chMBPostI+0x16>
    return MSG_RESET;
 8004dd0:	f06f 0301 	mvn.w	r3, #1
 8004dd4:	e025      	b.n	8004e22 <chMBPostI+0x62>
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8004dd6:	9801      	ldr	r0, [sp, #4]
 8004dd8:	f7ff ff22 	bl	8004c20 <chMBGetFreeCountI.lto_priv.0>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01d      	beq.n	8004e1e <chMBPostI+0x5e>
    *mbp->wrptr++ = msg;
 8004de2:	9b01      	ldr	r3, [sp, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	1d19      	adds	r1, r3, #4
 8004de8:	9a01      	ldr	r2, [sp, #4]
 8004dea:	6091      	str	r1, [r2, #8]
 8004dec:	9a00      	ldr	r2, [sp, #0]
 8004dee:	601a      	str	r2, [r3, #0]
    if (mbp->wrptr >= mbp->top) {
 8004df0:	9b01      	ldr	r3, [sp, #4]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	9b01      	ldr	r3, [sp, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d303      	bcc.n	8004e04 <chMBPostI+0x44>
      mbp->wrptr = mbp->buffer;
 8004dfc:	9b01      	ldr	r3, [sp, #4]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	9b01      	ldr	r3, [sp, #4]
 8004e02:	609a      	str	r2, [r3, #8]
    }
    mbp->cnt++;
 8004e04:	9b01      	ldr	r3, [sp, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	9b01      	ldr	r3, [sp, #4]
 8004e0c:	611a      	str	r2, [r3, #16]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8004e0e:	9b01      	ldr	r3, [sp, #4]
 8004e10:	3320      	adds	r3, #32
 8004e12:	2100      	movs	r1, #0
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fe fbd3 	bl	80035c0 <chThdDequeueNextI>

    return MSG_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e001      	b.n	8004e22 <chMBPostI+0x62>
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
 8004e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	b003      	add	sp, #12
 8004e26:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e2a:	bf00      	nop
 8004e2c:	0000      	movs	r0, r0
	...

08004e30 <chMBPostAheadTimeout>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8004e30:	b500      	push	{lr}
 8004e32:	b087      	sub	sp, #28
 8004e34:	9003      	str	r0, [sp, #12]
 8004e36:	9102      	str	r1, [sp, #8]
 8004e38:	9201      	str	r2, [sp, #4]
  msg_t rdymsg;

  chSysLock();
 8004e3a:	f7ff fea9 	bl	8004b90 <chSysLock.lto_priv.12>
  rdymsg = chMBPostAheadTimeoutS(mbp, msg, timeout);
 8004e3e:	9a01      	ldr	r2, [sp, #4]
 8004e40:	9902      	ldr	r1, [sp, #8]
 8004e42:	9803      	ldr	r0, [sp, #12]
 8004e44:	f000 f80c 	bl	8004e60 <chMBPostAheadTimeoutS>
 8004e48:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 8004e4a:	f7ff feb1 	bl	8004bb0 <chSysUnlock.lto_priv.12>

  return rdymsg;
 8004e4e:	9b05      	ldr	r3, [sp, #20]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	b007      	add	sp, #28
 8004e54:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004e60 <chMBPostAheadTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBPostAheadTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8004e60:	b500      	push	{lr}
 8004e62:	b087      	sub	sp, #28
 8004e64:	9003      	str	r0, [sp, #12]
 8004e66:	9102      	str	r1, [sp, #8]
 8004e68:	9201      	str	r2, [sp, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 8004e6a:	9b03      	ldr	r3, [sp, #12]
 8004e6c:	7d1b      	ldrb	r3, [r3, #20]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <chMBPostAheadTimeoutS+0x18>
      return MSG_RESET;
 8004e72:	f06f 0301 	mvn.w	r3, #1
 8004e76:	e033      	b.n	8004ee0 <chMBPostAheadTimeoutS+0x80>
    }

    /* Is there a free message slot in queue? if so then post.*/
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8004e78:	9803      	ldr	r0, [sp, #12]
 8004e7a:	f7ff fed1 	bl	8004c20 <chMBGetFreeCountI.lto_priv.0>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d022      	beq.n	8004eca <chMBPostAheadTimeoutS+0x6a>
      if (--mbp->rdptr < mbp->buffer) {
 8004e84:	9b03      	ldr	r3, [sp, #12]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	1f1a      	subs	r2, r3, #4
 8004e8a:	9b03      	ldr	r3, [sp, #12]
 8004e8c:	60da      	str	r2, [r3, #12]
 8004e8e:	9b03      	ldr	r3, [sp, #12]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	9b03      	ldr	r3, [sp, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d204      	bcs.n	8004ea4 <chMBPostAheadTimeoutS+0x44>
        mbp->rdptr = mbp->top - 1;
 8004e9a:	9b03      	ldr	r3, [sp, #12]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	1f1a      	subs	r2, r3, #4
 8004ea0:	9b03      	ldr	r3, [sp, #12]
 8004ea2:	60da      	str	r2, [r3, #12]
      }
      *mbp->rdptr = msg;
 8004ea4:	9b03      	ldr	r3, [sp, #12]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	9a02      	ldr	r2, [sp, #8]
 8004eaa:	601a      	str	r2, [r3, #0]
      mbp->cnt++;
 8004eac:	9b03      	ldr	r3, [sp, #12]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	9b03      	ldr	r3, [sp, #12]
 8004eb4:	611a      	str	r2, [r3, #16]

      /* If there is a reader waiting then makes it ready.*/
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8004eb6:	9b03      	ldr	r3, [sp, #12]
 8004eb8:	3320      	adds	r3, #32
 8004eba:	2100      	movs	r1, #0
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe fb7f 	bl	80035c0 <chThdDequeueNextI>
      chSchRescheduleS();
 8004ec2:	f7fd fe55 	bl	8002b70 <chSchRescheduleS>

      return MSG_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e00a      	b.n	8004ee0 <chMBPostAheadTimeoutS+0x80>
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8004eca:	9b03      	ldr	r3, [sp, #12]
 8004ecc:	3318      	adds	r3, #24
 8004ece:	9901      	ldr	r1, [sp, #4]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fe fb55 	bl	8003580 <chThdEnqueueTimeoutS>
 8004ed6:	9005      	str	r0, [sp, #20]
  } while (rdymsg == MSG_OK);
 8004ed8:	9b05      	ldr	r3, [sp, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0c5      	beq.n	8004e6a <chMBPostAheadTimeoutS+0xa>

  return rdymsg;
 8004ede:	9b05      	ldr	r3, [sp, #20]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	b007      	add	sp, #28
 8004ee4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004ef0 <chMBPostAheadI>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8004ef0:	b500      	push	{lr}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	9001      	str	r0, [sp, #4]
 8004ef6:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8004ef8:	9b01      	ldr	r3, [sp, #4]
 8004efa:	7d1b      	ldrb	r3, [r3, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <chMBPostAheadI+0x16>
    return MSG_RESET;
 8004f00:	f06f 0301 	mvn.w	r3, #1
 8004f04:	e028      	b.n	8004f58 <chMBPostAheadI+0x68>
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8004f06:	9801      	ldr	r0, [sp, #4]
 8004f08:	f7ff fe8a 	bl	8004c20 <chMBGetFreeCountI.lto_priv.0>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d020      	beq.n	8004f54 <chMBPostAheadI+0x64>
    if (--mbp->rdptr < mbp->buffer) {
 8004f12:	9b01      	ldr	r3, [sp, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	1f1a      	subs	r2, r3, #4
 8004f18:	9b01      	ldr	r3, [sp, #4]
 8004f1a:	60da      	str	r2, [r3, #12]
 8004f1c:	9b01      	ldr	r3, [sp, #4]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	9b01      	ldr	r3, [sp, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d204      	bcs.n	8004f32 <chMBPostAheadI+0x42>
      mbp->rdptr = mbp->top - 1;
 8004f28:	9b01      	ldr	r3, [sp, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	1f1a      	subs	r2, r3, #4
 8004f2e:	9b01      	ldr	r3, [sp, #4]
 8004f30:	60da      	str	r2, [r3, #12]
    }
    *mbp->rdptr = msg;
 8004f32:	9b01      	ldr	r3, [sp, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	9a00      	ldr	r2, [sp, #0]
 8004f38:	601a      	str	r2, [r3, #0]
    mbp->cnt++;
 8004f3a:	9b01      	ldr	r3, [sp, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	9b01      	ldr	r3, [sp, #4]
 8004f42:	611a      	str	r2, [r3, #16]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8004f44:	9b01      	ldr	r3, [sp, #4]
 8004f46:	3320      	adds	r3, #32
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe fb38 	bl	80035c0 <chThdDequeueNextI>

    return MSG_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	e001      	b.n	8004f58 <chMBPostAheadI+0x68>
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
 8004f54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	b003      	add	sp, #12
 8004f5c:	f85d fb04 	ldr.w	pc, [sp], #4

08004f60 <chMBFetchTimeout>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8004f60:	b500      	push	{lr}
 8004f62:	b087      	sub	sp, #28
 8004f64:	9003      	str	r0, [sp, #12]
 8004f66:	9102      	str	r1, [sp, #8]
 8004f68:	9201      	str	r2, [sp, #4]
  msg_t rdymsg;

  chSysLock();
 8004f6a:	f7ff fe11 	bl	8004b90 <chSysLock.lto_priv.12>
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 8004f6e:	9a01      	ldr	r2, [sp, #4]
 8004f70:	9902      	ldr	r1, [sp, #8]
 8004f72:	9803      	ldr	r0, [sp, #12]
 8004f74:	f000 f80c 	bl	8004f90 <chMBFetchTimeoutS>
 8004f78:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 8004f7a:	f7ff fe19 	bl	8004bb0 <chSysUnlock.lto_priv.12>

  return rdymsg;
 8004f7e:	9b05      	ldr	r3, [sp, #20]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	b007      	add	sp, #28
 8004f84:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004f90 <chMBFetchTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8004f90:	b500      	push	{lr}
 8004f92:	b087      	sub	sp, #28
 8004f94:	9003      	str	r0, [sp, #12]
 8004f96:	9102      	str	r1, [sp, #8]
 8004f98:	9201      	str	r2, [sp, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 8004f9a:	9b03      	ldr	r3, [sp, #12]
 8004f9c:	7d1b      	ldrb	r3, [r3, #20]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <chMBFetchTimeoutS+0x18>
      return MSG_RESET;
 8004fa2:	f06f 0301 	mvn.w	r3, #1
 8004fa6:	e031      	b.n	800500c <chMBFetchTimeoutS+0x7c>
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8004fa8:	9803      	ldr	r0, [sp, #12]
 8004faa:	f7ff fe31 	bl	8004c10 <chMBGetUsedCountI.lto_priv.0>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d020      	beq.n	8004ff6 <chMBFetchTimeoutS+0x66>
      *msgp = *mbp->rdptr++;
 8004fb4:	9b03      	ldr	r3, [sp, #12]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	1d19      	adds	r1, r3, #4
 8004fba:	9a03      	ldr	r2, [sp, #12]
 8004fbc:	60d1      	str	r1, [r2, #12]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	9b02      	ldr	r3, [sp, #8]
 8004fc2:	601a      	str	r2, [r3, #0]
      if (mbp->rdptr >= mbp->top) {
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	9b03      	ldr	r3, [sp, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d303      	bcc.n	8004fd8 <chMBFetchTimeoutS+0x48>
        mbp->rdptr = mbp->buffer;
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	9b03      	ldr	r3, [sp, #12]
 8004fd6:	60da      	str	r2, [r3, #12]
      }
      mbp->cnt--;
 8004fd8:	9b03      	ldr	r3, [sp, #12]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	1e5a      	subs	r2, r3, #1
 8004fde:	9b03      	ldr	r3, [sp, #12]
 8004fe0:	611a      	str	r2, [r3, #16]

      /* If there is a writer waiting then makes it ready.*/
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8004fe2:	9b03      	ldr	r3, [sp, #12]
 8004fe4:	3318      	adds	r3, #24
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fe fae9 	bl	80035c0 <chThdDequeueNextI>
      chSchRescheduleS();
 8004fee:	f7fd fdbf 	bl	8002b70 <chSchRescheduleS>

      return MSG_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e00a      	b.n	800500c <chMBFetchTimeoutS+0x7c>
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8004ff6:	9b03      	ldr	r3, [sp, #12]
 8004ff8:	3320      	adds	r3, #32
 8004ffa:	9901      	ldr	r1, [sp, #4]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fe fabf 	bl	8003580 <chThdEnqueueTimeoutS>
 8005002:	9005      	str	r0, [sp, #20]
  } while (rdymsg == MSG_OK);
 8005004:	9b05      	ldr	r3, [sp, #20]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0c7      	beq.n	8004f9a <chMBFetchTimeoutS+0xa>

  return rdymsg;
 800500a:	9b05      	ldr	r3, [sp, #20]
}
 800500c:	4618      	mov	r0, r3
 800500e:	b007      	add	sp, #28
 8005010:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005020 <chMBFetchI>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8005020:	b500      	push	{lr}
 8005022:	b083      	sub	sp, #12
 8005024:	9001      	str	r0, [sp, #4]
 8005026:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8005028:	9b01      	ldr	r3, [sp, #4]
 800502a:	7d1b      	ldrb	r3, [r3, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <chMBFetchI+0x16>
    return MSG_RESET;
 8005030:	f06f 0301 	mvn.w	r3, #1
 8005034:	e026      	b.n	8005084 <chMBFetchI+0x64>
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8005036:	9801      	ldr	r0, [sp, #4]
 8005038:	f7ff fdea 	bl	8004c10 <chMBGetUsedCountI.lto_priv.0>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d01e      	beq.n	8005080 <chMBFetchI+0x60>
    *msgp = *mbp->rdptr++;
 8005042:	9b01      	ldr	r3, [sp, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	1d19      	adds	r1, r3, #4
 8005048:	9a01      	ldr	r2, [sp, #4]
 800504a:	60d1      	str	r1, [r2, #12]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	9b00      	ldr	r3, [sp, #0]
 8005050:	601a      	str	r2, [r3, #0]
    if (mbp->rdptr >= mbp->top) {
 8005052:	9b01      	ldr	r3, [sp, #4]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	9b01      	ldr	r3, [sp, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	429a      	cmp	r2, r3
 800505c:	d303      	bcc.n	8005066 <chMBFetchI+0x46>
      mbp->rdptr = mbp->buffer;
 800505e:	9b01      	ldr	r3, [sp, #4]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	9b01      	ldr	r3, [sp, #4]
 8005064:	60da      	str	r2, [r3, #12]
    }
    mbp->cnt--;
 8005066:	9b01      	ldr	r3, [sp, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	1e5a      	subs	r2, r3, #1
 800506c:	9b01      	ldr	r3, [sp, #4]
 800506e:	611a      	str	r2, [r3, #16]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8005070:	9b01      	ldr	r3, [sp, #4]
 8005072:	3318      	adds	r3, #24
 8005074:	2100      	movs	r1, #0
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe faa2 	bl	80035c0 <chThdDequeueNextI>

    return MSG_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	e001      	b.n	8005084 <chMBFetchI+0x64>
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
 8005080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005084:	4618      	mov	r0, r3
 8005086:	b003      	add	sp, #12
 8005088:	f85d fb04 	ldr.w	pc, [sp], #4
 800508c:	0000      	movs	r0, r0
	...

08005090 <chSysLock.lto_priv.13>:
static inline void chSysLock(void) {
 8005090:	b082      	sub	sp, #8
 8005092:	2330      	movs	r3, #48	; 0x30
 8005094:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005096:	9b01      	ldr	r3, [sp, #4]
 8005098:	f383 8811 	msr	BASEPRI, r3
}
 800509c:	bf00      	nop
}
 800509e:	bf00      	nop
}
 80050a0:	bf00      	nop
 80050a2:	b002      	add	sp, #8
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
	...

080050b0 <chSysUnlock.lto_priv.13>:
static inline void chSysUnlock(void) {
 80050b0:	b082      	sub	sp, #8
 80050b2:	2300      	movs	r3, #0
 80050b4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80050b6:	9b01      	ldr	r3, [sp, #4]
 80050b8:	f383 8811 	msr	BASEPRI, r3
}
 80050bc:	bf00      	nop
}
 80050be:	bf00      	nop
}
 80050c0:	bf00      	nop
 80050c2:	b002      	add	sp, #8
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
	...

080050d0 <__core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.basemem = __heap_base__;
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <__core_init+0x10>)
 80050d2:	4a04      	ldr	r2, [pc, #16]	; (80050e4 <__core_init+0x14>)
 80050d4:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 80050d6:	4b02      	ldr	r3, [pc, #8]	; (80050e0 <__core_init+0x10>)
 80050d8:	4a03      	ldr	r2, [pc, #12]	; (80050e8 <__core_init+0x18>)
 80050da:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.basemem = &static_heap[0];
  ch_memcore.topmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 80050dc:	bf00      	nop
 80050de:	4770      	bx	lr
 80050e0:	20000c00 	.word	0x20000c00
 80050e4:	20019120 	.word	0x20019120
 80050e8:	20020000 	.word	0x20020000
 80050ec:	00000000 	.word	0x00000000

080050f0 <chCoreAllocFromBaseI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromBaseI(size_t size, unsigned align, size_t offset) {
 80050f0:	b086      	sub	sp, #24
 80050f2:	9003      	str	r0, [sp, #12]
 80050f4:	9102      	str	r1, [sp, #8]
 80050f6:	9201      	str	r2, [sp, #4]
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.basemem + offset, align);
 80050f8:	4b11      	ldr	r3, [pc, #68]	; (8005140 <chCoreAllocFromBaseI+0x50>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	9b01      	ldr	r3, [sp, #4]
 80050fe:	4413      	add	r3, r2
 8005100:	461a      	mov	r2, r3
 8005102:	9b02      	ldr	r3, [sp, #8]
 8005104:	4413      	add	r3, r2
 8005106:	1e5a      	subs	r2, r3, #1
 8005108:	9b02      	ldr	r3, [sp, #8]
 800510a:	425b      	negs	r3, r3
 800510c:	4013      	ands	r3, r2
 800510e:	9305      	str	r3, [sp, #20]
  next = p + size;
 8005110:	9a05      	ldr	r2, [sp, #20]
 8005112:	9b03      	ldr	r3, [sp, #12]
 8005114:	4413      	add	r3, r2
 8005116:	9304      	str	r3, [sp, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.topmem) || (next < ch_memcore.basemem)) {
 8005118:	4b09      	ldr	r3, [pc, #36]	; (8005140 <chCoreAllocFromBaseI+0x50>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	9a04      	ldr	r2, [sp, #16]
 800511e:	429a      	cmp	r2, r3
 8005120:	d804      	bhi.n	800512c <chCoreAllocFromBaseI+0x3c>
 8005122:	4b07      	ldr	r3, [pc, #28]	; (8005140 <chCoreAllocFromBaseI+0x50>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	9a04      	ldr	r2, [sp, #16]
 8005128:	429a      	cmp	r2, r3
 800512a:	d201      	bcs.n	8005130 <chCoreAllocFromBaseI+0x40>
    return NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	e003      	b.n	8005138 <chCoreAllocFromBaseI+0x48>
  }

  ch_memcore.basemem = next;
 8005130:	4a03      	ldr	r2, [pc, #12]	; (8005140 <chCoreAllocFromBaseI+0x50>)
 8005132:	9b04      	ldr	r3, [sp, #16]
 8005134:	6013      	str	r3, [r2, #0]

  return p;
 8005136:	9b05      	ldr	r3, [sp, #20]
}
 8005138:	4618      	mov	r0, r3
 800513a:	b006      	add	sp, #24
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000c00 	.word	0x20000c00
	...

08005150 <chCoreAllocFromTopI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 8005150:	b086      	sub	sp, #24
 8005152:	9003      	str	r0, [sp, #12]
 8005154:	9102      	str	r1, [sp, #8]
 8005156:	9201      	str	r2, [sp, #4]
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8005158:	4b10      	ldr	r3, [pc, #64]	; (800519c <chCoreAllocFromTopI+0x4c>)
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	9b03      	ldr	r3, [sp, #12]
 800515e:	425b      	negs	r3, r3
 8005160:	4413      	add	r3, r2
 8005162:	461a      	mov	r2, r3
 8005164:	9b02      	ldr	r3, [sp, #8]
 8005166:	425b      	negs	r3, r3
 8005168:	4013      	ands	r3, r2
 800516a:	9305      	str	r3, [sp, #20]
  prev = p - offset;
 800516c:	9b01      	ldr	r3, [sp, #4]
 800516e:	425b      	negs	r3, r3
 8005170:	9a05      	ldr	r2, [sp, #20]
 8005172:	4413      	add	r3, r2
 8005174:	9304      	str	r3, [sp, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <chCoreAllocFromTopI+0x4c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	9a04      	ldr	r2, [sp, #16]
 800517c:	429a      	cmp	r2, r3
 800517e:	d304      	bcc.n	800518a <chCoreAllocFromTopI+0x3a>
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <chCoreAllocFromTopI+0x4c>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	9a04      	ldr	r2, [sp, #16]
 8005186:	429a      	cmp	r2, r3
 8005188:	d901      	bls.n	800518e <chCoreAllocFromTopI+0x3e>
    return NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	e003      	b.n	8005196 <chCoreAllocFromTopI+0x46>
  }

  ch_memcore.topmem = prev;
 800518e:	4a03      	ldr	r2, [pc, #12]	; (800519c <chCoreAllocFromTopI+0x4c>)
 8005190:	9b04      	ldr	r3, [sp, #16]
 8005192:	6053      	str	r3, [r2, #4]

  return p;
 8005194:	9b05      	ldr	r3, [sp, #20]
}
 8005196:	4618      	mov	r0, r3
 8005198:	b006      	add	sp, #24
 800519a:	4770      	bx	lr
 800519c:	20000c00 	.word	0x20000c00

080051a0 <chCoreAllocFromBase>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromBase(size_t size, unsigned align, size_t offset) {
 80051a0:	b500      	push	{lr}
 80051a2:	b087      	sub	sp, #28
 80051a4:	9003      	str	r0, [sp, #12]
 80051a6:	9102      	str	r1, [sp, #8]
 80051a8:	9201      	str	r2, [sp, #4]
  void *p;

  chSysLock();
 80051aa:	f7ff ff71 	bl	8005090 <chSysLock.lto_priv.13>
  p = chCoreAllocFromBaseI(size, align, offset);
 80051ae:	9a01      	ldr	r2, [sp, #4]
 80051b0:	9902      	ldr	r1, [sp, #8]
 80051b2:	9803      	ldr	r0, [sp, #12]
 80051b4:	f7ff ff9c 	bl	80050f0 <chCoreAllocFromBaseI>
 80051b8:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 80051ba:	f7ff ff79 	bl	80050b0 <chSysUnlock.lto_priv.13>

  return p;
 80051be:	9b05      	ldr	r3, [sp, #20]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	b007      	add	sp, #28
 80051c4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080051d0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80051d0:	b500      	push	{lr}
 80051d2:	b087      	sub	sp, #28
 80051d4:	9003      	str	r0, [sp, #12]
 80051d6:	9102      	str	r1, [sp, #8]
 80051d8:	9201      	str	r2, [sp, #4]
  void *p;

  chSysLock();
 80051da:	f7ff ff59 	bl	8005090 <chSysLock.lto_priv.13>
  p = chCoreAllocFromTopI(size, align, offset);
 80051de:	9a01      	ldr	r2, [sp, #4]
 80051e0:	9902      	ldr	r1, [sp, #8]
 80051e2:	9803      	ldr	r0, [sp, #12]
 80051e4:	f7ff ffb4 	bl	8005150 <chCoreAllocFromTopI>
 80051e8:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 80051ea:	f7ff ff61 	bl	80050b0 <chSysUnlock.lto_priv.13>

  return p;
 80051ee:	9b05      	ldr	r3, [sp, #20]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	b007      	add	sp, #28
 80051f4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005200 <__heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void __heap_init(void) {
 8005200:	b508      	push	{r3, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8005202:	4b07      	ldr	r3, [pc, #28]	; (8005220 <__heap_init+0x20>)
 8005204:	4a07      	ldr	r2, [pc, #28]	; (8005224 <__heap_init+0x24>)
 8005206:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <__heap_init+0x20>)
 800520a:	2200      	movs	r2, #0
 800520c:	605a      	str	r2, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 800520e:	4b04      	ldr	r3, [pc, #16]	; (8005220 <__heap_init+0x20>)
 8005210:	2200      	movs	r2, #0
 8005212:	609a      	str	r2, [r3, #8]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 8005214:	4804      	ldr	r0, [pc, #16]	; (8005228 <__heap_init+0x28>)
 8005216:	f7fe fd3b 	bl	8003c90 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
 800521a:	bf00      	nop
 800521c:	bd08      	pop	{r3, pc}
 800521e:	bf00      	nop
 8005220:	20000c08 	.word	0x20000c08
 8005224:	080051d1 	.word	0x080051d1
 8005228:	20000c14 	.word	0x20000c14
 800522c:	00000000 	.word	0x00000000

08005230 <chHeapObjectInit>:
 * @param[in] buf       heap buffer base
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
 8005230:	b500      	push	{lr}
 8005232:	b087      	sub	sp, #28
 8005234:	9003      	str	r0, [sp, #12]
 8005236:	9102      	str	r1, [sp, #8]
 8005238:	9201      	str	r2, [sp, #4]
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 800523a:	9b02      	ldr	r3, [sp, #8]
 800523c:	3307      	adds	r3, #7
 800523e:	f023 0307 	bic.w	r3, r3, #7
 8005242:	9305      	str	r3, [sp, #20]
  chDbgCheck((heapp != NULL) && (size > 0U));

  /* Adjusting the size in case the initial block was not correctly
     aligned.*/
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 8005244:	9a05      	ldr	r2, [sp, #20]
 8005246:	9b02      	ldr	r3, [sp, #8]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	461a      	mov	r2, r3
 800524c:	9b01      	ldr	r3, [sp, #4]
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	9301      	str	r3, [sp, #4]
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 8005252:	9b03      	ldr	r3, [sp, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
  H_NEXT(&heapp->header) = hp;
 8005258:	9b03      	ldr	r3, [sp, #12]
 800525a:	9a05      	ldr	r2, [sp, #20]
 800525c:	605a      	str	r2, [r3, #4]
  H_PAGES(&heapp->header) = 0;
 800525e:	9b03      	ldr	r3, [sp, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	609a      	str	r2, [r3, #8]
  H_NEXT(hp) = NULL;
 8005264:	9b05      	ldr	r3, [sp, #20]
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800526a:	9b01      	ldr	r3, [sp, #4]
 800526c:	3b08      	subs	r3, #8
 800526e:	08da      	lsrs	r2, r3, #3
 8005270:	9b05      	ldr	r3, [sp, #20]
 8005272:	605a      	str	r2, [r3, #4]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&heapp->mtx);
 8005274:	9b03      	ldr	r3, [sp, #12]
 8005276:	330c      	adds	r3, #12
 8005278:	4618      	mov	r0, r3
 800527a:	f7fe fd09 	bl	8003c90 <chMtxObjectInit>
#else
  chSemObjectInit(&heapp->sem, (cnt_t)1);
#endif
}
 800527e:	bf00      	nop
 8005280:	b007      	add	sp, #28
 8005282:	f85d fb04 	ldr.w	pc, [sp], #4
 8005286:	bf00      	nop
	...

08005290 <chHeapAllocAligned>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8005290:	b500      	push	{lr}
 8005292:	b08d      	sub	sp, #52	; 0x34
 8005294:	9003      	str	r0, [sp, #12]
 8005296:	9102      	str	r1, [sp, #8]
 8005298:	9201      	str	r2, [sp, #4]
  size_t pages;

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
 800529a:	9b03      	ldr	r3, [sp, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <chHeapAllocAligned+0x14>
    heapp = &default_heap;
 80052a0:	4b62      	ldr	r3, [pc, #392]	; (800542c <chHeapAllocAligned+0x19c>)
 80052a2:	9303      	str	r3, [sp, #12]
  }

  /* Minimum alignment is constrained by the heap header structure size.*/
  if (align < CH_HEAP_ALIGNMENT) {
 80052a4:	9b01      	ldr	r3, [sp, #4]
 80052a6:	2b07      	cmp	r3, #7
 80052a8:	d801      	bhi.n	80052ae <chHeapAllocAligned+0x1e>
    align = CH_HEAP_ALIGNMENT;
 80052aa:	2308      	movs	r3, #8
 80052ac:	9301      	str	r3, [sp, #4]
  }

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80052ae:	9b02      	ldr	r3, [sp, #8]
 80052b0:	3307      	adds	r3, #7
 80052b2:	08db      	lsrs	r3, r3, #3
 80052b4:	9309      	str	r3, [sp, #36]	; 0x24

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 80052b6:	9b03      	ldr	r3, [sp, #12]
 80052b8:	330c      	adds	r3, #12
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fe fcf8 	bl	8003cb0 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
 80052c0:	9b03      	ldr	r3, [sp, #12]
 80052c2:	3304      	adds	r3, #4
 80052c4:	930b      	str	r3, [sp, #44]	; 0x2c
  while (H_NEXT(qp) != NULL) {
 80052c6:	e087      	b.n	80053d8 <chHeapAllocAligned+0x148>

    /* Next free block.*/
    hp = H_NEXT(qp);
 80052c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	930a      	str	r3, [sp, #40]	; 0x28

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80052ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052d0:	9b01      	ldr	r3, [sp, #4]
 80052d2:	4413      	add	r3, r2
 80052d4:	1dda      	adds	r2, r3, #7
 80052d6:	9b01      	ldr	r3, [sp, #4]
 80052d8:	425b      	negs	r3, r3
 80052da:	4013      	ands	r3, r2
 80052dc:	3b08      	subs	r3, #8
 80052de:	9308      	str	r3, [sp, #32]

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 80052e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	3301      	adds	r3, #1
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052ea:	4413      	add	r3, r2
 80052ec:	9a08      	ldr	r2, [sp, #32]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d270      	bcs.n	80053d4 <chHeapAllocAligned+0x144>
 80052f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	3301      	adds	r3, #1
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052fc:	441a      	add	r2, r3
 80052fe:	9b08      	ldr	r3, [sp, #32]
 8005300:	3308      	adds	r3, #8
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	10db      	asrs	r3, r3, #3
 8005306:	461a      	mov	r2, r3
 8005308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530a:	4293      	cmp	r3, r2
 800530c:	d862      	bhi.n	80053d4 <chHeapAllocAligned+0x144>
      /* The block is large enough to contain a correctly aligned area
         of sufficient size.*/

      if (ahp > hp) {
 800530e:	9a08      	ldr	r2, [sp, #32]
 8005310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005312:	429a      	cmp	r2, r3
 8005314:	d92c      	bls.n	8005370 <chHeapAllocAligned+0xe0>
        /* The block is not properly aligned, must split it.*/
        size_t bpages;

        bpages = NPAGES(H_LIMIT(hp), H_BLOCK(ahp));
 8005316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	3301      	adds	r3, #1
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005320:	441a      	add	r2, r3
 8005322:	9b08      	ldr	r3, [sp, #32]
 8005324:	3308      	adds	r3, #8
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	10db      	asrs	r3, r3, #3
 800532a:	9306      	str	r3, [sp, #24]
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 800532c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800532e:	3308      	adds	r3, #8
 8005330:	9a08      	ldr	r2, [sp, #32]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	10db      	asrs	r3, r3, #3
 8005336:	461a      	mov	r2, r3
 8005338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800533a:	605a      	str	r2, [r3, #4]
        if (bpages > pages) {
 800533c:	9a06      	ldr	r2, [sp, #24]
 800533e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005340:	429a      	cmp	r2, r3
 8005342:	d912      	bls.n	800536a <chHeapAllocAligned+0xda>
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          /* Creating the excess block.*/
          fp = H_BLOCK(ahp) + pages;
 8005344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005346:	3301      	adds	r3, #1
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	9a08      	ldr	r2, [sp, #32]
 800534c:	4413      	add	r3, r2
 800534e:	9305      	str	r3, [sp, #20]
          H_PAGES(fp) = (bpages - pages) - 1U;
 8005350:	9a06      	ldr	r2, [sp, #24]
 8005352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	1e5a      	subs	r2, r3, #1
 8005358:	9b05      	ldr	r3, [sp, #20]
 800535a:	605a      	str	r2, [r3, #4]

          /* Linking the excess block.*/
          H_NEXT(fp) = H_NEXT(hp);
 800535c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	9b05      	ldr	r3, [sp, #20]
 8005362:	601a      	str	r2, [r3, #0]
          H_NEXT(hp) = fp;
 8005364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005366:	9a05      	ldr	r2, [sp, #20]
 8005368:	601a      	str	r2, [r3, #0]
        }

        hp = ahp;
 800536a:	9b08      	ldr	r3, [sp, #32]
 800536c:	930a      	str	r3, [sp, #40]	; 0x28
 800536e:	e023      	b.n	80053b8 <chHeapAllocAligned+0x128>
      }
      else {
        /* The block is already properly aligned.*/

        if (H_PAGES(hp) == pages) {
 8005370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005376:	429a      	cmp	r2, r3
 8005378:	d104      	bne.n	8005384 <chHeapAllocAligned+0xf4>
          /* Exact size, getting the whole block.*/
          H_NEXT(qp) = H_NEXT(hp);
 800537a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e019      	b.n	80053b8 <chHeapAllocAligned+0x128>
        }
        else {
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
 8005384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005386:	3301      	adds	r3, #1
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800538c:	4413      	add	r3, r2
 800538e:	9307      	str	r3, [sp, #28]
          H_NEXT(fp) = H_NEXT(hp);
 8005390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	9b07      	ldr	r3, [sp, #28]
 8005396:	601a      	str	r2, [r3, #0]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8005398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	3301      	adds	r3, #1
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053a2:	441a      	add	r2, r3
 80053a4:	9b07      	ldr	r3, [sp, #28]
 80053a6:	3308      	adds	r3, #8
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	10db      	asrs	r3, r3, #3
 80053ac:	461a      	mov	r2, r3
 80053ae:	9b07      	ldr	r3, [sp, #28]
 80053b0:	605a      	str	r2, [r3, #4]
          H_NEXT(qp) = fp;
 80053b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053b4:	9a07      	ldr	r2, [sp, #28]
 80053b6:	601a      	str	r2, [r3, #0]
        }
      }

      /* Setting in the block owner heap and size.*/
      H_SIZE(hp) = size;
 80053b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ba:	9a02      	ldr	r2, [sp, #8]
 80053bc:	605a      	str	r2, [r3, #4]
      H_HEAP(hp) = heapp;
 80053be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c0:	9a03      	ldr	r2, [sp, #12]
 80053c2:	601a      	str	r2, [r3, #0]

      /* Releasing heap mutex/semaphore.*/
      H_UNLOCK(heapp);
 80053c4:	9b03      	ldr	r3, [sp, #12]
 80053c6:	330c      	adds	r3, #12
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fe fd21 	bl	8003e10 <chMtxUnlock>

      /*lint -save -e9087 [11.3] Safe cast.*/
      return (void *)H_BLOCK(hp);
 80053ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d0:	3308      	adds	r3, #8
 80053d2:	e026      	b.n	8005422 <chHeapAllocAligned+0x192>
      /*lint -restore*/
    }

    /* Next in the free blocks list.*/
    qp = hp;
 80053d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d6:	930b      	str	r3, [sp, #44]	; 0x2c
  while (H_NEXT(qp) != NULL) {
 80053d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f47f af73 	bne.w	80052c8 <chHeapAllocAligned+0x38>
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 80053e2:	9b03      	ldr	r3, [sp, #12]
 80053e4:	330c      	adds	r3, #12
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe fd12 	bl	8003e10 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 80053ec:	9b03      	ldr	r3, [sp, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d015      	beq.n	8005420 <chHeapAllocAligned+0x190>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 80053f4:	9b03      	ldr	r3, [sp, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053fa:	00d0      	lsls	r0, r2, #3
 80053fc:	2208      	movs	r2, #8
 80053fe:	9901      	ldr	r1, [sp, #4]
 8005400:	4798      	blx	r3
 8005402:	9008      	str	r0, [sp, #32]
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 8005404:	9b08      	ldr	r3, [sp, #32]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <chHeapAllocAligned+0x190>
      hp = ahp - 1U;
 800540a:	9b08      	ldr	r3, [sp, #32]
 800540c:	3b08      	subs	r3, #8
 800540e:	930a      	str	r3, [sp, #40]	; 0x28
      H_HEAP(hp) = heapp;
 8005410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005412:	9a03      	ldr	r2, [sp, #12]
 8005414:	601a      	str	r2, [r3, #0]
      H_SIZE(hp) = size;
 8005416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005418:	9a02      	ldr	r2, [sp, #8]
 800541a:	605a      	str	r2, [r3, #4]

      /*lint -save -e9087 [11.3] Safe cast.*/
      return (void *)ahp;
 800541c:	9b08      	ldr	r3, [sp, #32]
 800541e:	e000      	b.n	8005422 <chHeapAllocAligned+0x192>
      /*lint -restore*/
    }
  }

  return NULL;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	b00d      	add	sp, #52	; 0x34
 8005426:	f85d fb04 	ldr.w	pc, [sp], #4
 800542a:	bf00      	nop
 800542c:	20000c08 	.word	0x20000c08

08005430 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8005430:	b500      	push	{lr}
 8005432:	b087      	sub	sp, #28
 8005434:	9001      	str	r0, [sp, #4]
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
 8005436:	9b01      	ldr	r3, [sp, #4]
 8005438:	3b08      	subs	r3, #8
 800543a:	9304      	str	r3, [sp, #16]
  /*lint -restore*/
  heapp = H_HEAP(hp);
 800543c:	9b04      	ldr	r3, [sp, #16]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	9303      	str	r3, [sp, #12]
  qp = &heapp->header;
 8005442:	9b03      	ldr	r3, [sp, #12]
 8005444:	3304      	adds	r3, #4
 8005446:	9305      	str	r3, [sp, #20]

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005448:	9b04      	ldr	r3, [sp, #16]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800544e:	08da      	lsrs	r2, r3, #3
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8005450:	9b04      	ldr	r3, [sp, #16]
 8005452:	605a      	str	r2, [r3, #4]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	330c      	adds	r3, #12
 8005458:	4618      	mov	r0, r3
 800545a:	f7fe fc29 	bl	8003cb0 <chMtxLock>

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 800545e:	9b03      	ldr	r3, [sp, #12]
 8005460:	3304      	adds	r3, #4
 8005462:	9a05      	ldr	r2, [sp, #20]
 8005464:	429a      	cmp	r2, r3
 8005466:	d003      	beq.n	8005470 <chHeapFree+0x40>
 8005468:	9a04      	ldr	r2, [sp, #16]
 800546a:	9b05      	ldr	r3, [sp, #20]
 800546c:	429a      	cmp	r2, r3
 800546e:	d93d      	bls.n	80054ec <chHeapFree+0xbc>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8005470:	9b05      	ldr	r3, [sp, #20]
 8005472:	681b      	ldr	r3, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <chHeapFree+0x52>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8005478:	9b05      	ldr	r3, [sp, #20]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	9a04      	ldr	r2, [sp, #16]
 800547e:	429a      	cmp	r2, r3
 8005480:	d234      	bcs.n	80054ec <chHeapFree+0xbc>
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
 8005482:	9b05      	ldr	r3, [sp, #20]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	9b04      	ldr	r3, [sp, #16]
 8005488:	601a      	str	r2, [r3, #0]
      H_NEXT(qp) = hp;
 800548a:	9b05      	ldr	r3, [sp, #20]
 800548c:	9a04      	ldr	r2, [sp, #16]
 800548e:	601a      	str	r2, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8005490:	9b04      	ldr	r3, [sp, #16]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	3301      	adds	r3, #1
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	9a04      	ldr	r2, [sp, #16]
 800549a:	441a      	add	r2, r3
 800549c:	9b04      	ldr	r3, [sp, #16]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d10d      	bne.n	80054c0 <chHeapFree+0x90>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80054a4:	9b04      	ldr	r3, [sp, #16]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	9b04      	ldr	r3, [sp, #16]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	4413      	add	r3, r2
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	9b04      	ldr	r3, [sp, #16]
 80054b4:	605a      	str	r2, [r3, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80054b6:	9b04      	ldr	r3, [sp, #16]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	9b04      	ldr	r3, [sp, #16]
 80054be:	601a      	str	r2, [r3, #0]
      }
      if ((H_LIMIT(qp) == hp)) {
 80054c0:	9b05      	ldr	r3, [sp, #20]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	3301      	adds	r3, #1
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	9a05      	ldr	r2, [sp, #20]
 80054ca:	4413      	add	r3, r2
 80054cc:	9a04      	ldr	r2, [sp, #16]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d110      	bne.n	80054f4 <chHeapFree+0xc4>
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80054d2:	9b05      	ldr	r3, [sp, #20]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	9b04      	ldr	r3, [sp, #16]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	4413      	add	r3, r2
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	9b05      	ldr	r3, [sp, #20]
 80054e0:	605a      	str	r2, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 80054e2:	9b04      	ldr	r3, [sp, #16]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	9b05      	ldr	r3, [sp, #20]
 80054e8:	601a      	str	r2, [r3, #0]
      }
      break;
 80054ea:	e003      	b.n	80054f4 <chHeapFree+0xc4>
    }
    qp = H_NEXT(qp);
 80054ec:	9b05      	ldr	r3, [sp, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	9305      	str	r3, [sp, #20]
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 80054f2:	e7b4      	b.n	800545e <chHeapFree+0x2e>
      break;
 80054f4:	bf00      	nop
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 80054f6:	9b03      	ldr	r3, [sp, #12]
 80054f8:	330c      	adds	r3, #12
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fe fc88 	bl	8003e10 <chMtxUnlock>

  return;
 8005500:	bf00      	nop
}
 8005502:	b007      	add	sp, #28
 8005504:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005510 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8005510:	b500      	push	{lr}
 8005512:	b08b      	sub	sp, #44	; 0x2c
 8005514:	9003      	str	r0, [sp, #12]
 8005516:	9102      	str	r1, [sp, #8]
 8005518:	9201      	str	r2, [sp, #4]
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
 800551a:	9b03      	ldr	r3, [sp, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <chHeapStatus+0x14>
    heapp = &default_heap;
 8005520:	4b20      	ldr	r3, [pc, #128]	; (80055a4 <chHeapStatus+0x94>)
 8005522:	9303      	str	r3, [sp, #12]
  }

  H_LOCK(heapp);
 8005524:	9b03      	ldr	r3, [sp, #12]
 8005526:	330c      	adds	r3, #12
 8005528:	4618      	mov	r0, r3
 800552a:	f7fe fbc1 	bl	8003cb0 <chMtxLock>
  tpages = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	9307      	str	r3, [sp, #28]
  lpages = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	9306      	str	r3, [sp, #24]
  n = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	9308      	str	r3, [sp, #32]
  qp = &heapp->header;
 800553a:	9b03      	ldr	r3, [sp, #12]
 800553c:	3304      	adds	r3, #4
 800553e:	9309      	str	r3, [sp, #36]	; 0x24
  while (H_NEXT(qp) != NULL) {
 8005540:	e013      	b.n	800556a <chHeapStatus+0x5a>
    size_t pages = H_PAGES(H_NEXT(qp));
 8005542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	9305      	str	r3, [sp, #20]

    /* Updating counters.*/
    n++;
 800554a:	9b08      	ldr	r3, [sp, #32]
 800554c:	3301      	adds	r3, #1
 800554e:	9308      	str	r3, [sp, #32]
    tpages += pages;
 8005550:	9a07      	ldr	r2, [sp, #28]
 8005552:	9b05      	ldr	r3, [sp, #20]
 8005554:	4413      	add	r3, r2
 8005556:	9307      	str	r3, [sp, #28]
    if (pages > lpages) {
 8005558:	9a05      	ldr	r2, [sp, #20]
 800555a:	9b06      	ldr	r3, [sp, #24]
 800555c:	429a      	cmp	r2, r3
 800555e:	d901      	bls.n	8005564 <chHeapStatus+0x54>
      lpages = pages;
 8005560:	9b05      	ldr	r3, [sp, #20]
 8005562:	9306      	str	r3, [sp, #24]
    }

    qp = H_NEXT(qp);
 8005564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	9309      	str	r3, [sp, #36]	; 0x24
  while (H_NEXT(qp) != NULL) {
 800556a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e7      	bne.n	8005542 <chHeapStatus+0x32>
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8005572:	9b02      	ldr	r3, [sp, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <chHeapStatus+0x70>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8005578:	9b07      	ldr	r3, [sp, #28]
 800557a:	00da      	lsls	r2, r3, #3
 800557c:	9b02      	ldr	r3, [sp, #8]
 800557e:	601a      	str	r2, [r3, #0]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8005580:	9b01      	ldr	r3, [sp, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <chHeapStatus+0x7e>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8005586:	9b06      	ldr	r3, [sp, #24]
 8005588:	00da      	lsls	r2, r3, #3
 800558a:	9b01      	ldr	r3, [sp, #4]
 800558c:	601a      	str	r2, [r3, #0]
  }
  H_UNLOCK(heapp);
 800558e:	9b03      	ldr	r3, [sp, #12]
 8005590:	330c      	adds	r3, #12
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe fc3c 	bl	8003e10 <chMtxUnlock>

  return n;
 8005598:	9b08      	ldr	r3, [sp, #32]
}
 800559a:	4618      	mov	r0, r3
 800559c:	b00b      	add	sp, #44	; 0x2c
 800559e:	f85d fb04 	ldr.w	pc, [sp], #4
 80055a2:	bf00      	nop
 80055a4:	20000c08 	.word	0x20000c08
	...

080055b0 <chSysLock.lto_priv.14>:
static inline void chSysLock(void) {
 80055b0:	b082      	sub	sp, #8
 80055b2:	2330      	movs	r3, #48	; 0x30
 80055b4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80055b6:	9b01      	ldr	r3, [sp, #4]
 80055b8:	f383 8811 	msr	BASEPRI, r3
}
 80055bc:	bf00      	nop
}
 80055be:	bf00      	nop
}
 80055c0:	bf00      	nop
 80055c2:	b002      	add	sp, #8
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
	...

080055d0 <chSysUnlock.lto_priv.14>:
static inline void chSysUnlock(void) {
 80055d0:	b082      	sub	sp, #8
 80055d2:	2300      	movs	r3, #0
 80055d4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80055d6:	9b01      	ldr	r3, [sp, #4]
 80055d8:	f383 8811 	msr	BASEPRI, r3
}
 80055dc:	bf00      	nop
}
 80055de:	bf00      	nop
}
 80055e0:	bf00      	nop
 80055e2:	b002      	add	sp, #8
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
	...

080055f0 <chPoolAdd>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be added
 *
 * @api
 */
static inline void chPoolAdd(memory_pool_t *mp, void *objp) {
 80055f0:	b500      	push	{lr}
 80055f2:	b083      	sub	sp, #12
 80055f4:	9001      	str	r0, [sp, #4]
 80055f6:	9100      	str	r1, [sp, #0]

  chPoolFree(mp, objp);
 80055f8:	9900      	ldr	r1, [sp, #0]
 80055fa:	9801      	ldr	r0, [sp, #4]
 80055fc:	f000 f8b0 	bl	8005760 <chPoolFree>
}
 8005600:	bf00      	nop
 8005602:	b003      	add	sp, #12
 8005604:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005610 <chGuardedPoolFreeI>:
 * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @iclass
 */
static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {
 8005610:	b500      	push	{lr}
 8005612:	b083      	sub	sp, #12
 8005614:	9001      	str	r0, [sp, #4]
 8005616:	9100      	str	r1, [sp, #0]

  chPoolFreeI(&gmp->pool, objp);
 8005618:	9b01      	ldr	r3, [sp, #4]
 800561a:	330c      	adds	r3, #12
 800561c:	9900      	ldr	r1, [sp, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f88e 	bl	8005740 <chPoolFreeI>
  chSemSignalI(&gmp->sem);
 8005624:	9b01      	ldr	r3, [sp, #4]
 8005626:	4618      	mov	r0, r3
 8005628:	f7fe f9fa 	bl	8003a20 <chSemSignalI>
}
 800562c:	bf00      	nop
 800562e:	b003      	add	sp, #12
 8005630:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005640 <chGuardedPoolAdd>:
 * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 * @param[in] objp      the pointer to the object to be added
 *
 * @api
 */
static inline void chGuardedPoolAdd(guarded_memory_pool_t *gmp, void *objp) {
 8005640:	b500      	push	{lr}
 8005642:	b083      	sub	sp, #12
 8005644:	9001      	str	r0, [sp, #4]
 8005646:	9100      	str	r1, [sp, #0]

  chGuardedPoolFree(gmp, objp);
 8005648:	9900      	ldr	r1, [sp, #0]
 800564a:	9801      	ldr	r0, [sp, #4]
 800564c:	f000 f908 	bl	8005860 <chGuardedPoolFree>
}
 8005650:	bf00      	nop
 8005652:	b003      	add	sp, #12
 8005654:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005660 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 8005660:	b084      	sub	sp, #16
 8005662:	9003      	str	r0, [sp, #12]
 8005664:	9102      	str	r1, [sp, #8]
 8005666:	9201      	str	r2, [sp, #4]
 8005668:	9300      	str	r3, [sp, #0]
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 800566a:	9b03      	ldr	r3, [sp, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
 8005670:	9b03      	ldr	r3, [sp, #12]
 8005672:	9a02      	ldr	r2, [sp, #8]
 8005674:	605a      	str	r2, [r3, #4]
  mp->align = align;
 8005676:	9b03      	ldr	r3, [sp, #12]
 8005678:	9a01      	ldr	r2, [sp, #4]
 800567a:	609a      	str	r2, [r3, #8]
  mp->provider = provider;
 800567c:	9b03      	ldr	r3, [sp, #12]
 800567e:	9a00      	ldr	r2, [sp, #0]
 8005680:	60da      	str	r2, [r3, #12]
}
 8005682:	bf00      	nop
 8005684:	b004      	add	sp, #16
 8005686:	4770      	bx	lr
	...

08005690 <chPoolLoadArray>:
 * @param[in] p         pointer to the array first element
 * @param[in] n         number of elements in the array
 *
 * @api
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {
 8005690:	b500      	push	{lr}
 8005692:	b085      	sub	sp, #20
 8005694:	9003      	str	r0, [sp, #12]
 8005696:	9102      	str	r1, [sp, #8]
 8005698:	9201      	str	r2, [sp, #4]

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 800569a:	e00b      	b.n	80056b4 <chPoolLoadArray+0x24>
    chPoolAdd(mp, p);
 800569c:	9902      	ldr	r1, [sp, #8]
 800569e:	9803      	ldr	r0, [sp, #12]
 80056a0:	f7ff ffa6 	bl	80055f0 <chPoolAdd>
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->object_size);
 80056a4:	9b03      	ldr	r3, [sp, #12]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	9a02      	ldr	r2, [sp, #8]
 80056aa:	4413      	add	r3, r2
 80056ac:	9302      	str	r3, [sp, #8]
    /*lint -restore*/
    n--;
 80056ae:	9b01      	ldr	r3, [sp, #4]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	9301      	str	r3, [sp, #4]
  while (n != 0U) {
 80056b4:	9b01      	ldr	r3, [sp, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1f0      	bne.n	800569c <chPoolLoadArray+0xc>
  }
}
 80056ba:	bf00      	nop
 80056bc:	bf00      	nop
 80056be:	b005      	add	sp, #20
 80056c0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080056d0 <chPoolAllocI>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @iclass
 */
void *chPoolAllocI(memory_pool_t *mp) {
 80056d0:	b500      	push	{lr}
 80056d2:	b085      	sub	sp, #20
 80056d4:	9001      	str	r0, [sp, #4]
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->next;
 80056d6:	9b01      	ldr	r3, [sp, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	9303      	str	r3, [sp, #12]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 80056dc:	9b03      	ldr	r3, [sp, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <chPoolAllocI+0x1e>
    mp->next = mp->next->next;
 80056e2:	9b01      	ldr	r3, [sp, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	9b01      	ldr	r3, [sp, #4]
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	e00c      	b.n	8005708 <chPoolAllocI+0x38>
  }
  else if (mp->provider != NULL) {
 80056ee:	9b01      	ldr	r3, [sp, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d008      	beq.n	8005708 <chPoolAllocI+0x38>
    objp = mp->provider(mp->object_size, mp->align);
 80056f6:	9b01      	ldr	r3, [sp, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	9a01      	ldr	r2, [sp, #4]
 80056fc:	6850      	ldr	r0, [r2, #4]
 80056fe:	9a01      	ldr	r2, [sp, #4]
 8005700:	6892      	ldr	r2, [r2, #8]
 8005702:	4611      	mov	r1, r2
 8005704:	4798      	blx	r3
 8005706:	9003      	str	r0, [sp, #12]
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
                "returned object not aligned");
  }
  /*lint -restore*/

  return objp;
 8005708:	9b03      	ldr	r3, [sp, #12]
}
 800570a:	4618      	mov	r0, r3
 800570c:	b005      	add	sp, #20
 800570e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005712:	bf00      	nop
	...

08005720 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8005720:	b500      	push	{lr}
 8005722:	b085      	sub	sp, #20
 8005724:	9001      	str	r0, [sp, #4]
  void *objp;

  chSysLock();
 8005726:	f7ff ff43 	bl	80055b0 <chSysLock.lto_priv.14>
  objp = chPoolAllocI(mp);
 800572a:	9801      	ldr	r0, [sp, #4]
 800572c:	f7ff ffd0 	bl	80056d0 <chPoolAllocI>
 8005730:	9003      	str	r0, [sp, #12]
  chSysUnlock();
 8005732:	f7ff ff4d 	bl	80055d0 <chSysUnlock.lto_priv.14>

  return objp;
 8005736:	9b03      	ldr	r3, [sp, #12]
}
 8005738:	4618      	mov	r0, r3
 800573a:	b005      	add	sp, #20
 800573c:	f85d fb04 	ldr.w	pc, [sp], #4

08005740 <chPoolFreeI>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
 8005740:	b084      	sub	sp, #16
 8005742:	9001      	str	r0, [sp, #4]
 8005744:	9100      	str	r1, [sp, #0]
  struct pool_header *php = objp;
 8005746:	9b00      	ldr	r3, [sp, #0]
 8005748:	9303      	str	r3, [sp, #12]
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 800574a:	9b01      	ldr	r3, [sp, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	9b03      	ldr	r3, [sp, #12]
 8005750:	601a      	str	r2, [r3, #0]
  mp->next = php;
 8005752:	9b01      	ldr	r3, [sp, #4]
 8005754:	9a03      	ldr	r2, [sp, #12]
 8005756:	601a      	str	r2, [r3, #0]
}
 8005758:	bf00      	nop
 800575a:	b004      	add	sp, #16
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop

08005760 <chPoolFree>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @api
 */
void chPoolFree(memory_pool_t *mp, void *objp) {
 8005760:	b500      	push	{lr}
 8005762:	b083      	sub	sp, #12
 8005764:	9001      	str	r0, [sp, #4]
 8005766:	9100      	str	r1, [sp, #0]

  chSysLock();
 8005768:	f7ff ff22 	bl	80055b0 <chSysLock.lto_priv.14>
  chPoolFreeI(mp, objp);
 800576c:	9900      	ldr	r1, [sp, #0]
 800576e:	9801      	ldr	r0, [sp, #4]
 8005770:	f7ff ffe6 	bl	8005740 <chPoolFreeI>
  chSysUnlock();
 8005774:	f7ff ff2c 	bl	80055d0 <chSysUnlock.lto_priv.14>
}
 8005778:	bf00      	nop
 800577a:	b003      	add	sp, #12
 800577c:	f85d fb04 	ldr.w	pc, [sp], #4

08005780 <chGuardedPoolObjectInitAligned>:
 *
 * @init
 */
void chGuardedPoolObjectInitAligned(guarded_memory_pool_t *gmp,
                                    size_t size,
                                    unsigned align) {
 8005780:	b500      	push	{lr}
 8005782:	b085      	sub	sp, #20
 8005784:	9003      	str	r0, [sp, #12]
 8005786:	9102      	str	r1, [sp, #8]
 8005788:	9201      	str	r2, [sp, #4]

  chPoolObjectInitAligned(&gmp->pool, size, align, NULL);
 800578a:	9b03      	ldr	r3, [sp, #12]
 800578c:	f103 000c 	add.w	r0, r3, #12
 8005790:	2300      	movs	r3, #0
 8005792:	9a01      	ldr	r2, [sp, #4]
 8005794:	9902      	ldr	r1, [sp, #8]
 8005796:	f7ff ff63 	bl	8005660 <chPoolObjectInitAligned>
  chSemObjectInit(&gmp->sem, (cnt_t)0);
 800579a:	9b03      	ldr	r3, [sp, #12]
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe f84e 	bl	8003840 <chSemObjectInit>
}
 80057a4:	bf00      	nop
 80057a6:	b005      	add	sp, #20
 80057a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80057ac:	0000      	movs	r0, r0
	...

080057b0 <chGuardedPoolLoadArray>:
 * @param[in] p         pointer to the array first element
 * @param[in] n         number of elements in the array
 *
 * @api
 */
void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 80057b0:	b500      	push	{lr}
 80057b2:	b085      	sub	sp, #20
 80057b4:	9003      	str	r0, [sp, #12]
 80057b6:	9102      	str	r1, [sp, #8]
 80057b8:	9201      	str	r2, [sp, #4]

  chDbgCheck((gmp != NULL) && (n != 0U));

  while (n != 0U) {
 80057ba:	e00b      	b.n	80057d4 <chGuardedPoolLoadArray+0x24>
    chGuardedPoolAdd(gmp, p);
 80057bc:	9902      	ldr	r1, [sp, #8]
 80057be:	9803      	ldr	r0, [sp, #12]
 80057c0:	f7ff ff3e 	bl	8005640 <chGuardedPoolAdd>
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80057c4:	9b03      	ldr	r3, [sp, #12]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	9a02      	ldr	r2, [sp, #8]
 80057ca:	4413      	add	r3, r2
 80057cc:	9302      	str	r3, [sp, #8]
    /*lint -restore*/
    n--;
 80057ce:	9b01      	ldr	r3, [sp, #4]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	9301      	str	r3, [sp, #4]
  while (n != 0U) {
 80057d4:	9b01      	ldr	r3, [sp, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f0      	bne.n	80057bc <chGuardedPoolLoadArray+0xc>
  }
}
 80057da:	bf00      	nop
 80057dc:	bf00      	nop
 80057de:	b005      	add	sp, #20
 80057e0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080057f0 <chGuardedPoolAllocTimeoutS>:
 * @retval NULL         if the operation timed out.
 *
 * @sclass
 */
void *chGuardedPoolAllocTimeoutS(guarded_memory_pool_t *gmp,
                                 sysinterval_t timeout) {
 80057f0:	b500      	push	{lr}
 80057f2:	b085      	sub	sp, #20
 80057f4:	9001      	str	r0, [sp, #4]
 80057f6:	9100      	str	r1, [sp, #0]
  msg_t msg;

  msg = chSemWaitTimeoutS(&gmp->sem, timeout);
 80057f8:	9b01      	ldr	r3, [sp, #4]
 80057fa:	9900      	ldr	r1, [sp, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fe f8b7 	bl	8003970 <chSemWaitTimeoutS>
 8005802:	9003      	str	r0, [sp, #12]
  if (msg != MSG_OK) {
 8005804:	9b03      	ldr	r3, [sp, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <chGuardedPoolAllocTimeoutS+0x1e>
    return NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	e005      	b.n	800581a <chGuardedPoolAllocTimeoutS+0x2a>
  }

  return chPoolAllocI(&gmp->pool);
 800580e:	9b01      	ldr	r3, [sp, #4]
 8005810:	330c      	adds	r3, #12
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff ff5c 	bl	80056d0 <chPoolAllocI>
 8005818:	4603      	mov	r3, r0
}
 800581a:	4618      	mov	r0, r3
 800581c:	b005      	add	sp, #20
 800581e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005822:	bf00      	nop
	...

08005830 <chGuardedPoolAllocTimeout>:
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
                                sysinterval_t timeout) {
 8005830:	b500      	push	{lr}
 8005832:	b085      	sub	sp, #20
 8005834:	9001      	str	r0, [sp, #4]
 8005836:	9100      	str	r1, [sp, #0]
  void *p;

  chSysLock();
 8005838:	f7ff feba 	bl	80055b0 <chSysLock.lto_priv.14>
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
 800583c:	9900      	ldr	r1, [sp, #0]
 800583e:	9801      	ldr	r0, [sp, #4]
 8005840:	f7ff ffd6 	bl	80057f0 <chGuardedPoolAllocTimeoutS>
 8005844:	9003      	str	r0, [sp, #12]
  chSysUnlock();
 8005846:	f7ff fec3 	bl	80055d0 <chSysUnlock.lto_priv.14>

  return p;
 800584a:	9b03      	ldr	r3, [sp, #12]
}
 800584c:	4618      	mov	r0, r3
 800584e:	b005      	add	sp, #20
 8005850:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005860 <chGuardedPoolFree>:
 * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @api
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {
 8005860:	b500      	push	{lr}
 8005862:	b083      	sub	sp, #12
 8005864:	9001      	str	r0, [sp, #4]
 8005866:	9100      	str	r1, [sp, #0]

  chSysLock();
 8005868:	f7ff fea2 	bl	80055b0 <chSysLock.lto_priv.14>
  chGuardedPoolFreeI(gmp, objp);
 800586c:	9900      	ldr	r1, [sp, #0]
 800586e:	9801      	ldr	r0, [sp, #4]
 8005870:	f7ff fece 	bl	8005610 <chGuardedPoolFreeI>
  chSchRescheduleS();
 8005874:	f7fd f97c 	bl	8002b70 <chSchRescheduleS>
  chSysUnlock();
 8005878:	f7ff feaa 	bl	80055d0 <chSysUnlock.lto_priv.14>
}
 800587c:	bf00      	nop
 800587e:	b003      	add	sp, #12
 8005880:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005890 <chSysLock.lto_priv.15>:
static inline void chSysLock(void) {
 8005890:	b082      	sub	sp, #8
 8005892:	2330      	movs	r3, #48	; 0x30
 8005894:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005896:	9b01      	ldr	r3, [sp, #4]
 8005898:	f383 8811 	msr	BASEPRI, r3
}
 800589c:	bf00      	nop
}
 800589e:	bf00      	nop
}
 80058a0:	bf00      	nop
 80058a2:	b002      	add	sp, #8
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
	...

080058b0 <chSysUnlock.lto_priv.15>:
static inline void chSysUnlock(void) {
 80058b0:	b082      	sub	sp, #8
 80058b2:	2300      	movs	r3, #0
 80058b4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80058b6:	9b01      	ldr	r3, [sp, #4]
 80058b8:	f383 8811 	msr	BASEPRI, r3
}
 80058bc:	bf00      	nop
}
 80058be:	bf00      	nop
}
 80058c0:	bf00      	nop
 80058c2:	b002      	add	sp, #8
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
	...

080058d0 <chPipeGetSize>:
 * @param[in] pp        the pointer to an initialized @p pipe_t object
 * @return              The size of the pipe.
 *
 * @api
 */
static inline size_t chPipeGetSize(const pipe_t *pp) {
 80058d0:	b082      	sub	sp, #8
 80058d2:	9001      	str	r0, [sp, #4]

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(pp->top - pp->buffer);
 80058d4:	9b01      	ldr	r3, [sp, #4]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	9b01      	ldr	r3, [sp, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	1ad3      	subs	r3, r2, r3
  /*lint -restore*/
}
 80058de:	4618      	mov	r0, r3
 80058e0:	b002      	add	sp, #8
 80058e2:	4770      	bx	lr
	...

080058f0 <chPipeGetUsedCount>:
 * @param[in] pp        the pointer to an initialized @p pipe_t object
 * @return              The number of queued bytes.
 *
 * @api
 */
static inline size_t chPipeGetUsedCount(const pipe_t *pp) {
 80058f0:	b082      	sub	sp, #8
 80058f2:	9001      	str	r0, [sp, #4]

  return pp->cnt;
 80058f4:	9b01      	ldr	r3, [sp, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	b002      	add	sp, #8
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop

08005900 <chPipeGetFreeCount>:
 * @param[in] pp        the pointer to an initialized @p pipe_t object
 * @return              The number of empty byte slots.
 *
 * @api
 */
static inline size_t chPipeGetFreeCount(const pipe_t *pp) {
 8005900:	b510      	push	{r4, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	9001      	str	r0, [sp, #4]

  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 8005906:	9801      	ldr	r0, [sp, #4]
 8005908:	f7ff ffe2 	bl	80058d0 <chPipeGetSize>
 800590c:	4604      	mov	r4, r0
 800590e:	9801      	ldr	r0, [sp, #4]
 8005910:	f7ff ffee 	bl	80058f0 <chPipeGetUsedCount>
 8005914:	4603      	mov	r3, r0
 8005916:	1ae3      	subs	r3, r4, r3
}
 8005918:	4618      	mov	r0, r3
 800591a:	b002      	add	sp, #8
 800591c:	bd10      	pop	{r4, pc}
 800591e:	bf00      	nop

08005920 <pipe_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t pipe_write(pipe_t *pp, const uint8_t *bp, size_t n) {
 8005920:	b500      	push	{lr}
 8005922:	b087      	sub	sp, #28
 8005924:	9003      	str	r0, [sp, #12]
 8005926:	9102      	str	r1, [sp, #8]
 8005928:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  PC_LOCK(pp);
 800592a:	9b03      	ldr	r3, [sp, #12]
 800592c:	3320      	adds	r3, #32
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe f9be 	bl	8003cb0 <chMtxLock>

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > chPipeGetFreeCount(pp)) {
 8005934:	9803      	ldr	r0, [sp, #12]
 8005936:	f7ff ffe3 	bl	8005900 <chPipeGetFreeCount>
 800593a:	4602      	mov	r2, r0
 800593c:	9b01      	ldr	r3, [sp, #4]
 800593e:	4293      	cmp	r3, r2
 8005940:	d903      	bls.n	800594a <pipe_write+0x2a>
    n = chPipeGetFreeCount(pp);
 8005942:	9803      	ldr	r0, [sp, #12]
 8005944:	f7ff ffdc 	bl	8005900 <chPipeGetFreeCount>
 8005948:	9001      	str	r0, [sp, #4]
  }
  pp->cnt += n;
 800594a:	9b03      	ldr	r3, [sp, #12]
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	9b01      	ldr	r3, [sp, #4]
 8005950:	441a      	add	r2, r3
 8005952:	9b03      	ldr	r3, [sp, #12]
 8005954:	611a      	str	r2, [r3, #16]

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(pp->top - pp->wrptr);
 8005956:	9b03      	ldr	r3, [sp, #12]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	9b03      	ldr	r3, [sp, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	9305      	str	r3, [sp, #20]
  /*lint -restore*/

  if (n < s1) {
 8005962:	9a01      	ldr	r2, [sp, #4]
 8005964:	9b05      	ldr	r3, [sp, #20]
 8005966:	429a      	cmp	r2, r3
 8005968:	d20d      	bcs.n	8005986 <pipe_write+0x66>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800596a:	9b03      	ldr	r3, [sp, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	9a01      	ldr	r2, [sp, #4]
 8005970:	9902      	ldr	r1, [sp, #8]
 8005972:	4618      	mov	r0, r3
 8005974:	f016 fe60 	bl	801c638 <memcpy>
    pp->wrptr += n;
 8005978:	9b03      	ldr	r3, [sp, #12]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	9b01      	ldr	r3, [sp, #4]
 800597e:	441a      	add	r2, r3
 8005980:	9b03      	ldr	r3, [sp, #12]
 8005982:	609a      	str	r2, [r3, #8]
 8005984:	e02b      	b.n	80059de <pipe_write+0xbe>
  }
  else if (n > s1) {
 8005986:	9a01      	ldr	r2, [sp, #4]
 8005988:	9b05      	ldr	r3, [sp, #20]
 800598a:	429a      	cmp	r2, r3
 800598c:	d91c      	bls.n	80059c8 <pipe_write+0xa8>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	9a05      	ldr	r2, [sp, #20]
 8005994:	9902      	ldr	r1, [sp, #8]
 8005996:	4618      	mov	r0, r3
 8005998:	f016 fe4e 	bl	801c638 <memcpy>
    bp += s1;
 800599c:	9a02      	ldr	r2, [sp, #8]
 800599e:	9b05      	ldr	r3, [sp, #20]
 80059a0:	4413      	add	r3, r2
 80059a2:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 80059a4:	9a01      	ldr	r2, [sp, #4]
 80059a6:	9b05      	ldr	r3, [sp, #20]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	9304      	str	r3, [sp, #16]
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 80059ac:	9b03      	ldr	r3, [sp, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	9a04      	ldr	r2, [sp, #16]
 80059b2:	9902      	ldr	r1, [sp, #8]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f016 fe3f 	bl	801c638 <memcpy>
    pp->wrptr = pp->buffer + s2;
 80059ba:	9b03      	ldr	r3, [sp, #12]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	9b04      	ldr	r3, [sp, #16]
 80059c0:	441a      	add	r2, r3
 80059c2:	9b03      	ldr	r3, [sp, #12]
 80059c4:	609a      	str	r2, [r3, #8]
 80059c6:	e00a      	b.n	80059de <pipe_write+0xbe>
  }
  else {
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 80059c8:	9b03      	ldr	r3, [sp, #12]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	9a01      	ldr	r2, [sp, #4]
 80059ce:	9902      	ldr	r1, [sp, #8]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f016 fe31 	bl	801c638 <memcpy>
    pp->wrptr = pp->buffer;
 80059d6:	9b03      	ldr	r3, [sp, #12]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	9b03      	ldr	r3, [sp, #12]
 80059dc:	609a      	str	r2, [r3, #8]
  }

  PC_UNLOCK(pp);
 80059de:	9b03      	ldr	r3, [sp, #12]
 80059e0:	3320      	adds	r3, #32
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fa14 	bl	8003e10 <chMtxUnlock>

  return n;
 80059e8:	9b01      	ldr	r3, [sp, #4]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	b007      	add	sp, #28
 80059ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80059f2:	bf00      	nop
	...

08005a00 <pipe_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t pipe_read(pipe_t *pp, uint8_t *bp, size_t n) {
 8005a00:	b500      	push	{lr}
 8005a02:	b087      	sub	sp, #28
 8005a04:	9003      	str	r0, [sp, #12]
 8005a06:	9102      	str	r1, [sp, #8]
 8005a08:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  PC_LOCK(pp);
 8005a0a:	9b03      	ldr	r3, [sp, #12]
 8005a0c:	3320      	adds	r3, #32
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe f94e 	bl	8003cb0 <chMtxLock>

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > chPipeGetUsedCount(pp)) {
 8005a14:	9803      	ldr	r0, [sp, #12]
 8005a16:	f7ff ff6b 	bl	80058f0 <chPipeGetUsedCount>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	9b01      	ldr	r3, [sp, #4]
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d903      	bls.n	8005a2a <pipe_read+0x2a>
    n = chPipeGetUsedCount(pp);
 8005a22:	9803      	ldr	r0, [sp, #12]
 8005a24:	f7ff ff64 	bl	80058f0 <chPipeGetUsedCount>
 8005a28:	9001      	str	r0, [sp, #4]
  }
  pp->cnt -= n;
 8005a2a:	9b03      	ldr	r3, [sp, #12]
 8005a2c:	691a      	ldr	r2, [r3, #16]
 8005a2e:	9b01      	ldr	r3, [sp, #4]
 8005a30:	1ad2      	subs	r2, r2, r3
 8005a32:	9b03      	ldr	r3, [sp, #12]
 8005a34:	611a      	str	r2, [r3, #16]

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(pp->top - pp->rdptr);
 8005a36:	9b03      	ldr	r3, [sp, #12]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	9305      	str	r3, [sp, #20]
  /*lint -restore*/

  if (n < s1) {
 8005a42:	9a01      	ldr	r2, [sp, #4]
 8005a44:	9b05      	ldr	r3, [sp, #20]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d20d      	bcs.n	8005a66 <pipe_read+0x66>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8005a4a:	9b03      	ldr	r3, [sp, #12]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	9a01      	ldr	r2, [sp, #4]
 8005a50:	4619      	mov	r1, r3
 8005a52:	9802      	ldr	r0, [sp, #8]
 8005a54:	f016 fdf0 	bl	801c638 <memcpy>
    pp->rdptr += n;
 8005a58:	9b03      	ldr	r3, [sp, #12]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	9b01      	ldr	r3, [sp, #4]
 8005a5e:	441a      	add	r2, r3
 8005a60:	9b03      	ldr	r3, [sp, #12]
 8005a62:	60da      	str	r2, [r3, #12]
 8005a64:	e02b      	b.n	8005abe <pipe_read+0xbe>
  }
  else if (n > s1) {
 8005a66:	9a01      	ldr	r2, [sp, #4]
 8005a68:	9b05      	ldr	r3, [sp, #20]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d91c      	bls.n	8005aa8 <pipe_read+0xa8>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8005a6e:	9b03      	ldr	r3, [sp, #12]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	9a05      	ldr	r2, [sp, #20]
 8005a74:	4619      	mov	r1, r3
 8005a76:	9802      	ldr	r0, [sp, #8]
 8005a78:	f016 fdde 	bl	801c638 <memcpy>
    bp += s1;
 8005a7c:	9a02      	ldr	r2, [sp, #8]
 8005a7e:	9b05      	ldr	r3, [sp, #20]
 8005a80:	4413      	add	r3, r2
 8005a82:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 8005a84:	9a01      	ldr	r2, [sp, #4]
 8005a86:	9b05      	ldr	r3, [sp, #20]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	9304      	str	r3, [sp, #16]
    memcpy((void *)bp, (void *)pp->buffer, s2);
 8005a8c:	9b03      	ldr	r3, [sp, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	9a04      	ldr	r2, [sp, #16]
 8005a92:	4619      	mov	r1, r3
 8005a94:	9802      	ldr	r0, [sp, #8]
 8005a96:	f016 fdcf 	bl	801c638 <memcpy>
    pp->rdptr = pp->buffer + s2;
 8005a9a:	9b03      	ldr	r3, [sp, #12]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	9b04      	ldr	r3, [sp, #16]
 8005aa0:	441a      	add	r2, r3
 8005aa2:	9b03      	ldr	r3, [sp, #12]
 8005aa4:	60da      	str	r2, [r3, #12]
 8005aa6:	e00a      	b.n	8005abe <pipe_read+0xbe>
  }
  else {
    memcpy((void *)bp, (void *)pp->rdptr, n);
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	9a01      	ldr	r2, [sp, #4]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	9802      	ldr	r0, [sp, #8]
 8005ab2:	f016 fdc1 	bl	801c638 <memcpy>
    pp->rdptr = pp->buffer;
 8005ab6:	9b03      	ldr	r3, [sp, #12]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	9b03      	ldr	r3, [sp, #12]
 8005abc:	60da      	str	r2, [r3, #12]
  }

  PC_UNLOCK(pp);
 8005abe:	9b03      	ldr	r3, [sp, #12]
 8005ac0:	3320      	adds	r3, #32
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe f9a4 	bl	8003e10 <chMtxUnlock>

  return n;
 8005ac8:	9b01      	ldr	r3, [sp, #4]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	b007      	add	sp, #28
 8005ace:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ad2:	bf00      	nop
	...

08005ae0 <chPipeObjectInit>:
 * @param[in] buf       pointer to the pipe buffer as an array of @p uint8_t
 * @param[in] n         number of elements in the buffer array
 *
 * @init
 */
void chPipeObjectInit(pipe_t *pp, uint8_t *buf, size_t n) {
 8005ae0:	b500      	push	{lr}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	9003      	str	r0, [sp, #12]
 8005ae6:	9102      	str	r1, [sp, #8]
 8005ae8:	9201      	str	r2, [sp, #4]

  chDbgCheck((pp != NULL) && (buf != NULL) && (n > (size_t)0));

  pp->buffer = buf;
 8005aea:	9b03      	ldr	r3, [sp, #12]
 8005aec:	9a02      	ldr	r2, [sp, #8]
 8005aee:	601a      	str	r2, [r3, #0]
  pp->rdptr  = buf;
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	9a02      	ldr	r2, [sp, #8]
 8005af4:	60da      	str	r2, [r3, #12]
  pp->wrptr  = buf;
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	9a02      	ldr	r2, [sp, #8]
 8005afa:	609a      	str	r2, [r3, #8]
  pp->top    = &buf[n];
 8005afc:	9a02      	ldr	r2, [sp, #8]
 8005afe:	9b01      	ldr	r3, [sp, #4]
 8005b00:	441a      	add	r2, r3
 8005b02:	9b03      	ldr	r3, [sp, #12]
 8005b04:	605a      	str	r2, [r3, #4]
  pp->cnt    = (size_t)0;
 8005b06:	9b03      	ldr	r3, [sp, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8005b0c:	9b03      	ldr	r3, [sp, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	751a      	strb	r2, [r3, #20]
  pp->wtr    = NULL;
 8005b12:	9b03      	ldr	r3, [sp, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	619a      	str	r2, [r3, #24]
  pp->rtr    = NULL;
 8005b18:	9b03      	ldr	r3, [sp, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	61da      	str	r2, [r3, #28]
  PC_INIT(pp);
 8005b1e:	9b03      	ldr	r3, [sp, #12]
 8005b20:	3320      	adds	r3, #32
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe f8b4 	bl	8003c90 <chMtxObjectInit>
  PW_INIT(pp);
 8005b28:	9b03      	ldr	r3, [sp, #12]
 8005b2a:	3330      	adds	r3, #48	; 0x30
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe f8af 	bl	8003c90 <chMtxObjectInit>
  PR_INIT(pp);
 8005b32:	9b03      	ldr	r3, [sp, #12]
 8005b34:	3340      	adds	r3, #64	; 0x40
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe f8aa 	bl	8003c90 <chMtxObjectInit>
}
 8005b3c:	bf00      	nop
 8005b3e:	b005      	add	sp, #20
 8005b40:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005b50 <chPipeReset>:
 *
 * @param[in] pp        the pointer to an initialized @p pipe_t object
 *
 * @api
 */
void chPipeReset(pipe_t *pp) {
 8005b50:	b500      	push	{lr}
 8005b52:	b083      	sub	sp, #12
 8005b54:	9001      	str	r0, [sp, #4]

  chDbgCheck(pp != NULL);

  PC_LOCK(pp);
 8005b56:	9b01      	ldr	r3, [sp, #4]
 8005b58:	3320      	adds	r3, #32
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe f8a8 	bl	8003cb0 <chMtxLock>

  pp->wrptr = pp->buffer;
 8005b60:	9b01      	ldr	r3, [sp, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	9b01      	ldr	r3, [sp, #4]
 8005b66:	609a      	str	r2, [r3, #8]
  pp->rdptr = pp->buffer;
 8005b68:	9b01      	ldr	r3, [sp, #4]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	9b01      	ldr	r3, [sp, #4]
 8005b6e:	60da      	str	r2, [r3, #12]
  pp->cnt   = (size_t)0;
 8005b70:	9b01      	ldr	r3, [sp, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	611a      	str	r2, [r3, #16]
  pp->reset = true;
 8005b76:	9b01      	ldr	r3, [sp, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	751a      	strb	r2, [r3, #20]

  chSysLock();
 8005b7c:	f7ff fe88 	bl	8005890 <chSysLock.lto_priv.15>
  chThdResumeI(&pp->wtr, MSG_RESET);
 8005b80:	9b01      	ldr	r3, [sp, #4]
 8005b82:	3318      	adds	r3, #24
 8005b84:	f06f 0101 	mvn.w	r1, #1
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fd fcb9 	bl	8003500 <chThdResumeI>
  chThdResumeI(&pp->rtr, MSG_RESET);
 8005b8e:	9b01      	ldr	r3, [sp, #4]
 8005b90:	331c      	adds	r3, #28
 8005b92:	f06f 0101 	mvn.w	r1, #1
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fd fcb2 	bl	8003500 <chThdResumeI>
  chSchRescheduleS();
 8005b9c:	f7fc ffe8 	bl	8002b70 <chSchRescheduleS>
  chSysUnlock();
 8005ba0:	f7ff fe86 	bl	80058b0 <chSysUnlock.lto_priv.15>

  PC_UNLOCK(pp);
 8005ba4:	9b01      	ldr	r3, [sp, #4]
 8005ba6:	3320      	adds	r3, #32
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe f931 	bl	8003e10 <chMtxUnlock>
}
 8005bae:	bf00      	nop
 8005bb0:	b003      	add	sp, #12
 8005bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bb6:	bf00      	nop
	...

08005bc0 <chPipeWriteTimeout>:
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
                          size_t n, sysinterval_t timeout) {
 8005bc0:	b500      	push	{lr}
 8005bc2:	b089      	sub	sp, #36	; 0x24
 8005bc4:	9003      	str	r0, [sp, #12]
 8005bc6:	9102      	str	r1, [sp, #8]
 8005bc8:	9201      	str	r2, [sp, #4]
 8005bca:	9300      	str	r3, [sp, #0]
  size_t max = n;
 8005bcc:	9b01      	ldr	r3, [sp, #4]
 8005bce:	9307      	str	r3, [sp, #28]

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	7d1b      	ldrb	r3, [r3, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <chPipeWriteTimeout+0x1c>
    return (size_t)0;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e036      	b.n	8005c4a <chPipeWriteTimeout+0x8a>
  }

  PW_LOCK(pp);
 8005bdc:	9b03      	ldr	r3, [sp, #12]
 8005bde:	3330      	adds	r3, #48	; 0x30
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fe f865 	bl	8003cb0 <chMtxLock>

  while (n > 0U) {
 8005be6:	e025      	b.n	8005c34 <chPipeWriteTimeout+0x74>
    size_t done;

    done = pipe_write(pp, bp, n);
 8005be8:	9a01      	ldr	r2, [sp, #4]
 8005bea:	9902      	ldr	r1, [sp, #8]
 8005bec:	9803      	ldr	r0, [sp, #12]
 8005bee:	f7ff fe97 	bl	8005920 <pipe_write>
 8005bf2:	9006      	str	r0, [sp, #24]
    if (done == (size_t)0) {
 8005bf4:	9b06      	ldr	r3, [sp, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10e      	bne.n	8005c18 <chPipeWriteTimeout+0x58>
      msg_t msg;

      chSysLock();
 8005bfa:	f7ff fe49 	bl	8005890 <chSysLock.lto_priv.15>
      msg = chThdSuspendTimeoutS(&pp->wtr, timeout);
 8005bfe:	9b03      	ldr	r3, [sp, #12]
 8005c00:	3318      	adds	r3, #24
 8005c02:	9900      	ldr	r1, [sp, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fd fc53 	bl	80034b0 <chThdSuspendTimeoutS>
 8005c0a:	9005      	str	r0, [sp, #20]
      chSysUnlock();
 8005c0c:	f7ff fe50 	bl	80058b0 <chSysUnlock.lto_priv.15>

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8005c10:	9b05      	ldr	r3, [sp, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00e      	beq.n	8005c34 <chPipeWriteTimeout+0x74>
        break;
 8005c16:	e010      	b.n	8005c3a <chPipeWriteTimeout+0x7a>
      }
    }
    else {
      n  -= done;
 8005c18:	9a01      	ldr	r2, [sp, #4]
 8005c1a:	9b06      	ldr	r3, [sp, #24]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	9301      	str	r3, [sp, #4]
      bp += done;
 8005c20:	9a02      	ldr	r2, [sp, #8]
 8005c22:	9b06      	ldr	r3, [sp, #24]
 8005c24:	4413      	add	r3, r2
 8005c26:	9302      	str	r3, [sp, #8]

      /* Resuming the reader, if present.*/
      chThdResume(&pp->rtr, MSG_OK);
 8005c28:	9b03      	ldr	r3, [sp, #12]
 8005c2a:	331c      	adds	r3, #28
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fd fc96 	bl	8003560 <chThdResume>
  while (n > 0U) {
 8005c34:	9b01      	ldr	r3, [sp, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1d6      	bne.n	8005be8 <chPipeWriteTimeout+0x28>
    }
  }

  PW_UNLOCK(pp);
 8005c3a:	9b03      	ldr	r3, [sp, #12]
 8005c3c:	3330      	adds	r3, #48	; 0x30
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fe f8e6 	bl	8003e10 <chMtxUnlock>

  return max - n;
 8005c44:	9a07      	ldr	r2, [sp, #28]
 8005c46:	9b01      	ldr	r3, [sp, #4]
 8005c48:	1ad3      	subs	r3, r2, r3
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	b009      	add	sp, #36	; 0x24
 8005c4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c52:	bf00      	nop
	...

08005c60 <chPipeReadTimeout>:
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
                         size_t n, sysinterval_t timeout) {
 8005c60:	b500      	push	{lr}
 8005c62:	b089      	sub	sp, #36	; 0x24
 8005c64:	9003      	str	r0, [sp, #12]
 8005c66:	9102      	str	r1, [sp, #8]
 8005c68:	9201      	str	r2, [sp, #4]
 8005c6a:	9300      	str	r3, [sp, #0]
  size_t max = n;
 8005c6c:	9b01      	ldr	r3, [sp, #4]
 8005c6e:	9307      	str	r3, [sp, #28]

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8005c70:	9b03      	ldr	r3, [sp, #12]
 8005c72:	7d1b      	ldrb	r3, [r3, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <chPipeReadTimeout+0x1c>
    return (size_t)0;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e036      	b.n	8005cea <chPipeReadTimeout+0x8a>
  }

  PR_LOCK(pp);
 8005c7c:	9b03      	ldr	r3, [sp, #12]
 8005c7e:	3340      	adds	r3, #64	; 0x40
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fe f815 	bl	8003cb0 <chMtxLock>

  while (n > 0U) {
 8005c86:	e025      	b.n	8005cd4 <chPipeReadTimeout+0x74>
    size_t done;

    done = pipe_read(pp, bp, n);
 8005c88:	9a01      	ldr	r2, [sp, #4]
 8005c8a:	9902      	ldr	r1, [sp, #8]
 8005c8c:	9803      	ldr	r0, [sp, #12]
 8005c8e:	f7ff feb7 	bl	8005a00 <pipe_read>
 8005c92:	9006      	str	r0, [sp, #24]
    if (done == (size_t)0) {
 8005c94:	9b06      	ldr	r3, [sp, #24]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10e      	bne.n	8005cb8 <chPipeReadTimeout+0x58>
      msg_t msg;

      chSysLock();
 8005c9a:	f7ff fdf9 	bl	8005890 <chSysLock.lto_priv.15>
      msg = chThdSuspendTimeoutS(&pp->rtr, timeout);
 8005c9e:	9b03      	ldr	r3, [sp, #12]
 8005ca0:	331c      	adds	r3, #28
 8005ca2:	9900      	ldr	r1, [sp, #0]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fd fc03 	bl	80034b0 <chThdSuspendTimeoutS>
 8005caa:	9005      	str	r0, [sp, #20]
      chSysUnlock();
 8005cac:	f7ff fe00 	bl	80058b0 <chSysUnlock.lto_priv.15>

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8005cb0:	9b05      	ldr	r3, [sp, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00e      	beq.n	8005cd4 <chPipeReadTimeout+0x74>
        break;
 8005cb6:	e010      	b.n	8005cda <chPipeReadTimeout+0x7a>
      }
    }
    else {
      n  -= done;
 8005cb8:	9a01      	ldr	r2, [sp, #4]
 8005cba:	9b06      	ldr	r3, [sp, #24]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	9301      	str	r3, [sp, #4]
      bp += done;
 8005cc0:	9a02      	ldr	r2, [sp, #8]
 8005cc2:	9b06      	ldr	r3, [sp, #24]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	9302      	str	r3, [sp, #8]

      /* Resuming the writer, if present.*/
      chThdResume(&pp->wtr, MSG_OK);
 8005cc8:	9b03      	ldr	r3, [sp, #12]
 8005cca:	3318      	adds	r3, #24
 8005ccc:	2100      	movs	r1, #0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fd fc46 	bl	8003560 <chThdResume>
  while (n > 0U) {
 8005cd4:	9b01      	ldr	r3, [sp, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1d6      	bne.n	8005c88 <chPipeReadTimeout+0x28>
    }
  }

  PR_UNLOCK(pp);
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	3340      	adds	r3, #64	; 0x40
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe f896 	bl	8003e10 <chMtxUnlock>

  return max - n;
 8005ce4:	9a07      	ldr	r2, [sp, #28]
 8005ce6:	9b01      	ldr	r3, [sp, #4]
 8005ce8:	1ad3      	subs	r3, r2, r3
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	b009      	add	sp, #36	; 0x24
 8005cee:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cf2:	bf00      	nop
	...

08005d00 <chSysLock.lto_priv.16>:
static inline void chSysLock(void) {
 8005d00:	b082      	sub	sp, #8
 8005d02:	2330      	movs	r3, #48	; 0x30
 8005d04:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005d06:	9b01      	ldr	r3, [sp, #4]
 8005d08:	f383 8811 	msr	BASEPRI, r3
}
 8005d0c:	bf00      	nop
}
 8005d0e:	bf00      	nop
}
 8005d10:	bf00      	nop
 8005d12:	b002      	add	sp, #8
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
	...

08005d20 <chSysUnlock.lto_priv.16>:
static inline void chSysUnlock(void) {
 8005d20:	b082      	sub	sp, #8
 8005d22:	2300      	movs	r3, #0
 8005d24:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005d26:	9b01      	ldr	r3, [sp, #4]
 8005d28:	f383 8811 	msr	BASEPRI, r3
}
 8005d2c:	bf00      	nop
}
 8005d2e:	bf00      	nop
}
 8005d30:	bf00      	nop
 8005d32:	b002      	add	sp, #8
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
	...

08005d40 <chSemFastWaitI>:
static inline void chSemFastWaitI(semaphore_t *sp) {
 8005d40:	b082      	sub	sp, #8
 8005d42:	9001      	str	r0, [sp, #4]
  sp->cnt--;
 8005d44:	9b01      	ldr	r3, [sp, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	1e5a      	subs	r2, r3, #1
 8005d4a:	9b01      	ldr	r3, [sp, #4]
 8005d4c:	609a      	str	r2, [r3, #8]
}
 8005d4e:	bf00      	nop
 8005d50:	b002      	add	sp, #8
 8005d52:	4770      	bx	lr
	...

08005d60 <chSemFastSignalI.lto_priv.1>:
static inline void chSemFastSignalI(semaphore_t *sp) {
 8005d60:	b082      	sub	sp, #8
 8005d62:	9001      	str	r0, [sp, #4]
  sp->cnt++;
 8005d64:	9b01      	ldr	r3, [sp, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	9b01      	ldr	r3, [sp, #4]
 8005d6c:	609a      	str	r2, [r3, #8]
}
 8005d6e:	bf00      	nop
 8005d70:	b002      	add	sp, #8
 8005d72:	4770      	bx	lr
	...

08005d80 <chSemGetCounterI.lto_priv.0>:
 * @param[in] sp        pointer to a @p semaphore_t structure
 * @return              The semaphore counter value.
 *
 * @iclass
 */
static inline cnt_t chSemGetCounterI(const semaphore_t *sp) {
 8005d80:	b082      	sub	sp, #8
 8005d82:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return sp->cnt;
 8005d84:	9b01      	ldr	r3, [sp, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	b002      	add	sp, #8
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop

08005d90 <hash_get_s>:
 *
 * @notapi
 */
static oc_object_t *hash_get_s(objects_cache_t *ocp,
                               uint32_t group,
                               uint32_t key) {
 8005d90:	b086      	sub	sp, #24
 8005d92:	9003      	str	r0, [sp, #12]
 8005d94:	9102      	str	r1, [sp, #8]
 8005d96:	9201      	str	r2, [sp, #4]
  oc_hash_header_t *hhp;
  oc_object_t *objp;

  /* Hash slot where to search for an hit.*/
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 8005d98:	9b03      	ldr	r3, [sp, #12]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	9902      	ldr	r1, [sp, #8]
 8005d9e:	9b01      	ldr	r3, [sp, #4]
 8005da0:	4419      	add	r1, r3
 8005da2:	9b03      	ldr	r3, [sp, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	400b      	ands	r3, r1
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	4413      	add	r3, r2
 8005dae:	9304      	str	r3, [sp, #16]
  objp = hhp->hash_next;
 8005db0:	9b04      	ldr	r3, [sp, #16]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	9305      	str	r3, [sp, #20]

  /* Scanning the siblings collision list.*/
  while (objp != (oc_object_t *)hhp) {
 8005db6:	e00e      	b.n	8005dd6 <hash_get_s+0x46>
    if ((objp->obj_key == key) && (objp->obj_group == group)) {
 8005db8:	9b05      	ldr	r3, [sp, #20]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	9a01      	ldr	r2, [sp, #4]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d106      	bne.n	8005dd0 <hash_get_s+0x40>
 8005dc2:	9b05      	ldr	r3, [sp, #20]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	9a02      	ldr	r2, [sp, #8]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d101      	bne.n	8005dd0 <hash_get_s+0x40>

      /* Cache hit.*/
      return objp;
 8005dcc:	9b05      	ldr	r3, [sp, #20]
 8005dce:	e007      	b.n	8005de0 <hash_get_s+0x50>
    }
    objp = objp->hash_next;
 8005dd0:	9b05      	ldr	r3, [sp, #20]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	9305      	str	r3, [sp, #20]
  while (objp != (oc_object_t *)hhp) {
 8005dd6:	9a05      	ldr	r2, [sp, #20]
 8005dd8:	9b04      	ldr	r3, [sp, #16]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d1ec      	bne.n	8005db8 <hash_get_s+0x28>
  }

  return NULL;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	b006      	add	sp, #24
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
	...

08005df0 <lru_get_last_s>:
 * @param[out] ocp      pointer to the @p objects_cache_t structure to be
 * @return              The pointer to the retrieved object.
 *
 * @notapi
 */
static oc_object_t *lru_get_last_s(objects_cache_t *ocp) {
 8005df0:	b500      	push	{lr}
 8005df2:	b085      	sub	sp, #20
 8005df4:	9001      	str	r0, [sp, #4]
  oc_object_t *objp;

  while (true) {
    /* Waiting for an object buffer to become available in the LRU.*/
    (void) chSemWaitS(&ocp->lru_sem);
 8005df6:	9b01      	ldr	r3, [sp, #4]
 8005df8:	3330      	adds	r3, #48	; 0x30
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fd fd78 	bl	80038f0 <chSemWaitS>

    /* Now an object buffer is in the LRU for sure, taking it from the
       LRU tail.*/
    objp = ocp->lru.lru_prev;
 8005e00:	9b01      	ldr	r3, [sp, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	9303      	str	r3, [sp, #12]
    chDbgAssert((objp->obj_flags & OC_FLAG_INLRU) == OC_FLAG_INLRU,
                "not in LRU");
    chDbgAssert(chSemGetCounterI(&objp->obj_sem) == (cnt_t)1,
                "semaphore counter not 1");

    LRU_REMOVE(objp);
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	9a03      	ldr	r2, [sp, #12]
 8005e0c:	6892      	ldr	r2, [r2, #8]
 8005e0e:	609a      	str	r2, [r3, #8]
 8005e10:	9b03      	ldr	r3, [sp, #12]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	9a03      	ldr	r2, [sp, #12]
 8005e16:	68d2      	ldr	r2, [r2, #12]
 8005e18:	60da      	str	r2, [r3, #12]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 8005e1a:	9b03      	ldr	r3, [sp, #12]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	f023 0201 	bic.w	r2, r3, #1
 8005e22:	9b03      	ldr	r3, [sp, #12]
 8005e24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Getting the object semaphore, we know there is no wait so
       using the "fast" variant.*/
    chSemFastWaitI(&objp->obj_sem);
 8005e26:	9b03      	ldr	r3, [sp, #12]
 8005e28:	3318      	adds	r3, #24
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff ff88 	bl	8005d40 <chSemFastWaitI>

    /* If it is a buffer not needing (lazy) write then it can be used
       right away.*/
    if ((objp->obj_flags & OC_FLAG_LAZYWRITE) == 0U) {
 8005e30:	9b03      	ldr	r3, [sp, #12]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d114      	bne.n	8005e66 <lru_get_last_s+0x76>

      /* Removing from hash table if required.*/
      if ((objp->obj_flags & OC_FLAG_INHASH) != 0U) {
 8005e3c:	9b03      	ldr	r3, [sp, #12]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d009      	beq.n	8005e5c <lru_get_last_s+0x6c>
        HASH_REMOVE(objp);
 8005e48:	9b03      	ldr	r3, [sp, #12]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	9a03      	ldr	r2, [sp, #12]
 8005e4e:	6812      	ldr	r2, [r2, #0]
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	9b03      	ldr	r3, [sp, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	9a03      	ldr	r2, [sp, #12]
 8005e58:	6852      	ldr	r2, [r2, #4]
 8005e5a:	605a      	str	r2, [r3, #4]
      }

      /* Removing all flags, it is "new" now.*/
      objp->obj_flags = 0U;
 8005e5c:	9b03      	ldr	r3, [sp, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	625a      	str	r2, [r3, #36]	; 0x24

      return objp;
 8005e62:	9b03      	ldr	r3, [sp, #12]
 8005e64:	e00d      	b.n	8005e82 <lru_get_last_s+0x92>
    }

    /* Out of critical section.*/
    chSysUnlock();
 8005e66:	f7ff ff5b 	bl	8005d20 <chSysUnlock.lto_priv.16>

   /* Invoking the writer asynchronously, it will release the buffer once it
      is written. It is responsibility of the write function to release
      the buffer.*/
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 8005e6a:	9b03      	ldr	r3, [sp, #12]
 8005e6c:	2222      	movs	r2, #34	; 0x22
 8005e6e:	625a      	str	r2, [r3, #36]	; 0x24
    (void) ocp->writef(ocp, objp, true);
 8005e70:	9b01      	ldr	r3, [sp, #4]
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	2201      	movs	r2, #1
 8005e76:	9903      	ldr	r1, [sp, #12]
 8005e78:	9801      	ldr	r0, [sp, #4]
 8005e7a:	4798      	blx	r3

    /* Critical section enter again.*/
    chSysLock();
 8005e7c:	f7ff ff40 	bl	8005d00 <chSysLock.lto_priv.16>
    (void) chSemWaitS(&ocp->lru_sem);
 8005e80:	e7b9      	b.n	8005df6 <lru_get_last_s+0x6>
  }
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	b005      	add	sp, #20
 8005e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e8a:	bf00      	nop
 8005e8c:	0000      	movs	r0, r0
	...

08005e90 <chCacheObjectInit>:
                       oc_hash_header_t *hashp,
                       ucnt_t objn,
                       size_t objsz,
                       void *objvp,
                       oc_readf_t readf,
                       oc_writef_t writef) {
 8005e90:	b500      	push	{lr}
 8005e92:	b087      	sub	sp, #28
 8005e94:	9003      	str	r0, [sp, #12]
 8005e96:	9102      	str	r1, [sp, #8]
 8005e98:	9201      	str	r2, [sp, #4]
 8005e9a:	9300      	str	r3, [sp, #0]
             ((hashn & (hashn - (ucnt_t)1)) == (ucnt_t)0) &&
             (objn > (ucnt_t)0) && (hashn >= objn) &&
             (objsz >= sizeof (oc_object_t)) &&
             ((objsz & (PORT_NATURAL_ALIGN - 1U)) == 0U));

  chSemObjectInit(&ocp->cache_sem, (cnt_t)1);
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	3324      	adds	r3, #36	; 0x24
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fd fccc 	bl	8003840 <chSemObjectInit>
  chSemObjectInit(&ocp->lru_sem, (cnt_t)objn);
 8005ea8:	9b03      	ldr	r3, [sp, #12]
 8005eaa:	3330      	adds	r3, #48	; 0x30
 8005eac:	9a00      	ldr	r2, [sp, #0]
 8005eae:	4611      	mov	r1, r2
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fd fcc5 	bl	8003840 <chSemObjectInit>
  ocp->hashn            = hashn;
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	9a02      	ldr	r2, [sp, #8]
 8005eba:	601a      	str	r2, [r3, #0]
  ocp->hashp            = hashp;
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	9a01      	ldr	r2, [sp, #4]
 8005ec0:	605a      	str	r2, [r3, #4]
  ocp->objn             = objn;
 8005ec2:	9b03      	ldr	r3, [sp, #12]
 8005ec4:	9a00      	ldr	r2, [sp, #0]
 8005ec6:	609a      	str	r2, [r3, #8]
  ocp->objvp            = objvp;
 8005ec8:	9b03      	ldr	r3, [sp, #12]
 8005eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ecc:	611a      	str	r2, [r3, #16]
  ocp->readf            = readf;
 8005ece:	9b03      	ldr	r3, [sp, #12]
 8005ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ed2:	63da      	str	r2, [r3, #60]	; 0x3c
  ocp->writef           = writef;
 8005ed4:	9b03      	ldr	r3, [sp, #12]
 8005ed6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ed8:	641a      	str	r2, [r3, #64]	; 0x40
  ocp->lru.hash_next    = NULL;
 8005eda:	9b03      	ldr	r3, [sp, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	615a      	str	r2, [r3, #20]
  ocp->lru.hash_prev    = NULL;
 8005ee0:	9b03      	ldr	r3, [sp, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	619a      	str	r2, [r3, #24]
  ocp->lru.lru_next     = (oc_object_t *)&ocp->lru;
 8005ee6:	9b03      	ldr	r3, [sp, #12]
 8005ee8:	f103 0214 	add.w	r2, r3, #20
 8005eec:	9b03      	ldr	r3, [sp, #12]
 8005eee:	61da      	str	r2, [r3, #28]
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8005ef0:	9b03      	ldr	r3, [sp, #12]
 8005ef2:	f103 0214 	add.w	r2, r3, #20
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	621a      	str	r2, [r3, #32]

  /* Hash headers initialization.*/
  do {
    hashp->hash_next = (oc_object_t *)hashp;
 8005efa:	9b01      	ldr	r3, [sp, #4]
 8005efc:	9a01      	ldr	r2, [sp, #4]
 8005efe:	601a      	str	r2, [r3, #0]
    hashp->hash_prev = (oc_object_t *)hashp;
 8005f00:	9b01      	ldr	r3, [sp, #4]
 8005f02:	9a01      	ldr	r2, [sp, #4]
 8005f04:	605a      	str	r2, [r3, #4]
    hashp++;
 8005f06:	9b01      	ldr	r3, [sp, #4]
 8005f08:	3308      	adds	r3, #8
 8005f0a:	9301      	str	r3, [sp, #4]
  } while (hashp < &ocp->hashp[ocp->hashn]);
 8005f0c:	9b03      	ldr	r3, [sp, #12]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	9b03      	ldr	r3, [sp, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	4413      	add	r3, r2
 8005f18:	9a01      	ldr	r2, [sp, #4]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d3ed      	bcc.n	8005efa <chCacheObjectInit+0x6a>

  /* Object headers initialization.*/
  do {
    oc_object_t *objp = (oc_object_t *)objvp;
 8005f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f20:	9305      	str	r3, [sp, #20]

    chSemObjectInit(&objp->obj_sem, (cnt_t)1);
 8005f22:	9b05      	ldr	r3, [sp, #20]
 8005f24:	3318      	adds	r3, #24
 8005f26:	2101      	movs	r1, #1
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fd fc89 	bl	8003840 <chSemObjectInit>
    LRU_INSERT_HEAD(ocp, objp);
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	69da      	ldr	r2, [r3, #28]
 8005f32:	9b05      	ldr	r3, [sp, #20]
 8005f34:	609a      	str	r2, [r3, #8]
 8005f36:	9b03      	ldr	r3, [sp, #12]
 8005f38:	f103 0214 	add.w	r2, r3, #20
 8005f3c:	9b05      	ldr	r3, [sp, #20]
 8005f3e:	60da      	str	r2, [r3, #12]
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	9a05      	ldr	r2, [sp, #20]
 8005f46:	60da      	str	r2, [r3, #12]
 8005f48:	9b03      	ldr	r3, [sp, #12]
 8005f4a:	9a05      	ldr	r2, [sp, #20]
 8005f4c:	61da      	str	r2, [r3, #28]
    objp->obj_group = 0U;
 8005f4e:	9b05      	ldr	r3, [sp, #20]
 8005f50:	2200      	movs	r2, #0
 8005f52:	611a      	str	r2, [r3, #16]
    objp->obj_key   = 0U;
 8005f54:	9b05      	ldr	r3, [sp, #20]
 8005f56:	2200      	movs	r2, #0
 8005f58:	615a      	str	r2, [r3, #20]
    objp->obj_flags = OC_FLAG_INLRU;
 8005f5a:	9b05      	ldr	r3, [sp, #20]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24
    objp->dptr      = NULL;
 8005f60:	9b05      	ldr	r3, [sp, #20]
 8005f62:	2200      	movs	r2, #0
 8005f64:	629a      	str	r2, [r3, #40]	; 0x28
    objvp = (void *)((uint8_t *)objvp + objsz);
 8005f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f68:	9b08      	ldr	r3, [sp, #32]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	9309      	str	r3, [sp, #36]	; 0x24
    objn--;
 8005f6e:	9b00      	ldr	r3, [sp, #0]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	9300      	str	r3, [sp, #0]
  } while (objn > (ucnt_t)0);
 8005f74:	9b00      	ldr	r3, [sp, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1d1      	bne.n	8005f1e <chCacheObjectInit+0x8e>
}
 8005f7a:	bf00      	nop
 8005f7c:	bf00      	nop
 8005f7e:	b007      	add	sp, #28
 8005f80:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005f90 <chCacheGetObject>:
 *
 * @api
 */
oc_object_t *chCacheGetObject(objects_cache_t *ocp,
                              uint32_t group,
                              uint32_t key) {
 8005f90:	b500      	push	{lr}
 8005f92:	b087      	sub	sp, #28
 8005f94:	9003      	str	r0, [sp, #12]
 8005f96:	9102      	str	r1, [sp, #8]
 8005f98:	9201      	str	r2, [sp, #4]
  oc_object_t *objp;

  /* Critical section enter, the hash check operation is fast.*/
  chSysLock();
 8005f9a:	f7ff feb1 	bl	8005d00 <chSysLock.lto_priv.16>

  /* Checking the cache for a hit.*/
  objp = hash_get_s(ocp, group, key);
 8005f9e:	9a01      	ldr	r2, [sp, #4]
 8005fa0:	9902      	ldr	r1, [sp, #8]
 8005fa2:	9803      	ldr	r0, [sp, #12]
 8005fa4:	f7ff fef4 	bl	8005d90 <hash_get_s>
 8005fa8:	9005      	str	r0, [sp, #20]
  if (objp != NULL) {
 8005faa:	9b05      	ldr	r3, [sp, #20]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d023      	beq.n	8005ff8 <chCacheGetObject+0x68>
    chDbgAssert((objp->obj_flags & OC_FLAG_INHASH) == OC_FLAG_INHASH,
                "not in hash");

    /* Cache hit, checking if the buffer is owned by some
       other thread.*/
    if (chSemGetCounterI(&objp->obj_sem) > (cnt_t)0) {
 8005fb0:	9b05      	ldr	r3, [sp, #20]
 8005fb2:	3318      	adds	r3, #24
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff fee3 	bl	8005d80 <chSemGetCounterI.lto_priv.0>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dd15      	ble.n	8005fec <chCacheGetObject+0x5c>

      chDbgAssert((objp->obj_flags & OC_FLAG_INLRU) == OC_FLAG_INLRU,
                  "not in LRU");

      /* Removing the object from LRU, now it is "owned".*/
      LRU_REMOVE(objp);
 8005fc0:	9b05      	ldr	r3, [sp, #20]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	9a05      	ldr	r2, [sp, #20]
 8005fc6:	6892      	ldr	r2, [r2, #8]
 8005fc8:	609a      	str	r2, [r3, #8]
 8005fca:	9b05      	ldr	r3, [sp, #20]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	9a05      	ldr	r2, [sp, #20]
 8005fd0:	68d2      	ldr	r2, [r2, #12]
 8005fd2:	60da      	str	r2, [r3, #12]
      objp->obj_flags &= ~OC_FLAG_INLRU;
 8005fd4:	9b05      	ldr	r3, [sp, #20]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	f023 0201 	bic.w	r2, r3, #1
 8005fdc:	9b05      	ldr	r3, [sp, #20]
 8005fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Getting the object semaphore, we know there is no wait so
         using the "fast" variant.*/
      chSemFastWaitI(&objp->obj_sem);
 8005fe0:	9b05      	ldr	r3, [sp, #20]
 8005fe2:	3318      	adds	r3, #24
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7ff feab 	bl	8005d40 <chSemFastWaitI>
 8005fea:	e02c      	b.n	8006046 <chCacheGetObject+0xb6>
         need to wait.*/

      chDbgAssert((objp->obj_flags & OC_FLAG_INLRU) == 0U, "in LRU");

      /* Waiting on the buffer semaphore.*/
      (void) chSemWaitS(&objp->obj_sem);
 8005fec:	9b05      	ldr	r3, [sp, #20]
 8005fee:	3318      	adds	r3, #24
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fd fc7d 	bl	80038f0 <chSemWaitS>
 8005ff6:	e026      	b.n	8006046 <chCacheGetObject+0xb6>
    }
  }
  else {
    /* Cache miss, getting an object buffer from the LRU list.*/
    objp = lru_get_last_s(ocp);
 8005ff8:	9803      	ldr	r0, [sp, #12]
 8005ffa:	f7ff fef9 	bl	8005df0 <lru_get_last_s>
 8005ffe:	9005      	str	r0, [sp, #20]

    /* Naming this object and publishing it in the hash table.*/
    objp->obj_group = group;
 8006000:	9b05      	ldr	r3, [sp, #20]
 8006002:	9a02      	ldr	r2, [sp, #8]
 8006004:	611a      	str	r2, [r3, #16]
    objp->obj_key   = key;
 8006006:	9b05      	ldr	r3, [sp, #20]
 8006008:	9a01      	ldr	r2, [sp, #4]
 800600a:	615a      	str	r2, [r3, #20]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 800600c:	9b05      	ldr	r3, [sp, #20]
 800600e:	220a      	movs	r2, #10
 8006010:	625a      	str	r2, [r3, #36]	; 0x24
    HASH_INSERT(ocp, objp, group, key);
 8006012:	9b03      	ldr	r3, [sp, #12]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	9902      	ldr	r1, [sp, #8]
 8006018:	9b01      	ldr	r3, [sp, #4]
 800601a:	4419      	add	r1, r3
 800601c:	9b03      	ldr	r3, [sp, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3b01      	subs	r3, #1
 8006022:	400b      	ands	r3, r1
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	4413      	add	r3, r2
 8006028:	9304      	str	r3, [sp, #16]
 800602a:	9b04      	ldr	r3, [sp, #16]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	9b05      	ldr	r3, [sp, #20]
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	9b05      	ldr	r3, [sp, #20]
 8006034:	9a04      	ldr	r2, [sp, #16]
 8006036:	605a      	str	r2, [r3, #4]
 8006038:	9b04      	ldr	r3, [sp, #16]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	9a05      	ldr	r2, [sp, #20]
 800603e:	605a      	str	r2, [r3, #4]
 8006040:	9b04      	ldr	r3, [sp, #16]
 8006042:	9a05      	ldr	r2, [sp, #20]
 8006044:	601a      	str	r2, [r3, #0]
  }

  /* Out of critical section and returning the object.*/
  chSysUnlock();
 8006046:	f7ff fe6b 	bl	8005d20 <chSysUnlock.lto_priv.16>

  return objp;
 800604a:	9b05      	ldr	r3, [sp, #20]
}
 800604c:	4618      	mov	r0, r3
 800604e:	b007      	add	sp, #28
 8006050:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006060 <chCacheReleaseObjectI>:
 * @param[in] objp      pointer to the @p oc_object_t structure
 *
 * @iclass
 */
void chCacheReleaseObjectI(objects_cache_t *ocp,
                           oc_object_t *objp) {
 8006060:	b500      	push	{lr}
 8006062:	b083      	sub	sp, #12
 8006064:	9001      	str	r0, [sp, #4]
 8006066:	9100      	str	r1, [sp, #0]
  chDbgAssert(chSemGetCounterI(&objp->obj_sem) <= (cnt_t)0,
              "semaphore counter greater than 0");

  /* If some thread is waiting for this specific buffer then it is
     handed directly without going through the LRU.*/
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8006068:	9b00      	ldr	r3, [sp, #0]
 800606a:	3318      	adds	r3, #24
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff fe87 	bl	8005d80 <chSemGetCounterI.lto_priv.0>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	da0b      	bge.n	8006090 <chCacheReleaseObjectI+0x30>
    /* Clearing all flags except those that are still meaningful, note,
       OC_FLAG_NOTSYNC and OC_FLAG_LAZYWRITE are passed, the other thread
       will handle them.*/
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8006078:	9b00      	ldr	r3, [sp, #0]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	f003 021a 	and.w	r2, r3, #26
 8006080:	9b00      	ldr	r3, [sp, #0]
 8006082:	625a      	str	r2, [r3, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 8006084:	9b00      	ldr	r3, [sp, #0]
 8006086:	3318      	adds	r3, #24
 8006088:	4618      	mov	r0, r3
 800608a:	f7fd fcc9 	bl	8003a20 <chSemSignalI>
    return;
 800608e:	e066      	b.n	800615e <chCacheReleaseObjectI+0xfe>
  }

  /* If the object specifies OC_FLAG_NOTSYNC then it must be invalidated
     and removed from the hash table.*/
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 8006090:	9b00      	ldr	r3, [sp, #0]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b00      	cmp	r3, #0
 800609a:	d023      	beq.n	80060e4 <chCacheReleaseObjectI+0x84>
    HASH_REMOVE(objp);
 800609c:	9b00      	ldr	r3, [sp, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	9a00      	ldr	r2, [sp, #0]
 80060a2:	6812      	ldr	r2, [r2, #0]
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	9b00      	ldr	r3, [sp, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	9a00      	ldr	r2, [sp, #0]
 80060ac:	6852      	ldr	r2, [r2, #4]
 80060ae:	605a      	str	r2, [r3, #4]
    LRU_INSERT_TAIL(ocp, objp);
 80060b0:	9b01      	ldr	r3, [sp, #4]
 80060b2:	6a1a      	ldr	r2, [r3, #32]
 80060b4:	9b00      	ldr	r3, [sp, #0]
 80060b6:	60da      	str	r2, [r3, #12]
 80060b8:	9b01      	ldr	r3, [sp, #4]
 80060ba:	f103 0214 	add.w	r2, r3, #20
 80060be:	9b00      	ldr	r3, [sp, #0]
 80060c0:	609a      	str	r2, [r3, #8]
 80060c2:	9b01      	ldr	r3, [sp, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	9a00      	ldr	r2, [sp, #0]
 80060c8:	609a      	str	r2, [r3, #8]
 80060ca:	9b01      	ldr	r3, [sp, #4]
 80060cc:	9a00      	ldr	r2, [sp, #0]
 80060ce:	621a      	str	r2, [r3, #32]
    objp->obj_group = 0U;
 80060d0:	9b00      	ldr	r3, [sp, #0]
 80060d2:	2200      	movs	r2, #0
 80060d4:	611a      	str	r2, [r3, #16]
    objp->obj_key   = 0U;
 80060d6:	9b00      	ldr	r3, [sp, #0]
 80060d8:	2200      	movs	r2, #0
 80060da:	615a      	str	r2, [r3, #20]
    objp->obj_flags = OC_FLAG_INLRU;
 80060dc:	9b00      	ldr	r3, [sp, #0]
 80060de:	2201      	movs	r2, #1
 80060e0:	625a      	str	r2, [r3, #36]	; 0x24
 80060e2:	e032      	b.n	800614a <chCacheReleaseObjectI+0xea>
  }
  else {
    /* LRU insertion point depends on the OC_FLAG_FORGET flag.*/
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 80060e4:	9b00      	ldr	r3, [sp, #0]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d110      	bne.n	8006112 <chCacheReleaseObjectI+0xb2>
      /* Placing it on head.*/
      LRU_INSERT_HEAD(ocp, objp);
 80060f0:	9b01      	ldr	r3, [sp, #4]
 80060f2:	69da      	ldr	r2, [r3, #28]
 80060f4:	9b00      	ldr	r3, [sp, #0]
 80060f6:	609a      	str	r2, [r3, #8]
 80060f8:	9b01      	ldr	r3, [sp, #4]
 80060fa:	f103 0214 	add.w	r2, r3, #20
 80060fe:	9b00      	ldr	r3, [sp, #0]
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	9b01      	ldr	r3, [sp, #4]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	9a00      	ldr	r2, [sp, #0]
 8006108:	60da      	str	r2, [r3, #12]
 800610a:	9b01      	ldr	r3, [sp, #4]
 800610c:	9a00      	ldr	r2, [sp, #0]
 800610e:	61da      	str	r2, [r3, #28]
 8006110:	e00f      	b.n	8006132 <chCacheReleaseObjectI+0xd2>
    }
    else {
      /* Low priority data, placing it on tail.*/
      LRU_INSERT_TAIL(ocp, objp);
 8006112:	9b01      	ldr	r3, [sp, #4]
 8006114:	6a1a      	ldr	r2, [r3, #32]
 8006116:	9b00      	ldr	r3, [sp, #0]
 8006118:	60da      	str	r2, [r3, #12]
 800611a:	9b01      	ldr	r3, [sp, #4]
 800611c:	f103 0214 	add.w	r2, r3, #20
 8006120:	9b00      	ldr	r3, [sp, #0]
 8006122:	609a      	str	r2, [r3, #8]
 8006124:	9b01      	ldr	r3, [sp, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	9a00      	ldr	r2, [sp, #0]
 800612a:	609a      	str	r2, [r3, #8]
 800612c:	9b01      	ldr	r3, [sp, #4]
 800612e:	9a00      	ldr	r2, [sp, #0]
 8006130:	621a      	str	r2, [r3, #32]
    }
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8006132:	9b00      	ldr	r3, [sp, #0]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	f003 0212 	and.w	r2, r3, #18
 800613a:	9b00      	ldr	r3, [sp, #0]
 800613c:	625a      	str	r2, [r3, #36]	; 0x24
    objp->obj_flags |= OC_FLAG_INLRU;
 800613e:	9b00      	ldr	r3, [sp, #0]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	f043 0201 	orr.w	r2, r3, #1
 8006146:	9b00      	ldr	r3, [sp, #0]
 8006148:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Increasing the LRU counter semaphore.*/
  chSemSignalI(&ocp->lru_sem);
 800614a:	9b01      	ldr	r3, [sp, #4]
 800614c:	3330      	adds	r3, #48	; 0x30
 800614e:	4618      	mov	r0, r3
 8006150:	f7fd fc66 	bl	8003a20 <chSemSignalI>

  /* Releasing the object, we know there are no threads waiting so
     using the "fast" signal variant.*/
  chSemFastSignalI(&objp->obj_sem);
 8006154:	9b00      	ldr	r3, [sp, #0]
 8006156:	3318      	adds	r3, #24
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff fe01 	bl	8005d60 <chSemFastSignalI.lto_priv.1>
}
 800615e:	b003      	add	sp, #12
 8006160:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006170 <chCacheReadObject>:
 *
 * @api
 */
bool chCacheReadObject(objects_cache_t *ocp,
                       oc_object_t *objp,
                       bool async) {
 8006170:	b500      	push	{lr}
 8006172:	b085      	sub	sp, #20
 8006174:	9003      	str	r0, [sp, #12]
 8006176:	9102      	str	r1, [sp, #8]
 8006178:	4613      	mov	r3, r2
 800617a:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Marking it as OC_FLAG_NOTSYNC because the read operation is going
     to corrupt it in case of failure. It is responsibility of the read
     implementation to clear it if the operation succeeds.*/
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 800617e:	9b02      	ldr	r3, [sp, #8]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	f043 0208 	orr.w	r2, r3, #8
 8006186:	9b02      	ldr	r3, [sp, #8]
 8006188:	625a      	str	r2, [r3, #36]	; 0x24

  return ocp->readf(ocp, objp, async);
 800618a:	9b03      	ldr	r3, [sp, #12]
 800618c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006192:	9902      	ldr	r1, [sp, #8]
 8006194:	9803      	ldr	r0, [sp, #12]
 8006196:	4798      	blx	r3
 8006198:	4603      	mov	r3, r0
}
 800619a:	4618      	mov	r0, r3
 800619c:	b005      	add	sp, #20
 800619e:	f85d fb04 	ldr.w	pc, [sp], #4
 80061a2:	bf00      	nop
	...

080061b0 <chSysLock.lto_priv.17>:
static inline void chSysLock(void) {
 80061b0:	b082      	sub	sp, #8
 80061b2:	2330      	movs	r3, #48	; 0x30
 80061b4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80061b6:	9b01      	ldr	r3, [sp, #4]
 80061b8:	f383 8811 	msr	BASEPRI, r3
}
 80061bc:	bf00      	nop
}
 80061be:	bf00      	nop
}
 80061c0:	bf00      	nop
 80061c2:	b002      	add	sp, #8
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
	...

080061d0 <chSysUnlock.lto_priv.17>:
static inline void chSysUnlock(void) {
 80061d0:	b082      	sub	sp, #8
 80061d2:	2300      	movs	r3, #0
 80061d4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80061d6:	9b01      	ldr	r3, [sp, #4]
 80061d8:	f383 8811 	msr	BASEPRI, r3
}
 80061dc:	bf00      	nop
}
 80061de:	bf00      	nop
}
 80061e0:	bf00      	nop
 80061e2:	b002      	add	sp, #8
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
	...

080061f0 <chMsgWait.lto_priv.0>:
static inline thread_t *chMsgWait(void) {
 80061f0:	b500      	push	{lr}
 80061f2:	b083      	sub	sp, #12
  chSysLock();
 80061f4:	f7ff ffdc 	bl	80061b0 <chSysLock.lto_priv.17>
  tp = chMsgWaitS();
 80061f8:	f7fe fbf2 	bl	80049e0 <chMsgWaitS>
 80061fc:	9001      	str	r0, [sp, #4]
  chSysUnlock();
 80061fe:	f7ff ffe7 	bl	80061d0 <chSysUnlock.lto_priv.17>
  return tp;
 8006202:	9b01      	ldr	r3, [sp, #4]
}
 8006204:	4618      	mov	r0, r3
 8006206:	b003      	add	sp, #12
 8006208:	f85d fb04 	ldr.w	pc, [sp], #4
 800620c:	0000      	movs	r0, r0
	...

08006210 <chMsgGet.lto_priv.0>:
static inline msg_t chMsgGet(thread_t *tp) {
 8006210:	b082      	sub	sp, #8
 8006212:	9001      	str	r0, [sp, #4]
  return tp->u.sentmsg;
 8006214:	9b01      	ldr	r3, [sp, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8006218:	4618      	mov	r0, r3
 800621a:	b002      	add	sp, #8
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop

08006220 <__ch_delegate_fn0>:
 * @brief   Veneer for functions with no parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn0(va_list *argsp) {
 8006220:	b500      	push	{lr}
 8006222:	b085      	sub	sp, #20
 8006224:	9001      	str	r0, [sp, #4]
  delegate_fn0_t fn0 = (delegate_fn0_t)va_arg(*argsp, delegate_fn0_t);
 8006226:	9b01      	ldr	r3, [sp, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	1d19      	adds	r1, r3, #4
 800622c:	9a01      	ldr	r2, [sp, #4]
 800622e:	6011      	str	r1, [r2, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	9303      	str	r3, [sp, #12]
  return fn0();
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	4798      	blx	r3
 8006238:	4603      	mov	r3, r0
}
 800623a:	4618      	mov	r0, r3
 800623c:	b005      	add	sp, #20
 800623e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006242:	bf00      	nop
	...

08006250 <__ch_delegate_fn1>:
 * @brief   Veneer for functions with one parameter.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn1(va_list *argsp) {
 8006250:	b500      	push	{lr}
 8006252:	b085      	sub	sp, #20
 8006254:	9001      	str	r0, [sp, #4]
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8006256:	9b01      	ldr	r3, [sp, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	1d19      	adds	r1, r3, #4
 800625c:	9a01      	ldr	r2, [sp, #4]
 800625e:	6011      	str	r1, [r2, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	9303      	str	r3, [sp, #12]
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8006264:	9b01      	ldr	r3, [sp, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	1d19      	adds	r1, r3, #4
 800626a:	9a01      	ldr	r2, [sp, #4]
 800626c:	6011      	str	r1, [r2, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	9302      	str	r3, [sp, #8]
  return fn1(p1);
 8006272:	9b03      	ldr	r3, [sp, #12]
 8006274:	9802      	ldr	r0, [sp, #8]
 8006276:	4798      	blx	r3
 8006278:	4603      	mov	r3, r0
}
 800627a:	4618      	mov	r0, r3
 800627c:	b005      	add	sp, #20
 800627e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006282:	bf00      	nop
	...

08006290 <__ch_delegate_fn2>:
 * @brief   Veneer for functions with two parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn2(va_list *argsp) {
 8006290:	b500      	push	{lr}
 8006292:	b087      	sub	sp, #28
 8006294:	9001      	str	r0, [sp, #4]
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8006296:	9b01      	ldr	r3, [sp, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	1d19      	adds	r1, r3, #4
 800629c:	9a01      	ldr	r2, [sp, #4]
 800629e:	6011      	str	r1, [r2, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	9305      	str	r3, [sp, #20]
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 80062a4:	9b01      	ldr	r3, [sp, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	1d19      	adds	r1, r3, #4
 80062aa:	9a01      	ldr	r2, [sp, #4]
 80062ac:	6011      	str	r1, [r2, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	9304      	str	r3, [sp, #16]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80062b2:	9b01      	ldr	r3, [sp, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	1d19      	adds	r1, r3, #4
 80062b8:	9a01      	ldr	r2, [sp, #4]
 80062ba:	6011      	str	r1, [r2, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	9303      	str	r3, [sp, #12]
  return fn2(p1, p2);
 80062c0:	9b05      	ldr	r3, [sp, #20]
 80062c2:	9903      	ldr	r1, [sp, #12]
 80062c4:	9804      	ldr	r0, [sp, #16]
 80062c6:	4798      	blx	r3
 80062c8:	4603      	mov	r3, r0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	b007      	add	sp, #28
 80062ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80062d2:	bf00      	nop
	...

080062e0 <__ch_delegate_fn3>:
 * @brief   Veneer for functions with three parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn3(va_list *argsp) {
 80062e0:	b500      	push	{lr}
 80062e2:	b087      	sub	sp, #28
 80062e4:	9001      	str	r0, [sp, #4]
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 80062e6:	9b01      	ldr	r3, [sp, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	1d19      	adds	r1, r3, #4
 80062ec:	9a01      	ldr	r2, [sp, #4]
 80062ee:	6011      	str	r1, [r2, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	9305      	str	r3, [sp, #20]
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 80062f4:	9b01      	ldr	r3, [sp, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	1d19      	adds	r1, r3, #4
 80062fa:	9a01      	ldr	r2, [sp, #4]
 80062fc:	6011      	str	r1, [r2, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	9304      	str	r3, [sp, #16]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8006302:	9b01      	ldr	r3, [sp, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	1d19      	adds	r1, r3, #4
 8006308:	9a01      	ldr	r2, [sp, #4]
 800630a:	6011      	str	r1, [r2, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	9303      	str	r3, [sp, #12]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 8006310:	9b01      	ldr	r3, [sp, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	1d19      	adds	r1, r3, #4
 8006316:	9a01      	ldr	r2, [sp, #4]
 8006318:	6011      	str	r1, [r2, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	9302      	str	r3, [sp, #8]
  return fn3(p1, p2, p3);
 800631e:	9b05      	ldr	r3, [sp, #20]
 8006320:	9a02      	ldr	r2, [sp, #8]
 8006322:	9903      	ldr	r1, [sp, #12]
 8006324:	9804      	ldr	r0, [sp, #16]
 8006326:	4798      	blx	r3
 8006328:	4603      	mov	r3, r0
}
 800632a:	4618      	mov	r0, r3
 800632c:	b007      	add	sp, #28
 800632e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006332:	bf00      	nop
	...

08006340 <__ch_delegate_fn4>:
 * @brief   Veneer for functions with four parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn4(va_list *argsp) {
 8006340:	b510      	push	{r4, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	9001      	str	r0, [sp, #4]
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 8006346:	9b01      	ldr	r3, [sp, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	1d19      	adds	r1, r3, #4
 800634c:	9a01      	ldr	r2, [sp, #4]
 800634e:	6011      	str	r1, [r2, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	9307      	str	r3, [sp, #28]
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8006354:	9b01      	ldr	r3, [sp, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	1d19      	adds	r1, r3, #4
 800635a:	9a01      	ldr	r2, [sp, #4]
 800635c:	6011      	str	r1, [r2, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	9306      	str	r3, [sp, #24]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8006362:	9b01      	ldr	r3, [sp, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	1d19      	adds	r1, r3, #4
 8006368:	9a01      	ldr	r2, [sp, #4]
 800636a:	6011      	str	r1, [r2, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	9305      	str	r3, [sp, #20]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 8006370:	9b01      	ldr	r3, [sp, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	1d19      	adds	r1, r3, #4
 8006376:	9a01      	ldr	r2, [sp, #4]
 8006378:	6011      	str	r1, [r2, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	9304      	str	r3, [sp, #16]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 800637e:	9b01      	ldr	r3, [sp, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	1d19      	adds	r1, r3, #4
 8006384:	9a01      	ldr	r2, [sp, #4]
 8006386:	6011      	str	r1, [r2, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	9303      	str	r3, [sp, #12]
  return fn4(p1, p2, p3, p4);
 800638c:	9c07      	ldr	r4, [sp, #28]
 800638e:	9b03      	ldr	r3, [sp, #12]
 8006390:	9a04      	ldr	r2, [sp, #16]
 8006392:	9905      	ldr	r1, [sp, #20]
 8006394:	9806      	ldr	r0, [sp, #24]
 8006396:	47a0      	blx	r4
 8006398:	4603      	mov	r3, r0
}
 800639a:	4618      	mov	r0, r3
 800639c:	b008      	add	sp, #32
 800639e:	bd10      	pop	{r4, pc}

080063a0 <chDelegateCallVeneer>:
 * @param[in] veneer    pointer to the veneer function to be called
 * @param[in] ...       variable number of parameters
 * @return              The function return value casted to msg_t. It is
 *                      garbage for functions returning @p void.
 */
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 80063a0:	b40e      	push	{r1, r2, r3}
 80063a2:	b500      	push	{lr}
 80063a4:	b086      	sub	sp, #24
 80063a6:	9001      	str	r0, [sp, #4]
  va_list args;
  call_message_t cm;
  msg_t msg;

  va_start(args, veneer);
 80063a8:	ab08      	add	r3, sp, #32
 80063aa:	9304      	str	r3, [sp, #16]

  /* Preparing the call message.*/
  cm.veneer = veneer;
 80063ac:	9b07      	ldr	r3, [sp, #28]
 80063ae:	9302      	str	r3, [sp, #8]
  cm.argsp  = &args;
 80063b0:	ab04      	add	r3, sp, #16
 80063b2:	9303      	str	r3, [sp, #12]
  (void)cm; /* Suppresses a lint warning.*/

  /* Sending the message to the dispatcher thread, the return value is
     contained in the returned message.*/
  msg = chMsgSend(tp, (msg_t)&cm);
 80063b4:	ab02      	add	r3, sp, #8
 80063b6:	4619      	mov	r1, r3
 80063b8:	9801      	ldr	r0, [sp, #4]
 80063ba:	f7fe fae9 	bl	8004990 <chMsgSend>
 80063be:	9005      	str	r0, [sp, #20]

  va_end(args);

  return msg;
 80063c0:	9b05      	ldr	r3, [sp, #20]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	b006      	add	sp, #24
 80063c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80063ca:	b003      	add	sp, #12
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop

080063d0 <chDelegateDispatch>:
 *          are sending messages then the requests are served in priority
 *          order.
 *
 * @api
 */
void chDelegateDispatch(void) {
 80063d0:	b500      	push	{lr}
 80063d2:	b085      	sub	sp, #20
  thread_t *tp;
  const call_message_t *cmp;
  msg_t ret;

  tp = chMsgWait();
 80063d4:	f7ff ff0c 	bl	80061f0 <chMsgWait.lto_priv.0>
 80063d8:	9003      	str	r0, [sp, #12]
  cmp = (const call_message_t *)chMsgGet(tp);
 80063da:	9803      	ldr	r0, [sp, #12]
 80063dc:	f7ff ff18 	bl	8006210 <chMsgGet.lto_priv.0>
 80063e0:	4603      	mov	r3, r0
 80063e2:	9302      	str	r3, [sp, #8]
  ret = cmp->veneer(cmp->argsp);
 80063e4:	9b02      	ldr	r3, [sp, #8]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	9a02      	ldr	r2, [sp, #8]
 80063ea:	6852      	ldr	r2, [r2, #4]
 80063ec:	4610      	mov	r0, r2
 80063ee:	4798      	blx	r3
 80063f0:	9001      	str	r0, [sp, #4]

  chMsgRelease(tp, ret);
 80063f2:	9901      	ldr	r1, [sp, #4]
 80063f4:	9803      	ldr	r0, [sp, #12]
 80063f6:	f7fe fb13 	bl	8004a20 <chMsgRelease>
}
 80063fa:	bf00      	nop
 80063fc:	b005      	add	sp, #20
 80063fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8006402:	bf00      	nop
	...

08006410 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8006410:	b500      	push	{lr}
 8006412:	b083      	sub	sp, #12
 8006414:	9001      	str	r0, [sp, #4]
 8006416:	9100      	str	r1, [sp, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8006418:	2200      	movs	r2, #0
 800641a:	9900      	ldr	r1, [sp, #0]
 800641c:	9801      	ldr	r0, [sp, #4]
 800641e:	f7fe fe97 	bl	8005150 <chCoreAllocFromTopI>
 8006422:	4603      	mov	r3, r0
}
 8006424:	4618      	mov	r0, r3
 8006426:	b003      	add	sp, #12
 8006428:	f85d fb04 	ldr.w	pc, [sp], #4
 800642c:	0000      	movs	r0, r0
	...

08006430 <chPoolObjectInit.lto_priv.0>:
                                    memgetfunc_t provider) {
 8006430:	b500      	push	{lr}
 8006432:	b085      	sub	sp, #20
 8006434:	9003      	str	r0, [sp, #12]
 8006436:	9102      	str	r1, [sp, #8]
 8006438:	9201      	str	r2, [sp, #4]
  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 800643a:	9b01      	ldr	r3, [sp, #4]
 800643c:	2204      	movs	r2, #4
 800643e:	9902      	ldr	r1, [sp, #8]
 8006440:	9803      	ldr	r0, [sp, #12]
 8006442:	f7ff f90d 	bl	8005660 <chPoolObjectInitAligned>
}
 8006446:	bf00      	nop
 8006448:	b005      	add	sp, #20
 800644a:	f85d fb04 	ldr.w	pc, [sp], #4
 800644e:	bf00      	nop

08006450 <chFifoObjectInitAligned>:
 *
 * @init
 */
static inline void chFifoObjectInitAligned(objects_fifo_t *ofp, size_t objsize,
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {
 8006450:	b500      	push	{lr}
 8006452:	b085      	sub	sp, #20
 8006454:	9003      	str	r0, [sp, #12]
 8006456:	9102      	str	r1, [sp, #8]
 8006458:	9201      	str	r2, [sp, #4]
 800645a:	9300      	str	r3, [sp, #0]

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 800645c:	9b03      	ldr	r3, [sp, #12]
 800645e:	9a00      	ldr	r2, [sp, #0]
 8006460:	9902      	ldr	r1, [sp, #8]
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff f98c 	bl	8005780 <chGuardedPoolObjectInitAligned>
  chGuardedPoolLoadArray(&ofp->free, objbuf, objn);
 8006468:	9b03      	ldr	r3, [sp, #12]
 800646a:	9a01      	ldr	r2, [sp, #4]
 800646c:	9906      	ldr	r1, [sp, #24]
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff f99e 	bl	80057b0 <chGuardedPoolLoadArray>
  chMBObjectInit(&ofp->mbx, msgbuf, objn);
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	331c      	adds	r3, #28
 8006478:	9a01      	ldr	r2, [sp, #4]
 800647a:	9907      	ldr	r1, [sp, #28]
 800647c:	4618      	mov	r0, r3
 800647e:	f7fe fbdf 	bl	8004c40 <chMBObjectInit>
}
 8006482:	bf00      	nop
 8006484:	b005      	add	sp, #20
 8006486:	f85d fb04 	ldr.w	pc, [sp], #4
 800648a:	bf00      	nop
 800648c:	0000      	movs	r0, r0
	...

08006490 <copy_name>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static void copy_name(const char *sp, char *dp) {
 8006490:	b084      	sub	sp, #16
 8006492:	9001      	str	r0, [sp, #4]
 8006494:	9100      	str	r1, [sp, #0]
  unsigned i;
  char c;

  i = CH_CFG_FACTORY_MAX_NAMES_LENGTH;
 8006496:	2308      	movs	r3, #8
 8006498:	9303      	str	r3, [sp, #12]
  do {
    c = *sp++;
 800649a:	9b01      	ldr	r3, [sp, #4]
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	9201      	str	r2, [sp, #4]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	f88d 300b 	strb.w	r3, [sp, #11]
    *dp++ = c;
 80064a6:	9b00      	ldr	r3, [sp, #0]
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	9200      	str	r2, [sp, #0]
 80064ac:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80064b0:	701a      	strb	r2, [r3, #0]
    i--;
 80064b2:	9b03      	ldr	r3, [sp, #12]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	9303      	str	r3, [sp, #12]
  } while ((c != (char)0) && (i > 0U));
 80064b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <copy_name+0x36>
 80064c0:	9b03      	ldr	r3, [sp, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e9      	bne.n	800649a <copy_name+0xa>
}
 80064c6:	bf00      	nop
 80064c8:	b004      	add	sp, #16
 80064ca:	4770      	bx	lr
 80064cc:	0000      	movs	r0, r0
	...

080064d0 <dyn_list_init>:

static inline void dyn_list_init(dyn_list_t *dlp) {
 80064d0:	b082      	sub	sp, #8
 80064d2:	9001      	str	r0, [sp, #4]

  dlp->next = (dyn_element_t *)dlp;
 80064d4:	9b01      	ldr	r3, [sp, #4]
 80064d6:	9a01      	ldr	r2, [sp, #4]
 80064d8:	601a      	str	r2, [r3, #0]
}
 80064da:	bf00      	nop
 80064dc:	b002      	add	sp, #8
 80064de:	4770      	bx	lr

080064e0 <dyn_list_find>:

static dyn_element_t *dyn_list_find(const char *name, dyn_list_t *dlp) {
 80064e0:	b500      	push	{lr}
 80064e2:	b085      	sub	sp, #20
 80064e4:	9001      	str	r0, [sp, #4]
 80064e6:	9100      	str	r1, [sp, #0]
  dyn_element_t *p = dlp->next;
 80064e8:	9b00      	ldr	r3, [sp, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	9303      	str	r3, [sp, #12]

  while (p != (dyn_element_t *)dlp) {
 80064ee:	e00e      	b.n	800650e <dyn_list_find+0x2e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80064f0:	9b03      	ldr	r3, [sp, #12]
 80064f2:	3308      	adds	r3, #8
 80064f4:	2208      	movs	r2, #8
 80064f6:	9901      	ldr	r1, [sp, #4]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f016 f9c7 	bl	801c88c <strncmp>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <dyn_list_find+0x28>
      return p;
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	e007      	b.n	8006518 <dyn_list_find+0x38>
    }
    p = p->next;
 8006508:	9b03      	ldr	r3, [sp, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	9303      	str	r3, [sp, #12]
  while (p != (dyn_element_t *)dlp) {
 800650e:	9a03      	ldr	r2, [sp, #12]
 8006510:	9b00      	ldr	r3, [sp, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d1ec      	bne.n	80064f0 <dyn_list_find+0x10>
  }

  return NULL;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	b005      	add	sp, #20
 800651c:	f85d fb04 	ldr.w	pc, [sp], #4

08006520 <dyn_list_unlink>:

static dyn_element_t *dyn_list_unlink(dyn_element_t *element,
                                      dyn_list_t *dlp) {
 8006520:	b084      	sub	sp, #16
 8006522:	9001      	str	r0, [sp, #4]
 8006524:	9100      	str	r1, [sp, #0]
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8006526:	9b00      	ldr	r3, [sp, #0]
 8006528:	9303      	str	r3, [sp, #12]

  /* Scanning the list.*/
  while (prev->next != (dyn_element_t *)dlp) {
 800652a:	e00d      	b.n	8006548 <dyn_list_unlink+0x28>
    if (prev->next == element) {
 800652c:	9b03      	ldr	r3, [sp, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	9a01      	ldr	r2, [sp, #4]
 8006532:	429a      	cmp	r2, r3
 8006534:	d105      	bne.n	8006542 <dyn_list_unlink+0x22>
      /* Found.*/
      prev->next = element->next;
 8006536:	9b01      	ldr	r3, [sp, #4]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	9b03      	ldr	r3, [sp, #12]
 800653c:	601a      	str	r2, [r3, #0]
      return element;
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	e008      	b.n	8006554 <dyn_list_unlink+0x34>
    }

    /* Next element in the list.*/
    prev = prev->next;
 8006542:	9b03      	ldr	r3, [sp, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	9303      	str	r3, [sp, #12]
  while (prev->next != (dyn_element_t *)dlp) {
 8006548:	9b03      	ldr	r3, [sp, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	9a00      	ldr	r2, [sp, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d1ec      	bne.n	800652c <dyn_list_unlink+0xc>
  }

  return NULL;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	b004      	add	sp, #16
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	0000      	movs	r0, r0
	...

08006560 <dyn_create_object_heap>:

#if CH_FACTORY_REQUIRES_HEAP || defined(__DOXYGEN__)
static dyn_element_t *dyn_create_object_heap(const char *name,
                                             dyn_list_t *dlp,
                                             size_t size,
                                             unsigned align) {
 8006560:	b500      	push	{lr}
 8006562:	b087      	sub	sp, #28
 8006564:	9003      	str	r0, [sp, #12]
 8006566:	9102      	str	r1, [sp, #8]
 8006568:	9201      	str	r2, [sp, #4]
 800656a:	9300      	str	r3, [sp, #0]
  dyn_element_t *dep;

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
 800656c:	9902      	ldr	r1, [sp, #8]
 800656e:	9803      	ldr	r0, [sp, #12]
 8006570:	f7ff ffb6 	bl	80064e0 <dyn_list_find>
 8006574:	9005      	str	r0, [sp, #20]
  if (dep != NULL) {
 8006576:	9b05      	ldr	r3, [sp, #20]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <dyn_create_object_heap+0x20>
    return NULL;
 800657c:	2300      	movs	r3, #0
 800657e:	e01b      	b.n	80065b8 <dyn_create_object_heap+0x58>
  }

  /* Allocating space for the new buffer object.*/
  dep = (dyn_element_t *)chHeapAllocAligned(NULL, size, align);
 8006580:	9a00      	ldr	r2, [sp, #0]
 8006582:	9901      	ldr	r1, [sp, #4]
 8006584:	2000      	movs	r0, #0
 8006586:	f7fe fe83 	bl	8005290 <chHeapAllocAligned>
 800658a:	9005      	str	r0, [sp, #20]
  if (dep == NULL) {
 800658c:	9b05      	ldr	r3, [sp, #20]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <dyn_create_object_heap+0x36>
    return NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	e010      	b.n	80065b8 <dyn_create_object_heap+0x58>
  }

  /* Initializing object list element.*/
  copy_name(name, dep->name);
 8006596:	9b05      	ldr	r3, [sp, #20]
 8006598:	3308      	adds	r3, #8
 800659a:	4619      	mov	r1, r3
 800659c:	9803      	ldr	r0, [sp, #12]
 800659e:	f7ff ff77 	bl	8006490 <copy_name>
  dep->refs = (ucnt_t)1;
 80065a2:	9b05      	ldr	r3, [sp, #20]
 80065a4:	2201      	movs	r2, #1
 80065a6:	605a      	str	r2, [r3, #4]
  dep->next = dlp->next;
 80065a8:	9b02      	ldr	r3, [sp, #8]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	9b05      	ldr	r3, [sp, #20]
 80065ae:	601a      	str	r2, [r3, #0]

  /* Updating factory list.*/
  dlp->next = dep;
 80065b0:	9b02      	ldr	r3, [sp, #8]
 80065b2:	9a05      	ldr	r2, [sp, #20]
 80065b4:	601a      	str	r2, [r3, #0]

  return dep;
 80065b6:	9b05      	ldr	r3, [sp, #20]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	b007      	add	sp, #28
 80065bc:	f85d fb04 	ldr.w	pc, [sp], #4

080065c0 <dyn_release_object_heap>:

static void dyn_release_object_heap(dyn_element_t *dep,
                                    dyn_list_t *dlp) {
 80065c0:	b500      	push	{lr}
 80065c2:	b083      	sub	sp, #12
 80065c4:	9001      	str	r0, [sp, #4]
 80065c6:	9100      	str	r1, [sp, #0]

  chDbgCheck(dep != NULL);
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");

  dep->refs--;
 80065c8:	9b01      	ldr	r3, [sp, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	1e5a      	subs	r2, r3, #1
 80065ce:	9b01      	ldr	r3, [sp, #4]
 80065d0:	605a      	str	r2, [r3, #4]
  if (dep->refs == (ucnt_t)0) {
 80065d2:	9b01      	ldr	r3, [sp, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d107      	bne.n	80065ea <dyn_release_object_heap+0x2a>
    dep = dyn_list_unlink(dep, dlp);
 80065da:	9900      	ldr	r1, [sp, #0]
 80065dc:	9801      	ldr	r0, [sp, #4]
 80065de:	f7ff ff9f 	bl	8006520 <dyn_list_unlink>
 80065e2:	9001      	str	r0, [sp, #4]
    chHeapFree((void *)dep);
 80065e4:	9801      	ldr	r0, [sp, #4]
 80065e6:	f7fe ff23 	bl	8005430 <chHeapFree>
  }
}
 80065ea:	bf00      	nop
 80065ec:	b003      	add	sp, #12
 80065ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80065f2:	bf00      	nop
	...

08006600 <dyn_create_object_pool>:
#endif /* CH_FACTORY_REQUIRES_HEAP */

#if CH_FACTORY_REQUIRES_POOLS || defined(__DOXYGEN__)
static dyn_element_t *dyn_create_object_pool(const char *name,
                                             dyn_list_t *dlp,
                                             memory_pool_t *mp) {
 8006600:	b500      	push	{lr}
 8006602:	b087      	sub	sp, #28
 8006604:	9003      	str	r0, [sp, #12]
 8006606:	9102      	str	r1, [sp, #8]
 8006608:	9201      	str	r2, [sp, #4]
  dyn_element_t *dep;

  chDbgCheck(name != NULL);

  /* Checking if an object object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
 800660a:	9902      	ldr	r1, [sp, #8]
 800660c:	9803      	ldr	r0, [sp, #12]
 800660e:	f7ff ff67 	bl	80064e0 <dyn_list_find>
 8006612:	9005      	str	r0, [sp, #20]
  if (dep != NULL) {
 8006614:	9b05      	ldr	r3, [sp, #20]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <dyn_create_object_pool+0x1e>
    return NULL;
 800661a:	2300      	movs	r3, #0
 800661c:	e019      	b.n	8006652 <dyn_create_object_pool+0x52>
  }

  /* Allocating space for the new object.*/
  dep = (dyn_element_t *)chPoolAlloc(mp);
 800661e:	9801      	ldr	r0, [sp, #4]
 8006620:	f7ff f87e 	bl	8005720 <chPoolAlloc>
 8006624:	9005      	str	r0, [sp, #20]
  if (dep == NULL) {
 8006626:	9b05      	ldr	r3, [sp, #20]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <dyn_create_object_pool+0x30>
    return NULL;
 800662c:	2300      	movs	r3, #0
 800662e:	e010      	b.n	8006652 <dyn_create_object_pool+0x52>
  }

  /* Initializing object list element.*/
  copy_name(name, dep->name);
 8006630:	9b05      	ldr	r3, [sp, #20]
 8006632:	3308      	adds	r3, #8
 8006634:	4619      	mov	r1, r3
 8006636:	9803      	ldr	r0, [sp, #12]
 8006638:	f7ff ff2a 	bl	8006490 <copy_name>
  dep->refs = (ucnt_t)1;
 800663c:	9b05      	ldr	r3, [sp, #20]
 800663e:	2201      	movs	r2, #1
 8006640:	605a      	str	r2, [r3, #4]
  dep->next = dlp->next;
 8006642:	9b02      	ldr	r3, [sp, #8]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	9b05      	ldr	r3, [sp, #20]
 8006648:	601a      	str	r2, [r3, #0]

  /* Updating factory list.*/
  dlp->next = (dyn_element_t *)dep;
 800664a:	9b02      	ldr	r3, [sp, #8]
 800664c:	9a05      	ldr	r2, [sp, #20]
 800664e:	601a      	str	r2, [r3, #0]

  return dep;
 8006650:	9b05      	ldr	r3, [sp, #20]
}
 8006652:	4618      	mov	r0, r3
 8006654:	b007      	add	sp, #28
 8006656:	f85d fb04 	ldr.w	pc, [sp], #4
 800665a:	bf00      	nop
 800665c:	0000      	movs	r0, r0
	...

08006660 <dyn_release_object_pool>:

static void dyn_release_object_pool(dyn_element_t *dep,
                                    dyn_list_t *dlp,
                                    memory_pool_t *mp) {
 8006660:	b500      	push	{lr}
 8006662:	b085      	sub	sp, #20
 8006664:	9003      	str	r0, [sp, #12]
 8006666:	9102      	str	r1, [sp, #8]
 8006668:	9201      	str	r2, [sp, #4]

  chDbgCheck(dep != NULL);
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");

  dep->refs--;
 800666a:	9b03      	ldr	r3, [sp, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	1e5a      	subs	r2, r3, #1
 8006670:	9b03      	ldr	r3, [sp, #12]
 8006672:	605a      	str	r2, [r3, #4]
  if (dep->refs == (ucnt_t)0) {
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d108      	bne.n	800668e <dyn_release_object_pool+0x2e>
    dep = dyn_list_unlink(dep, dlp);
 800667c:	9902      	ldr	r1, [sp, #8]
 800667e:	9803      	ldr	r0, [sp, #12]
 8006680:	f7ff ff4e 	bl	8006520 <dyn_list_unlink>
 8006684:	9003      	str	r0, [sp, #12]
    chPoolFree(mp, (void *)dep);
 8006686:	9903      	ldr	r1, [sp, #12]
 8006688:	9801      	ldr	r0, [sp, #4]
 800668a:	f7ff f869 	bl	8005760 <chPoolFree>
  }
}
 800668e:	bf00      	nop
 8006690:	b005      	add	sp, #20
 8006692:	f85d fb04 	ldr.w	pc, [sp], #4
 8006696:	bf00      	nop
	...

080066a0 <dyn_find_object>:
#endif /* CH_FACTORY_REQUIRES_POOLS */

static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 80066a0:	b500      	push	{lr}
 80066a2:	b085      	sub	sp, #20
 80066a4:	9001      	str	r0, [sp, #4]
 80066a6:	9100      	str	r1, [sp, #0]
  dyn_element_t *dep;

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
 80066a8:	9900      	ldr	r1, [sp, #0]
 80066aa:	9801      	ldr	r0, [sp, #4]
 80066ac:	f7ff ff18 	bl	80064e0 <dyn_list_find>
 80066b0:	9003      	str	r0, [sp, #12]
  if (dep != NULL) {
 80066b2:	9b03      	ldr	r3, [sp, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d004      	beq.n	80066c2 <dyn_find_object+0x22>
    /* Increasing references counter.*/
    dep->refs++;
 80066b8:	9b03      	ldr	r3, [sp, #12]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	9b03      	ldr	r3, [sp, #12]
 80066c0:	605a      	str	r2, [r3, #4]
  }

  return dep;
 80066c2:	9b03      	ldr	r3, [sp, #12]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	b005      	add	sp, #20
 80066c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80066cc:	0000      	movs	r0, r0
	...

080066d0 <__factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void __factory_init(void) {
 80066d0:	b508      	push	{r3, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 80066d2:	4810      	ldr	r0, [pc, #64]	; (8006714 <__factory_init+0x44>)
 80066d4:	f7fd fadc 	bl	8003c90 <chMtxObjectInit>
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
#endif

#if CH_CFG_FACTORY_OBJECTS_REGISTRY == TRUE
  dyn_list_init(&ch_factory.obj_list);
 80066d8:	480f      	ldr	r0, [pc, #60]	; (8006718 <__factory_init+0x48>)
 80066da:	f7ff fef9 	bl	80064d0 <dyn_list_init>
  chPoolObjectInit(&ch_factory.obj_pool,
 80066de:	4a0f      	ldr	r2, [pc, #60]	; (800671c <__factory_init+0x4c>)
 80066e0:	2114      	movs	r1, #20
 80066e2:	480f      	ldr	r0, [pc, #60]	; (8006720 <__factory_init+0x50>)
 80066e4:	f7ff fea4 	bl	8006430 <chPoolObjectInit.lto_priv.0>
                   sizeof (registered_object_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_GENERIC_BUFFERS == TRUE
  dyn_list_init(&ch_factory.buf_list);
 80066e8:	480e      	ldr	r0, [pc, #56]	; (8006724 <__factory_init+0x54>)
 80066ea:	f7ff fef1 	bl	80064d0 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_SEMAPHORES == TRUE
  dyn_list_init(&ch_factory.sem_list);
 80066ee:	480e      	ldr	r0, [pc, #56]	; (8006728 <__factory_init+0x58>)
 80066f0:	f7ff feee 	bl	80064d0 <dyn_list_init>
  chPoolObjectInit(&ch_factory.sem_pool,
 80066f4:	4a09      	ldr	r2, [pc, #36]	; (800671c <__factory_init+0x4c>)
 80066f6:	211c      	movs	r1, #28
 80066f8:	480c      	ldr	r0, [pc, #48]	; (800672c <__factory_init+0x5c>)
 80066fa:	f7ff fe99 	bl	8006430 <chPoolObjectInit.lto_priv.0>
                   sizeof (dyn_semaphore_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_MAILBOXES == TRUE
  dyn_list_init(&ch_factory.mbx_list);
 80066fe:	480c      	ldr	r0, [pc, #48]	; (8006730 <__factory_init+0x60>)
 8006700:	f7ff fee6 	bl	80064d0 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
 8006704:	480b      	ldr	r0, [pc, #44]	; (8006734 <__factory_init+0x64>)
 8006706:	f7ff fee3 	bl	80064d0 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
 800670a:	480b      	ldr	r0, [pc, #44]	; (8006738 <__factory_init+0x68>)
 800670c:	f7ff fee0 	bl	80064d0 <dyn_list_init>
#endif
}
 8006710:	bf00      	nop
 8006712:	bd08      	pop	{r3, pc}
 8006714:	20000c24 	.word	0x20000c24
 8006718:	20000c34 	.word	0x20000c34
 800671c:	08006411 	.word	0x08006411
 8006720:	20000c38 	.word	0x20000c38
 8006724:	20000c48 	.word	0x20000c48
 8006728:	20000c4c 	.word	0x20000c4c
 800672c:	20000c50 	.word	0x20000c50
 8006730:	20000c60 	.word	0x20000c60
 8006734:	20000c64 	.word	0x20000c64
 8006738:	20000c68 	.word	0x20000c68
 800673c:	00000000 	.word	0x00000000

08006740 <chFactoryRegisterObject>:
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
                                             void *objp) {
 8006740:	b500      	push	{lr}
 8006742:	b085      	sub	sp, #20
 8006744:	9001      	str	r0, [sp, #4]
 8006746:	9100      	str	r1, [sp, #0]
  registered_object_t *rop;

  F_LOCK();
 8006748:	480b      	ldr	r0, [pc, #44]	; (8006778 <chFactoryRegisterObject+0x38>)
 800674a:	f7fd fab1 	bl	8003cb0 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
 800674e:	4a0b      	ldr	r2, [pc, #44]	; (800677c <chFactoryRegisterObject+0x3c>)
 8006750:	490b      	ldr	r1, [pc, #44]	; (8006780 <chFactoryRegisterObject+0x40>)
 8006752:	9801      	ldr	r0, [sp, #4]
 8006754:	f7ff ff54 	bl	8006600 <dyn_create_object_pool>
 8006758:	9003      	str	r0, [sp, #12]
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
 800675a:	9b03      	ldr	r3, [sp, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <chFactoryRegisterObject+0x26>
    /* Initializing registered object data.*/
    rop->objp = objp;
 8006760:	9b03      	ldr	r3, [sp, #12]
 8006762:	9a00      	ldr	r2, [sp, #0]
 8006764:	611a      	str	r2, [r3, #16]
  }

  F_UNLOCK();
 8006766:	4804      	ldr	r0, [pc, #16]	; (8006778 <chFactoryRegisterObject+0x38>)
 8006768:	f7fd fb52 	bl	8003e10 <chMtxUnlock>

  return rop;
 800676c:	9b03      	ldr	r3, [sp, #12]
}
 800676e:	4618      	mov	r0, r3
 8006770:	b005      	add	sp, #20
 8006772:	f85d fb04 	ldr.w	pc, [sp], #4
 8006776:	bf00      	nop
 8006778:	20000c24 	.word	0x20000c24
 800677c:	20000c38 	.word	0x20000c38
 8006780:	20000c34 	.word	0x20000c34
	...

08006790 <chFactoryFindObject>:
 * @retval NULL         if a registered object with the specified name
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObject(const char *name) {
 8006790:	b500      	push	{lr}
 8006792:	b085      	sub	sp, #20
 8006794:	9001      	str	r0, [sp, #4]
  registered_object_t *rop;

  F_LOCK();
 8006796:	4808      	ldr	r0, [pc, #32]	; (80067b8 <chFactoryFindObject+0x28>)
 8006798:	f7fd fa8a 	bl	8003cb0 <chMtxLock>

  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 800679c:	4907      	ldr	r1, [pc, #28]	; (80067bc <chFactoryFindObject+0x2c>)
 800679e:	9801      	ldr	r0, [sp, #4]
 80067a0:	f7ff ff7e 	bl	80066a0 <dyn_find_object>
 80067a4:	9003      	str	r0, [sp, #12]

  F_UNLOCK();
 80067a6:	4804      	ldr	r0, [pc, #16]	; (80067b8 <chFactoryFindObject+0x28>)
 80067a8:	f7fd fb32 	bl	8003e10 <chMtxUnlock>

  return rop;
 80067ac:	9b03      	ldr	r3, [sp, #12]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	b005      	add	sp, #20
 80067b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80067b6:	bf00      	nop
 80067b8:	20000c24 	.word	0x20000c24
 80067bc:	20000c34 	.word	0x20000c34

080067c0 <chFactoryReleaseObject>:
 *
 * @param[in] rop       registered object reference
 *
 * @api
 */
void chFactoryReleaseObject(registered_object_t *rop) {
 80067c0:	b500      	push	{lr}
 80067c2:	b083      	sub	sp, #12
 80067c4:	9001      	str	r0, [sp, #4]

  F_LOCK();
 80067c6:	4808      	ldr	r0, [pc, #32]	; (80067e8 <chFactoryReleaseObject+0x28>)
 80067c8:	f7fd fa72 	bl	8003cb0 <chMtxLock>

  dyn_release_object_pool(&rop->element,
 80067cc:	9b01      	ldr	r3, [sp, #4]
 80067ce:	4a07      	ldr	r2, [pc, #28]	; (80067ec <chFactoryReleaseObject+0x2c>)
 80067d0:	4907      	ldr	r1, [pc, #28]	; (80067f0 <chFactoryReleaseObject+0x30>)
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff ff44 	bl	8006660 <dyn_release_object_pool>
                          &ch_factory.obj_list,
                          &ch_factory.obj_pool);

  F_UNLOCK();
 80067d8:	4803      	ldr	r0, [pc, #12]	; (80067e8 <chFactoryReleaseObject+0x28>)
 80067da:	f7fd fb19 	bl	8003e10 <chMtxUnlock>
}
 80067de:	bf00      	nop
 80067e0:	b003      	add	sp, #12
 80067e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80067e6:	bf00      	nop
 80067e8:	20000c24 	.word	0x20000c24
 80067ec:	20000c38 	.word	0x20000c38
 80067f0:	20000c34 	.word	0x20000c34
	...

08006800 <chFactoryCreateBuffer>:
 * @retval NULL         if the dynamic buffer object cannot be allocated or
 *                      a dynamic buffer object with the same name exists.
 *
 * @api
 */
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 8006800:	b500      	push	{lr}
 8006802:	b085      	sub	sp, #20
 8006804:	9001      	str	r0, [sp, #4]
 8006806:	9100      	str	r1, [sp, #0]
  dyn_buffer_t *dbp;

  F_LOCK();
 8006808:	480e      	ldr	r0, [pc, #56]	; (8006844 <chFactoryCreateBuffer+0x44>)
 800680a:	f7fd fa51 	bl	8003cb0 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800680e:	9b00      	ldr	r3, [sp, #0]
 8006810:	f103 0210 	add.w	r2, r3, #16
 8006814:	2308      	movs	r3, #8
 8006816:	490c      	ldr	r1, [pc, #48]	; (8006848 <chFactoryCreateBuffer+0x48>)
 8006818:	9801      	ldr	r0, [sp, #4]
 800681a:	f7ff fea1 	bl	8006560 <dyn_create_object_heap>
 800681e:	9003      	str	r0, [sp, #12]
                                               &ch_factory.buf_list,
                                               sizeof (dyn_buffer_t) + size,
                                               CH_HEAP_ALIGNMENT);
  if (dbp != NULL) {
 8006820:	9b03      	ldr	r3, [sp, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d006      	beq.n	8006834 <chFactoryCreateBuffer+0x34>
    /* Initializing buffer object data.*/
    memset((void *)(dbp + 1), 0, size);
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	3310      	adds	r3, #16
 800682a:	9a00      	ldr	r2, [sp, #0]
 800682c:	2100      	movs	r1, #0
 800682e:	4618      	mov	r0, r3
 8006830:	f015 feb6 	bl	801c5a0 <memset>
  }

  F_UNLOCK();
 8006834:	4803      	ldr	r0, [pc, #12]	; (8006844 <chFactoryCreateBuffer+0x44>)
 8006836:	f7fd faeb 	bl	8003e10 <chMtxUnlock>

  return dbp;
 800683a:	9b03      	ldr	r3, [sp, #12]
}
 800683c:	4618      	mov	r0, r3
 800683e:	b005      	add	sp, #20
 8006840:	f85d fb04 	ldr.w	pc, [sp], #4
 8006844:	20000c24 	.word	0x20000c24
 8006848:	20000c48 	.word	0x20000c48
 800684c:	00000000 	.word	0x00000000

08006850 <chFactoryFindBuffer>:
 * @retval NULL         if a dynamic buffer object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 8006850:	b500      	push	{lr}
 8006852:	b085      	sub	sp, #20
 8006854:	9001      	str	r0, [sp, #4]
  dyn_buffer_t *dbp;

  F_LOCK();
 8006856:	4808      	ldr	r0, [pc, #32]	; (8006878 <chFactoryFindBuffer+0x28>)
 8006858:	f7fd fa2a 	bl	8003cb0 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 800685c:	4907      	ldr	r1, [pc, #28]	; (800687c <chFactoryFindBuffer+0x2c>)
 800685e:	9801      	ldr	r0, [sp, #4]
 8006860:	f7ff ff1e 	bl	80066a0 <dyn_find_object>
 8006864:	9003      	str	r0, [sp, #12]

  F_UNLOCK();
 8006866:	4804      	ldr	r0, [pc, #16]	; (8006878 <chFactoryFindBuffer+0x28>)
 8006868:	f7fd fad2 	bl	8003e10 <chMtxUnlock>

  return dbp;
 800686c:	9b03      	ldr	r3, [sp, #12]
}
 800686e:	4618      	mov	r0, r3
 8006870:	b005      	add	sp, #20
 8006872:	f85d fb04 	ldr.w	pc, [sp], #4
 8006876:	bf00      	nop
 8006878:	20000c24 	.word	0x20000c24
 800687c:	20000c48 	.word	0x20000c48

08006880 <chFactoryReleaseBuffer>:
 *
 * @param[in] dbp       dynamic buffer object reference
 *
 * @api
 */
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8006880:	b500      	push	{lr}
 8006882:	b083      	sub	sp, #12
 8006884:	9001      	str	r0, [sp, #4]

  F_LOCK();
 8006886:	4807      	ldr	r0, [pc, #28]	; (80068a4 <chFactoryReleaseBuffer+0x24>)
 8006888:	f7fd fa12 	bl	8003cb0 <chMtxLock>

  dyn_release_object_heap(&dbp->element, &ch_factory.buf_list);
 800688c:	9b01      	ldr	r3, [sp, #4]
 800688e:	4906      	ldr	r1, [pc, #24]	; (80068a8 <chFactoryReleaseBuffer+0x28>)
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fe95 	bl	80065c0 <dyn_release_object_heap>

  F_UNLOCK();
 8006896:	4803      	ldr	r0, [pc, #12]	; (80068a4 <chFactoryReleaseBuffer+0x24>)
 8006898:	f7fd faba 	bl	8003e10 <chMtxUnlock>
}
 800689c:	bf00      	nop
 800689e:	b003      	add	sp, #12
 80068a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80068a4:	20000c24 	.word	0x20000c24
 80068a8:	20000c48 	.word	0x20000c48
 80068ac:	00000000 	.word	0x00000000

080068b0 <chFactoryCreateSemaphore>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 80068b0:	b500      	push	{lr}
 80068b2:	b085      	sub	sp, #20
 80068b4:	9001      	str	r0, [sp, #4]
 80068b6:	9100      	str	r1, [sp, #0]
  dyn_semaphore_t *dsp;

  F_LOCK();
 80068b8:	480c      	ldr	r0, [pc, #48]	; (80068ec <chFactoryCreateSemaphore+0x3c>)
 80068ba:	f7fd f9f9 	bl	8003cb0 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 80068be:	4a0c      	ldr	r2, [pc, #48]	; (80068f0 <chFactoryCreateSemaphore+0x40>)
 80068c0:	490c      	ldr	r1, [pc, #48]	; (80068f4 <chFactoryCreateSemaphore+0x44>)
 80068c2:	9801      	ldr	r0, [sp, #4]
 80068c4:	f7ff fe9c 	bl	8006600 <dyn_create_object_pool>
 80068c8:	9003      	str	r0, [sp, #12]
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
 80068ca:	9b03      	ldr	r3, [sp, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <chFactoryCreateSemaphore+0x2c>
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
 80068d0:	9b03      	ldr	r3, [sp, #12]
 80068d2:	3310      	adds	r3, #16
 80068d4:	9900      	ldr	r1, [sp, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fc ffb2 	bl	8003840 <chSemObjectInit>
  }

  F_UNLOCK();
 80068dc:	4803      	ldr	r0, [pc, #12]	; (80068ec <chFactoryCreateSemaphore+0x3c>)
 80068de:	f7fd fa97 	bl	8003e10 <chMtxUnlock>

  return dsp;
 80068e2:	9b03      	ldr	r3, [sp, #12]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	b005      	add	sp, #20
 80068e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80068ec:	20000c24 	.word	0x20000c24
 80068f0:	20000c50 	.word	0x20000c50
 80068f4:	20000c4c 	.word	0x20000c4c
	...

08006900 <chFactoryFindSemaphore>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8006900:	b500      	push	{lr}
 8006902:	b085      	sub	sp, #20
 8006904:	9001      	str	r0, [sp, #4]
  dyn_semaphore_t *dsp;

  F_LOCK();
 8006906:	4808      	ldr	r0, [pc, #32]	; (8006928 <chFactoryFindSemaphore+0x28>)
 8006908:	f7fd f9d2 	bl	8003cb0 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 800690c:	4907      	ldr	r1, [pc, #28]	; (800692c <chFactoryFindSemaphore+0x2c>)
 800690e:	9801      	ldr	r0, [sp, #4]
 8006910:	f7ff fec6 	bl	80066a0 <dyn_find_object>
 8006914:	9003      	str	r0, [sp, #12]

  F_UNLOCK();
 8006916:	4804      	ldr	r0, [pc, #16]	; (8006928 <chFactoryFindSemaphore+0x28>)
 8006918:	f7fd fa7a 	bl	8003e10 <chMtxUnlock>

  return dsp;
 800691c:	9b03      	ldr	r3, [sp, #12]
}
 800691e:	4618      	mov	r0, r3
 8006920:	b005      	add	sp, #20
 8006922:	f85d fb04 	ldr.w	pc, [sp], #4
 8006926:	bf00      	nop
 8006928:	20000c24 	.word	0x20000c24
 800692c:	20000c4c 	.word	0x20000c4c

08006930 <chFactoryReleaseSemaphore>:
 *
 * @param[in] dsp       dynamic semaphore object reference
 *
 * @api
 */
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8006930:	b500      	push	{lr}
 8006932:	b083      	sub	sp, #12
 8006934:	9001      	str	r0, [sp, #4]

  F_LOCK();
 8006936:	4808      	ldr	r0, [pc, #32]	; (8006958 <chFactoryReleaseSemaphore+0x28>)
 8006938:	f7fd f9ba 	bl	8003cb0 <chMtxLock>

  dyn_release_object_pool(&dsp->element,
 800693c:	9b01      	ldr	r3, [sp, #4]
 800693e:	4a07      	ldr	r2, [pc, #28]	; (800695c <chFactoryReleaseSemaphore+0x2c>)
 8006940:	4907      	ldr	r1, [pc, #28]	; (8006960 <chFactoryReleaseSemaphore+0x30>)
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff fe8c 	bl	8006660 <dyn_release_object_pool>
                          &ch_factory.sem_list,
                          &ch_factory.sem_pool);

  F_UNLOCK();
 8006948:	4803      	ldr	r0, [pc, #12]	; (8006958 <chFactoryReleaseSemaphore+0x28>)
 800694a:	f7fd fa61 	bl	8003e10 <chMtxUnlock>
}
 800694e:	bf00      	nop
 8006950:	b003      	add	sp, #12
 8006952:	f85d fb04 	ldr.w	pc, [sp], #4
 8006956:	bf00      	nop
 8006958:	20000c24 	.word	0x20000c24
 800695c:	20000c50 	.word	0x20000c50
 8006960:	20000c4c 	.word	0x20000c4c
	...

08006970 <chFactoryCreateMailbox>:
 * @retval NULL         if the dynamic mailbox object cannot be allocated or
 *                      a dynamic mailbox object with the same name exists.
 *
 * @api
 */
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 8006970:	b500      	push	{lr}
 8006972:	b085      	sub	sp, #20
 8006974:	9001      	str	r0, [sp, #4]
 8006976:	9100      	str	r1, [sp, #0]
  dyn_mailbox_t *dmp;

  F_LOCK();
 8006978:	480f      	ldr	r0, [pc, #60]	; (80069b8 <chFactoryCreateMailbox+0x48>)
 800697a:	f7fd f999 	bl	8003cb0 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
                                                &ch_factory.mbx_list,
                                                sizeof (dyn_mailbox_t) +
 800697e:	9b00      	ldr	r3, [sp, #0]
 8006980:	330e      	adds	r3, #14
  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 8006982:	009a      	lsls	r2, r3, #2
 8006984:	2308      	movs	r3, #8
 8006986:	490d      	ldr	r1, [pc, #52]	; (80069bc <chFactoryCreateMailbox+0x4c>)
 8006988:	9801      	ldr	r0, [sp, #4]
 800698a:	f7ff fde9 	bl	8006560 <dyn_create_object_heap>
 800698e:	9003      	str	r0, [sp, #12]
                                                (n * sizeof (msg_t)),
                                                CH_HEAP_ALIGNMENT);
  if (dmp != NULL) {
 8006990:	9b03      	ldr	r3, [sp, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d008      	beq.n	80069a8 <chFactoryCreateMailbox+0x38>
    /* Initializing mailbox object data.*/
    chMBObjectInit(&dmp->mbx, (msg_t *)(dmp + 1), n);
 8006996:	9b03      	ldr	r3, [sp, #12]
 8006998:	f103 0010 	add.w	r0, r3, #16
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	3338      	adds	r3, #56	; 0x38
 80069a0:	9a00      	ldr	r2, [sp, #0]
 80069a2:	4619      	mov	r1, r3
 80069a4:	f7fe f94c 	bl	8004c40 <chMBObjectInit>
  }

  F_UNLOCK();
 80069a8:	4803      	ldr	r0, [pc, #12]	; (80069b8 <chFactoryCreateMailbox+0x48>)
 80069aa:	f7fd fa31 	bl	8003e10 <chMtxUnlock>

  return dmp;
 80069ae:	9b03      	ldr	r3, [sp, #12]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	b005      	add	sp, #20
 80069b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80069b8:	20000c24 	.word	0x20000c24
 80069bc:	20000c60 	.word	0x20000c60

080069c0 <chFactoryFindMailbox>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 80069c0:	b500      	push	{lr}
 80069c2:	b085      	sub	sp, #20
 80069c4:	9001      	str	r0, [sp, #4]
  dyn_mailbox_t *dmp;

  F_LOCK();
 80069c6:	4808      	ldr	r0, [pc, #32]	; (80069e8 <chFactoryFindMailbox+0x28>)
 80069c8:	f7fd f972 	bl	8003cb0 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 80069cc:	4907      	ldr	r1, [pc, #28]	; (80069ec <chFactoryFindMailbox+0x2c>)
 80069ce:	9801      	ldr	r0, [sp, #4]
 80069d0:	f7ff fe66 	bl	80066a0 <dyn_find_object>
 80069d4:	9003      	str	r0, [sp, #12]

  F_UNLOCK();
 80069d6:	4804      	ldr	r0, [pc, #16]	; (80069e8 <chFactoryFindMailbox+0x28>)
 80069d8:	f7fd fa1a 	bl	8003e10 <chMtxUnlock>

  return dmp;
 80069dc:	9b03      	ldr	r3, [sp, #12]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	b005      	add	sp, #20
 80069e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80069e6:	bf00      	nop
 80069e8:	20000c24 	.word	0x20000c24
 80069ec:	20000c60 	.word	0x20000c60

080069f0 <chFactoryReleaseMailbox>:
 *
 * @param[in] dmp       dynamic mailbox object reference
 *
 * @api
 */
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 80069f0:	b500      	push	{lr}
 80069f2:	b083      	sub	sp, #12
 80069f4:	9001      	str	r0, [sp, #4]

  F_LOCK();
 80069f6:	4807      	ldr	r0, [pc, #28]	; (8006a14 <chFactoryReleaseMailbox+0x24>)
 80069f8:	f7fd f95a 	bl	8003cb0 <chMtxLock>

  dyn_release_object_heap(&dmp->element, &ch_factory.mbx_list);
 80069fc:	9b01      	ldr	r3, [sp, #4]
 80069fe:	4906      	ldr	r1, [pc, #24]	; (8006a18 <chFactoryReleaseMailbox+0x28>)
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fddd 	bl	80065c0 <dyn_release_object_heap>

  F_UNLOCK();
 8006a06:	4803      	ldr	r0, [pc, #12]	; (8006a14 <chFactoryReleaseMailbox+0x24>)
 8006a08:	f7fd fa02 	bl	8003e10 <chMtxUnlock>
}
 8006a0c:	bf00      	nop
 8006a0e:	b003      	add	sp, #12
 8006a10:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a14:	20000c24 	.word	0x20000c24
 8006a18:	20000c60 	.word	0x20000c60
 8006a1c:	00000000 	.word	0x00000000

08006a20 <chFactoryCreateObjectsFIFO>:
 * @api
 */
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
                                               size_t objsize,
                                               size_t objn,
                                               unsigned objalign) {
 8006a20:	b500      	push	{lr}
 8006a22:	b08d      	sub	sp, #52	; 0x34
 8006a24:	9005      	str	r0, [sp, #20]
 8006a26:	9104      	str	r1, [sp, #16]
 8006a28:	9203      	str	r2, [sp, #12]
 8006a2a:	9302      	str	r3, [sp, #8]
  size_t size1, size2;
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8006a2c:	4820      	ldr	r0, [pc, #128]	; (8006ab0 <chFactoryCreateObjectsFIFO+0x90>)
 8006a2e:	f7fd f93f 	bl	8003cb0 <chMtxLock>

  /* Enforcing alignment for the objects array.*/
  objsize = MEM_ALIGN_NEXT(objsize, objalign);
 8006a32:	9a02      	ldr	r2, [sp, #8]
 8006a34:	9b04      	ldr	r3, [sp, #16]
 8006a36:	4413      	add	r3, r2
 8006a38:	1e5a      	subs	r2, r3, #1
 8006a3a:	9b02      	ldr	r3, [sp, #8]
 8006a3c:	425b      	negs	r3, r3
 8006a3e:	4013      	ands	r3, r2
 8006a40:	9304      	str	r3, [sp, #16]
  size1   = MEM_ALIGN_NEXT(sizeof (dyn_objects_fifo_t) + (objn * sizeof (msg_t)),
 8006a42:	9b03      	ldr	r3, [sp, #12]
 8006a44:	3315      	adds	r3, #21
 8006a46:	009a      	lsls	r2, r3, #2
 8006a48:	9b02      	ldr	r3, [sp, #8]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	1e5a      	subs	r2, r3, #1
 8006a4e:	9b02      	ldr	r3, [sp, #8]
 8006a50:	425b      	negs	r3, r3
 8006a52:	4013      	ands	r3, r2
 8006a54:	930b      	str	r3, [sp, #44]	; 0x2c
                           objalign);
  size2   = objn * objsize;
 8006a56:	9b03      	ldr	r3, [sp, #12]
 8006a58:	9a04      	ldr	r2, [sp, #16]
 8006a5a:	fb02 f303 	mul.w	r3, r2, r3
 8006a5e:	930a      	str	r3, [sp, #40]	; 0x28

  /* Allocating the FIFO object with messages buffer and objects buffer.*/
  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 8006a60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a64:	441a      	add	r2, r3
 8006a66:	9b02      	ldr	r3, [sp, #8]
 8006a68:	4912      	ldr	r1, [pc, #72]	; (8006ab4 <chFactoryCreateObjectsFIFO+0x94>)
 8006a6a:	9805      	ldr	r0, [sp, #20]
 8006a6c:	f7ff fd78 	bl	8006560 <dyn_create_object_heap>
 8006a70:	9009      	str	r0, [sp, #36]	; 0x24
                                                      &ch_factory.fifo_list,
                                                      size1 + size2,
                                                      objalign);
  if (dofp != NULL) {
 8006a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d012      	beq.n	8006a9e <chFactoryCreateObjectsFIFO+0x7e>
    msg_t *msgbuf = (msg_t *)(dofp + 1);
 8006a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7a:	3354      	adds	r3, #84	; 0x54
 8006a7c:	9308      	str	r3, [sp, #32]
    uint8_t *objbuf = (uint8_t *)dofp + size1;
 8006a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a82:	4413      	add	r3, r2
 8006a84:	9307      	str	r3, [sp, #28]

    /* Initializing mailbox object data.*/
    chFifoObjectInitAligned(&dofp->fifo, objsize, objn, objalign,
 8006a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a88:	f103 0010 	add.w	r0, r3, #16
 8006a8c:	9b08      	ldr	r3, [sp, #32]
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	9b07      	ldr	r3, [sp, #28]
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	9b02      	ldr	r3, [sp, #8]
 8006a96:	9a03      	ldr	r2, [sp, #12]
 8006a98:	9904      	ldr	r1, [sp, #16]
 8006a9a:	f7ff fcd9 	bl	8006450 <chFifoObjectInitAligned>
                            (void *)objbuf, msgbuf);
  }

  F_UNLOCK();
 8006a9e:	4804      	ldr	r0, [pc, #16]	; (8006ab0 <chFactoryCreateObjectsFIFO+0x90>)
 8006aa0:	f7fd f9b6 	bl	8003e10 <chMtxUnlock>

  return dofp;
 8006aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	b00d      	add	sp, #52	; 0x34
 8006aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8006aae:	bf00      	nop
 8006ab0:	20000c24 	.word	0x20000c24
 8006ab4:	20000c64 	.word	0x20000c64
	...

08006ac0 <chFactoryFindObjectsFIFO>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 8006ac0:	b500      	push	{lr}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	9001      	str	r0, [sp, #4]
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8006ac6:	4808      	ldr	r0, [pc, #32]	; (8006ae8 <chFactoryFindObjectsFIFO+0x28>)
 8006ac8:	f7fd f8f2 	bl	8003cb0 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 8006acc:	4907      	ldr	r1, [pc, #28]	; (8006aec <chFactoryFindObjectsFIFO+0x2c>)
 8006ace:	9801      	ldr	r0, [sp, #4]
 8006ad0:	f7ff fde6 	bl	80066a0 <dyn_find_object>
 8006ad4:	9003      	str	r0, [sp, #12]

  F_UNLOCK();
 8006ad6:	4804      	ldr	r0, [pc, #16]	; (8006ae8 <chFactoryFindObjectsFIFO+0x28>)
 8006ad8:	f7fd f99a 	bl	8003e10 <chMtxUnlock>

  return dofp;
 8006adc:	9b03      	ldr	r3, [sp, #12]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	b005      	add	sp, #20
 8006ae2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ae6:	bf00      	nop
 8006ae8:	20000c24 	.word	0x20000c24
 8006aec:	20000c64 	.word	0x20000c64

08006af0 <chFactoryReleaseObjectsFIFO>:
 *
 * @param[in] dofp      dynamic "objects FIFO" object reference
 *
 * @api
 */
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 8006af0:	b500      	push	{lr}
 8006af2:	b083      	sub	sp, #12
 8006af4:	9001      	str	r0, [sp, #4]

  F_LOCK();
 8006af6:	4807      	ldr	r0, [pc, #28]	; (8006b14 <chFactoryReleaseObjectsFIFO+0x24>)
 8006af8:	f7fd f8da 	bl	8003cb0 <chMtxLock>

  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);
 8006afc:	9b01      	ldr	r3, [sp, #4]
 8006afe:	4906      	ldr	r1, [pc, #24]	; (8006b18 <chFactoryReleaseObjectsFIFO+0x28>)
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff fd5d 	bl	80065c0 <dyn_release_object_heap>

  F_UNLOCK();
 8006b06:	4803      	ldr	r0, [pc, #12]	; (8006b14 <chFactoryReleaseObjectsFIFO+0x24>)
 8006b08:	f7fd f982 	bl	8003e10 <chMtxUnlock>
}
 8006b0c:	bf00      	nop
 8006b0e:	b003      	add	sp, #12
 8006b10:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b14:	20000c24 	.word	0x20000c24
 8006b18:	20000c64 	.word	0x20000c64
 8006b1c:	00000000 	.word	0x00000000

08006b20 <chFactoryCreatePipe>:
 *                      allocated or a dynamic pipe object with
 *                      the same name exists.
 *
 * @api
 */
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 8006b20:	b500      	push	{lr}
 8006b22:	b085      	sub	sp, #20
 8006b24:	9001      	str	r0, [sp, #4]
 8006b26:	9100      	str	r1, [sp, #0]
  dyn_pipe_t *dpp;

  F_LOCK();
 8006b28:	480f      	ldr	r0, [pc, #60]	; (8006b68 <chFactoryCreatePipe+0x48>)
 8006b2a:	f7fd f8c1 	bl	8003cb0 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 8006b2e:	9b00      	ldr	r3, [sp, #0]
 8006b30:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8006b34:	2308      	movs	r3, #8
 8006b36:	490d      	ldr	r1, [pc, #52]	; (8006b6c <chFactoryCreatePipe+0x4c>)
 8006b38:	9801      	ldr	r0, [sp, #4]
 8006b3a:	f7ff fd11 	bl	8006560 <dyn_create_object_heap>
 8006b3e:	9003      	str	r0, [sp, #12]
                                             &ch_factory.pipe_list,
                                             sizeof (dyn_pipe_t) + size,
                                             CH_HEAP_ALIGNMENT);
  if (dpp != NULL) {
 8006b40:	9b03      	ldr	r3, [sp, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d008      	beq.n	8006b58 <chFactoryCreatePipe+0x38>
    /* Initializing mailbox object data.*/
    chPipeObjectInit(&dpp->pipe, (uint8_t *)(dpp + 1), size);
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	f103 0010 	add.w	r0, r3, #16
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	3360      	adds	r3, #96	; 0x60
 8006b50:	9a00      	ldr	r2, [sp, #0]
 8006b52:	4619      	mov	r1, r3
 8006b54:	f7fe ffc4 	bl	8005ae0 <chPipeObjectInit>
  }

  F_UNLOCK();
 8006b58:	4803      	ldr	r0, [pc, #12]	; (8006b68 <chFactoryCreatePipe+0x48>)
 8006b5a:	f7fd f959 	bl	8003e10 <chMtxUnlock>

  return dpp;
 8006b5e:	9b03      	ldr	r3, [sp, #12]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	b005      	add	sp, #20
 8006b64:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b68:	20000c24 	.word	0x20000c24
 8006b6c:	20000c68 	.word	0x20000c68

08006b70 <chFactoryFindPipe>:
 * @retval NULL         if a dynamic pipe object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 8006b70:	b500      	push	{lr}
 8006b72:	b085      	sub	sp, #20
 8006b74:	9001      	str	r0, [sp, #4]
  dyn_pipe_t *dpp;

  F_LOCK();
 8006b76:	4808      	ldr	r0, [pc, #32]	; (8006b98 <chFactoryFindPipe+0x28>)
 8006b78:	f7fd f89a 	bl	8003cb0 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_find_object(name, &ch_factory.pipe_list);
 8006b7c:	4907      	ldr	r1, [pc, #28]	; (8006b9c <chFactoryFindPipe+0x2c>)
 8006b7e:	9801      	ldr	r0, [sp, #4]
 8006b80:	f7ff fd8e 	bl	80066a0 <dyn_find_object>
 8006b84:	9003      	str	r0, [sp, #12]

  F_UNLOCK();
 8006b86:	4804      	ldr	r0, [pc, #16]	; (8006b98 <chFactoryFindPipe+0x28>)
 8006b88:	f7fd f942 	bl	8003e10 <chMtxUnlock>

  return dpp;
 8006b8c:	9b03      	ldr	r3, [sp, #12]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	b005      	add	sp, #20
 8006b92:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b96:	bf00      	nop
 8006b98:	20000c24 	.word	0x20000c24
 8006b9c:	20000c68 	.word	0x20000c68

08006ba0 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 8006ba0:	b500      	push	{lr}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	9001      	str	r0, [sp, #4]

  F_LOCK();
 8006ba6:	4807      	ldr	r0, [pc, #28]	; (8006bc4 <chFactoryReleasePipe+0x24>)
 8006ba8:	f7fd f882 	bl	8003cb0 <chMtxLock>

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);
 8006bac:	9b01      	ldr	r3, [sp, #4]
 8006bae:	4906      	ldr	r1, [pc, #24]	; (8006bc8 <chFactoryReleasePipe+0x28>)
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7ff fd05 	bl	80065c0 <dyn_release_object_heap>

  F_UNLOCK();
 8006bb6:	4803      	ldr	r0, [pc, #12]	; (8006bc4 <chFactoryReleasePipe+0x24>)
 8006bb8:	f7fd f92a 	bl	8003e10 <chMtxUnlock>
}
 8006bbc:	bf00      	nop
 8006bbe:	b003      	add	sp, #12
 8006bc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bc4:	20000c24 	.word	0x20000c24
 8006bc8:	20000c68 	.word	0x20000c68
 8006bcc:	00000000 	.word	0x00000000

08006bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bd4:	9b01      	ldr	r3, [sp, #4]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <__NVIC_SetPriorityGrouping+0x3c>)
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006be2:	9a02      	ldr	r2, [sp, #8]
 8006be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006be8:	4013      	ands	r3, r2
 8006bea:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bf0:	9b02      	ldr	r3, [sp, #8]
 8006bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bfc:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
 8006bfe:	4a03      	ldr	r2, [pc, #12]	; (8006c0c <__NVIC_SetPriorityGrouping+0x3c>)
 8006c00:	9b02      	ldr	r3, [sp, #8]
 8006c02:	60d3      	str	r3, [r2, #12]
}
 8006c04:	bf00      	nop
 8006c06:	b004      	add	sp, #16
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	e000ed00 	.word	0xe000ed00

08006c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c10:	b082      	sub	sp, #8
 8006c12:	4603      	mov	r3, r0
 8006c14:	9100      	str	r1, [sp, #0]
 8006c16:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c1a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	db0a      	blt.n	8006c38 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c22:	9b00      	ldr	r3, [sp, #0]
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	490c      	ldr	r1, [pc, #48]	; (8006c58 <__NVIC_SetPriority+0x48>)
 8006c28:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8006c2c:	0112      	lsls	r2, r2, #4
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	440b      	add	r3, r1
 8006c32:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c36:	e00b      	b.n	8006c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c38:	9b00      	ldr	r3, [sp, #0]
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	4907      	ldr	r1, [pc, #28]	; (8006c5c <__NVIC_SetPriority+0x4c>)
 8006c3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006c42:	f003 030f 	and.w	r3, r3, #15
 8006c46:	3b04      	subs	r3, #4
 8006c48:	0112      	lsls	r2, r2, #4
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	440b      	add	r3, r1
 8006c4e:	761a      	strb	r2, [r3, #24]
}
 8006c50:	bf00      	nop
 8006c52:	b002      	add	sp, #8
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	e000e100 	.word	0xe000e100
 8006c5c:	e000ed00 	.word	0xe000ed00

08006c60 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch and, optionally, for system calls.
 * @note    The SVC vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8006c60:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8006c62:	f3ef 8309 	mrs	r3, PSP
 8006c66:	9300      	str	r3, [sp, #0]
  return(result);
 8006c68:	9b00      	ldr	r3, [sp, #0]
/*lint -restore*/
  uint32_t psp = __get_PSP();
 8006c6a:	9303      	str	r3, [sp, #12]
    /* From privileged mode, it is used for context discarding in the
       preemption code.*/

    /* Unstacking procedure, discarding the current exception context and
       positioning the stack to point to the real one.*/
    psp += sizeof (struct port_extctx);
 8006c6c:	9b03      	ldr	r3, [sp, #12]
 8006c6e:	3320      	adds	r3, #32
 8006c70:	9303      	str	r3, [sp, #12]
 8006c72:	9b03      	ldr	r3, [sp, #12]
 8006c74:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8006c76:	9b01      	ldr	r3, [sp, #4]
 8006c78:	f383 8809 	msr	PSP, r3
}
 8006c7c:	bf00      	nop
 8006c7e:	2300      	movs	r3, #0
 8006c80:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006c82:	9b02      	ldr	r3, [sp, #8]
 8006c84:	f383 8811 	msr	BASEPRI, r3
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
}
 8006c8c:	bf00      	nop
#endif

    /* Restoring the normal interrupts status.*/
    port_unlock_from_isr();
  }
}
 8006c8e:	bf00      	nop
 8006c90:	b004      	add	sp, #16
 8006c92:	4770      	bx	lr
	...

08006ca0 <port_init>:
 *
 * @param[in, out] oip  pointer to the @p os_instance_t structure
 *
 * @notapi
 */
void port_init(os_instance_t *oip) {
 8006ca0:	b500      	push	{lr}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	9001      	str	r0, [sp, #4]
 8006ca6:	2330      	movs	r3, #48	; 0x30
 8006ca8:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006caa:	9b03      	ldr	r3, [sp, #12]
 8006cac:	f383 8811 	msr	BASEPRI, r3
}
 8006cb0:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8006cb2:	b662      	cpsie	i
}
 8006cb4:	bf00      	nop
}
 8006cb6:	bf00      	nop

  /* Starting in a known IRQ configuration.*/
  port_suspend();

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
 8006cb8:	2003      	movs	r0, #3
 8006cba:	f7ff ff89 	bl	8006bd0 <__NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <port_init+0x54>)
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	4a0c      	ldr	r2, [pc, #48]	; (8006cf4 <port_init+0x54>)
 8006cc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cc8:	60d3      	str	r3, [r2, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8006cca:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <port_init+0x58>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a0a      	ldr	r2, [pc, #40]	; (8006cf8 <port_init+0x58>)
 8006cd0:	f043 0301 	orr.w	r3, r3, #1
 8006cd4:	6013      	str	r3, [r2, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
 8006cd6:	2102      	movs	r1, #2
 8006cd8:	f06f 0004 	mvn.w	r0, #4
 8006cdc:	f7ff ff98 	bl	8006c10 <__NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 8006ce0:	2103      	movs	r1, #3
 8006ce2:	f06f 0001 	mvn.w	r0, #1
 8006ce6:	f7ff ff93 	bl	8006c10 <__NVIC_SetPriority>

#if (PORT_ENABLE_GUARD_PAGES == TRUE) || (PORT_USE_SYSCALL == TRUE)
  /* MPU is enabled.*/
  mpuEnable(MPU_CTRL_PRIVDEFENA);
#endif
}
 8006cea:	bf00      	nop
 8006cec:	b005      	add	sp, #20
 8006cee:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cf2:	bf00      	nop
 8006cf4:	e000edf0 	.word	0xe000edf0
 8006cf8:	e0001000 	.word	0xe0001000
 8006cfc:	00000000 	.word	0x00000000

08006d00 <__port_irq_epilogue>:
#endif

/**
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {
 8006d00:	b500      	push	{lr}
 8006d02:	b087      	sub	sp, #28
 8006d04:	2330      	movs	r3, #48	; 0x30
 8006d06:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006d08:	9b03      	ldr	r3, [sp, #12]
 8006d0a:	f383 8811 	msr	BASEPRI, r3
}
 8006d0e:	bf00      	nop
}
 8006d10:	bf00      	nop
}
 8006d12:	bf00      	nop

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8006d14:	4b18      	ldr	r3, [pc, #96]	; (8006d78 <__port_irq_epilogue+0x78>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d020      	beq.n	8006d62 <__port_irq_epilogue+0x62>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8006d20:	f3ef 8309 	mrs	r3, PSP
 8006d24:	9301      	str	r3, [sp, #4]
  return(result);
 8006d26:	9b01      	ldr	r3, [sp, #4]
        lctxp->control = control;
        lctxp->ectxp   = (struct port_extctx *)psp;
      }
    }
#else
    s_psp = __get_PSP();
 8006d28:	9305      	str	r3, [sp, #20]
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 8006d2a:	9b05      	ldr	r3, [sp, #20]
 8006d2c:	3b20      	subs	r3, #32
 8006d2e:	9305      	str	r3, [sp, #20]

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;
 8006d30:	9b05      	ldr	r3, [sp, #20]
 8006d32:	9304      	str	r3, [sp, #16]

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8006d34:	9b04      	ldr	r3, [sp, #16]
 8006d36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d3a:	61da      	str	r2, [r3, #28]
 8006d3c:	9b05      	ldr	r3, [sp, #20]
 8006d3e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8006d40:	9b02      	ldr	r3, [sp, #8]
 8006d42:	f383 8809 	msr	PSP, r3
}
 8006d46:	bf00      	nop
    /* Writing back the modified S-PSP value.*/
    __set_PSP(s_psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8006d48:	f7fb ff32 	bl	8002bb0 <chSchIsPreemptionRequired>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <__port_irq_epilogue+0x5a>
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8006d52:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <__port_irq_epilogue+0x7c>)
 8006d54:	9b04      	ldr	r3, [sp, #16]
 8006d56:	619a      	str	r2, [r3, #24]
      ectxp->pc = (uint32_t)__port_exit_from_isr;
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
 8006d58:	e00b      	b.n	8006d72 <__port_irq_epilogue+0x72>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8006d5a:	4a09      	ldr	r2, [pc, #36]	; (8006d80 <__port_irq_epilogue+0x80>)
 8006d5c:	9b04      	ldr	r3, [sp, #16]
 8006d5e:	619a      	str	r2, [r3, #24]
    return;
 8006d60:	e007      	b.n	8006d72 <__port_irq_epilogue+0x72>
 8006d62:	2300      	movs	r3, #0
 8006d64:	9300      	str	r3, [sp, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006d66:	9b00      	ldr	r3, [sp, #0]
 8006d68:	f383 8811 	msr	BASEPRI, r3
}
 8006d6c:	bf00      	nop
}
 8006d6e:	bf00      	nop
}
 8006d70:	bf00      	nop
  }
  port_unlock_from_isr();
}
 8006d72:	b007      	add	sp, #28
 8006d74:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d78:	e000ed00 	.word	0xe000ed00
 8006d7c:	080002e3 	.word	0x080002e3
 8006d80:	080002e6 	.word	0x080002e6
	...

08006d90 <chTimeIsInRangeX.lto_priv.1>:
 *
 * @xclass
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {
 8006d90:	b084      	sub	sp, #16
 8006d92:	9003      	str	r0, [sp, #12]
 8006d94:	9102      	str	r1, [sp, #8]
 8006d96:	9201      	str	r2, [sp, #4]

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8006d98:	9a03      	ldr	r2, [sp, #12]
 8006d9a:	9b02      	ldr	r3, [sp, #8]
 8006d9c:	1ad2      	subs	r2, r2, r3
                (systime_t)((systime_t)end - (systime_t)start));
 8006d9e:	9901      	ldr	r1, [sp, #4]
 8006da0:	9b02      	ldr	r3, [sp, #8]
 8006da2:	1acb      	subs	r3, r1, r3
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8006da4:	429a      	cmp	r2, r3
 8006da6:	bf34      	ite	cc
 8006da8:	2301      	movcc	r3, #1
 8006daa:	2300      	movcs	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	b004      	add	sp, #16
 8006db2:	4770      	bx	lr
	...

08006dc0 <port_timer_get_time.lto_priv.3>:
static inline systime_t port_timer_get_time(void) {
 8006dc0:	b508      	push	{r3, lr}
  return stGetCounter();
 8006dc2:	f7f9 fb8d 	bl	80004e0 <stGetCounter>
 8006dc6:	4603      	mov	r3, r0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	bd08      	pop	{r3, pc}
 8006dcc:	0000      	movs	r0, r0
	...

08006dd0 <chVTGetSystemTimeX.lto_priv.3>:
static inline systime_t chVTGetSystemTimeX(void) {
 8006dd0:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8006dd2:	f7ff fff5 	bl	8006dc0 <port_timer_get_time.lto_priv.3>
 8006dd6:	4603      	mov	r3, r0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	bd08      	pop	{r3, pc}
 8006ddc:	0000      	movs	r0, r0
	...

08006de0 <osalOsGetSystemTimeX>:
static inline systime_t osalOsGetSystemTimeX(void) {
 8006de0:	b508      	push	{r3, lr}
  return chVTGetSystemTimeX();
 8006de2:	f7ff fff5 	bl	8006dd0 <chVTGetSystemTimeX.lto_priv.3>
 8006de6:	4603      	mov	r3, r0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	bd08      	pop	{r3, pc}
 8006dec:	0000      	movs	r0, r0
	...

08006df0 <osalTimeIsInRangeX>:
                                      systime_t end) {
 8006df0:	b500      	push	{lr}
 8006df2:	b085      	sub	sp, #20
 8006df4:	9003      	str	r0, [sp, #12]
 8006df6:	9102      	str	r1, [sp, #8]
 8006df8:	9201      	str	r2, [sp, #4]
  return chTimeIsInRangeX(time, start, end);
 8006dfa:	9a01      	ldr	r2, [sp, #4]
 8006dfc:	9902      	ldr	r1, [sp, #8]
 8006dfe:	9803      	ldr	r0, [sp, #12]
 8006e00:	f7ff ffc6 	bl	8006d90 <chTimeIsInRangeX.lto_priv.1>
 8006e04:	4603      	mov	r3, r0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	b005      	add	sp, #20
 8006e0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e0e:	bf00      	nop

08006e10 <osalThreadSleep.lto_priv.1>:
static inline void osalThreadSleep(sysinterval_t delay) {
 8006e10:	b500      	push	{lr}
 8006e12:	b083      	sub	sp, #12
 8006e14:	9001      	str	r0, [sp, #4]
  chThdSleep(delay);
 8006e16:	9801      	ldr	r0, [sp, #4]
 8006e18:	f7fc fb0a 	bl	8003430 <chThdSleep>
}
 8006e1c:	bf00      	nop
 8006e1e:	b003      	add	sp, #12
 8006e20:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006e30 <test_stream_putchar>:
/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

#if (TEST_CFG_CHIBIOS_SUPPORT == TRUE) || defined(__DOXYGEN__)
static int test_stream_putchar(int c) {
 8006e30:	b500      	push	{lr}
 8006e32:	b083      	sub	sp, #12
 8006e34:	9001      	str	r0, [sp, #4]

  streamPut(chtest.stream, (uint8_t)c);
 8006e36:	4b07      	ldr	r3, [pc, #28]	; (8006e54 <test_stream_putchar+0x24>)
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	4a05      	ldr	r2, [pc, #20]	; (8006e54 <test_stream_putchar+0x24>)
 8006e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e42:	9901      	ldr	r1, [sp, #4]
 8006e44:	b2c9      	uxtb	r1, r1
 8006e46:	4610      	mov	r0, r2
 8006e48:	4798      	blx	r3

  return c;
 8006e4a:	9b01      	ldr	r3, [sp, #4]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	b003      	add	sp, #12
 8006e50:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e54:	20000c6c 	.word	0x20000c6c
	...

08006e60 <test_clear_tokens>:
#endif

static void test_clear_tokens(void) {

  chtest.tokp = chtest.tokens_buffer;
 8006e60:	4b02      	ldr	r3, [pc, #8]	; (8006e6c <test_clear_tokens+0xc>)
 8006e62:	4a03      	ldr	r2, [pc, #12]	; (8006e70 <test_clear_tokens+0x10>)
 8006e64:	60da      	str	r2, [r3, #12]
}
 8006e66:	bf00      	nop
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20000c6c 	.word	0x20000c6c
 8006e70:	20000c7c 	.word	0x20000c7c
	...

08006e80 <test_print_tokens>:

static void test_print_tokens(void) {
 8006e80:	b500      	push	{lr}
 8006e82:	b083      	sub	sp, #12
  char *cp = chtest.tokens_buffer;
 8006e84:	4b09      	ldr	r3, [pc, #36]	; (8006eac <test_print_tokens+0x2c>)
 8006e86:	9301      	str	r3, [sp, #4]

  while (cp < chtest.tokp) {
 8006e88:	e006      	b.n	8006e98 <test_print_tokens+0x18>
    test_putchar(*cp++);
 8006e8a:	9b01      	ldr	r3, [sp, #4]
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	9201      	str	r2, [sp, #4]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fa9c 	bl	80073d0 <test_putchar>
  while (cp < chtest.tokp) {
 8006e98:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <test_print_tokens+0x30>)
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	9a01      	ldr	r2, [sp, #4]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d3f3      	bcc.n	8006e8a <test_print_tokens+0xa>
  }
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	b003      	add	sp, #12
 8006ea8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006eac:	20000c7c 	.word	0x20000c7c
 8006eb0:	20000c6c 	.word	0x20000c6c
	...

08006ec0 <test_execute_case>:

static void test_execute_case(const testcase_t *tcp) {
 8006ec0:	b500      	push	{lr}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	9001      	str	r0, [sp, #4]

  /* Initialization */
  test_clear_tokens();
 8006ec6:	f7ff ffcb 	bl	8006e60 <test_clear_tokens>
  chtest.local_fail = false;
 8006eca:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <test_execute_case+0x3c>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	715a      	strb	r2, [r3, #5]

  if (tcp->setup != NULL) {
 8006ed0:	9b01      	ldr	r3, [sp, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <test_execute_case+0x1e>
    tcp->setup();
 8006ed8:	9b01      	ldr	r3, [sp, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	4798      	blx	r3
  }
  tcp->execute();
 8006ede:	9b01      	ldr	r3, [sp, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	4798      	blx	r3
  if (tcp->teardown != NULL) {
 8006ee4:	9b01      	ldr	r3, [sp, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <test_execute_case+0x32>
    tcp->teardown();
 8006eec:	9b01      	ldr	r3, [sp, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	4798      	blx	r3
  }
}
 8006ef2:	bf00      	nop
 8006ef4:	b003      	add	sp, #12
 8006ef6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006efa:	bf00      	nop
 8006efc:	20000c6c 	.word	0x20000c6c

08006f00 <test_print_string>:

static void test_print_string(const char *s) {
 8006f00:	b500      	push	{lr}
 8006f02:	b085      	sub	sp, #20
 8006f04:	9001      	str	r0, [sp, #4]
  char c;

  while ((c = *s) != '\0') {
 8006f06:	e007      	b.n	8006f18 <test_print_string+0x18>
    test_putchar(c);
 8006f08:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fa5f 	bl	80073d0 <test_putchar>
    s++;
 8006f12:	9b01      	ldr	r3, [sp, #4]
 8006f14:	3301      	adds	r3, #1
 8006f16:	9301      	str	r3, [sp, #4]
  while ((c = *s) != '\0') {
 8006f18:	9b01      	ldr	r3, [sp, #4]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	f88d 300f 	strb.w	r3, [sp, #15]
 8006f20:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1ef      	bne.n	8006f08 <test_print_string+0x8>
  }
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	b005      	add	sp, #20
 8006f2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f32:	bf00      	nop
	...

08006f40 <test_print_line>:

static void test_print_line(void) {
 8006f40:	b500      	push	{lr}
 8006f42:	b083      	sub	sp, #12
  unsigned i;

  for (i = 0; i < 76; i++) {
 8006f44:	2300      	movs	r3, #0
 8006f46:	9301      	str	r3, [sp, #4]
 8006f48:	e005      	b.n	8006f56 <test_print_line+0x16>
    test_putchar('-');
 8006f4a:	202d      	movs	r0, #45	; 0x2d
 8006f4c:	f000 fa40 	bl	80073d0 <test_putchar>
  for (i = 0; i < 76; i++) {
 8006f50:	9b01      	ldr	r3, [sp, #4]
 8006f52:	3301      	adds	r3, #1
 8006f54:	9301      	str	r3, [sp, #4]
 8006f56:	9b01      	ldr	r3, [sp, #4]
 8006f58:	2b4b      	cmp	r3, #75	; 0x4b
 8006f5a:	d9f6      	bls.n	8006f4a <test_print_line+0xa>
  }
  test_print_string(TEST_CFG_EOL_STRING);
 8006f5c:	4803      	ldr	r0, [pc, #12]	; (8006f6c <test_print_line+0x2c>)
 8006f5e:	f7ff ffcf 	bl	8006f00 <test_print_string>
}
 8006f62:	bf00      	nop
 8006f64:	b003      	add	sp, #12
 8006f66:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f6a:	bf00      	nop
 8006f6c:	0801d65c 	.word	0x0801d65c

08006f70 <test_print_fat_line>:

static void test_print_fat_line(void) {
 8006f70:	b500      	push	{lr}
 8006f72:	b083      	sub	sp, #12
  unsigned i;

  for (i = 0; i < 76; i++) {
 8006f74:	2300      	movs	r3, #0
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	e005      	b.n	8006f86 <test_print_fat_line+0x16>
    test_putchar('=');
 8006f7a:	203d      	movs	r0, #61	; 0x3d
 8006f7c:	f000 fa28 	bl	80073d0 <test_putchar>
  for (i = 0; i < 76; i++) {
 8006f80:	9b01      	ldr	r3, [sp, #4]
 8006f82:	3301      	adds	r3, #1
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	9b01      	ldr	r3, [sp, #4]
 8006f88:	2b4b      	cmp	r3, #75	; 0x4b
 8006f8a:	d9f6      	bls.n	8006f7a <test_print_fat_line+0xa>
  }
  test_print_string(TEST_CFG_EOL_STRING);
 8006f8c:	4803      	ldr	r0, [pc, #12]	; (8006f9c <test_print_fat_line+0x2c>)
 8006f8e:	f7ff ffb7 	bl	8006f00 <test_print_string>
}
 8006f92:	bf00      	nop
 8006f94:	b003      	add	sp, #12
 8006f96:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f9a:	bf00      	nop
 8006f9c:	0801d65c 	.word	0x0801d65c

08006fa0 <test_execute_inner>:
 * @param[in] tsp       test suite to execute
 * @return              A failure boolean.
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 */
static bool test_execute_inner(const testsuite_t *tsp) {
 8006fa0:	b500      	push	{lr}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	9001      	str	r0, [sp, #4]
  unsigned tseq, tcase;

  /* Test execution.*/
  test_printf(TEST_CFG_EOL_STRING);
 8006fa6:	4865      	ldr	r0, [pc, #404]	; (800713c <test_execute_inner+0x19c>)
 8006fa8:	f000 fc7a 	bl	80078a0 <test_printf>
  if (tsp->name != NULL) {
 8006fac:	9b01      	ldr	r3, [sp, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d006      	beq.n	8006fc2 <test_execute_inner+0x22>
    test_printf("*** %s"TEST_CFG_EOL_STRING, tsp->name);
 8006fb4:	9b01      	ldr	r3, [sp, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4861      	ldr	r0, [pc, #388]	; (8007140 <test_execute_inner+0x1a0>)
 8006fbc:	f000 fc70 	bl	80078a0 <test_printf>
 8006fc0:	e002      	b.n	8006fc8 <test_execute_inner+0x28>
  }
  else {
    test_printf("*** Test Suite"TEST_CFG_EOL_STRING);
 8006fc2:	4860      	ldr	r0, [pc, #384]	; (8007144 <test_execute_inner+0x1a4>)
 8006fc4:	f000 fc6c 	bl	80078a0 <test_printf>
  }
  test_printf("***"TEST_CFG_EOL_STRING);
 8006fc8:	485f      	ldr	r0, [pc, #380]	; (8007148 <test_execute_inner+0x1a8>)
 8006fca:	f000 fc69 	bl	80078a0 <test_printf>
  test_printf("*** Compiled:     %s"TEST_CFG_EOL_STRING, __DATE__ " - " __TIME__);
 8006fce:	495f      	ldr	r1, [pc, #380]	; (800714c <test_execute_inner+0x1ac>)
 8006fd0:	485f      	ldr	r0, [pc, #380]	; (8007150 <test_execute_inner+0x1b0>)
 8006fd2:	f000 fc65 	bl	80078a0 <test_printf>
#if defined(PLATFORM_NAME)
  test_printf("*** Platform:     %s"TEST_CFG_EOL_STRING, PLATFORM_NAME);
 8006fd6:	495f      	ldr	r1, [pc, #380]	; (8007154 <test_execute_inner+0x1b4>)
 8006fd8:	485f      	ldr	r0, [pc, #380]	; (8007158 <test_execute_inner+0x1b8>)
 8006fda:	f000 fc61 	bl	80078a0 <test_printf>
#endif
#if defined(BOARD_NAME)
  test_printf("*** Test Board:   %s"TEST_CFG_EOL_STRING, BOARD_NAME);
 8006fde:	495f      	ldr	r1, [pc, #380]	; (800715c <test_execute_inner+0x1bc>)
 8006fe0:	485f      	ldr	r0, [pc, #380]	; (8007160 <test_execute_inner+0x1c0>)
 8006fe2:	f000 fc5d 	bl	80078a0 <test_printf>
  {
    extern uint8_t __text_base__,   __text_end__,
                   __rodata_base__, __rodata_end__,
                   __data_base__,   __data_end__,
                   __bss_base__,    __bss_end__;
    test_printf("***"TEST_CFG_EOL_STRING);
 8006fe6:	4858      	ldr	r0, [pc, #352]	; (8007148 <test_execute_inner+0x1a8>)
 8006fe8:	f000 fc5a 	bl	80078a0 <test_printf>
    test_printf("*** Text size:    %u bytes"TEST_CFG_EOL_STRING, &__text_end__   - &__text_base__);
 8006fec:	4a5d      	ldr	r2, [pc, #372]	; (8007164 <test_execute_inner+0x1c4>)
 8006fee:	4b5e      	ldr	r3, [pc, #376]	; (8007168 <test_execute_inner+0x1c8>)
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	485d      	ldr	r0, [pc, #372]	; (800716c <test_execute_inner+0x1cc>)
 8006ff6:	f000 fc53 	bl	80078a0 <test_printf>
    test_printf("*** RO data size: %u bytes"TEST_CFG_EOL_STRING, &__rodata_end__ - &__rodata_base__);
 8006ffa:	4a5d      	ldr	r2, [pc, #372]	; (8007170 <test_execute_inner+0x1d0>)
 8006ffc:	4b5d      	ldr	r3, [pc, #372]	; (8007174 <test_execute_inner+0x1d4>)
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	4619      	mov	r1, r3
 8007002:	485d      	ldr	r0, [pc, #372]	; (8007178 <test_execute_inner+0x1d8>)
 8007004:	f000 fc4c 	bl	80078a0 <test_printf>
    test_printf("*** Data size:    %u bytes"TEST_CFG_EOL_STRING, &__data_end__   - &__data_base__);
 8007008:	4a5c      	ldr	r2, [pc, #368]	; (800717c <test_execute_inner+0x1dc>)
 800700a:	4b5d      	ldr	r3, [pc, #372]	; (8007180 <test_execute_inner+0x1e0>)
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	4619      	mov	r1, r3
 8007010:	485c      	ldr	r0, [pc, #368]	; (8007184 <test_execute_inner+0x1e4>)
 8007012:	f000 fc45 	bl	80078a0 <test_printf>
    test_printf("*** BSS size:     %u bytes"TEST_CFG_EOL_STRING, &__bss_end__    - &__bss_base__);
 8007016:	4a5c      	ldr	r2, [pc, #368]	; (8007188 <test_execute_inner+0x1e8>)
 8007018:	4b5c      	ldr	r3, [pc, #368]	; (800718c <test_execute_inner+0x1ec>)
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	4619      	mov	r1, r3
 800701e:	485c      	ldr	r0, [pc, #368]	; (8007190 <test_execute_inner+0x1f0>)
 8007020:	f000 fc3e 	bl	80078a0 <test_printf>
  }
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER();
#endif
  test_printf(TEST_CFG_EOL_STRING);
 8007024:	4845      	ldr	r0, [pc, #276]	; (800713c <test_execute_inner+0x19c>)
 8007026:	f000 fc3b 	bl	80078a0 <test_printf>

  chtest.global_fail = false;
 800702a:	4b5a      	ldr	r3, [pc, #360]	; (8007194 <test_execute_inner+0x1f4>)
 800702c:	2200      	movs	r2, #0
 800702e:	711a      	strb	r2, [r3, #4]
  tseq = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	9303      	str	r3, [sp, #12]
  while (tsp->sequences[tseq] != NULL) {
 8007034:	e064      	b.n	8007100 <test_execute_inner+0x160>
#if defined(TEST_REPORT_HOOK_TESTSEQUENCE)
    TEST_REPORT_HOOK_TESTSEQUENCE(tsp->sequences[tseq]);
#endif
#if TEST_CFG_SHOW_SEQUENCES == TRUE
    test_print_fat_line();
 8007036:	f7ff ff9b 	bl	8006f70 <test_print_fat_line>
    test_printf("=== Test Sequence %u (%s)"TEST_CFG_EOL_STRING, tseq + 1U, tsp->sequences[tseq]->name);
 800703a:	9b03      	ldr	r3, [sp, #12]
 800703c:	1c59      	adds	r1, r3, #1
 800703e:	9b01      	ldr	r3, [sp, #4]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	9b03      	ldr	r3, [sp, #12]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	4852      	ldr	r0, [pc, #328]	; (8007198 <test_execute_inner+0x1f8>)
 8007050:	f000 fc26 	bl	80078a0 <test_printf>
#endif
    tcase = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	9302      	str	r3, [sp, #8]
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8007058:	e042      	b.n	80070e0 <test_execute_inner+0x140>
      test_print_line();
 800705a:	f7ff ff71 	bl	8006f40 <test_print_line>
      test_printf("--- Test Case %u.%u (%s)"TEST_CFG_EOL_STRING, tseq + 1U, tcase + 1U, tsp->sequences[tseq]->cases[tcase]->name);
 800705e:	9b03      	ldr	r3, [sp, #12]
 8007060:	1c59      	adds	r1, r3, #1
 8007062:	9b02      	ldr	r3, [sp, #8]
 8007064:	1c58      	adds	r0, r3, #1
 8007066:	9b01      	ldr	r3, [sp, #4]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	9b03      	ldr	r3, [sp, #12]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	9b02      	ldr	r3, [sp, #8]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4602      	mov	r2, r0
 8007080:	4846      	ldr	r0, [pc, #280]	; (800719c <test_execute_inner+0x1fc>)
 8007082:	f000 fc0d 	bl	80078a0 <test_printf>
#if TEST_CFG_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_CFG_DELAY_BETWEEN_TESTS);
 8007086:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800708a:	f7ff fec1 	bl	8006e10 <osalThreadSleep.lto_priv.1>
#endif
#if defined(TEST_REPORT_HOOK_TESTCASE)
      TEST_REPORT_HOOK_TESTCASE(tsp->sequences[tseq]->cases[tcase]);
#endif
      test_execute_case(tsp->sequences[tseq]->cases[tcase]);
 800708e:	9b01      	ldr	r3, [sp, #4]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	9b03      	ldr	r3, [sp, #12]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	9b02      	ldr	r3, [sp, #8]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff ff0b 	bl	8006ec0 <test_execute_case>
      if (chtest.local_fail) {
 80070aa:	4b3a      	ldr	r3, [pc, #232]	; (8007194 <test_execute_inner+0x1f4>)
 80070ac:	795b      	ldrb	r3, [r3, #5]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d010      	beq.n	80070d4 <test_execute_inner+0x134>
        test_printf("--- Result: FAILURE (#%u [", chtest.current_step, "", chtest.failure_message);
 80070b2:	4b38      	ldr	r3, [pc, #224]	; (8007194 <test_execute_inner+0x1f4>)
 80070b4:	6819      	ldr	r1, [r3, #0]
 80070b6:	4b37      	ldr	r3, [pc, #220]	; (8007194 <test_execute_inner+0x1f4>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	4a39      	ldr	r2, [pc, #228]	; (80071a0 <test_execute_inner+0x200>)
 80070bc:	4839      	ldr	r0, [pc, #228]	; (80071a4 <test_execute_inner+0x204>)
 80070be:	f000 fbef 	bl	80078a0 <test_printf>
        test_print_tokens();
 80070c2:	f7ff fedd 	bl	8006e80 <test_print_tokens>
        test_printf("] \"%s\")"TEST_CFG_EOL_STRING, chtest.failure_message);
 80070c6:	4b33      	ldr	r3, [pc, #204]	; (8007194 <test_execute_inner+0x1f4>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	4619      	mov	r1, r3
 80070cc:	4836      	ldr	r0, [pc, #216]	; (80071a8 <test_execute_inner+0x208>)
 80070ce:	f000 fbe7 	bl	80078a0 <test_printf>
 80070d2:	e002      	b.n	80070da <test_execute_inner+0x13a>
      }
      else {
        test_printf("--- Result: SUCCESS"TEST_CFG_EOL_STRING);
 80070d4:	4835      	ldr	r0, [pc, #212]	; (80071ac <test_execute_inner+0x20c>)
 80070d6:	f000 fbe3 	bl	80078a0 <test_printf>
      }
      tcase++;
 80070da:	9b02      	ldr	r3, [sp, #8]
 80070dc:	3301      	adds	r3, #1
 80070de:	9302      	str	r3, [sp, #8]
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 80070e0:	9b01      	ldr	r3, [sp, #4]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	9b03      	ldr	r3, [sp, #12]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	9b02      	ldr	r3, [sp, #8]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1af      	bne.n	800705a <test_execute_inner+0xba>
    }
    tseq++;
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	3301      	adds	r3, #1
 80070fe:	9303      	str	r3, [sp, #12]
  while (tsp->sequences[tseq] != NULL) {
 8007100:	9b01      	ldr	r3, [sp, #4]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	9b03      	ldr	r3, [sp, #12]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d192      	bne.n	8007036 <test_execute_inner+0x96>
  }
  test_print_line();
 8007110:	f7ff ff16 	bl	8006f40 <test_print_line>
  test_printf(TEST_CFG_EOL_STRING);
 8007114:	4809      	ldr	r0, [pc, #36]	; (800713c <test_execute_inner+0x19c>)
 8007116:	f000 fbc3 	bl	80078a0 <test_printf>
  test_printf("Final result: %s"TEST_CFG_EOL_STRING,
              chtest.global_fail ? "FAILURE" : "SUCCESS");
 800711a:	4b1e      	ldr	r3, [pc, #120]	; (8007194 <test_execute_inner+0x1f4>)
 800711c:	791b      	ldrb	r3, [r3, #4]
  test_printf("Final result: %s"TEST_CFG_EOL_STRING,
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <test_execute_inner+0x186>
 8007122:	4b23      	ldr	r3, [pc, #140]	; (80071b0 <test_execute_inner+0x210>)
 8007124:	e000      	b.n	8007128 <test_execute_inner+0x188>
 8007126:	4b23      	ldr	r3, [pc, #140]	; (80071b4 <test_execute_inner+0x214>)
 8007128:	4619      	mov	r1, r3
 800712a:	4823      	ldr	r0, [pc, #140]	; (80071b8 <test_execute_inner+0x218>)
 800712c:	f000 fbb8 	bl	80078a0 <test_printf>

#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END();
#endif

  return chtest.global_fail;
 8007130:	4b18      	ldr	r3, [pc, #96]	; (8007194 <test_execute_inner+0x1f4>)
 8007132:	791b      	ldrb	r3, [r3, #4]
}
 8007134:	4618      	mov	r0, r3
 8007136:	b005      	add	sp, #20
 8007138:	f85d fb04 	ldr.w	pc, [sp], #4
 800713c:	0801d65c 	.word	0x0801d65c
 8007140:	0801d4cc 	.word	0x0801d4cc
 8007144:	0801d4d8 	.word	0x0801d4d8
 8007148:	0801d4ec 	.word	0x0801d4ec
 800714c:	0801d4f4 	.word	0x0801d4f4
 8007150:	0801d50c 	.word	0x0801d50c
 8007154:	0801d524 	.word	0x0801d524
 8007158:	0801d550 	.word	0x0801d550
 800715c:	0801d568 	.word	0x0801d568
 8007160:	0801d590 	.word	0x0801d590
 8007164:	0801c8b0 	.word	0x0801c8b0
 8007168:	080001e0 	.word	0x080001e0
 800716c:	0801d5a8 	.word	0x0801d5a8
 8007170:	08026bd4 	.word	0x08026bd4
 8007174:	0801c8b0 	.word	0x0801c8b0
 8007178:	0801d5c8 	.word	0x0801d5c8
 800717c:	20000938 	.word	0x20000938
 8007180:	20000800 	.word	0x20000800
 8007184:	0801d5e8 	.word	0x0801d5e8
 8007188:	20019120 	.word	0x20019120
 800718c:	20000938 	.word	0x20000938
 8007190:	0801d608 	.word	0x0801d608
 8007194:	20000c6c 	.word	0x20000c6c
 8007198:	0801d628 	.word	0x0801d628
 800719c:	0801d644 	.word	0x0801d644
 80071a0:	0801d4e8 	.word	0x0801d4e8
 80071a4:	0801d660 	.word	0x0801d660
 80071a8:	0801d67c 	.word	0x0801d67c
 80071ac:	0801d688 	.word	0x0801d688
 80071b0:	0801d6a0 	.word	0x0801d6a0
 80071b4:	0801d6a8 	.word	0x0801d6a8
 80071b8:	0801d6b0 	.word	0x0801d6b0
 80071bc:	00000000 	.word	0x00000000

080071c0 <__test_fail>:

/*===========================================================================*/
/* Module exported functions.                                                */
/*===========================================================================*/

bool __test_fail(const char *msg) {
 80071c0:	b082      	sub	sp, #8
 80071c2:	9001      	str	r0, [sp, #4]

  chtest.local_fail      = true;
 80071c4:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <__test_fail+0x20>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	715a      	strb	r2, [r3, #5]
  chtest.global_fail     = true;
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <__test_fail+0x20>)
 80071cc:	2201      	movs	r2, #1
 80071ce:	711a      	strb	r2, [r3, #4]
  chtest.failure_message = msg;
 80071d0:	4a03      	ldr	r2, [pc, #12]	; (80071e0 <__test_fail+0x20>)
 80071d2:	9b01      	ldr	r3, [sp, #4]
 80071d4:	6093      	str	r3, [r2, #8]
  return true;
 80071d6:	2301      	movs	r3, #1
}
 80071d8:	4618      	mov	r0, r3
 80071da:	b002      	add	sp, #8
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	20000c6c 	.word	0x20000c6c
	...

080071f0 <__test_assert>:

bool __test_assert(bool condition, const char *msg) {
 80071f0:	b500      	push	{lr}
 80071f2:	b083      	sub	sp, #12
 80071f4:	4603      	mov	r3, r0
 80071f6:	9100      	str	r1, [sp, #0]
 80071f8:	f88d 3007 	strb.w	r3, [sp, #7]

  if (!condition) {
 80071fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007200:	f083 0301 	eor.w	r3, r3, #1
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d004      	beq.n	8007214 <__test_assert+0x24>
    return __test_fail(msg);
 800720a:	9800      	ldr	r0, [sp, #0]
 800720c:	f7ff ffd8 	bl	80071c0 <__test_fail>
 8007210:	4603      	mov	r3, r0
 8007212:	e000      	b.n	8007216 <__test_assert+0x26>
  }
  return false;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	b003      	add	sp, #12
 800721a:	f85d fb04 	ldr.w	pc, [sp], #4
 800721e:	bf00      	nop

08007220 <__test_assert_sequence>:

bool __test_assert_sequence(char *expected, const char *msg) {
 8007220:	b500      	push	{lr}
 8007222:	b085      	sub	sp, #20
 8007224:	9001      	str	r0, [sp, #4]
 8007226:	9100      	str	r1, [sp, #0]
  char *cp = chtest.tokens_buffer;
 8007228:	4b13      	ldr	r3, [pc, #76]	; (8007278 <__test_assert_sequence+0x58>)
 800722a:	9303      	str	r3, [sp, #12]

  while (cp < chtest.tokp) {
 800722c:	e00e      	b.n	800724c <__test_assert_sequence+0x2c>
    if (*cp++ != *expected++)
 800722e:	9b03      	ldr	r3, [sp, #12]
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	9203      	str	r2, [sp, #12]
 8007234:	781a      	ldrb	r2, [r3, #0]
 8007236:	9b01      	ldr	r3, [sp, #4]
 8007238:	1c59      	adds	r1, r3, #1
 800723a:	9101      	str	r1, [sp, #4]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d004      	beq.n	800724c <__test_assert_sequence+0x2c>
     return __test_fail(msg);
 8007242:	9800      	ldr	r0, [sp, #0]
 8007244:	f7ff ffbc 	bl	80071c0 <__test_fail>
 8007248:	4603      	mov	r3, r0
 800724a:	e010      	b.n	800726e <__test_assert_sequence+0x4e>
  while (cp < chtest.tokp) {
 800724c:	4b0b      	ldr	r3, [pc, #44]	; (800727c <__test_assert_sequence+0x5c>)
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	9a03      	ldr	r2, [sp, #12]
 8007252:	429a      	cmp	r2, r3
 8007254:	d3eb      	bcc.n	800722e <__test_assert_sequence+0xe>
  }

  if (*expected) {
 8007256:	9b01      	ldr	r3, [sp, #4]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d004      	beq.n	8007268 <__test_assert_sequence+0x48>
    return __test_fail(msg);
 800725e:	9800      	ldr	r0, [sp, #0]
 8007260:	f7ff ffae 	bl	80071c0 <__test_fail>
 8007264:	4603      	mov	r3, r0
 8007266:	e002      	b.n	800726e <__test_assert_sequence+0x4e>
  }

  test_clear_tokens();
 8007268:	f7ff fdfa 	bl	8006e60 <test_clear_tokens>

  return false;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	b005      	add	sp, #20
 8007272:	f85d fb04 	ldr.w	pc, [sp], #4
 8007276:	bf00      	nop
 8007278:	20000c7c 	.word	0x20000c7c
 800727c:	20000c6c 	.word	0x20000c6c

08007280 <__test_assert_time_window>:

#if (TEST_CFG_CHIBIOS_SUPPORT == TRUE) || defined(__DOXYGEN__)
bool __test_assert_time_window(systime_t start,
                               systime_t end,
                               const char *msg) {
 8007280:	b500      	push	{lr}
 8007282:	b085      	sub	sp, #20
 8007284:	9003      	str	r0, [sp, #12]
 8007286:	9102      	str	r1, [sp, #8]
 8007288:	9201      	str	r2, [sp, #4]

  return __test_assert(osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end),
 800728a:	f7ff fda9 	bl	8006de0 <osalOsGetSystemTimeX>
 800728e:	4603      	mov	r3, r0
 8007290:	9a02      	ldr	r2, [sp, #8]
 8007292:	9903      	ldr	r1, [sp, #12]
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff fdab 	bl	8006df0 <osalTimeIsInRangeX>
 800729a:	4603      	mov	r3, r0
 800729c:	9901      	ldr	r1, [sp, #4]
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff ffa6 	bl	80071f0 <__test_assert>
 80072a4:	4603      	mov	r3, r0
                       msg);
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	b005      	add	sp, #20
 80072aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80072ae:	bf00      	nop

080072b0 <test_emit_token>:
 *
 * @param[in] token     the token as a char
 *
 * @api
 */
void test_emit_token(char token) {
 80072b0:	b082      	sub	sp, #8
 80072b2:	4603      	mov	r3, r0
 80072b4:	f88d 3007 	strb.w	r3, [sp, #7]

  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80072b8:	4b07      	ldr	r3, [pc, #28]	; (80072d8 <test_emit_token+0x28>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	4a07      	ldr	r2, [pc, #28]	; (80072dc <test_emit_token+0x2c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d207      	bcs.n	80072d2 <test_emit_token+0x22>
    *chtest.tokp++ = token;
 80072c2:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <test_emit_token+0x28>)
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	4903      	ldr	r1, [pc, #12]	; (80072d8 <test_emit_token+0x28>)
 80072ca:	60ca      	str	r2, [r1, #12]
 80072cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80072d0:	701a      	strb	r2, [r3, #0]
  }
}
 80072d2:	bf00      	nop
 80072d4:	b002      	add	sp, #8
 80072d6:	4770      	bx	lr
 80072d8:	20000c6c 	.word	0x20000c6c
 80072dc:	20000c8c 	.word	0x20000c8c

080072e0 <test_execute_stream>:
 * @retval true         if one or more tests failed.
 *
 * @api
 */
bool test_execute_stream(BaseSequentialStream *stream,
                         const testsuite_t *tsp) {
 80072e0:	b500      	push	{lr}
 80072e2:	b083      	sub	sp, #12
 80072e4:	9001      	str	r0, [sp, #4]
 80072e6:	9100      	str	r1, [sp, #0]

  /* Output initialization using streams.*/
  chtest.stream  = stream;
 80072e8:	4a06      	ldr	r2, [pc, #24]	; (8007304 <test_execute_stream+0x24>)
 80072ea:	9b01      	ldr	r3, [sp, #4]
 80072ec:	6253      	str	r3, [r2, #36]	; 0x24
  chtest.putchar = test_stream_putchar;
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <test_execute_stream+0x24>)
 80072f0:	4a05      	ldr	r2, [pc, #20]	; (8007308 <test_execute_stream+0x28>)
 80072f2:	621a      	str	r2, [r3, #32]

  /* Test execution.*/
  return test_execute_inner(tsp);
 80072f4:	9800      	ldr	r0, [sp, #0]
 80072f6:	f7ff fe53 	bl	8006fa0 <test_execute_inner>
 80072fa:	4603      	mov	r3, r0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	b003      	add	sp, #12
 8007300:	f85d fb04 	ldr.w	pc, [sp], #4
 8007304:	20000c6c 	.word	0x20000c6c
 8007308:	08006e31 	.word	0x08006e31
 800730c:	00000000 	.word	0x00000000

08007310 <test_ltoswd>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static char *test_ltoswd(char *p, long num, int radix, long divisor) {
 8007310:	b08a      	sub	sp, #40	; 0x28
 8007312:	9003      	str	r0, [sp, #12]
 8007314:	9102      	str	r1, [sp, #8]
 8007316:	9201      	str	r2, [sp, #4]
 8007318:	9300      	str	r3, [sp, #0]
  int i, c;
  char *q;
  long l, ll;

  l = num;
 800731a:	9b02      	ldr	r3, [sp, #8]
 800731c:	9306      	str	r3, [sp, #24]
  if (divisor == 0) {
 800731e:	9b00      	ldr	r3, [sp, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d102      	bne.n	800732a <test_ltoswd+0x1a>
    ll = num;
 8007324:	9b02      	ldr	r3, [sp, #8]
 8007326:	9305      	str	r3, [sp, #20]
 8007328:	e001      	b.n	800732e <test_ltoswd+0x1e>
  } else {
    ll = divisor;
 800732a:	9b00      	ldr	r3, [sp, #0]
 800732c:	9305      	str	r3, [sp, #20]
  }

  q = p + MAX_FILLER;
 800732e:	9b03      	ldr	r3, [sp, #12]
 8007330:	330b      	adds	r3, #11
 8007332:	9307      	str	r3, [sp, #28]
  do {
    c = (int)(l % (long)radix);
 8007334:	9b06      	ldr	r3, [sp, #24]
 8007336:	9a01      	ldr	r2, [sp, #4]
 8007338:	fb93 f2f2 	sdiv	r2, r3, r2
 800733c:	9901      	ldr	r1, [sp, #4]
 800733e:	fb01 f202 	mul.w	r2, r1, r2
 8007342:	1a9b      	subs	r3, r3, r2
 8007344:	9308      	str	r3, [sp, #32]
    c += '0';
 8007346:	9b08      	ldr	r3, [sp, #32]
 8007348:	3330      	adds	r3, #48	; 0x30
 800734a:	9308      	str	r3, [sp, #32]
    if (c > '9') {
 800734c:	9b08      	ldr	r3, [sp, #32]
 800734e:	2b39      	cmp	r3, #57	; 0x39
 8007350:	dd02      	ble.n	8007358 <test_ltoswd+0x48>
      c += ('A' - '0') - 10;
 8007352:	9b08      	ldr	r3, [sp, #32]
 8007354:	3307      	adds	r3, #7
 8007356:	9308      	str	r3, [sp, #32]
    }
    *--q = (char)c;
 8007358:	9b07      	ldr	r3, [sp, #28]
 800735a:	3b01      	subs	r3, #1
 800735c:	9307      	str	r3, [sp, #28]
 800735e:	9b08      	ldr	r3, [sp, #32]
 8007360:	b2da      	uxtb	r2, r3
 8007362:	9b07      	ldr	r3, [sp, #28]
 8007364:	701a      	strb	r2, [r3, #0]
    l /= radix;
 8007366:	9a06      	ldr	r2, [sp, #24]
 8007368:	9b01      	ldr	r3, [sp, #4]
 800736a:	fb92 f3f3 	sdiv	r3, r2, r3
 800736e:	9306      	str	r3, [sp, #24]
    ll /= radix;
 8007370:	9a05      	ldr	r2, [sp, #20]
 8007372:	9b01      	ldr	r3, [sp, #4]
 8007374:	fb92 f3f3 	sdiv	r3, r2, r3
 8007378:	9305      	str	r3, [sp, #20]
  } while (ll != 0);
 800737a:	9b05      	ldr	r3, [sp, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1d9      	bne.n	8007334 <test_ltoswd+0x24>

  i = (int)(p + MAX_FILLER - q);
 8007380:	9b03      	ldr	r3, [sp, #12]
 8007382:	f103 020b 	add.w	r2, r3, #11
 8007386:	9b07      	ldr	r3, [sp, #28]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	9309      	str	r3, [sp, #36]	; 0x24
  do {
    *p++ = *q++;
 800738c:	9a07      	ldr	r2, [sp, #28]
 800738e:	1c53      	adds	r3, r2, #1
 8007390:	9307      	str	r3, [sp, #28]
 8007392:	9b03      	ldr	r3, [sp, #12]
 8007394:	1c59      	adds	r1, r3, #1
 8007396:	9103      	str	r1, [sp, #12]
 8007398:	7812      	ldrb	r2, [r2, #0]
 800739a:	701a      	strb	r2, [r3, #0]
  } while (--i);
 800739c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739e:	3b01      	subs	r3, #1
 80073a0:	9309      	str	r3, [sp, #36]	; 0x24
 80073a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1f1      	bne.n	800738c <test_ltoswd+0x7c>

  return p;
 80073a8:	9b03      	ldr	r3, [sp, #12]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	b00a      	add	sp, #40	; 0x28
 80073ae:	4770      	bx	lr

080073b0 <test_ltoa>:

static char *test_ltoa(char *p, long num, int radix) {
 80073b0:	b500      	push	{lr}
 80073b2:	b085      	sub	sp, #20
 80073b4:	9003      	str	r0, [sp, #12]
 80073b6:	9102      	str	r1, [sp, #8]
 80073b8:	9201      	str	r2, [sp, #4]

  return test_ltoswd(p, num, radix, 0);
 80073ba:	2300      	movs	r3, #0
 80073bc:	9a01      	ldr	r2, [sp, #4]
 80073be:	9902      	ldr	r1, [sp, #8]
 80073c0:	9803      	ldr	r0, [sp, #12]
 80073c2:	f7ff ffa5 	bl	8007310 <test_ltoswd>
 80073c6:	4603      	mov	r3, r0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	b005      	add	sp, #20
 80073cc:	f85d fb04 	ldr.w	pc, [sp], #4

080073d0 <test_putchar>:
/**
 * @brief   Base character output function.
 *
 * @param[in] c         character to be printed
 */
void test_putchar(char c) {
 80073d0:	b500      	push	{lr}
 80073d2:	b083      	sub	sp, #12
 80073d4:	4603      	mov	r3, r0
 80073d6:	f88d 3007 	strb.w	r3, [sp, #7]

  if (chtest.putchar != NULL) {
 80073da:	4b07      	ldr	r3, [pc, #28]	; (80073f8 <test_putchar+0x28>)
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d005      	beq.n	80073ee <test_putchar+0x1e>
    chtest.putchar(c);
 80073e2:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <test_putchar+0x28>)
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80073ea:	4610      	mov	r0, r2
 80073ec:	4798      	blx	r3
  }
}
 80073ee:	bf00      	nop
 80073f0:	b003      	add	sp, #12
 80073f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80073f6:	bf00      	nop
 80073f8:	20000c6c 	.word	0x20000c6c
 80073fc:	00000000 	.word	0x00000000

08007400 <test_vprintf>:
 * @param[in] ap        list of parameters
 * @return              The number of bytes written.
 *
 * @api
 */
int test_vprintf(const char *fmt, va_list ap) {
 8007400:	b500      	push	{lr}
 8007402:	b091      	sub	sp, #68	; 0x44
 8007404:	9001      	str	r0, [sp, #4]
 8007406:	9100      	str	r1, [sp, #0]
  int n;
  char tmpbuf[MAX_FILLER + 1];

  n = 0;
 8007408:	2300      	movs	r3, #0
 800740a:	930f      	str	r3, [sp, #60]	; 0x3c
  while (true) {
    char *p, *s, c, filler;
    int i, precision, width;
    bool is_long, left_align, do_sign;

    c = *fmt++;
 800740c:	9b01      	ldr	r3, [sp, #4]
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	9201      	str	r2, [sp, #4]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    if (c == '\0') {
 8007418:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <test_vprintf+0x24>
      return n;
 8007420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007422:	e237      	b.n	8007894 <test_vprintf+0x494>
    }

    if (c != '%') {
 8007424:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007428:	2b25      	cmp	r3, #37	; 0x25
 800742a:	d008      	beq.n	800743e <test_vprintf+0x3e>
      test_putchar(c);
 800742c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff ffcd 	bl	80073d0 <test_putchar>
      n++;
 8007436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007438:	3301      	adds	r3, #1
 800743a:	930f      	str	r3, [sp, #60]	; 0x3c
      continue;
 800743c:	e229      	b.n	8007892 <test_vprintf+0x492>
    }

    /* Pointers to the temporary buffer.*/
    p = tmpbuf;
 800743e:	ab03      	add	r3, sp, #12
 8007440:	930e      	str	r3, [sp, #56]	; 0x38
    s = tmpbuf;
 8007442:	ab03      	add	r3, sp, #12
 8007444:	930d      	str	r3, [sp, #52]	; 0x34

    /* Alignment mode.*/
    left_align = false;
 8007446:	2300      	movs	r3, #0
 8007448:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    if (*fmt == '-') {
 800744c:	9b01      	ldr	r3, [sp, #4]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b2d      	cmp	r3, #45	; 0x2d
 8007452:	d105      	bne.n	8007460 <test_vprintf+0x60>
      fmt++;
 8007454:	9b01      	ldr	r3, [sp, #4]
 8007456:	3301      	adds	r3, #1
 8007458:	9301      	str	r3, [sp, #4]
      left_align = true;
 800745a:	2301      	movs	r3, #1
 800745c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    }

    /* Sign mode.*/
    do_sign = false;
 8007460:	2300      	movs	r3, #0
 8007462:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    if (*fmt == '+') {
 8007466:	9b01      	ldr	r3, [sp, #4]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b2b      	cmp	r3, #43	; 0x2b
 800746c:	d105      	bne.n	800747a <test_vprintf+0x7a>
      fmt++;
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	3301      	adds	r3, #1
 8007472:	9301      	str	r3, [sp, #4]
      do_sign = true;
 8007474:	2301      	movs	r3, #1
 8007476:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    }

    /* Filler mode.*/
    filler = ' ';
 800747a:	2320      	movs	r3, #32
 800747c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    if (*fmt == '0') {
 8007480:	9b01      	ldr	r3, [sp, #4]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b30      	cmp	r3, #48	; 0x30
 8007486:	d105      	bne.n	8007494 <test_vprintf+0x94>
      fmt++;
 8007488:	9b01      	ldr	r3, [sp, #4]
 800748a:	3301      	adds	r3, #1
 800748c:	9301      	str	r3, [sp, #4]
      filler = '0';
 800748e:	2330      	movs	r3, #48	; 0x30
 8007490:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    /* Width modifier.*/
    if ( *fmt == '*') {
 8007494:	9b01      	ldr	r3, [sp, #4]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b2a      	cmp	r3, #42	; 0x2a
 800749a:	d10e      	bne.n	80074ba <test_vprintf+0xba>
      width = va_arg(ap, int);
 800749c:	9b00      	ldr	r3, [sp, #0]
 800749e:	1d1a      	adds	r2, r3, #4
 80074a0:	9200      	str	r2, [sp, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	9309      	str	r3, [sp, #36]	; 0x24
      ++fmt;
 80074a6:	9b01      	ldr	r3, [sp, #4]
 80074a8:	3301      	adds	r3, #1
 80074aa:	9301      	str	r3, [sp, #4]
      c = *fmt++;
 80074ac:	9b01      	ldr	r3, [sp, #4]
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	9201      	str	r2, [sp, #4]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80074b8:	e025      	b.n	8007506 <test_vprintf+0x106>
    }
    else {
      width = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	9309      	str	r3, [sp, #36]	; 0x24
      while (true) {
        c = *fmt++;
 80074be:	9b01      	ldr	r3, [sp, #4]
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	9201      	str	r2, [sp, #4]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        if (c == '\0') {
 80074ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <test_vprintf+0xd6>
          return n;
 80074d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074d4:	e1de      	b.n	8007894 <test_vprintf+0x494>
        }
        if ((c >= '0') && (c <= '9')) {
 80074d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80074da:	2b2f      	cmp	r3, #47	; 0x2f
 80074dc:	d913      	bls.n	8007506 <test_vprintf+0x106>
 80074de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80074e2:	2b39      	cmp	r3, #57	; 0x39
 80074e4:	d80f      	bhi.n	8007506 <test_vprintf+0x106>
          c -= '0';
 80074e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80074ea:	3b30      	subs	r3, #48	; 0x30
 80074ec:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
          width = width * 10 + c;
 80074f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074f2:	4613      	mov	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	005b      	lsls	r3, r3, #1
 80074fa:	461a      	mov	r2, r3
 80074fc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007500:	4413      	add	r3, r2
 8007502:	9309      	str	r3, [sp, #36]	; 0x24
        c = *fmt++;
 8007504:	e7db      	b.n	80074be <test_vprintf+0xbe>
        }
      }
    }

    /* Precision modifier.*/
    precision = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	930a      	str	r3, [sp, #40]	; 0x28
    if (c == '.') {
 800750a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800750e:	2b2e      	cmp	r3, #46	; 0x2e
 8007510:	d13e      	bne.n	8007590 <test_vprintf+0x190>
      c = *fmt++;
 8007512:	9b01      	ldr	r3, [sp, #4]
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	9201      	str	r2, [sp, #4]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
      if (c == '\0') {
 800751e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <test_vprintf+0x12a>
        return n;
 8007526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007528:	e1b4      	b.n	8007894 <test_vprintf+0x494>
      }
      if (c == '*') {
 800752a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800752e:	2b2a      	cmp	r3, #42	; 0x2a
 8007530:	d126      	bne.n	8007580 <test_vprintf+0x180>
        precision = va_arg(ap, int);
 8007532:	9b00      	ldr	r3, [sp, #0]
 8007534:	1d1a      	adds	r2, r3, #4
 8007536:	9200      	str	r2, [sp, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	930a      	str	r3, [sp, #40]	; 0x28
        c = *fmt++;
 800753c:	9b01      	ldr	r3, [sp, #4]
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	9201      	str	r2, [sp, #4]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8007548:	e022      	b.n	8007590 <test_vprintf+0x190>
      }
      else {
        while ((c >= '0') && (c <= '9')) {
          c -= '0';
 800754a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800754e:	3b30      	subs	r3, #48	; 0x30
 8007550:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
          precision = precision * 10 + c;
 8007554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	461a      	mov	r2, r3
 8007560:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007564:	4413      	add	r3, r2
 8007566:	930a      	str	r3, [sp, #40]	; 0x28
          c = *fmt++;
 8007568:	9b01      	ldr	r3, [sp, #4]
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	9201      	str	r2, [sp, #4]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
          if (c == '\0') {
 8007574:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <test_vprintf+0x180>
            return n;
 800757c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800757e:	e189      	b.n	8007894 <test_vprintf+0x494>
        while ((c >= '0') && (c <= '9')) {
 8007580:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007584:	2b2f      	cmp	r3, #47	; 0x2f
 8007586:	d903      	bls.n	8007590 <test_vprintf+0x190>
 8007588:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800758c:	2b39      	cmp	r3, #57	; 0x39
 800758e:	d9dc      	bls.n	800754a <test_vprintf+0x14a>
        }
      }
    }

    /* Long modifier.*/
    if ((c == 'l') || (c == 'L')) {
 8007590:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007594:	2b6c      	cmp	r3, #108	; 0x6c
 8007596:	d003      	beq.n	80075a0 <test_vprintf+0x1a0>
 8007598:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800759c:	2b4c      	cmp	r3, #76	; 0x4c
 800759e:	d10e      	bne.n	80075be <test_vprintf+0x1be>
      is_long = true;
 80075a0:	2301      	movs	r3, #1
 80075a2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
      c = *fmt++;
 80075a6:	9b01      	ldr	r3, [sp, #4]
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	9201      	str	r2, [sp, #4]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
      if (c == '\0') {
 80075b2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d114      	bne.n	80075e4 <test_vprintf+0x1e4>
        return n;
 80075ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075bc:	e16a      	b.n	8007894 <test_vprintf+0x494>
      }
    }
    else {
      is_long = (c >= 'A') && (c <= 'Z');
 80075be:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d905      	bls.n	80075d2 <test_vprintf+0x1d2>
 80075c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80075ca:	2b5a      	cmp	r3, #90	; 0x5a
 80075cc:	d801      	bhi.n	80075d2 <test_vprintf+0x1d2>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e000      	b.n	80075d4 <test_vprintf+0x1d4>
 80075d2:	2300      	movs	r3, #0
 80075d4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80075d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    /* Command decoding.*/
    switch (c) {
 80075e4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80075e8:	3b44      	subs	r3, #68	; 0x44
 80075ea:	2b34      	cmp	r3, #52	; 0x34
 80075ec:	f200 80e8 	bhi.w	80077c0 <test_vprintf+0x3c0>
 80075f0:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <test_vprintf+0x1f8>)
 80075f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	0800772f 	.word	0x0800772f
 80075fc:	080077c1 	.word	0x080077c1
 8007600:	080077c1 	.word	0x080077c1
 8007604:	080077c1 	.word	0x080077c1
 8007608:	080077c1 	.word	0x080077c1
 800760c:	0800772f 	.word	0x0800772f
 8007610:	080077c1 	.word	0x080077c1
 8007614:	080077c1 	.word	0x080077c1
 8007618:	080077c1 	.word	0x080077c1
 800761c:	080077c1 	.word	0x080077c1
 8007620:	080077c1 	.word	0x080077c1
 8007624:	08007791 	.word	0x08007791
 8007628:	08007785 	.word	0x08007785
 800762c:	080077c1 	.word	0x080077c1
 8007630:	080077c1 	.word	0x080077c1
 8007634:	080077c1 	.word	0x080077c1
 8007638:	080077c1 	.word	0x080077c1
 800763c:	0800778b 	.word	0x0800778b
 8007640:	080077c1 	.word	0x080077c1
 8007644:	080077c1 	.word	0x080077c1
 8007648:	08007785 	.word	0x08007785
 800764c:	080077c1 	.word	0x080077c1
 8007650:	080077c1 	.word	0x080077c1
 8007654:	080077c1 	.word	0x080077c1
 8007658:	080077c1 	.word	0x080077c1
 800765c:	080077c1 	.word	0x080077c1
 8007660:	080077c1 	.word	0x080077c1
 8007664:	080077c1 	.word	0x080077c1
 8007668:	080077c1 	.word	0x080077c1
 800766c:	080077c1 	.word	0x080077c1
 8007670:	080077c1 	.word	0x080077c1
 8007674:	080076cd 	.word	0x080076cd
 8007678:	0800772f 	.word	0x0800772f
 800767c:	080077c1 	.word	0x080077c1
 8007680:	080077c1 	.word	0x080077c1
 8007684:	080077c1 	.word	0x080077c1
 8007688:	080077c1 	.word	0x080077c1
 800768c:	0800772f 	.word	0x0800772f
 8007690:	080077c1 	.word	0x080077c1
 8007694:	080077c1 	.word	0x080077c1
 8007698:	080077c1 	.word	0x080077c1
 800769c:	080077c1 	.word	0x080077c1
 80076a0:	080077c1 	.word	0x080077c1
 80076a4:	08007791 	.word	0x08007791
 80076a8:	08007785 	.word	0x08007785
 80076ac:	080077c1 	.word	0x080077c1
 80076b0:	080077c1 	.word	0x080077c1
 80076b4:	080076e7 	.word	0x080076e7
 80076b8:	080077c1 	.word	0x080077c1
 80076bc:	0800778b 	.word	0x0800778b
 80076c0:	080077c1 	.word	0x080077c1
 80076c4:	080077c1 	.word	0x080077c1
 80076c8:	08007785 	.word	0x08007785
      int radix;
      long arg;

    case 'c':
      filler = ' ';
 80076cc:	2320      	movs	r3, #32
 80076ce:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
      *p++ = va_arg(ap, int);
 80076d2:	9b00      	ldr	r3, [sp, #0]
 80076d4:	1d1a      	adds	r2, r3, #4
 80076d6:	9200      	str	r2, [sp, #0]
 80076d8:	6819      	ldr	r1, [r3, #0]
 80076da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	920e      	str	r2, [sp, #56]	; 0x38
 80076e0:	b2ca      	uxtb	r2, r1
 80076e2:	701a      	strb	r2, [r3, #0]
      break;
 80076e4:	e074      	b.n	80077d0 <test_vprintf+0x3d0>
    case 's':
      filler = ' ';
 80076e6:	2320      	movs	r3, #32
 80076e8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
      if ((s = va_arg(ap, char *)) == NULL) {
 80076ec:	9b00      	ldr	r3, [sp, #0]
 80076ee:	1d1a      	adds	r2, r3, #4
 80076f0:	9200      	str	r2, [sp, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	930d      	str	r3, [sp, #52]	; 0x34
 80076f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <test_vprintf+0x300>
        s = "(null)";
 80076fc:	4b67      	ldr	r3, [pc, #412]	; (800789c <test_vprintf+0x49c>)
 80076fe:	930d      	str	r3, [sp, #52]	; 0x34
      }
      if (precision == 0) {
 8007700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	d102      	bne.n	800770c <test_vprintf+0x30c>
        precision = 32767;
 8007706:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800770a:	930a      	str	r3, [sp, #40]	; 0x28
      }
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 800770c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800770e:	930e      	str	r3, [sp, #56]	; 0x38
 8007710:	e002      	b.n	8007718 <test_vprintf+0x318>
 8007712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007714:	3301      	adds	r3, #1
 8007716:	930e      	str	r3, [sp, #56]	; 0x38
 8007718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d056      	beq.n	80077ce <test_vprintf+0x3ce>
 8007720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007722:	3b01      	subs	r3, #1
 8007724:	930a      	str	r3, [sp, #40]	; 0x28
 8007726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007728:	2b00      	cmp	r3, #0
 800772a:	daf2      	bge.n	8007712 <test_vprintf+0x312>
        /* Scanning string.*/
      }
      break;
 800772c:	e04f      	b.n	80077ce <test_vprintf+0x3ce>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long) {
 800772e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007732:	2b00      	cmp	r3, #0
 8007734:	d005      	beq.n	8007742 <test_vprintf+0x342>
        arg = va_arg(ap, long);
 8007736:	9b00      	ldr	r3, [sp, #0]
 8007738:	1d1a      	adds	r2, r3, #4
 800773a:	9200      	str	r2, [sp, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	9306      	str	r3, [sp, #24]
 8007740:	e004      	b.n	800774c <test_vprintf+0x34c>
      }
      else {
        arg = va_arg(ap, int);
 8007742:	9b00      	ldr	r3, [sp, #0]
 8007744:	1d1a      	adds	r2, r3, #4
 8007746:	9200      	str	r2, [sp, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	9306      	str	r3, [sp, #24]
      }
      if (arg < 0) {
 800774c:	9b06      	ldr	r3, [sp, #24]
 800774e:	2b00      	cmp	r3, #0
 8007750:	da08      	bge.n	8007764 <test_vprintf+0x364>
        *p++ = '-';
 8007752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007754:	1c5a      	adds	r2, r3, #1
 8007756:	920e      	str	r2, [sp, #56]	; 0x38
 8007758:	222d      	movs	r2, #45	; 0x2d
 800775a:	701a      	strb	r2, [r3, #0]
        arg = -arg;
 800775c:	9b06      	ldr	r3, [sp, #24]
 800775e:	425b      	negs	r3, r3
 8007760:	9306      	str	r3, [sp, #24]
 8007762:	e008      	b.n	8007776 <test_vprintf+0x376>
      }
      else
        if (do_sign) {
 8007764:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8007768:	2b00      	cmp	r3, #0
 800776a:	d004      	beq.n	8007776 <test_vprintf+0x376>
          *p++ = '+';
 800776c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	920e      	str	r2, [sp, #56]	; 0x38
 8007772:	222b      	movs	r2, #43	; 0x2b
 8007774:	701a      	strb	r2, [r3, #0]
        }
      p = test_ltoa(p, arg, 10);
 8007776:	220a      	movs	r2, #10
 8007778:	9906      	ldr	r1, [sp, #24]
 800777a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800777c:	f7ff fe18 	bl	80073b0 <test_ltoa>
 8007780:	900e      	str	r0, [sp, #56]	; 0x38
      break;
 8007782:	e025      	b.n	80077d0 <test_vprintf+0x3d0>
    case 'X':
    case 'x':
    case 'P':
    case 'p':
      radix = 16;
 8007784:	2310      	movs	r3, #16
 8007786:	9307      	str	r3, [sp, #28]
      goto unsigned_common;
 8007788:	e004      	b.n	8007794 <test_vprintf+0x394>
    case 'U':
    case 'u':
      radix = 10;
 800778a:	230a      	movs	r3, #10
 800778c:	9307      	str	r3, [sp, #28]
      goto unsigned_common;
 800778e:	e001      	b.n	8007794 <test_vprintf+0x394>
    case 'O':
    case 'o':
      radix = 8;
 8007790:	2308      	movs	r3, #8
 8007792:	9307      	str	r3, [sp, #28]
unsigned_common:
      if (is_long) {
 8007794:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <test_vprintf+0x3a8>
        arg = va_arg(ap, unsigned long);
 800779c:	9b00      	ldr	r3, [sp, #0]
 800779e:	1d1a      	adds	r2, r3, #4
 80077a0:	9200      	str	r2, [sp, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	9306      	str	r3, [sp, #24]
 80077a6:	e004      	b.n	80077b2 <test_vprintf+0x3b2>
      }
      else {
        arg = va_arg(ap, unsigned int);
 80077a8:	9b00      	ldr	r3, [sp, #0]
 80077aa:	1d1a      	adds	r2, r3, #4
 80077ac:	9200      	str	r2, [sp, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	9306      	str	r3, [sp, #24]
      }
      p = test_ltoa(p, arg, radix);
 80077b2:	9a07      	ldr	r2, [sp, #28]
 80077b4:	9906      	ldr	r1, [sp, #24]
 80077b6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80077b8:	f7ff fdfa 	bl	80073b0 <test_ltoa>
 80077bc:	900e      	str	r0, [sp, #56]	; 0x38
      break;
 80077be:	e007      	b.n	80077d0 <test_vprintf+0x3d0>
    default:
      *p++ = c;
 80077c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	920e      	str	r2, [sp, #56]	; 0x38
 80077c6:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 80077ca:	701a      	strb	r2, [r3, #0]
      break;
 80077cc:	e000      	b.n	80077d0 <test_vprintf+0x3d0>
      break;
 80077ce:	bf00      	nop
    }
    i = (int)(p - s);
 80077d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	930b      	str	r3, [sp, #44]	; 0x2c
    width -= i;
 80077d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	9309      	str	r3, [sp, #36]	; 0x24
    if (width < 0) {
 80077e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	da01      	bge.n	80077ea <test_vprintf+0x3ea>
      width = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	9309      	str	r3, [sp, #36]	; 0x24
    }
    if (left_align == false) {
 80077ea:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80077ee:	f083 0301 	eor.w	r3, r3, #1
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <test_vprintf+0x3fe>
      width = -width;
 80077f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077fa:	425b      	negs	r3, r3
 80077fc:	9309      	str	r3, [sp, #36]	; 0x24
    }
    if (width < 0) {
 80077fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	da31      	bge.n	8007868 <test_vprintf+0x468>
      if (((*s == '-') || (*s == '+')) && (filler == '0')) {
 8007804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b2d      	cmp	r3, #45	; 0x2d
 800780a:	d003      	beq.n	8007814 <test_vprintf+0x414>
 800780c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	2b2b      	cmp	r3, #43	; 0x2b
 8007812:	d110      	bne.n	8007836 <test_vprintf+0x436>
 8007814:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8007818:	2b30      	cmp	r3, #48	; 0x30
 800781a:	d10c      	bne.n	8007836 <test_vprintf+0x436>
        test_putchar(*s++);
 800781c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	920d      	str	r2, [sp, #52]	; 0x34
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff fdd3 	bl	80073d0 <test_putchar>
        n++;
 800782a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800782c:	3301      	adds	r3, #1
 800782e:	930f      	str	r3, [sp, #60]	; 0x3c
        i--;
 8007830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007832:	3b01      	subs	r3, #1
 8007834:	930b      	str	r3, [sp, #44]	; 0x2c
      }
      do {
        test_putchar(filler);
 8007836:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff fdc8 	bl	80073d0 <test_putchar>
        n++;
 8007840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007842:	3301      	adds	r3, #1
 8007844:	930f      	str	r3, [sp, #60]	; 0x3c
      } while (++width != 0);
 8007846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007848:	3301      	adds	r3, #1
 800784a:	9309      	str	r3, [sp, #36]	; 0x24
 800784c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1f1      	bne.n	8007836 <test_vprintf+0x436>
    }
    while (--i >= 0) {
 8007852:	e009      	b.n	8007868 <test_vprintf+0x468>
      test_putchar(*s++);
 8007854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	920d      	str	r2, [sp, #52]	; 0x34
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff fdb7 	bl	80073d0 <test_putchar>
      n++;
 8007862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007864:	3301      	adds	r3, #1
 8007866:	930f      	str	r3, [sp, #60]	; 0x3c
    while (--i >= 0) {
 8007868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800786a:	3b01      	subs	r3, #1
 800786c:	930b      	str	r3, [sp, #44]	; 0x2c
 800786e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007870:	2b00      	cmp	r3, #0
 8007872:	daef      	bge.n	8007854 <test_vprintf+0x454>
    }

    while (width) {
 8007874:	e00a      	b.n	800788c <test_vprintf+0x48c>
      test_putchar(filler);
 8007876:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff fda8 	bl	80073d0 <test_putchar>
      n++;
 8007880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007882:	3301      	adds	r3, #1
 8007884:	930f      	str	r3, [sp, #60]	; 0x3c
      width--;
 8007886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007888:	3b01      	subs	r3, #1
 800788a:	9309      	str	r3, [sp, #36]	; 0x24
    while (width) {
 800788c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1f1      	bne.n	8007876 <test_vprintf+0x476>
  while (true) {
 8007892:	e5bb      	b.n	800740c <test_vprintf+0xc>
    }
  }
}
 8007894:	4618      	mov	r0, r3
 8007896:	b011      	add	sp, #68	; 0x44
 8007898:	f85d fb04 	ldr.w	pc, [sp], #4
 800789c:	0801d6c4 	.word	0x0801d6c4

080078a0 <test_printf>:
 * @param[in] fmt       formatting string
 * @return              The number of bytes written.
 *
 * @api
 */
int test_printf(const char *fmt, ...) {
 80078a0:	b40f      	push	{r0, r1, r2, r3}
 80078a2:	b500      	push	{lr}
 80078a4:	b083      	sub	sp, #12
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80078a6:	ab05      	add	r3, sp, #20
 80078a8:	9300      	str	r3, [sp, #0]
  formatted_bytes = test_vprintf(fmt, ap);
 80078aa:	9900      	ldr	r1, [sp, #0]
 80078ac:	9804      	ldr	r0, [sp, #16]
 80078ae:	f7ff fda7 	bl	8007400 <test_vprintf>
 80078b2:	9001      	str	r0, [sp, #4]
  va_end(ap);

  return formatted_bytes;
 80078b4:	9b01      	ldr	r3, [sp, #4]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	b003      	add	sp, #12
 80078ba:	f85d eb04 	ldr.w	lr, [sp], #4
 80078be:	b004      	add	sp, #16
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
	...

080078d0 <port_timer_get_time.lto_priv.4>:
static inline systime_t port_timer_get_time(void) {
 80078d0:	b508      	push	{r3, lr}
  return stGetCounter();
 80078d2:	f7f8 fe05 	bl	80004e0 <stGetCounter>
 80078d6:	4603      	mov	r3, r0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	bd08      	pop	{r3, pc}
 80078dc:	0000      	movs	r0, r0
	...

080078e0 <chSysLock.lto_priv.18>:
static inline void chSysLock(void) {
 80078e0:	b082      	sub	sp, #8
 80078e2:	2330      	movs	r3, #48	; 0x30
 80078e4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80078e6:	9b01      	ldr	r3, [sp, #4]
 80078e8:	f383 8811 	msr	BASEPRI, r3
}
 80078ec:	bf00      	nop
}
 80078ee:	bf00      	nop
}
 80078f0:	bf00      	nop
 80078f2:	b002      	add	sp, #8
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
	...

08007900 <chSysUnlock.lto_priv.18>:
static inline void chSysUnlock(void) {
 8007900:	b082      	sub	sp, #8
 8007902:	2300      	movs	r3, #0
 8007904:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007906:	9b01      	ldr	r3, [sp, #4]
 8007908:	f383 8811 	msr	BASEPRI, r3
}
 800790c:	bf00      	nop
}
 800790e:	bf00      	nop
}
 8007910:	bf00      	nop
 8007912:	b002      	add	sp, #8
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
	...

08007920 <chVTGetSystemTimeX.lto_priv.4>:
static inline systime_t chVTGetSystemTimeX(void) {
 8007920:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8007922:	f7ff ffd5 	bl	80078d0 <port_timer_get_time.lto_priv.4>
 8007926:	4603      	mov	r3, r0
}
 8007928:	4618      	mov	r0, r3
 800792a:	bd08      	pop	{r3, pc}
 800792c:	0000      	movs	r0, r0
	...

08007930 <chVTGetSystemTime>:
static inline systime_t chVTGetSystemTime(void) {
 8007930:	b500      	push	{lr}
 8007932:	b083      	sub	sp, #12
  chSysLock();
 8007934:	f7ff ffd4 	bl	80078e0 <chSysLock.lto_priv.18>
  systime = chVTGetSystemTimeX();
 8007938:	f7ff fff2 	bl	8007920 <chVTGetSystemTimeX.lto_priv.4>
 800793c:	9001      	str	r0, [sp, #4]
  chSysUnlock();
 800793e:	f7ff ffdf 	bl	8007900 <chSysUnlock.lto_priv.18>
  return systime;
 8007942:	9b01      	ldr	r3, [sp, #4]
}
 8007944:	4618      	mov	r0, r3
 8007946:	b003      	add	sp, #12
 8007948:	f85d fb04 	ldr.w	pc, [sp], #4
 800794c:	0000      	movs	r0, r0
	...

08007950 <test_terminate_threads>:
                         test_buffer + (WA_SIZE * 4)};

/*
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8007950:	b500      	push	{lr}
 8007952:	b083      	sub	sp, #12
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
 8007954:	2300      	movs	r3, #0
 8007956:	9301      	str	r3, [sp, #4]
 8007958:	e00f      	b.n	800797a <test_terminate_threads+0x2a>
    if (threads[i])
 800795a:	4a0c      	ldr	r2, [pc, #48]	; (800798c <test_terminate_threads+0x3c>)
 800795c:	9b01      	ldr	r3, [sp, #4]
 800795e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d006      	beq.n	8007974 <test_terminate_threads+0x24>
      chThdTerminate(threads[i]);
 8007966:	4a09      	ldr	r2, [pc, #36]	; (800798c <test_terminate_threads+0x3c>)
 8007968:	9b01      	ldr	r3, [sp, #4]
 800796a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800796e:	4618      	mov	r0, r3
 8007970:	f7fb fd46 	bl	8003400 <chThdTerminate>
  for (i = 0; i < MAX_THREADS; i++)
 8007974:	9b01      	ldr	r3, [sp, #4]
 8007976:	3301      	adds	r3, #1
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	9b01      	ldr	r3, [sp, #4]
 800797c:	2b04      	cmp	r3, #4
 800797e:	d9ec      	bls.n	800795a <test_terminate_threads+0xa>
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	b003      	add	sp, #12
 8007986:	f85d fb04 	ldr.w	pc, [sp], #4
 800798a:	bf00      	nop
 800798c:	20001508 	.word	0x20001508

08007990 <test_wait_threads>:

/*
 * Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8007990:	b500      	push	{lr}
 8007992:	b083      	sub	sp, #12
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
 8007994:	2300      	movs	r3, #0
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	e014      	b.n	80079c4 <test_wait_threads+0x34>
    if (threads[i] != NULL) {
 800799a:	4a0e      	ldr	r2, [pc, #56]	; (80079d4 <test_wait_threads+0x44>)
 800799c:	9b01      	ldr	r3, [sp, #4]
 800799e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00b      	beq.n	80079be <test_wait_threads+0x2e>
      chThdWait(threads[i]);
 80079a6:	4a0b      	ldr	r2, [pc, #44]	; (80079d4 <test_wait_threads+0x44>)
 80079a8:	9b01      	ldr	r3, [sp, #4]
 80079aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fb fcce 	bl	8003350 <chThdWait>
      threads[i] = NULL;
 80079b4:	4a07      	ldr	r2, [pc, #28]	; (80079d4 <test_wait_threads+0x44>)
 80079b6:	9b01      	ldr	r3, [sp, #4]
 80079b8:	2100      	movs	r1, #0
 80079ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0; i < MAX_THREADS; i++)
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	3301      	adds	r3, #1
 80079c2:	9301      	str	r3, [sp, #4]
 80079c4:	9b01      	ldr	r3, [sp, #4]
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d9e7      	bls.n	800799a <test_wait_threads+0xa>
    }
}
 80079ca:	bf00      	nop
 80079cc:	bf00      	nop
 80079ce:	b003      	add	sp, #12
 80079d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80079d4:	20001508 	.word	0x20001508
	...

080079e0 <test_wait_tick>:

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 80079e0:	b508      	push	{r3, lr}

  chThdSleep(1);
 80079e2:	2001      	movs	r0, #1
 80079e4:	f7fb fd24 	bl	8003430 <chThdSleep>
  return chVTGetSystemTime();
 80079e8:	f7ff ffa2 	bl	8007930 <chVTGetSystemTime>
 80079ec:	4603      	mov	r3, r0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	bd08      	pop	{r3, pc}
 80079f2:	bf00      	nop
	...

08007a00 <test_printn.lto_priv.0>:
 *
 * @param[in] n         the number to be printed
 *
 * @api
 */
static inline void test_printn(uint32_t n) {
 8007a00:	b500      	push	{lr}
 8007a02:	b083      	sub	sp, #12
 8007a04:	9001      	str	r0, [sp, #4]

  test_printf("%u", n);
 8007a06:	9901      	ldr	r1, [sp, #4]
 8007a08:	4803      	ldr	r0, [pc, #12]	; (8007a18 <test_printn.lto_priv.0+0x18>)
 8007a0a:	f7ff ff49 	bl	80078a0 <test_printf>
}
 8007a0e:	bf00      	nop
 8007a10:	b003      	add	sp, #12
 8007a12:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a16:	bf00      	nop
 8007a18:	0801d71c 	.word	0x0801d71c
 8007a1c:	00000000 	.word	0x00000000

08007a20 <test_print.lto_priv.0>:
 *
 * @param[in] msgp      the message
 *
 * @api
 */
static inline void test_print(const char *msgp) {
 8007a20:	b500      	push	{lr}
 8007a22:	b083      	sub	sp, #12
 8007a24:	9001      	str	r0, [sp, #4]

  test_printf("%s", msgp);
 8007a26:	9901      	ldr	r1, [sp, #4]
 8007a28:	4803      	ldr	r0, [pc, #12]	; (8007a38 <test_print.lto_priv.0+0x18>)
 8007a2a:	f7ff ff39 	bl	80078a0 <test_printf>
}
 8007a2e:	bf00      	nop
 8007a30:	b003      	add	sp, #12
 8007a32:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a36:	bf00      	nop
 8007a38:	0801d720 	.word	0x0801d720
 8007a3c:	00000000 	.word	0x00000000

08007a40 <test_println.lto_priv.0>:
 *
 * @param[in] msgp      the message
 *
 * @api
 */
static inline void test_println(const char *msgp) {
 8007a40:	b500      	push	{lr}
 8007a42:	b083      	sub	sp, #12
 8007a44:	9001      	str	r0, [sp, #4]

  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007a46:	9901      	ldr	r1, [sp, #4]
 8007a48:	4803      	ldr	r0, [pc, #12]	; (8007a58 <test_println.lto_priv.0+0x18>)
 8007a4a:	f7ff ff29 	bl	80078a0 <test_printf>
}
 8007a4e:	bf00      	nop
 8007a50:	b003      	add	sp, #12
 8007a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a56:	bf00      	nop
 8007a58:	0801d4d0 	.word	0x0801d4d0
 8007a5c:	00000000 	.word	0x00000000

08007a60 <rt_test_001_001_execute>:
 * <h2>Test Steps</h2>
 * - [1.1.1] Prints the version string.
 * .
 */

static void rt_test_001_001_execute(void) {
 8007a60:	b508      	push	{r3, lr}

  /* [1.1.1] Prints the version string.*/
  test_set_step(1);
 8007a62:	4b1c      	ldr	r3, [pc, #112]	; (8007ad4 <rt_test_001_001_execute+0x74>)
 8007a64:	2201      	movs	r2, #1
 8007a66:	601a      	str	r2, [r3, #0]
  {
#if defined(PORT_ARCHITECTURE_NAME)
    test_print("--- Architecture:                       ");
 8007a68:	481b      	ldr	r0, [pc, #108]	; (8007ad8 <rt_test_001_001_execute+0x78>)
 8007a6a:	f7ff ffd9 	bl	8007a20 <test_print.lto_priv.0>
    test_println(PORT_ARCHITECTURE_NAME);
 8007a6e:	481b      	ldr	r0, [pc, #108]	; (8007adc <rt_test_001_001_execute+0x7c>)
 8007a70:	f7ff ffe6 	bl	8007a40 <test_println.lto_priv.0>
#endif
#if defined(PORT_CORE_VARIANT_NAME)
    test_print("--- Core Variant:                       ");
 8007a74:	481a      	ldr	r0, [pc, #104]	; (8007ae0 <rt_test_001_001_execute+0x80>)
 8007a76:	f7ff ffd3 	bl	8007a20 <test_print.lto_priv.0>
    test_println(PORT_CORE_VARIANT_NAME);
 8007a7a:	481a      	ldr	r0, [pc, #104]	; (8007ae4 <rt_test_001_001_execute+0x84>)
 8007a7c:	f7ff ffe0 	bl	8007a40 <test_println.lto_priv.0>
#endif
#if defined(PORT_COMPILER_NAME)
    test_print("--- Compiler:                           ");
 8007a80:	4819      	ldr	r0, [pc, #100]	; (8007ae8 <rt_test_001_001_execute+0x88>)
 8007a82:	f7ff ffcd 	bl	8007a20 <test_print.lto_priv.0>
    test_println(PORT_COMPILER_NAME);
 8007a86:	4819      	ldr	r0, [pc, #100]	; (8007aec <rt_test_001_001_execute+0x8c>)
 8007a88:	f7ff ffda 	bl	8007a40 <test_println.lto_priv.0>
#endif
#if defined(PORT_INFO)
    test_print("--- Port Info:                          ");
 8007a8c:	4818      	ldr	r0, [pc, #96]	; (8007af0 <rt_test_001_001_execute+0x90>)
 8007a8e:	f7ff ffc7 	bl	8007a20 <test_print.lto_priv.0>
    test_println(PORT_INFO);
 8007a92:	4818      	ldr	r0, [pc, #96]	; (8007af4 <rt_test_001_001_execute+0x94>)
 8007a94:	f7ff ffd4 	bl	8007a40 <test_println.lto_priv.0>
#endif
#if defined(PORT_NATURAL_ALIGN)
    test_print("--- Natural alignment:                  ");
 8007a98:	4817      	ldr	r0, [pc, #92]	; (8007af8 <rt_test_001_001_execute+0x98>)
 8007a9a:	f7ff ffc1 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(PORT_NATURAL_ALIGN);
 8007a9e:	2004      	movs	r0, #4
 8007aa0:	f7ff ffae 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007aa4:	4815      	ldr	r0, [pc, #84]	; (8007afc <rt_test_001_001_execute+0x9c>)
 8007aa6:	f7ff ffcb 	bl	8007a40 <test_println.lto_priv.0>
#endif
#if defined(PORT_STACK_ALIGN)
    test_print("--- Stack alignment:                    ");
 8007aaa:	4815      	ldr	r0, [pc, #84]	; (8007b00 <rt_test_001_001_execute+0xa0>)
 8007aac:	f7ff ffb8 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(PORT_STACK_ALIGN);
 8007ab0:	2008      	movs	r0, #8
 8007ab2:	f7ff ffa5 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007ab6:	4811      	ldr	r0, [pc, #68]	; (8007afc <rt_test_001_001_execute+0x9c>)
 8007ab8:	f7ff ffc2 	bl	8007a40 <test_println.lto_priv.0>
#endif
#if defined(PORT_WORKING_AREA_ALIGN)
    test_print("--- Working area alignment:             ");
 8007abc:	4811      	ldr	r0, [pc, #68]	; (8007b04 <rt_test_001_001_execute+0xa4>)
 8007abe:	f7ff ffaf 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(PORT_WORKING_AREA_ALIGN);
 8007ac2:	2008      	movs	r0, #8
 8007ac4:	f7ff ff9c 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007ac8:	480c      	ldr	r0, [pc, #48]	; (8007afc <rt_test_001_001_execute+0x9c>)
 8007aca:	f7ff ffb9 	bl	8007a40 <test_println.lto_priv.0>
#endif
  }
  test_end_step(1);
}
 8007ace:	bf00      	nop
 8007ad0:	bd08      	pop	{r3, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000c6c 	.word	0x20000c6c
 8007ad8:	0801d724 	.word	0x0801d724
 8007adc:	0801d750 	.word	0x0801d750
 8007ae0:	0801d75c 	.word	0x0801d75c
 8007ae4:	0801d788 	.word	0x0801d788
 8007ae8:	0801d794 	.word	0x0801d794
 8007aec:	0801d7c0 	.word	0x0801d7c0
 8007af0:	0801d7d4 	.word	0x0801d7d4
 8007af4:	0801d800 	.word	0x0801d800
 8007af8:	0801d818 	.word	0x0801d818
 8007afc:	0801d4e8 	.word	0x0801d4e8
 8007b00:	0801d844 	.word	0x0801d844
 8007b04:	0801d870 	.word	0x0801d870
	...

08007b10 <rt_test_001_002_execute>:
 * <h2>Test Steps</h2>
 * - [1.2.1] Prints the version string.
 * .
 */

static void rt_test_001_002_execute(void) {
 8007b10:	b508      	push	{r3, lr}

  /* [1.2.1] Prints the version string.*/
  test_set_step(1);
 8007b12:	4b19      	ldr	r3, [pc, #100]	; (8007b78 <rt_test_001_002_execute+0x68>)
 8007b14:	2201      	movs	r2, #1
 8007b16:	601a      	str	r2, [r3, #0]
  {
    test_println("--- Product:                            ChibiOS/RT");
 8007b18:	4818      	ldr	r0, [pc, #96]	; (8007b7c <rt_test_001_002_execute+0x6c>)
 8007b1a:	f7ff ff91 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- Stable Flag:                        ");
 8007b1e:	4818      	ldr	r0, [pc, #96]	; (8007b80 <rt_test_001_002_execute+0x70>)
 8007b20:	f7ff ff7e 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_KERNEL_STABLE);
 8007b24:	2001      	movs	r0, #1
 8007b26:	f7ff ff6b 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007b2a:	4816      	ldr	r0, [pc, #88]	; (8007b84 <rt_test_001_002_execute+0x74>)
 8007b2c:	f7ff ff88 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- Version String:                     ");
 8007b30:	4815      	ldr	r0, [pc, #84]	; (8007b88 <rt_test_001_002_execute+0x78>)
 8007b32:	f7ff ff75 	bl	8007a20 <test_print.lto_priv.0>
    test_println(CH_KERNEL_VERSION);
 8007b36:	4815      	ldr	r0, [pc, #84]	; (8007b8c <rt_test_001_002_execute+0x7c>)
 8007b38:	f7ff ff82 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- Major Number:                       ");
 8007b3c:	4814      	ldr	r0, [pc, #80]	; (8007b90 <rt_test_001_002_execute+0x80>)
 8007b3e:	f7ff ff6f 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_KERNEL_MAJOR);
 8007b42:	2007      	movs	r0, #7
 8007b44:	f7ff ff5c 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007b48:	480e      	ldr	r0, [pc, #56]	; (8007b84 <rt_test_001_002_execute+0x74>)
 8007b4a:	f7ff ff79 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- Minor Number:                       ");
 8007b4e:	4811      	ldr	r0, [pc, #68]	; (8007b94 <rt_test_001_002_execute+0x84>)
 8007b50:	f7ff ff66 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_KERNEL_MINOR);
 8007b54:	2000      	movs	r0, #0
 8007b56:	f7ff ff53 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007b5a:	480a      	ldr	r0, [pc, #40]	; (8007b84 <rt_test_001_002_execute+0x74>)
 8007b5c:	f7ff ff70 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- Patch Number:                       ");
 8007b60:	480d      	ldr	r0, [pc, #52]	; (8007b98 <rt_test_001_002_execute+0x88>)
 8007b62:	f7ff ff5d 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_KERNEL_PATCH);
 8007b66:	2004      	movs	r0, #4
 8007b68:	f7ff ff4a 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007b6c:	4805      	ldr	r0, [pc, #20]	; (8007b84 <rt_test_001_002_execute+0x74>)
 8007b6e:	f7ff ff67 	bl	8007a40 <test_println.lto_priv.0>
  }
  test_end_step(1);
}
 8007b72:	bf00      	nop
 8007b74:	bd08      	pop	{r3, pc}
 8007b76:	bf00      	nop
 8007b78:	20000c6c 	.word	0x20000c6c
 8007b7c:	0801d8ac 	.word	0x0801d8ac
 8007b80:	0801d8e0 	.word	0x0801d8e0
 8007b84:	0801d4e8 	.word	0x0801d4e8
 8007b88:	0801d90c 	.word	0x0801d90c
 8007b8c:	0801d938 	.word	0x0801d938
 8007b90:	0801d940 	.word	0x0801d940
 8007b94:	0801d96c 	.word	0x0801d96c
 8007b98:	0801d998 	.word	0x0801d998
 8007b9c:	00000000 	.word	0x00000000

08007ba0 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8007ba0:	b508      	push	{r3, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8007ba2:	4b93      	ldr	r3, [pc, #588]	; (8007df0 <rt_test_001_003_execute+0x250>)
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8007ba8:	4892      	ldr	r0, [pc, #584]	; (8007df4 <rt_test_001_003_execute+0x254>)
 8007baa:	f7ff ff39 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_ST_RESOLUTION);
 8007bae:	2020      	movs	r0, #32
 8007bb0:	f7ff ff26 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007bb4:	4890      	ldr	r0, [pc, #576]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007bb6:	f7ff ff43 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 8007bba:	4890      	ldr	r0, [pc, #576]	; (8007dfc <rt_test_001_003_execute+0x25c>)
 8007bbc:	f7ff ff30 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_ST_FREQUENCY);
 8007bc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8007bc4:	f7ff ff1c 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007bc8:	488b      	ldr	r0, [pc, #556]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007bca:	f7ff ff39 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 8007bce:	488c      	ldr	r0, [pc, #560]	; (8007e00 <rt_test_001_003_execute+0x260>)
 8007bd0:	f7ff ff26 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_INTERVALS_SIZE);
 8007bd4:	2020      	movs	r0, #32
 8007bd6:	f7ff ff13 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007bda:	4887      	ldr	r0, [pc, #540]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007bdc:	f7ff ff30 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 8007be0:	4888      	ldr	r0, [pc, #544]	; (8007e04 <rt_test_001_003_execute+0x264>)
 8007be2:	f7ff ff1d 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
 8007be6:	2020      	movs	r0, #32
 8007be8:	f7ff ff0a 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007bec:	4882      	ldr	r0, [pc, #520]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007bee:	f7ff ff27 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 8007bf2:	4885      	ldr	r0, [pc, #532]	; (8007e08 <rt_test_001_003_execute+0x268>)
 8007bf4:	f7ff ff14 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_ST_TIMEDELTA);
 8007bf8:	2002      	movs	r0, #2
 8007bfa:	f7ff ff01 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007bfe:	487e      	ldr	r0, [pc, #504]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007c00:	f7ff ff1e 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 8007c04:	4881      	ldr	r0, [pc, #516]	; (8007e0c <rt_test_001_003_execute+0x26c>)
 8007c06:	f7ff ff0b 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_TIME_QUANTUM);
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	f7ff fef8 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007c10:	4879      	ldr	r0, [pc, #484]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007c12:	f7ff ff15 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 8007c16:	487e      	ldr	r0, [pc, #504]	; (8007e10 <rt_test_001_003_execute+0x270>)
 8007c18:	f7ff ff02 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_MEMCORE_SIZE);
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	f7ff feef 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007c22:	4875      	ldr	r0, [pc, #468]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007c24:	f7ff ff0c 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 8007c28:	487a      	ldr	r0, [pc, #488]	; (8007e14 <rt_test_001_003_execute+0x274>)
 8007c2a:	f7ff fef9 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_NO_IDLE_THREAD);
 8007c2e:	2000      	movs	r0, #0
 8007c30:	f7ff fee6 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007c34:	4870      	ldr	r0, [pc, #448]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007c36:	f7ff ff03 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 8007c3a:	4877      	ldr	r0, [pc, #476]	; (8007e18 <rt_test_001_003_execute+0x278>)
 8007c3c:	f7ff fef0 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
 8007c40:	2001      	movs	r0, #1
 8007c42:	f7ff fedd 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007c46:	486c      	ldr	r0, [pc, #432]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007c48:	f7ff fefa 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_USE_TM:                      ");
 8007c4c:	4873      	ldr	r0, [pc, #460]	; (8007e1c <rt_test_001_003_execute+0x27c>)
 8007c4e:	f7ff fee7 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_USE_TM);
 8007c52:	2001      	movs	r0, #1
 8007c54:	f7ff fed4 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007c58:	4867      	ldr	r0, [pc, #412]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007c5a:	f7ff fef1 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 8007c5e:	4870      	ldr	r0, [pc, #448]	; (8007e20 <rt_test_001_003_execute+0x280>)
 8007c60:	f7ff fede 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_USE_REGISTRY);
 8007c64:	2001      	movs	r0, #1
 8007c66:	f7ff fecb 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007c6a:	4863      	ldr	r0, [pc, #396]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007c6c:	f7ff fee8 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 8007c70:	486c      	ldr	r0, [pc, #432]	; (8007e24 <rt_test_001_003_execute+0x284>)
 8007c72:	f7ff fed5 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_USE_WAITEXIT);
 8007c76:	2001      	movs	r0, #1
 8007c78:	f7ff fec2 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007c7c:	485e      	ldr	r0, [pc, #376]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007c7e:	f7ff fedf 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 8007c82:	4869      	ldr	r0, [pc, #420]	; (8007e28 <rt_test_001_003_execute+0x288>)
 8007c84:	f7ff fecc 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_USE_SEMAPHORES);
 8007c88:	2001      	movs	r0, #1
 8007c8a:	f7ff feb9 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007c8e:	485a      	ldr	r0, [pc, #360]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007c90:	f7ff fed6 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRIORITY:     ");
 8007c94:	4865      	ldr	r0, [pc, #404]	; (8007e2c <rt_test_001_003_execute+0x28c>)
 8007c96:	f7ff fec3 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	f7ff feb0 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007ca0:	4855      	ldr	r0, [pc, #340]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007ca2:	f7ff fecd 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 8007ca6:	4862      	ldr	r0, [pc, #392]	; (8007e30 <rt_test_001_003_execute+0x290>)
 8007ca8:	f7ff feba 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_USE_MUTEXES);
 8007cac:	2001      	movs	r0, #1
 8007cae:	f7ff fea7 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007cb2:	4851      	ldr	r0, [pc, #324]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007cb4:	f7ff fec4 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_USE_MUTEXES_RECURSIVE:       ");
 8007cb8:	485e      	ldr	r0, [pc, #376]	; (8007e34 <rt_test_001_003_execute+0x294>)
 8007cba:	f7ff feb1 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	f7ff fe9e 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");   
 8007cc4:	484c      	ldr	r0, [pc, #304]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007cc6:	f7ff febb 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 8007cca:	485b      	ldr	r0, [pc, #364]	; (8007e38 <rt_test_001_003_execute+0x298>)
 8007ccc:	f7ff fea8 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_USE_CONDVARS);
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	f7ff fe95 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007cd6:	4848      	ldr	r0, [pc, #288]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007cd8:	f7ff feb2 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEOUT:        ");
 8007cdc:	4857      	ldr	r0, [pc, #348]	; (8007e3c <rt_test_001_003_execute+0x29c>)
 8007cde:	f7ff fe9f 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
 8007ce2:	2001      	movs	r0, #1
 8007ce4:	f7ff fe8c 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007ce8:	4843      	ldr	r0, [pc, #268]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007cea:	f7ff fea9 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 8007cee:	4854      	ldr	r0, [pc, #336]	; (8007e40 <rt_test_001_003_execute+0x2a0>)
 8007cf0:	f7ff fe96 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_USE_EVENTS);
 8007cf4:	2001      	movs	r0, #1
 8007cf6:	f7ff fe83 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007cfa:	483f      	ldr	r0, [pc, #252]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007cfc:	f7ff fea0 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 8007d00:	4850      	ldr	r0, [pc, #320]	; (8007e44 <rt_test_001_003_execute+0x2a4>)
 8007d02:	f7ff fe8d 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
 8007d06:	2001      	movs	r0, #1
 8007d08:	f7ff fe7a 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007d0c:	483a      	ldr	r0, [pc, #232]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007d0e:	f7ff fe97 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 8007d12:	484d      	ldr	r0, [pc, #308]	; (8007e48 <rt_test_001_003_execute+0x2a8>)
 8007d14:	f7ff fe84 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_USE_MESSAGES);
 8007d18:	2001      	movs	r0, #1
 8007d1a:	f7ff fe71 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007d1e:	4836      	ldr	r0, [pc, #216]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007d20:	f7ff fe8e 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_USE_MESSAGES_PRIORITY:       ");
 8007d24:	4849      	ldr	r0, [pc, #292]	; (8007e4c <rt_test_001_003_execute+0x2ac>)
 8007d26:	f7ff fe7b 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	f7ff fe68 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007d30:	4831      	ldr	r0, [pc, #196]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007d32:	f7ff fe85 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 8007d36:	4846      	ldr	r0, [pc, #280]	; (8007e50 <rt_test_001_003_execute+0x2b0>)
 8007d38:	f7ff fe72 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_CFG_USE_DYNAMIC);
 8007d3c:	2001      	movs	r0, #1
 8007d3e:	f7ff fe5f 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007d42:	482d      	ldr	r0, [pc, #180]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007d44:	f7ff fe7c 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_DBG_STATISTICS:                  ");
 8007d48:	4842      	ldr	r0, [pc, #264]	; (8007e54 <rt_test_001_003_execute+0x2b4>)
 8007d4a:	f7ff fe69 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_DBG_STATISTICS);
 8007d4e:	2000      	movs	r0, #0
 8007d50:	f7ff fe56 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007d54:	4828      	ldr	r0, [pc, #160]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007d56:	f7ff fe73 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 8007d5a:	483f      	ldr	r0, [pc, #252]	; (8007e58 <rt_test_001_003_execute+0x2b8>)
 8007d5c:	f7ff fe60 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
 8007d60:	2000      	movs	r0, #0
 8007d62:	f7ff fe4d 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007d66:	4824      	ldr	r0, [pc, #144]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007d68:	f7ff fe6a 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 8007d6c:	483b      	ldr	r0, [pc, #236]	; (8007e5c <rt_test_001_003_execute+0x2bc>)
 8007d6e:	f7ff fe57 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_DBG_ENABLE_CHECKS);
 8007d72:	2000      	movs	r0, #0
 8007d74:	f7ff fe44 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007d78:	481f      	ldr	r0, [pc, #124]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007d7a:	f7ff fe61 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 8007d7e:	4838      	ldr	r0, [pc, #224]	; (8007e60 <rt_test_001_003_execute+0x2c0>)
 8007d80:	f7ff fe4e 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_DBG_ENABLE_ASSERTS);
 8007d84:	2000      	movs	r0, #0
 8007d86:	f7ff fe3b 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007d8a:	481b      	ldr	r0, [pc, #108]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007d8c:	f7ff fe58 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 8007d90:	4834      	ldr	r0, [pc, #208]	; (8007e64 <rt_test_001_003_execute+0x2c4>)
 8007d92:	f7ff fe45 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_DBG_TRACE_MASK);
 8007d96:	20ff      	movs	r0, #255	; 0xff
 8007d98:	f7ff fe32 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007d9c:	4816      	ldr	r0, [pc, #88]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007d9e:	f7ff fe4f 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 8007da2:	4831      	ldr	r0, [pc, #196]	; (8007e68 <rt_test_001_003_execute+0x2c8>)
 8007da4:	f7ff fe3c 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
 8007da8:	2080      	movs	r0, #128	; 0x80
 8007daa:	f7ff fe29 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007dae:	4812      	ldr	r0, [pc, #72]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007db0:	f7ff fe46 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 8007db4:	482d      	ldr	r0, [pc, #180]	; (8007e6c <rt_test_001_003_execute+0x2cc>)
 8007db6:	f7ff fe33 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
 8007dba:	2001      	movs	r0, #1
 8007dbc:	f7ff fe20 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007dc0:	480d      	ldr	r0, [pc, #52]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007dc2:	f7ff fe3d 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 8007dc6:	482a      	ldr	r0, [pc, #168]	; (8007e70 <rt_test_001_003_execute+0x2d0>)
 8007dc8:	f7ff fe2a 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_DBG_FILL_THREADS);
 8007dcc:	2000      	movs	r0, #0
 8007dce:	f7ff fe17 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007dd2:	4809      	ldr	r0, [pc, #36]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007dd4:	f7ff fe34 	bl	8007a40 <test_println.lto_priv.0>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 8007dd8:	4826      	ldr	r0, [pc, #152]	; (8007e74 <rt_test_001_003_execute+0x2d4>)
 8007dda:	f7ff fe21 	bl	8007a20 <test_print.lto_priv.0>
    test_printn(CH_DBG_THREADS_PROFILING);
 8007dde:	2000      	movs	r0, #0
 8007de0:	f7ff fe0e 	bl	8007a00 <test_printn.lto_priv.0>
    test_println("");
 8007de4:	4804      	ldr	r0, [pc, #16]	; (8007df8 <rt_test_001_003_execute+0x258>)
 8007de6:	f7ff fe2b 	bl	8007a40 <test_println.lto_priv.0>
  }
  test_end_step(1);
}
 8007dea:	bf00      	nop
 8007dec:	bd08      	pop	{r3, pc}
 8007dee:	bf00      	nop
 8007df0:	20000c6c 	.word	0x20000c6c
 8007df4:	0801d9d4 	.word	0x0801d9d4
 8007df8:	0801d4e8 	.word	0x0801d4e8
 8007dfc:	0801da00 	.word	0x0801da00
 8007e00:	0801da2c 	.word	0x0801da2c
 8007e04:	0801da58 	.word	0x0801da58
 8007e08:	0801da84 	.word	0x0801da84
 8007e0c:	0801dab0 	.word	0x0801dab0
 8007e10:	0801dadc 	.word	0x0801dadc
 8007e14:	0801db08 	.word	0x0801db08
 8007e18:	0801db34 	.word	0x0801db34
 8007e1c:	0801db60 	.word	0x0801db60
 8007e20:	0801db8c 	.word	0x0801db8c
 8007e24:	0801dbb8 	.word	0x0801dbb8
 8007e28:	0801dbe4 	.word	0x0801dbe4
 8007e2c:	0801dc10 	.word	0x0801dc10
 8007e30:	0801dc3c 	.word	0x0801dc3c
 8007e34:	0801dc68 	.word	0x0801dc68
 8007e38:	0801dc94 	.word	0x0801dc94
 8007e3c:	0801dcc0 	.word	0x0801dcc0
 8007e40:	0801dcec 	.word	0x0801dcec
 8007e44:	0801dd18 	.word	0x0801dd18
 8007e48:	0801dd44 	.word	0x0801dd44
 8007e4c:	0801dd70 	.word	0x0801dd70
 8007e50:	0801dd9c 	.word	0x0801dd9c
 8007e54:	0801ddc8 	.word	0x0801ddc8
 8007e58:	0801ddf4 	.word	0x0801ddf4
 8007e5c:	0801de20 	.word	0x0801de20
 8007e60:	0801de4c 	.word	0x0801de4c
 8007e64:	0801de78 	.word	0x0801de78
 8007e68:	0801dea4 	.word	0x0801dea4
 8007e6c:	0801ded0 	.word	0x0801ded0
 8007e70:	0801defc 	.word	0x0801defc
 8007e74:	0801df28 	.word	0x0801df28
	...

08007e80 <chSysDisable>:
  __ASM volatile ("cpsid i" : : : "memory");
 8007e80:	b672      	cpsid	i
}
 8007e82:	bf00      	nop
}
 8007e84:	bf00      	nop
}
 8007e86:	bf00      	nop
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	0000      	movs	r0, r0
	...

08007e90 <chSysSuspend>:
static inline void chSysSuspend(void) {
 8007e90:	b082      	sub	sp, #8
 8007e92:	2330      	movs	r3, #48	; 0x30
 8007e94:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007e96:	9b01      	ldr	r3, [sp, #4]
 8007e98:	f383 8811 	msr	BASEPRI, r3
}
 8007e9c:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8007e9e:	b662      	cpsie	i
}
 8007ea0:	bf00      	nop
}
 8007ea2:	bf00      	nop
}
 8007ea4:	bf00      	nop
 8007ea6:	b002      	add	sp, #8
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	0000      	movs	r0, r0
	...

08007eb0 <chSysEnable>:
static inline void chSysEnable(void) {
 8007eb0:	b082      	sub	sp, #8
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007eb6:	9b01      	ldr	r3, [sp, #4]
 8007eb8:	f383 8811 	msr	BASEPRI, r3
}
 8007ebc:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8007ebe:	b662      	cpsie	i
}
 8007ec0:	bf00      	nop
}
 8007ec2:	bf00      	nop
}
 8007ec4:	bf00      	nop
 8007ec6:	b002      	add	sp, #8
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	0000      	movs	r0, r0
	...

08007ed0 <chSysLock.lto_priv.19>:
static inline void chSysLock(void) {
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	2330      	movs	r3, #48	; 0x30
 8007ed4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007ed6:	9b01      	ldr	r3, [sp, #4]
 8007ed8:	f383 8811 	msr	BASEPRI, r3
}
 8007edc:	bf00      	nop
}
 8007ede:	bf00      	nop
}
 8007ee0:	bf00      	nop
 8007ee2:	b002      	add	sp, #8
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
	...

08007ef0 <chSysUnlock.lto_priv.19>:
static inline void chSysUnlock(void) {
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007ef6:	9b01      	ldr	r3, [sp, #4]
 8007ef8:	f383 8811 	msr	BASEPRI, r3
}
 8007efc:	bf00      	nop
}
 8007efe:	bf00      	nop
}
 8007f00:	bf00      	nop
 8007f02:	b002      	add	sp, #8
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
	...

08007f10 <chSysLockFromISR.lto_priv.5>:
static inline void chSysLockFromISR(void) {
 8007f10:	b082      	sub	sp, #8
 8007f12:	2330      	movs	r3, #48	; 0x30
 8007f14:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007f16:	9b01      	ldr	r3, [sp, #4]
 8007f18:	f383 8811 	msr	BASEPRI, r3
}
 8007f1c:	bf00      	nop
}
 8007f1e:	bf00      	nop
}
 8007f20:	bf00      	nop
}
 8007f22:	bf00      	nop
 8007f24:	b002      	add	sp, #8
 8007f26:	4770      	bx	lr
	...

08007f30 <chSysUnlockFromISR.lto_priv.5>:
static inline void chSysUnlockFromISR(void) {
 8007f30:	b082      	sub	sp, #8
 8007f32:	2300      	movs	r3, #0
 8007f34:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007f36:	9b01      	ldr	r3, [sp, #4]
 8007f38:	f383 8811 	msr	BASEPRI, r3
}
 8007f3c:	bf00      	nop
}
 8007f3e:	bf00      	nop
}
 8007f40:	bf00      	nop
}
 8007f42:	bf00      	nop
 8007f44:	b002      	add	sp, #8
 8007f46:	4770      	bx	lr
	...

08007f50 <chSysUnconditionalLock>:
 * @note    Can be called without previous knowledge of the current lock state.
 *          The final state is "s-locked".
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {
 8007f50:	b500      	push	{lr}
 8007f52:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f54:	f3ef 8311 	mrs	r3, BASEPRI
 8007f58:	9302      	str	r3, [sp, #8]
  return(result);
 8007f5a:	9b02      	ldr	r3, [sp, #8]
  sts = (syssts_t)__get_BASEPRI();
 8007f5c:	9301      	str	r3, [sp, #4]
  return sts;
 8007f5e:	9b01      	ldr	r3, [sp, #4]
 8007f60:	9303      	str	r3, [sp, #12]
  return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 8007f62:	9b03      	ldr	r3, [sp, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	bf0c      	ite	eq
 8007f68:	2301      	moveq	r3, #1
 8007f6a:	2300      	movne	r3, #0
 8007f6c:	b2db      	uxtb	r3, r3

  if (port_irq_enabled(port_get_irq_status())) {
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <chSysUnconditionalLock+0x26>
    chSysLock();
 8007f72:	f7ff ffad 	bl	8007ed0 <chSysLock.lto_priv.19>
  }
}
 8007f76:	bf00      	nop
 8007f78:	b005      	add	sp, #20
 8007f7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f7e:	bf00      	nop

08007f80 <chSysUnconditionalUnlock>:
 * @note    Can be called without previous knowledge of the current lock state.
 *          The final state is "normal".
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {
 8007f80:	b500      	push	{lr}
 8007f82:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f84:	f3ef 8311 	mrs	r3, BASEPRI
 8007f88:	9302      	str	r3, [sp, #8]
  return(result);
 8007f8a:	9b02      	ldr	r3, [sp, #8]
  sts = (syssts_t)__get_BASEPRI();
 8007f8c:	9301      	str	r3, [sp, #4]
  return sts;
 8007f8e:	9b01      	ldr	r3, [sp, #4]
 8007f90:	9303      	str	r3, [sp, #12]
  return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 8007f92:	9b03      	ldr	r3, [sp, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bf0c      	ite	eq
 8007f98:	2301      	moveq	r3, #1
 8007f9a:	2300      	movne	r3, #0
 8007f9c:	b2db      	uxtb	r3, r3

  if (!port_irq_enabled(port_get_irq_status())) {
 8007f9e:	f083 0301 	eor.w	r3, r3, #1
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <chSysUnconditionalUnlock+0x2c>
    chSysUnlock();
 8007fa8:	f7ff ffa2 	bl	8007ef0 <chSysUnlock.lto_priv.19>
  }
}
 8007fac:	bf00      	nop
 8007fae:	b005      	add	sp, #20
 8007fb0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007fc0 <chVTObjectInit>:
static inline void chVTObjectInit(virtual_timer_t *vtp) {
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	9001      	str	r0, [sp, #4]
  vtp->dlist.next = NULL;
 8007fc4:	9b01      	ldr	r3, [sp, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
}
 8007fca:	bf00      	nop
 8007fcc:	b002      	add	sp, #8
 8007fce:	4770      	bx	lr

08007fd0 <chVTIsArmedI.lto_priv.1>:
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	9001      	str	r0, [sp, #4]
  return (bool)(vtp->dlist.next != NULL);
 8007fd4:	9b01      	ldr	r3, [sp, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bf14      	ite	ne
 8007fdc:	2301      	movne	r3, #1
 8007fde:	2300      	moveq	r3, #0
 8007fe0:	b2db      	uxtb	r3, r3
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	b002      	add	sp, #8
 8007fe6:	4770      	bx	lr
	...

08007ff0 <chVTIsArmed>:
static inline bool chVTIsArmed(const virtual_timer_t *vtp) {
 8007ff0:	b500      	push	{lr}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	9001      	str	r0, [sp, #4]
  chSysLock();
 8007ff6:	f7ff ff6b 	bl	8007ed0 <chSysLock.lto_priv.19>
  b = chVTIsArmedI(vtp);
 8007ffa:	9801      	ldr	r0, [sp, #4]
 8007ffc:	f7ff ffe8 	bl	8007fd0 <chVTIsArmedI.lto_priv.1>
 8008000:	4603      	mov	r3, r0
 8008002:	f88d 300f 	strb.w	r3, [sp, #15]
  chSysUnlock();
 8008006:	f7ff ff73 	bl	8007ef0 <chSysUnlock.lto_priv.19>
  return b;
 800800a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 800800e:	4618      	mov	r0, r3
 8008010:	b005      	add	sp, #20
 8008012:	f85d fb04 	ldr.w	pc, [sp], #4
 8008016:	bf00      	nop
	...

08008020 <chVTResetI>:
static inline void chVTResetI(virtual_timer_t *vtp) {
 8008020:	b500      	push	{lr}
 8008022:	b083      	sub	sp, #12
 8008024:	9001      	str	r0, [sp, #4]
  if (chVTIsArmedI(vtp)) {
 8008026:	9801      	ldr	r0, [sp, #4]
 8008028:	f7ff ffd2 	bl	8007fd0 <chVTIsArmedI.lto_priv.1>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <chVTResetI+0x18>
    chVTDoResetI(vtp);
 8008032:	9801      	ldr	r0, [sp, #4]
 8008034:	f7fa f9f4 	bl	8002420 <chVTDoResetI>
}
 8008038:	bf00      	nop
 800803a:	b003      	add	sp, #12
 800803c:	f85d fb04 	ldr.w	pc, [sp], #4

08008040 <chVTSetI>:
                            vtfunc_t vtfunc, void *par) {
 8008040:	b500      	push	{lr}
 8008042:	b085      	sub	sp, #20
 8008044:	9003      	str	r0, [sp, #12]
 8008046:	9102      	str	r1, [sp, #8]
 8008048:	9201      	str	r2, [sp, #4]
 800804a:	9300      	str	r3, [sp, #0]
  chVTResetI(vtp);
 800804c:	9803      	ldr	r0, [sp, #12]
 800804e:	f7ff ffe7 	bl	8008020 <chVTResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8008052:	9b00      	ldr	r3, [sp, #0]
 8008054:	9a01      	ldr	r2, [sp, #4]
 8008056:	9902      	ldr	r1, [sp, #8]
 8008058:	9803      	ldr	r0, [sp, #12]
 800805a:	f7fa f9c1 	bl	80023e0 <chVTDoSetI>
}
 800805e:	bf00      	nop
 8008060:	b005      	add	sp, #20
 8008062:	f85d fb04 	ldr.w	pc, [sp], #4
 8008066:	bf00      	nop
	...

08008070 <chVTSet>:
                           vtfunc_t vtfunc, void *par) {
 8008070:	b500      	push	{lr}
 8008072:	b085      	sub	sp, #20
 8008074:	9003      	str	r0, [sp, #12]
 8008076:	9102      	str	r1, [sp, #8]
 8008078:	9201      	str	r2, [sp, #4]
 800807a:	9300      	str	r3, [sp, #0]
  chSysLock();
 800807c:	f7ff ff28 	bl	8007ed0 <chSysLock.lto_priv.19>
  chVTSetI(vtp, delay, vtfunc, par);
 8008080:	9b00      	ldr	r3, [sp, #0]
 8008082:	9a01      	ldr	r2, [sp, #4]
 8008084:	9902      	ldr	r1, [sp, #8]
 8008086:	9803      	ldr	r0, [sp, #12]
 8008088:	f7ff ffda 	bl	8008040 <chVTSetI>
  chSysUnlock();
 800808c:	f7ff ff30 	bl	8007ef0 <chSysUnlock.lto_priv.19>
}
 8008090:	bf00      	nop
 8008092:	b005      	add	sp, #20
 8008094:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080080a0 <vtcb>:
/****************************************************************************
 * Shared code.
 ****************************************************************************/

/* Timer callback for testing system functions in ISR context.*/
static void vtcb(virtual_timer_t *vtp, void *p) {
 80080a0:	b500      	push	{lr}
 80080a2:	b085      	sub	sp, #20
 80080a4:	9001      	str	r0, [sp, #4]
 80080a6:	9100      	str	r1, [sp, #0]

  (void)vtp;
  (void)p;

  /* Testing normal case.*/
  chSysLockFromISR();
 80080a8:	f7ff ff32 	bl	8007f10 <chSysLockFromISR.lto_priv.5>
  chSysUnlockFromISR();
 80080ac:	f7ff ff40 	bl	8007f30 <chSysUnlockFromISR.lto_priv.5>

  /* Reentrant case.*/
  chSysLockFromISR();
 80080b0:	f7ff ff2e 	bl	8007f10 <chSysLockFromISR.lto_priv.5>
  sts = chSysGetStatusAndLockX();
 80080b4:	f7f9 ff34 	bl	8001f20 <chSysGetStatusAndLockX>
 80080b8:	9003      	str	r0, [sp, #12]
  chSysRestoreStatusX(sts);
 80080ba:	9803      	ldr	r0, [sp, #12]
 80080bc:	f7f9 ff60 	bl	8001f80 <chSysRestoreStatusX>
  chSysUnlockFromISR();
 80080c0:	f7ff ff36 	bl	8007f30 <chSysUnlockFromISR.lto_priv.5>
}
 80080c4:	bf00      	nop
 80080c6:	b005      	add	sp, #20
 80080c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80080cc:	0000      	movs	r0, r0
	...

080080d0 <rt_test_002_001_execute>:
 * - [2.1.3] Testing Registry List integrity.
 * - [2.1.4] Testing Port-defined integrity.
 * .
 */

static void rt_test_002_001_execute(void) {
 80080d0:	b500      	push	{lr}
 80080d2:	b083      	sub	sp, #12
  bool result;

  /* [2.1.1] Testing Ready List integrity.*/
  test_set_step(1);
 80080d4:	4b42      	ldr	r3, [pc, #264]	; (80081e0 <rt_test_002_001_execute+0x110>)
 80080d6:	2201      	movs	r2, #1
 80080d8:	601a      	str	r2, [r3, #0]
  {
    chSysLock();
 80080da:	f7ff fef9 	bl	8007ed0 <chSysLock.lto_priv.19>
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 80080de:	2001      	movs	r0, #1
 80080e0:	f7f9 fe8e 	bl	8001e00 <chSysIntegrityCheckI>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f88d 3007 	strb.w	r3, [sp, #7]
    chSysUnlock();
 80080ea:	f7ff ff01 	bl	8007ef0 <chSysUnlock.lto_priv.19>
    test_assert(result == false, "ready list check failed");
 80080ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	bf14      	ite	ne
 80080f6:	2301      	movne	r3, #1
 80080f8:	2300      	moveq	r3, #0
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	f083 0301 	eor.w	r3, r3, #1
 8008100:	b2db      	uxtb	r3, r3
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	b2db      	uxtb	r3, r3
 8008108:	4936      	ldr	r1, [pc, #216]	; (80081e4 <rt_test_002_001_execute+0x114>)
 800810a:	4618      	mov	r0, r3
 800810c:	f7ff f870 	bl	80071f0 <__test_assert>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d161      	bne.n	80081da <rt_test_002_001_execute+0x10a>
  }
  test_end_step(1);

  /* [2.1.2] Testing Virtual Timers List integrity.*/
  test_set_step(2);
 8008116:	4b32      	ldr	r3, [pc, #200]	; (80081e0 <rt_test_002_001_execute+0x110>)
 8008118:	2202      	movs	r2, #2
 800811a:	601a      	str	r2, [r3, #0]
  {
    chSysLock();
 800811c:	f7ff fed8 	bl	8007ed0 <chSysLock.lto_priv.19>
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8008120:	2002      	movs	r0, #2
 8008122:	f7f9 fe6d 	bl	8001e00 <chSysIntegrityCheckI>
 8008126:	4603      	mov	r3, r0
 8008128:	f88d 3007 	strb.w	r3, [sp, #7]
    chSysUnlock();
 800812c:	f7ff fee0 	bl	8007ef0 <chSysUnlock.lto_priv.19>
    test_assert(result == false, "virtual timers list check failed");
 8008130:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008134:	2b00      	cmp	r3, #0
 8008136:	bf14      	ite	ne
 8008138:	2301      	movne	r3, #1
 800813a:	2300      	moveq	r3, #0
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f083 0301 	eor.w	r3, r3, #1
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 0301 	and.w	r3, r3, #1
 8008148:	b2db      	uxtb	r3, r3
 800814a:	4927      	ldr	r1, [pc, #156]	; (80081e8 <rt_test_002_001_execute+0x118>)
 800814c:	4618      	mov	r0, r3
 800814e:	f7ff f84f 	bl	80071f0 <__test_assert>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d140      	bne.n	80081da <rt_test_002_001_execute+0x10a>
  }
  test_end_step(2);

  /* [2.1.3] Testing Registry List integrity.*/
  test_set_step(3);
 8008158:	4b21      	ldr	r3, [pc, #132]	; (80081e0 <rt_test_002_001_execute+0x110>)
 800815a:	2203      	movs	r2, #3
 800815c:	601a      	str	r2, [r3, #0]
  {
    chSysLock();
 800815e:	f7ff feb7 	bl	8007ed0 <chSysLock.lto_priv.19>
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 8008162:	2004      	movs	r0, #4
 8008164:	f7f9 fe4c 	bl	8001e00 <chSysIntegrityCheckI>
 8008168:	4603      	mov	r3, r0
 800816a:	f88d 3007 	strb.w	r3, [sp, #7]
    chSysUnlock();
 800816e:	f7ff febf 	bl	8007ef0 <chSysUnlock.lto_priv.19>
    test_assert(result == false, "registry list check failed");
 8008172:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008176:	2b00      	cmp	r3, #0
 8008178:	bf14      	ite	ne
 800817a:	2301      	movne	r3, #1
 800817c:	2300      	moveq	r3, #0
 800817e:	b2db      	uxtb	r3, r3
 8008180:	f083 0301 	eor.w	r3, r3, #1
 8008184:	b2db      	uxtb	r3, r3
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	b2db      	uxtb	r3, r3
 800818c:	4917      	ldr	r1, [pc, #92]	; (80081ec <rt_test_002_001_execute+0x11c>)
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff f82e 	bl	80071f0 <__test_assert>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d11f      	bne.n	80081da <rt_test_002_001_execute+0x10a>
  }
  test_end_step(3);

  /* [2.1.4] Testing Port-defined integrity.*/
  test_set_step(4);
 800819a:	4b11      	ldr	r3, [pc, #68]	; (80081e0 <rt_test_002_001_execute+0x110>)
 800819c:	2204      	movs	r2, #4
 800819e:	601a      	str	r2, [r3, #0]
  {
    chSysLock();
 80081a0:	f7ff fe96 	bl	8007ed0 <chSysLock.lto_priv.19>
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 80081a4:	2008      	movs	r0, #8
 80081a6:	f7f9 fe2b 	bl	8001e00 <chSysIntegrityCheckI>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f88d 3007 	strb.w	r3, [sp, #7]
    chSysUnlock();
 80081b0:	f7ff fe9e 	bl	8007ef0 <chSysUnlock.lto_priv.19>
    test_assert(result == false, "port layer check failed");
 80081b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	bf14      	ite	ne
 80081bc:	2301      	movne	r3, #1
 80081be:	2300      	moveq	r3, #0
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	f083 0301 	eor.w	r3, r3, #1
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	4908      	ldr	r1, [pc, #32]	; (80081f0 <rt_test_002_001_execute+0x120>)
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7ff f80d 	bl	80071f0 <__test_assert>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
  }
  test_end_step(4);
}
 80081da:	b003      	add	sp, #12
 80081dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80081e0:	20000c6c 	.word	0x20000c6c
 80081e4:	0801df7c 	.word	0x0801df7c
 80081e8:	0801df94 	.word	0x0801df94
 80081ec:	0801dfb8 	.word	0x0801dfb8
 80081f0:	0801dfd4 	.word	0x0801dfd4
	...

08008200 <rt_test_002_002_execute>:
 * - [2.2.4] Testing chSysUnconditionalUnlock().
 * - [2.2.5] Testing from ISR context using a virtual timer.
 * .
 */

static void rt_test_002_002_execute(void) {
 8008200:	b500      	push	{lr}
 8008202:	b089      	sub	sp, #36	; 0x24
  syssts_t sts;
  virtual_timer_t vt;

  /* [2.2.1] Testing chSysGetStatusAndLockX() and
     chSysRestoreStatusX(), non reentrant case.*/
  test_set_step(1);
 8008204:	4b28      	ldr	r3, [pc, #160]	; (80082a8 <rt_test_002_002_execute+0xa8>)
 8008206:	2201      	movs	r2, #1
 8008208:	601a      	str	r2, [r3, #0]
  {
    sts = chSysGetStatusAndLockX();
 800820a:	f7f9 fe89 	bl	8001f20 <chSysGetStatusAndLockX>
 800820e:	9007      	str	r0, [sp, #28]
    chSysRestoreStatusX(sts);
 8008210:	9807      	ldr	r0, [sp, #28]
 8008212:	f7f9 feb5 	bl	8001f80 <chSysRestoreStatusX>
  }
  test_end_step(1);

  /* [2.2.2] Testing chSysGetStatusAndLockX() and
     chSysRestoreStatusX(), reentrant case.*/
  test_set_step(2);
 8008216:	4b24      	ldr	r3, [pc, #144]	; (80082a8 <rt_test_002_002_execute+0xa8>)
 8008218:	2202      	movs	r2, #2
 800821a:	601a      	str	r2, [r3, #0]
  {
    chSysLock();
 800821c:	f7ff fe58 	bl	8007ed0 <chSysLock.lto_priv.19>
    sts = chSysGetStatusAndLockX();
 8008220:	f7f9 fe7e 	bl	8001f20 <chSysGetStatusAndLockX>
 8008224:	9007      	str	r0, [sp, #28]
    chSysRestoreStatusX(sts);
 8008226:	9807      	ldr	r0, [sp, #28]
 8008228:	f7f9 feaa 	bl	8001f80 <chSysRestoreStatusX>
    chSysUnlock();
 800822c:	f7ff fe60 	bl	8007ef0 <chSysUnlock.lto_priv.19>
  }
  test_end_step(2);

  /* [2.2.3] Testing chSysUnconditionalLock().*/
  test_set_step(3);
 8008230:	4b1d      	ldr	r3, [pc, #116]	; (80082a8 <rt_test_002_002_execute+0xa8>)
 8008232:	2203      	movs	r2, #3
 8008234:	601a      	str	r2, [r3, #0]
  {
    chSysUnconditionalLock();
 8008236:	f7ff fe8b 	bl	8007f50 <chSysUnconditionalLock>
    chSysUnconditionalLock();
 800823a:	f7ff fe89 	bl	8007f50 <chSysUnconditionalLock>
    chSysUnlock();
 800823e:	f7ff fe57 	bl	8007ef0 <chSysUnlock.lto_priv.19>
  }
  test_end_step(3);

  /* [2.2.4] Testing chSysUnconditionalUnlock().*/
  test_set_step(4);
 8008242:	4b19      	ldr	r3, [pc, #100]	; (80082a8 <rt_test_002_002_execute+0xa8>)
 8008244:	2204      	movs	r2, #4
 8008246:	601a      	str	r2, [r3, #0]
  {
    chSysLock();
 8008248:	f7ff fe42 	bl	8007ed0 <chSysLock.lto_priv.19>
    chSysUnconditionalUnlock();
 800824c:	f7ff fe98 	bl	8007f80 <chSysUnconditionalUnlock>
    chSysUnconditionalUnlock();
 8008250:	f7ff fe96 	bl	8007f80 <chSysUnconditionalUnlock>
  }
  test_end_step(4);

  /* [2.2.5] Testing from ISR context using a virtual timer.*/
  test_set_step(5);
 8008254:	4b14      	ldr	r3, [pc, #80]	; (80082a8 <rt_test_002_002_execute+0xa8>)
 8008256:	2205      	movs	r2, #5
 8008258:	601a      	str	r2, [r3, #0]
  {
    chVTObjectInit(&vt);
 800825a:	ab01      	add	r3, sp, #4
 800825c:	4618      	mov	r0, r3
 800825e:	f7ff feaf 	bl	8007fc0 <chVTObjectInit>
    chVTSet(&vt, 1, vtcb, NULL);
 8008262:	a801      	add	r0, sp, #4
 8008264:	2300      	movs	r3, #0
 8008266:	4a11      	ldr	r2, [pc, #68]	; (80082ac <rt_test_002_002_execute+0xac>)
 8008268:	2101      	movs	r1, #1
 800826a:	f7ff ff01 	bl	8008070 <chVTSet>
    chThdSleep(10);
 800826e:	200a      	movs	r0, #10
 8008270:	f7fb f8de 	bl	8003430 <chThdSleep>

    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 8008274:	ab01      	add	r3, sp, #4
 8008276:	4618      	mov	r0, r3
 8008278:	f7ff feba 	bl	8007ff0 <chVTIsArmed>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	bf14      	ite	ne
 8008282:	2301      	movne	r3, #1
 8008284:	2300      	moveq	r3, #0
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f083 0301 	eor.w	r3, r3, #1
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	b2db      	uxtb	r3, r3
 8008294:	4906      	ldr	r1, [pc, #24]	; (80082b0 <rt_test_002_002_execute+0xb0>)
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe ffaa 	bl	80071f0 <__test_assert>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
  }
  test_end_step(5);
}
 80082a0:	b009      	add	sp, #36	; 0x24
 80082a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80082a6:	bf00      	nop
 80082a8:	20000c6c 	.word	0x20000c6c
 80082ac:	080080a1 	.word	0x080080a1
 80082b0:	0801dffc 	.word	0x0801dffc
	...

080082c0 <rt_test_002_003_execute>:
 * <h2>Test Steps</h2>
 * - [2.3.1] Testing chSysSuspend(), chSysDisable() and chSysEnable().
 * .
 */

static void rt_test_002_003_execute(void) {
 80082c0:	b508      	push	{r3, lr}

  /* [2.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 80082c2:	4b06      	ldr	r3, [pc, #24]	; (80082dc <rt_test_002_003_execute+0x1c>)
 80082c4:	2201      	movs	r2, #1
 80082c6:	601a      	str	r2, [r3, #0]
  {
    chSysSuspend();
 80082c8:	f7ff fde2 	bl	8007e90 <chSysSuspend>
    chSysDisable();
 80082cc:	f7ff fdd8 	bl	8007e80 <chSysDisable>
    chSysSuspend();
 80082d0:	f7ff fdde 	bl	8007e90 <chSysSuspend>
    chSysEnable();
 80082d4:	f7ff fdec 	bl	8007eb0 <chSysEnable>
  }
  test_end_step(1);
}
 80082d8:	bf00      	nop
 80082da:	bd08      	pop	{r3, pc}
 80082dc:	20000c6c 	.word	0x20000c6c

080082e0 <chTimeIsInRangeX.lto_priv.2>:
                                    systime_t end) {
 80082e0:	b084      	sub	sp, #16
 80082e2:	9003      	str	r0, [sp, #12]
 80082e4:	9102      	str	r1, [sp, #8]
 80082e6:	9201      	str	r2, [sp, #4]
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80082e8:	9a03      	ldr	r2, [sp, #12]
 80082ea:	9b02      	ldr	r3, [sp, #8]
 80082ec:	1ad2      	subs	r2, r2, r3
                (systime_t)((systime_t)end - (systime_t)start));
 80082ee:	9901      	ldr	r1, [sp, #4]
 80082f0:	9b02      	ldr	r3, [sp, #8]
 80082f2:	1acb      	subs	r3, r1, r3
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80082f4:	429a      	cmp	r2, r3
 80082f6:	bf34      	ite	cc
 80082f8:	2301      	movcc	r3, #1
 80082fa:	2300      	movcs	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
}
 80082fe:	4618      	mov	r0, r3
 8008300:	b004      	add	sp, #16
 8008302:	4770      	bx	lr
	...

08008310 <port_timer_get_time.lto_priv.5>:
static inline systime_t port_timer_get_time(void) {
 8008310:	b508      	push	{r3, lr}
  return stGetCounter();
 8008312:	f7f8 f8e5 	bl	80004e0 <stGetCounter>
 8008316:	4603      	mov	r3, r0
}
 8008318:	4618      	mov	r0, r3
 800831a:	bd08      	pop	{r3, pc}
 800831c:	0000      	movs	r0, r0
	...

08008320 <chVTGetSystemTimeX.lto_priv.5>:
static inline systime_t chVTGetSystemTimeX(void) {
 8008320:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8008322:	f7ff fff5 	bl	8008310 <port_timer_get_time.lto_priv.5>
 8008326:	4603      	mov	r3, r0
}
 8008328:	4618      	mov	r0, r3
 800832a:	bd08      	pop	{r3, pc}
 800832c:	0000      	movs	r0, r0
	...

08008330 <rt_test_003_001_execute>:
 * - [3.1.1] A System Tick Counter increment is expected, the test
 *   simply hangs if it does not happen.
 * .
 */

static void rt_test_003_001_execute(void) {
 8008330:	b500      	push	{lr}
 8008332:	b083      	sub	sp, #12

  /* [3.1.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 8008334:	4b08      	ldr	r3, [pc, #32]	; (8008358 <rt_test_003_001_execute+0x28>)
 8008336:	2201      	movs	r2, #1
 8008338:	601a      	str	r2, [r3, #0]
  {
    systime_t time = chVTGetSystemTimeX();
 800833a:	f7ff fff1 	bl	8008320 <chVTGetSystemTimeX.lto_priv.5>
 800833e:	9001      	str	r0, [sp, #4]
    while (time == chVTGetSystemTimeX()) {
 8008340:	bf00      	nop
 8008342:	f7ff ffed 	bl	8008320 <chVTGetSystemTimeX.lto_priv.5>
 8008346:	4602      	mov	r2, r0
 8008348:	9b01      	ldr	r3, [sp, #4]
 800834a:	4293      	cmp	r3, r2
 800834c:	d0f9      	beq.n	8008342 <rt_test_003_001_execute+0x12>
        _sim_check_for_interrupts();
#endif
    }
  }
  test_end_step(1);
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	b003      	add	sp, #12
 8008354:	f85d fb04 	ldr.w	pc, [sp], #4
 8008358:	20000c6c 	.word	0x20000c6c
 800835c:	00000000 	.word	0x00000000

08008360 <rt_test_003_002_execute>:
 * - [3.2.2] Checking boundaries for start < end.
 * - [3.2.3] Checking boundaries for start > end.
 * .
 */

static void rt_test_003_002_execute(void) {
 8008360:	b500      	push	{lr}
 8008362:	b083      	sub	sp, #12

  /* [3.2.1] Checking case where start == end, it must always evaluate
     as not in range.*/
  test_set_step(1);
 8008364:	4b9d      	ldr	r3, [pc, #628]	; (80085dc <rt_test_003_002_execute+0x27c>)
 8008366:	2201      	movs	r2, #1
 8008368:	601a      	str	r2, [r3, #0]
  {
    bool b;

    b = chTimeIsInRangeX((systime_t)0, (systime_t)0, (systime_t)0);
 800836a:	2200      	movs	r2, #0
 800836c:	2100      	movs	r1, #0
 800836e:	2000      	movs	r0, #0
 8008370:	f7ff ffb6 	bl	80082e0 <chTimeIsInRangeX.lto_priv.2>
 8008374:	4603      	mov	r3, r0
 8008376:	f88d 3007 	strb.w	r3, [sp, #7]
    test_assert(b == false, "in range");
 800837a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800837e:	2b00      	cmp	r3, #0
 8008380:	bf14      	ite	ne
 8008382:	2301      	movne	r3, #1
 8008384:	2300      	moveq	r3, #0
 8008386:	b2db      	uxtb	r3, r3
 8008388:	f083 0301 	eor.w	r3, r3, #1
 800838c:	b2db      	uxtb	r3, r3
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	b2db      	uxtb	r3, r3
 8008394:	4992      	ldr	r1, [pc, #584]	; (80085e0 <rt_test_003_002_execute+0x280>)
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe ff2a 	bl	80071f0 <__test_assert>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f040 8118 	bne.w	80085d4 <rt_test_003_002_execute+0x274>
    b = chTimeIsInRangeX((systime_t)-1, (systime_t)0, (systime_t)0);
 80083a4:	2200      	movs	r2, #0
 80083a6:	2100      	movs	r1, #0
 80083a8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ac:	f7ff ff98 	bl	80082e0 <chTimeIsInRangeX.lto_priv.2>
 80083b0:	4603      	mov	r3, r0
 80083b2:	f88d 3007 	strb.w	r3, [sp, #7]
    test_assert(b == false, "in range");
 80083b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	bf14      	ite	ne
 80083be:	2301      	movne	r3, #1
 80083c0:	2300      	moveq	r3, #0
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	f083 0301 	eor.w	r3, r3, #1
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	4983      	ldr	r1, [pc, #524]	; (80085e0 <rt_test_003_002_execute+0x280>)
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fe ff0c 	bl	80071f0 <__test_assert>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f040 80fa 	bne.w	80085d4 <rt_test_003_002_execute+0x274>
    b = chTimeIsInRangeX((systime_t)0, (systime_t)-1, (systime_t)-1);
 80083e0:	f04f 32ff 	mov.w	r2, #4294967295
 80083e4:	f04f 31ff 	mov.w	r1, #4294967295
 80083e8:	2000      	movs	r0, #0
 80083ea:	f7ff ff79 	bl	80082e0 <chTimeIsInRangeX.lto_priv.2>
 80083ee:	4603      	mov	r3, r0
 80083f0:	f88d 3007 	strb.w	r3, [sp, #7]
    test_assert(b == false, "in range");
 80083f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	bf14      	ite	ne
 80083fc:	2301      	movne	r3, #1
 80083fe:	2300      	moveq	r3, #0
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f083 0301 	eor.w	r3, r3, #1
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	b2db      	uxtb	r3, r3
 800840e:	4974      	ldr	r1, [pc, #464]	; (80085e0 <rt_test_003_002_execute+0x280>)
 8008410:	4618      	mov	r0, r3
 8008412:	f7fe feed 	bl	80071f0 <__test_assert>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	f040 80db 	bne.w	80085d4 <rt_test_003_002_execute+0x274>
    b = chTimeIsInRangeX((systime_t)-1, (systime_t)-1, (systime_t)-1);
 800841e:	f04f 32ff 	mov.w	r2, #4294967295
 8008422:	f04f 31ff 	mov.w	r1, #4294967295
 8008426:	f04f 30ff 	mov.w	r0, #4294967295
 800842a:	f7ff ff59 	bl	80082e0 <chTimeIsInRangeX.lto_priv.2>
 800842e:	4603      	mov	r3, r0
 8008430:	f88d 3007 	strb.w	r3, [sp, #7]
    test_assert(b == false, "in range");
 8008434:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008438:	2b00      	cmp	r3, #0
 800843a:	bf14      	ite	ne
 800843c:	2301      	movne	r3, #1
 800843e:	2300      	moveq	r3, #0
 8008440:	b2db      	uxtb	r3, r3
 8008442:	f083 0301 	eor.w	r3, r3, #1
 8008446:	b2db      	uxtb	r3, r3
 8008448:	f003 0301 	and.w	r3, r3, #1
 800844c:	b2db      	uxtb	r3, r3
 800844e:	4964      	ldr	r1, [pc, #400]	; (80085e0 <rt_test_003_002_execute+0x280>)
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe fecd 	bl	80071f0 <__test_assert>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	f040 80bb 	bne.w	80085d4 <rt_test_003_002_execute+0x274>
  }
  test_end_step(1);

  /* [3.2.2] Checking boundaries for start < end.*/
  test_set_step(2);
 800845e:	4b5f      	ldr	r3, [pc, #380]	; (80085dc <rt_test_003_002_execute+0x27c>)
 8008460:	2202      	movs	r2, #2
 8008462:	601a      	str	r2, [r3, #0]
  {
    bool b;

    b = chTimeIsInRangeX((systime_t)10, (systime_t)10, (systime_t)100);
 8008464:	2264      	movs	r2, #100	; 0x64
 8008466:	210a      	movs	r1, #10
 8008468:	200a      	movs	r0, #10
 800846a:	f7ff ff39 	bl	80082e0 <chTimeIsInRangeX.lto_priv.2>
 800846e:	4603      	mov	r3, r0
 8008470:	f88d 3006 	strb.w	r3, [sp, #6]
    test_assert(b == true, "not in range");
 8008474:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008478:	495a      	ldr	r1, [pc, #360]	; (80085e4 <rt_test_003_002_execute+0x284>)
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe feb8 	bl	80071f0 <__test_assert>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	f040 80a6 	bne.w	80085d4 <rt_test_003_002_execute+0x274>
    b = chTimeIsInRangeX((systime_t)9, (systime_t)10, (systime_t)100);
 8008488:	2264      	movs	r2, #100	; 0x64
 800848a:	210a      	movs	r1, #10
 800848c:	2009      	movs	r0, #9
 800848e:	f7ff ff27 	bl	80082e0 <chTimeIsInRangeX.lto_priv.2>
 8008492:	4603      	mov	r3, r0
 8008494:	f88d 3006 	strb.w	r3, [sp, #6]
    test_assert(b == false, "in range");
 8008498:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800849c:	2b00      	cmp	r3, #0
 800849e:	bf14      	ite	ne
 80084a0:	2301      	movne	r3, #1
 80084a2:	2300      	moveq	r3, #0
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	f083 0301 	eor.w	r3, r3, #1
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	494b      	ldr	r1, [pc, #300]	; (80085e0 <rt_test_003_002_execute+0x280>)
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fe fe9b 	bl	80071f0 <__test_assert>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f040 8089 	bne.w	80085d4 <rt_test_003_002_execute+0x274>
    b = chTimeIsInRangeX((systime_t)99, (systime_t)10, (systime_t)100);
 80084c2:	2264      	movs	r2, #100	; 0x64
 80084c4:	210a      	movs	r1, #10
 80084c6:	2063      	movs	r0, #99	; 0x63
 80084c8:	f7ff ff0a 	bl	80082e0 <chTimeIsInRangeX.lto_priv.2>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f88d 3006 	strb.w	r3, [sp, #6]
    test_assert(b == true, "not in range");
 80084d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80084d6:	4943      	ldr	r1, [pc, #268]	; (80085e4 <rt_test_003_002_execute+0x284>)
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe fe89 	bl	80071f0 <__test_assert>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d177      	bne.n	80085d4 <rt_test_003_002_execute+0x274>
    b = chTimeIsInRangeX((systime_t)100, (systime_t)10, (systime_t)100);
 80084e4:	2264      	movs	r2, #100	; 0x64
 80084e6:	210a      	movs	r1, #10
 80084e8:	2064      	movs	r0, #100	; 0x64
 80084ea:	f7ff fef9 	bl	80082e0 <chTimeIsInRangeX.lto_priv.2>
 80084ee:	4603      	mov	r3, r0
 80084f0:	f88d 3006 	strb.w	r3, [sp, #6]
    test_assert(b == false, "in range");
 80084f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	bf14      	ite	ne
 80084fc:	2301      	movne	r3, #1
 80084fe:	2300      	moveq	r3, #0
 8008500:	b2db      	uxtb	r3, r3
 8008502:	f083 0301 	eor.w	r3, r3, #1
 8008506:	b2db      	uxtb	r3, r3
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	b2db      	uxtb	r3, r3
 800850e:	4934      	ldr	r1, [pc, #208]	; (80085e0 <rt_test_003_002_execute+0x280>)
 8008510:	4618      	mov	r0, r3
 8008512:	f7fe fe6d 	bl	80071f0 <__test_assert>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d15b      	bne.n	80085d4 <rt_test_003_002_execute+0x274>
  }
  test_end_step(2);

  /* [3.2.3] Checking boundaries for start > end.*/
  test_set_step(3);
 800851c:	4b2f      	ldr	r3, [pc, #188]	; (80085dc <rt_test_003_002_execute+0x27c>)
 800851e:	2203      	movs	r2, #3
 8008520:	601a      	str	r2, [r3, #0]
  {
    bool b;

    b = chTimeIsInRangeX((systime_t)100, (systime_t)100, (systime_t)10);
 8008522:	220a      	movs	r2, #10
 8008524:	2164      	movs	r1, #100	; 0x64
 8008526:	2064      	movs	r0, #100	; 0x64
 8008528:	f7ff feda 	bl	80082e0 <chTimeIsInRangeX.lto_priv.2>
 800852c:	4603      	mov	r3, r0
 800852e:	f88d 3005 	strb.w	r3, [sp, #5]
    test_assert(b == true, "not in range");
 8008532:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008536:	492b      	ldr	r1, [pc, #172]	; (80085e4 <rt_test_003_002_execute+0x284>)
 8008538:	4618      	mov	r0, r3
 800853a:	f7fe fe59 	bl	80071f0 <__test_assert>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d147      	bne.n	80085d4 <rt_test_003_002_execute+0x274>
    b = chTimeIsInRangeX((systime_t)99, (systime_t)100, (systime_t)10);
 8008544:	220a      	movs	r2, #10
 8008546:	2164      	movs	r1, #100	; 0x64
 8008548:	2063      	movs	r0, #99	; 0x63
 800854a:	f7ff fec9 	bl	80082e0 <chTimeIsInRangeX.lto_priv.2>
 800854e:	4603      	mov	r3, r0
 8008550:	f88d 3005 	strb.w	r3, [sp, #5]
    test_assert(b == false, "in range");
 8008554:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008558:	2b00      	cmp	r3, #0
 800855a:	bf14      	ite	ne
 800855c:	2301      	movne	r3, #1
 800855e:	2300      	moveq	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	f083 0301 	eor.w	r3, r3, #1
 8008566:	b2db      	uxtb	r3, r3
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	b2db      	uxtb	r3, r3
 800856e:	491c      	ldr	r1, [pc, #112]	; (80085e0 <rt_test_003_002_execute+0x280>)
 8008570:	4618      	mov	r0, r3
 8008572:	f7fe fe3d 	bl	80071f0 <__test_assert>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d12b      	bne.n	80085d4 <rt_test_003_002_execute+0x274>
    b = chTimeIsInRangeX((systime_t)9, (systime_t)100, (systime_t)10);
 800857c:	220a      	movs	r2, #10
 800857e:	2164      	movs	r1, #100	; 0x64
 8008580:	2009      	movs	r0, #9
 8008582:	f7ff fead 	bl	80082e0 <chTimeIsInRangeX.lto_priv.2>
 8008586:	4603      	mov	r3, r0
 8008588:	f88d 3005 	strb.w	r3, [sp, #5]
    test_assert(b == true, "not in range");
 800858c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008590:	4914      	ldr	r1, [pc, #80]	; (80085e4 <rt_test_003_002_execute+0x284>)
 8008592:	4618      	mov	r0, r3
 8008594:	f7fe fe2c 	bl	80071f0 <__test_assert>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d11a      	bne.n	80085d4 <rt_test_003_002_execute+0x274>
    b = chTimeIsInRangeX((systime_t)10, (systime_t)100, (systime_t)10);
 800859e:	220a      	movs	r2, #10
 80085a0:	2164      	movs	r1, #100	; 0x64
 80085a2:	200a      	movs	r0, #10
 80085a4:	f7ff fe9c 	bl	80082e0 <chTimeIsInRangeX.lto_priv.2>
 80085a8:	4603      	mov	r3, r0
 80085aa:	f88d 3005 	strb.w	r3, [sp, #5]
    test_assert(b == false, "in range");
 80085ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	bf14      	ite	ne
 80085b6:	2301      	movne	r3, #1
 80085b8:	2300      	moveq	r3, #0
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	f083 0301 	eor.w	r3, r3, #1
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	4905      	ldr	r1, [pc, #20]	; (80085e0 <rt_test_003_002_execute+0x280>)
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fe10 	bl	80071f0 <__test_assert>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
  }
  test_end_step(3);
}
 80085d4:	b003      	add	sp, #12
 80085d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80085da:	bf00      	nop
 80085dc:	20000c6c 	.word	0x20000c6c
 80085e0:	0801e05c 	.word	0x0801e05c
 80085e4:	0801e058 	.word	0x0801e058
	...

080085f0 <chTimeAddX.lto_priv.1>:
                                   sysinterval_t interval) {
 80085f0:	b082      	sub	sp, #8
 80085f2:	9001      	str	r0, [sp, #4]
 80085f4:	9100      	str	r1, [sp, #0]
  return systime + (systime_t)interval;
 80085f6:	9a01      	ldr	r2, [sp, #4]
 80085f8:	9b00      	ldr	r3, [sp, #0]
 80085fa:	4413      	add	r3, r2
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	b002      	add	sp, #8
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
	...

08008610 <chTimeIsInRangeX.lto_priv.3>:
                                    systime_t end) {
 8008610:	b084      	sub	sp, #16
 8008612:	9003      	str	r0, [sp, #12]
 8008614:	9102      	str	r1, [sp, #8]
 8008616:	9201      	str	r2, [sp, #4]
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8008618:	9a03      	ldr	r2, [sp, #12]
 800861a:	9b02      	ldr	r3, [sp, #8]
 800861c:	1ad2      	subs	r2, r2, r3
                (systime_t)((systime_t)end - (systime_t)start));
 800861e:	9901      	ldr	r1, [sp, #4]
 8008620:	9b02      	ldr	r3, [sp, #8]
 8008622:	1acb      	subs	r3, r1, r3
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8008624:	429a      	cmp	r2, r3
 8008626:	bf34      	ite	cc
 8008628:	2301      	movcc	r3, #1
 800862a:	2300      	movcs	r3, #0
 800862c:	b2db      	uxtb	r3, r3
}
 800862e:	4618      	mov	r0, r3
 8008630:	b004      	add	sp, #16
 8008632:	4770      	bx	lr
	...

08008640 <port_timer_get_time.lto_priv.6>:
static inline systime_t port_timer_get_time(void) {
 8008640:	b508      	push	{r3, lr}
  return stGetCounter();
 8008642:	f7f7 ff4d 	bl	80004e0 <stGetCounter>
 8008646:	4603      	mov	r3, r0
}
 8008648:	4618      	mov	r0, r3
 800864a:	bd08      	pop	{r3, pc}
 800864c:	0000      	movs	r0, r0
	...

08008650 <chSysLock.lto_priv.20>:
static inline void chSysLock(void) {
 8008650:	b082      	sub	sp, #8
 8008652:	2330      	movs	r3, #48	; 0x30
 8008654:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008656:	9b01      	ldr	r3, [sp, #4]
 8008658:	f383 8811 	msr	BASEPRI, r3
}
 800865c:	bf00      	nop
}
 800865e:	bf00      	nop
}
 8008660:	bf00      	nop
 8008662:	b002      	add	sp, #8
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
	...

08008670 <chSysUnlock.lto_priv.20>:
static inline void chSysUnlock(void) {
 8008670:	b082      	sub	sp, #8
 8008672:	2300      	movs	r3, #0
 8008674:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	f383 8811 	msr	BASEPRI, r3
}
 800867c:	bf00      	nop
}
 800867e:	bf00      	nop
}
 8008680:	bf00      	nop
 8008682:	b002      	add	sp, #8
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
	...

08008690 <chVTGetSystemTimeX.lto_priv.6>:
static inline systime_t chVTGetSystemTimeX(void) {
 8008690:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8008692:	f7ff ffd5 	bl	8008640 <port_timer_get_time.lto_priv.6>
 8008696:	4603      	mov	r3, r0
}
 8008698:	4618      	mov	r0, r3
 800869a:	bd08      	pop	{r3, pc}
 800869c:	0000      	movs	r0, r0
	...

080086a0 <chVTIsSystemTimeWithinX.lto_priv.0>:
static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 80086a0:	b500      	push	{lr}
 80086a2:	b083      	sub	sp, #12
 80086a4:	9001      	str	r0, [sp, #4]
 80086a6:	9100      	str	r1, [sp, #0]
  return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 80086a8:	f7ff fff2 	bl	8008690 <chVTGetSystemTimeX.lto_priv.6>
 80086ac:	4603      	mov	r3, r0
 80086ae:	9a00      	ldr	r2, [sp, #0]
 80086b0:	9901      	ldr	r1, [sp, #4]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff ffac 	bl	8008610 <chTimeIsInRangeX.lto_priv.3>
 80086b8:	4603      	mov	r3, r0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	b003      	add	sp, #12
 80086be:	f85d fb04 	ldr.w	pc, [sp], #4
 80086c2:	bf00      	nop
	...

080086d0 <chVTGetTimeStamp>:
static inline systimestamp_t chVTGetTimeStamp(void) {
 80086d0:	b500      	push	{lr}
 80086d2:	b083      	sub	sp, #12
  chSysLock();
 80086d4:	f7ff ffbc 	bl	8008650 <chSysLock.lto_priv.20>
  stamp = chVTGetTimeStampI();
 80086d8:	f7f9 ffaa 	bl	8002630 <chVTGetTimeStampI>
 80086dc:	e9cd 0100 	strd	r0, r1, [sp]
  chSysUnlock();
 80086e0:	f7ff ffc6 	bl	8008670 <chSysUnlock.lto_priv.20>
  return stamp;
 80086e4:	e9dd 2300 	ldrd	r2, r3, [sp]
}
 80086e8:	4610      	mov	r0, r2
 80086ea:	4619      	mov	r1, r3
 80086ec:	b003      	add	sp, #12
 80086ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80086f2:	bf00      	nop
	...

08008700 <rt_test_004_001_execute>:
 * <h2>Test Steps</h2>
 * - [4.1.1] Time stamps are generated and checked for monotonicity.
 * .
 */

static void rt_test_004_001_execute(void) {
 8008700:	b500      	push	{lr}
 8008702:	b089      	sub	sp, #36	; 0x24

  /* [4.1.1] Time stamps are generated and checked for monotonicity.*/
  test_set_step(1);
 8008704:	4b1e      	ldr	r3, [pc, #120]	; (8008780 <rt_test_004_001_execute+0x80>)
 8008706:	2201      	movs	r2, #1
 8008708:	601a      	str	r2, [r3, #0]
  {
    systime_t start, end;
    systimestamp_t last, now;
    sysinterval_t duration;

    last = chVTGetTimeStamp();
 800870a:	f7ff ffe1 	bl	80086d0 <chVTGetTimeStamp>
 800870e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    start = test_wait_tick();
 8008712:	f7ff f965 	bl	80079e0 <test_wait_tick>
 8008716:	9004      	str	r0, [sp, #16]
    duration = (sysinterval_t)(TIME_MAX_SYSTIME / 2U);
 8008718:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800871c:	9305      	str	r3, [sp, #20]
    if (duration > TIME_MS2I(1000)) {
 800871e:	9b05      	ldr	r3, [sp, #20]
 8008720:	f242 7210 	movw	r2, #10000	; 0x2710
 8008724:	4293      	cmp	r3, r2
 8008726:	d902      	bls.n	800872e <rt_test_004_001_execute+0x2e>
      duration = TIME_MS2I(1000);
 8008728:	f242 7310 	movw	r3, #10000	; 0x2710
 800872c:	9305      	str	r3, [sp, #20]
    }
    end = chTimeAddX(start, duration);
 800872e:	9905      	ldr	r1, [sp, #20]
 8008730:	9804      	ldr	r0, [sp, #16]
 8008732:	f7ff ff5d 	bl	80085f0 <chTimeAddX.lto_priv.1>
 8008736:	9003      	str	r0, [sp, #12]
    do {
      now = chVTGetTimeStamp();
 8008738:	f7ff ffca 	bl	80086d0 <chVTGetTimeStamp>
 800873c:	e9cd 0100 	strd	r0, r1, [sp]
      test_assert(last <= now, "not monotonic");
 8008740:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008744:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008748:	4290      	cmp	r0, r2
 800874a:	eb71 0303 	sbcs.w	r3, r1, r3
 800874e:	bf2c      	ite	cs
 8008750:	2301      	movcs	r3, #1
 8008752:	2300      	movcc	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	490b      	ldr	r1, [pc, #44]	; (8008784 <rt_test_004_001_execute+0x84>)
 8008758:	4618      	mov	r0, r3
 800875a:	f7fe fd49 	bl	80071f0 <__test_assert>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10a      	bne.n	800877a <rt_test_004_001_execute+0x7a>
      last = now;
 8008764:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008768:	e9cd 2306 	strd	r2, r3, [sp, #24]
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 800876c:	9903      	ldr	r1, [sp, #12]
 800876e:	9804      	ldr	r0, [sp, #16]
 8008770:	f7ff ff96 	bl	80086a0 <chVTIsSystemTimeWithinX.lto_priv.0>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1de      	bne.n	8008738 <rt_test_004_001_execute+0x38>
  }
  test_end_step(1);
}
 800877a:	b009      	add	sp, #36	; 0x24
 800877c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008780:	20000c6c 	.word	0x20000c6c
 8008784:	0801e08c 	.word	0x0801e08c
	...

08008790 <chTimeAddX.lto_priv.2>:
                                   sysinterval_t interval) {
 8008790:	b082      	sub	sp, #8
 8008792:	9001      	str	r0, [sp, #4]
 8008794:	9100      	str	r1, [sp, #0]
  return systime + (systime_t)interval;
 8008796:	9a01      	ldr	r2, [sp, #4]
 8008798:	9b00      	ldr	r3, [sp, #0]
 800879a:	4413      	add	r3, r2
}
 800879c:	4618      	mov	r0, r3
 800879e:	b002      	add	sp, #8
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
	...

080087b0 <port_timer_get_time.lto_priv.7>:
static inline systime_t port_timer_get_time(void) {
 80087b0:	b508      	push	{r3, lr}
  return stGetCounter();
 80087b2:	f7f7 fe95 	bl	80004e0 <stGetCounter>
 80087b6:	4603      	mov	r3, r0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	bd08      	pop	{r3, pc}
 80087bc:	0000      	movs	r0, r0
	...

080087c0 <chSysLock.lto_priv.21>:
static inline void chSysLock(void) {
 80087c0:	b082      	sub	sp, #8
 80087c2:	2330      	movs	r3, #48	; 0x30
 80087c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80087c6:	9b01      	ldr	r3, [sp, #4]
 80087c8:	f383 8811 	msr	BASEPRI, r3
}
 80087cc:	bf00      	nop
}
 80087ce:	bf00      	nop
}
 80087d0:	bf00      	nop
 80087d2:	b002      	add	sp, #8
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
	...

080087e0 <chSysUnlock.lto_priv.21>:
static inline void chSysUnlock(void) {
 80087e0:	b082      	sub	sp, #8
 80087e2:	2300      	movs	r3, #0
 80087e4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	f383 8811 	msr	BASEPRI, r3
}
 80087ec:	bf00      	nop
}
 80087ee:	bf00      	nop
}
 80087f0:	bf00      	nop
 80087f2:	b002      	add	sp, #8
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
	...

08008800 <chVTGetSystemTimeX.lto_priv.7>:
static inline systime_t chVTGetSystemTimeX(void) {
 8008800:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8008802:	f7ff ffd5 	bl	80087b0 <port_timer_get_time.lto_priv.7>
 8008806:	4603      	mov	r3, r0
}
 8008808:	4618      	mov	r0, r3
 800880a:	bd08      	pop	{r3, pc}
 800880c:	0000      	movs	r0, r0
	...

08008810 <chThdGetSelfX.lto_priv.6>:
  return __sch_get_currthread();
 8008810:	4b01      	ldr	r3, [pc, #4]	; (8008818 <chThdGetSelfX.lto_priv.6+0x8>)
 8008812:	68db      	ldr	r3, [r3, #12]
}
 8008814:	4618      	mov	r0, r3
 8008816:	4770      	bx	lr
 8008818:	20000a48 	.word	0x20000a48
 800881c:	00000000 	.word	0x00000000

08008820 <chThdGetPriorityX.lto_priv.0>:
static inline tprio_t chThdGetPriorityX(void) {
 8008820:	b508      	push	{r3, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 8008822:	f7ff fff5 	bl	8008810 <chThdGetSelfX.lto_priv.6>
 8008826:	4603      	mov	r3, r0
 8008828:	689b      	ldr	r3, [r3, #8]
}
 800882a:	4618      	mov	r0, r3
 800882c:	bd08      	pop	{r3, pc}
 800882e:	bf00      	nop

08008830 <thread>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {
 8008830:	b500      	push	{lr}
 8008832:	b083      	sub	sp, #12
 8008834:	9001      	str	r0, [sp, #4]

  test_emit_token(*(char *)p);
 8008836:	9b01      	ldr	r3, [sp, #4]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe fd38 	bl	80072b0 <test_emit_token>
}
 8008840:	bf00      	nop
 8008842:	b003      	add	sp, #12
 8008844:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008850 <rt_test_005_001_execute>:
 * - [5.1.5] Function chThdSleepUntil() is tested with a timeline of
 *   "now" + 100 ticks.
 * .
 */

static void rt_test_005_001_execute(void) {
 8008850:	b510      	push	{r4, lr}
 8008852:	b082      	sub	sp, #8
  systime_t time;

  /* [5.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 8008854:	4b4a      	ldr	r3, [pc, #296]	; (8008980 <rt_test_005_001_execute+0x130>)
 8008856:	2201      	movs	r2, #1
 8008858:	601a      	str	r2, [r3, #0]
  {
    time = chVTGetSystemTimeX();
 800885a:	f7ff ffd1 	bl	8008800 <chVTGetSystemTimeX.lto_priv.7>
 800885e:	9001      	str	r0, [sp, #4]
    chThdSleep(100);
 8008860:	2064      	movs	r0, #100	; 0x64
 8008862:	f7fa fde5 	bl	8003430 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, 100),
 8008866:	2164      	movs	r1, #100	; 0x64
 8008868:	9801      	ldr	r0, [sp, #4]
 800886a:	f7ff ff91 	bl	8008790 <chTimeAddX.lto_priv.2>
 800886e:	4604      	mov	r4, r0
 8008870:	2167      	movs	r1, #103	; 0x67
 8008872:	9801      	ldr	r0, [sp, #4]
 8008874:	f7ff ff8c 	bl	8008790 <chTimeAddX.lto_priv.2>
 8008878:	4603      	mov	r3, r0
 800887a:	4a42      	ldr	r2, [pc, #264]	; (8008984 <rt_test_005_001_execute+0x134>)
 800887c:	4619      	mov	r1, r3
 800887e:	4620      	mov	r0, r4
 8008880:	f7fe fcfe 	bl	8007280 <__test_assert_time_window>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d178      	bne.n	800897c <rt_test_005_001_execute+0x12c>
  test_end_step(1);

  /* [5.1.2] The current system time is read then a sleep is performed
     for 100000 microseconds and on exit the system time is verified
     again.*/
  test_set_step(2);
 800888a:	4b3d      	ldr	r3, [pc, #244]	; (8008980 <rt_test_005_001_execute+0x130>)
 800888c:	2202      	movs	r2, #2
 800888e:	601a      	str	r2, [r3, #0]
  {
    time = chVTGetSystemTimeX();
 8008890:	f7ff ffb6 	bl	8008800 <chVTGetSystemTimeX.lto_priv.7>
 8008894:	9001      	str	r0, [sp, #4]
    chThdSleepMicroseconds(100000);
 8008896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800889a:	f7fa fdc9 	bl	8003430 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
 800889e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80088a2:	9801      	ldr	r0, [sp, #4]
 80088a4:	f7ff ff74 	bl	8008790 <chTimeAddX.lto_priv.2>
 80088a8:	4604      	mov	r4, r0
 80088aa:	f240 31eb 	movw	r1, #1003	; 0x3eb
 80088ae:	9801      	ldr	r0, [sp, #4]
 80088b0:	f7ff ff6e 	bl	8008790 <chTimeAddX.lto_priv.2>
 80088b4:	4603      	mov	r3, r0
 80088b6:	4a33      	ldr	r2, [pc, #204]	; (8008984 <rt_test_005_001_execute+0x134>)
 80088b8:	4619      	mov	r1, r3
 80088ba:	4620      	mov	r0, r4
 80088bc:	f7fe fce0 	bl	8007280 <__test_assert_time_window>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d15a      	bne.n	800897c <rt_test_005_001_execute+0x12c>
  test_end_step(2);

  /* [5.1.3] The current system time is read then a sleep is performed
     for 100 milliseconds and on exit the system time is verified
     again.*/
  test_set_step(3);
 80088c6:	4b2e      	ldr	r3, [pc, #184]	; (8008980 <rt_test_005_001_execute+0x130>)
 80088c8:	2203      	movs	r2, #3
 80088ca:	601a      	str	r2, [r3, #0]
  {
    time = chVTGetSystemTimeX();
 80088cc:	f7ff ff98 	bl	8008800 <chVTGetSystemTimeX.lto_priv.7>
 80088d0:	9001      	str	r0, [sp, #4]
    chThdSleepMilliseconds(100);
 80088d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088d6:	f7fa fdab 	bl	8003430 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
 80088da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80088de:	9801      	ldr	r0, [sp, #4]
 80088e0:	f7ff ff56 	bl	8008790 <chTimeAddX.lto_priv.2>
 80088e4:	4604      	mov	r4, r0
 80088e6:	f240 31eb 	movw	r1, #1003	; 0x3eb
 80088ea:	9801      	ldr	r0, [sp, #4]
 80088ec:	f7ff ff50 	bl	8008790 <chTimeAddX.lto_priv.2>
 80088f0:	4603      	mov	r3, r0
 80088f2:	4a24      	ldr	r2, [pc, #144]	; (8008984 <rt_test_005_001_execute+0x134>)
 80088f4:	4619      	mov	r1, r3
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7fe fcc2 	bl	8007280 <__test_assert_time_window>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d13c      	bne.n	800897c <rt_test_005_001_execute+0x12c>
  }
  test_end_step(3);

  /* [5.1.4] The current system time is read then a sleep is performed
     for 1 second and on exit the system time is verified again.*/
  test_set_step(4);
 8008902:	4b1f      	ldr	r3, [pc, #124]	; (8008980 <rt_test_005_001_execute+0x130>)
 8008904:	2204      	movs	r2, #4
 8008906:	601a      	str	r2, [r3, #0]
  {
    time = chVTGetSystemTimeX();
 8008908:	f7ff ff7a 	bl	8008800 <chVTGetSystemTimeX.lto_priv.7>
 800890c:	9001      	str	r0, [sp, #4]
    chThdSleepSeconds(1);
 800890e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008912:	f7fa fd8d 	bl	8003430 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
 8008916:	f242 7110 	movw	r1, #10000	; 0x2710
 800891a:	9801      	ldr	r0, [sp, #4]
 800891c:	f7ff ff38 	bl	8008790 <chTimeAddX.lto_priv.2>
 8008920:	4604      	mov	r4, r0
 8008922:	f242 7113 	movw	r1, #10003	; 0x2713
 8008926:	9801      	ldr	r0, [sp, #4]
 8008928:	f7ff ff32 	bl	8008790 <chTimeAddX.lto_priv.2>
 800892c:	4603      	mov	r3, r0
 800892e:	4a15      	ldr	r2, [pc, #84]	; (8008984 <rt_test_005_001_execute+0x134>)
 8008930:	4619      	mov	r1, r3
 8008932:	4620      	mov	r0, r4
 8008934:	f7fe fca4 	bl	8007280 <__test_assert_time_window>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d11e      	bne.n	800897c <rt_test_005_001_execute+0x12c>
  }
  test_end_step(4);

  /* [5.1.5] Function chThdSleepUntil() is tested with a timeline of
     "now" + 100 ticks.*/
  test_set_step(5);
 800893e:	4b10      	ldr	r3, [pc, #64]	; (8008980 <rt_test_005_001_execute+0x130>)
 8008940:	2205      	movs	r2, #5
 8008942:	601a      	str	r2, [r3, #0]
  {
    time = chVTGetSystemTimeX();
 8008944:	f7ff ff5c 	bl	8008800 <chVTGetSystemTimeX.lto_priv.7>
 8008948:	9001      	str	r0, [sp, #4]
    chThdSleepUntil(chTimeAddX(time, 100));
 800894a:	2164      	movs	r1, #100	; 0x64
 800894c:	9801      	ldr	r0, [sp, #4]
 800894e:	f7ff ff1f 	bl	8008790 <chTimeAddX.lto_priv.2>
 8008952:	4603      	mov	r3, r0
 8008954:	4618      	mov	r0, r3
 8008956:	f7fa fd7b 	bl	8003450 <chThdSleepUntil>
    test_assert_time_window(chTimeAddX(time, 100),
 800895a:	2164      	movs	r1, #100	; 0x64
 800895c:	9801      	ldr	r0, [sp, #4]
 800895e:	f7ff ff17 	bl	8008790 <chTimeAddX.lto_priv.2>
 8008962:	4604      	mov	r4, r0
 8008964:	2167      	movs	r1, #103	; 0x67
 8008966:	9801      	ldr	r0, [sp, #4]
 8008968:	f7ff ff12 	bl	8008790 <chTimeAddX.lto_priv.2>
 800896c:	4603      	mov	r3, r0
 800896e:	4a05      	ldr	r2, [pc, #20]	; (8008984 <rt_test_005_001_execute+0x134>)
 8008970:	4619      	mov	r1, r3
 8008972:	4620      	mov	r0, r4
 8008974:	f7fe fc84 	bl	8007280 <__test_assert_time_window>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
                            chTimeAddX(time, 100 + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
  }
  test_end_step(5);
}
 800897c:	b002      	add	sp, #8
 800897e:	bd10      	pop	{r4, pc}
 8008980:	20000c6c 	.word	0x20000c6c
 8008984:	0801e0bc 	.word	0x0801e0bc
	...

08008990 <rt_test_005_002_execute>:
 * - [5.2.3] Creating 5 threads with pseudo-random priority, execution
 *   sequence is tested.
 * .
 */

static void rt_test_005_002_execute(void) {
 8008990:	b510      	push	{r4, lr}
 8008992:	b082      	sub	sp, #8

  /* [5.2.1] Creating 5 threads with increasing priority, execution
     sequence is tested.*/
  test_set_step(1);
 8008994:	4b92      	ldr	r3, [pc, #584]	; (8008be0 <rt_test_005_002_execute+0x250>)
 8008996:	2201      	movs	r2, #1
 8008998:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800899a:	4b92      	ldr	r3, [pc, #584]	; (8008be4 <rt_test_005_002_execute+0x254>)
 800899c:	681c      	ldr	r4, [r3, #0]
 800899e:	f7ff ff3f 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 80089a2:	4603      	mov	r3, r0
 80089a4:	1f5a      	subs	r2, r3, #5
 80089a6:	4b90      	ldr	r3, [pc, #576]	; (8008be8 <rt_test_005_002_execute+0x258>)
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	4b90      	ldr	r3, [pc, #576]	; (8008bec <rt_test_005_002_execute+0x25c>)
 80089ac:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80089b0:	4620      	mov	r0, r4
 80089b2:	f7fa fbfd 	bl	80031b0 <chThdCreateStatic>
 80089b6:	4603      	mov	r3, r0
 80089b8:	4a8d      	ldr	r2, [pc, #564]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 80089ba:	6013      	str	r3, [r2, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80089bc:	4b89      	ldr	r3, [pc, #548]	; (8008be4 <rt_test_005_002_execute+0x254>)
 80089be:	685c      	ldr	r4, [r3, #4]
 80089c0:	f7ff ff2e 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 80089c4:	4603      	mov	r3, r0
 80089c6:	1f1a      	subs	r2, r3, #4
 80089c8:	4b8a      	ldr	r3, [pc, #552]	; (8008bf4 <rt_test_005_002_execute+0x264>)
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	4b87      	ldr	r3, [pc, #540]	; (8008bec <rt_test_005_002_execute+0x25c>)
 80089ce:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80089d2:	4620      	mov	r0, r4
 80089d4:	f7fa fbec 	bl	80031b0 <chThdCreateStatic>
 80089d8:	4603      	mov	r3, r0
 80089da:	4a85      	ldr	r2, [pc, #532]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 80089dc:	6053      	str	r3, [r2, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80089de:	4b81      	ldr	r3, [pc, #516]	; (8008be4 <rt_test_005_002_execute+0x254>)
 80089e0:	689c      	ldr	r4, [r3, #8]
 80089e2:	f7ff ff1d 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 80089e6:	4603      	mov	r3, r0
 80089e8:	1eda      	subs	r2, r3, #3
 80089ea:	4b83      	ldr	r3, [pc, #524]	; (8008bf8 <rt_test_005_002_execute+0x268>)
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	4b7f      	ldr	r3, [pc, #508]	; (8008bec <rt_test_005_002_execute+0x25c>)
 80089f0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80089f4:	4620      	mov	r0, r4
 80089f6:	f7fa fbdb 	bl	80031b0 <chThdCreateStatic>
 80089fa:	4603      	mov	r3, r0
 80089fc:	4a7c      	ldr	r2, [pc, #496]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 80089fe:	6093      	str	r3, [r2, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008a00:	4b78      	ldr	r3, [pc, #480]	; (8008be4 <rt_test_005_002_execute+0x254>)
 8008a02:	68dc      	ldr	r4, [r3, #12]
 8008a04:	f7ff ff0c 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	1e9a      	subs	r2, r3, #2
 8008a0c:	4b7b      	ldr	r3, [pc, #492]	; (8008bfc <rt_test_005_002_execute+0x26c>)
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	4b76      	ldr	r3, [pc, #472]	; (8008bec <rt_test_005_002_execute+0x25c>)
 8008a12:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008a16:	4620      	mov	r0, r4
 8008a18:	f7fa fbca 	bl	80031b0 <chThdCreateStatic>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	4a74      	ldr	r2, [pc, #464]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 8008a20:	60d3      	str	r3, [r2, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008a22:	4b70      	ldr	r3, [pc, #448]	; (8008be4 <rt_test_005_002_execute+0x254>)
 8008a24:	691c      	ldr	r4, [r3, #16]
 8008a26:	f7ff fefb 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	1e5a      	subs	r2, r3, #1
 8008a2e:	4b74      	ldr	r3, [pc, #464]	; (8008c00 <rt_test_005_002_execute+0x270>)
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	4b6e      	ldr	r3, [pc, #440]	; (8008bec <rt_test_005_002_execute+0x25c>)
 8008a34:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f7fa fbb9 	bl	80031b0 <chThdCreateStatic>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	4a6b      	ldr	r2, [pc, #428]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 8008a42:	6113      	str	r3, [r2, #16]
    test_wait_threads();
 8008a44:	f7fe ffa4 	bl	8007990 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008a48:	496e      	ldr	r1, [pc, #440]	; (8008c04 <rt_test_005_002_execute+0x274>)
 8008a4a:	486f      	ldr	r0, [pc, #444]	; (8008c08 <rt_test_005_002_execute+0x278>)
 8008a4c:	f7fe fbe8 	bl	8007220 <__test_assert_sequence>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f040 80c1 	bne.w	8008bda <rt_test_005_002_execute+0x24a>
  }
  test_end_step(1);

  /* [5.2.2] Creating 5 threads with decreasing priority, execution
     sequence is tested.*/
  test_set_step(2);
 8008a58:	4b61      	ldr	r3, [pc, #388]	; (8008be0 <rt_test_005_002_execute+0x250>)
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	601a      	str	r2, [r3, #0]
  {
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008a5e:	4b61      	ldr	r3, [pc, #388]	; (8008be4 <rt_test_005_002_execute+0x254>)
 8008a60:	691c      	ldr	r4, [r3, #16]
 8008a62:	f7ff fedd 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008a66:	4603      	mov	r3, r0
 8008a68:	1e5a      	subs	r2, r3, #1
 8008a6a:	4b65      	ldr	r3, [pc, #404]	; (8008c00 <rt_test_005_002_execute+0x270>)
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	4b5f      	ldr	r3, [pc, #380]	; (8008bec <rt_test_005_002_execute+0x25c>)
 8008a70:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008a74:	4620      	mov	r0, r4
 8008a76:	f7fa fb9b 	bl	80031b0 <chThdCreateStatic>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	4a5c      	ldr	r2, [pc, #368]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 8008a7e:	6113      	str	r3, [r2, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008a80:	4b58      	ldr	r3, [pc, #352]	; (8008be4 <rt_test_005_002_execute+0x254>)
 8008a82:	68dc      	ldr	r4, [r3, #12]
 8008a84:	f7ff fecc 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	1e9a      	subs	r2, r3, #2
 8008a8c:	4b5b      	ldr	r3, [pc, #364]	; (8008bfc <rt_test_005_002_execute+0x26c>)
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	4b56      	ldr	r3, [pc, #344]	; (8008bec <rt_test_005_002_execute+0x25c>)
 8008a92:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008a96:	4620      	mov	r0, r4
 8008a98:	f7fa fb8a 	bl	80031b0 <chThdCreateStatic>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	4a54      	ldr	r2, [pc, #336]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 8008aa0:	60d3      	str	r3, [r2, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008aa2:	4b50      	ldr	r3, [pc, #320]	; (8008be4 <rt_test_005_002_execute+0x254>)
 8008aa4:	689c      	ldr	r4, [r3, #8]
 8008aa6:	f7ff febb 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	1eda      	subs	r2, r3, #3
 8008aae:	4b52      	ldr	r3, [pc, #328]	; (8008bf8 <rt_test_005_002_execute+0x268>)
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	4b4e      	ldr	r3, [pc, #312]	; (8008bec <rt_test_005_002_execute+0x25c>)
 8008ab4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f7fa fb79 	bl	80031b0 <chThdCreateStatic>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	4a4b      	ldr	r2, [pc, #300]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 8008ac2:	6093      	str	r3, [r2, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008ac4:	4b47      	ldr	r3, [pc, #284]	; (8008be4 <rt_test_005_002_execute+0x254>)
 8008ac6:	685c      	ldr	r4, [r3, #4]
 8008ac8:	f7ff feaa 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008acc:	4603      	mov	r3, r0
 8008ace:	1f1a      	subs	r2, r3, #4
 8008ad0:	4b48      	ldr	r3, [pc, #288]	; (8008bf4 <rt_test_005_002_execute+0x264>)
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	4b45      	ldr	r3, [pc, #276]	; (8008bec <rt_test_005_002_execute+0x25c>)
 8008ad6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008ada:	4620      	mov	r0, r4
 8008adc:	f7fa fb68 	bl	80031b0 <chThdCreateStatic>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	4a43      	ldr	r2, [pc, #268]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 8008ae4:	6053      	str	r3, [r2, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008ae6:	4b3f      	ldr	r3, [pc, #252]	; (8008be4 <rt_test_005_002_execute+0x254>)
 8008ae8:	681c      	ldr	r4, [r3, #0]
 8008aea:	f7ff fe99 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008aee:	4603      	mov	r3, r0
 8008af0:	1f5a      	subs	r2, r3, #5
 8008af2:	4b3d      	ldr	r3, [pc, #244]	; (8008be8 <rt_test_005_002_execute+0x258>)
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	4b3d      	ldr	r3, [pc, #244]	; (8008bec <rt_test_005_002_execute+0x25c>)
 8008af8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008afc:	4620      	mov	r0, r4
 8008afe:	f7fa fb57 	bl	80031b0 <chThdCreateStatic>
 8008b02:	4603      	mov	r3, r0
 8008b04:	4a3a      	ldr	r2, [pc, #232]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 8008b06:	6013      	str	r3, [r2, #0]
    test_wait_threads();
 8008b08:	f7fe ff42 	bl	8007990 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008b0c:	493d      	ldr	r1, [pc, #244]	; (8008c04 <rt_test_005_002_execute+0x274>)
 8008b0e:	483e      	ldr	r0, [pc, #248]	; (8008c08 <rt_test_005_002_execute+0x278>)
 8008b10:	f7fe fb86 	bl	8007220 <__test_assert_sequence>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d15f      	bne.n	8008bda <rt_test_005_002_execute+0x24a>
  }
  test_end_step(2);

  /* [5.2.3] Creating 5 threads with pseudo-random priority, execution
     sequence is tested.*/
  test_set_step(3);
 8008b1a:	4b31      	ldr	r3, [pc, #196]	; (8008be0 <rt_test_005_002_execute+0x250>)
 8008b1c:	2203      	movs	r2, #3
 8008b1e:	601a      	str	r2, [r3, #0]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8008b20:	4b30      	ldr	r3, [pc, #192]	; (8008be4 <rt_test_005_002_execute+0x254>)
 8008b22:	685c      	ldr	r4, [r3, #4]
 8008b24:	f7ff fe7c 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	1f1a      	subs	r2, r3, #4
 8008b2c:	4b31      	ldr	r3, [pc, #196]	; (8008bf4 <rt_test_005_002_execute+0x264>)
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	4b2e      	ldr	r3, [pc, #184]	; (8008bec <rt_test_005_002_execute+0x25c>)
 8008b32:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008b36:	4620      	mov	r0, r4
 8008b38:	f7fa fb3a 	bl	80031b0 <chThdCreateStatic>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	4a2c      	ldr	r2, [pc, #176]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 8008b40:	6053      	str	r3, [r2, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8008b42:	4b28      	ldr	r3, [pc, #160]	; (8008be4 <rt_test_005_002_execute+0x254>)
 8008b44:	681c      	ldr	r4, [r3, #0]
 8008b46:	f7ff fe6b 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	1f5a      	subs	r2, r3, #5
 8008b4e:	4b26      	ldr	r3, [pc, #152]	; (8008be8 <rt_test_005_002_execute+0x258>)
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	4b26      	ldr	r3, [pc, #152]	; (8008bec <rt_test_005_002_execute+0x25c>)
 8008b54:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f7fa fb29 	bl	80031b0 <chThdCreateStatic>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	4a23      	ldr	r2, [pc, #140]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 8008b62:	6013      	str	r3, [r2, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8008b64:	4b1f      	ldr	r3, [pc, #124]	; (8008be4 <rt_test_005_002_execute+0x254>)
 8008b66:	691c      	ldr	r4, [r3, #16]
 8008b68:	f7ff fe5a 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	1e5a      	subs	r2, r3, #1
 8008b70:	4b23      	ldr	r3, [pc, #140]	; (8008c00 <rt_test_005_002_execute+0x270>)
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	4b1d      	ldr	r3, [pc, #116]	; (8008bec <rt_test_005_002_execute+0x25c>)
 8008b76:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f7fa fb18 	bl	80031b0 <chThdCreateStatic>
 8008b80:	4603      	mov	r3, r0
 8008b82:	4a1b      	ldr	r2, [pc, #108]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 8008b84:	6113      	str	r3, [r2, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8008b86:	4b17      	ldr	r3, [pc, #92]	; (8008be4 <rt_test_005_002_execute+0x254>)
 8008b88:	68dc      	ldr	r4, [r3, #12]
 8008b8a:	f7ff fe49 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	1e9a      	subs	r2, r3, #2
 8008b92:	4b1a      	ldr	r3, [pc, #104]	; (8008bfc <rt_test_005_002_execute+0x26c>)
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	4b15      	ldr	r3, [pc, #84]	; (8008bec <rt_test_005_002_execute+0x25c>)
 8008b98:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f7fa fb07 	bl	80031b0 <chThdCreateStatic>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	4a12      	ldr	r2, [pc, #72]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 8008ba6:	60d3      	str	r3, [r2, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8008ba8:	4b0e      	ldr	r3, [pc, #56]	; (8008be4 <rt_test_005_002_execute+0x254>)
 8008baa:	689c      	ldr	r4, [r3, #8]
 8008bac:	f7ff fe38 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	1eda      	subs	r2, r3, #3
 8008bb4:	4b10      	ldr	r3, [pc, #64]	; (8008bf8 <rt_test_005_002_execute+0x268>)
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	4b0c      	ldr	r3, [pc, #48]	; (8008bec <rt_test_005_002_execute+0x25c>)
 8008bba:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f7fa faf6 	bl	80031b0 <chThdCreateStatic>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	4a0a      	ldr	r2, [pc, #40]	; (8008bf0 <rt_test_005_002_execute+0x260>)
 8008bc8:	6093      	str	r3, [r2, #8]
    test_wait_threads();
 8008bca:	f7fe fee1 	bl	8007990 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8008bce:	490d      	ldr	r1, [pc, #52]	; (8008c04 <rt_test_005_002_execute+0x274>)
 8008bd0:	480d      	ldr	r0, [pc, #52]	; (8008c08 <rt_test_005_002_execute+0x278>)
 8008bd2:	f7fe fb25 	bl	8007220 <__test_assert_sequence>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
  }
  test_end_step(3);
}
 8008bda:	b002      	add	sp, #8
 8008bdc:	bd10      	pop	{r4, pc}
 8008bde:	bf00      	nop
 8008be0:	20000c6c 	.word	0x20000c6c
 8008be4:	0801d708 	.word	0x0801d708
 8008be8:	0801e108 	.word	0x0801e108
 8008bec:	08008831 	.word	0x08008831
 8008bf0:	20001508 	.word	0x20001508
 8008bf4:	0801e0e0 	.word	0x0801e0e0
 8008bf8:	0801e0e4 	.word	0x0801e0e4
 8008bfc:	0801e0e8 	.word	0x0801e0e8
 8008c00:	0801e0ec 	.word	0x0801e0ec
 8008c04:	0801e0f0 	.word	0x0801e0f0
 8008c08:	0801e104 	.word	0x0801e104
 8008c0c:	00000000 	.word	0x00000000

08008c10 <rt_test_005_003_execute>:
 * - [5.3.2] Thread priority is returned to the previous value then a
 *   check is performed.
 * .
 */

static void rt_test_005_003_execute(void) {
 8008c10:	b500      	push	{lr}
 8008c12:	b083      	sub	sp, #12
  tprio_t prio, p1;

  /* [5.3.1] Thread priority is increased by one then a check is
     performed.*/
  test_set_step(1);
 8008c14:	4b29      	ldr	r3, [pc, #164]	; (8008cbc <rt_test_005_003_execute+0xac>)
 8008c16:	2201      	movs	r2, #1
 8008c18:	601a      	str	r2, [r3, #0]
  {
    prio = chThdGetPriorityX();
 8008c1a:	f7ff fe01 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008c1e:	9001      	str	r0, [sp, #4]
    p1 = chThdSetPriority(prio + 1);
 8008c20:	9b01      	ldr	r3, [sp, #4]
 8008c22:	3301      	adds	r3, #1
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fa fbc3 	bl	80033b0 <chThdSetPriority>
 8008c2a:	9000      	str	r0, [sp, #0]
    test_assert(p1 == prio, "unexpected returned priority level");
 8008c2c:	9a00      	ldr	r2, [sp, #0]
 8008c2e:	9b01      	ldr	r3, [sp, #4]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	bf0c      	ite	eq
 8008c34:	2301      	moveq	r3, #1
 8008c36:	2300      	movne	r3, #0
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	4921      	ldr	r1, [pc, #132]	; (8008cc0 <rt_test_005_003_execute+0xb0>)
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fe fad7 	bl	80071f0 <__test_assert>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d135      	bne.n	8008cb4 <rt_test_005_003_execute+0xa4>
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 8008c48:	f7ff fdea 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	9b01      	ldr	r3, [sp, #4]
 8008c50:	3301      	adds	r3, #1
 8008c52:	429a      	cmp	r2, r3
 8008c54:	bf0c      	ite	eq
 8008c56:	2301      	moveq	r3, #1
 8008c58:	2300      	movne	r3, #0
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	4919      	ldr	r1, [pc, #100]	; (8008cc4 <rt_test_005_003_execute+0xb4>)
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fe fac6 	bl	80071f0 <__test_assert>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d124      	bne.n	8008cb4 <rt_test_005_003_execute+0xa4>
  }
  test_end_step(1);

  /* [5.3.2] Thread priority is returned to the previous value then a
     check is performed.*/
  test_set_step(2);
 8008c6a:	4b14      	ldr	r3, [pc, #80]	; (8008cbc <rt_test_005_003_execute+0xac>)
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	601a      	str	r2, [r3, #0]
  {
    p1 = chThdSetPriority(p1);
 8008c70:	9800      	ldr	r0, [sp, #0]
 8008c72:	f7fa fb9d 	bl	80033b0 <chThdSetPriority>
 8008c76:	9000      	str	r0, [sp, #0]
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8008c78:	9b01      	ldr	r3, [sp, #4]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	9a00      	ldr	r2, [sp, #0]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	bf0c      	ite	eq
 8008c82:	2301      	moveq	r3, #1
 8008c84:	2300      	movne	r3, #0
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	490d      	ldr	r1, [pc, #52]	; (8008cc0 <rt_test_005_003_execute+0xb0>)
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fe fab0 	bl	80071f0 <__test_assert>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10e      	bne.n	8008cb4 <rt_test_005_003_execute+0xa4>
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8008c96:	f7ff fdc3 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	9b01      	ldr	r3, [sp, #4]
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	bf0c      	ite	eq
 8008ca2:	2301      	moveq	r3, #1
 8008ca4:	2300      	movne	r3, #0
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	4906      	ldr	r1, [pc, #24]	; (8008cc4 <rt_test_005_003_execute+0xb4>)
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fe faa0 	bl	80071f0 <__test_assert>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
  }
  test_end_step(2);
}
 8008cb4:	b003      	add	sp, #12
 8008cb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008cba:	bf00      	nop
 8008cbc:	20000c6c 	.word	0x20000c6c
 8008cc0:	0801e11c 	.word	0x0801e11c
 8008cc4:	0801e140 	.word	0x0801e140
	...

08008cd0 <rt_test_005_004_execute>:
 * - [5.4.3] Raising thread priority above the boosted level.
 * - [5.4.4] Restoring original conditions.
 * .
 */

static void rt_test_005_004_execute(void) {
 8008cd0:	b500      	push	{lr}
 8008cd2:	b083      	sub	sp, #12
  tprio_t prio, p1;

  /* [5.4.1] Simulating a priority boost situation (prio > realprio).*/
  test_set_step(1);
 8008cd4:	4b54      	ldr	r3, [pc, #336]	; (8008e28 <rt_test_005_004_execute+0x158>)
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]
  {
    prio = chThdGetPriorityX();
 8008cda:	f7ff fda1 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008cde:	9001      	str	r0, [sp, #4]
    chThdGetSelfX()->hdr.pqueue.prio += 2;
 8008ce0:	f7ff fd96 	bl	8008810 <chThdGetSelfX.lto_priv.6>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	689a      	ldr	r2, [r3, #8]
 8008ce8:	3202      	adds	r2, #2
 8008cea:	609a      	str	r2, [r3, #8]
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
 8008cec:	f7ff fd98 	bl	8008820 <chThdGetPriorityX.lto_priv.0>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	9b01      	ldr	r3, [sp, #4]
 8008cf4:	3302      	adds	r3, #2
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	bf0c      	ite	eq
 8008cfa:	2301      	moveq	r3, #1
 8008cfc:	2300      	movne	r3, #0
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	494a      	ldr	r1, [pc, #296]	; (8008e2c <rt_test_005_004_execute+0x15c>)
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe fa74 	bl	80071f0 <__test_assert>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f040 8088 	bne.w	8008e20 <rt_test_005_004_execute+0x150>
  }
  test_end_step(1);

  /* [5.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8008d10:	4b45      	ldr	r3, [pc, #276]	; (8008e28 <rt_test_005_004_execute+0x158>)
 8008d12:	2202      	movs	r2, #2
 8008d14:	601a      	str	r2, [r3, #0]
  {
    p1 = chThdSetPriority(prio + 1);
 8008d16:	9b01      	ldr	r3, [sp, #4]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fa fb48 	bl	80033b0 <chThdSetPriority>
 8008d20:	9000      	str	r0, [sp, #0]
    test_assert(p1 == prio, "unexpected returned priority level");
 8008d22:	9a00      	ldr	r2, [sp, #0]
 8008d24:	9b01      	ldr	r3, [sp, #4]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	bf0c      	ite	eq
 8008d2a:	2301      	moveq	r3, #1
 8008d2c:	2300      	movne	r3, #0
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	493f      	ldr	r1, [pc, #252]	; (8008e30 <rt_test_005_004_execute+0x160>)
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fe fa5c 	bl	80071f0 <__test_assert>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d170      	bne.n	8008e20 <rt_test_005_004_execute+0x150>
    test_assert(chThdGetSelfX()->hdr.pqueue.prio == prio + 2, "unexpected priority level");
 8008d3e:	f7ff fd67 	bl	8008810 <chThdGetSelfX.lto_priv.6>
 8008d42:	4603      	mov	r3, r0
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	3302      	adds	r3, #2
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	bf0c      	ite	eq
 8008d4e:	2301      	moveq	r3, #1
 8008d50:	2300      	movne	r3, #0
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	4935      	ldr	r1, [pc, #212]	; (8008e2c <rt_test_005_004_execute+0x15c>)
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe fa4a 	bl	80071f0 <__test_assert>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d15e      	bne.n	8008e20 <rt_test_005_004_execute+0x150>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 8008d62:	f7ff fd55 	bl	8008810 <chThdGetSelfX.lto_priv.6>
 8008d66:	4603      	mov	r3, r0
 8008d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d6a:	9b01      	ldr	r3, [sp, #4]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	bf0c      	ite	eq
 8008d72:	2301      	moveq	r3, #1
 8008d74:	2300      	movne	r3, #0
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	492e      	ldr	r1, [pc, #184]	; (8008e34 <rt_test_005_004_execute+0x164>)
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fa38 	bl	80071f0 <__test_assert>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d14c      	bne.n	8008e20 <rt_test_005_004_execute+0x150>
  }
  test_end_step(2);

  /* [5.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
 8008d86:	4b28      	ldr	r3, [pc, #160]	; (8008e28 <rt_test_005_004_execute+0x158>)
 8008d88:	2203      	movs	r2, #3
 8008d8a:	601a      	str	r2, [r3, #0]
  {
    p1 = chThdSetPriority(prio + 3);
 8008d8c:	9b01      	ldr	r3, [sp, #4]
 8008d8e:	3303      	adds	r3, #3
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fa fb0d 	bl	80033b0 <chThdSetPriority>
 8008d96:	9000      	str	r0, [sp, #0]
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8008d98:	9b01      	ldr	r3, [sp, #4]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	9a00      	ldr	r2, [sp, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	bf0c      	ite	eq
 8008da2:	2301      	moveq	r3, #1
 8008da4:	2300      	movne	r3, #0
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	4921      	ldr	r1, [pc, #132]	; (8008e30 <rt_test_005_004_execute+0x160>)
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe fa20 	bl	80071f0 <__test_assert>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d134      	bne.n	8008e20 <rt_test_005_004_execute+0x150>
    test_assert(chThdGetSelfX()->hdr.pqueue.prio == prio + 3, "unexpected priority level");
 8008db6:	f7ff fd2b 	bl	8008810 <chThdGetSelfX.lto_priv.6>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	689a      	ldr	r2, [r3, #8]
 8008dbe:	9b01      	ldr	r3, [sp, #4]
 8008dc0:	3303      	adds	r3, #3
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	bf0c      	ite	eq
 8008dc6:	2301      	moveq	r3, #1
 8008dc8:	2300      	movne	r3, #0
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	4917      	ldr	r1, [pc, #92]	; (8008e2c <rt_test_005_004_execute+0x15c>)
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe fa0e 	bl	80071f0 <__test_assert>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d122      	bne.n	8008e20 <rt_test_005_004_execute+0x150>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 8008dda:	f7ff fd19 	bl	8008810 <chThdGetSelfX.lto_priv.6>
 8008dde:	4603      	mov	r3, r0
 8008de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008de2:	9b01      	ldr	r3, [sp, #4]
 8008de4:	3303      	adds	r3, #3
 8008de6:	429a      	cmp	r2, r3
 8008de8:	bf0c      	ite	eq
 8008dea:	2301      	moveq	r3, #1
 8008dec:	2300      	movne	r3, #0
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	4911      	ldr	r1, [pc, #68]	; (8008e38 <rt_test_005_004_execute+0x168>)
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fe f9fc 	bl	80071f0 <__test_assert>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d110      	bne.n	8008e20 <rt_test_005_004_execute+0x150>
  }
  test_end_step(3);

  /* [5.4.4] Restoring original conditions.*/
  test_set_step(4);
 8008dfe:	4b0a      	ldr	r3, [pc, #40]	; (8008e28 <rt_test_005_004_execute+0x158>)
 8008e00:	2204      	movs	r2, #4
 8008e02:	601a      	str	r2, [r3, #0]
  {
    chSysLock();
 8008e04:	f7ff fcdc 	bl	80087c0 <chSysLock.lto_priv.21>
    chThdGetSelfX()->hdr.pqueue.prio = prio;
 8008e08:	f7ff fd02 	bl	8008810 <chThdGetSelfX.lto_priv.6>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	9b01      	ldr	r3, [sp, #4]
 8008e10:	6093      	str	r3, [r2, #8]
    chThdGetSelfX()->realprio = prio;
 8008e12:	f7ff fcfd 	bl	8008810 <chThdGetSelfX.lto_priv.6>
 8008e16:	4602      	mov	r2, r0
 8008e18:	9b01      	ldr	r3, [sp, #4]
 8008e1a:	6413      	str	r3, [r2, #64]	; 0x40
    chSysUnlock();
 8008e1c:	f7ff fce0 	bl	80087e0 <chSysUnlock.lto_priv.21>
  }
  test_end_step(4);
}
 8008e20:	b003      	add	sp, #12
 8008e22:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e26:	bf00      	nop
 8008e28:	20000c6c 	.word	0x20000c6c
 8008e2c:	0801e140 	.word	0x0801e140
 8008e30:	0801e11c 	.word	0x0801e11c
 8008e34:	0801e16c 	.word	0x0801e16c
 8008e38:	0801e194 	.word	0x0801e194
 8008e3c:	00000000 	.word	0x00000000

08008e40 <chTimeAddX.lto_priv.3>:
                                   sysinterval_t interval) {
 8008e40:	b082      	sub	sp, #8
 8008e42:	9001      	str	r0, [sp, #4]
 8008e44:	9100      	str	r1, [sp, #0]
  return systime + (systime_t)interval;
 8008e46:	9a01      	ldr	r2, [sp, #4]
 8008e48:	9b00      	ldr	r3, [sp, #0]
 8008e4a:	4413      	add	r3, r2
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	b002      	add	sp, #8
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
	...

08008e60 <port_timer_get_time.lto_priv.8>:
static inline systime_t port_timer_get_time(void) {
 8008e60:	b508      	push	{r3, lr}
  return stGetCounter();
 8008e62:	f7f7 fb3d 	bl	80004e0 <stGetCounter>
 8008e66:	4603      	mov	r3, r0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	bd08      	pop	{r3, pc}
 8008e6c:	0000      	movs	r0, r0
	...

08008e70 <chSysLock.lto_priv.22>:
static inline void chSysLock(void) {
 8008e70:	b082      	sub	sp, #8
 8008e72:	2330      	movs	r3, #48	; 0x30
 8008e74:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008e76:	9b01      	ldr	r3, [sp, #4]
 8008e78:	f383 8811 	msr	BASEPRI, r3
}
 8008e7c:	bf00      	nop
}
 8008e7e:	bf00      	nop
}
 8008e80:	bf00      	nop
 8008e82:	b002      	add	sp, #8
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
	...

08008e90 <chSysUnlock.lto_priv.22>:
static inline void chSysUnlock(void) {
 8008e90:	b082      	sub	sp, #8
 8008e92:	2300      	movs	r3, #0
 8008e94:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008e96:	9b01      	ldr	r3, [sp, #4]
 8008e98:	f383 8811 	msr	BASEPRI, r3
}
 8008e9c:	bf00      	nop
}
 8008e9e:	bf00      	nop
}
 8008ea0:	bf00      	nop
 8008ea2:	b002      	add	sp, #8
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
	...

08008eb0 <chVTGetSystemTimeX.lto_priv.8>:
static inline systime_t chVTGetSystemTimeX(void) {
 8008eb0:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8008eb2:	f7ff ffd5 	bl	8008e60 <port_timer_get_time.lto_priv.8>
 8008eb6:	4603      	mov	r3, r0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	bd08      	pop	{r3, pc}
 8008ebc:	0000      	movs	r0, r0
	...

08008ec0 <chThdGetSelfX.lto_priv.7>:
  return __sch_get_currthread();
 8008ec0:	4b01      	ldr	r3, [pc, #4]	; (8008ec8 <chThdGetSelfX.lto_priv.7+0x8>)
 8008ec2:	68db      	ldr	r3, [r3, #12]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	4770      	bx	lr
 8008ec8:	20000a48 	.word	0x20000a48
 8008ecc:	00000000 	.word	0x00000000

08008ed0 <chThdGetPriorityX.lto_priv.1>:
static inline tprio_t chThdGetPriorityX(void) {
 8008ed0:	b508      	push	{r3, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 8008ed2:	f7ff fff5 	bl	8008ec0 <chThdGetSelfX.lto_priv.7>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	689b      	ldr	r3, [r3, #8]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	bd08      	pop	{r3, pc}
 8008ede:	bf00      	nop

08008ee0 <thread1.lto_priv.0>:
 * Shared code.
 ****************************************************************************/

static thread_reference_t tr1;

static THD_FUNCTION(thread1, p) {
 8008ee0:	b500      	push	{lr}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	9001      	str	r0, [sp, #4]

  chSysLock();
 8008ee6:	f7ff ffc3 	bl	8008e70 <chSysLock.lto_priv.22>
  chThdResumeI(&tr1, MSG_OK);
 8008eea:	2100      	movs	r1, #0
 8008eec:	4807      	ldr	r0, [pc, #28]	; (8008f0c <thread1.lto_priv.0+0x2c>)
 8008eee:	f7fa fb07 	bl	8003500 <chThdResumeI>
  chSchRescheduleS();
 8008ef2:	f7f9 fe3d 	bl	8002b70 <chSchRescheduleS>
  chSysUnlock();
 8008ef6:	f7ff ffcb 	bl	8008e90 <chSysUnlock.lto_priv.22>
  test_emit_token(*(char *)p);
 8008efa:	9b01      	ldr	r3, [sp, #4]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe f9d6 	bl	80072b0 <test_emit_token>
}
 8008f04:	bf00      	nop
 8008f06:	b003      	add	sp, #12
 8008f08:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f0c:	2000151c 	.word	0x2000151c

08008f10 <rt_test_006_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_006_001_setup(void) {
  tr1 = NULL;
 8008f10:	4b02      	ldr	r3, [pc, #8]	; (8008f1c <rt_test_006_001_setup+0xc>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]
}
 8008f16:	bf00      	nop
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	2000151c 	.word	0x2000151c

08008f20 <rt_test_006_001_execute>:

static void rt_test_006_001_execute(void) {
 8008f20:	b510      	push	{r4, lr}
 8008f22:	b084      	sub	sp, #16
  msg_t msg;

  /* [6.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8008f24:	4b3c      	ldr	r3, [pc, #240]	; (8009018 <rt_test_006_001_execute+0xf8>)
 8008f26:	2201      	movs	r2, #1
 8008f28:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8008f2a:	4b3c      	ldr	r3, [pc, #240]	; (800901c <rt_test_006_001_execute+0xfc>)
 8008f2c:	681c      	ldr	r4, [r3, #0]
 8008f2e:	f7ff ffcf 	bl	8008ed0 <chThdGetPriorityX.lto_priv.1>
 8008f32:	4603      	mov	r3, r0
 8008f34:	1e5a      	subs	r2, r3, #1
 8008f36:	4b3a      	ldr	r3, [pc, #232]	; (8009020 <rt_test_006_001_execute+0x100>)
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	4b3a      	ldr	r3, [pc, #232]	; (8009024 <rt_test_006_001_execute+0x104>)
 8008f3c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008f40:	4620      	mov	r0, r4
 8008f42:	f7fa f935 	bl	80031b0 <chThdCreateStatic>
 8008f46:	4603      	mov	r3, r0
 8008f48:	4a37      	ldr	r2, [pc, #220]	; (8009028 <rt_test_006_001_execute+0x108>)
 8008f4a:	6013      	str	r3, [r2, #0]
    chSysLock();
 8008f4c:	f7ff ff90 	bl	8008e70 <chSysLock.lto_priv.22>
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
 8008f50:	f04f 31ff 	mov.w	r1, #4294967295
 8008f54:	4835      	ldr	r0, [pc, #212]	; (800902c <rt_test_006_001_execute+0x10c>)
 8008f56:	f7fa faab 	bl	80034b0 <chThdSuspendTimeoutS>
 8008f5a:	9003      	str	r0, [sp, #12]
    chSysUnlock();
 8008f5c:	f7ff ff98 	bl	8008e90 <chSysUnlock.lto_priv.22>
    test_assert(NULL == tr1, "not NULL");
 8008f60:	4b32      	ldr	r3, [pc, #200]	; (800902c <rt_test_006_001_execute+0x10c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	bf0c      	ite	eq
 8008f68:	2301      	moveq	r3, #1
 8008f6a:	2300      	movne	r3, #0
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	4930      	ldr	r1, [pc, #192]	; (8009030 <rt_test_006_001_execute+0x110>)
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe f93d 	bl	80071f0 <__test_assert>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d14a      	bne.n	8009012 <rt_test_006_001_execute+0xf2>
    test_assert(MSG_OK == msg,"wrong returned message");
 8008f7c:	9b03      	ldr	r3, [sp, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	bf0c      	ite	eq
 8008f82:	2301      	moveq	r3, #1
 8008f84:	2300      	movne	r3, #0
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	492a      	ldr	r1, [pc, #168]	; (8009034 <rt_test_006_001_execute+0x114>)
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe f930 	bl	80071f0 <__test_assert>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d13d      	bne.n	8009012 <rt_test_006_001_execute+0xf2>
    test_wait_threads();
 8008f96:	f7fe fcfb 	bl	8007990 <test_wait_threads>
  test_end_step(1);

  /* [6.1.2] The function chThdSuspendTimeoutS() is invoked, the thread
     is not resumed so a timeout must occur. On return the message and
     the state of the reference are tested.*/
  test_set_step(2);
 8008f9a:	4b1f      	ldr	r3, [pc, #124]	; (8009018 <rt_test_006_001_execute+0xf8>)
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	601a      	str	r2, [r3, #0]
  {
    chSysLock();
 8008fa0:	f7ff ff66 	bl	8008e70 <chSysLock.lto_priv.22>
    time = chVTGetSystemTimeX();
 8008fa4:	f7ff ff84 	bl	8008eb0 <chVTGetSystemTimeX.lto_priv.8>
 8008fa8:	9002      	str	r0, [sp, #8]
    msg = chThdSuspendTimeoutS(&tr1, TIME_MS2I(10));
 8008faa:	2164      	movs	r1, #100	; 0x64
 8008fac:	481f      	ldr	r0, [pc, #124]	; (800902c <rt_test_006_001_execute+0x10c>)
 8008fae:	f7fa fa7f 	bl	80034b0 <chThdSuspendTimeoutS>
 8008fb2:	9003      	str	r0, [sp, #12]
    chSysUnlock();
 8008fb4:	f7ff ff6c 	bl	8008e90 <chSysUnlock.lto_priv.22>
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(10)),
 8008fb8:	2164      	movs	r1, #100	; 0x64
 8008fba:	9802      	ldr	r0, [sp, #8]
 8008fbc:	f7ff ff40 	bl	8008e40 <chTimeAddX.lto_priv.3>
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	2167      	movs	r1, #103	; 0x67
 8008fc4:	9802      	ldr	r0, [sp, #8]
 8008fc6:	f7ff ff3b 	bl	8008e40 <chTimeAddX.lto_priv.3>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	4a1a      	ldr	r2, [pc, #104]	; (8009038 <rt_test_006_001_execute+0x118>)
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f7fe f955 	bl	8007280 <__test_assert_time_window>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d11a      	bne.n	8009012 <rt_test_006_001_execute+0xf2>
                            chTimeAddX(time, TIME_MS2I(10) + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
 8008fdc:	4b13      	ldr	r3, [pc, #76]	; (800902c <rt_test_006_001_execute+0x10c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	bf0c      	ite	eq
 8008fe4:	2301      	moveq	r3, #1
 8008fe6:	2300      	movne	r3, #0
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	4911      	ldr	r1, [pc, #68]	; (8009030 <rt_test_006_001_execute+0x110>)
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fe f8ff 	bl	80071f0 <__test_assert>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10c      	bne.n	8009012 <rt_test_006_001_execute+0xf2>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8008ff8:	9b03      	ldr	r3, [sp, #12]
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffe:	bf0c      	ite	eq
 8009000:	2301      	moveq	r3, #1
 8009002:	2300      	movne	r3, #0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	490b      	ldr	r1, [pc, #44]	; (8009034 <rt_test_006_001_execute+0x114>)
 8009008:	4618      	mov	r0, r3
 800900a:	f7fe f8f1 	bl	80071f0 <__test_assert>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
  }
  test_end_step(2);
}
 8009012:	b004      	add	sp, #16
 8009014:	bd10      	pop	{r4, pc}
 8009016:	bf00      	nop
 8009018:	20000c6c 	.word	0x20000c6c
 800901c:	0801d708 	.word	0x0801d708
 8009020:	0801e0ec 	.word	0x0801e0ec
 8009024:	08008ee1 	.word	0x08008ee1
 8009028:	20001508 	.word	0x20001508
 800902c:	2000151c 	.word	0x2000151c
 8009030:	0801e1e0 	.word	0x0801e1e0
 8009034:	0801e1ec 	.word	0x0801e1ec
 8009038:	0801e0bc 	.word	0x0801e0bc
 800903c:	00000000 	.word	0x00000000

08009040 <chTimeAddX.lto_priv.4>:
                                   sysinterval_t interval) {
 8009040:	b082      	sub	sp, #8
 8009042:	9001      	str	r0, [sp, #4]
 8009044:	9100      	str	r1, [sp, #0]
  return systime + (systime_t)interval;
 8009046:	9a01      	ldr	r2, [sp, #4]
 8009048:	9b00      	ldr	r3, [sp, #0]
 800904a:	4413      	add	r3, r2
}
 800904c:	4618      	mov	r0, r3
 800904e:	b002      	add	sp, #8
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
	...

08009060 <ch_queue_isempty.lto_priv.0>:
static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 8009060:	b082      	sub	sp, #8
 8009062:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next == qp);
 8009064:	9b01      	ldr	r3, [sp, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	9a01      	ldr	r2, [sp, #4]
 800906a:	429a      	cmp	r2, r3
 800906c:	bf0c      	ite	eq
 800906e:	2301      	moveq	r3, #1
 8009070:	2300      	movne	r3, #0
 8009072:	b2db      	uxtb	r3, r3
}
 8009074:	4618      	mov	r0, r3
 8009076:	b002      	add	sp, #8
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	0000      	movs	r0, r0
	...

08009080 <chSysLock.lto_priv.23>:
static inline void chSysLock(void) {
 8009080:	b082      	sub	sp, #8
 8009082:	2330      	movs	r3, #48	; 0x30
 8009084:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009086:	9b01      	ldr	r3, [sp, #4]
 8009088:	f383 8811 	msr	BASEPRI, r3
}
 800908c:	bf00      	nop
}
 800908e:	bf00      	nop
}
 8009090:	bf00      	nop
 8009092:	b002      	add	sp, #8
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
	...

080090a0 <chSysUnlock.lto_priv.23>:
static inline void chSysUnlock(void) {
 80090a0:	b082      	sub	sp, #8
 80090a2:	2300      	movs	r3, #0
 80090a4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80090a6:	9b01      	ldr	r3, [sp, #4]
 80090a8:	f383 8811 	msr	BASEPRI, r3
}
 80090ac:	bf00      	nop
}
 80090ae:	bf00      	nop
}
 80090b0:	bf00      	nop
 80090b2:	b002      	add	sp, #8
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
	...

080090c0 <chThdGetSelfX.lto_priv.8>:
  return __sch_get_currthread();
 80090c0:	4b01      	ldr	r3, [pc, #4]	; (80090c8 <chThdGetSelfX.lto_priv.8+0x8>)
 80090c2:	68db      	ldr	r3, [r3, #12]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	4770      	bx	lr
 80090c8:	20000a48 	.word	0x20000a48
 80090cc:	00000000 	.word	0x00000000

080090d0 <chThdGetPriorityX.lto_priv.2>:
static inline tprio_t chThdGetPriorityX(void) {
 80090d0:	b508      	push	{r3, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 80090d2:	f7ff fff5 	bl	80090c0 <chThdGetSelfX.lto_priv.8>
 80090d6:	4603      	mov	r3, r0
 80090d8:	689b      	ldr	r3, [r3, #8]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	bd08      	pop	{r3, pc}
 80090de:	bf00      	nop

080090e0 <chSemReset.lto_priv.0>:
static inline void chSemReset(semaphore_t *sp, cnt_t n) {
 80090e0:	b500      	push	{lr}
 80090e2:	b083      	sub	sp, #12
 80090e4:	9001      	str	r0, [sp, #4]
 80090e6:	9100      	str	r1, [sp, #0]
  chSemResetWithMessage(sp, n, MSG_RESET);
 80090e8:	f06f 0201 	mvn.w	r2, #1
 80090ec:	9900      	ldr	r1, [sp, #0]
 80090ee:	9801      	ldr	r0, [sp, #4]
 80090f0:	f7fa fbb6 	bl	8003860 <chSemResetWithMessage>
}
 80090f4:	bf00      	nop
 80090f6:	b003      	add	sp, #12
 80090f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80090fc:	0000      	movs	r0, r0
	...

08009100 <chSemGetCounterI.lto_priv.1>:
static inline cnt_t chSemGetCounterI(const semaphore_t *sp) {
 8009100:	b082      	sub	sp, #8
 8009102:	9001      	str	r0, [sp, #4]
  return sp->cnt;
 8009104:	9b01      	ldr	r3, [sp, #4]
 8009106:	689b      	ldr	r3, [r3, #8]
}
 8009108:	4618      	mov	r0, r3
 800910a:	b002      	add	sp, #8
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop

08009110 <chBSemObjectInit>:
 *                      - @a true, the initial state is taken.
 *                      .
 *
 * @init
 */
static inline void chBSemObjectInit(binary_semaphore_t *bsp, bool taken) {
 8009110:	b500      	push	{lr}
 8009112:	b083      	sub	sp, #12
 8009114:	9001      	str	r0, [sp, #4]
 8009116:	460b      	mov	r3, r1
 8009118:	f88d 3003 	strb.w	r3, [sp, #3]

  chSemObjectInit(&bsp->sem, taken ? (cnt_t)0 : (cnt_t)1);
 800911c:	9a01      	ldr	r2, [sp, #4]
 800911e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009122:	f083 0301 	eor.w	r3, r3, #1
 8009126:	b2db      	uxtb	r3, r3
 8009128:	4619      	mov	r1, r3
 800912a:	4610      	mov	r0, r2
 800912c:	f7fa fb88 	bl	8003840 <chSemObjectInit>
}
 8009130:	bf00      	nop
 8009132:	b003      	add	sp, #12
 8009134:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009140 <chBSemWait>:
 * @retval MSG_RESET    if the binary semaphore has been reset using
 *                      @p bsemReset().
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {
 8009140:	b500      	push	{lr}
 8009142:	b083      	sub	sp, #12
 8009144:	9001      	str	r0, [sp, #4]

  return chSemWait(&bsp->sem);
 8009146:	9b01      	ldr	r3, [sp, #4]
 8009148:	4618      	mov	r0, r3
 800914a:	f7fa fbc1 	bl	80038d0 <chSemWait>
 800914e:	4603      	mov	r3, r0
}
 8009150:	4618      	mov	r0, r3
 8009152:	b003      	add	sp, #12
 8009154:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009160 <chBSemReset>:
 *                      - @a true, the new state is taken.
 *                      .
 *
 * @api
 */
static inline void chBSemReset(binary_semaphore_t *bsp, bool taken) {
 8009160:	b500      	push	{lr}
 8009162:	b083      	sub	sp, #12
 8009164:	9001      	str	r0, [sp, #4]
 8009166:	460b      	mov	r3, r1
 8009168:	f88d 3003 	strb.w	r3, [sp, #3]

  chSemReset(&bsp->sem, taken ? (cnt_t)0 : (cnt_t)1);
 800916c:	9a01      	ldr	r2, [sp, #4]
 800916e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009172:	f083 0301 	eor.w	r3, r3, #1
 8009176:	b2db      	uxtb	r3, r3
 8009178:	4619      	mov	r1, r3
 800917a:	4610      	mov	r0, r2
 800917c:	f7ff ffb0 	bl	80090e0 <chSemReset.lto_priv.0>
}
 8009180:	bf00      	nop
 8009182:	b003      	add	sp, #12
 8009184:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009190 <chBSemSignalI>:
 *
 * @param[in] bsp       pointer to a @p binary_semaphore_t structure
 *
 * @iclass
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {
 8009190:	b500      	push	{lr}
 8009192:	b083      	sub	sp, #12
 8009194:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8009196:	9b01      	ldr	r3, [sp, #4]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	dc03      	bgt.n	80091a6 <chBSemSignalI+0x16>
    chSemSignalI(&bsp->sem);
 800919e:	9b01      	ldr	r3, [sp, #4]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fa fc3d 	bl	8003a20 <chSemSignalI>
  }
}
 80091a6:	bf00      	nop
 80091a8:	b003      	add	sp, #12
 80091aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80091ae:	bf00      	nop

080091b0 <chBSemSignal>:
 *
 * @param[in] bsp       pointer to a @p binary_semaphore_t structure
 *
 * @api
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {
 80091b0:	b500      	push	{lr}
 80091b2:	b083      	sub	sp, #12
 80091b4:	9001      	str	r0, [sp, #4]

  chSysLock();
 80091b6:	f7ff ff63 	bl	8009080 <chSysLock.lto_priv.23>
  chBSemSignalI(bsp);
 80091ba:	9801      	ldr	r0, [sp, #4]
 80091bc:	f7ff ffe8 	bl	8009190 <chBSemSignalI>
  chSchRescheduleS();
 80091c0:	f7f9 fcd6 	bl	8002b70 <chSchRescheduleS>
  chSysUnlock();
 80091c4:	f7ff ff6c 	bl	80090a0 <chSysUnlock.lto_priv.23>
}
 80091c8:	bf00      	nop
 80091ca:	b003      	add	sp, #12
 80091cc:	f85d fb04 	ldr.w	pc, [sp], #4

080091d0 <chBSemGetStateI>:
 * @retval false        if the binary semaphore is not taken.
 * @retval true         if the binary semaphore is taken.
 *
 * @iclass
 */
static inline bool chBSemGetStateI(const binary_semaphore_t *bsp) {
 80091d0:	b082      	sub	sp, #8
 80091d2:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 80091d4:	9b01      	ldr	r3, [sp, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	bfd4      	ite	le
 80091dc:	2301      	movle	r3, #1
 80091de:	2300      	movgt	r3, #0
 80091e0:	b2db      	uxtb	r3, r3
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	b002      	add	sp, #8
 80091e6:	4770      	bx	lr
	...

080091f0 <osalSysLock.lto_priv.3>:
static inline void osalSysLock(void) {
 80091f0:	b508      	push	{r3, lr}
  chSysLock();
 80091f2:	f7ff ff45 	bl	8009080 <chSysLock.lto_priv.23>
}
 80091f6:	bf00      	nop
 80091f8:	bd08      	pop	{r3, pc}
 80091fa:	bf00      	nop
 80091fc:	0000      	movs	r0, r0
	...

08009200 <osalSysUnlock.lto_priv.3>:
static inline void osalSysUnlock(void) {
 8009200:	b508      	push	{r3, lr}
  chSysUnlock();
 8009202:	f7ff ff4d 	bl	80090a0 <chSysUnlock.lto_priv.23>
}
 8009206:	bf00      	nop
 8009208:	bd08      	pop	{r3, pc}
 800920a:	bf00      	nop
 800920c:	0000      	movs	r0, r0
	...

08009210 <thread1.lto_priv.1>:

#include "ch.h"

static semaphore_t sem1;

static THD_FUNCTION(thread1, p) {
 8009210:	b500      	push	{lr}
 8009212:	b083      	sub	sp, #12
 8009214:	9001      	str	r0, [sp, #4]

  chSemWait(&sem1);
 8009216:	4806      	ldr	r0, [pc, #24]	; (8009230 <thread1.lto_priv.1+0x20>)
 8009218:	f7fa fb5a 	bl	80038d0 <chSemWait>
  test_emit_token(*(char *)p);
 800921c:	9b01      	ldr	r3, [sp, #4]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe f845 	bl	80072b0 <test_emit_token>
}
 8009226:	bf00      	nop
 8009228:	b003      	add	sp, #12
 800922a:	f85d fb04 	ldr.w	pc, [sp], #4
 800922e:	bf00      	nop
 8009230:	20001520 	.word	0x20001520
	...

08009240 <thread2>:

static THD_FUNCTION(thread2, p) {
 8009240:	b500      	push	{lr}
 8009242:	b083      	sub	sp, #12
 8009244:	9001      	str	r0, [sp, #4]

  (void)p;
  chThdSleepMilliseconds(50);
 8009246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800924a:	f7fa f8f1 	bl	8003430 <chThdSleep>
  chSysLock();
 800924e:	f7ff ff17 	bl	8009080 <chSysLock.lto_priv.23>
  chSemSignalI(&sem1); /* For coverage reasons */
 8009252:	4805      	ldr	r0, [pc, #20]	; (8009268 <thread2+0x28>)
 8009254:	f7fa fbe4 	bl	8003a20 <chSemSignalI>
  chSchRescheduleS();
 8009258:	f7f9 fc8a 	bl	8002b70 <chSchRescheduleS>
  chSysUnlock();
 800925c:	f7ff ff20 	bl	80090a0 <chSysUnlock.lto_priv.23>
}
 8009260:	bf00      	nop
 8009262:	b003      	add	sp, #12
 8009264:	f85d fb04 	ldr.w	pc, [sp], #4
 8009268:	20001520 	.word	0x20001520
 800926c:	00000000 	.word	0x00000000

08009270 <thread3>:

static THD_FUNCTION(thread3, p) {
 8009270:	b500      	push	{lr}
 8009272:	b083      	sub	sp, #12
 8009274:	9001      	str	r0, [sp, #4]

  (void)p;
  chSemWait(&sem1);
 8009276:	4805      	ldr	r0, [pc, #20]	; (800928c <thread3+0x1c>)
 8009278:	f7fa fb2a 	bl	80038d0 <chSemWait>
  chSemSignal(&sem1);
 800927c:	4803      	ldr	r0, [pc, #12]	; (800928c <thread3+0x1c>)
 800927e:	f7fa fbaf 	bl	80039e0 <chSemSignal>
}
 8009282:	bf00      	nop
 8009284:	b003      	add	sp, #12
 8009286:	f85d fb04 	ldr.w	pc, [sp], #4
 800928a:	bf00      	nop
 800928c:	20001520 	.word	0x20001520

08009290 <thread4>:

static THD_FUNCTION(thread4, p) {
 8009290:	b500      	push	{lr}
 8009292:	b083      	sub	sp, #12
 8009294:	9001      	str	r0, [sp, #4]

  chBSemSignal((binary_semaphore_t *)p);
 8009296:	9801      	ldr	r0, [sp, #4]
 8009298:	f7ff ff8a 	bl	80091b0 <chBSemSignal>
}
 800929c:	bf00      	nop
 800929e:	b003      	add	sp, #12
 80092a0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080092b0 <rt_test_007_001_setup>:
 * - [7.1.3] The function chSemReset() is invoked, after return the
 *   counter is tested.
 * .
 */

static void rt_test_007_001_setup(void) {
 80092b0:	b508      	push	{r3, lr}
  chSemObjectInit(&sem1, 1);
 80092b2:	2101      	movs	r1, #1
 80092b4:	4802      	ldr	r0, [pc, #8]	; (80092c0 <rt_test_007_001_setup+0x10>)
 80092b6:	f7fa fac3 	bl	8003840 <chSemObjectInit>
}
 80092ba:	bf00      	nop
 80092bc:	bd08      	pop	{r3, pc}
 80092be:	bf00      	nop
 80092c0:	20001520 	.word	0x20001520
	...

080092d0 <rt_test_007_001_teardown>:

static void rt_test_007_001_teardown(void) {
 80092d0:	b508      	push	{r3, lr}
  chSemReset(&sem1, 0);
 80092d2:	2100      	movs	r1, #0
 80092d4:	4802      	ldr	r0, [pc, #8]	; (80092e0 <rt_test_007_001_teardown+0x10>)
 80092d6:	f7ff ff03 	bl	80090e0 <chSemReset.lto_priv.0>
}
 80092da:	bf00      	nop
 80092dc:	bd08      	pop	{r3, pc}
 80092de:	bf00      	nop
 80092e0:	20001520 	.word	0x20001520
	...

080092f0 <rt_test_007_001_execute>:

static void rt_test_007_001_execute(void) {
 80092f0:	b500      	push	{lr}
 80092f2:	b083      	sub	sp, #12

  /* [7.1.1] The function chSemWait() is invoked, after return the
     counter and the returned message are tested.*/
  test_set_step(1);
 80092f4:	4b34      	ldr	r3, [pc, #208]	; (80093c8 <rt_test_007_001_execute+0xd8>)
 80092f6:	2201      	movs	r2, #1
 80092f8:	601a      	str	r2, [r3, #0]
  {
    msg_t msg;

    msg = chSemWait(&sem1);
 80092fa:	4834      	ldr	r0, [pc, #208]	; (80093cc <rt_test_007_001_execute+0xdc>)
 80092fc:	f7fa fae8 	bl	80038d0 <chSemWait>
 8009300:	9001      	str	r0, [sp, #4]
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 8009302:	f7ff ff75 	bl	80091f0 <osalSysLock.lto_priv.3>
 8009306:	4831      	ldr	r0, [pc, #196]	; (80093cc <rt_test_007_001_execute+0xdc>)
 8009308:	f7ff fefa 	bl	8009100 <chSemGetCounterI.lto_priv.1>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	bf0c      	ite	eq
 8009312:	2301      	moveq	r3, #1
 8009314:	2300      	movne	r3, #0
 8009316:	b2db      	uxtb	r3, r3
 8009318:	492d      	ldr	r1, [pc, #180]	; (80093d0 <rt_test_007_001_execute+0xe0>)
 800931a:	4618      	mov	r0, r3
 800931c:	f7fd ff68 	bl	80071f0 <__test_assert>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <rt_test_007_001_execute+0x3c>
 8009326:	f7ff ff6b 	bl	8009200 <osalSysUnlock.lto_priv.3>
 800932a:	e049      	b.n	80093c0 <rt_test_007_001_execute+0xd0>
 800932c:	f7ff ff68 	bl	8009200 <osalSysUnlock.lto_priv.3>
    test_assert(MSG_OK == msg, "wrong returned message");
 8009330:	9b01      	ldr	r3, [sp, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	bf0c      	ite	eq
 8009336:	2301      	moveq	r3, #1
 8009338:	2300      	movne	r3, #0
 800933a:	b2db      	uxtb	r3, r3
 800933c:	4925      	ldr	r1, [pc, #148]	; (80093d4 <rt_test_007_001_execute+0xe4>)
 800933e:	4618      	mov	r0, r3
 8009340:	f7fd ff56 	bl	80071f0 <__test_assert>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d13a      	bne.n	80093c0 <rt_test_007_001_execute+0xd0>
  }
  test_end_step(1);

  /* [7.1.2] The function chSemSignal() is invoked, after return the
     counter is tested.*/
  test_set_step(2);
 800934a:	4b1f      	ldr	r3, [pc, #124]	; (80093c8 <rt_test_007_001_execute+0xd8>)
 800934c:	2202      	movs	r2, #2
 800934e:	601a      	str	r2, [r3, #0]
  {
    chSemSignal(&sem1);
 8009350:	481e      	ldr	r0, [pc, #120]	; (80093cc <rt_test_007_001_execute+0xdc>)
 8009352:	f7fa fb45 	bl	80039e0 <chSemSignal>
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 8009356:	f7ff ff4b 	bl	80091f0 <osalSysLock.lto_priv.3>
 800935a:	481c      	ldr	r0, [pc, #112]	; (80093cc <rt_test_007_001_execute+0xdc>)
 800935c:	f7ff fed0 	bl	8009100 <chSemGetCounterI.lto_priv.1>
 8009360:	4603      	mov	r3, r0
 8009362:	2b01      	cmp	r3, #1
 8009364:	bf0c      	ite	eq
 8009366:	2301      	moveq	r3, #1
 8009368:	2300      	movne	r3, #0
 800936a:	b2db      	uxtb	r3, r3
 800936c:	4918      	ldr	r1, [pc, #96]	; (80093d0 <rt_test_007_001_execute+0xe0>)
 800936e:	4618      	mov	r0, r3
 8009370:	f7fd ff3e 	bl	80071f0 <__test_assert>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d002      	beq.n	8009380 <rt_test_007_001_execute+0x90>
 800937a:	f7ff ff41 	bl	8009200 <osalSysUnlock.lto_priv.3>
 800937e:	e01f      	b.n	80093c0 <rt_test_007_001_execute+0xd0>
 8009380:	f7ff ff3e 	bl	8009200 <osalSysUnlock.lto_priv.3>
  }
  test_end_step(2);

  /* [7.1.3] The function chSemReset() is invoked, after return the
     counter is tested.*/
  test_set_step(3);
 8009384:	4b10      	ldr	r3, [pc, #64]	; (80093c8 <rt_test_007_001_execute+0xd8>)
 8009386:	2203      	movs	r2, #3
 8009388:	601a      	str	r2, [r3, #0]
  {
    chSemReset(&sem1, 2);
 800938a:	2102      	movs	r1, #2
 800938c:	480f      	ldr	r0, [pc, #60]	; (80093cc <rt_test_007_001_execute+0xdc>)
 800938e:	f7ff fea7 	bl	80090e0 <chSemReset.lto_priv.0>
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 8009392:	f7ff ff2d 	bl	80091f0 <osalSysLock.lto_priv.3>
 8009396:	480d      	ldr	r0, [pc, #52]	; (80093cc <rt_test_007_001_execute+0xdc>)
 8009398:	f7ff feb2 	bl	8009100 <chSemGetCounterI.lto_priv.1>
 800939c:	4603      	mov	r3, r0
 800939e:	2b02      	cmp	r3, #2
 80093a0:	bf0c      	ite	eq
 80093a2:	2301      	moveq	r3, #1
 80093a4:	2300      	movne	r3, #0
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	4909      	ldr	r1, [pc, #36]	; (80093d0 <rt_test_007_001_execute+0xe0>)
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fd ff20 	bl	80071f0 <__test_assert>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <rt_test_007_001_execute+0xcc>
 80093b6:	f7ff ff23 	bl	8009200 <osalSysUnlock.lto_priv.3>
 80093ba:	e001      	b.n	80093c0 <rt_test_007_001_execute+0xd0>
 80093bc:	f7ff ff20 	bl	8009200 <osalSysUnlock.lto_priv.3>
  }
  test_end_step(3);
}
 80093c0:	b003      	add	sp, #12
 80093c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80093c6:	bf00      	nop
 80093c8:	20000c6c 	.word	0x20000c6c
 80093cc:	20001520 	.word	0x20001520
 80093d0:	0801e224 	.word	0x0801e224
 80093d4:	0801e1ec 	.word	0x0801e1ec
	...

080093e0 <rt_test_007_002_setup>:
 * - [7.2.2] The semaphore is signaled 5 times. The thread activation
 *   sequence is tested.
 * .
 */

static void rt_test_007_002_setup(void) {
 80093e0:	b508      	push	{r3, lr}
  chSemObjectInit(&sem1, 0);
 80093e2:	2100      	movs	r1, #0
 80093e4:	4802      	ldr	r0, [pc, #8]	; (80093f0 <rt_test_007_002_setup+0x10>)
 80093e6:	f7fa fa2b 	bl	8003840 <chSemObjectInit>
}
 80093ea:	bf00      	nop
 80093ec:	bd08      	pop	{r3, pc}
 80093ee:	bf00      	nop
 80093f0:	20001520 	.word	0x20001520
	...

08009400 <rt_test_007_002_execute>:

static void rt_test_007_002_execute(void) {
 8009400:	b510      	push	{r4, lr}
 8009402:	b082      	sub	sp, #8

  /* [7.2.1] Five threads are created with mixed priority levels (not
     increasing nor decreasing). Threads enqueue on a semaphore
     initialized to zero.*/
  test_set_step(1);
 8009404:	4b39      	ldr	r3, [pc, #228]	; (80094ec <rt_test_007_002_execute+0xec>)
 8009406:	2201      	movs	r2, #1
 8009408:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800940a:	4b39      	ldr	r3, [pc, #228]	; (80094f0 <rt_test_007_002_execute+0xf0>)
 800940c:	681c      	ldr	r4, [r3, #0]
 800940e:	f7ff fe5f 	bl	80090d0 <chThdGetPriorityX.lto_priv.2>
 8009412:	4603      	mov	r3, r0
 8009414:	1d5a      	adds	r2, r3, #5
 8009416:	4b37      	ldr	r3, [pc, #220]	; (80094f4 <rt_test_007_002_execute+0xf4>)
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	4b37      	ldr	r3, [pc, #220]	; (80094f8 <rt_test_007_002_execute+0xf8>)
 800941c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009420:	4620      	mov	r0, r4
 8009422:	f7f9 fec5 	bl	80031b0 <chThdCreateStatic>
 8009426:	4603      	mov	r3, r0
 8009428:	4a34      	ldr	r2, [pc, #208]	; (80094fc <rt_test_007_002_execute+0xfc>)
 800942a:	6013      	str	r3, [r2, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 800942c:	4b30      	ldr	r3, [pc, #192]	; (80094f0 <rt_test_007_002_execute+0xf0>)
 800942e:	685c      	ldr	r4, [r3, #4]
 8009430:	f7ff fe4e 	bl	80090d0 <chThdGetPriorityX.lto_priv.2>
 8009434:	4603      	mov	r3, r0
 8009436:	1c5a      	adds	r2, r3, #1
 8009438:	4b31      	ldr	r3, [pc, #196]	; (8009500 <rt_test_007_002_execute+0x100>)
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	4b2e      	ldr	r3, [pc, #184]	; (80094f8 <rt_test_007_002_execute+0xf8>)
 800943e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009442:	4620      	mov	r0, r4
 8009444:	f7f9 feb4 	bl	80031b0 <chThdCreateStatic>
 8009448:	4603      	mov	r3, r0
 800944a:	4a2c      	ldr	r2, [pc, #176]	; (80094fc <rt_test_007_002_execute+0xfc>)
 800944c:	6053      	str	r3, [r2, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 800944e:	4b28      	ldr	r3, [pc, #160]	; (80094f0 <rt_test_007_002_execute+0xf0>)
 8009450:	689c      	ldr	r4, [r3, #8]
 8009452:	f7ff fe3d 	bl	80090d0 <chThdGetPriorityX.lto_priv.2>
 8009456:	4603      	mov	r3, r0
 8009458:	1cda      	adds	r2, r3, #3
 800945a:	4b2a      	ldr	r3, [pc, #168]	; (8009504 <rt_test_007_002_execute+0x104>)
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	4b26      	ldr	r3, [pc, #152]	; (80094f8 <rt_test_007_002_execute+0xf8>)
 8009460:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009464:	4620      	mov	r0, r4
 8009466:	f7f9 fea3 	bl	80031b0 <chThdCreateStatic>
 800946a:	4603      	mov	r3, r0
 800946c:	4a23      	ldr	r2, [pc, #140]	; (80094fc <rt_test_007_002_execute+0xfc>)
 800946e:	6093      	str	r3, [r2, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8009470:	4b1f      	ldr	r3, [pc, #124]	; (80094f0 <rt_test_007_002_execute+0xf0>)
 8009472:	68dc      	ldr	r4, [r3, #12]
 8009474:	f7ff fe2c 	bl	80090d0 <chThdGetPriorityX.lto_priv.2>
 8009478:	4603      	mov	r3, r0
 800947a:	1d1a      	adds	r2, r3, #4
 800947c:	4b22      	ldr	r3, [pc, #136]	; (8009508 <rt_test_007_002_execute+0x108>)
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	4b1d      	ldr	r3, [pc, #116]	; (80094f8 <rt_test_007_002_execute+0xf8>)
 8009482:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009486:	4620      	mov	r0, r4
 8009488:	f7f9 fe92 	bl	80031b0 <chThdCreateStatic>
 800948c:	4603      	mov	r3, r0
 800948e:	4a1b      	ldr	r2, [pc, #108]	; (80094fc <rt_test_007_002_execute+0xfc>)
 8009490:	60d3      	str	r3, [r2, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8009492:	4b17      	ldr	r3, [pc, #92]	; (80094f0 <rt_test_007_002_execute+0xf0>)
 8009494:	691c      	ldr	r4, [r3, #16]
 8009496:	f7ff fe1b 	bl	80090d0 <chThdGetPriorityX.lto_priv.2>
 800949a:	4603      	mov	r3, r0
 800949c:	1c9a      	adds	r2, r3, #2
 800949e:	4b1b      	ldr	r3, [pc, #108]	; (800950c <rt_test_007_002_execute+0x10c>)
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	4b15      	ldr	r3, [pc, #84]	; (80094f8 <rt_test_007_002_execute+0xf8>)
 80094a4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80094a8:	4620      	mov	r0, r4
 80094aa:	f7f9 fe81 	bl	80031b0 <chThdCreateStatic>
 80094ae:	4603      	mov	r3, r0
 80094b0:	4a12      	ldr	r2, [pc, #72]	; (80094fc <rt_test_007_002_execute+0xfc>)
 80094b2:	6113      	str	r3, [r2, #16]
  }
  test_end_step(1);

  /* [7.2.2] The semaphore is signaled 5 times. The thread activation
     sequence is tested.*/
  test_set_step(2);
 80094b4:	4b0d      	ldr	r3, [pc, #52]	; (80094ec <rt_test_007_002_execute+0xec>)
 80094b6:	2202      	movs	r2, #2
 80094b8:	601a      	str	r2, [r3, #0]
  {
    chSemSignal(&sem1);
 80094ba:	4815      	ldr	r0, [pc, #84]	; (8009510 <rt_test_007_002_execute+0x110>)
 80094bc:	f7fa fa90 	bl	80039e0 <chSemSignal>
    chSemSignal(&sem1);
 80094c0:	4813      	ldr	r0, [pc, #76]	; (8009510 <rt_test_007_002_execute+0x110>)
 80094c2:	f7fa fa8d 	bl	80039e0 <chSemSignal>
    chSemSignal(&sem1);
 80094c6:	4812      	ldr	r0, [pc, #72]	; (8009510 <rt_test_007_002_execute+0x110>)
 80094c8:	f7fa fa8a 	bl	80039e0 <chSemSignal>
    chSemSignal(&sem1);
 80094cc:	4810      	ldr	r0, [pc, #64]	; (8009510 <rt_test_007_002_execute+0x110>)
 80094ce:	f7fa fa87 	bl	80039e0 <chSemSignal>
    chSemSignal(&sem1);
 80094d2:	480f      	ldr	r0, [pc, #60]	; (8009510 <rt_test_007_002_execute+0x110>)
 80094d4:	f7fa fa84 	bl	80039e0 <chSemSignal>
    test_wait_threads();
 80094d8:	f7fe fa5a 	bl	8007990 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
    test_assert_sequence("ADCEB", "invalid sequence");
#else
    test_assert_sequence("ABCDE", "invalid sequence");
 80094dc:	490d      	ldr	r1, [pc, #52]	; (8009514 <rt_test_007_002_execute+0x114>)
 80094de:	480e      	ldr	r0, [pc, #56]	; (8009518 <rt_test_007_002_execute+0x118>)
 80094e0:	f7fd fe9e 	bl	8007220 <__test_assert_sequence>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
#endif
  }
  test_end_step(2);
}
 80094e8:	b002      	add	sp, #8
 80094ea:	bd10      	pop	{r4, pc}
 80094ec:	20000c6c 	.word	0x20000c6c
 80094f0:	0801d708 	.word	0x0801d708
 80094f4:	0801e0ec 	.word	0x0801e0ec
 80094f8:	08009211 	.word	0x08009211
 80094fc:	20001508 	.word	0x20001508
 8009500:	0801e0e8 	.word	0x0801e0e8
 8009504:	0801e0e4 	.word	0x0801e0e4
 8009508:	0801e0e0 	.word	0x0801e0e0
 800950c:	0801e108 	.word	0x0801e108
 8009510:	20001520 	.word	0x20001520
 8009514:	0801e0f0 	.word	0x0801e0f0
 8009518:	0801e104 	.word	0x0801e104
 800951c:	00000000 	.word	0x00000000

08009520 <rt_test_007_003_setup>:
 * - [7.3.2] Testing non-timeout condition.
 * - [7.3.3] Testing timeout condition.
 * .
 */

static void rt_test_007_003_setup(void) {
 8009520:	b508      	push	{r3, lr}
  chSemObjectInit(&sem1, 0);
 8009522:	2100      	movs	r1, #0
 8009524:	4802      	ldr	r0, [pc, #8]	; (8009530 <rt_test_007_003_setup+0x10>)
 8009526:	f7fa f98b 	bl	8003840 <chSemObjectInit>
}
 800952a:	bf00      	nop
 800952c:	bd08      	pop	{r3, pc}
 800952e:	bf00      	nop
 8009530:	20001520 	.word	0x20001520
	...

08009540 <rt_test_007_003_execute>:

static void rt_test_007_003_execute(void) {
 8009540:	b510      	push	{r4, lr}
 8009542:	b086      	sub	sp, #24
  unsigned i;
  systime_t target_time;
  msg_t msg;

  /* [7.3.1] Testing special case TIME_IMMEDIATE.*/
  test_set_step(1);
 8009544:	4b68      	ldr	r3, [pc, #416]	; (80096e8 <rt_test_007_003_execute+0x1a8>)
 8009546:	2201      	movs	r2, #1
 8009548:	601a      	str	r2, [r3, #0]
  {
    msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 800954a:	2100      	movs	r1, #0
 800954c:	4867      	ldr	r0, [pc, #412]	; (80096ec <rt_test_007_003_execute+0x1ac>)
 800954e:	f7fa f9f7 	bl	8003940 <chSemWaitTimeout>
 8009552:	9004      	str	r0, [sp, #16]
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8009554:	9b04      	ldr	r3, [sp, #16]
 8009556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955a:	bf0c      	ite	eq
 800955c:	2301      	moveq	r3, #1
 800955e:	2300      	movne	r3, #0
 8009560:	b2db      	uxtb	r3, r3
 8009562:	4963      	ldr	r1, [pc, #396]	; (80096f0 <rt_test_007_003_execute+0x1b0>)
 8009564:	4618      	mov	r0, r3
 8009566:	f7fd fe43 	bl	80071f0 <__test_assert>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	f040 80b9 	bne.w	80096e4 <rt_test_007_003_execute+0x1a4>
    test_assert(ch_queue_isempty(&sem1.queue), "queue not empty");
 8009572:	485e      	ldr	r0, [pc, #376]	; (80096ec <rt_test_007_003_execute+0x1ac>)
 8009574:	f7ff fd74 	bl	8009060 <ch_queue_isempty.lto_priv.0>
 8009578:	4603      	mov	r3, r0
 800957a:	495e      	ldr	r1, [pc, #376]	; (80096f4 <rt_test_007_003_execute+0x1b4>)
 800957c:	4618      	mov	r0, r3
 800957e:	f7fd fe37 	bl	80071f0 <__test_assert>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	f040 80ad 	bne.w	80096e4 <rt_test_007_003_execute+0x1a4>
    test_assert(sem1.cnt == 0, "counter not zero");
 800958a:	4b58      	ldr	r3, [pc, #352]	; (80096ec <rt_test_007_003_execute+0x1ac>)
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	bf0c      	ite	eq
 8009592:	2301      	moveq	r3, #1
 8009594:	2300      	movne	r3, #0
 8009596:	b2db      	uxtb	r3, r3
 8009598:	4957      	ldr	r1, [pc, #348]	; (80096f8 <rt_test_007_003_execute+0x1b8>)
 800959a:	4618      	mov	r0, r3
 800959c:	f7fd fe28 	bl	80071f0 <__test_assert>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f040 809e 	bne.w	80096e4 <rt_test_007_003_execute+0x1a4>
  }
  test_end_step(1);

  /* [7.3.2] Testing non-timeout condition.*/
  test_set_step(2);
 80095a8:	4b4f      	ldr	r3, [pc, #316]	; (80096e8 <rt_test_007_003_execute+0x1a8>)
 80095aa:	2202      	movs	r2, #2
 80095ac:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80095ae:	4b53      	ldr	r3, [pc, #332]	; (80096fc <rt_test_007_003_execute+0x1bc>)
 80095b0:	681c      	ldr	r4, [r3, #0]
 80095b2:	f7ff fd8d 	bl	80090d0 <chThdGetPriorityX.lto_priv.2>
 80095b6:	4603      	mov	r3, r0
 80095b8:	1e5a      	subs	r2, r3, #1
 80095ba:	2300      	movs	r3, #0
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	4b50      	ldr	r3, [pc, #320]	; (8009700 <rt_test_007_003_execute+0x1c0>)
 80095c0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80095c4:	4620      	mov	r0, r4
 80095c6:	f7f9 fdf3 	bl	80031b0 <chThdCreateStatic>
 80095ca:	4603      	mov	r3, r0
 80095cc:	4a4d      	ldr	r2, [pc, #308]	; (8009704 <rt_test_007_003_execute+0x1c4>)
 80095ce:	6013      	str	r3, [r2, #0]
                                   thread2, 0);
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 80095d0:	f241 3188 	movw	r1, #5000	; 0x1388
 80095d4:	4845      	ldr	r0, [pc, #276]	; (80096ec <rt_test_007_003_execute+0x1ac>)
 80095d6:	f7fa f9b3 	bl	8003940 <chSemWaitTimeout>
 80095da:	9004      	str	r0, [sp, #16]
    test_wait_threads();
 80095dc:	f7fe f9d8 	bl	8007990 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 80095e0:	9b04      	ldr	r3, [sp, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	bf0c      	ite	eq
 80095e6:	2301      	moveq	r3, #1
 80095e8:	2300      	movne	r3, #0
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	4940      	ldr	r1, [pc, #256]	; (80096f0 <rt_test_007_003_execute+0x1b0>)
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fd fdfe 	bl	80071f0 <__test_assert>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d174      	bne.n	80096e4 <rt_test_007_003_execute+0x1a4>
    test_assert(ch_queue_isempty(&sem1.queue), "queue not empty");
 80095fa:	483c      	ldr	r0, [pc, #240]	; (80096ec <rt_test_007_003_execute+0x1ac>)
 80095fc:	f7ff fd30 	bl	8009060 <ch_queue_isempty.lto_priv.0>
 8009600:	4603      	mov	r3, r0
 8009602:	493c      	ldr	r1, [pc, #240]	; (80096f4 <rt_test_007_003_execute+0x1b4>)
 8009604:	4618      	mov	r0, r3
 8009606:	f7fd fdf3 	bl	80071f0 <__test_assert>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d169      	bne.n	80096e4 <rt_test_007_003_execute+0x1a4>
    test_assert(sem1.cnt == 0, "counter not zero");
 8009610:	4b36      	ldr	r3, [pc, #216]	; (80096ec <rt_test_007_003_execute+0x1ac>)
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	bf0c      	ite	eq
 8009618:	2301      	moveq	r3, #1
 800961a:	2300      	movne	r3, #0
 800961c:	b2db      	uxtb	r3, r3
 800961e:	4936      	ldr	r1, [pc, #216]	; (80096f8 <rt_test_007_003_execute+0x1b8>)
 8009620:	4618      	mov	r0, r3
 8009622:	f7fd fde5 	bl	80071f0 <__test_assert>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d15b      	bne.n	80096e4 <rt_test_007_003_execute+0x1a4>
  }
  test_end_step(2);

  /* [7.3.3] Testing timeout condition.*/
  test_set_step(3);
 800962c:	4b2e      	ldr	r3, [pc, #184]	; (80096e8 <rt_test_007_003_execute+0x1a8>)
 800962e:	2203      	movs	r2, #3
 8009630:	601a      	str	r2, [r3, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 8009632:	f7fe f9d5 	bl	80079e0 <test_wait_tick>
 8009636:	4603      	mov	r3, r0
 8009638:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff fcff 	bl	8009040 <chTimeAddX.lto_priv.4>
 8009642:	9003      	str	r0, [sp, #12]
    for (i = 0; i < 5; i++) {
 8009644:	2300      	movs	r3, #0
 8009646:	9305      	str	r3, [sp, #20]
 8009648:	e036      	b.n	80096b8 <rt_test_007_003_execute+0x178>
      test_emit_token('A' + i);
 800964a:	9b05      	ldr	r3, [sp, #20]
 800964c:	b2db      	uxtb	r3, r3
 800964e:	3341      	adds	r3, #65	; 0x41
 8009650:	b2db      	uxtb	r3, r3
 8009652:	4618      	mov	r0, r3
 8009654:	f7fd fe2c 	bl	80072b0 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, TIME_MS2I(50));
 8009658:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800965c:	4823      	ldr	r0, [pc, #140]	; (80096ec <rt_test_007_003_execute+0x1ac>)
 800965e:	f7fa f96f 	bl	8003940 <chSemWaitTimeout>
 8009662:	9004      	str	r0, [sp, #16]
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8009664:	9b04      	ldr	r3, [sp, #16]
 8009666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966a:	bf0c      	ite	eq
 800966c:	2301      	moveq	r3, #1
 800966e:	2300      	movne	r3, #0
 8009670:	b2db      	uxtb	r3, r3
 8009672:	491f      	ldr	r1, [pc, #124]	; (80096f0 <rt_test_007_003_execute+0x1b0>)
 8009674:	4618      	mov	r0, r3
 8009676:	f7fd fdbb 	bl	80071f0 <__test_assert>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d131      	bne.n	80096e4 <rt_test_007_003_execute+0x1a4>
      test_assert(ch_queue_isempty(&sem1.queue), "queue not empty");
 8009680:	481a      	ldr	r0, [pc, #104]	; (80096ec <rt_test_007_003_execute+0x1ac>)
 8009682:	f7ff fced 	bl	8009060 <ch_queue_isempty.lto_priv.0>
 8009686:	4603      	mov	r3, r0
 8009688:	491a      	ldr	r1, [pc, #104]	; (80096f4 <rt_test_007_003_execute+0x1b4>)
 800968a:	4618      	mov	r0, r3
 800968c:	f7fd fdb0 	bl	80071f0 <__test_assert>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d126      	bne.n	80096e4 <rt_test_007_003_execute+0x1a4>
      test_assert(sem1.cnt == 0, "counter not zero");
 8009696:	4b15      	ldr	r3, [pc, #84]	; (80096ec <rt_test_007_003_execute+0x1ac>)
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	2b00      	cmp	r3, #0
 800969c:	bf0c      	ite	eq
 800969e:	2301      	moveq	r3, #1
 80096a0:	2300      	movne	r3, #0
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	4914      	ldr	r1, [pc, #80]	; (80096f8 <rt_test_007_003_execute+0x1b8>)
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fd fda2 	bl	80071f0 <__test_assert>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d118      	bne.n	80096e4 <rt_test_007_003_execute+0x1a4>
    for (i = 0; i < 5; i++) {
 80096b2:	9b05      	ldr	r3, [sp, #20]
 80096b4:	3301      	adds	r3, #1
 80096b6:	9305      	str	r3, [sp, #20]
 80096b8:	9b05      	ldr	r3, [sp, #20]
 80096ba:	2b04      	cmp	r3, #4
 80096bc:	d9c5      	bls.n	800964a <rt_test_007_003_execute+0x10a>
    }
    test_assert_sequence("ABCDE", "invalid sequence");
 80096be:	4912      	ldr	r1, [pc, #72]	; (8009708 <rt_test_007_003_execute+0x1c8>)
 80096c0:	4812      	ldr	r0, [pc, #72]	; (800970c <rt_test_007_003_execute+0x1cc>)
 80096c2:	f7fd fdad 	bl	8007220 <__test_assert_sequence>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10b      	bne.n	80096e4 <rt_test_007_003_execute+0x1a4>
    test_assert_time_window(target_time,
 80096cc:	2114      	movs	r1, #20
 80096ce:	9803      	ldr	r0, [sp, #12]
 80096d0:	f7ff fcb6 	bl	8009040 <chTimeAddX.lto_priv.4>
 80096d4:	4603      	mov	r3, r0
 80096d6:	4a0e      	ldr	r2, [pc, #56]	; (8009710 <rt_test_007_003_execute+0x1d0>)
 80096d8:	4619      	mov	r1, r3
 80096da:	9803      	ldr	r0, [sp, #12]
 80096dc:	f7fd fdd0 	bl	8007280 <__test_assert_time_window>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
                            chTimeAddX(target_time, ALLOWED_DELAY),
                            "out of time window");
  }
  test_end_step(3);
}
 80096e4:	b006      	add	sp, #24
 80096e6:	bd10      	pop	{r4, pc}
 80096e8:	20000c6c 	.word	0x20000c6c
 80096ec:	20001520 	.word	0x20001520
 80096f0:	0801e258 	.word	0x0801e258
 80096f4:	0801e270 	.word	0x0801e270
 80096f8:	0801e280 	.word	0x0801e280
 80096fc:	0801d708 	.word	0x0801d708
 8009700:	08009241 	.word	0x08009241
 8009704:	20001508 	.word	0x20001508
 8009708:	0801e0f0 	.word	0x0801e0f0
 800970c:	0801e104 	.word	0x0801e104
 8009710:	0801e0bc 	.word	0x0801e0bc
	...

08009720 <rt_test_007_004_setup>:
 * - [7.4.2] The semaphore counter is increased by two, it is then
 *   tested to be one, the thread must have completed.
 * .
 */

static void rt_test_007_004_setup(void) {
 8009720:	b508      	push	{r3, lr}
  chSemObjectInit(&sem1, 0);
 8009722:	2100      	movs	r1, #0
 8009724:	4802      	ldr	r0, [pc, #8]	; (8009730 <rt_test_007_004_setup+0x10>)
 8009726:	f7fa f88b 	bl	8003840 <chSemObjectInit>
}
 800972a:	bf00      	nop
 800972c:	bd08      	pop	{r3, pc}
 800972e:	bf00      	nop
 8009730:	20001520 	.word	0x20001520
	...

08009740 <rt_test_007_004_execute>:

static void rt_test_007_004_execute(void) {
 8009740:	b510      	push	{r4, lr}
 8009742:	b082      	sub	sp, #8

  /* [7.4.1] A thread is created, it goes to wait on the semaphore.*/
  test_set_step(1);
 8009744:	4b20      	ldr	r3, [pc, #128]	; (80097c8 <rt_test_007_004_execute+0x88>)
 8009746:	2201      	movs	r2, #1
 8009748:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800974a:	4b20      	ldr	r3, [pc, #128]	; (80097cc <rt_test_007_004_execute+0x8c>)
 800974c:	681c      	ldr	r4, [r3, #0]
 800974e:	f7ff fcbf 	bl	80090d0 <chThdGetPriorityX.lto_priv.2>
 8009752:	4603      	mov	r3, r0
 8009754:	1c5a      	adds	r2, r3, #1
 8009756:	4b1e      	ldr	r3, [pc, #120]	; (80097d0 <rt_test_007_004_execute+0x90>)
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	4b1e      	ldr	r3, [pc, #120]	; (80097d4 <rt_test_007_004_execute+0x94>)
 800975c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009760:	4620      	mov	r0, r4
 8009762:	f7f9 fd25 	bl	80031b0 <chThdCreateStatic>
 8009766:	4603      	mov	r3, r0
 8009768:	4a1b      	ldr	r2, [pc, #108]	; (80097d8 <rt_test_007_004_execute+0x98>)
 800976a:	6013      	str	r3, [r2, #0]
  }
  test_end_step(1);

  /* [7.4.2] The semaphore counter is increased by two, it is then
     tested to be one, the thread must have completed.*/
  test_set_step(2);
 800976c:	4b16      	ldr	r3, [pc, #88]	; (80097c8 <rt_test_007_004_execute+0x88>)
 800976e:	2202      	movs	r2, #2
 8009770:	601a      	str	r2, [r3, #0]
  {
    chSysLock();
 8009772:	f7ff fc85 	bl	8009080 <chSysLock.lto_priv.23>
    chSemAddCounterI(&sem1, 2);
 8009776:	2102      	movs	r1, #2
 8009778:	4818      	ldr	r0, [pc, #96]	; (80097dc <rt_test_007_004_execute+0x9c>)
 800977a:	f7fa f971 	bl	8003a60 <chSemAddCounterI>
    chSchRescheduleS();
 800977e:	f7f9 f9f7 	bl	8002b70 <chSchRescheduleS>
    chSysUnlock();
 8009782:	f7ff fc8d 	bl	80090a0 <chSysUnlock.lto_priv.23>
    test_wait_threads();
 8009786:	f7fe f903 	bl	8007990 <test_wait_threads>
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 800978a:	f7ff fd31 	bl	80091f0 <osalSysLock.lto_priv.3>
 800978e:	4813      	ldr	r0, [pc, #76]	; (80097dc <rt_test_007_004_execute+0x9c>)
 8009790:	f7ff fcb6 	bl	8009100 <chSemGetCounterI.lto_priv.1>
 8009794:	4603      	mov	r3, r0
 8009796:	2b01      	cmp	r3, #1
 8009798:	bf0c      	ite	eq
 800979a:	2301      	moveq	r3, #1
 800979c:	2300      	movne	r3, #0
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	490f      	ldr	r1, [pc, #60]	; (80097e0 <rt_test_007_004_execute+0xa0>)
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fd fd24 	bl	80071f0 <__test_assert>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d002      	beq.n	80097b4 <rt_test_007_004_execute+0x74>
 80097ae:	f7ff fd27 	bl	8009200 <osalSysUnlock.lto_priv.3>
 80097b2:	e007      	b.n	80097c4 <rt_test_007_004_execute+0x84>
 80097b4:	f7ff fd24 	bl	8009200 <osalSysUnlock.lto_priv.3>
    test_assert_sequence("A", "invalid sequence");
 80097b8:	490a      	ldr	r1, [pc, #40]	; (80097e4 <rt_test_007_004_execute+0xa4>)
 80097ba:	4805      	ldr	r0, [pc, #20]	; (80097d0 <rt_test_007_004_execute+0x90>)
 80097bc:	f7fd fd30 	bl	8007220 <__test_assert_sequence>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
  }
  test_end_step(2);
}
 80097c4:	b002      	add	sp, #8
 80097c6:	bd10      	pop	{r4, pc}
 80097c8:	20000c6c 	.word	0x20000c6c
 80097cc:	0801d708 	.word	0x0801d708
 80097d0:	0801e0ec 	.word	0x0801e0ec
 80097d4:	08009211 	.word	0x08009211
 80097d8:	20001508 	.word	0x20001508
 80097dc:	20001520 	.word	0x20001520
 80097e0:	0801e2a4 	.word	0x0801e2a4
 80097e4:	0801e0f0 	.word	0x0801e0f0
	...

080097f0 <rt_test_007_005_setup>:
 *   specifying the same semaphore for the wait and signal phases. The
 *   counter value must be one on exit.
 * .
 */

static void rt_test_007_005_setup(void) {
 80097f0:	b508      	push	{r3, lr}
  chSemObjectInit(&sem1, 0);
 80097f2:	2100      	movs	r1, #0
 80097f4:	4802      	ldr	r0, [pc, #8]	; (8009800 <rt_test_007_005_setup+0x10>)
 80097f6:	f7fa f823 	bl	8003840 <chSemObjectInit>
}
 80097fa:	bf00      	nop
 80097fc:	bd08      	pop	{r3, pc}
 80097fe:	bf00      	nop
 8009800:	20001520 	.word	0x20001520
	...

08009810 <rt_test_007_005_teardown>:

static void rt_test_007_005_teardown(void) {
 8009810:	b508      	push	{r3, lr}
  test_wait_threads();
 8009812:	f7fe f8bd 	bl	8007990 <test_wait_threads>
}
 8009816:	bf00      	nop
 8009818:	bd08      	pop	{r3, pc}
 800981a:	bf00      	nop
 800981c:	0000      	movs	r0, r0
	...

08009820 <rt_test_007_005_execute>:

static void rt_test_007_005_execute(void) {
 8009820:	b510      	push	{r4, lr}
 8009822:	b082      	sub	sp, #8

  /* [7.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8009824:	4b2a      	ldr	r3, [pc, #168]	; (80098d0 <rt_test_007_005_execute+0xb0>)
 8009826:	2201      	movs	r2, #1
 8009828:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 800982a:	4b2a      	ldr	r3, [pc, #168]	; (80098d4 <rt_test_007_005_execute+0xb4>)
 800982c:	681c      	ldr	r4, [r3, #0]
 800982e:	f7ff fc4f 	bl	80090d0 <chThdGetPriorityX.lto_priv.2>
 8009832:	4603      	mov	r3, r0
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	2300      	movs	r3, #0
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	4b27      	ldr	r3, [pc, #156]	; (80098d8 <rt_test_007_005_execute+0xb8>)
 800983c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009840:	4620      	mov	r0, r4
 8009842:	f7f9 fcb5 	bl	80031b0 <chThdCreateStatic>
 8009846:	4603      	mov	r3, r0
 8009848:	4a24      	ldr	r2, [pc, #144]	; (80098dc <rt_test_007_005_execute+0xbc>)
 800984a:	6013      	str	r3, [r2, #0]
  test_end_step(1);

  /* [7.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 800984c:	4b20      	ldr	r3, [pc, #128]	; (80098d0 <rt_test_007_005_execute+0xb0>)
 800984e:	2202      	movs	r2, #2
 8009850:	601a      	str	r2, [r3, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8009852:	4923      	ldr	r1, [pc, #140]	; (80098e0 <rt_test_007_005_execute+0xc0>)
 8009854:	4822      	ldr	r0, [pc, #136]	; (80098e0 <rt_test_007_005_execute+0xc0>)
 8009856:	f7fa f92b 	bl	8003ab0 <chSemSignalWait>
    test_assert(ch_queue_isempty(&sem1.queue), "queue not empty");
 800985a:	4821      	ldr	r0, [pc, #132]	; (80098e0 <rt_test_007_005_execute+0xc0>)
 800985c:	f7ff fc00 	bl	8009060 <ch_queue_isempty.lto_priv.0>
 8009860:	4603      	mov	r3, r0
 8009862:	4920      	ldr	r1, [pc, #128]	; (80098e4 <rt_test_007_005_execute+0xc4>)
 8009864:	4618      	mov	r0, r3
 8009866:	f7fd fcc3 	bl	80071f0 <__test_assert>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d12c      	bne.n	80098ca <rt_test_007_005_execute+0xaa>
    test_assert(sem1.cnt == 0, "counter not zero");
 8009870:	4b1b      	ldr	r3, [pc, #108]	; (80098e0 <rt_test_007_005_execute+0xc0>)
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	2b00      	cmp	r3, #0
 8009876:	bf0c      	ite	eq
 8009878:	2301      	moveq	r3, #1
 800987a:	2300      	movne	r3, #0
 800987c:	b2db      	uxtb	r3, r3
 800987e:	491a      	ldr	r1, [pc, #104]	; (80098e8 <rt_test_007_005_execute+0xc8>)
 8009880:	4618      	mov	r0, r3
 8009882:	f7fd fcb5 	bl	80071f0 <__test_assert>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d11e      	bne.n	80098ca <rt_test_007_005_execute+0xaa>
  test_end_step(2);

  /* [7.5.3] The function chSemSignalWait() is invoked again by
     specifying the same semaphore for the wait and signal phases. The
     counter value must be one on exit.*/
  test_set_step(3);
 800988c:	4b10      	ldr	r3, [pc, #64]	; (80098d0 <rt_test_007_005_execute+0xb0>)
 800988e:	2203      	movs	r2, #3
 8009890:	601a      	str	r2, [r3, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8009892:	4913      	ldr	r1, [pc, #76]	; (80098e0 <rt_test_007_005_execute+0xc0>)
 8009894:	4812      	ldr	r0, [pc, #72]	; (80098e0 <rt_test_007_005_execute+0xc0>)
 8009896:	f7fa f90b 	bl	8003ab0 <chSemSignalWait>
    test_assert(ch_queue_isempty(&sem1.queue), "queue not empty");
 800989a:	4811      	ldr	r0, [pc, #68]	; (80098e0 <rt_test_007_005_execute+0xc0>)
 800989c:	f7ff fbe0 	bl	8009060 <ch_queue_isempty.lto_priv.0>
 80098a0:	4603      	mov	r3, r0
 80098a2:	4910      	ldr	r1, [pc, #64]	; (80098e4 <rt_test_007_005_execute+0xc4>)
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fd fca3 	bl	80071f0 <__test_assert>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10c      	bne.n	80098ca <rt_test_007_005_execute+0xaa>
    test_assert(sem1.cnt == 0, "counter not zero");
 80098b0:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <rt_test_007_005_execute+0xc0>)
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	bf0c      	ite	eq
 80098b8:	2301      	moveq	r3, #1
 80098ba:	2300      	movne	r3, #0
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	490a      	ldr	r1, [pc, #40]	; (80098e8 <rt_test_007_005_execute+0xc8>)
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fd fc95 	bl	80071f0 <__test_assert>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
  }
  test_end_step(3);
}
 80098ca:	b002      	add	sp, #8
 80098cc:	bd10      	pop	{r4, pc}
 80098ce:	bf00      	nop
 80098d0:	20000c6c 	.word	0x20000c6c
 80098d4:	0801d708 	.word	0x0801d708
 80098d8:	08009271 	.word	0x08009271
 80098dc:	20001508 	.word	0x20001508
 80098e0:	20001520 	.word	0x20001520
 80098e4:	0801e270 	.word	0x0801e270
 80098e8:	0801e280 	.word	0x0801e280
 80098ec:	00000000 	.word	0x00000000

080098f0 <rt_test_007_006_teardown>:
 * - [7.6.6] Signaling the binary semaphore again, the internal state
 *   must not change from "not taken".
 * .
 */

static void rt_test_007_006_teardown(void) {
 80098f0:	b508      	push	{r3, lr}
  test_wait_threads();
 80098f2:	f7fe f84d 	bl	8007990 <test_wait_threads>
}
 80098f6:	bf00      	nop
 80098f8:	bd08      	pop	{r3, pc}
 80098fa:	bf00      	nop
 80098fc:	0000      	movs	r0, r0
	...

08009900 <rt_test_007_006_execute>:

static void rt_test_007_006_execute(void) {
 8009900:	b510      	push	{r4, lr}
 8009902:	b086      	sub	sp, #24
  binary_semaphore_t bsem;
  msg_t msg;

  /* [7.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8009904:	4b76      	ldr	r3, [pc, #472]	; (8009ae0 <rt_test_007_006_execute+0x1e0>)
 8009906:	2201      	movs	r2, #1
 8009908:	601a      	str	r2, [r3, #0]
  {
    chBSemObjectInit(&bsem, true);
 800990a:	ab02      	add	r3, sp, #8
 800990c:	2101      	movs	r1, #1
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff fbfe 	bl	8009110 <chBSemObjectInit>
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8009914:	f7ff fc6c 	bl	80091f0 <osalSysLock.lto_priv.3>
 8009918:	ab02      	add	r3, sp, #8
 800991a:	4618      	mov	r0, r3
 800991c:	f7ff fc58 	bl	80091d0 <chBSemGetStateI>
 8009920:	4603      	mov	r3, r0
 8009922:	4970      	ldr	r1, [pc, #448]	; (8009ae4 <rt_test_007_006_execute+0x1e4>)
 8009924:	4618      	mov	r0, r3
 8009926:	f7fd fc63 	bl	80071f0 <__test_assert>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <rt_test_007_006_execute+0x36>
 8009930:	f7ff fc66 	bl	8009200 <osalSysUnlock.lto_priv.3>
 8009934:	e0d2      	b.n	8009adc <rt_test_007_006_execute+0x1dc>
 8009936:	f7ff fc63 	bl	8009200 <osalSysUnlock.lto_priv.3>
  }
  test_end_step(1);

  /* [7.6.2] Resetting the binary semaphore in "taken" state, the state
     must not change.*/
  test_set_step(2);
 800993a:	4b69      	ldr	r3, [pc, #420]	; (8009ae0 <rt_test_007_006_execute+0x1e0>)
 800993c:	2202      	movs	r2, #2
 800993e:	601a      	str	r2, [r3, #0]
  {
    chBSemReset(&bsem, true);
 8009940:	ab02      	add	r3, sp, #8
 8009942:	2101      	movs	r1, #1
 8009944:	4618      	mov	r0, r3
 8009946:	f7ff fc0b 	bl	8009160 <chBSemReset>
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 800994a:	f7ff fc51 	bl	80091f0 <osalSysLock.lto_priv.3>
 800994e:	ab02      	add	r3, sp, #8
 8009950:	4618      	mov	r0, r3
 8009952:	f7ff fc3d 	bl	80091d0 <chBSemGetStateI>
 8009956:	4603      	mov	r3, r0
 8009958:	4962      	ldr	r1, [pc, #392]	; (8009ae4 <rt_test_007_006_execute+0x1e4>)
 800995a:	4618      	mov	r0, r3
 800995c:	f7fd fc48 	bl	80071f0 <__test_assert>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d002      	beq.n	800996c <rt_test_007_006_execute+0x6c>
 8009966:	f7ff fc4b 	bl	8009200 <osalSysUnlock.lto_priv.3>
 800996a:	e0b7      	b.n	8009adc <rt_test_007_006_execute+0x1dc>
 800996c:	f7ff fc48 	bl	8009200 <osalSysUnlock.lto_priv.3>
  }
  test_end_step(2);

  /* [7.6.3] Starting a signaler thread at a lower priority.*/
  test_set_step(3);
 8009970:	4b5b      	ldr	r3, [pc, #364]	; (8009ae0 <rt_test_007_006_execute+0x1e0>)
 8009972:	2203      	movs	r2, #3
 8009974:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8009976:	4b5c      	ldr	r3, [pc, #368]	; (8009ae8 <rt_test_007_006_execute+0x1e8>)
 8009978:	681c      	ldr	r4, [r3, #0]
                                   chThdGetPriorityX()-1, thread4, &bsem);
 800997a:	f7ff fba9 	bl	80090d0 <chThdGetPriorityX.lto_priv.2>
 800997e:	4603      	mov	r3, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8009980:	1e5a      	subs	r2, r3, #1
 8009982:	ab02      	add	r3, sp, #8
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	4b59      	ldr	r3, [pc, #356]	; (8009aec <rt_test_007_006_execute+0x1ec>)
 8009988:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800998c:	4620      	mov	r0, r4
 800998e:	f7f9 fc0f 	bl	80031b0 <chThdCreateStatic>
 8009992:	4603      	mov	r3, r0
 8009994:	4a56      	ldr	r2, [pc, #344]	; (8009af0 <rt_test_007_006_execute+0x1f0>)
 8009996:	6013      	str	r3, [r2, #0]
  }
  test_end_step(3);

  /* [7.6.4] Waiting for the binary semaphore to be signaled, the
     semaphore is expected to be taken.*/
  test_set_step(4);
 8009998:	4b51      	ldr	r3, [pc, #324]	; (8009ae0 <rt_test_007_006_execute+0x1e0>)
 800999a:	2204      	movs	r2, #4
 800999c:	601a      	str	r2, [r3, #0]
  {
    msg = chBSemWait(&bsem);
 800999e:	ab02      	add	r3, sp, #8
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7ff fbcd 	bl	8009140 <chBSemWait>
 80099a6:	9005      	str	r0, [sp, #20]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80099a8:	f7ff fc22 	bl	80091f0 <osalSysLock.lto_priv.3>
 80099ac:	ab02      	add	r3, sp, #8
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff fc0e 	bl	80091d0 <chBSemGetStateI>
 80099b4:	4603      	mov	r3, r0
 80099b6:	494b      	ldr	r1, [pc, #300]	; (8009ae4 <rt_test_007_006_execute+0x1e4>)
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fd fc19 	bl	80071f0 <__test_assert>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <rt_test_007_006_execute+0xca>
 80099c4:	f7ff fc1c 	bl	8009200 <osalSysUnlock.lto_priv.3>
 80099c8:	e088      	b.n	8009adc <rt_test_007_006_execute+0x1dc>
 80099ca:	f7ff fc19 	bl	8009200 <osalSysUnlock.lto_priv.3>
    test_assert(msg == MSG_OK, "unexpected message");
 80099ce:	9b05      	ldr	r3, [sp, #20]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	bf0c      	ite	eq
 80099d4:	2301      	moveq	r3, #1
 80099d6:	2300      	movne	r3, #0
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	4946      	ldr	r1, [pc, #280]	; (8009af4 <rt_test_007_006_execute+0x1f4>)
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fd fc07 	bl	80071f0 <__test_assert>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d179      	bne.n	8009adc <rt_test_007_006_execute+0x1dc>
  test_end_step(4);

  /* [7.6.5] Signaling the binary semaphore, checking the binary
     semaphore state to be "not taken" and the underlying counter
     semaphore counter to be one.*/
  test_set_step(5);
 80099e8:	4b3d      	ldr	r3, [pc, #244]	; (8009ae0 <rt_test_007_006_execute+0x1e0>)
 80099ea:	2205      	movs	r2, #5
 80099ec:	601a      	str	r2, [r3, #0]
  {
    chBSemSignal(&bsem);
 80099ee:	ab02      	add	r3, sp, #8
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff fbdd 	bl	80091b0 <chBSemSignal>
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 80099f6:	f7ff fbfb 	bl	80091f0 <osalSysLock.lto_priv.3>
 80099fa:	ab02      	add	r3, sp, #8
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7ff fbe7 	bl	80091d0 <chBSemGetStateI>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	bf14      	ite	ne
 8009a08:	2301      	movne	r3, #1
 8009a0a:	2300      	moveq	r3, #0
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	f083 0301 	eor.w	r3, r3, #1
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	4937      	ldr	r1, [pc, #220]	; (8009af8 <rt_test_007_006_execute+0x1f8>)
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fd fbe7 	bl	80071f0 <__test_assert>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <rt_test_007_006_execute+0x12e>
 8009a28:	f7ff fbea 	bl	8009200 <osalSysUnlock.lto_priv.3>
 8009a2c:	e056      	b.n	8009adc <rt_test_007_006_execute+0x1dc>
 8009a2e:	f7ff fbe7 	bl	8009200 <osalSysUnlock.lto_priv.3>
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8009a32:	f7ff fbdd 	bl	80091f0 <osalSysLock.lto_priv.3>
 8009a36:	ab02      	add	r3, sp, #8
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7ff fb61 	bl	8009100 <chSemGetCounterI.lto_priv.1>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	bf0c      	ite	eq
 8009a44:	2301      	moveq	r3, #1
 8009a46:	2300      	movne	r3, #0
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	492c      	ldr	r1, [pc, #176]	; (8009afc <rt_test_007_006_execute+0x1fc>)
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fd fbcf 	bl	80071f0 <__test_assert>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <rt_test_007_006_execute+0x15e>
 8009a58:	f7ff fbd2 	bl	8009200 <osalSysUnlock.lto_priv.3>
 8009a5c:	e03e      	b.n	8009adc <rt_test_007_006_execute+0x1dc>
 8009a5e:	f7ff fbcf 	bl	8009200 <osalSysUnlock.lto_priv.3>
  }
  test_end_step(5);

  /* [7.6.6] Signaling the binary semaphore again, the internal state
     must not change from "not taken".*/
  test_set_step(6);
 8009a62:	4b1f      	ldr	r3, [pc, #124]	; (8009ae0 <rt_test_007_006_execute+0x1e0>)
 8009a64:	2206      	movs	r2, #6
 8009a66:	601a      	str	r2, [r3, #0]
  {
    chBSemSignal(&bsem);
 8009a68:	ab02      	add	r3, sp, #8
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff fba0 	bl	80091b0 <chBSemSignal>
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 8009a70:	f7ff fbbe 	bl	80091f0 <osalSysLock.lto_priv.3>
 8009a74:	ab02      	add	r3, sp, #8
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7ff fbaa 	bl	80091d0 <chBSemGetStateI>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	bf14      	ite	ne
 8009a82:	2301      	movne	r3, #1
 8009a84:	2300      	moveq	r3, #0
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	f083 0301 	eor.w	r3, r3, #1
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	491a      	ldr	r1, [pc, #104]	; (8009b00 <rt_test_007_006_execute+0x200>)
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fd fbaa 	bl	80071f0 <__test_assert>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <rt_test_007_006_execute+0x1a8>
 8009aa2:	f7ff fbad 	bl	8009200 <osalSysUnlock.lto_priv.3>
 8009aa6:	e019      	b.n	8009adc <rt_test_007_006_execute+0x1dc>
 8009aa8:	f7ff fbaa 	bl	8009200 <osalSysUnlock.lto_priv.3>
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8009aac:	f7ff fba0 	bl	80091f0 <osalSysLock.lto_priv.3>
 8009ab0:	ab02      	add	r3, sp, #8
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7ff fb24 	bl	8009100 <chSemGetCounterI.lto_priv.1>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	bf0c      	ite	eq
 8009abe:	2301      	moveq	r3, #1
 8009ac0:	2300      	movne	r3, #0
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	490d      	ldr	r1, [pc, #52]	; (8009afc <rt_test_007_006_execute+0x1fc>)
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fd fb92 	bl	80071f0 <__test_assert>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d002      	beq.n	8009ad8 <rt_test_007_006_execute+0x1d8>
 8009ad2:	f7ff fb95 	bl	8009200 <osalSysUnlock.lto_priv.3>
 8009ad6:	e001      	b.n	8009adc <rt_test_007_006_execute+0x1dc>
 8009ad8:	f7ff fb92 	bl	8009200 <osalSysUnlock.lto_priv.3>
  }
  test_end_step(6);
}
 8009adc:	b006      	add	sp, #24
 8009ade:	bd10      	pop	{r4, pc}
 8009ae0:	20000c6c 	.word	0x20000c6c
 8009ae4:	0801e2d4 	.word	0x0801e2d4
 8009ae8:	0801d708 	.word	0x0801d708
 8009aec:	08009291 	.word	0x08009291
 8009af0:	20001508 	.word	0x20001508
 8009af4:	0801e2e0 	.word	0x0801e2e0
 8009af8:	0801e2f4 	.word	0x0801e2f4
 8009afc:	0801e300 	.word	0x0801e300
 8009b00:	0801e2d8 	.word	0x0801e2d8
	...

08009b10 <ch_queue_isempty.lto_priv.1>:
static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 8009b10:	b082      	sub	sp, #8
 8009b12:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next == qp);
 8009b14:	9b01      	ldr	r3, [sp, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	9a01      	ldr	r2, [sp, #4]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	bf0c      	ite	eq
 8009b1e:	2301      	moveq	r3, #1
 8009b20:	2300      	movne	r3, #0
 8009b22:	b2db      	uxtb	r3, r3
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	b002      	add	sp, #8
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	0000      	movs	r0, r0
	...

08009b30 <chSysLock.lto_priv.24>:
static inline void chSysLock(void) {
 8009b30:	b082      	sub	sp, #8
 8009b32:	2330      	movs	r3, #48	; 0x30
 8009b34:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009b36:	9b01      	ldr	r3, [sp, #4]
 8009b38:	f383 8811 	msr	BASEPRI, r3
}
 8009b3c:	bf00      	nop
}
 8009b3e:	bf00      	nop
}
 8009b40:	bf00      	nop
 8009b42:	b002      	add	sp, #8
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
	...

08009b50 <chSysUnlock.lto_priv.24>:
static inline void chSysUnlock(void) {
 8009b50:	b082      	sub	sp, #8
 8009b52:	2300      	movs	r3, #0
 8009b54:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009b56:	9b01      	ldr	r3, [sp, #4]
 8009b58:	f383 8811 	msr	BASEPRI, r3
}
 8009b5c:	bf00      	nop
}
 8009b5e:	bf00      	nop
}
 8009b60:	bf00      	nop
 8009b62:	b002      	add	sp, #8
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
	...

08009b70 <chThdGetSelfX.lto_priv.9>:
  return __sch_get_currthread();
 8009b70:	4b01      	ldr	r3, [pc, #4]	; (8009b78 <chThdGetSelfX.lto_priv.9+0x8>)
 8009b72:	68db      	ldr	r3, [r3, #12]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	4770      	bx	lr
 8009b78:	20000a48 	.word	0x20000a48
 8009b7c:	00000000 	.word	0x00000000

08009b80 <chThdGetPriorityX.lto_priv.3>:
static inline tprio_t chThdGetPriorityX(void) {
 8009b80:	b508      	push	{r3, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 8009b82:	f7ff fff5 	bl	8009b70 <chThdGetSelfX.lto_priv.9>
 8009b86:	4603      	mov	r3, r0
 8009b88:	689b      	ldr	r3, [r3, #8]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	bd08      	pop	{r3, pc}
 8009b8e:	bf00      	nop

08009b90 <thread1.lto_priv.2>:
  }
  while (chTimeIsInRangeX(now, start, end));
}
#endif /* CH_DBG_THREADS_PROFILING */

static THD_FUNCTION(thread1, p) {
 8009b90:	b500      	push	{lr}
 8009b92:	b083      	sub	sp, #12
 8009b94:	9001      	str	r0, [sp, #4]

  chMtxLock(&m1);
 8009b96:	4807      	ldr	r0, [pc, #28]	; (8009bb4 <thread1.lto_priv.2+0x24>)
 8009b98:	f7fa f88a 	bl	8003cb0 <chMtxLock>
  test_emit_token(*(char *)p);
 8009b9c:	9b01      	ldr	r3, [sp, #4]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fd fb85 	bl	80072b0 <test_emit_token>
  chMtxUnlock(&m1);
 8009ba6:	4803      	ldr	r0, [pc, #12]	; (8009bb4 <thread1.lto_priv.2+0x24>)
 8009ba8:	f7fa f932 	bl	8003e10 <chMtxUnlock>
}
 8009bac:	bf00      	nop
 8009bae:	b003      	add	sp, #12
 8009bb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8009bb4:	20000800 	.word	0x20000800
	...

08009bc0 <thread4A>:
  chMtxUnlock(&m2);
  test_emit_token('A');
}
#endif /* CH_DBG_THREADS_PROFILING */

static THD_FUNCTION(thread4A, p) {
 8009bc0:	b500      	push	{lr}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	9001      	str	r0, [sp, #4]

  (void)p;
  chThdSleepMilliseconds(50);
 8009bc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009bca:	f7f9 fc31 	bl	8003430 <chThdSleep>
  chMtxLock(&m1);
 8009bce:	4805      	ldr	r0, [pc, #20]	; (8009be4 <thread4A+0x24>)
 8009bd0:	f7fa f86e 	bl	8003cb0 <chMtxLock>
  chMtxUnlock(&m1);
 8009bd4:	4803      	ldr	r0, [pc, #12]	; (8009be4 <thread4A+0x24>)
 8009bd6:	f7fa f91b 	bl	8003e10 <chMtxUnlock>
}
 8009bda:	bf00      	nop
 8009bdc:	b003      	add	sp, #12
 8009bde:	f85d fb04 	ldr.w	pc, [sp], #4
 8009be2:	bf00      	nop
 8009be4:	20000800 	.word	0x20000800
	...

08009bf0 <thread4B>:

static THD_FUNCTION(thread4B, p) {
 8009bf0:	b500      	push	{lr}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	9001      	str	r0, [sp, #4]

  (void)p;
  chThdSleepMilliseconds(150);
 8009bf6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009bfa:	f7f9 fc19 	bl	8003430 <chThdSleep>
  chSysLock();
 8009bfe:	f7ff ff97 	bl	8009b30 <chSysLock.lto_priv.24>
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8009c02:	4807      	ldr	r0, [pc, #28]	; (8009c20 <thread4B+0x30>)
 8009c04:	f7fa f864 	bl	8003cd0 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8009c08:	4805      	ldr	r0, [pc, #20]	; (8009c20 <thread4B+0x30>)
 8009c0a:	f7fa f951 	bl	8003eb0 <chMtxUnlockS>
  chSchRescheduleS();
 8009c0e:	f7f8 ffaf 	bl	8002b70 <chSchRescheduleS>
  chSysUnlock();
 8009c12:	f7ff ff9d 	bl	8009b50 <chSysUnlock.lto_priv.24>
}
 8009c16:	bf00      	nop
 8009c18:	b003      	add	sp, #12
 8009c1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c1e:	bf00      	nop
 8009c20:	20000810 	.word	0x20000810
	...

08009c30 <thread6>:

#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
static THD_FUNCTION(thread6, p) {
 8009c30:	b500      	push	{lr}
 8009c32:	b083      	sub	sp, #12
 8009c34:	9001      	str	r0, [sp, #4]

  chMtxLock(&m1);
 8009c36:	4809      	ldr	r0, [pc, #36]	; (8009c5c <thread6+0x2c>)
 8009c38:	f7fa f83a 	bl	8003cb0 <chMtxLock>
  chCondWait(&c1);
 8009c3c:	4808      	ldr	r0, [pc, #32]	; (8009c60 <thread6+0x30>)
 8009c3e:	f7fa fae7 	bl	8004210 <chCondWait>
  test_emit_token(*(char *)p);
 8009c42:	9b01      	ldr	r3, [sp, #4]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fd fb32 	bl	80072b0 <test_emit_token>
  chMtxUnlock(&m1);
 8009c4c:	4803      	ldr	r0, [pc, #12]	; (8009c5c <thread6+0x2c>)
 8009c4e:	f7fa f8df 	bl	8003e10 <chMtxUnlock>
}
 8009c52:	bf00      	nop
 8009c54:	b003      	add	sp, #12
 8009c56:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c5a:	bf00      	nop
 8009c5c:	20000800 	.word	0x20000800
 8009c60:	20000820 	.word	0x20000820
	...

08009c70 <thread8>:

static THD_FUNCTION(thread8, p) {
 8009c70:	b500      	push	{lr}
 8009c72:	b083      	sub	sp, #12
 8009c74:	9001      	str	r0, [sp, #4]

  chMtxLock(&m2);
 8009c76:	480d      	ldr	r0, [pc, #52]	; (8009cac <thread8+0x3c>)
 8009c78:	f7fa f81a 	bl	8003cb0 <chMtxLock>
  chMtxLock(&m1);
 8009c7c:	480c      	ldr	r0, [pc, #48]	; (8009cb0 <thread8+0x40>)
 8009c7e:	f7fa f817 	bl	8003cb0 <chMtxLock>
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
 8009c82:	f04f 31ff 	mov.w	r1, #4294967295
 8009c86:	480b      	ldr	r0, [pc, #44]	; (8009cb4 <thread8+0x44>)
 8009c88:	f7fa fafa 	bl	8004280 <chCondWaitTimeout>
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 8009c8c:	9b01      	ldr	r3, [sp, #4]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fd fb0d 	bl	80072b0 <test_emit_token>
  chMtxUnlock(&m1);
 8009c96:	4806      	ldr	r0, [pc, #24]	; (8009cb0 <thread8+0x40>)
 8009c98:	f7fa f8ba 	bl	8003e10 <chMtxUnlock>
  chMtxUnlock(&m2);
 8009c9c:	4803      	ldr	r0, [pc, #12]	; (8009cac <thread8+0x3c>)
 8009c9e:	f7fa f8b7 	bl	8003e10 <chMtxUnlock>
}
 8009ca2:	bf00      	nop
 8009ca4:	b003      	add	sp, #12
 8009ca6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009caa:	bf00      	nop
 8009cac:	20000810 	.word	0x20000810
 8009cb0:	20000800 	.word	0x20000800
 8009cb4:	20000820 	.word	0x20000820
	...

08009cc0 <thread9>:

static THD_FUNCTION(thread9, p) {
 8009cc0:	b500      	push	{lr}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	9001      	str	r0, [sp, #4]

  chMtxLock(&m2);
 8009cc6:	4807      	ldr	r0, [pc, #28]	; (8009ce4 <thread9+0x24>)
 8009cc8:	f7f9 fff2 	bl	8003cb0 <chMtxLock>
  test_emit_token(*(char *)p);
 8009ccc:	9b01      	ldr	r3, [sp, #4]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fd faed 	bl	80072b0 <test_emit_token>
  chMtxUnlock(&m2);
 8009cd6:	4803      	ldr	r0, [pc, #12]	; (8009ce4 <thread9+0x24>)
 8009cd8:	f7fa f89a 	bl	8003e10 <chMtxUnlock>
}
 8009cdc:	bf00      	nop
 8009cde:	b003      	add	sp, #12
 8009ce0:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ce4:	20000810 	.word	0x20000810
	...

08009cf0 <rt_test_008_001_setup>:
 * - [8.1.4] Unlocking the mutex, the threads will wakeup in priority
 *   order because the mutext queue is an ordered one.
 * .
 */

static void rt_test_008_001_setup(void) {
 8009cf0:	b508      	push	{r3, lr}
  chMtxObjectInit(&m1);
 8009cf2:	4802      	ldr	r0, [pc, #8]	; (8009cfc <rt_test_008_001_setup+0xc>)
 8009cf4:	f7f9 ffcc 	bl	8003c90 <chMtxObjectInit>
}
 8009cf8:	bf00      	nop
 8009cfa:	bd08      	pop	{r3, pc}
 8009cfc:	20000800 	.word	0x20000800

08009d00 <rt_test_008_001_execute>:

static void rt_test_008_001_execute(void) {
 8009d00:	b500      	push	{lr}
 8009d02:	b085      	sub	sp, #20
  tprio_t prio;

  /* [8.1.1] Getting the initial priority.*/
  test_set_step(1);
 8009d04:	4b3a      	ldr	r3, [pc, #232]	; (8009df0 <rt_test_008_001_execute+0xf0>)
 8009d06:	2201      	movs	r2, #1
 8009d08:	601a      	str	r2, [r3, #0]
  {
    prio = chThdGetPriorityX();
 8009d0a:	f7ff ff39 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 8009d0e:	9003      	str	r0, [sp, #12]
  }
  test_end_step(1);

  /* [8.1.2] Locking the mutex.*/
  test_set_step(2);
 8009d10:	4b37      	ldr	r3, [pc, #220]	; (8009df0 <rt_test_008_001_execute+0xf0>)
 8009d12:	2202      	movs	r2, #2
 8009d14:	601a      	str	r2, [r3, #0]
  {
    chMtxLock(&m1);
 8009d16:	4837      	ldr	r0, [pc, #220]	; (8009df4 <rt_test_008_001_execute+0xf4>)
 8009d18:	f7f9 ffca 	bl	8003cb0 <chMtxLock>
  test_end_step(2);

  /* [8.1.3] Five threads are created that try to lock and unlock the
     mutex then terminate. The threads are created in ascending
     priority order.*/
  test_set_step(3);
 8009d1c:	4b34      	ldr	r3, [pc, #208]	; (8009df0 <rt_test_008_001_execute+0xf0>)
 8009d1e:	2203      	movs	r2, #3
 8009d20:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8009d22:	4b35      	ldr	r3, [pc, #212]	; (8009df8 <rt_test_008_001_execute+0xf8>)
 8009d24:	6818      	ldr	r0, [r3, #0]
 8009d26:	9b03      	ldr	r3, [sp, #12]
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	4b34      	ldr	r3, [pc, #208]	; (8009dfc <rt_test_008_001_execute+0xfc>)
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	4b34      	ldr	r3, [pc, #208]	; (8009e00 <rt_test_008_001_execute+0x100>)
 8009d30:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009d34:	f7f9 fa3c 	bl	80031b0 <chThdCreateStatic>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	4a32      	ldr	r2, [pc, #200]	; (8009e04 <rt_test_008_001_execute+0x104>)
 8009d3c:	6013      	str	r3, [r2, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8009d3e:	4b2e      	ldr	r3, [pc, #184]	; (8009df8 <rt_test_008_001_execute+0xf8>)
 8009d40:	6858      	ldr	r0, [r3, #4]
 8009d42:	9b03      	ldr	r3, [sp, #12]
 8009d44:	1c9a      	adds	r2, r3, #2
 8009d46:	4b30      	ldr	r3, [pc, #192]	; (8009e08 <rt_test_008_001_execute+0x108>)
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	4b2d      	ldr	r3, [pc, #180]	; (8009e00 <rt_test_008_001_execute+0x100>)
 8009d4c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009d50:	f7f9 fa2e 	bl	80031b0 <chThdCreateStatic>
 8009d54:	4603      	mov	r3, r0
 8009d56:	4a2b      	ldr	r2, [pc, #172]	; (8009e04 <rt_test_008_001_execute+0x104>)
 8009d58:	6053      	str	r3, [r2, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8009d5a:	4b27      	ldr	r3, [pc, #156]	; (8009df8 <rt_test_008_001_execute+0xf8>)
 8009d5c:	6898      	ldr	r0, [r3, #8]
 8009d5e:	9b03      	ldr	r3, [sp, #12]
 8009d60:	1cda      	adds	r2, r3, #3
 8009d62:	4b2a      	ldr	r3, [pc, #168]	; (8009e0c <rt_test_008_001_execute+0x10c>)
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	4b26      	ldr	r3, [pc, #152]	; (8009e00 <rt_test_008_001_execute+0x100>)
 8009d68:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009d6c:	f7f9 fa20 	bl	80031b0 <chThdCreateStatic>
 8009d70:	4603      	mov	r3, r0
 8009d72:	4a24      	ldr	r2, [pc, #144]	; (8009e04 <rt_test_008_001_execute+0x104>)
 8009d74:	6093      	str	r3, [r2, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8009d76:	4b20      	ldr	r3, [pc, #128]	; (8009df8 <rt_test_008_001_execute+0xf8>)
 8009d78:	68d8      	ldr	r0, [r3, #12]
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	1d1a      	adds	r2, r3, #4
 8009d7e:	4b24      	ldr	r3, [pc, #144]	; (8009e10 <rt_test_008_001_execute+0x110>)
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	4b1f      	ldr	r3, [pc, #124]	; (8009e00 <rt_test_008_001_execute+0x100>)
 8009d84:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009d88:	f7f9 fa12 	bl	80031b0 <chThdCreateStatic>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	4a1d      	ldr	r2, [pc, #116]	; (8009e04 <rt_test_008_001_execute+0x104>)
 8009d90:	60d3      	str	r3, [r2, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8009d92:	4b19      	ldr	r3, [pc, #100]	; (8009df8 <rt_test_008_001_execute+0xf8>)
 8009d94:	6918      	ldr	r0, [r3, #16]
 8009d96:	9b03      	ldr	r3, [sp, #12]
 8009d98:	1d5a      	adds	r2, r3, #5
 8009d9a:	4b1e      	ldr	r3, [pc, #120]	; (8009e14 <rt_test_008_001_execute+0x114>)
 8009d9c:	9300      	str	r3, [sp, #0]
 8009d9e:	4b18      	ldr	r3, [pc, #96]	; (8009e00 <rt_test_008_001_execute+0x100>)
 8009da0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009da4:	f7f9 fa04 	bl	80031b0 <chThdCreateStatic>
 8009da8:	4603      	mov	r3, r0
 8009daa:	4a16      	ldr	r2, [pc, #88]	; (8009e04 <rt_test_008_001_execute+0x104>)
 8009dac:	6113      	str	r3, [r2, #16]
  }
  test_end_step(3);

  /* [8.1.4] Unlocking the mutex, the threads will wakeup in priority
     order because the mutext queue is an ordered one.*/
  test_set_step(4);
 8009dae:	4b10      	ldr	r3, [pc, #64]	; (8009df0 <rt_test_008_001_execute+0xf0>)
 8009db0:	2204      	movs	r2, #4
 8009db2:	601a      	str	r2, [r3, #0]
  {
    chMtxUnlock(&m1);
 8009db4:	480f      	ldr	r0, [pc, #60]	; (8009df4 <rt_test_008_001_execute+0xf4>)
 8009db6:	f7fa f82b 	bl	8003e10 <chMtxUnlock>
    test_wait_threads();
 8009dba:	f7fd fde9 	bl	8007990 <test_wait_threads>
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 8009dbe:	f7ff fedf 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	9b03      	ldr	r3, [sp, #12]
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	bf0c      	ite	eq
 8009dca:	2301      	moveq	r3, #1
 8009dcc:	2300      	movne	r3, #0
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	4911      	ldr	r1, [pc, #68]	; (8009e18 <rt_test_008_001_execute+0x118>)
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fd fa0c 	bl	80071f0 <__test_assert>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d105      	bne.n	8009dea <rt_test_008_001_execute+0xea>
    test_assert_sequence("ABCDE", "invalid sequence");
 8009dde:	490f      	ldr	r1, [pc, #60]	; (8009e1c <rt_test_008_001_execute+0x11c>)
 8009de0:	480f      	ldr	r0, [pc, #60]	; (8009e20 <rt_test_008_001_execute+0x120>)
 8009de2:	f7fd fa1d 	bl	8007220 <__test_assert_sequence>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
  }
  test_end_step(4);
}
 8009dea:	b005      	add	sp, #20
 8009dec:	f85d fb04 	ldr.w	pc, [sp], #4
 8009df0:	20000c6c 	.word	0x20000c6c
 8009df4:	20000800 	.word	0x20000800
 8009df8:	0801d708 	.word	0x0801d708
 8009dfc:	0801e108 	.word	0x0801e108
 8009e00:	08009b91 	.word	0x08009b91
 8009e04:	20001508 	.word	0x20001508
 8009e08:	0801e0e0 	.word	0x0801e0e0
 8009e0c:	0801e0e4 	.word	0x0801e0e4
 8009e10:	0801e0e8 	.word	0x0801e0e8
 8009e14:	0801e0ec 	.word	0x0801e0ec
 8009e18:	0801e348 	.word	0x0801e348
 8009e1c:	0801e0f0 	.word	0x0801e0f0
 8009e20:	0801e104 	.word	0x0801e104
	...

08009e30 <rt_test_008_004_setup>:
 * - [8.4.7] Unlocking M2, the priority should fall back to P(A).
 * - [8.4.8] Unlocking M1, the priority should fall back to P(0).
 * .
 */

static void rt_test_008_004_setup(void) {
 8009e30:	b508      	push	{r3, lr}
  chMtxObjectInit(&m1);
 8009e32:	4804      	ldr	r0, [pc, #16]	; (8009e44 <rt_test_008_004_setup+0x14>)
 8009e34:	f7f9 ff2c 	bl	8003c90 <chMtxObjectInit>
  chMtxObjectInit(&m2);
 8009e38:	4803      	ldr	r0, [pc, #12]	; (8009e48 <rt_test_008_004_setup+0x18>)
 8009e3a:	f7f9 ff29 	bl	8003c90 <chMtxObjectInit>
}
 8009e3e:	bf00      	nop
 8009e40:	bd08      	pop	{r3, pc}
 8009e42:	bf00      	nop
 8009e44:	20000800 	.word	0x20000800
 8009e48:	20000810 	.word	0x20000810
 8009e4c:	00000000 	.word	0x00000000

08009e50 <rt_test_008_004_teardown>:

static void rt_test_008_004_teardown(void) {
 8009e50:	b508      	push	{r3, lr}
  test_wait_threads();
 8009e52:	f7fd fd9d 	bl	8007990 <test_wait_threads>
}
 8009e56:	bf00      	nop
 8009e58:	bd08      	pop	{r3, pc}
 8009e5a:	bf00      	nop
 8009e5c:	0000      	movs	r0, r0
	...

08009e60 <rt_test_008_004_execute>:

static void rt_test_008_004_execute(void) {
 8009e60:	b500      	push	{lr}
 8009e62:	b087      	sub	sp, #28
  tprio_t p, pa, pb;

  /* [8.4.1] Getting current thread priority P(0) and assigning to the
     threads A and B priorities +1 and +2.*/
  test_set_step(1);
 8009e64:	4b58      	ldr	r3, [pc, #352]	; (8009fc8 <rt_test_008_004_execute+0x168>)
 8009e66:	2201      	movs	r2, #1
 8009e68:	601a      	str	r2, [r3, #0]
  {
    p = chThdGetPriorityX();
 8009e6a:	f7ff fe89 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 8009e6e:	9005      	str	r0, [sp, #20]
    pa = p + 1;
 8009e70:	9b05      	ldr	r3, [sp, #20]
 8009e72:	3301      	adds	r3, #1
 8009e74:	9304      	str	r3, [sp, #16]
    pb = p + 2;
 8009e76:	9b05      	ldr	r3, [sp, #20]
 8009e78:	3302      	adds	r3, #2
 8009e7a:	9303      	str	r3, [sp, #12]
  }
  test_end_step(1);

  /* [8.4.2] Spawning threads A and B at priorities P(A) and P(B).*/
  test_set_step(2);
 8009e7c:	4b52      	ldr	r3, [pc, #328]	; (8009fc8 <rt_test_008_004_execute+0x168>)
 8009e7e:	2202      	movs	r2, #2
 8009e80:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8009e82:	4b52      	ldr	r3, [pc, #328]	; (8009fcc <rt_test_008_004_execute+0x16c>)
 8009e84:	6818      	ldr	r0, [r3, #0]
 8009e86:	4b52      	ldr	r3, [pc, #328]	; (8009fd0 <rt_test_008_004_execute+0x170>)
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	4b52      	ldr	r3, [pc, #328]	; (8009fd4 <rt_test_008_004_execute+0x174>)
 8009e8c:	9a04      	ldr	r2, [sp, #16]
 8009e8e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009e92:	f7f9 f98d 	bl	80031b0 <chThdCreateStatic>
 8009e96:	4603      	mov	r3, r0
 8009e98:	4a4f      	ldr	r2, [pc, #316]	; (8009fd8 <rt_test_008_004_execute+0x178>)
 8009e9a:	6013      	str	r3, [r2, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8009e9c:	4b4b      	ldr	r3, [pc, #300]	; (8009fcc <rt_test_008_004_execute+0x16c>)
 8009e9e:	6858      	ldr	r0, [r3, #4]
 8009ea0:	4b4e      	ldr	r3, [pc, #312]	; (8009fdc <rt_test_008_004_execute+0x17c>)
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	4b4e      	ldr	r3, [pc, #312]	; (8009fe0 <rt_test_008_004_execute+0x180>)
 8009ea6:	9a03      	ldr	r2, [sp, #12]
 8009ea8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009eac:	f7f9 f980 	bl	80031b0 <chThdCreateStatic>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	4a49      	ldr	r2, [pc, #292]	; (8009fd8 <rt_test_008_004_execute+0x178>)
 8009eb4:	6053      	str	r3, [r2, #4]
  test_end_step(2);

  /* [8.4.3] Locking the mutex M1 before thread A has a chance to lock
     it. The priority must not change because A has not yet reached
     chMtxLock(M1). the mutex is not locked.*/
  test_set_step(3);
 8009eb6:	4b44      	ldr	r3, [pc, #272]	; (8009fc8 <rt_test_008_004_execute+0x168>)
 8009eb8:	2203      	movs	r2, #3
 8009eba:	601a      	str	r2, [r3, #0]
  {
    chMtxLock(&m1);
 8009ebc:	4849      	ldr	r0, [pc, #292]	; (8009fe4 <rt_test_008_004_execute+0x184>)
 8009ebe:	f7f9 fef7 	bl	8003cb0 <chMtxLock>
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8009ec2:	f7ff fe5d 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	9b05      	ldr	r3, [sp, #20]
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	bf0c      	ite	eq
 8009ece:	2301      	moveq	r3, #1
 8009ed0:	2300      	movne	r3, #0
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	4944      	ldr	r1, [pc, #272]	; (8009fe8 <rt_test_008_004_execute+0x188>)
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fd f98a 	bl	80071f0 <__test_assert>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d16e      	bne.n	8009fc0 <rt_test_008_004_execute+0x160>
  test_end_step(3);

  /* [8.4.4] Waiting 100mS, this makes thread A reach chMtxLock(M1) and
     get the mutex. This must boost the priority of the current thread
     at the same level of thread A.*/
  test_set_step(4);
 8009ee2:	4b39      	ldr	r3, [pc, #228]	; (8009fc8 <rt_test_008_004_execute+0x168>)
 8009ee4:	2204      	movs	r2, #4
 8009ee6:	601a      	str	r2, [r3, #0]
  {
    chThdSleepMilliseconds(100);
 8009ee8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009eec:	f7f9 faa0 	bl	8003430 <chThdSleep>
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8009ef0:	f7ff fe46 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	9b04      	ldr	r3, [sp, #16]
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	bf0c      	ite	eq
 8009efc:	2301      	moveq	r3, #1
 8009efe:	2300      	movne	r3, #0
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	4939      	ldr	r1, [pc, #228]	; (8009fe8 <rt_test_008_004_execute+0x188>)
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fd f973 	bl	80071f0 <__test_assert>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d157      	bne.n	8009fc0 <rt_test_008_004_execute+0x160>
  test_end_step(4);

  /* [8.4.5] Locking the mutex M2 before thread B has a chance to lock
     it. The priority must not change because B has not yet reached
     chMtxLock(M2). the mutex is not locked.*/
  test_set_step(5);
 8009f10:	4b2d      	ldr	r3, [pc, #180]	; (8009fc8 <rt_test_008_004_execute+0x168>)
 8009f12:	2205      	movs	r2, #5
 8009f14:	601a      	str	r2, [r3, #0]
  {
    chMtxLock(&m2);
 8009f16:	4835      	ldr	r0, [pc, #212]	; (8009fec <rt_test_008_004_execute+0x18c>)
 8009f18:	f7f9 feca 	bl	8003cb0 <chMtxLock>
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8009f1c:	f7ff fe30 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 8009f20:	4602      	mov	r2, r0
 8009f22:	9b04      	ldr	r3, [sp, #16]
 8009f24:	4293      	cmp	r3, r2
 8009f26:	bf0c      	ite	eq
 8009f28:	2301      	moveq	r3, #1
 8009f2a:	2300      	movne	r3, #0
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	492e      	ldr	r1, [pc, #184]	; (8009fe8 <rt_test_008_004_execute+0x188>)
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fd f95d 	bl	80071f0 <__test_assert>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d141      	bne.n	8009fc0 <rt_test_008_004_execute+0x160>
  test_end_step(5);

  /* [8.4.6] Waiting 100mS, this makes thread B reach chMtxLock(M2) and
     get the mutex. This must boost the priority of the current thread
     at the same level of thread B.*/
  test_set_step(6);
 8009f3c:	4b22      	ldr	r3, [pc, #136]	; (8009fc8 <rt_test_008_004_execute+0x168>)
 8009f3e:	2206      	movs	r2, #6
 8009f40:	601a      	str	r2, [r3, #0]
  {
    chThdSleepMilliseconds(100);
 8009f42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f46:	f7f9 fa73 	bl	8003430 <chThdSleep>
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 8009f4a:	f7ff fe19 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	9b03      	ldr	r3, [sp, #12]
 8009f52:	4293      	cmp	r3, r2
 8009f54:	bf0c      	ite	eq
 8009f56:	2301      	moveq	r3, #1
 8009f58:	2300      	movne	r3, #0
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	4922      	ldr	r1, [pc, #136]	; (8009fe8 <rt_test_008_004_execute+0x188>)
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fd f946 	bl	80071f0 <__test_assert>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d12a      	bne.n	8009fc0 <rt_test_008_004_execute+0x160>
  }
  test_end_step(6);

  /* [8.4.7] Unlocking M2, the priority should fall back to P(A).*/
  test_set_step(7);
 8009f6a:	4b17      	ldr	r3, [pc, #92]	; (8009fc8 <rt_test_008_004_execute+0x168>)
 8009f6c:	2207      	movs	r2, #7
 8009f6e:	601a      	str	r2, [r3, #0]
  {
    chMtxUnlock(&m2);
 8009f70:	481e      	ldr	r0, [pc, #120]	; (8009fec <rt_test_008_004_execute+0x18c>)
 8009f72:	f7f9 ff4d 	bl	8003e10 <chMtxUnlock>
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8009f76:	f7ff fe03 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	9b04      	ldr	r3, [sp, #16]
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	bf0c      	ite	eq
 8009f82:	2301      	moveq	r3, #1
 8009f84:	2300      	movne	r3, #0
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	4917      	ldr	r1, [pc, #92]	; (8009fe8 <rt_test_008_004_execute+0x188>)
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fd f930 	bl	80071f0 <__test_assert>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d114      	bne.n	8009fc0 <rt_test_008_004_execute+0x160>
  }
  test_end_step(7);

  /* [8.4.8] Unlocking M1, the priority should fall back to P(0).*/
  test_set_step(8);
 8009f96:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <rt_test_008_004_execute+0x168>)
 8009f98:	2208      	movs	r2, #8
 8009f9a:	601a      	str	r2, [r3, #0]
  {
    chMtxUnlock(&m1);
 8009f9c:	4811      	ldr	r0, [pc, #68]	; (8009fe4 <rt_test_008_004_execute+0x184>)
 8009f9e:	f7f9 ff37 	bl	8003e10 <chMtxUnlock>
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8009fa2:	f7ff fded 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	9b05      	ldr	r3, [sp, #20]
 8009faa:	4293      	cmp	r3, r2
 8009fac:	bf0c      	ite	eq
 8009fae:	2301      	moveq	r3, #1
 8009fb0:	2300      	movne	r3, #0
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	490c      	ldr	r1, [pc, #48]	; (8009fe8 <rt_test_008_004_execute+0x188>)
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fd f91a 	bl	80071f0 <__test_assert>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
  }
  test_end_step(8);
}
 8009fc0:	b007      	add	sp, #28
 8009fc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fc6:	bf00      	nop
 8009fc8:	20000c6c 	.word	0x20000c6c
 8009fcc:	0801d708 	.word	0x0801d708
 8009fd0:	0801e0ec 	.word	0x0801e0ec
 8009fd4:	08009bc1 	.word	0x08009bc1
 8009fd8:	20001508 	.word	0x20001508
 8009fdc:	0801e0e8 	.word	0x0801e0e8
 8009fe0:	08009bf1 	.word	0x08009bf1
 8009fe4:	20000800 	.word	0x20000800
 8009fe8:	0801e348 	.word	0x0801e348
 8009fec:	20000810 	.word	0x20000810

08009ff0 <rt_test_008_005_setup>:
 * - [8.5.6] Testing chMtxUnlockAll() behavior.
 * - [8.5.7] Testing that priority has not changed after operations.
 * .
 */

static void rt_test_008_005_setup(void) {
 8009ff0:	b508      	push	{r3, lr}
  chMtxObjectInit(&m1);
 8009ff2:	4802      	ldr	r0, [pc, #8]	; (8009ffc <rt_test_008_005_setup+0xc>)
 8009ff4:	f7f9 fe4c 	bl	8003c90 <chMtxObjectInit>
}
 8009ff8:	bf00      	nop
 8009ffa:	bd08      	pop	{r3, pc}
 8009ffc:	20000800 	.word	0x20000800

0800a000 <rt_test_008_005_execute>:

static void rt_test_008_005_execute(void) {
 800a000:	b500      	push	{lr}
 800a002:	b083      	sub	sp, #12
  bool b;
  tprio_t prio;

  /* [8.5.1] Getting current thread priority for later checks.*/
  test_set_step(1);
 800a004:	4b62      	ldr	r3, [pc, #392]	; (800a190 <rt_test_008_005_execute+0x190>)
 800a006:	2201      	movs	r2, #1
 800a008:	601a      	str	r2, [r3, #0]
  {
    prio = chThdGetPriorityX();
 800a00a:	f7ff fdb9 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 800a00e:	9001      	str	r0, [sp, #4]
  }
  test_end_step(1);

  /* [8.5.2] Locking the mutex first time, it must be possible because
     it is not owned.*/
  test_set_step(2);
 800a010:	4b5f      	ldr	r3, [pc, #380]	; (800a190 <rt_test_008_005_execute+0x190>)
 800a012:	2202      	movs	r2, #2
 800a014:	601a      	str	r2, [r3, #0]
  {
    b = chMtxTryLock(&m1);
 800a016:	485f      	ldr	r0, [pc, #380]	; (800a194 <rt_test_008_005_execute+0x194>)
 800a018:	f7f9 fec2 	bl	8003da0 <chMtxTryLock>
 800a01c:	4603      	mov	r3, r0
 800a01e:	f88d 3003 	strb.w	r3, [sp, #3]
    test_assert(b, "already locked");
 800a022:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a026:	495c      	ldr	r1, [pc, #368]	; (800a198 <rt_test_008_005_execute+0x198>)
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fd f8e1 	bl	80071f0 <__test_assert>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	f040 80a9 	bne.w	800a188 <rt_test_008_005_execute+0x188>
  }
  test_end_step(2);

  /* [8.5.3] Locking the mutex second time, it must fail because it is
     already owned.*/
  test_set_step(3);
 800a036:	4b56      	ldr	r3, [pc, #344]	; (800a190 <rt_test_008_005_execute+0x190>)
 800a038:	2203      	movs	r2, #3
 800a03a:	601a      	str	r2, [r3, #0]
  {
    b = chMtxTryLock(&m1);
 800a03c:	4855      	ldr	r0, [pc, #340]	; (800a194 <rt_test_008_005_execute+0x194>)
 800a03e:	f7f9 feaf 	bl	8003da0 <chMtxTryLock>
 800a042:	4603      	mov	r3, r0
 800a044:	f88d 3003 	strb.w	r3, [sp, #3]
    test_assert(!b, "not locked");
 800a048:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	bf14      	ite	ne
 800a050:	2301      	movne	r3, #1
 800a052:	2300      	moveq	r3, #0
 800a054:	b2db      	uxtb	r3, r3
 800a056:	f083 0301 	eor.w	r3, r3, #1
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	f003 0301 	and.w	r3, r3, #1
 800a060:	b2db      	uxtb	r3, r3
 800a062:	494e      	ldr	r1, [pc, #312]	; (800a19c <rt_test_008_005_execute+0x19c>)
 800a064:	4618      	mov	r0, r3
 800a066:	f7fd f8c3 	bl	80071f0 <__test_assert>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f040 808b 	bne.w	800a188 <rt_test_008_005_execute+0x188>
  }
  test_end_step(3);

  /* [8.5.4] Unlocking the mutex then it must not be owned anymore and
     the queue must be empty.*/
  test_set_step(4);
 800a072:	4b47      	ldr	r3, [pc, #284]	; (800a190 <rt_test_008_005_execute+0x190>)
 800a074:	2204      	movs	r2, #4
 800a076:	601a      	str	r2, [r3, #0]
  {
    chMtxUnlock(&m1);
 800a078:	4846      	ldr	r0, [pc, #280]	; (800a194 <rt_test_008_005_execute+0x194>)
 800a07a:	f7f9 fec9 	bl	8003e10 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 800a07e:	4b45      	ldr	r3, [pc, #276]	; (800a194 <rt_test_008_005_execute+0x194>)
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	bf0c      	ite	eq
 800a086:	2301      	moveq	r3, #1
 800a088:	2300      	movne	r3, #0
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	4944      	ldr	r1, [pc, #272]	; (800a1a0 <rt_test_008_005_execute+0x1a0>)
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fd f8ae 	bl	80071f0 <__test_assert>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d176      	bne.n	800a188 <rt_test_008_005_execute+0x188>
    test_assert(ch_queue_isempty(&m1.queue), "queue not empty");
 800a09a:	483e      	ldr	r0, [pc, #248]	; (800a194 <rt_test_008_005_execute+0x194>)
 800a09c:	f7ff fd38 	bl	8009b10 <ch_queue_isempty.lto_priv.1>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	4940      	ldr	r1, [pc, #256]	; (800a1a4 <rt_test_008_005_execute+0x1a4>)
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fd f8a3 	bl	80071f0 <__test_assert>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d16b      	bne.n	800a188 <rt_test_008_005_execute+0x188>
  }
  test_end_step(4);

  /* [8.5.5] Testing that priority has not changed after operations.*/
  test_set_step(5);
 800a0b0:	4b37      	ldr	r3, [pc, #220]	; (800a190 <rt_test_008_005_execute+0x190>)
 800a0b2:	2205      	movs	r2, #5
 800a0b4:	601a      	str	r2, [r3, #0]
  {
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800a0b6:	f7ff fd63 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	9b01      	ldr	r3, [sp, #4]
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	bf0c      	ite	eq
 800a0c2:	2301      	moveq	r3, #1
 800a0c4:	2300      	movne	r3, #0
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	4937      	ldr	r1, [pc, #220]	; (800a1a8 <rt_test_008_005_execute+0x1a8>)
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fd f890 	bl	80071f0 <__test_assert>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d158      	bne.n	800a188 <rt_test_008_005_execute+0x188>
  }
  test_end_step(5);

  /* [8.5.6] Testing chMtxUnlockAll() behavior.*/
  test_set_step(6);
 800a0d6:	4b2e      	ldr	r3, [pc, #184]	; (800a190 <rt_test_008_005_execute+0x190>)
 800a0d8:	2206      	movs	r2, #6
 800a0da:	601a      	str	r2, [r3, #0]
  {
    b = chMtxTryLock(&m1);
 800a0dc:	482d      	ldr	r0, [pc, #180]	; (800a194 <rt_test_008_005_execute+0x194>)
 800a0de:	f7f9 fe5f 	bl	8003da0 <chMtxTryLock>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	f88d 3003 	strb.w	r3, [sp, #3]
    test_assert(b, "already locked");
 800a0e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a0ec:	492a      	ldr	r1, [pc, #168]	; (800a198 <rt_test_008_005_execute+0x198>)
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fd f87e 	bl	80071f0 <__test_assert>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d146      	bne.n	800a188 <rt_test_008_005_execute+0x188>
    b = chMtxTryLock(&m1);
 800a0fa:	4826      	ldr	r0, [pc, #152]	; (800a194 <rt_test_008_005_execute+0x194>)
 800a0fc:	f7f9 fe50 	bl	8003da0 <chMtxTryLock>
 800a100:	4603      	mov	r3, r0
 800a102:	f88d 3003 	strb.w	r3, [sp, #3]
    test_assert(!b, "not locked");
 800a106:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	bf14      	ite	ne
 800a10e:	2301      	movne	r3, #1
 800a110:	2300      	moveq	r3, #0
 800a112:	b2db      	uxtb	r3, r3
 800a114:	f083 0301 	eor.w	r3, r3, #1
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	491e      	ldr	r1, [pc, #120]	; (800a19c <rt_test_008_005_execute+0x19c>)
 800a122:	4618      	mov	r0, r3
 800a124:	f7fd f864 	bl	80071f0 <__test_assert>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d12c      	bne.n	800a188 <rt_test_008_005_execute+0x188>

    chMtxUnlockAll();
 800a12e:	f7f9 ff4f 	bl	8003fd0 <chMtxUnlockAll>
    test_assert(m1.owner == NULL, "still owned");
 800a132:	4b18      	ldr	r3, [pc, #96]	; (800a194 <rt_test_008_005_execute+0x194>)
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	bf0c      	ite	eq
 800a13a:	2301      	moveq	r3, #1
 800a13c:	2300      	movne	r3, #0
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	4917      	ldr	r1, [pc, #92]	; (800a1a0 <rt_test_008_005_execute+0x1a0>)
 800a142:	4618      	mov	r0, r3
 800a144:	f7fd f854 	bl	80071f0 <__test_assert>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d11c      	bne.n	800a188 <rt_test_008_005_execute+0x188>
    test_assert(ch_queue_isempty(&m1.queue), "queue not empty");
 800a14e:	4811      	ldr	r0, [pc, #68]	; (800a194 <rt_test_008_005_execute+0x194>)
 800a150:	f7ff fcde 	bl	8009b10 <ch_queue_isempty.lto_priv.1>
 800a154:	4603      	mov	r3, r0
 800a156:	4913      	ldr	r1, [pc, #76]	; (800a1a4 <rt_test_008_005_execute+0x1a4>)
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fd f849 	bl	80071f0 <__test_assert>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d111      	bne.n	800a188 <rt_test_008_005_execute+0x188>
  }
  test_end_step(6);

  /* [8.5.7] Testing that priority has not changed after operations.*/
  test_set_step(7);
 800a164:	4b0a      	ldr	r3, [pc, #40]	; (800a190 <rt_test_008_005_execute+0x190>)
 800a166:	2207      	movs	r2, #7
 800a168:	601a      	str	r2, [r3, #0]
  {
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800a16a:	f7ff fd09 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 800a16e:	4602      	mov	r2, r0
 800a170:	9b01      	ldr	r3, [sp, #4]
 800a172:	4293      	cmp	r3, r2
 800a174:	bf0c      	ite	eq
 800a176:	2301      	moveq	r3, #1
 800a178:	2300      	movne	r3, #0
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	490a      	ldr	r1, [pc, #40]	; (800a1a8 <rt_test_008_005_execute+0x1a8>)
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fd f836 	bl	80071f0 <__test_assert>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
  }
  test_end_step(7);
}
 800a188:	b003      	add	sp, #12
 800a18a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a18e:	bf00      	nop
 800a190:	20000c6c 	.word	0x20000c6c
 800a194:	20000800 	.word	0x20000800
 800a198:	0801e380 	.word	0x0801e380
 800a19c:	0801e390 	.word	0x0801e390
 800a1a0:	0801e39c 	.word	0x0801e39c
 800a1a4:	0801e270 	.word	0x0801e270
 800a1a8:	0801e348 	.word	0x0801e348
 800a1ac:	00000000 	.word	0x00000000

0800a1b0 <rt_test_008_007_setup>:
 *   then waiting for the threads to terminate in priority order, the
 *   order is tested.
 * .
 */

static void rt_test_008_007_setup(void) {
 800a1b0:	b508      	push	{r3, lr}
  chCondObjectInit(&c1);
 800a1b2:	4804      	ldr	r0, [pc, #16]	; (800a1c4 <rt_test_008_007_setup+0x14>)
 800a1b4:	f7f9 ffac 	bl	8004110 <chCondObjectInit>
  chMtxObjectInit(&m1);
 800a1b8:	4803      	ldr	r0, [pc, #12]	; (800a1c8 <rt_test_008_007_setup+0x18>)
 800a1ba:	f7f9 fd69 	bl	8003c90 <chMtxObjectInit>
}
 800a1be:	bf00      	nop
 800a1c0:	bd08      	pop	{r3, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20000820 	.word	0x20000820
 800a1c8:	20000800 	.word	0x20000800
 800a1cc:	00000000 	.word	0x00000000

0800a1d0 <rt_test_008_007_execute>:

static void rt_test_008_007_execute(void) {
 800a1d0:	b500      	push	{lr}
 800a1d2:	b085      	sub	sp, #20

  /* [8.7.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
 800a1d4:	4b37      	ldr	r3, [pc, #220]	; (800a2b4 <rt_test_008_007_execute+0xe4>)
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	601a      	str	r2, [r3, #0]
  {
    tprio_t prio = chThdGetPriorityX();
 800a1da:	f7ff fcd1 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 800a1de:	9003      	str	r0, [sp, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800a1e0:	4b35      	ldr	r3, [pc, #212]	; (800a2b8 <rt_test_008_007_execute+0xe8>)
 800a1e2:	6818      	ldr	r0, [r3, #0]
 800a1e4:	9b03      	ldr	r3, [sp, #12]
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	4b34      	ldr	r3, [pc, #208]	; (800a2bc <rt_test_008_007_execute+0xec>)
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	4b34      	ldr	r3, [pc, #208]	; (800a2c0 <rt_test_008_007_execute+0xf0>)
 800a1ee:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a1f2:	f7f8 ffdd 	bl	80031b0 <chThdCreateStatic>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	4a32      	ldr	r2, [pc, #200]	; (800a2c4 <rt_test_008_007_execute+0xf4>)
 800a1fa:	6013      	str	r3, [r2, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800a1fc:	4b2e      	ldr	r3, [pc, #184]	; (800a2b8 <rt_test_008_007_execute+0xe8>)
 800a1fe:	6858      	ldr	r0, [r3, #4]
 800a200:	9b03      	ldr	r3, [sp, #12]
 800a202:	1c9a      	adds	r2, r3, #2
 800a204:	4b30      	ldr	r3, [pc, #192]	; (800a2c8 <rt_test_008_007_execute+0xf8>)
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	4b2d      	ldr	r3, [pc, #180]	; (800a2c0 <rt_test_008_007_execute+0xf0>)
 800a20a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a20e:	f7f8 ffcf 	bl	80031b0 <chThdCreateStatic>
 800a212:	4603      	mov	r3, r0
 800a214:	4a2b      	ldr	r2, [pc, #172]	; (800a2c4 <rt_test_008_007_execute+0xf4>)
 800a216:	6053      	str	r3, [r2, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800a218:	4b27      	ldr	r3, [pc, #156]	; (800a2b8 <rt_test_008_007_execute+0xe8>)
 800a21a:	6898      	ldr	r0, [r3, #8]
 800a21c:	9b03      	ldr	r3, [sp, #12]
 800a21e:	1cda      	adds	r2, r3, #3
 800a220:	4b2a      	ldr	r3, [pc, #168]	; (800a2cc <rt_test_008_007_execute+0xfc>)
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	4b26      	ldr	r3, [pc, #152]	; (800a2c0 <rt_test_008_007_execute+0xf0>)
 800a226:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a22a:	f7f8 ffc1 	bl	80031b0 <chThdCreateStatic>
 800a22e:	4603      	mov	r3, r0
 800a230:	4a24      	ldr	r2, [pc, #144]	; (800a2c4 <rt_test_008_007_execute+0xf4>)
 800a232:	6093      	str	r3, [r2, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800a234:	4b20      	ldr	r3, [pc, #128]	; (800a2b8 <rt_test_008_007_execute+0xe8>)
 800a236:	68d8      	ldr	r0, [r3, #12]
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	1d1a      	adds	r2, r3, #4
 800a23c:	4b24      	ldr	r3, [pc, #144]	; (800a2d0 <rt_test_008_007_execute+0x100>)
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	4b1f      	ldr	r3, [pc, #124]	; (800a2c0 <rt_test_008_007_execute+0xf0>)
 800a242:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a246:	f7f8 ffb3 	bl	80031b0 <chThdCreateStatic>
 800a24a:	4603      	mov	r3, r0
 800a24c:	4a1d      	ldr	r2, [pc, #116]	; (800a2c4 <rt_test_008_007_execute+0xf4>)
 800a24e:	60d3      	str	r3, [r2, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800a250:	4b19      	ldr	r3, [pc, #100]	; (800a2b8 <rt_test_008_007_execute+0xe8>)
 800a252:	6918      	ldr	r0, [r3, #16]
 800a254:	9b03      	ldr	r3, [sp, #12]
 800a256:	1d5a      	adds	r2, r3, #5
 800a258:	4b1e      	ldr	r3, [pc, #120]	; (800a2d4 <rt_test_008_007_execute+0x104>)
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	4b18      	ldr	r3, [pc, #96]	; (800a2c0 <rt_test_008_007_execute+0xf0>)
 800a25e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a262:	f7f8 ffa5 	bl	80031b0 <chThdCreateStatic>
 800a266:	4603      	mov	r3, r0
 800a268:	4a16      	ldr	r2, [pc, #88]	; (800a2c4 <rt_test_008_007_execute+0xf4>)
 800a26a:	6113      	str	r3, [r2, #16]
  test_end_step(1);

  /* [8.7.2] Atomically signaling the condition variable five times
     then waiting for the threads to terminate in priority order, the
     order is tested.*/
  test_set_step(2);
 800a26c:	4b11      	ldr	r3, [pc, #68]	; (800a2b4 <rt_test_008_007_execute+0xe4>)
 800a26e:	2202      	movs	r2, #2
 800a270:	601a      	str	r2, [r3, #0]
  {
    chSysLock();
 800a272:	f7ff fc5d 	bl	8009b30 <chSysLock.lto_priv.24>
    chCondSignalI(&c1);
 800a276:	4818      	ldr	r0, [pc, #96]	; (800a2d8 <rt_test_008_007_execute+0x108>)
 800a278:	f7f9 ff7a 	bl	8004170 <chCondSignalI>
    chCondSignalI(&c1);
 800a27c:	4816      	ldr	r0, [pc, #88]	; (800a2d8 <rt_test_008_007_execute+0x108>)
 800a27e:	f7f9 ff77 	bl	8004170 <chCondSignalI>
    chCondSignalI(&c1);
 800a282:	4815      	ldr	r0, [pc, #84]	; (800a2d8 <rt_test_008_007_execute+0x108>)
 800a284:	f7f9 ff74 	bl	8004170 <chCondSignalI>
    chCondSignalI(&c1);
 800a288:	4813      	ldr	r0, [pc, #76]	; (800a2d8 <rt_test_008_007_execute+0x108>)
 800a28a:	f7f9 ff71 	bl	8004170 <chCondSignalI>
    chCondSignalI(&c1);
 800a28e:	4812      	ldr	r0, [pc, #72]	; (800a2d8 <rt_test_008_007_execute+0x108>)
 800a290:	f7f9 ff6e 	bl	8004170 <chCondSignalI>
    chSchRescheduleS();
 800a294:	f7f8 fc6c 	bl	8002b70 <chSchRescheduleS>
    chSysUnlock();
 800a298:	f7ff fc5a 	bl	8009b50 <chSysUnlock.lto_priv.24>
    test_wait_threads();
 800a29c:	f7fd fb78 	bl	8007990 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800a2a0:	490e      	ldr	r1, [pc, #56]	; (800a2dc <rt_test_008_007_execute+0x10c>)
 800a2a2:	480f      	ldr	r0, [pc, #60]	; (800a2e0 <rt_test_008_007_execute+0x110>)
 800a2a4:	f7fc ffbc 	bl	8007220 <__test_assert_sequence>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
  }
  test_end_step(2);
}
 800a2ac:	b005      	add	sp, #20
 800a2ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2b2:	bf00      	nop
 800a2b4:	20000c6c 	.word	0x20000c6c
 800a2b8:	0801d708 	.word	0x0801d708
 800a2bc:	0801e108 	.word	0x0801e108
 800a2c0:	08009c31 	.word	0x08009c31
 800a2c4:	20001508 	.word	0x20001508
 800a2c8:	0801e0e0 	.word	0x0801e0e0
 800a2cc:	0801e0e4 	.word	0x0801e0e4
 800a2d0:	0801e0e8 	.word	0x0801e0e8
 800a2d4:	0801e0ec 	.word	0x0801e0ec
 800a2d8:	20000820 	.word	0x20000820
 800a2dc:	0801e0f0 	.word	0x0801e0f0
 800a2e0:	0801e104 	.word	0x0801e104
	...

0800a2f0 <rt_test_008_008_setup>:
 * - [8.8.2] Broarcasting on the condition variable then waiting for
 *   the threads to terminate in priority order, the order is tested.
 * .
 */

static void rt_test_008_008_setup(void) {
 800a2f0:	b508      	push	{r3, lr}
  chCondObjectInit(&c1);
 800a2f2:	4804      	ldr	r0, [pc, #16]	; (800a304 <rt_test_008_008_setup+0x14>)
 800a2f4:	f7f9 ff0c 	bl	8004110 <chCondObjectInit>
  chMtxObjectInit(&m1);
 800a2f8:	4803      	ldr	r0, [pc, #12]	; (800a308 <rt_test_008_008_setup+0x18>)
 800a2fa:	f7f9 fcc9 	bl	8003c90 <chMtxObjectInit>
}
 800a2fe:	bf00      	nop
 800a300:	bd08      	pop	{r3, pc}
 800a302:	bf00      	nop
 800a304:	20000820 	.word	0x20000820
 800a308:	20000800 	.word	0x20000800
 800a30c:	00000000 	.word	0x00000000

0800a310 <rt_test_008_008_execute>:

static void rt_test_008_008_execute(void) {
 800a310:	b500      	push	{lr}
 800a312:	b085      	sub	sp, #20

  /* [8.8.1] Starting the five threads with increasing priority, the
     threads will queue on the condition variable.*/
  test_set_step(1);
 800a314:	4b2e      	ldr	r3, [pc, #184]	; (800a3d0 <rt_test_008_008_execute+0xc0>)
 800a316:	2201      	movs	r2, #1
 800a318:	601a      	str	r2, [r3, #0]
  {
    tprio_t prio = chThdGetPriorityX();
 800a31a:	f7ff fc31 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 800a31e:	9003      	str	r0, [sp, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800a320:	4b2c      	ldr	r3, [pc, #176]	; (800a3d4 <rt_test_008_008_execute+0xc4>)
 800a322:	6818      	ldr	r0, [r3, #0]
 800a324:	9b03      	ldr	r3, [sp, #12]
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	4b2b      	ldr	r3, [pc, #172]	; (800a3d8 <rt_test_008_008_execute+0xc8>)
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	4b2b      	ldr	r3, [pc, #172]	; (800a3dc <rt_test_008_008_execute+0xcc>)
 800a32e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a332:	f7f8 ff3d 	bl	80031b0 <chThdCreateStatic>
 800a336:	4603      	mov	r3, r0
 800a338:	4a29      	ldr	r2, [pc, #164]	; (800a3e0 <rt_test_008_008_execute+0xd0>)
 800a33a:	6013      	str	r3, [r2, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800a33c:	4b25      	ldr	r3, [pc, #148]	; (800a3d4 <rt_test_008_008_execute+0xc4>)
 800a33e:	6858      	ldr	r0, [r3, #4]
 800a340:	9b03      	ldr	r3, [sp, #12]
 800a342:	1c9a      	adds	r2, r3, #2
 800a344:	4b27      	ldr	r3, [pc, #156]	; (800a3e4 <rt_test_008_008_execute+0xd4>)
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	4b24      	ldr	r3, [pc, #144]	; (800a3dc <rt_test_008_008_execute+0xcc>)
 800a34a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a34e:	f7f8 ff2f 	bl	80031b0 <chThdCreateStatic>
 800a352:	4603      	mov	r3, r0
 800a354:	4a22      	ldr	r2, [pc, #136]	; (800a3e0 <rt_test_008_008_execute+0xd0>)
 800a356:	6053      	str	r3, [r2, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800a358:	4b1e      	ldr	r3, [pc, #120]	; (800a3d4 <rt_test_008_008_execute+0xc4>)
 800a35a:	6898      	ldr	r0, [r3, #8]
 800a35c:	9b03      	ldr	r3, [sp, #12]
 800a35e:	1cda      	adds	r2, r3, #3
 800a360:	4b21      	ldr	r3, [pc, #132]	; (800a3e8 <rt_test_008_008_execute+0xd8>)
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	4b1d      	ldr	r3, [pc, #116]	; (800a3dc <rt_test_008_008_execute+0xcc>)
 800a366:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a36a:	f7f8 ff21 	bl	80031b0 <chThdCreateStatic>
 800a36e:	4603      	mov	r3, r0
 800a370:	4a1b      	ldr	r2, [pc, #108]	; (800a3e0 <rt_test_008_008_execute+0xd0>)
 800a372:	6093      	str	r3, [r2, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800a374:	4b17      	ldr	r3, [pc, #92]	; (800a3d4 <rt_test_008_008_execute+0xc4>)
 800a376:	68d8      	ldr	r0, [r3, #12]
 800a378:	9b03      	ldr	r3, [sp, #12]
 800a37a:	1d1a      	adds	r2, r3, #4
 800a37c:	4b1b      	ldr	r3, [pc, #108]	; (800a3ec <rt_test_008_008_execute+0xdc>)
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	4b16      	ldr	r3, [pc, #88]	; (800a3dc <rt_test_008_008_execute+0xcc>)
 800a382:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a386:	f7f8 ff13 	bl	80031b0 <chThdCreateStatic>
 800a38a:	4603      	mov	r3, r0
 800a38c:	4a14      	ldr	r2, [pc, #80]	; (800a3e0 <rt_test_008_008_execute+0xd0>)
 800a38e:	60d3      	str	r3, [r2, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800a390:	4b10      	ldr	r3, [pc, #64]	; (800a3d4 <rt_test_008_008_execute+0xc4>)
 800a392:	6918      	ldr	r0, [r3, #16]
 800a394:	9b03      	ldr	r3, [sp, #12]
 800a396:	1d5a      	adds	r2, r3, #5
 800a398:	4b15      	ldr	r3, [pc, #84]	; (800a3f0 <rt_test_008_008_execute+0xe0>)
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	4b0f      	ldr	r3, [pc, #60]	; (800a3dc <rt_test_008_008_execute+0xcc>)
 800a39e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a3a2:	f7f8 ff05 	bl	80031b0 <chThdCreateStatic>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	4a0d      	ldr	r2, [pc, #52]	; (800a3e0 <rt_test_008_008_execute+0xd0>)
 800a3aa:	6113      	str	r3, [r2, #16]
  }
  test_end_step(1);

  /* [8.8.2] Broarcasting on the condition variable then waiting for
     the threads to terminate in priority order, the order is tested.*/
  test_set_step(2);
 800a3ac:	4b08      	ldr	r3, [pc, #32]	; (800a3d0 <rt_test_008_008_execute+0xc0>)
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	601a      	str	r2, [r3, #0]
  {
    chCondBroadcast(&c1);
 800a3b2:	4810      	ldr	r0, [pc, #64]	; (800a3f4 <rt_test_008_008_execute+0xe4>)
 800a3b4:	f7f9 fefc 	bl	80041b0 <chCondBroadcast>
    test_wait_threads();
 800a3b8:	f7fd faea 	bl	8007990 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800a3bc:	490e      	ldr	r1, [pc, #56]	; (800a3f8 <rt_test_008_008_execute+0xe8>)
 800a3be:	480f      	ldr	r0, [pc, #60]	; (800a3fc <rt_test_008_008_execute+0xec>)
 800a3c0:	f7fc ff2e 	bl	8007220 <__test_assert_sequence>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
  }
  test_end_step(2);
}
 800a3c8:	b005      	add	sp, #20
 800a3ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3ce:	bf00      	nop
 800a3d0:	20000c6c 	.word	0x20000c6c
 800a3d4:	0801d708 	.word	0x0801d708
 800a3d8:	0801e108 	.word	0x0801e108
 800a3dc:	08009c31 	.word	0x08009c31
 800a3e0:	20001508 	.word	0x20001508
 800a3e4:	0801e0e0 	.word	0x0801e0e0
 800a3e8:	0801e0e4 	.word	0x0801e0e4
 800a3ec:	0801e0e8 	.word	0x0801e0e8
 800a3f0:	0801e0ec 	.word	0x0801e0ec
 800a3f4:	20000820 	.word	0x20000820
 800a3f8:	0801e0f0 	.word	0x0801e0f0
 800a3fc:	0801e104 	.word	0x0801e104

0800a400 <rt_test_008_009_setup>:
 * - [8.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.
 * - [8.9.7] Checking the order of operations.
 * .
 */

static void rt_test_008_009_setup(void) {
 800a400:	b508      	push	{r3, lr}
  chCondObjectInit(&c1);
 800a402:	4805      	ldr	r0, [pc, #20]	; (800a418 <rt_test_008_009_setup+0x18>)
 800a404:	f7f9 fe84 	bl	8004110 <chCondObjectInit>
  chMtxObjectInit(&m1);
 800a408:	4804      	ldr	r0, [pc, #16]	; (800a41c <rt_test_008_009_setup+0x1c>)
 800a40a:	f7f9 fc41 	bl	8003c90 <chMtxObjectInit>
  chMtxObjectInit(&m2);
 800a40e:	4804      	ldr	r0, [pc, #16]	; (800a420 <rt_test_008_009_setup+0x20>)
 800a410:	f7f9 fc3e 	bl	8003c90 <chMtxObjectInit>
}
 800a414:	bf00      	nop
 800a416:	bd08      	pop	{r3, pc}
 800a418:	20000820 	.word	0x20000820
 800a41c:	20000800 	.word	0x20000800
 800a420:	20000810 	.word	0x20000810
	...

0800a430 <rt_test_008_009_execute>:

static void rt_test_008_009_execute(void) {
 800a430:	b500      	push	{lr}
 800a432:	b085      	sub	sp, #20
  tprio_t prio;

  /* [8.9.1] Reading current base priority.*/
  test_set_step(1);
 800a434:	4b29      	ldr	r3, [pc, #164]	; (800a4dc <rt_test_008_009_execute+0xac>)
 800a436:	2201      	movs	r2, #1
 800a438:	601a      	str	r2, [r3, #0]
  {
    prio = chThdGetPriorityX();
 800a43a:	f7ff fba1 	bl	8009b80 <chThdGetPriorityX.lto_priv.3>
 800a43e:	9003      	str	r0, [sp, #12]
  }
  test_end_step(1);

  /* [8.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 800a440:	4b26      	ldr	r3, [pc, #152]	; (800a4dc <rt_test_008_009_execute+0xac>)
 800a442:	2202      	movs	r2, #2
 800a444:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800a446:	4b26      	ldr	r3, [pc, #152]	; (800a4e0 <rt_test_008_009_execute+0xb0>)
 800a448:	6818      	ldr	r0, [r3, #0]
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	1c5a      	adds	r2, r3, #1
 800a44e:	4b25      	ldr	r3, [pc, #148]	; (800a4e4 <rt_test_008_009_execute+0xb4>)
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	4b25      	ldr	r3, [pc, #148]	; (800a4e8 <rt_test_008_009_execute+0xb8>)
 800a454:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a458:	f7f8 feaa 	bl	80031b0 <chThdCreateStatic>
 800a45c:	4603      	mov	r3, r0
 800a45e:	4a23      	ldr	r2, [pc, #140]	; (800a4ec <rt_test_008_009_execute+0xbc>)
 800a460:	6013      	str	r3, [r2, #0]
  }
  test_end_step(2);

  /* [8.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 800a462:	4b1e      	ldr	r3, [pc, #120]	; (800a4dc <rt_test_008_009_execute+0xac>)
 800a464:	2203      	movs	r2, #3
 800a466:	601a      	str	r2, [r3, #0]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 800a468:	4b1d      	ldr	r3, [pc, #116]	; (800a4e0 <rt_test_008_009_execute+0xb0>)
 800a46a:	6858      	ldr	r0, [r3, #4]
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	1c9a      	adds	r2, r3, #2
 800a470:	4b1f      	ldr	r3, [pc, #124]	; (800a4f0 <rt_test_008_009_execute+0xc0>)
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	4b1f      	ldr	r3, [pc, #124]	; (800a4f4 <rt_test_008_009_execute+0xc4>)
 800a476:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a47a:	f7f8 fe99 	bl	80031b0 <chThdCreateStatic>
 800a47e:	4603      	mov	r3, r0
 800a480:	4a1a      	ldr	r2, [pc, #104]	; (800a4ec <rt_test_008_009_execute+0xbc>)
 800a482:	6053      	str	r3, [r2, #4]
  }
  test_end_step(3);

  /* [8.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
 800a484:	4b15      	ldr	r3, [pc, #84]	; (800a4dc <rt_test_008_009_execute+0xac>)
 800a486:	2204      	movs	r2, #4
 800a488:	601a      	str	r2, [r3, #0]
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 800a48a:	4b15      	ldr	r3, [pc, #84]	; (800a4e0 <rt_test_008_009_execute+0xb0>)
 800a48c:	6898      	ldr	r0, [r3, #8]
 800a48e:	9b03      	ldr	r3, [sp, #12]
 800a490:	1cda      	adds	r2, r3, #3
 800a492:	4b19      	ldr	r3, [pc, #100]	; (800a4f8 <rt_test_008_009_execute+0xc8>)
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	4b19      	ldr	r3, [pc, #100]	; (800a4fc <rt_test_008_009_execute+0xcc>)
 800a498:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a49c:	f7f8 fe88 	bl	80031b0 <chThdCreateStatic>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	4a12      	ldr	r2, [pc, #72]	; (800a4ec <rt_test_008_009_execute+0xbc>)
 800a4a4:	6093      	str	r3, [r2, #8]
  test_end_step(4);

  /* [8.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 800a4a6:	4b0d      	ldr	r3, [pc, #52]	; (800a4dc <rt_test_008_009_execute+0xac>)
 800a4a8:	2205      	movs	r2, #5
 800a4aa:	601a      	str	r2, [r3, #0]
  {
    chCondSignal(&c1);
 800a4ac:	4814      	ldr	r0, [pc, #80]	; (800a500 <rt_test_008_009_execute+0xd0>)
 800a4ae:	f7f9 fe3f 	bl	8004130 <chCondSignal>
  }
  test_end_step(5);

  /* [8.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 800a4b2:	4b0a      	ldr	r3, [pc, #40]	; (800a4dc <rt_test_008_009_execute+0xac>)
 800a4b4:	2206      	movs	r2, #6
 800a4b6:	601a      	str	r2, [r3, #0]
  {
    chCondSignal(&c1);
 800a4b8:	4811      	ldr	r0, [pc, #68]	; (800a500 <rt_test_008_009_execute+0xd0>)
 800a4ba:	f7f9 fe39 	bl	8004130 <chCondSignal>
  }
  test_end_step(6);

  /* [8.9.7] Checking the order of operations.*/
  test_set_step(7);
 800a4be:	4b07      	ldr	r3, [pc, #28]	; (800a4dc <rt_test_008_009_execute+0xac>)
 800a4c0:	2207      	movs	r2, #7
 800a4c2:	601a      	str	r2, [r3, #0]
  {
    test_wait_threads();
 800a4c4:	f7fd fa64 	bl	8007990 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
 800a4c8:	490e      	ldr	r1, [pc, #56]	; (800a504 <rt_test_008_009_execute+0xd4>)
 800a4ca:	480f      	ldr	r0, [pc, #60]	; (800a508 <rt_test_008_009_execute+0xd8>)
 800a4cc:	f7fc fea8 	bl	8007220 <__test_assert_sequence>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
  }
  test_end_step(7);
}
 800a4d4:	b005      	add	sp, #20
 800a4d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4da:	bf00      	nop
 800a4dc:	20000c6c 	.word	0x20000c6c
 800a4e0:	0801d708 	.word	0x0801d708
 800a4e4:	0801e0ec 	.word	0x0801e0ec
 800a4e8:	08009c71 	.word	0x08009c71
 800a4ec:	20001508 	.word	0x20001508
 800a4f0:	0801e0e4 	.word	0x0801e0e4
 800a4f4:	08009c31 	.word	0x08009c31
 800a4f8:	0801e0e8 	.word	0x0801e0e8
 800a4fc:	08009cc1 	.word	0x08009cc1
 800a500:	20000820 	.word	0x20000820
 800a504:	0801e0f0 	.word	0x0801e0f0
 800a508:	0801e3d8 	.word	0x0801e3d8
 800a50c:	00000000 	.word	0x00000000

0800a510 <chSysLock.lto_priv.25>:
static inline void chSysLock(void) {
 800a510:	b082      	sub	sp, #8
 800a512:	2330      	movs	r3, #48	; 0x30
 800a514:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a516:	9b01      	ldr	r3, [sp, #4]
 800a518:	f383 8811 	msr	BASEPRI, r3
}
 800a51c:	bf00      	nop
}
 800a51e:	bf00      	nop
}
 800a520:	bf00      	nop
 800a522:	b002      	add	sp, #8
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
	...

0800a530 <chSysUnlock.lto_priv.25>:
static inline void chSysUnlock(void) {
 800a530:	b082      	sub	sp, #8
 800a532:	2300      	movs	r3, #0
 800a534:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a536:	9b01      	ldr	r3, [sp, #4]
 800a538:	f383 8811 	msr	BASEPRI, r3
}
 800a53c:	bf00      	nop
}
 800a53e:	bf00      	nop
}
 800a540:	bf00      	nop
 800a542:	b002      	add	sp, #8
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
	...

0800a550 <chThdGetSelfX.lto_priv.10>:
  return __sch_get_currthread();
 800a550:	4b01      	ldr	r3, [pc, #4]	; (800a558 <chThdGetSelfX.lto_priv.10+0x8>)
 800a552:	68db      	ldr	r3, [r3, #12]
}
 800a554:	4618      	mov	r0, r3
 800a556:	4770      	bx	lr
 800a558:	20000a48 	.word	0x20000a48
 800a55c:	00000000 	.word	0x00000000

0800a560 <chThdGetPriorityX.lto_priv.4>:
static inline tprio_t chThdGetPriorityX(void) {
 800a560:	b508      	push	{r3, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 800a562:	f7ff fff5 	bl	800a550 <chThdGetSelfX.lto_priv.10>
 800a566:	4603      	mov	r3, r0
 800a568:	689b      	ldr	r3, [r3, #8]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	bd08      	pop	{r3, pc}
 800a56e:	bf00      	nop

0800a570 <chMsgWait.lto_priv.1>:
static inline thread_t *chMsgWait(void) {
 800a570:	b500      	push	{lr}
 800a572:	b083      	sub	sp, #12
  chSysLock();
 800a574:	f7ff ffcc 	bl	800a510 <chSysLock.lto_priv.25>
  tp = chMsgWaitS();
 800a578:	f7fa fa32 	bl	80049e0 <chMsgWaitS>
 800a57c:	9001      	str	r0, [sp, #4]
  chSysUnlock();
 800a57e:	f7ff ffd7 	bl	800a530 <chSysUnlock.lto_priv.25>
  return tp;
 800a582:	9b01      	ldr	r3, [sp, #4]
}
 800a584:	4618      	mov	r0, r3
 800a586:	b003      	add	sp, #12
 800a588:	f85d fb04 	ldr.w	pc, [sp], #4
 800a58c:	0000      	movs	r0, r0
	...

0800a590 <chMsgGet.lto_priv.1>:
static inline msg_t chMsgGet(thread_t *tp) {
 800a590:	b082      	sub	sp, #8
 800a592:	9001      	str	r0, [sp, #4]
  return tp->u.sentmsg;
 800a594:	9b01      	ldr	r3, [sp, #4]
 800a596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800a598:	4618      	mov	r0, r3
 800a59a:	b002      	add	sp, #8
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop

0800a5a0 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 800a5a0:	b500      	push	{lr}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	9001      	str	r0, [sp, #4]

  chMsgSend(p, 'A');
 800a5a6:	2141      	movs	r1, #65	; 0x41
 800a5a8:	9801      	ldr	r0, [sp, #4]
 800a5aa:	f7fa f9f1 	bl	8004990 <chMsgSend>
  chMsgSend(p, 'B');
 800a5ae:	2142      	movs	r1, #66	; 0x42
 800a5b0:	9801      	ldr	r0, [sp, #4]
 800a5b2:	f7fa f9ed 	bl	8004990 <chMsgSend>
  chMsgSend(p, 'C');
 800a5b6:	2143      	movs	r1, #67	; 0x43
 800a5b8:	9801      	ldr	r0, [sp, #4]
 800a5ba:	f7fa f9e9 	bl	8004990 <chMsgSend>
  chMsgSend(p, 'D');
 800a5be:	2144      	movs	r1, #68	; 0x44
 800a5c0:	9801      	ldr	r0, [sp, #4]
 800a5c2:	f7fa f9e5 	bl	8004990 <chMsgSend>
}
 800a5c6:	bf00      	nop
 800a5c8:	b003      	add	sp, #12
 800a5ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5ce:	bf00      	nop

0800a5d0 <rt_test_009_001_execute>:
 * - [9.1.1] Starting the messenger thread.
 * - [9.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_009_001_execute(void) {
 800a5d0:	b530      	push	{r4, r5, lr}
 800a5d2:	b087      	sub	sp, #28
  thread_t *tp;
  msg_t msg;

  /* [9.1.1] Starting the messenger thread.*/
  test_set_step(1);
 800a5d4:	4b1e      	ldr	r3, [pc, #120]	; (800a650 <rt_test_009_001_execute+0x80>)
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 800a5da:	4b1e      	ldr	r3, [pc, #120]	; (800a654 <rt_test_009_001_execute+0x84>)
 800a5dc:	681c      	ldr	r4, [r3, #0]
 800a5de:	f7ff ffbf 	bl	800a560 <chThdGetPriorityX.lto_priv.4>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	1c5d      	adds	r5, r3, #1
                                   msg_thread1, chThdGetSelfX());
 800a5e6:	f7ff ffb3 	bl	800a550 <chThdGetSelfX.lto_priv.10>
 800a5ea:	4603      	mov	r3, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	4b1a      	ldr	r3, [pc, #104]	; (800a658 <rt_test_009_001_execute+0x88>)
 800a5f0:	462a      	mov	r2, r5
 800a5f2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f7f8 fdda 	bl	80031b0 <chThdCreateStatic>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	4a17      	ldr	r2, [pc, #92]	; (800a65c <rt_test_009_001_execute+0x8c>)
 800a600:	6013      	str	r3, [r2, #0]
  }
  test_end_step(1);

  /* [9.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 800a602:	4b13      	ldr	r3, [pc, #76]	; (800a650 <rt_test_009_001_execute+0x80>)
 800a604:	2202      	movs	r2, #2
 800a606:	601a      	str	r2, [r3, #0]
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
 800a608:	2300      	movs	r3, #0
 800a60a:	9305      	str	r3, [sp, #20]
 800a60c:	e012      	b.n	800a634 <rt_test_009_001_execute+0x64>
      tp = chMsgWait();
 800a60e:	f7ff ffaf 	bl	800a570 <chMsgWait.lto_priv.1>
 800a612:	9004      	str	r0, [sp, #16]
      msg = chMsgGet(tp);
 800a614:	9804      	ldr	r0, [sp, #16]
 800a616:	f7ff ffbb 	bl	800a590 <chMsgGet.lto_priv.1>
 800a61a:	9003      	str	r0, [sp, #12]
      chMsgRelease(tp, msg);
 800a61c:	9903      	ldr	r1, [sp, #12]
 800a61e:	9804      	ldr	r0, [sp, #16]
 800a620:	f7fa f9fe 	bl	8004a20 <chMsgRelease>
      test_emit_token(msg);
 800a624:	9b03      	ldr	r3, [sp, #12]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fc fe41 	bl	80072b0 <test_emit_token>
    for (i = 0; i < 4; i++) {
 800a62e:	9b05      	ldr	r3, [sp, #20]
 800a630:	3301      	adds	r3, #1
 800a632:	9305      	str	r3, [sp, #20]
 800a634:	9b05      	ldr	r3, [sp, #20]
 800a636:	2b03      	cmp	r3, #3
 800a638:	d9e9      	bls.n	800a60e <rt_test_009_001_execute+0x3e>
    }
    test_wait_threads();
 800a63a:	f7fd f9a9 	bl	8007990 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 800a63e:	4908      	ldr	r1, [pc, #32]	; (800a660 <rt_test_009_001_execute+0x90>)
 800a640:	4808      	ldr	r0, [pc, #32]	; (800a664 <rt_test_009_001_execute+0x94>)
 800a642:	f7fc fded 	bl	8007220 <__test_assert_sequence>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
  }
  test_end_step(2);
}
 800a64a:	b007      	add	sp, #28
 800a64c:	bd30      	pop	{r4, r5, pc}
 800a64e:	bf00      	nop
 800a650:	20000c6c 	.word	0x20000c6c
 800a654:	0801d708 	.word	0x0801d708
 800a658:	0800a5a1 	.word	0x0800a5a1
 800a65c:	20001508 	.word	0x20001508
 800a660:	0801e0f0 	.word	0x0801e0f0
 800a664:	0801e410 	.word	0x0801e410
	...

0800a670 <chTimeAddX.lto_priv.5>:
                                   sysinterval_t interval) {
 800a670:	b082      	sub	sp, #8
 800a672:	9001      	str	r0, [sp, #4]
 800a674:	9100      	str	r1, [sp, #0]
  return systime + (systime_t)interval;
 800a676:	9a01      	ldr	r2, [sp, #4]
 800a678:	9b00      	ldr	r3, [sp, #0]
 800a67a:	4413      	add	r3, r2
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	b002      	add	sp, #8
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
	...

0800a690 <chSysLock.lto_priv.26>:
static inline void chSysLock(void) {
 800a690:	b082      	sub	sp, #8
 800a692:	2330      	movs	r3, #48	; 0x30
 800a694:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a696:	9b01      	ldr	r3, [sp, #4]
 800a698:	f383 8811 	msr	BASEPRI, r3
}
 800a69c:	bf00      	nop
}
 800a69e:	bf00      	nop
}
 800a6a0:	bf00      	nop
 800a6a2:	b002      	add	sp, #8
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
	...

0800a6b0 <chSysUnlock.lto_priv.26>:
static inline void chSysUnlock(void) {
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a6b6:	9b01      	ldr	r3, [sp, #4]
 800a6b8:	f383 8811 	msr	BASEPRI, r3
}
 800a6bc:	bf00      	nop
}
 800a6be:	bf00      	nop
}
 800a6c0:	bf00      	nop
 800a6c2:	b002      	add	sp, #8
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
	...

0800a6d0 <chThdGetSelfX.lto_priv.11>:
  return __sch_get_currthread();
 800a6d0:	4b01      	ldr	r3, [pc, #4]	; (800a6d8 <chThdGetSelfX.lto_priv.11+0x8>)
 800a6d2:	68db      	ldr	r3, [r3, #12]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	4770      	bx	lr
 800a6d8:	20000a48 	.word	0x20000a48
 800a6dc:	00000000 	.word	0x00000000

0800a6e0 <chThdGetPriorityX.lto_priv.5>:
static inline tprio_t chThdGetPriorityX(void) {
 800a6e0:	b508      	push	{r3, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 800a6e2:	f7ff fff5 	bl	800a6d0 <chThdGetSelfX.lto_priv.11>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	689b      	ldr	r3, [r3, #8]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	bd08      	pop	{r3, pc}
 800a6ee:	bf00      	nop

0800a6f0 <chEvtObjectInit.lto_priv.1>:
static inline void chEvtObjectInit(event_source_t *esp) {
 800a6f0:	b082      	sub	sp, #8
 800a6f2:	9001      	str	r0, [sp, #4]
  esp->next = (event_listener_t *)esp;
 800a6f4:	9b01      	ldr	r3, [sp, #4]
 800a6f6:	9a01      	ldr	r2, [sp, #4]
 800a6f8:	601a      	str	r2, [r3, #0]
}
 800a6fa:	bf00      	nop
 800a6fc:	b002      	add	sp, #8
 800a6fe:	4770      	bx	lr

0800a700 <chEvtRegisterMask>:
                                     eventmask_t events) {
 800a700:	b500      	push	{lr}
 800a702:	b085      	sub	sp, #20
 800a704:	9003      	str	r0, [sp, #12]
 800a706:	9102      	str	r1, [sp, #8]
 800a708:	9201      	str	r2, [sp, #4]
  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 800a70a:	f04f 33ff 	mov.w	r3, #4294967295
 800a70e:	9a01      	ldr	r2, [sp, #4]
 800a710:	9902      	ldr	r1, [sp, #8]
 800a712:	9803      	ldr	r0, [sp, #12]
 800a714:	f7f9 fe4c 	bl	80043b0 <chEvtRegisterMaskWithFlags>
}
 800a718:	bf00      	nop
 800a71a:	b005      	add	sp, #20
 800a71c:	f85d fb04 	ldr.w	pc, [sp], #4

0800a720 <chEvtIsListeningI>:
static inline bool chEvtIsListeningI(event_source_t *esp) {
 800a720:	b082      	sub	sp, #8
 800a722:	9001      	str	r0, [sp, #4]
  return (bool)(esp != (event_source_t *)esp->next);
 800a724:	9b01      	ldr	r3, [sp, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	9a01      	ldr	r2, [sp, #4]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	bf14      	ite	ne
 800a72e:	2301      	movne	r3, #1
 800a730:	2300      	moveq	r3, #0
 800a732:	b2db      	uxtb	r3, r3
}
 800a734:	4618      	mov	r0, r3
 800a736:	b002      	add	sp, #8
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	0000      	movs	r0, r0
	...

0800a740 <chEvtBroadcast>:
static inline void chEvtBroadcast(event_source_t *esp) {
 800a740:	b500      	push	{lr}
 800a742:	b083      	sub	sp, #12
 800a744:	9001      	str	r0, [sp, #4]
  chEvtBroadcastFlags(esp, (eventflags_t)0);
 800a746:	2100      	movs	r1, #0
 800a748:	9801      	ldr	r0, [sp, #4]
 800a74a:	f7f9 ff21 	bl	8004590 <chEvtBroadcastFlags>
}
 800a74e:	bf00      	nop
 800a750:	b003      	add	sp, #12
 800a752:	f85d fb04 	ldr.w	pc, [sp], #4
 800a756:	bf00      	nop
	...

0800a760 <osalSysLock.lto_priv.4>:
static inline void osalSysLock(void) {
 800a760:	b508      	push	{r3, lr}
  chSysLock();
 800a762:	f7ff ff95 	bl	800a690 <chSysLock.lto_priv.26>
}
 800a766:	bf00      	nop
 800a768:	bd08      	pop	{r3, pc}
 800a76a:	bf00      	nop
 800a76c:	0000      	movs	r0, r0
	...

0800a770 <osalSysUnlock.lto_priv.4>:
static inline void osalSysUnlock(void) {
 800a770:	b508      	push	{r3, lr}
  chSysUnlock();
 800a772:	f7ff ff9d 	bl	800a6b0 <chSysUnlock.lto_priv.26>
}
 800a776:	bf00      	nop
 800a778:	bd08      	pop	{r3, pc}
 800a77a:	bf00      	nop
 800a77c:	0000      	movs	r0, r0
	...

0800a780 <h1>:
 ****************************************************************************/

static EVENTSOURCE_DECL(es1);
static EVENTSOURCE_DECL(es2);

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 800a780:	b500      	push	{lr}
 800a782:	b083      	sub	sp, #12
 800a784:	9001      	str	r0, [sp, #4]
 800a786:	2041      	movs	r0, #65	; 0x41
 800a788:	f7fc fd92 	bl	80072b0 <test_emit_token>
 800a78c:	bf00      	nop
 800a78e:	b003      	add	sp, #12
 800a790:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a7a0 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 800a7a0:	b500      	push	{lr}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	9001      	str	r0, [sp, #4]
 800a7a6:	2042      	movs	r0, #66	; 0x42
 800a7a8:	f7fc fd82 	bl	80072b0 <test_emit_token>
 800a7ac:	bf00      	nop
 800a7ae:	b003      	add	sp, #12
 800a7b0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a7c0 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 800a7c0:	b500      	push	{lr}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	9001      	str	r0, [sp, #4]
 800a7c6:	2043      	movs	r0, #67	; 0x43
 800a7c8:	f7fc fd72 	bl	80072b0 <test_emit_token>
 800a7cc:	bf00      	nop
 800a7ce:	b003      	add	sp, #12
 800a7d0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a7e0 <evt_thread3>:
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static THD_FUNCTION(evt_thread3, p) {
 800a7e0:	b500      	push	{lr}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	9001      	str	r0, [sp, #4]

  chThdSleepMilliseconds(50);
 800a7e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a7ea:	f7f8 fe21 	bl	8003430 <chThdSleep>
  chEvtSignal((thread_t *)p, 1);
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	9801      	ldr	r0, [sp, #4]
 800a7f2:	f7f9 fe85 	bl	8004500 <chEvtSignal>
}
 800a7f6:	bf00      	nop
 800a7f8:	b003      	add	sp, #12
 800a7fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7fe:	bf00      	nop

0800a800 <evt_thread7>:

static THD_FUNCTION(evt_thread7, p) {
 800a800:	b500      	push	{lr}
 800a802:	b083      	sub	sp, #12
 800a804:	9001      	str	r0, [sp, #4]

  (void)p;
  chEvtBroadcast(&es1);
 800a806:	4807      	ldr	r0, [pc, #28]	; (800a824 <evt_thread7+0x24>)
 800a808:	f7ff ff9a 	bl	800a740 <chEvtBroadcast>
  chThdSleepMilliseconds(50);
 800a80c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a810:	f7f8 fe0e 	bl	8003430 <chThdSleep>
  chEvtBroadcast(&es2);
 800a814:	4804      	ldr	r0, [pc, #16]	; (800a828 <evt_thread7+0x28>)
 800a816:	f7ff ff93 	bl	800a740 <chEvtBroadcast>
}
 800a81a:	bf00      	nop
 800a81c:	b003      	add	sp, #12
 800a81e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a822:	bf00      	nop
 800a824:	20000828 	.word	0x20000828
 800a828:	2000082c 	.word	0x2000082c
 800a82c:	00000000 	.word	0x00000000

0800a830 <rt_test_010_001_execute>:
 * - [10.1.4] An Event Listener is unregistered, the Event Source must
 *   not have listeners.
 * .
 */

static void rt_test_010_001_execute(void) {
 800a830:	b500      	push	{lr}
 800a832:	b08b      	sub	sp, #44	; 0x2c
  event_listener_t el1, el2;

  /* [10.1.1] An Event Source is initialized.*/
  test_set_step(1);
 800a834:	4b34      	ldr	r3, [pc, #208]	; (800a908 <rt_test_010_001_execute+0xd8>)
 800a836:	2201      	movs	r2, #1
 800a838:	601a      	str	r2, [r3, #0]
  {
    chEvtObjectInit(&es1);
 800a83a:	4834      	ldr	r0, [pc, #208]	; (800a90c <rt_test_010_001_execute+0xdc>)
 800a83c:	f7ff ff58 	bl	800a6f0 <chEvtObjectInit.lto_priv.1>
  }
  test_end_step(1);

  /* [10.1.2] Two Event Listeners are registered on the Event Source,
     the Event Source is tested to have listeners.*/
  test_set_step(2);
 800a840:	4b31      	ldr	r3, [pc, #196]	; (800a908 <rt_test_010_001_execute+0xd8>)
 800a842:	2202      	movs	r2, #2
 800a844:	601a      	str	r2, [r3, #0]
  {
    chEvtRegisterMask(&es1, &el1, 1);
 800a846:	ab05      	add	r3, sp, #20
 800a848:	2201      	movs	r2, #1
 800a84a:	4619      	mov	r1, r3
 800a84c:	482f      	ldr	r0, [pc, #188]	; (800a90c <rt_test_010_001_execute+0xdc>)
 800a84e:	f7ff ff57 	bl	800a700 <chEvtRegisterMask>
    chEvtRegisterMask(&es1, &el2, 2);
 800a852:	466b      	mov	r3, sp
 800a854:	2202      	movs	r2, #2
 800a856:	4619      	mov	r1, r3
 800a858:	482c      	ldr	r0, [pc, #176]	; (800a90c <rt_test_010_001_execute+0xdc>)
 800a85a:	f7ff ff51 	bl	800a700 <chEvtRegisterMask>
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 800a85e:	f7ff ff7f 	bl	800a760 <osalSysLock.lto_priv.4>
 800a862:	482a      	ldr	r0, [pc, #168]	; (800a90c <rt_test_010_001_execute+0xdc>)
 800a864:	f7ff ff5c 	bl	800a720 <chEvtIsListeningI>
 800a868:	4603      	mov	r3, r0
 800a86a:	4929      	ldr	r1, [pc, #164]	; (800a910 <rt_test_010_001_execute+0xe0>)
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fc fcbf 	bl	80071f0 <__test_assert>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d002      	beq.n	800a87e <rt_test_010_001_execute+0x4e>
 800a878:	f7ff ff7a 	bl	800a770 <osalSysUnlock.lto_priv.4>
 800a87c:	e040      	b.n	800a900 <rt_test_010_001_execute+0xd0>
 800a87e:	f7ff ff77 	bl	800a770 <osalSysUnlock.lto_priv.4>
  }
  test_end_step(2);

  /* [10.1.3] An Event Listener is unregistered, the Event Source must
     still have listeners.*/
  test_set_step(3);
 800a882:	4b21      	ldr	r3, [pc, #132]	; (800a908 <rt_test_010_001_execute+0xd8>)
 800a884:	2203      	movs	r2, #3
 800a886:	601a      	str	r2, [r3, #0]
  {
    chEvtUnregister(&es1, &el1);
 800a888:	ab05      	add	r3, sp, #20
 800a88a:	4619      	mov	r1, r3
 800a88c:	481f      	ldr	r0, [pc, #124]	; (800a90c <rt_test_010_001_execute+0xdc>)
 800a88e:	f7f9 fda7 	bl	80043e0 <chEvtUnregister>
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 800a892:	f7ff ff65 	bl	800a760 <osalSysLock.lto_priv.4>
 800a896:	481d      	ldr	r0, [pc, #116]	; (800a90c <rt_test_010_001_execute+0xdc>)
 800a898:	f7ff ff42 	bl	800a720 <chEvtIsListeningI>
 800a89c:	4603      	mov	r3, r0
 800a89e:	491c      	ldr	r1, [pc, #112]	; (800a910 <rt_test_010_001_execute+0xe0>)
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7fc fca5 	bl	80071f0 <__test_assert>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <rt_test_010_001_execute+0x82>
 800a8ac:	f7ff ff60 	bl	800a770 <osalSysUnlock.lto_priv.4>
 800a8b0:	e026      	b.n	800a900 <rt_test_010_001_execute+0xd0>
 800a8b2:	f7ff ff5d 	bl	800a770 <osalSysUnlock.lto_priv.4>
  }
  test_end_step(3);

  /* [10.1.4] An Event Listener is unregistered, the Event Source must
     not have listeners.*/
  test_set_step(4);
 800a8b6:	4b14      	ldr	r3, [pc, #80]	; (800a908 <rt_test_010_001_execute+0xd8>)
 800a8b8:	2204      	movs	r2, #4
 800a8ba:	601a      	str	r2, [r3, #0]
  {
    chEvtUnregister(&es1, &el2);
 800a8bc:	466b      	mov	r3, sp
 800a8be:	4619      	mov	r1, r3
 800a8c0:	4812      	ldr	r0, [pc, #72]	; (800a90c <rt_test_010_001_execute+0xdc>)
 800a8c2:	f7f9 fd8d 	bl	80043e0 <chEvtUnregister>
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 800a8c6:	f7ff ff4b 	bl	800a760 <osalSysLock.lto_priv.4>
 800a8ca:	4810      	ldr	r0, [pc, #64]	; (800a90c <rt_test_010_001_execute+0xdc>)
 800a8cc:	f7ff ff28 	bl	800a720 <chEvtIsListeningI>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	bf14      	ite	ne
 800a8d6:	2301      	movne	r3, #1
 800a8d8:	2300      	moveq	r3, #0
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	f083 0301 	eor.w	r3, r3, #1
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	490a      	ldr	r1, [pc, #40]	; (800a914 <rt_test_010_001_execute+0xe4>)
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fc fc80 	bl	80071f0 <__test_assert>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <rt_test_010_001_execute+0xcc>
 800a8f6:	f7ff ff3b 	bl	800a770 <osalSysUnlock.lto_priv.4>
 800a8fa:	e001      	b.n	800a900 <rt_test_010_001_execute+0xd0>
 800a8fc:	f7ff ff38 	bl	800a770 <osalSysUnlock.lto_priv.4>
  }
  test_end_step(4);
}
 800a900:	b00b      	add	sp, #44	; 0x2c
 800a902:	f85d fb04 	ldr.w	pc, [sp], #4
 800a906:	bf00      	nop
 800a908:	20000c6c 	.word	0x20000c6c
 800a90c:	20000828 	.word	0x20000828
 800a910:	0801e444 	.word	0x0801e444
 800a914:	0801e450 	.word	0x0801e450
	...

0800a920 <rt_test_010_002_setup>:
 * - [10.2.1] Three evenf flag bits are raised then chEvtDispatch() is
 *   invoked, the sequence of handlers calls is tested.
 * .
 */

static void rt_test_010_002_setup(void) {
 800a920:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 800a922:	f04f 30ff 	mov.w	r0, #4294967295
 800a926:	f7f9 fd9b 	bl	8004460 <chEvtGetAndClearEvents>
}
 800a92a:	bf00      	nop
 800a92c:	bd08      	pop	{r3, pc}
 800a92e:	bf00      	nop

0800a930 <rt_test_010_002_execute>:

static void rt_test_010_002_execute(void) {
 800a930:	b508      	push	{r3, lr}

  /* [10.2.1] Three evenf flag bits are raised then chEvtDispatch() is
     invoked, the sequence of handlers calls is tested.*/
  test_set_step(1);
 800a932:	4b07      	ldr	r3, [pc, #28]	; (800a950 <rt_test_010_002_execute+0x20>)
 800a934:	2201      	movs	r2, #1
 800a936:	601a      	str	r2, [r3, #0]
  {
    chEvtDispatch(evhndl, 7);
 800a938:	2107      	movs	r1, #7
 800a93a:	4806      	ldr	r0, [pc, #24]	; (800a954 <rt_test_010_002_execute+0x24>)
 800a93c:	f7f9 fe40 	bl	80045c0 <chEvtDispatch>
    test_assert_sequence("ABC", "invalid sequence");
 800a940:	4905      	ldr	r1, [pc, #20]	; (800a958 <rt_test_010_002_execute+0x28>)
 800a942:	4806      	ldr	r0, [pc, #24]	; (800a95c <rt_test_010_002_execute+0x2c>)
 800a944:	f7fc fc6c 	bl	8007220 <__test_assert_sequence>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
  }
  test_end_step(1);
}
 800a94c:	bd08      	pop	{r3, pc}
 800a94e:	bf00      	nop
 800a950:	20000c6c 	.word	0x20000c6c
 800a954:	0801e438 	.word	0x0801e438
 800a958:	0801e0f0 	.word	0x0801e0f0
 800a95c:	0801e3d8 	.word	0x0801e3d8

0800a960 <rt_test_010_003_setup>:
 *   been received after 50mS and that the event flags mask has been
 *   emptied.
 * .
 */

static void rt_test_010_003_setup(void) {
 800a960:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 800a962:	f04f 30ff 	mov.w	r0, #4294967295
 800a966:	f7f9 fd7b 	bl	8004460 <chEvtGetAndClearEvents>
}
 800a96a:	bf00      	nop
 800a96c:	bd08      	pop	{r3, pc}
 800a96e:	bf00      	nop

0800a970 <rt_test_010_003_execute>:

static void rt_test_010_003_execute(void) {
 800a970:	b530      	push	{r4, r5, lr}
 800a972:	b085      	sub	sp, #20
  eventmask_t m;
  systime_t target_time;

  /* [10.3.1] Setting three event flags.*/
  test_set_step(1);
 800a974:	4b54      	ldr	r3, [pc, #336]	; (800aac8 <rt_test_010_003_execute+0x158>)
 800a976:	2201      	movs	r2, #1
 800a978:	601a      	str	r2, [r3, #0]
  {
    chEvtAddEvents(7);
 800a97a:	2007      	movs	r0, #7
 800a97c:	f7f9 fd80 	bl	8004480 <chEvtAddEvents>
  }
  test_end_step(1);

  /* [10.3.2] Calling chEvtWaitOne() three times, each time a single
     flag must be returned in order of priority.*/
  test_set_step(2);
 800a980:	4b51      	ldr	r3, [pc, #324]	; (800aac8 <rt_test_010_003_execute+0x158>)
 800a982:	2202      	movs	r2, #2
 800a984:	601a      	str	r2, [r3, #0]
  {
    m = chEvtWaitOne(ALL_EVENTS);
 800a986:	f04f 30ff 	mov.w	r0, #4294967295
 800a98a:	f7f9 fe49 	bl	8004620 <chEvtWaitOne>
 800a98e:	9003      	str	r0, [sp, #12]
    test_assert(m == 1, "single event error");
 800a990:	9b03      	ldr	r3, [sp, #12]
 800a992:	2b01      	cmp	r3, #1
 800a994:	bf0c      	ite	eq
 800a996:	2301      	moveq	r3, #1
 800a998:	2300      	movne	r3, #0
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	494b      	ldr	r1, [pc, #300]	; (800aacc <rt_test_010_003_execute+0x15c>)
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fc fc26 	bl	80071f0 <__test_assert>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f040 808c 	bne.w	800aac4 <rt_test_010_003_execute+0x154>
    m = chEvtWaitOne(ALL_EVENTS);
 800a9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b0:	f7f9 fe36 	bl	8004620 <chEvtWaitOne>
 800a9b4:	9003      	str	r0, [sp, #12]
    test_assert(m == 2, "single event error");
 800a9b6:	9b03      	ldr	r3, [sp, #12]
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	bf0c      	ite	eq
 800a9bc:	2301      	moveq	r3, #1
 800a9be:	2300      	movne	r3, #0
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	4942      	ldr	r1, [pc, #264]	; (800aacc <rt_test_010_003_execute+0x15c>)
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7fc fc13 	bl	80071f0 <__test_assert>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d179      	bne.n	800aac4 <rt_test_010_003_execute+0x154>
    m = chEvtWaitOne(ALL_EVENTS);
 800a9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d4:	f7f9 fe24 	bl	8004620 <chEvtWaitOne>
 800a9d8:	9003      	str	r0, [sp, #12]
    test_assert(m == 4, "single event error");
 800a9da:	9b03      	ldr	r3, [sp, #12]
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	bf0c      	ite	eq
 800a9e0:	2301      	moveq	r3, #1
 800a9e2:	2300      	movne	r3, #0
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	4939      	ldr	r1, [pc, #228]	; (800aacc <rt_test_010_003_execute+0x15c>)
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fc fc01 	bl	80071f0 <__test_assert>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d167      	bne.n	800aac4 <rt_test_010_003_execute+0x154>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800a9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f8:	f7f9 fd32 	bl	8004460 <chEvtGetAndClearEvents>
 800a9fc:	9003      	str	r0, [sp, #12]
    test_assert(m == 0, "stuck event");
 800a9fe:	9b03      	ldr	r3, [sp, #12]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	bf0c      	ite	eq
 800aa04:	2301      	moveq	r3, #1
 800aa06:	2300      	movne	r3, #0
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	4931      	ldr	r1, [pc, #196]	; (800aad0 <rt_test_010_003_execute+0x160>)
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fc fbef 	bl	80071f0 <__test_assert>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d155      	bne.n	800aac4 <rt_test_010_003_execute+0x154>
  }
  test_end_step(2);

  /* [10.3.3] Getting current time and starting a signaler thread, the
     thread will set an event flag after 50mS.*/
  test_set_step(3);
 800aa18:	4b2b      	ldr	r3, [pc, #172]	; (800aac8 <rt_test_010_003_execute+0x158>)
 800aa1a:	2203      	movs	r2, #3
 800aa1c:	601a      	str	r2, [r3, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800aa1e:	f7fc ffdf 	bl	80079e0 <test_wait_tick>
 800aa22:	4603      	mov	r3, r0
 800aa24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7ff fe21 	bl	800a670 <chTimeAddX.lto_priv.5>
 800aa2e:	9002      	str	r0, [sp, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800aa30:	4b28      	ldr	r3, [pc, #160]	; (800aad4 <rt_test_010_003_execute+0x164>)
 800aa32:	681c      	ldr	r4, [r3, #0]
 800aa34:	f7ff fe54 	bl	800a6e0 <chThdGetPriorityX.lto_priv.5>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	1e5d      	subs	r5, r3, #1
                                   evt_thread3, chThdGetSelfX());
 800aa3c:	f7ff fe48 	bl	800a6d0 <chThdGetSelfX.lto_priv.11>
 800aa40:	4603      	mov	r3, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	4b24      	ldr	r3, [pc, #144]	; (800aad8 <rt_test_010_003_execute+0x168>)
 800aa46:	462a      	mov	r2, r5
 800aa48:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f7f8 fbaf 	bl	80031b0 <chThdCreateStatic>
 800aa52:	4603      	mov	r3, r0
 800aa54:	4a21      	ldr	r2, [pc, #132]	; (800aadc <rt_test_010_003_execute+0x16c>)
 800aa56:	6013      	str	r3, [r2, #0]
  test_end_step(3);

  /* [10.3.4] Calling chEvtWaitOne() then verifying that the event has
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
 800aa58:	4b1b      	ldr	r3, [pc, #108]	; (800aac8 <rt_test_010_003_execute+0x158>)
 800aa5a:	2204      	movs	r2, #4
 800aa5c:	601a      	str	r2, [r3, #0]
  {
    m = chEvtWaitOne(ALL_EVENTS);
 800aa5e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa62:	f7f9 fddd 	bl	8004620 <chEvtWaitOne>
 800aa66:	9003      	str	r0, [sp, #12]
    test_assert_time_window(target_time,
 800aa68:	2114      	movs	r1, #20
 800aa6a:	9802      	ldr	r0, [sp, #8]
 800aa6c:	f7ff fe00 	bl	800a670 <chTimeAddX.lto_priv.5>
 800aa70:	4603      	mov	r3, r0
 800aa72:	4a1b      	ldr	r2, [pc, #108]	; (800aae0 <rt_test_010_003_execute+0x170>)
 800aa74:	4619      	mov	r1, r3
 800aa76:	9802      	ldr	r0, [sp, #8]
 800aa78:	f7fc fc02 	bl	8007280 <__test_assert_time_window>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d120      	bne.n	800aac4 <rt_test_010_003_execute+0x154>
                            chTimeAddX(target_time, ALLOWED_DELAY),
                            "out of time window");
    test_assert(m == 1, "event flag error");
 800aa82:	9b03      	ldr	r3, [sp, #12]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	bf0c      	ite	eq
 800aa88:	2301      	moveq	r3, #1
 800aa8a:	2300      	movne	r3, #0
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	4915      	ldr	r1, [pc, #84]	; (800aae4 <rt_test_010_003_execute+0x174>)
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fc fbad 	bl	80071f0 <__test_assert>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d113      	bne.n	800aac4 <rt_test_010_003_execute+0x154>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800aa9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa0:	f7f9 fcde 	bl	8004460 <chEvtGetAndClearEvents>
 800aaa4:	9003      	str	r0, [sp, #12]
    test_assert(m == 0, "stuck event");
 800aaa6:	9b03      	ldr	r3, [sp, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	bf0c      	ite	eq
 800aaac:	2301      	moveq	r3, #1
 800aaae:	2300      	movne	r3, #0
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	4907      	ldr	r1, [pc, #28]	; (800aad0 <rt_test_010_003_execute+0x160>)
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7fc fb9b 	bl	80071f0 <__test_assert>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d101      	bne.n	800aac4 <rt_test_010_003_execute+0x154>
    test_wait_threads();
 800aac0:	f7fc ff66 	bl	8007990 <test_wait_threads>
  }
  test_end_step(4);
}
 800aac4:	b005      	add	sp, #20
 800aac6:	bd30      	pop	{r4, r5, pc}
 800aac8:	20000c6c 	.word	0x20000c6c
 800aacc:	0801e480 	.word	0x0801e480
 800aad0:	0801e494 	.word	0x0801e494
 800aad4:	0801d708 	.word	0x0801d708
 800aad8:	0800a7e1 	.word	0x0800a7e1
 800aadc:	20001508 	.word	0x20001508
 800aae0:	0801e0bc 	.word	0x0801e0bc
 800aae4:	0801e4a0 	.word	0x0801e4a0
	...

0800aaf0 <rt_test_010_004_setup>:
 *   been received after 50mS and that the event flags mask has been
 *   emptied.
 * .
 */

static void rt_test_010_004_setup(void) {
 800aaf0:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 800aaf2:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf6:	f7f9 fcb3 	bl	8004460 <chEvtGetAndClearEvents>
}
 800aafa:	bf00      	nop
 800aafc:	bd08      	pop	{r3, pc}
 800aafe:	bf00      	nop

0800ab00 <rt_test_010_004_execute>:

static void rt_test_010_004_execute(void) {
 800ab00:	b530      	push	{r4, r5, lr}
 800ab02:	b085      	sub	sp, #20
  eventmask_t m;
  systime_t target_time;

  /* [10.4.1] Setting two, non contiguous, event flags.*/
  test_set_step(1);
 800ab04:	4b42      	ldr	r3, [pc, #264]	; (800ac10 <rt_test_010_004_execute+0x110>)
 800ab06:	2201      	movs	r2, #1
 800ab08:	601a      	str	r2, [r3, #0]
  {
    chEvtAddEvents(5);
 800ab0a:	2005      	movs	r0, #5
 800ab0c:	f7f9 fcb8 	bl	8004480 <chEvtAddEvents>
  }
  test_end_step(1);

  /* [10.4.2] Calling chEvtWaitAny() one time, the two flags must be
     returned.*/
  test_set_step(2);
 800ab10:	4b3f      	ldr	r3, [pc, #252]	; (800ac10 <rt_test_010_004_execute+0x110>)
 800ab12:	2202      	movs	r2, #2
 800ab14:	601a      	str	r2, [r3, #0]
  {
    m = chEvtWaitAny(ALL_EVENTS);
 800ab16:	f04f 30ff 	mov.w	r0, #4294967295
 800ab1a:	f7f9 fdb1 	bl	8004680 <chEvtWaitAny>
 800ab1e:	9003      	str	r0, [sp, #12]
    test_assert(m == 5, "unexpected pending bit");
 800ab20:	9b03      	ldr	r3, [sp, #12]
 800ab22:	2b05      	cmp	r3, #5
 800ab24:	bf0c      	ite	eq
 800ab26:	2301      	moveq	r3, #1
 800ab28:	2300      	movne	r3, #0
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	4939      	ldr	r1, [pc, #228]	; (800ac14 <rt_test_010_004_execute+0x114>)
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7fc fb5e 	bl	80071f0 <__test_assert>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d167      	bne.n	800ac0a <rt_test_010_004_execute+0x10a>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800ab3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3e:	f7f9 fc8f 	bl	8004460 <chEvtGetAndClearEvents>
 800ab42:	9003      	str	r0, [sp, #12]
    test_assert(m == 0, "stuck event");
 800ab44:	9b03      	ldr	r3, [sp, #12]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	bf0c      	ite	eq
 800ab4a:	2301      	moveq	r3, #1
 800ab4c:	2300      	movne	r3, #0
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	4931      	ldr	r1, [pc, #196]	; (800ac18 <rt_test_010_004_execute+0x118>)
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7fc fb4c 	bl	80071f0 <__test_assert>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d155      	bne.n	800ac0a <rt_test_010_004_execute+0x10a>
  }
  test_end_step(2);

  /* [10.4.3] Getting current time and starting a signaler thread, the
     thread will set an event flag after 50mS.*/
  test_set_step(3);
 800ab5e:	4b2c      	ldr	r3, [pc, #176]	; (800ac10 <rt_test_010_004_execute+0x110>)
 800ab60:	2203      	movs	r2, #3
 800ab62:	601a      	str	r2, [r3, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800ab64:	f7fc ff3c 	bl	80079e0 <test_wait_tick>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7ff fd7e 	bl	800a670 <chTimeAddX.lto_priv.5>
 800ab74:	9002      	str	r0, [sp, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800ab76:	4b29      	ldr	r3, [pc, #164]	; (800ac1c <rt_test_010_004_execute+0x11c>)
 800ab78:	681c      	ldr	r4, [r3, #0]
 800ab7a:	f7ff fdb1 	bl	800a6e0 <chThdGetPriorityX.lto_priv.5>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	1e5d      	subs	r5, r3, #1
                                   evt_thread3, chThdGetSelfX());
 800ab82:	f7ff fda5 	bl	800a6d0 <chThdGetSelfX.lto_priv.11>
 800ab86:	4603      	mov	r3, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	4b25      	ldr	r3, [pc, #148]	; (800ac20 <rt_test_010_004_execute+0x120>)
 800ab8c:	462a      	mov	r2, r5
 800ab8e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800ab92:	4620      	mov	r0, r4
 800ab94:	f7f8 fb0c 	bl	80031b0 <chThdCreateStatic>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	4a22      	ldr	r2, [pc, #136]	; (800ac24 <rt_test_010_004_execute+0x124>)
 800ab9c:	6013      	str	r3, [r2, #0]
  test_end_step(3);

  /* [10.4.4] Calling chEvtWaitAny() then verifying that the event has
     been received after 50mS and that the event flags mask has been
     emptied.*/
  test_set_step(4);
 800ab9e:	4b1c      	ldr	r3, [pc, #112]	; (800ac10 <rt_test_010_004_execute+0x110>)
 800aba0:	2204      	movs	r2, #4
 800aba2:	601a      	str	r2, [r3, #0]
  {
    m = chEvtWaitAny(ALL_EVENTS);
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295
 800aba8:	f7f9 fd6a 	bl	8004680 <chEvtWaitAny>
 800abac:	9003      	str	r0, [sp, #12]
    test_assert_time_window(target_time,
 800abae:	2114      	movs	r1, #20
 800abb0:	9802      	ldr	r0, [sp, #8]
 800abb2:	f7ff fd5d 	bl	800a670 <chTimeAddX.lto_priv.5>
 800abb6:	4603      	mov	r3, r0
 800abb8:	4a1b      	ldr	r2, [pc, #108]	; (800ac28 <rt_test_010_004_execute+0x128>)
 800abba:	4619      	mov	r1, r3
 800abbc:	9802      	ldr	r0, [sp, #8]
 800abbe:	f7fc fb5f 	bl	8007280 <__test_assert_time_window>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d120      	bne.n	800ac0a <rt_test_010_004_execute+0x10a>
                            chTimeAddX(target_time, ALLOWED_DELAY),
                            "out of time window");
    test_assert(m == 1, "event flag error");
 800abc8:	9b03      	ldr	r3, [sp, #12]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	bf0c      	ite	eq
 800abce:	2301      	moveq	r3, #1
 800abd0:	2300      	movne	r3, #0
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	4915      	ldr	r1, [pc, #84]	; (800ac2c <rt_test_010_004_execute+0x12c>)
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7fc fb0a 	bl	80071f0 <__test_assert>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d113      	bne.n	800ac0a <rt_test_010_004_execute+0x10a>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800abe2:	f04f 30ff 	mov.w	r0, #4294967295
 800abe6:	f7f9 fc3b 	bl	8004460 <chEvtGetAndClearEvents>
 800abea:	9003      	str	r0, [sp, #12]
    test_assert(m == 0, "stuck event");
 800abec:	9b03      	ldr	r3, [sp, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	bf0c      	ite	eq
 800abf2:	2301      	moveq	r3, #1
 800abf4:	2300      	movne	r3, #0
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	4907      	ldr	r1, [pc, #28]	; (800ac18 <rt_test_010_004_execute+0x118>)
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fc faf8 	bl	80071f0 <__test_assert>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d101      	bne.n	800ac0a <rt_test_010_004_execute+0x10a>
    test_wait_threads();
 800ac06:	f7fc fec3 	bl	8007990 <test_wait_threads>
  }
  test_end_step(4);
}
 800ac0a:	b005      	add	sp, #20
 800ac0c:	bd30      	pop	{r4, r5, pc}
 800ac0e:	bf00      	nop
 800ac10:	20000c6c 	.word	0x20000c6c
 800ac14:	0801e4c4 	.word	0x0801e4c4
 800ac18:	0801e494 	.word	0x0801e494
 800ac1c:	0801d708 	.word	0x0801d708
 800ac20:	0800a7e1 	.word	0x0800a7e1
 800ac24:	20001508 	.word	0x20001508
 800ac28:	0801e0bc 	.word	0x0801e0bc
 800ac2c:	0801e4a0 	.word	0x0801e4a0

0800ac30 <rt_test_010_005_setup>:
 *   flags have been received after 50mS and that the event flags mask
 *   has been emptied.
 * .
 */

static void rt_test_010_005_setup(void) {
 800ac30:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 800ac32:	f04f 30ff 	mov.w	r0, #4294967295
 800ac36:	f7f9 fc13 	bl	8004460 <chEvtGetAndClearEvents>
}
 800ac3a:	bf00      	nop
 800ac3c:	bd08      	pop	{r3, pc}
 800ac3e:	bf00      	nop

0800ac40 <rt_test_010_005_execute>:

static void rt_test_010_005_execute(void) {
 800ac40:	b530      	push	{r4, r5, lr}
 800ac42:	b085      	sub	sp, #20
  eventmask_t m;
  systime_t target_time;

  /* [10.5.1] Setting two, non contiguous, event flags.*/
  test_set_step(1);
 800ac44:	4b44      	ldr	r3, [pc, #272]	; (800ad58 <rt_test_010_005_execute+0x118>)
 800ac46:	2201      	movs	r2, #1
 800ac48:	601a      	str	r2, [r3, #0]
  {
    chEvtAddEvents(5);
 800ac4a:	2005      	movs	r0, #5
 800ac4c:	f7f9 fc18 	bl	8004480 <chEvtAddEvents>
  }
  test_end_step(1);

  /* [10.5.2] Calling chEvtWaitAll() one time, the two flags must be
     returned.*/
  test_set_step(2);
 800ac50:	4b41      	ldr	r3, [pc, #260]	; (800ad58 <rt_test_010_005_execute+0x118>)
 800ac52:	2202      	movs	r2, #2
 800ac54:	601a      	str	r2, [r3, #0]
  {
    m = chEvtWaitAll(5);
 800ac56:	2005      	movs	r0, #5
 800ac58:	f7f9 fd42 	bl	80046e0 <chEvtWaitAll>
 800ac5c:	9003      	str	r0, [sp, #12]
    test_assert(m == 5, "unexpected pending bit");
 800ac5e:	9b03      	ldr	r3, [sp, #12]
 800ac60:	2b05      	cmp	r3, #5
 800ac62:	bf0c      	ite	eq
 800ac64:	2301      	moveq	r3, #1
 800ac66:	2300      	movne	r3, #0
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	493c      	ldr	r1, [pc, #240]	; (800ad5c <rt_test_010_005_execute+0x11c>)
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fc fabf 	bl	80071f0 <__test_assert>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d16c      	bne.n	800ad52 <rt_test_010_005_execute+0x112>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800ac78:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7c:	f7f9 fbf0 	bl	8004460 <chEvtGetAndClearEvents>
 800ac80:	9003      	str	r0, [sp, #12]
    test_assert(m == 0, "stuck event");
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	bf0c      	ite	eq
 800ac88:	2301      	moveq	r3, #1
 800ac8a:	2300      	movne	r3, #0
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	4934      	ldr	r1, [pc, #208]	; (800ad60 <rt_test_010_005_execute+0x120>)
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7fc faad 	bl	80071f0 <__test_assert>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d15a      	bne.n	800ad52 <rt_test_010_005_execute+0x112>
  }
  test_end_step(2);

  /* [10.5.3] Setting one event flag.*/
  test_set_step(3);
 800ac9c:	4b2e      	ldr	r3, [pc, #184]	; (800ad58 <rt_test_010_005_execute+0x118>)
 800ac9e:	2203      	movs	r2, #3
 800aca0:	601a      	str	r2, [r3, #0]
  {
    chEvtAddEvents(4);
 800aca2:	2004      	movs	r0, #4
 800aca4:	f7f9 fbec 	bl	8004480 <chEvtAddEvents>
  }
  test_end_step(3);

  /* [10.5.4] Getting current time and starting a signaler thread, the
     thread will set another event flag after 50mS.*/
  test_set_step(4);
 800aca8:	4b2b      	ldr	r3, [pc, #172]	; (800ad58 <rt_test_010_005_execute+0x118>)
 800acaa:	2204      	movs	r2, #4
 800acac:	601a      	str	r2, [r3, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800acae:	f7fc fe97 	bl	80079e0 <test_wait_tick>
 800acb2:	4603      	mov	r3, r0
 800acb4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800acb8:	4618      	mov	r0, r3
 800acba:	f7ff fcd9 	bl	800a670 <chTimeAddX.lto_priv.5>
 800acbe:	9002      	str	r0, [sp, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800acc0:	4b28      	ldr	r3, [pc, #160]	; (800ad64 <rt_test_010_005_execute+0x124>)
 800acc2:	681c      	ldr	r4, [r3, #0]
 800acc4:	f7ff fd0c 	bl	800a6e0 <chThdGetPriorityX.lto_priv.5>
 800acc8:	4603      	mov	r3, r0
 800acca:	1e5d      	subs	r5, r3, #1
                                   evt_thread3, chThdGetSelfX());
 800accc:	f7ff fd00 	bl	800a6d0 <chThdGetSelfX.lto_priv.11>
 800acd0:	4603      	mov	r3, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800acd2:	9300      	str	r3, [sp, #0]
 800acd4:	4b24      	ldr	r3, [pc, #144]	; (800ad68 <rt_test_010_005_execute+0x128>)
 800acd6:	462a      	mov	r2, r5
 800acd8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800acdc:	4620      	mov	r0, r4
 800acde:	f7f8 fa67 	bl	80031b0 <chThdCreateStatic>
 800ace2:	4603      	mov	r3, r0
 800ace4:	4a21      	ldr	r2, [pc, #132]	; (800ad6c <rt_test_010_005_execute+0x12c>)
 800ace6:	6013      	str	r3, [r2, #0]
  test_end_step(4);

  /* [10.5.5] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(5);
 800ace8:	4b1b      	ldr	r3, [pc, #108]	; (800ad58 <rt_test_010_005_execute+0x118>)
 800acea:	2205      	movs	r2, #5
 800acec:	601a      	str	r2, [r3, #0]
  {
    m = chEvtWaitAll(5);
 800acee:	2005      	movs	r0, #5
 800acf0:	f7f9 fcf6 	bl	80046e0 <chEvtWaitAll>
 800acf4:	9003      	str	r0, [sp, #12]
    test_assert_time_window(target_time,
 800acf6:	2114      	movs	r1, #20
 800acf8:	9802      	ldr	r0, [sp, #8]
 800acfa:	f7ff fcb9 	bl	800a670 <chTimeAddX.lto_priv.5>
 800acfe:	4603      	mov	r3, r0
 800ad00:	4a1b      	ldr	r2, [pc, #108]	; (800ad70 <rt_test_010_005_execute+0x130>)
 800ad02:	4619      	mov	r1, r3
 800ad04:	9802      	ldr	r0, [sp, #8]
 800ad06:	f7fc fabb 	bl	8007280 <__test_assert_time_window>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d120      	bne.n	800ad52 <rt_test_010_005_execute+0x112>
                            chTimeAddX(target_time, ALLOWED_DELAY),
                            "out of time window");
    test_assert(m == 5, "event flags error");
 800ad10:	9b03      	ldr	r3, [sp, #12]
 800ad12:	2b05      	cmp	r3, #5
 800ad14:	bf0c      	ite	eq
 800ad16:	2301      	moveq	r3, #1
 800ad18:	2300      	movne	r3, #0
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	4915      	ldr	r1, [pc, #84]	; (800ad74 <rt_test_010_005_execute+0x134>)
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fc fa66 	bl	80071f0 <__test_assert>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d113      	bne.n	800ad52 <rt_test_010_005_execute+0x112>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800ad2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2e:	f7f9 fb97 	bl	8004460 <chEvtGetAndClearEvents>
 800ad32:	9003      	str	r0, [sp, #12]
    test_assert(m == 0, "stuck event");
 800ad34:	9b03      	ldr	r3, [sp, #12]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	bf0c      	ite	eq
 800ad3a:	2301      	moveq	r3, #1
 800ad3c:	2300      	movne	r3, #0
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	4907      	ldr	r1, [pc, #28]	; (800ad60 <rt_test_010_005_execute+0x120>)
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fc fa54 	bl	80071f0 <__test_assert>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d101      	bne.n	800ad52 <rt_test_010_005_execute+0x112>
    test_wait_threads();
 800ad4e:	f7fc fe1f 	bl	8007990 <test_wait_threads>
  }
  test_end_step(5);
}
 800ad52:	b005      	add	sp, #20
 800ad54:	bd30      	pop	{r4, r5, pc}
 800ad56:	bf00      	nop
 800ad58:	20000c6c 	.word	0x20000c6c
 800ad5c:	0801e4c4 	.word	0x0801e4c4
 800ad60:	0801e494 	.word	0x0801e494
 800ad64:	0801d708 	.word	0x0801d708
 800ad68:	0800a7e1 	.word	0x0800a7e1
 800ad6c:	20001508 	.word	0x20001508
 800ad70:	0801e0bc 	.word	0x0801e0bc
 800ad74:	0801e4ec 	.word	0x0801e4ec
	...

0800ad80 <rt_test_010_006_setup>:
 * - [10.6.2] The functions are invoked first with a 50mS timeout, the
 *   timeout condition is tested.
 * .
 */

static void rt_test_010_006_setup(void) {
 800ad80:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 800ad82:	f04f 30ff 	mov.w	r0, #4294967295
 800ad86:	f7f9 fb6b 	bl	8004460 <chEvtGetAndClearEvents>
}
 800ad8a:	bf00      	nop
 800ad8c:	bd08      	pop	{r3, pc}
 800ad8e:	bf00      	nop

0800ad90 <rt_test_010_006_execute>:

static void rt_test_010_006_execute(void) {
 800ad90:	b500      	push	{lr}
 800ad92:	b083      	sub	sp, #12
  eventmask_t m;

  /* [10.6.1] The functions are invoked first with TIME_IMMEDIATE
     timeout, the timeout condition is tested.*/
  test_set_step(1);
 800ad94:	4b3e      	ldr	r3, [pc, #248]	; (800ae90 <rt_test_010_006_execute+0x100>)
 800ad96:	2201      	movs	r2, #1
 800ad98:	601a      	str	r2, [r3, #0]
  {
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	f04f 30ff 	mov.w	r0, #4294967295
 800ada0:	f7f9 fcc6 	bl	8004730 <chEvtWaitOneTimeout>
 800ada4:	9001      	str	r0, [sp, #4]
    test_assert(m == 0, "spurious event");
 800ada6:	9b01      	ldr	r3, [sp, #4]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	bf0c      	ite	eq
 800adac:	2301      	moveq	r3, #1
 800adae:	2300      	movne	r3, #0
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	4938      	ldr	r1, [pc, #224]	; (800ae94 <rt_test_010_006_execute+0x104>)
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fc fa1b 	bl	80071f0 <__test_assert>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d163      	bne.n	800ae88 <rt_test_010_006_execute+0xf8>
    m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 800adc0:	2100      	movs	r1, #0
 800adc2:	f04f 30ff 	mov.w	r0, #4294967295
 800adc6:	f7f9 fcf3 	bl	80047b0 <chEvtWaitAnyTimeout>
 800adca:	9001      	str	r0, [sp, #4]
    test_assert(m == 0, "spurious event");
 800adcc:	9b01      	ldr	r3, [sp, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	bf0c      	ite	eq
 800add2:	2301      	moveq	r3, #1
 800add4:	2300      	movne	r3, #0
 800add6:	b2db      	uxtb	r3, r3
 800add8:	492e      	ldr	r1, [pc, #184]	; (800ae94 <rt_test_010_006_execute+0x104>)
 800adda:	4618      	mov	r0, r3
 800addc:	f7fc fa08 	bl	80071f0 <__test_assert>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d150      	bne.n	800ae88 <rt_test_010_006_execute+0xf8>
    m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 800ade6:	2100      	movs	r1, #0
 800ade8:	f04f 30ff 	mov.w	r0, #4294967295
 800adec:	f7f9 fd20 	bl	8004830 <chEvtWaitAllTimeout>
 800adf0:	9001      	str	r0, [sp, #4]
    test_assert(m == 0, "spurious event");
 800adf2:	9b01      	ldr	r3, [sp, #4]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	bf0c      	ite	eq
 800adf8:	2301      	moveq	r3, #1
 800adfa:	2300      	movne	r3, #0
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	4925      	ldr	r1, [pc, #148]	; (800ae94 <rt_test_010_006_execute+0x104>)
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7fc f9f5 	bl	80071f0 <__test_assert>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d13d      	bne.n	800ae88 <rt_test_010_006_execute+0xf8>
  }
  test_end_step(1);

  /* [10.6.2] The functions are invoked first with a 50mS timeout, the
     timeout condition is tested.*/
  test_set_step(2);
 800ae0c:	4b20      	ldr	r3, [pc, #128]	; (800ae90 <rt_test_010_006_execute+0x100>)
 800ae0e:	2202      	movs	r2, #2
 800ae10:	601a      	str	r2, [r3, #0]
  {
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_MS2I(50));
 800ae12:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ae16:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1a:	f7f9 fc89 	bl	8004730 <chEvtWaitOneTimeout>
 800ae1e:	9001      	str	r0, [sp, #4]
    test_assert(m == 0, "spurious event");
 800ae20:	9b01      	ldr	r3, [sp, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	bf0c      	ite	eq
 800ae26:	2301      	moveq	r3, #1
 800ae28:	2300      	movne	r3, #0
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	4919      	ldr	r1, [pc, #100]	; (800ae94 <rt_test_010_006_execute+0x104>)
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fc f9de 	bl	80071f0 <__test_assert>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d126      	bne.n	800ae88 <rt_test_010_006_execute+0xf8>
    m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_MS2I(50));
 800ae3a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ae3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae42:	f7f9 fcb5 	bl	80047b0 <chEvtWaitAnyTimeout>
 800ae46:	9001      	str	r0, [sp, #4]
    test_assert(m == 0, "spurious event");
 800ae48:	9b01      	ldr	r3, [sp, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	bf0c      	ite	eq
 800ae4e:	2301      	moveq	r3, #1
 800ae50:	2300      	movne	r3, #0
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	490f      	ldr	r1, [pc, #60]	; (800ae94 <rt_test_010_006_execute+0x104>)
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fc f9ca 	bl	80071f0 <__test_assert>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d112      	bne.n	800ae88 <rt_test_010_006_execute+0xf8>
    m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_MS2I(50));
 800ae62:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ae66:	f04f 30ff 	mov.w	r0, #4294967295
 800ae6a:	f7f9 fce1 	bl	8004830 <chEvtWaitAllTimeout>
 800ae6e:	9001      	str	r0, [sp, #4]
    test_assert(m == 0, "spurious event");
 800ae70:	9b01      	ldr	r3, [sp, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	bf0c      	ite	eq
 800ae76:	2301      	moveq	r3, #1
 800ae78:	2300      	movne	r3, #0
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	4905      	ldr	r1, [pc, #20]	; (800ae94 <rt_test_010_006_execute+0x104>)
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fc f9b6 	bl	80071f0 <__test_assert>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
  }
  test_end_step(2);
}
 800ae88:	b003      	add	sp, #12
 800ae8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae8e:	bf00      	nop
 800ae90:	20000c6c 	.word	0x20000c6c
 800ae94:	0801e510 	.word	0x0801e510
	...

0800aea0 <rt_test_010_007_setup>:
 *   has been emptied.
 * - [10.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_010_007_setup(void) {
 800aea0:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 800aea2:	f04f 30ff 	mov.w	r0, #4294967295
 800aea6:	f7f9 fadb 	bl	8004460 <chEvtGetAndClearEvents>
  chEvtObjectInit(&es1);
 800aeaa:	4804      	ldr	r0, [pc, #16]	; (800aebc <rt_test_010_007_setup+0x1c>)
 800aeac:	f7ff fc20 	bl	800a6f0 <chEvtObjectInit.lto_priv.1>
  chEvtObjectInit(&es2);
 800aeb0:	4803      	ldr	r0, [pc, #12]	; (800aec0 <rt_test_010_007_setup+0x20>)
 800aeb2:	f7ff fc1d 	bl	800a6f0 <chEvtObjectInit.lto_priv.1>
}
 800aeb6:	bf00      	nop
 800aeb8:	bd08      	pop	{r3, pc}
 800aeba:	bf00      	nop
 800aebc:	20000828 	.word	0x20000828
 800aec0:	2000082c 	.word	0x2000082c
	...

0800aed0 <rt_test_010_007_execute>:

static void rt_test_010_007_execute(void) {
 800aed0:	b510      	push	{r4, lr}
 800aed2:	b08e      	sub	sp, #56	; 0x38
  event_listener_t el1, el2;
  systime_t target_time;

  /* [10.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 800aed4:	4b46      	ldr	r3, [pc, #280]	; (800aff0 <rt_test_010_007_execute+0x120>)
 800aed6:	2201      	movs	r2, #1
 800aed8:	601a      	str	r2, [r3, #0]
  {
    chEvtRegisterMask(&es1, &el1, 1);
 800aeda:	ab07      	add	r3, sp, #28
 800aedc:	2201      	movs	r2, #1
 800aede:	4619      	mov	r1, r3
 800aee0:	4844      	ldr	r0, [pc, #272]	; (800aff4 <rt_test_010_007_execute+0x124>)
 800aee2:	f7ff fc0d 	bl	800a700 <chEvtRegisterMask>
    chEvtRegisterMask(&es2, &el2, 4);
 800aee6:	ab02      	add	r3, sp, #8
 800aee8:	2204      	movs	r2, #4
 800aeea:	4619      	mov	r1, r3
 800aeec:	4842      	ldr	r0, [pc, #264]	; (800aff8 <rt_test_010_007_execute+0x128>)
 800aeee:	f7ff fc07 	bl	800a700 <chEvtRegisterMask>
  test_end_step(1);

  /* [10.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 800aef2:	4b3f      	ldr	r3, [pc, #252]	; (800aff0 <rt_test_010_007_execute+0x120>)
 800aef4:	2202      	movs	r2, #2
 800aef6:	601a      	str	r2, [r3, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800aef8:	f7fc fd72 	bl	80079e0 <test_wait_tick>
 800aefc:	4603      	mov	r3, r0
 800aefe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800af02:	4618      	mov	r0, r3
 800af04:	f7ff fbb4 	bl	800a670 <chTimeAddX.lto_priv.5>
 800af08:	900d      	str	r0, [sp, #52]	; 0x34
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800af0a:	4b3c      	ldr	r3, [pc, #240]	; (800affc <rt_test_010_007_execute+0x12c>)
 800af0c:	681c      	ldr	r4, [r3, #0]
 800af0e:	f7ff fbe7 	bl	800a6e0 <chThdGetPriorityX.lto_priv.5>
 800af12:	4603      	mov	r3, r0
 800af14:	1e5a      	subs	r2, r3, #1
 800af16:	4b3a      	ldr	r3, [pc, #232]	; (800b000 <rt_test_010_007_execute+0x130>)
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	4b3a      	ldr	r3, [pc, #232]	; (800b004 <rt_test_010_007_execute+0x134>)
 800af1c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800af20:	4620      	mov	r0, r4
 800af22:	f7f8 f945 	bl	80031b0 <chThdCreateStatic>
 800af26:	4603      	mov	r3, r0
 800af28:	4a37      	ldr	r2, [pc, #220]	; (800b008 <rt_test_010_007_execute+0x138>)
 800af2a:	6013      	str	r3, [r2, #0]
  test_end_step(2);

  /* [10.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 800af2c:	4b30      	ldr	r3, [pc, #192]	; (800aff0 <rt_test_010_007_execute+0x120>)
 800af2e:	2203      	movs	r2, #3
 800af30:	601a      	str	r2, [r3, #0]
  {
    m = chEvtWaitAll(5);
 800af32:	2005      	movs	r0, #5
 800af34:	f7f9 fbd4 	bl	80046e0 <chEvtWaitAll>
 800af38:	900c      	str	r0, [sp, #48]	; 0x30
    test_assert_time_window(target_time,
 800af3a:	2114      	movs	r1, #20
 800af3c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800af3e:	f7ff fb97 	bl	800a670 <chTimeAddX.lto_priv.5>
 800af42:	4603      	mov	r3, r0
 800af44:	4a31      	ldr	r2, [pc, #196]	; (800b00c <rt_test_010_007_execute+0x13c>)
 800af46:	4619      	mov	r1, r3
 800af48:	980d      	ldr	r0, [sp, #52]	; 0x34
 800af4a:	f7fc f999 	bl	8007280 <__test_assert_time_window>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d14b      	bne.n	800afec <rt_test_010_007_execute+0x11c>
                            chTimeAddX(target_time, ALLOWED_DELAY),
                            "out of time window");
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800af54:	f04f 30ff 	mov.w	r0, #4294967295
 800af58:	f7f9 fa82 	bl	8004460 <chEvtGetAndClearEvents>
 800af5c:	900c      	str	r0, [sp, #48]	; 0x30
    test_assert(m == 0, "stuck event");
 800af5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af60:	2b00      	cmp	r3, #0
 800af62:	bf0c      	ite	eq
 800af64:	2301      	moveq	r3, #1
 800af66:	2300      	movne	r3, #0
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	4929      	ldr	r1, [pc, #164]	; (800b010 <rt_test_010_007_execute+0x140>)
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fc f93f 	bl	80071f0 <__test_assert>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d139      	bne.n	800afec <rt_test_010_007_execute+0x11c>
    test_wait_threads();
 800af78:	f7fc fd0a 	bl	8007990 <test_wait_threads>
  }
  test_end_step(3);

  /* [10.7.4] Unregistering from the Event Sources.*/
  test_set_step(4);
 800af7c:	4b1c      	ldr	r3, [pc, #112]	; (800aff0 <rt_test_010_007_execute+0x120>)
 800af7e:	2204      	movs	r2, #4
 800af80:	601a      	str	r2, [r3, #0]
  {
    chEvtUnregister(&es1, &el1);
 800af82:	ab07      	add	r3, sp, #28
 800af84:	4619      	mov	r1, r3
 800af86:	481b      	ldr	r0, [pc, #108]	; (800aff4 <rt_test_010_007_execute+0x124>)
 800af88:	f7f9 fa2a 	bl	80043e0 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 800af8c:	ab02      	add	r3, sp, #8
 800af8e:	4619      	mov	r1, r3
 800af90:	4819      	ldr	r0, [pc, #100]	; (800aff8 <rt_test_010_007_execute+0x128>)
 800af92:	f7f9 fa25 	bl	80043e0 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 800af96:	4817      	ldr	r0, [pc, #92]	; (800aff4 <rt_test_010_007_execute+0x124>)
 800af98:	f7ff fbc2 	bl	800a720 <chEvtIsListeningI>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bf14      	ite	ne
 800afa2:	2301      	movne	r3, #1
 800afa4:	2300      	moveq	r3, #0
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	f083 0301 	eor.w	r3, r3, #1
 800afac:	b2db      	uxtb	r3, r3
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	4917      	ldr	r1, [pc, #92]	; (800b014 <rt_test_010_007_execute+0x144>)
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fc f91a 	bl	80071f0 <__test_assert>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d114      	bne.n	800afec <rt_test_010_007_execute+0x11c>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 800afc2:	480d      	ldr	r0, [pc, #52]	; (800aff8 <rt_test_010_007_execute+0x128>)
 800afc4:	f7ff fbac 	bl	800a720 <chEvtIsListeningI>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	bf14      	ite	ne
 800afce:	2301      	movne	r3, #1
 800afd0:	2300      	moveq	r3, #0
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	f083 0301 	eor.w	r3, r3, #1
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	490c      	ldr	r1, [pc, #48]	; (800b014 <rt_test_010_007_execute+0x144>)
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fc f904 	bl	80071f0 <__test_assert>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
  }
  test_end_step(4);
}
 800afec:	b00e      	add	sp, #56	; 0x38
 800afee:	bd10      	pop	{r4, pc}
 800aff0:	20000c6c 	.word	0x20000c6c
 800aff4:	20000828 	.word	0x20000828
 800aff8:	2000082c 	.word	0x2000082c
 800affc:	0801d708 	.word	0x0801d708
 800b000:	0801e0ec 	.word	0x0801e0ec
 800b004:	0800a801 	.word	0x0800a801
 800b008:	20001508 	.word	0x20001508
 800b00c:	0801e0bc 	.word	0x0801e0bc
 800b010:	0801e494 	.word	0x0801e494
 800b014:	0801e450 	.word	0x0801e450
	...

0800b020 <chThdGetSelfX.lto_priv.12>:
  return __sch_get_currthread();
 800b020:	4b01      	ldr	r3, [pc, #4]	; (800b028 <chThdGetSelfX.lto_priv.12+0x8>)
 800b022:	68db      	ldr	r3, [r3, #12]
}
 800b024:	4618      	mov	r0, r3
 800b026:	4770      	bx	lr
 800b028:	20000a48 	.word	0x20000a48
 800b02c:	00000000 	.word	0x00000000

0800b030 <chThdGetPriorityX.lto_priv.6>:
static inline tprio_t chThdGetPriorityX(void) {
 800b030:	b508      	push	{r3, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 800b032:	f7ff fff5 	bl	800b020 <chThdGetSelfX.lto_priv.12>
 800b036:	4603      	mov	r3, r0
 800b038:	689b      	ldr	r3, [r3, #8]
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	bd08      	pop	{r3, pc}
 800b03e:	bf00      	nop

0800b040 <chPoolObjectInit.lto_priv.1>:
                                    memgetfunc_t provider) {
 800b040:	b500      	push	{lr}
 800b042:	b085      	sub	sp, #20
 800b044:	9003      	str	r0, [sp, #12]
 800b046:	9102      	str	r1, [sp, #8]
 800b048:	9201      	str	r2, [sp, #4]
  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 800b04a:	9b01      	ldr	r3, [sp, #4]
 800b04c:	2204      	movs	r2, #4
 800b04e:	9902      	ldr	r1, [sp, #8]
 800b050:	9803      	ldr	r0, [sp, #12]
 800b052:	f7fa fb05 	bl	8005660 <chPoolObjectInitAligned>
}
 800b056:	bf00      	nop
 800b058:	b005      	add	sp, #20
 800b05a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b05e:	bf00      	nop

0800b060 <dyn_thread1>:
#endif
#if CH_CFG_USE_MEMPOOLS
static memory_pool_t mp1;
#endif

static THD_FUNCTION(dyn_thread1, p) {
 800b060:	b500      	push	{lr}
 800b062:	b083      	sub	sp, #12
 800b064:	9001      	str	r0, [sp, #4]

  test_emit_token(*(char *)p);
 800b066:	9b01      	ldr	r3, [sp, #4]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fc f920 	bl	80072b0 <test_emit_token>
}
 800b070:	bf00      	nop
 800b072:	b003      	add	sp, #12
 800b074:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b080 <rt_test_011_001_setup>:
 *   freeing memory.
 * - [11.1.7] Getting heap info again for verification.
 * .
 */

static void rt_test_011_001_setup(void) {
 800b080:	b508      	push	{r3, lr}
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
 800b082:	f44f 6207 	mov.w	r2, #2160	; 0x870
 800b086:	4903      	ldr	r1, [pc, #12]	; (800b094 <rt_test_011_001_setup+0x14>)
 800b088:	4803      	ldr	r0, [pc, #12]	; (800b098 <rt_test_011_001_setup+0x18>)
 800b08a:	f7fa f8d1 	bl	8005230 <chHeapObjectInit>
}
 800b08e:	bf00      	nop
 800b090:	bd08      	pop	{r3, pc}
 800b092:	bf00      	nop
 800b094:	20000c98 	.word	0x20000c98
 800b098:	2000152c 	.word	0x2000152c
 800b09c:	00000000 	.word	0x00000000

0800b0a0 <rt_test_011_001_execute>:

static void rt_test_011_001_execute(void) {
 800b0a0:	b500      	push	{lr}
 800b0a2:	b08b      	sub	sp, #44	; 0x2c
  size_t n1, total1, largest1;
  size_t n2, total2, largest2;
  tprio_t prio;

  /* [11.1.1] Getting base priority for threads.*/
  test_set_step(1);
 800b0a4:	4b5f      	ldr	r3, [pc, #380]	; (800b224 <rt_test_011_001_execute+0x184>)
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	601a      	str	r2, [r3, #0]
  {
    prio = chThdGetPriorityX();
 800b0aa:	f7ff ffc1 	bl	800b030 <chThdGetPriorityX.lto_priv.6>
 800b0ae:	9009      	str	r0, [sp, #36]	; 0x24
  }
  test_end_step(1);

  /* [11.1.2] Getting heap info before the test.*/
  test_set_step(2);
 800b0b0:	4b5c      	ldr	r3, [pc, #368]	; (800b224 <rt_test_011_001_execute+0x184>)
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	601a      	str	r2, [r3, #0]
  {
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 800b0b6:	aa05      	add	r2, sp, #20
 800b0b8:	ab06      	add	r3, sp, #24
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	485a      	ldr	r0, [pc, #360]	; (800b228 <rt_test_011_001_execute+0x188>)
 800b0be:	f7fa fa27 	bl	8005510 <chHeapStatus>
 800b0c2:	9008      	str	r0, [sp, #32]
    test_assert(n1 == 1, "heap fragmented");
 800b0c4:	9b08      	ldr	r3, [sp, #32]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	bf0c      	ite	eq
 800b0ca:	2301      	moveq	r3, #1
 800b0cc:	2300      	movne	r3, #0
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	4956      	ldr	r1, [pc, #344]	; (800b22c <rt_test_011_001_execute+0x18c>)
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fc f88c 	bl	80071f0 <__test_assert>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f040 809f 	bne.w	800b21e <rt_test_011_001_execute+0x17e>
  }
  test_end_step(2);

  /* [11.1.3] Creating thread 1, it is expected to succeed.*/
  test_set_step(3);
 800b0e0:	4b50      	ldr	r3, [pc, #320]	; (800b224 <rt_test_011_001_execute+0x184>)
 800b0e2:	2203      	movs	r2, #3
 800b0e4:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateFromHeap(&heap1,
 800b0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	4a51      	ldr	r2, [pc, #324]	; (800b230 <rt_test_011_001_execute+0x190>)
 800b0ec:	9201      	str	r2, [sp, #4]
 800b0ee:	4a51      	ldr	r2, [pc, #324]	; (800b234 <rt_test_011_001_execute+0x194>)
 800b0f0:	9200      	str	r2, [sp, #0]
 800b0f2:	4a51      	ldr	r2, [pc, #324]	; (800b238 <rt_test_011_001_execute+0x198>)
 800b0f4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800b0f8:	484b      	ldr	r0, [pc, #300]	; (800b228 <rt_test_011_001_execute+0x188>)
 800b0fa:	f7f9 fcc1 	bl	8004a80 <chThdCreateFromHeap>
 800b0fe:	4603      	mov	r3, r0
 800b100:	4a4e      	ldr	r2, [pc, #312]	; (800b23c <rt_test_011_001_execute+0x19c>)
 800b102:	6013      	str	r3, [r2, #0]
                                     THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                     "dyn1",
                                     prio-1, dyn_thread1, "A");
    test_assert(threads[0] != NULL, "thread creation failed");
 800b104:	4b4d      	ldr	r3, [pc, #308]	; (800b23c <rt_test_011_001_execute+0x19c>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	bf14      	ite	ne
 800b10c:	2301      	movne	r3, #1
 800b10e:	2300      	moveq	r3, #0
 800b110:	b2db      	uxtb	r3, r3
 800b112:	494b      	ldr	r1, [pc, #300]	; (800b240 <rt_test_011_001_execute+0x1a0>)
 800b114:	4618      	mov	r0, r3
 800b116:	f7fc f86b 	bl	80071f0 <__test_assert>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d17e      	bne.n	800b21e <rt_test_011_001_execute+0x17e>
  }
  test_end_step(3);

  /* [11.1.4] Creating thread 2, it is expected to succeed.*/
  test_set_step(4);
 800b120:	4b40      	ldr	r3, [pc, #256]	; (800b224 <rt_test_011_001_execute+0x184>)
 800b122:	2204      	movs	r2, #4
 800b124:	601a      	str	r2, [r3, #0]
  {
    threads[1] = chThdCreateFromHeap(&heap1,
 800b126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b128:	3b02      	subs	r3, #2
 800b12a:	4a46      	ldr	r2, [pc, #280]	; (800b244 <rt_test_011_001_execute+0x1a4>)
 800b12c:	9201      	str	r2, [sp, #4]
 800b12e:	4a41      	ldr	r2, [pc, #260]	; (800b234 <rt_test_011_001_execute+0x194>)
 800b130:	9200      	str	r2, [sp, #0]
 800b132:	4a45      	ldr	r2, [pc, #276]	; (800b248 <rt_test_011_001_execute+0x1a8>)
 800b134:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800b138:	483b      	ldr	r0, [pc, #236]	; (800b228 <rt_test_011_001_execute+0x188>)
 800b13a:	f7f9 fca1 	bl	8004a80 <chThdCreateFromHeap>
 800b13e:	4603      	mov	r3, r0
 800b140:	4a3e      	ldr	r2, [pc, #248]	; (800b23c <rt_test_011_001_execute+0x19c>)
 800b142:	6053      	str	r3, [r2, #4]
                                     THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                     "dyn2",
                                     prio-2, dyn_thread1, "B");
    test_assert(threads[1] != NULL, "thread creation failed");
 800b144:	4b3d      	ldr	r3, [pc, #244]	; (800b23c <rt_test_011_001_execute+0x19c>)
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	bf14      	ite	ne
 800b14c:	2301      	movne	r3, #1
 800b14e:	2300      	moveq	r3, #0
 800b150:	b2db      	uxtb	r3, r3
 800b152:	493b      	ldr	r1, [pc, #236]	; (800b240 <rt_test_011_001_execute+0x1a0>)
 800b154:	4618      	mov	r0, r3
 800b156:	f7fc f84b 	bl	80071f0 <__test_assert>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d15e      	bne.n	800b21e <rt_test_011_001_execute+0x17e>
  }
  test_end_step(4);

  /* [11.1.5] Creating thread 3, it is expected to fail.*/
  test_set_step(5);
 800b160:	4b30      	ldr	r3, [pc, #192]	; (800b224 <rt_test_011_001_execute+0x184>)
 800b162:	2205      	movs	r2, #5
 800b164:	601a      	str	r2, [r3, #0]
  {
    threads[2] = chThdCreateFromHeap(&heap1,
 800b166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b168:	3b03      	subs	r3, #3
 800b16a:	4a38      	ldr	r2, [pc, #224]	; (800b24c <rt_test_011_001_execute+0x1ac>)
 800b16c:	9201      	str	r2, [sp, #4]
 800b16e:	4a31      	ldr	r2, [pc, #196]	; (800b234 <rt_test_011_001_execute+0x194>)
 800b170:	9200      	str	r2, [sp, #0]
 800b172:	4a37      	ldr	r2, [pc, #220]	; (800b250 <rt_test_011_001_execute+0x1b0>)
 800b174:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b178:	482b      	ldr	r0, [pc, #172]	; (800b228 <rt_test_011_001_execute+0x188>)
 800b17a:	f7f9 fc81 	bl	8004a80 <chThdCreateFromHeap>
 800b17e:	4603      	mov	r3, r0
 800b180:	4a2e      	ldr	r2, [pc, #184]	; (800b23c <rt_test_011_001_execute+0x19c>)
 800b182:	6093      	str	r3, [r2, #8]
                                     (((size_t)-1) >> 1U) + 1U,
                                     "dyn3",
                                     prio-3, dyn_thread1, "C");
    test_assert(threads[2] == NULL, "thread creation not failed");
 800b184:	4b2d      	ldr	r3, [pc, #180]	; (800b23c <rt_test_011_001_execute+0x19c>)
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	bf0c      	ite	eq
 800b18c:	2301      	moveq	r3, #1
 800b18e:	2300      	movne	r3, #0
 800b190:	b2db      	uxtb	r3, r3
 800b192:	4930      	ldr	r1, [pc, #192]	; (800b254 <rt_test_011_001_execute+0x1b4>)
 800b194:	4618      	mov	r0, r3
 800b196:	f7fc f82b 	bl	80071f0 <__test_assert>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d13e      	bne.n	800b21e <rt_test_011_001_execute+0x17e>
  }
  test_end_step(5);

  /* [11.1.6] Letting threads execute then checking the start order and
     freeing memory.*/
  test_set_step(6);
 800b1a0:	4b20      	ldr	r3, [pc, #128]	; (800b224 <rt_test_011_001_execute+0x184>)
 800b1a2:	2206      	movs	r2, #6
 800b1a4:	601a      	str	r2, [r3, #0]
  {
    test_wait_threads();
 800b1a6:	f7fc fbf3 	bl	8007990 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 800b1aa:	492b      	ldr	r1, [pc, #172]	; (800b258 <rt_test_011_001_execute+0x1b8>)
 800b1ac:	482b      	ldr	r0, [pc, #172]	; (800b25c <rt_test_011_001_execute+0x1bc>)
 800b1ae:	f7fc f837 	bl	8007220 <__test_assert_sequence>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d132      	bne.n	800b21e <rt_test_011_001_execute+0x17e>
  }
  test_end_step(6);

  /* [11.1.7] Getting heap info again for verification.*/
  test_set_step(7);
 800b1b8:	4b1a      	ldr	r3, [pc, #104]	; (800b224 <rt_test_011_001_execute+0x184>)
 800b1ba:	2207      	movs	r2, #7
 800b1bc:	601a      	str	r2, [r3, #0]
  {
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 800b1be:	aa03      	add	r2, sp, #12
 800b1c0:	ab04      	add	r3, sp, #16
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4818      	ldr	r0, [pc, #96]	; (800b228 <rt_test_011_001_execute+0x188>)
 800b1c6:	f7fa f9a3 	bl	8005510 <chHeapStatus>
 800b1ca:	9007      	str	r0, [sp, #28]
    test_assert(n1 == n2, "fragmentation changed");
 800b1cc:	9a08      	ldr	r2, [sp, #32]
 800b1ce:	9b07      	ldr	r3, [sp, #28]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	bf0c      	ite	eq
 800b1d4:	2301      	moveq	r3, #1
 800b1d6:	2300      	movne	r3, #0
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	4921      	ldr	r1, [pc, #132]	; (800b260 <rt_test_011_001_execute+0x1c0>)
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fc f807 	bl	80071f0 <__test_assert>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d11a      	bne.n	800b21e <rt_test_011_001_execute+0x17e>
    test_assert(total1 == total2, "total free space changed");
 800b1e8:	9a06      	ldr	r2, [sp, #24]
 800b1ea:	9b04      	ldr	r3, [sp, #16]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	bf0c      	ite	eq
 800b1f0:	2301      	moveq	r3, #1
 800b1f2:	2300      	movne	r3, #0
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	491b      	ldr	r1, [pc, #108]	; (800b264 <rt_test_011_001_execute+0x1c4>)
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fb fff9 	bl	80071f0 <__test_assert>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10c      	bne.n	800b21e <rt_test_011_001_execute+0x17e>
    test_assert(largest1 == largest2, "largest fragment size changed");
 800b204:	9a05      	ldr	r2, [sp, #20]
 800b206:	9b03      	ldr	r3, [sp, #12]
 800b208:	429a      	cmp	r2, r3
 800b20a:	bf0c      	ite	eq
 800b20c:	2301      	moveq	r3, #1
 800b20e:	2300      	movne	r3, #0
 800b210:	b2db      	uxtb	r3, r3
 800b212:	4915      	ldr	r1, [pc, #84]	; (800b268 <rt_test_011_001_execute+0x1c8>)
 800b214:	4618      	mov	r0, r3
 800b216:	f7fb ffeb 	bl	80071f0 <__test_assert>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
  }
  test_end_step(7);
}
 800b21e:	b00b      	add	sp, #44	; 0x2c
 800b220:	f85d fb04 	ldr.w	pc, [sp], #4
 800b224:	20000c6c 	.word	0x20000c6c
 800b228:	2000152c 	.word	0x2000152c
 800b22c:	0801e568 	.word	0x0801e568
 800b230:	0801e0ec 	.word	0x0801e0ec
 800b234:	0800b061 	.word	0x0800b061
 800b238:	0801e578 	.word	0x0801e578
 800b23c:	20001508 	.word	0x20001508
 800b240:	0801e580 	.word	0x0801e580
 800b244:	0801e0e8 	.word	0x0801e0e8
 800b248:	0801e598 	.word	0x0801e598
 800b24c:	0801e0e4 	.word	0x0801e0e4
 800b250:	0801e5a0 	.word	0x0801e5a0
 800b254:	0801e5a8 	.word	0x0801e5a8
 800b258:	0801e0f0 	.word	0x0801e0f0
 800b25c:	0801e5c4 	.word	0x0801e5c4
 800b260:	0801e5c8 	.word	0x0801e5c8
 800b264:	0801e5e0 	.word	0x0801e5e0
 800b268:	0801e5fc 	.word	0x0801e5fc
 800b26c:	00000000 	.word	0x00000000

0800b270 <rt_test_011_002_setup>:
 *   execution sequence.
 * - [11.2.6] Testing that the pool contains four elements again.
 * .
 */

static void rt_test_011_002_setup(void) {
 800b270:	b508      	push	{r3, lr}
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
 800b272:	2200      	movs	r2, #0
 800b274:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800b278:	4802      	ldr	r0, [pc, #8]	; (800b284 <rt_test_011_002_setup+0x14>)
 800b27a:	f7ff fee1 	bl	800b040 <chPoolObjectInit.lto_priv.1>
}
 800b27e:	bf00      	nop
 800b280:	bd08      	pop	{r3, pc}
 800b282:	bf00      	nop
 800b284:	20001548 	.word	0x20001548
	...

0800b290 <rt_test_011_002_execute>:

static void rt_test_011_002_execute(void) {
 800b290:	b500      	push	{lr}
 800b292:	b085      	sub	sp, #20
  unsigned i;
  tprio_t prio;

  /* [11.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 800b294:	4b60      	ldr	r3, [pc, #384]	; (800b418 <rt_test_011_002_execute+0x188>)
 800b296:	2201      	movs	r2, #1
 800b298:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < 4; i++)
 800b29a:	2300      	movs	r3, #0
 800b29c:	9303      	str	r3, [sp, #12]
 800b29e:	e00a      	b.n	800b2b6 <rt_test_011_002_execute+0x26>
      chPoolFree(&mp1, wa[i]);
 800b2a0:	4a5e      	ldr	r2, [pc, #376]	; (800b41c <rt_test_011_002_execute+0x18c>)
 800b2a2:	9b03      	ldr	r3, [sp, #12]
 800b2a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	485d      	ldr	r0, [pc, #372]	; (800b420 <rt_test_011_002_execute+0x190>)
 800b2ac:	f7fa fa58 	bl	8005760 <chPoolFree>
    for (i = 0; i < 4; i++)
 800b2b0:	9b03      	ldr	r3, [sp, #12]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	9303      	str	r3, [sp, #12]
 800b2b6:	9b03      	ldr	r3, [sp, #12]
 800b2b8:	2b03      	cmp	r3, #3
 800b2ba:	d9f1      	bls.n	800b2a0 <rt_test_011_002_execute+0x10>
  }
  test_end_step(1);

  /* [11.2.2] Getting base priority for threads.*/
  test_set_step(2);
 800b2bc:	4b56      	ldr	r3, [pc, #344]	; (800b418 <rt_test_011_002_execute+0x188>)
 800b2be:	2202      	movs	r2, #2
 800b2c0:	601a      	str	r2, [r3, #0]
  {
    prio = chThdGetPriorityX();
 800b2c2:	f7ff feb5 	bl	800b030 <chThdGetPriorityX.lto_priv.6>
 800b2c6:	9002      	str	r0, [sp, #8]
  }
  test_end_step(2);

  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
 800b2c8:	4b53      	ldr	r3, [pc, #332]	; (800b418 <rt_test_011_002_execute+0x188>)
 800b2ca:	2203      	movs	r2, #3
 800b2cc:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 800b2ce:	9b02      	ldr	r3, [sp, #8]
 800b2d0:	1e5a      	subs	r2, r3, #1
 800b2d2:	4b54      	ldr	r3, [pc, #336]	; (800b424 <rt_test_011_002_execute+0x194>)
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	4b54      	ldr	r3, [pc, #336]	; (800b428 <rt_test_011_002_execute+0x198>)
 800b2d8:	4954      	ldr	r1, [pc, #336]	; (800b42c <rt_test_011_002_execute+0x19c>)
 800b2da:	4851      	ldr	r0, [pc, #324]	; (800b420 <rt_test_011_002_execute+0x190>)
 800b2dc:	f7f9 fc08 	bl	8004af0 <chThdCreateFromMemoryPool>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	4a53      	ldr	r2, [pc, #332]	; (800b430 <rt_test_011_002_execute+0x1a0>)
 800b2e4:	6013      	str	r3, [r2, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 800b2e6:	9b02      	ldr	r3, [sp, #8]
 800b2e8:	1e9a      	subs	r2, r3, #2
 800b2ea:	4b52      	ldr	r3, [pc, #328]	; (800b434 <rt_test_011_002_execute+0x1a4>)
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	4b4e      	ldr	r3, [pc, #312]	; (800b428 <rt_test_011_002_execute+0x198>)
 800b2f0:	4951      	ldr	r1, [pc, #324]	; (800b438 <rt_test_011_002_execute+0x1a8>)
 800b2f2:	484b      	ldr	r0, [pc, #300]	; (800b420 <rt_test_011_002_execute+0x190>)
 800b2f4:	f7f9 fbfc 	bl	8004af0 <chThdCreateFromMemoryPool>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	4a4d      	ldr	r2, [pc, #308]	; (800b430 <rt_test_011_002_execute+0x1a0>)
 800b2fc:	6053      	str	r3, [r2, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 800b2fe:	9b02      	ldr	r3, [sp, #8]
 800b300:	1eda      	subs	r2, r3, #3
 800b302:	4b4e      	ldr	r3, [pc, #312]	; (800b43c <rt_test_011_002_execute+0x1ac>)
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	4b48      	ldr	r3, [pc, #288]	; (800b428 <rt_test_011_002_execute+0x198>)
 800b308:	494d      	ldr	r1, [pc, #308]	; (800b440 <rt_test_011_002_execute+0x1b0>)
 800b30a:	4845      	ldr	r0, [pc, #276]	; (800b420 <rt_test_011_002_execute+0x190>)
 800b30c:	f7f9 fbf0 	bl	8004af0 <chThdCreateFromMemoryPool>
 800b310:	4603      	mov	r3, r0
 800b312:	4a47      	ldr	r2, [pc, #284]	; (800b430 <rt_test_011_002_execute+0x1a0>)
 800b314:	6093      	str	r3, [r2, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 800b316:	9b02      	ldr	r3, [sp, #8]
 800b318:	1f1a      	subs	r2, r3, #4
 800b31a:	4b4a      	ldr	r3, [pc, #296]	; (800b444 <rt_test_011_002_execute+0x1b4>)
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	4b42      	ldr	r3, [pc, #264]	; (800b428 <rt_test_011_002_execute+0x198>)
 800b320:	4949      	ldr	r1, [pc, #292]	; (800b448 <rt_test_011_002_execute+0x1b8>)
 800b322:	483f      	ldr	r0, [pc, #252]	; (800b420 <rt_test_011_002_execute+0x190>)
 800b324:	f7f9 fbe4 	bl	8004af0 <chThdCreateFromMemoryPool>
 800b328:	4603      	mov	r3, r0
 800b32a:	4a41      	ldr	r2, [pc, #260]	; (800b430 <rt_test_011_002_execute+0x1a0>)
 800b32c:	60d3      	str	r3, [r2, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 800b32e:	9b02      	ldr	r3, [sp, #8]
 800b330:	1f5a      	subs	r2, r3, #5
 800b332:	4b46      	ldr	r3, [pc, #280]	; (800b44c <rt_test_011_002_execute+0x1bc>)
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	4b3c      	ldr	r3, [pc, #240]	; (800b428 <rt_test_011_002_execute+0x198>)
 800b338:	4945      	ldr	r1, [pc, #276]	; (800b450 <rt_test_011_002_execute+0x1c0>)
 800b33a:	4839      	ldr	r0, [pc, #228]	; (800b420 <rt_test_011_002_execute+0x190>)
 800b33c:	f7f9 fbd8 	bl	8004af0 <chThdCreateFromMemoryPool>
 800b340:	4603      	mov	r3, r0
 800b342:	4a3b      	ldr	r2, [pc, #236]	; (800b430 <rt_test_011_002_execute+0x1a0>)
 800b344:	6113      	str	r3, [r2, #16]
  }
  test_end_step(3);

  /* [11.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
 800b346:	4b34      	ldr	r3, [pc, #208]	; (800b418 <rt_test_011_002_execute+0x188>)
 800b348:	2204      	movs	r2, #4
 800b34a:	601a      	str	r2, [r3, #0]
  {
    test_assert((threads[0] != NULL) &&
 800b34c:	4b38      	ldr	r3, [pc, #224]	; (800b430 <rt_test_011_002_execute+0x1a0>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d00d      	beq.n	800b370 <rt_test_011_002_execute+0xe0>
 800b354:	4b36      	ldr	r3, [pc, #216]	; (800b430 <rt_test_011_002_execute+0x1a0>)
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d009      	beq.n	800b370 <rt_test_011_002_execute+0xe0>
 800b35c:	4b34      	ldr	r3, [pc, #208]	; (800b430 <rt_test_011_002_execute+0x1a0>)
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d005      	beq.n	800b370 <rt_test_011_002_execute+0xe0>
 800b364:	4b32      	ldr	r3, [pc, #200]	; (800b430 <rt_test_011_002_execute+0x1a0>)
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d001      	beq.n	800b370 <rt_test_011_002_execute+0xe0>
 800b36c:	2301      	movs	r3, #1
 800b36e:	e000      	b.n	800b372 <rt_test_011_002_execute+0xe2>
 800b370:	2300      	movs	r3, #0
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	b2db      	uxtb	r3, r3
 800b378:	4936      	ldr	r1, [pc, #216]	; (800b454 <rt_test_011_002_execute+0x1c4>)
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fb ff38 	bl	80071f0 <__test_assert>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d144      	bne.n	800b410 <rt_test_011_002_execute+0x180>
                (threads[1] != NULL) &&
                (threads[2] != NULL) &&
                (threads[3] != NULL),
                "thread creation failed");
    test_assert(threads[4] == NULL,
 800b386:	4b2a      	ldr	r3, [pc, #168]	; (800b430 <rt_test_011_002_execute+0x1a0>)
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	bf0c      	ite	eq
 800b38e:	2301      	moveq	r3, #1
 800b390:	2300      	movne	r3, #0
 800b392:	b2db      	uxtb	r3, r3
 800b394:	4930      	ldr	r1, [pc, #192]	; (800b458 <rt_test_011_002_execute+0x1c8>)
 800b396:	4618      	mov	r0, r3
 800b398:	f7fb ff2a 	bl	80071f0 <__test_assert>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d136      	bne.n	800b410 <rt_test_011_002_execute+0x180>
  }
  test_end_step(4);

  /* [11.2.5] Letting them run, free the memory then checking the
     execution sequence.*/
  test_set_step(5);
 800b3a2:	4b1d      	ldr	r3, [pc, #116]	; (800b418 <rt_test_011_002_execute+0x188>)
 800b3a4:	2205      	movs	r2, #5
 800b3a6:	601a      	str	r2, [r3, #0]
  {
    test_wait_threads();
 800b3a8:	f7fc faf2 	bl	8007990 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 800b3ac:	492b      	ldr	r1, [pc, #172]	; (800b45c <rt_test_011_002_execute+0x1cc>)
 800b3ae:	482c      	ldr	r0, [pc, #176]	; (800b460 <rt_test_011_002_execute+0x1d0>)
 800b3b0:	f7fb ff36 	bl	8007220 <__test_assert_sequence>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d12a      	bne.n	800b410 <rt_test_011_002_execute+0x180>
  }
  test_end_step(5);

  /* [11.2.6] Testing that the pool contains four elements again.*/
  test_set_step(6);
 800b3ba:	4b17      	ldr	r3, [pc, #92]	; (800b418 <rt_test_011_002_execute+0x188>)
 800b3bc:	2206      	movs	r2, #6
 800b3be:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < 4; i++)
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	9303      	str	r3, [sp, #12]
 800b3c4:	e012      	b.n	800b3ec <rt_test_011_002_execute+0x15c>
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 800b3c6:	4816      	ldr	r0, [pc, #88]	; (800b420 <rt_test_011_002_execute+0x190>)
 800b3c8:	f7fa f9aa 	bl	8005720 <chPoolAlloc>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	bf14      	ite	ne
 800b3d2:	2301      	movne	r3, #1
 800b3d4:	2300      	moveq	r3, #0
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	4922      	ldr	r1, [pc, #136]	; (800b464 <rt_test_011_002_execute+0x1d4>)
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fb ff08 	bl	80071f0 <__test_assert>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d114      	bne.n	800b410 <rt_test_011_002_execute+0x180>
    for (i = 0; i < 4; i++)
 800b3e6:	9b03      	ldr	r3, [sp, #12]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	9303      	str	r3, [sp, #12]
 800b3ec:	9b03      	ldr	r3, [sp, #12]
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	d9e9      	bls.n	800b3c6 <rt_test_011_002_execute+0x136>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800b3f2:	480b      	ldr	r0, [pc, #44]	; (800b420 <rt_test_011_002_execute+0x190>)
 800b3f4:	f7fa f994 	bl	8005720 <chPoolAlloc>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	bf0c      	ite	eq
 800b3fe:	2301      	moveq	r3, #1
 800b400:	2300      	movne	r3, #0
 800b402:	b2db      	uxtb	r3, r3
 800b404:	4918      	ldr	r1, [pc, #96]	; (800b468 <rt_test_011_002_execute+0x1d8>)
 800b406:	4618      	mov	r0, r3
 800b408:	f7fb fef2 	bl	80071f0 <__test_assert>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
  }
  test_end_step(6);
}
 800b410:	b005      	add	sp, #20
 800b412:	f85d fb04 	ldr.w	pc, [sp], #4
 800b416:	bf00      	nop
 800b418:	20000c6c 	.word	0x20000c6c
 800b41c:	0801d708 	.word	0x0801d708
 800b420:	20001548 	.word	0x20001548
 800b424:	0801e0ec 	.word	0x0801e0ec
 800b428:	0800b061 	.word	0x0800b061
 800b42c:	0801e578 	.word	0x0801e578
 800b430:	20001508 	.word	0x20001508
 800b434:	0801e0e8 	.word	0x0801e0e8
 800b438:	0801e598 	.word	0x0801e598
 800b43c:	0801e0e4 	.word	0x0801e0e4
 800b440:	0801e5a0 	.word	0x0801e5a0
 800b444:	0801e0e0 	.word	0x0801e0e0
 800b448:	0801e62c 	.word	0x0801e62c
 800b44c:	0801e108 	.word	0x0801e108
 800b450:	0801e634 	.word	0x0801e634
 800b454:	0801e580 	.word	0x0801e580
 800b458:	0801e5a8 	.word	0x0801e5a8
 800b45c:	0801e0f0 	.word	0x0801e0f0
 800b460:	0801e410 	.word	0x0801e410
 800b464:	0801e63c 	.word	0x0801e63c
 800b468:	0801e64c 	.word	0x0801e64c
 800b46c:	00000000 	.word	0x00000000

0800b470 <chTimeAddX.lto_priv.6>:
                                   sysinterval_t interval) {
 800b470:	b082      	sub	sp, #8
 800b472:	9001      	str	r0, [sp, #4]
 800b474:	9100      	str	r1, [sp, #0]
  return systime + (systime_t)interval;
 800b476:	9a01      	ldr	r2, [sp, #4]
 800b478:	9b00      	ldr	r3, [sp, #0]
 800b47a:	4413      	add	r3, r2
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	b002      	add	sp, #8
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
	...

0800b490 <chTimeIsInRangeX.lto_priv.4>:
                                    systime_t end) {
 800b490:	b084      	sub	sp, #16
 800b492:	9003      	str	r0, [sp, #12]
 800b494:	9102      	str	r1, [sp, #8]
 800b496:	9201      	str	r2, [sp, #4]
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 800b498:	9a03      	ldr	r2, [sp, #12]
 800b49a:	9b02      	ldr	r3, [sp, #8]
 800b49c:	1ad2      	subs	r2, r2, r3
                (systime_t)((systime_t)end - (systime_t)start));
 800b49e:	9901      	ldr	r1, [sp, #4]
 800b4a0:	9b02      	ldr	r3, [sp, #8]
 800b4a2:	1acb      	subs	r3, r1, r3
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	bf34      	ite	cc
 800b4a8:	2301      	movcc	r3, #1
 800b4aa:	2300      	movcs	r3, #0
 800b4ac:	b2db      	uxtb	r3, r3
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	b004      	add	sp, #16
 800b4b2:	4770      	bx	lr
	...

0800b4c0 <port_timer_get_time.lto_priv.9>:
static inline systime_t port_timer_get_time(void) {
 800b4c0:	b508      	push	{r3, lr}
  return stGetCounter();
 800b4c2:	f7f5 f80d 	bl	80004e0 <stGetCounter>
 800b4c6:	4603      	mov	r3, r0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	bd08      	pop	{r3, pc}
 800b4cc:	0000      	movs	r0, r0
	...

0800b4d0 <chSysLock.lto_priv.27>:
static inline void chSysLock(void) {
 800b4d0:	b082      	sub	sp, #8
 800b4d2:	2330      	movs	r3, #48	; 0x30
 800b4d4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800b4d6:	9b01      	ldr	r3, [sp, #4]
 800b4d8:	f383 8811 	msr	BASEPRI, r3
}
 800b4dc:	bf00      	nop
}
 800b4de:	bf00      	nop
}
 800b4e0:	bf00      	nop
 800b4e2:	b002      	add	sp, #8
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
	...

0800b4f0 <chSysUnlock.lto_priv.27>:
static inline void chSysUnlock(void) {
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800b4f6:	9b01      	ldr	r3, [sp, #4]
 800b4f8:	f383 8811 	msr	BASEPRI, r3
}
 800b4fc:	bf00      	nop
}
 800b4fe:	bf00      	nop
}
 800b500:	bf00      	nop
 800b502:	b002      	add	sp, #8
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
	...

0800b510 <chVTGetSystemTimeX.lto_priv.9>:
static inline systime_t chVTGetSystemTimeX(void) {
 800b510:	b508      	push	{r3, lr}
  return port_timer_get_time();
 800b512:	f7ff ffd5 	bl	800b4c0 <port_timer_get_time.lto_priv.9>
 800b516:	4603      	mov	r3, r0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	bd08      	pop	{r3, pc}
 800b51c:	0000      	movs	r0, r0
	...

0800b520 <chVTIsSystemTimeWithinX.lto_priv.1>:
static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 800b520:	b500      	push	{lr}
 800b522:	b083      	sub	sp, #12
 800b524:	9001      	str	r0, [sp, #4]
 800b526:	9100      	str	r1, [sp, #0]
  return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 800b528:	f7ff fff2 	bl	800b510 <chVTGetSystemTimeX.lto_priv.9>
 800b52c:	4603      	mov	r3, r0
 800b52e:	9a00      	ldr	r2, [sp, #0]
 800b530:	9901      	ldr	r1, [sp, #4]
 800b532:	4618      	mov	r0, r3
 800b534:	f7ff ffac 	bl	800b490 <chTimeIsInRangeX.lto_priv.4>
 800b538:	4603      	mov	r3, r0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	b003      	add	sp, #12
 800b53e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b542:	bf00      	nop
	...

0800b550 <chThdGetSelfX.lto_priv.13>:
  return __sch_get_currthread();
 800b550:	4b01      	ldr	r3, [pc, #4]	; (800b558 <chThdGetSelfX.lto_priv.13+0x8>)
 800b552:	68db      	ldr	r3, [r3, #12]
}
 800b554:	4618      	mov	r0, r3
 800b556:	4770      	bx	lr
 800b558:	20000a48 	.word	0x20000a48
 800b55c:	00000000 	.word	0x00000000

0800b560 <chThdGetPriorityX.lto_priv.7>:
static inline tprio_t chThdGetPriorityX(void) {
 800b560:	b508      	push	{r3, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 800b562:	f7ff fff5 	bl	800b550 <chThdGetSelfX.lto_priv.13>
 800b566:	4603      	mov	r3, r0
 800b568:	689b      	ldr	r3, [r3, #8]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	bd08      	pop	{r3, pc}
 800b56e:	bf00      	nop

0800b570 <chThdShouldTerminateX>:
static inline bool chThdShouldTerminateX(void) {
 800b570:	b508      	push	{r3, lr}
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 800b572:	f7ff ffed 	bl	800b550 <chThdGetSelfX.lto_priv.13>
 800b576:	4603      	mov	r3, r0
 800b578:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b57c:	f003 0304 	and.w	r3, r3, #4
 800b580:	2b00      	cmp	r3, #0
 800b582:	bf14      	ite	ne
 800b584:	2301      	movne	r3, #1
 800b586:	2300      	moveq	r3, #0
 800b588:	b2db      	uxtb	r3, r3
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	bd08      	pop	{r3, pc}
 800b58e:	bf00      	nop

0800b590 <chSemReset.lto_priv.1>:
static inline void chSemReset(semaphore_t *sp, cnt_t n) {
 800b590:	b500      	push	{lr}
 800b592:	b083      	sub	sp, #12
 800b594:	9001      	str	r0, [sp, #4]
 800b596:	9100      	str	r1, [sp, #0]
  chSemResetWithMessage(sp, n, MSG_RESET);
 800b598:	f06f 0201 	mvn.w	r2, #1
 800b59c:	9900      	ldr	r1, [sp, #0]
 800b59e:	9801      	ldr	r0, [sp, #4]
 800b5a0:	f7f8 f95e 	bl	8003860 <chSemResetWithMessage>
}
 800b5a4:	bf00      	nop
 800b5a6:	b003      	add	sp, #12
 800b5a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5ac:	0000      	movs	r0, r0
	...

0800b5b0 <chMsgWait.lto_priv.2>:
static inline thread_t *chMsgWait(void) {
 800b5b0:	b500      	push	{lr}
 800b5b2:	b083      	sub	sp, #12
  chSysLock();
 800b5b4:	f7ff ff8c 	bl	800b4d0 <chSysLock.lto_priv.27>
  tp = chMsgWaitS();
 800b5b8:	f7f9 fa12 	bl	80049e0 <chMsgWaitS>
 800b5bc:	9001      	str	r0, [sp, #4]
  chSysUnlock();
 800b5be:	f7ff ff97 	bl	800b4f0 <chSysUnlock.lto_priv.27>
  return tp;
 800b5c2:	9b01      	ldr	r3, [sp, #4]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	b003      	add	sp, #12
 800b5c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5cc:	0000      	movs	r0, r0
	...

0800b5d0 <chMsgGet.lto_priv.2>:
static inline msg_t chMsgGet(thread_t *tp) {
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	9001      	str	r0, [sp, #4]
  return tp->u.sentmsg;
 800b5d4:	9b01      	ldr	r3, [sp, #4]
 800b5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	b002      	add	sp, #8
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop

0800b5e0 <test_printn.lto_priv.1>:
static inline void test_printn(uint32_t n) {
 800b5e0:	b500      	push	{lr}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	9001      	str	r0, [sp, #4]
  test_printf("%u", n);
 800b5e6:	9901      	ldr	r1, [sp, #4]
 800b5e8:	4803      	ldr	r0, [pc, #12]	; (800b5f8 <test_printn.lto_priv.1+0x18>)
 800b5ea:	f7fc f959 	bl	80078a0 <test_printf>
}
 800b5ee:	bf00      	nop
 800b5f0:	b003      	add	sp, #12
 800b5f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5f6:	bf00      	nop
 800b5f8:	0801d71c 	.word	0x0801d71c
 800b5fc:	00000000 	.word	0x00000000

0800b600 <test_print.lto_priv.1>:
static inline void test_print(const char *msgp) {
 800b600:	b500      	push	{lr}
 800b602:	b083      	sub	sp, #12
 800b604:	9001      	str	r0, [sp, #4]
  test_printf("%s", msgp);
 800b606:	9901      	ldr	r1, [sp, #4]
 800b608:	4803      	ldr	r0, [pc, #12]	; (800b618 <test_print.lto_priv.1+0x18>)
 800b60a:	f7fc f949 	bl	80078a0 <test_printf>
}
 800b60e:	bf00      	nop
 800b610:	b003      	add	sp, #12
 800b612:	f85d fb04 	ldr.w	pc, [sp], #4
 800b616:	bf00      	nop
 800b618:	0801d720 	.word	0x0801d720
 800b61c:	00000000 	.word	0x00000000

0800b620 <test_println.lto_priv.1>:
static inline void test_println(const char *msgp) {
 800b620:	b500      	push	{lr}
 800b622:	b083      	sub	sp, #12
 800b624:	9001      	str	r0, [sp, #4]
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800b626:	9901      	ldr	r1, [sp, #4]
 800b628:	4803      	ldr	r0, [pc, #12]	; (800b638 <test_println.lto_priv.1+0x18>)
 800b62a:	f7fc f939 	bl	80078a0 <test_printf>
}
 800b62e:	bf00      	nop
 800b630:	b003      	add	sp, #12
 800b632:	f85d fb04 	ldr.w	pc, [sp], #4
 800b636:	bf00      	nop
 800b638:	0801d4d0 	.word	0x0801d4d0
 800b63c:	00000000 	.word	0x00000000

0800b640 <tmo>:
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
static mutex_t mtx1;
#endif

static void tmo(virtual_timer_t *vtp, void *param) {
 800b640:	b082      	sub	sp, #8
 800b642:	9001      	str	r0, [sp, #4]
 800b644:	9100      	str	r1, [sp, #0]

  (void)vtp;
  (void)param;
}
 800b646:	bf00      	nop
 800b648:	b002      	add	sp, #8
 800b64a:	4770      	bx	lr
 800b64c:	0000      	movs	r0, r0
	...

0800b650 <bmk_thread1>:

#if CH_CFG_USE_MESSAGES
static THD_FUNCTION(bmk_thread1, p) {
 800b650:	b500      	push	{lr}
 800b652:	b085      	sub	sp, #20
 800b654:	9001      	str	r0, [sp, #4]
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 800b656:	f7ff ffab 	bl	800b5b0 <chMsgWait.lto_priv.2>
 800b65a:	9003      	str	r0, [sp, #12]
    msg = chMsgGet(tp);
 800b65c:	9803      	ldr	r0, [sp, #12]
 800b65e:	f7ff ffb7 	bl	800b5d0 <chMsgGet.lto_priv.2>
 800b662:	9002      	str	r0, [sp, #8]
    chMsgRelease(tp, msg);
 800b664:	9902      	ldr	r1, [sp, #8]
 800b666:	9803      	ldr	r0, [sp, #12]
 800b668:	f7f9 f9da 	bl	8004a20 <chMsgRelease>
  } while (msg);
 800b66c:	9b02      	ldr	r3, [sp, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1f1      	bne.n	800b656 <bmk_thread1+0x6>
}
 800b672:	bf00      	nop
 800b674:	bf00      	nop
 800b676:	b005      	add	sp, #20
 800b678:	f85d fb04 	ldr.w	pc, [sp], #4
 800b67c:	0000      	movs	r0, r0
	...

0800b680 <msg_loop_test>:

NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 800b680:	b500      	push	{lr}
 800b682:	b087      	sub	sp, #28
 800b684:	9001      	str	r0, [sp, #4]
  systime_t start, end;

  uint32_t n = 0;
 800b686:	2300      	movs	r3, #0
 800b688:	9305      	str	r3, [sp, #20]
  start = test_wait_tick();
 800b68a:	f7fc f9a9 	bl	80079e0 <test_wait_tick>
 800b68e:	9004      	str	r0, [sp, #16]
  end = chTimeAddX(start, TIME_MS2I(1000));
 800b690:	f242 7110 	movw	r1, #10000	; 0x2710
 800b694:	9804      	ldr	r0, [sp, #16]
 800b696:	f7ff feeb 	bl	800b470 <chTimeAddX.lto_priv.6>
 800b69a:	9003      	str	r0, [sp, #12]
  do {
    (void)chMsgSend(tp, 1);
 800b69c:	2101      	movs	r1, #1
 800b69e:	9801      	ldr	r0, [sp, #4]
 800b6a0:	f7f9 f976 	bl	8004990 <chMsgSend>
    n++;
 800b6a4:	9b05      	ldr	r3, [sp, #20]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	9305      	str	r3, [sp, #20]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (chVTIsSystemTimeWithinX(start, end));
 800b6aa:	9903      	ldr	r1, [sp, #12]
 800b6ac:	9804      	ldr	r0, [sp, #16]
 800b6ae:	f7ff ff37 	bl	800b520 <chVTIsSystemTimeWithinX.lto_priv.1>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d1f1      	bne.n	800b69c <msg_loop_test+0x1c>
  (void)chMsgSend(tp, 0);
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	9801      	ldr	r0, [sp, #4]
 800b6bc:	f7f9 f968 	bl	8004990 <chMsgSend>
  return n;
 800b6c0:	9b05      	ldr	r3, [sp, #20]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	b007      	add	sp, #28
 800b6c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6ca:	bf00      	nop
 800b6cc:	0000      	movs	r0, r0
	...

0800b6d0 <bmk_thread3>:
#endif

static THD_FUNCTION(bmk_thread3, p) {
 800b6d0:	b500      	push	{lr}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	9001      	str	r0, [sp, #4]

  chThdExit((msg_t)p);
 800b6d6:	9b01      	ldr	r3, [sp, #4]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7f7 fde9 	bl	80032b0 <chThdExit>
}
 800b6de:	bf00      	nop
 800b6e0:	b003      	add	sp, #12
 800b6e2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6e6:	bf00      	nop
	...

0800b6f0 <bmk_thread4>:

static THD_FUNCTION(bmk_thread4, p) {
 800b6f0:	b500      	push	{lr}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	9001      	str	r0, [sp, #4]
  msg_t msg;
  thread_t *self = chThdGetSelfX();
 800b6f6:	f7ff ff2b 	bl	800b550 <chThdGetSelfX.lto_priv.13>
 800b6fa:	9003      	str	r0, [sp, #12]

  (void)p;
  chSysLock();
 800b6fc:	f7ff fee8 	bl	800b4d0 <chSysLock.lto_priv.27>
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800b700:	2003      	movs	r0, #3
 800b702:	f7f7 f97d 	bl	8002a00 <chSchGoSleepS>
    msg = self->u.rdymsg;
 800b706:	9b03      	ldr	r3, [sp, #12]
 800b708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70a:	9302      	str	r3, [sp, #8]
  } while (msg == MSG_OK);
 800b70c:	9b02      	ldr	r3, [sp, #8]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d0f6      	beq.n	800b700 <bmk_thread4+0x10>
  chSysUnlock();
 800b712:	f7ff feed 	bl	800b4f0 <chSysUnlock.lto_priv.27>
}
 800b716:	bf00      	nop
 800b718:	b005      	add	sp, #20
 800b71a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b71e:	bf00      	nop

0800b720 <bmk_thread7>:

#if CH_CFG_USE_SEMAPHORES
static THD_FUNCTION(bmk_thread7, p) {
 800b720:	b500      	push	{lr}
 800b722:	b083      	sub	sp, #12
 800b724:	9001      	str	r0, [sp, #4]

  (void)p;
  while (!chThdShouldTerminateX())
 800b726:	e002      	b.n	800b72e <bmk_thread7+0xe>
    chSemWait(&sem1);
 800b728:	4807      	ldr	r0, [pc, #28]	; (800b748 <bmk_thread7+0x28>)
 800b72a:	f7f8 f8d1 	bl	80038d0 <chSemWait>
  while (!chThdShouldTerminateX())
 800b72e:	f7ff ff1f 	bl	800b570 <chThdShouldTerminateX>
 800b732:	4603      	mov	r3, r0
 800b734:	f083 0301 	eor.w	r3, r3, #1
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1f4      	bne.n	800b728 <bmk_thread7+0x8>
}
 800b73e:	bf00      	nop
 800b740:	bf00      	nop
 800b742:	b003      	add	sp, #12
 800b744:	f85d fb04 	ldr.w	pc, [sp], #4
 800b748:	20001558 	.word	0x20001558
 800b74c:	00000000 	.word	0x00000000

0800b750 <bmk_thread8>:
#endif

static THD_FUNCTION(bmk_thread8, p) {
 800b750:	b500      	push	{lr}
 800b752:	b083      	sub	sp, #12
 800b754:	9001      	str	r0, [sp, #4]

  do {
    chThdYield();
 800b756:	f7f7 fe9b 	bl	8003490 <chThdYield>
    chThdYield();
 800b75a:	f7f7 fe99 	bl	8003490 <chThdYield>
    chThdYield();
 800b75e:	f7f7 fe97 	bl	8003490 <chThdYield>
    chThdYield();
 800b762:	f7f7 fe95 	bl	8003490 <chThdYield>
    (*(uint32_t *)p) += 4;
 800b766:	9b01      	ldr	r3, [sp, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	1d1a      	adds	r2, r3, #4
 800b76c:	9b01      	ldr	r3, [sp, #4]
 800b76e:	601a      	str	r2, [r3, #0]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 800b770:	f7ff fefe 	bl	800b570 <chThdShouldTerminateX>
 800b774:	4603      	mov	r3, r0
 800b776:	f083 0301 	eor.w	r3, r3, #1
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1ea      	bne.n	800b756 <bmk_thread8+0x6>
}
 800b780:	bf00      	nop
 800b782:	bf00      	nop
 800b784:	b003      	add	sp, #12
 800b786:	f85d fb04 	ldr.w	pc, [sp], #4
 800b78a:	bf00      	nop
 800b78c:	0000      	movs	r0, r0
	...

0800b790 <rt_test_012_001_execute>:
 *   second time window.
 * - [12.1.3] Score is printed.
 * .
 */

static void rt_test_012_001_execute(void) {
 800b790:	b510      	push	{r4, lr}
 800b792:	b084      	sub	sp, #16
  uint32_t n;

  /* [12.1.1] The messenger thread is started at a lower priority than
     the current thread.*/
  test_set_step(1);
 800b794:	4b1a      	ldr	r3, [pc, #104]	; (800b800 <rt_test_012_001_execute+0x70>)
 800b796:	2201      	movs	r2, #1
 800b798:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800b79a:	4b1a      	ldr	r3, [pc, #104]	; (800b804 <rt_test_012_001_execute+0x74>)
 800b79c:	681c      	ldr	r4, [r3, #0]
 800b79e:	f7ff fedf 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	1e5a      	subs	r2, r3, #1
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	4b17      	ldr	r3, [pc, #92]	; (800b808 <rt_test_012_001_execute+0x78>)
 800b7ac:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f7f7 fcfd 	bl	80031b0 <chThdCreateStatic>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	4a14      	ldr	r2, [pc, #80]	; (800b80c <rt_test_012_001_execute+0x7c>)
 800b7ba:	6013      	str	r3, [r2, #0]
  }
  test_end_step(1);

  /* [12.1.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
 800b7bc:	4b10      	ldr	r3, [pc, #64]	; (800b800 <rt_test_012_001_execute+0x70>)
 800b7be:	2202      	movs	r2, #2
 800b7c0:	601a      	str	r2, [r3, #0]
  {
    n = msg_loop_test(threads[0]);
 800b7c2:	4b12      	ldr	r3, [pc, #72]	; (800b80c <rt_test_012_001_execute+0x7c>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff ff5a 	bl	800b680 <msg_loop_test>
 800b7cc:	9003      	str	r0, [sp, #12]
    test_wait_threads();
 800b7ce:	f7fc f8df 	bl	8007990 <test_wait_threads>
  }
  test_end_step(2);

  /* [12.1.3] Score is printed.*/
  test_set_step(3);
 800b7d2:	4b0b      	ldr	r3, [pc, #44]	; (800b800 <rt_test_012_001_execute+0x70>)
 800b7d4:	2203      	movs	r2, #3
 800b7d6:	601a      	str	r2, [r3, #0]
  {
    test_print("--- Score : ");
 800b7d8:	480d      	ldr	r0, [pc, #52]	; (800b810 <rt_test_012_001_execute+0x80>)
 800b7da:	f7ff ff11 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n);
 800b7de:	9803      	ldr	r0, [sp, #12]
 800b7e0:	f7ff fefe 	bl	800b5e0 <test_printn.lto_priv.1>
    test_print(" msgs/S, ");
 800b7e4:	480b      	ldr	r0, [pc, #44]	; (800b814 <rt_test_012_001_execute+0x84>)
 800b7e6:	f7ff ff0b 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n << 1);
 800b7ea:	9b03      	ldr	r3, [sp, #12]
 800b7ec:	005b      	lsls	r3, r3, #1
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7ff fef6 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" ctxswc/S");
 800b7f4:	4808      	ldr	r0, [pc, #32]	; (800b818 <rt_test_012_001_execute+0x88>)
 800b7f6:	f7ff ff13 	bl	800b620 <test_println.lto_priv.1>
  }
  test_end_step(3);
}
 800b7fa:	bf00      	nop
 800b7fc:	b004      	add	sp, #16
 800b7fe:	bd10      	pop	{r4, pc}
 800b800:	20000c6c 	.word	0x20000c6c
 800b804:	0801d708 	.word	0x0801d708
 800b808:	0800b651 	.word	0x0800b651
 800b80c:	20001508 	.word	0x20001508
 800b810:	0801e684 	.word	0x0801e684
 800b814:	0801e694 	.word	0x0801e694
 800b818:	0801e6a0 	.word	0x0801e6a0
 800b81c:	00000000 	.word	0x00000000

0800b820 <rt_test_012_002_execute>:
 *   second time window.
 * - [12.2.3] Score is printed.
 * .
 */

static void rt_test_012_002_execute(void) {
 800b820:	b510      	push	{r4, lr}
 800b822:	b084      	sub	sp, #16
  uint32_t n;

  /* [12.2.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 800b824:	4b1a      	ldr	r3, [pc, #104]	; (800b890 <rt_test_012_002_execute+0x70>)
 800b826:	2201      	movs	r2, #1
 800b828:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800b82a:	4b1a      	ldr	r3, [pc, #104]	; (800b894 <rt_test_012_002_execute+0x74>)
 800b82c:	681c      	ldr	r4, [r3, #0]
 800b82e:	f7ff fe97 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800b832:	4603      	mov	r3, r0
 800b834:	1c5a      	adds	r2, r3, #1
 800b836:	2300      	movs	r3, #0
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	4b17      	ldr	r3, [pc, #92]	; (800b898 <rt_test_012_002_execute+0x78>)
 800b83c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800b840:	4620      	mov	r0, r4
 800b842:	f7f7 fcb5 	bl	80031b0 <chThdCreateStatic>
 800b846:	4603      	mov	r3, r0
 800b848:	4a14      	ldr	r2, [pc, #80]	; (800b89c <rt_test_012_002_execute+0x7c>)
 800b84a:	6013      	str	r3, [r2, #0]
  }
  test_end_step(1);

  /* [12.2.2] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(2);
 800b84c:	4b10      	ldr	r3, [pc, #64]	; (800b890 <rt_test_012_002_execute+0x70>)
 800b84e:	2202      	movs	r2, #2
 800b850:	601a      	str	r2, [r3, #0]
  {
    n = msg_loop_test(threads[0]);
 800b852:	4b12      	ldr	r3, [pc, #72]	; (800b89c <rt_test_012_002_execute+0x7c>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4618      	mov	r0, r3
 800b858:	f7ff ff12 	bl	800b680 <msg_loop_test>
 800b85c:	9003      	str	r0, [sp, #12]
    test_wait_threads();
 800b85e:	f7fc f897 	bl	8007990 <test_wait_threads>
  }
  test_end_step(2);

  /* [12.2.3] Score is printed.*/
  test_set_step(3);
 800b862:	4b0b      	ldr	r3, [pc, #44]	; (800b890 <rt_test_012_002_execute+0x70>)
 800b864:	2203      	movs	r2, #3
 800b866:	601a      	str	r2, [r3, #0]
  {
    test_print("--- Score : ");
 800b868:	480d      	ldr	r0, [pc, #52]	; (800b8a0 <rt_test_012_002_execute+0x80>)
 800b86a:	f7ff fec9 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n);
 800b86e:	9803      	ldr	r0, [sp, #12]
 800b870:	f7ff feb6 	bl	800b5e0 <test_printn.lto_priv.1>
    test_print(" msgs/S, ");
 800b874:	480b      	ldr	r0, [pc, #44]	; (800b8a4 <rt_test_012_002_execute+0x84>)
 800b876:	f7ff fec3 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n << 1);
 800b87a:	9b03      	ldr	r3, [sp, #12]
 800b87c:	005b      	lsls	r3, r3, #1
 800b87e:	4618      	mov	r0, r3
 800b880:	f7ff feae 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" ctxswc/S");
 800b884:	4808      	ldr	r0, [pc, #32]	; (800b8a8 <rt_test_012_002_execute+0x88>)
 800b886:	f7ff fecb 	bl	800b620 <test_println.lto_priv.1>
  }
  test_end_step(3);
}
 800b88a:	bf00      	nop
 800b88c:	b004      	add	sp, #16
 800b88e:	bd10      	pop	{r4, pc}
 800b890:	20000c6c 	.word	0x20000c6c
 800b894:	0801d708 	.word	0x0801d708
 800b898:	0800b651 	.word	0x0800b651
 800b89c:	20001508 	.word	0x20001508
 800b8a0:	0801e684 	.word	0x0801e684
 800b8a4:	0801e694 	.word	0x0801e694
 800b8a8:	0801e6a0 	.word	0x0801e6a0
 800b8ac:	00000000 	.word	0x00000000

0800b8b0 <rt_test_012_003_execute>:
 *   second time window.
 * - [12.3.4] Score is printed.
 * .
 */

static void rt_test_012_003_execute(void) {
 800b8b0:	b510      	push	{r4, lr}
 800b8b2:	b084      	sub	sp, #16
  uint32_t n;

  /* [12.3.1] The messenger thread is started at an higher priority
     than the current thread.*/
  test_set_step(1);
 800b8b4:	4b3e      	ldr	r3, [pc, #248]	; (800b9b0 <rt_test_012_003_execute+0x100>)
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800b8ba:	4b3e      	ldr	r3, [pc, #248]	; (800b9b4 <rt_test_012_003_execute+0x104>)
 800b8bc:	681c      	ldr	r4, [r3, #0]
 800b8be:	f7ff fe4f 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	1c5a      	adds	r2, r3, #1
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	4b3b      	ldr	r3, [pc, #236]	; (800b9b8 <rt_test_012_003_execute+0x108>)
 800b8cc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f7f7 fc6d 	bl	80031b0 <chThdCreateStatic>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	4a38      	ldr	r2, [pc, #224]	; (800b9bc <rt_test_012_003_execute+0x10c>)
 800b8da:	6013      	str	r3, [r2, #0]
  }
  test_end_step(1);

  /* [12.3.2] Four threads are started at a lower priority than the
     current thread.*/
  test_set_step(2);
 800b8dc:	4b34      	ldr	r3, [pc, #208]	; (800b9b0 <rt_test_012_003_execute+0x100>)
 800b8de:	2202      	movs	r2, #2
 800b8e0:	601a      	str	r2, [r3, #0]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 800b8e2:	4b34      	ldr	r3, [pc, #208]	; (800b9b4 <rt_test_012_003_execute+0x104>)
 800b8e4:	685c      	ldr	r4, [r3, #4]
 800b8e6:	f7ff fe3b 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	1e9a      	subs	r2, r3, #2
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	4b33      	ldr	r3, [pc, #204]	; (800b9c0 <rt_test_012_003_execute+0x110>)
 800b8f4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f7f7 fc59 	bl	80031b0 <chThdCreateStatic>
 800b8fe:	4603      	mov	r3, r0
 800b900:	4a2e      	ldr	r2, [pc, #184]	; (800b9bc <rt_test_012_003_execute+0x10c>)
 800b902:	6053      	str	r3, [r2, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 800b904:	4b2b      	ldr	r3, [pc, #172]	; (800b9b4 <rt_test_012_003_execute+0x104>)
 800b906:	689c      	ldr	r4, [r3, #8]
 800b908:	f7ff fe2a 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800b90c:	4603      	mov	r3, r0
 800b90e:	1eda      	subs	r2, r3, #3
 800b910:	2300      	movs	r3, #0
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	4b2a      	ldr	r3, [pc, #168]	; (800b9c0 <rt_test_012_003_execute+0x110>)
 800b916:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800b91a:	4620      	mov	r0, r4
 800b91c:	f7f7 fc48 	bl	80031b0 <chThdCreateStatic>
 800b920:	4603      	mov	r3, r0
 800b922:	4a26      	ldr	r2, [pc, #152]	; (800b9bc <rt_test_012_003_execute+0x10c>)
 800b924:	6093      	str	r3, [r2, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800b926:	4b23      	ldr	r3, [pc, #140]	; (800b9b4 <rt_test_012_003_execute+0x104>)
 800b928:	68dc      	ldr	r4, [r3, #12]
 800b92a:	f7ff fe19 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800b92e:	4603      	mov	r3, r0
 800b930:	1f1a      	subs	r2, r3, #4
 800b932:	2300      	movs	r3, #0
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	4b22      	ldr	r3, [pc, #136]	; (800b9c0 <rt_test_012_003_execute+0x110>)
 800b938:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800b93c:	4620      	mov	r0, r4
 800b93e:	f7f7 fc37 	bl	80031b0 <chThdCreateStatic>
 800b942:	4603      	mov	r3, r0
 800b944:	4a1d      	ldr	r2, [pc, #116]	; (800b9bc <rt_test_012_003_execute+0x10c>)
 800b946:	60d3      	str	r3, [r2, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 800b948:	4b1a      	ldr	r3, [pc, #104]	; (800b9b4 <rt_test_012_003_execute+0x104>)
 800b94a:	691c      	ldr	r4, [r3, #16]
 800b94c:	f7ff fe08 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800b950:	4603      	mov	r3, r0
 800b952:	1f5a      	subs	r2, r3, #5
 800b954:	2300      	movs	r3, #0
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	4b19      	ldr	r3, [pc, #100]	; (800b9c0 <rt_test_012_003_execute+0x110>)
 800b95a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800b95e:	4620      	mov	r0, r4
 800b960:	f7f7 fc26 	bl	80031b0 <chThdCreateStatic>
 800b964:	4603      	mov	r3, r0
 800b966:	4a15      	ldr	r2, [pc, #84]	; (800b9bc <rt_test_012_003_execute+0x10c>)
 800b968:	6113      	str	r3, [r2, #16]
  }
  test_end_step(2);

  /* [12.3.3] The number of messages exchanged is counted in a one
     second time window.*/
  test_set_step(3);
 800b96a:	4b11      	ldr	r3, [pc, #68]	; (800b9b0 <rt_test_012_003_execute+0x100>)
 800b96c:	2203      	movs	r2, #3
 800b96e:	601a      	str	r2, [r3, #0]
  {
    n = msg_loop_test(threads[0]);
 800b970:	4b12      	ldr	r3, [pc, #72]	; (800b9bc <rt_test_012_003_execute+0x10c>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4618      	mov	r0, r3
 800b976:	f7ff fe83 	bl	800b680 <msg_loop_test>
 800b97a:	9003      	str	r0, [sp, #12]
    test_wait_threads();
 800b97c:	f7fc f808 	bl	8007990 <test_wait_threads>
  }
  test_end_step(3);

  /* [12.3.4] Score is printed.*/
  test_set_step(4);
 800b980:	4b0b      	ldr	r3, [pc, #44]	; (800b9b0 <rt_test_012_003_execute+0x100>)
 800b982:	2204      	movs	r2, #4
 800b984:	601a      	str	r2, [r3, #0]
  {
    test_print("--- Score : ");
 800b986:	480f      	ldr	r0, [pc, #60]	; (800b9c4 <rt_test_012_003_execute+0x114>)
 800b988:	f7ff fe3a 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n);
 800b98c:	9803      	ldr	r0, [sp, #12]
 800b98e:	f7ff fe27 	bl	800b5e0 <test_printn.lto_priv.1>
    test_print(" msgs/S, ");
 800b992:	480d      	ldr	r0, [pc, #52]	; (800b9c8 <rt_test_012_003_execute+0x118>)
 800b994:	f7ff fe34 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n << 1);
 800b998:	9b03      	ldr	r3, [sp, #12]
 800b99a:	005b      	lsls	r3, r3, #1
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7ff fe1f 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" ctxswc/S");
 800b9a2:	480a      	ldr	r0, [pc, #40]	; (800b9cc <rt_test_012_003_execute+0x11c>)
 800b9a4:	f7ff fe3c 	bl	800b620 <test_println.lto_priv.1>
  }
  test_end_step(4);
}
 800b9a8:	bf00      	nop
 800b9aa:	b004      	add	sp, #16
 800b9ac:	bd10      	pop	{r4, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20000c6c 	.word	0x20000c6c
 800b9b4:	0801d708 	.word	0x0801d708
 800b9b8:	0800b651 	.word	0x0800b651
 800b9bc:	20001508 	.word	0x20001508
 800b9c0:	0800b6d1 	.word	0x0800b6d1
 800b9c4:	0801e684 	.word	0x0801e684
 800b9c8:	0801e694 	.word	0x0801e694
 800b9cc:	0801e6a0 	.word	0x0801e6a0

0800b9d0 <rt_test_012_004_execute>:
 * - [12.4.3] Stopping the target thread.
 * - [12.4.4] Score is printed.
 * .
 */

static void rt_test_012_004_execute(void) {
 800b9d0:	b510      	push	{r4, lr}
 800b9d2:	b086      	sub	sp, #24
  thread_t *tp;
  uint32_t n;

  /* [12.4.1] Starting the target thread at an higher priority level.*/
  test_set_step(1);
 800b9d4:	4b30      	ldr	r3, [pc, #192]	; (800ba98 <rt_test_012_004_execute+0xc8>)
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	601a      	str	r2, [r3, #0]
  {
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800b9da:	4b30      	ldr	r3, [pc, #192]	; (800ba9c <rt_test_012_004_execute+0xcc>)
 800b9dc:	681c      	ldr	r4, [r3, #0]
 800b9de:	f7ff fdbf 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	1c5a      	adds	r2, r3, #1
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	4b2d      	ldr	r3, [pc, #180]	; (800baa0 <rt_test_012_004_execute+0xd0>)
 800b9ec:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f7f7 fbdd 	bl	80031b0 <chThdCreateStatic>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	4a2a      	ldr	r2, [pc, #168]	; (800baa4 <rt_test_012_004_execute+0xd4>)
 800b9fa:	6013      	str	r3, [r2, #0]
 800b9fc:	4b29      	ldr	r3, [pc, #164]	; (800baa4 <rt_test_012_004_execute+0xd4>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	9304      	str	r3, [sp, #16]
  }
  test_end_step(1);

  /* [12.4.2] Waking up the thread as fast as possible in a one second
     time window.*/
  test_set_step(2);
 800ba02:	4b25      	ldr	r3, [pc, #148]	; (800ba98 <rt_test_012_004_execute+0xc8>)
 800ba04:	2202      	movs	r2, #2
 800ba06:	601a      	str	r2, [r3, #0]
  {
    systime_t start, end;

    n = 0;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	9305      	str	r3, [sp, #20]
    start = test_wait_tick();
 800ba0c:	f7fb ffe8 	bl	80079e0 <test_wait_tick>
 800ba10:	9003      	str	r0, [sp, #12]
    end = chTimeAddX(start, TIME_MS2I(1000));
 800ba12:	f242 7110 	movw	r1, #10000	; 0x2710
 800ba16:	9803      	ldr	r0, [sp, #12]
 800ba18:	f7ff fd2a 	bl	800b470 <chTimeAddX.lto_priv.6>
 800ba1c:	9002      	str	r0, [sp, #8]
    do {
      chSysLock();
 800ba1e:	f7ff fd57 	bl	800b4d0 <chSysLock.lto_priv.27>
      chSchWakeupS(tp, MSG_OK);
 800ba22:	2100      	movs	r1, #0
 800ba24:	9804      	ldr	r0, [sp, #16]
 800ba26:	f7f7 f85b 	bl	8002ae0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	9804      	ldr	r0, [sp, #16]
 800ba2e:	f7f7 f857 	bl	8002ae0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800ba32:	2100      	movs	r1, #0
 800ba34:	9804      	ldr	r0, [sp, #16]
 800ba36:	f7f7 f853 	bl	8002ae0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	9804      	ldr	r0, [sp, #16]
 800ba3e:	f7f7 f84f 	bl	8002ae0 <chSchWakeupS>
      chSysUnlock();
 800ba42:	f7ff fd55 	bl	800b4f0 <chSysUnlock.lto_priv.27>
      n += 4;
 800ba46:	9b05      	ldr	r3, [sp, #20]
 800ba48:	3304      	adds	r3, #4
 800ba4a:	9305      	str	r3, [sp, #20]
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 800ba4c:	9902      	ldr	r1, [sp, #8]
 800ba4e:	9803      	ldr	r0, [sp, #12]
 800ba50:	f7ff fd66 	bl	800b520 <chVTIsSystemTimeWithinX.lto_priv.1>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1e1      	bne.n	800ba1e <rt_test_012_004_execute+0x4e>
  }
  test_end_step(2);

  /* [12.4.3] Stopping the target thread.*/
  test_set_step(3);
 800ba5a:	4b0f      	ldr	r3, [pc, #60]	; (800ba98 <rt_test_012_004_execute+0xc8>)
 800ba5c:	2203      	movs	r2, #3
 800ba5e:	601a      	str	r2, [r3, #0]
  {
    chSysLock();
 800ba60:	f7ff fd36 	bl	800b4d0 <chSysLock.lto_priv.27>
    chSchWakeupS(tp, MSG_TIMEOUT);
 800ba64:	f04f 31ff 	mov.w	r1, #4294967295
 800ba68:	9804      	ldr	r0, [sp, #16]
 800ba6a:	f7f7 f839 	bl	8002ae0 <chSchWakeupS>
    chSysUnlock();
 800ba6e:	f7ff fd3f 	bl	800b4f0 <chSysUnlock.lto_priv.27>
    test_wait_threads();
 800ba72:	f7fb ff8d 	bl	8007990 <test_wait_threads>
  }
  test_end_step(3);

  /* [12.4.4] Score is printed.*/
  test_set_step(4);
 800ba76:	4b08      	ldr	r3, [pc, #32]	; (800ba98 <rt_test_012_004_execute+0xc8>)
 800ba78:	2204      	movs	r2, #4
 800ba7a:	601a      	str	r2, [r3, #0]
  {
    test_print("--- Score : ");
 800ba7c:	480a      	ldr	r0, [pc, #40]	; (800baa8 <rt_test_012_004_execute+0xd8>)
 800ba7e:	f7ff fdbf 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n * 2);
 800ba82:	9b05      	ldr	r3, [sp, #20]
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7ff fdaa 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" ctxswc/S");
 800ba8c:	4807      	ldr	r0, [pc, #28]	; (800baac <rt_test_012_004_execute+0xdc>)
 800ba8e:	f7ff fdc7 	bl	800b620 <test_println.lto_priv.1>
  }
  test_end_step(4);
}
 800ba92:	bf00      	nop
 800ba94:	b006      	add	sp, #24
 800ba96:	bd10      	pop	{r4, pc}
 800ba98:	20000c6c 	.word	0x20000c6c
 800ba9c:	0801d708 	.word	0x0801d708
 800baa0:	0800b6f1 	.word	0x0800b6f1
 800baa4:	20001508 	.word	0x20001508
 800baa8:	0801e684 	.word	0x0801e684
 800baac:	0801e6a0 	.word	0x0801e6a0

0800bab0 <rt_test_012_005_execute>:
 *   repeated continuously in a one-second time window.
 * - [12.5.2] Score is printed.
 * .
 */

static void rt_test_012_005_execute(void) {
 800bab0:	b500      	push	{lr}
 800bab2:	b087      	sub	sp, #28
  uint32_t n;
  tprio_t prio = chThdGetPriorityX() - 1;
 800bab4:	f7ff fd54 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800bab8:	4603      	mov	r3, r0
 800baba:	3b01      	subs	r3, #1
 800babc:	9304      	str	r3, [sp, #16]
  systime_t start, end;

  /* [12.5.1] A thread is created at a lower priority level and its
     termination detected using @p chThdWait(). The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 800babe:	4b1b      	ldr	r3, [pc, #108]	; (800bb2c <rt_test_012_005_execute+0x7c>)
 800bac0:	2201      	movs	r2, #1
 800bac2:	601a      	str	r2, [r3, #0]
  {
    n = 0;
 800bac4:	2300      	movs	r3, #0
 800bac6:	9305      	str	r3, [sp, #20]
    start = test_wait_tick();
 800bac8:	f7fb ff8a 	bl	80079e0 <test_wait_tick>
 800bacc:	9003      	str	r0, [sp, #12]
    end = chTimeAddX(start, TIME_MS2I(1000));
 800bace:	f242 7110 	movw	r1, #10000	; 0x2710
 800bad2:	9803      	ldr	r0, [sp, #12]
 800bad4:	f7ff fccc 	bl	800b470 <chTimeAddX.lto_priv.6>
 800bad8:	9002      	str	r0, [sp, #8]
    do {
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800bada:	4b15      	ldr	r3, [pc, #84]	; (800bb30 <rt_test_012_005_execute+0x80>)
 800badc:	6818      	ldr	r0, [r3, #0]
 800bade:	2300      	movs	r3, #0
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	4b14      	ldr	r3, [pc, #80]	; (800bb34 <rt_test_012_005_execute+0x84>)
 800bae4:	9a04      	ldr	r2, [sp, #16]
 800bae6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800baea:	f7f7 fb61 	bl	80031b0 <chThdCreateStatic>
 800baee:	4603      	mov	r3, r0
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7f7 fc2d 	bl	8003350 <chThdWait>
      n++;
 800baf6:	9b05      	ldr	r3, [sp, #20]
 800baf8:	3301      	adds	r3, #1
 800bafa:	9305      	str	r3, [sp, #20]
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 800bafc:	9902      	ldr	r1, [sp, #8]
 800bafe:	9803      	ldr	r0, [sp, #12]
 800bb00:	f7ff fd0e 	bl	800b520 <chVTIsSystemTimeWithinX.lto_priv.1>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1e7      	bne.n	800bada <rt_test_012_005_execute+0x2a>
  }
  test_end_step(1);

  /* [12.5.2] Score is printed.*/
  test_set_step(2);
 800bb0a:	4b08      	ldr	r3, [pc, #32]	; (800bb2c <rt_test_012_005_execute+0x7c>)
 800bb0c:	2202      	movs	r2, #2
 800bb0e:	601a      	str	r2, [r3, #0]
  {
    test_print("--- Score : ");
 800bb10:	4809      	ldr	r0, [pc, #36]	; (800bb38 <rt_test_012_005_execute+0x88>)
 800bb12:	f7ff fd75 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n);
 800bb16:	9805      	ldr	r0, [sp, #20]
 800bb18:	f7ff fd62 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" threads/S");
 800bb1c:	4807      	ldr	r0, [pc, #28]	; (800bb3c <rt_test_012_005_execute+0x8c>)
 800bb1e:	f7ff fd7f 	bl	800b620 <test_println.lto_priv.1>
  }
  test_end_step(2);
}
 800bb22:	bf00      	nop
 800bb24:	b007      	add	sp, #28
 800bb26:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb2a:	bf00      	nop
 800bb2c:	20000c6c 	.word	0x20000c6c
 800bb30:	0801d708 	.word	0x0801d708
 800bb34:	0800b6d1 	.word	0x0800b6d1
 800bb38:	0801e684 	.word	0x0801e684
 800bb3c:	0801e6ec 	.word	0x0801e6ec

0800bb40 <rt_test_012_006_execute>:
 *   one-second time window.
 * - [12.6.2] Score is printed.
 * .
 */

static void rt_test_012_006_execute(void) {
 800bb40:	b500      	push	{lr}
 800bb42:	b087      	sub	sp, #28
  uint32_t n;
  tprio_t prio = chThdGetPriorityX() + 1;
 800bb44:	f7ff fd0c 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	9304      	str	r3, [sp, #16]
  systime_t start, end;

  /* [12.6.1] A thread is created at an higher priority level and let
     terminate immediately. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
 800bb4e:	4b1b      	ldr	r3, [pc, #108]	; (800bbbc <rt_test_012_006_execute+0x7c>)
 800bb50:	2201      	movs	r2, #1
 800bb52:	601a      	str	r2, [r3, #0]
  {
    n = 0;
 800bb54:	2300      	movs	r3, #0
 800bb56:	9305      	str	r3, [sp, #20]
    start = test_wait_tick();
 800bb58:	f7fb ff42 	bl	80079e0 <test_wait_tick>
 800bb5c:	9003      	str	r0, [sp, #12]
    end = chTimeAddX(start, TIME_MS2I(1000));
 800bb5e:	f242 7110 	movw	r1, #10000	; 0x2710
 800bb62:	9803      	ldr	r0, [sp, #12]
 800bb64:	f7ff fc84 	bl	800b470 <chTimeAddX.lto_priv.6>
 800bb68:	9002      	str	r0, [sp, #8]
    do {
#if CH_CFG_USE_REGISTRY
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800bb6a:	4b15      	ldr	r3, [pc, #84]	; (800bbc0 <rt_test_012_006_execute+0x80>)
 800bb6c:	6818      	ldr	r0, [r3, #0]
 800bb6e:	2300      	movs	r3, #0
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	4b14      	ldr	r3, [pc, #80]	; (800bbc4 <rt_test_012_006_execute+0x84>)
 800bb74:	9a04      	ldr	r2, [sp, #16]
 800bb76:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800bb7a:	f7f7 fb19 	bl	80031b0 <chThdCreateStatic>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7f7 fb55 	bl	8003230 <chThdRelease>
#else
      chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL);
#endif
      n++;
 800bb86:	9b05      	ldr	r3, [sp, #20]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	9305      	str	r3, [sp, #20]
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 800bb8c:	9902      	ldr	r1, [sp, #8]
 800bb8e:	9803      	ldr	r0, [sp, #12]
 800bb90:	f7ff fcc6 	bl	800b520 <chVTIsSystemTimeWithinX.lto_priv.1>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1e7      	bne.n	800bb6a <rt_test_012_006_execute+0x2a>
  }
  test_end_step(1);

  /* [12.6.2] Score is printed.*/
  test_set_step(2);
 800bb9a:	4b08      	ldr	r3, [pc, #32]	; (800bbbc <rt_test_012_006_execute+0x7c>)
 800bb9c:	2202      	movs	r2, #2
 800bb9e:	601a      	str	r2, [r3, #0]
  {
    test_print("--- Score : ");
 800bba0:	4809      	ldr	r0, [pc, #36]	; (800bbc8 <rt_test_012_006_execute+0x88>)
 800bba2:	f7ff fd2d 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n);
 800bba6:	9805      	ldr	r0, [sp, #20]
 800bba8:	f7ff fd1a 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" threads/S");
 800bbac:	4807      	ldr	r0, [pc, #28]	; (800bbcc <rt_test_012_006_execute+0x8c>)
 800bbae:	f7ff fd37 	bl	800b620 <test_println.lto_priv.1>
  }
  test_end_step(2);
}
 800bbb2:	bf00      	nop
 800bbb4:	b007      	add	sp, #28
 800bbb6:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbba:	bf00      	nop
 800bbbc:	20000c6c 	.word	0x20000c6c
 800bbc0:	0801d708 	.word	0x0801d708
 800bbc4:	0800b6d1 	.word	0x0800b6d1
 800bbc8:	0801e684 	.word	0x0801e684
 800bbcc:	0801e6ec 	.word	0x0801e6ec

0800bbd0 <rt_test_012_007_setup>:
 * - [12.7.3] The five threads are terminated.
 * - [12.7.4] The score is printed.
 * .
 */

static void rt_test_012_007_setup(void) {
 800bbd0:	b508      	push	{r3, lr}
  chSemObjectInit(&sem1, 0);
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	4802      	ldr	r0, [pc, #8]	; (800bbe0 <rt_test_012_007_setup+0x10>)
 800bbd6:	f7f7 fe33 	bl	8003840 <chSemObjectInit>
}
 800bbda:	bf00      	nop
 800bbdc:	bd08      	pop	{r3, pc}
 800bbde:	bf00      	nop
 800bbe0:	20001558 	.word	0x20001558
	...

0800bbf0 <rt_test_012_007_execute>:

static void rt_test_012_007_execute(void) {
 800bbf0:	b510      	push	{r4, lr}
 800bbf2:	b086      	sub	sp, #24
  uint32_t n;

  /* [12.7.1] Five threads are created at higher priority that
     immediately enqueue on a semaphore.*/
  test_set_step(1);
 800bbf4:	4b4c      	ldr	r3, [pc, #304]	; (800bd28 <rt_test_012_007_execute+0x138>)
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	601a      	str	r2, [r3, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800bbfa:	4b4c      	ldr	r3, [pc, #304]	; (800bd2c <rt_test_012_007_execute+0x13c>)
 800bbfc:	681c      	ldr	r4, [r3, #0]
 800bbfe:	f7ff fcaf 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800bc02:	4603      	mov	r3, r0
 800bc04:	1d5a      	adds	r2, r3, #5
 800bc06:	2300      	movs	r3, #0
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	4b49      	ldr	r3, [pc, #292]	; (800bd30 <rt_test_012_007_execute+0x140>)
 800bc0c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800bc10:	4620      	mov	r0, r4
 800bc12:	f7f7 facd 	bl	80031b0 <chThdCreateStatic>
 800bc16:	4603      	mov	r3, r0
 800bc18:	4a46      	ldr	r2, [pc, #280]	; (800bd34 <rt_test_012_007_execute+0x144>)
 800bc1a:	6013      	str	r3, [r2, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800bc1c:	4b43      	ldr	r3, [pc, #268]	; (800bd2c <rt_test_012_007_execute+0x13c>)
 800bc1e:	685c      	ldr	r4, [r3, #4]
 800bc20:	f7ff fc9e 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800bc24:	4603      	mov	r3, r0
 800bc26:	1d1a      	adds	r2, r3, #4
 800bc28:	2300      	movs	r3, #0
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	4b40      	ldr	r3, [pc, #256]	; (800bd30 <rt_test_012_007_execute+0x140>)
 800bc2e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800bc32:	4620      	mov	r0, r4
 800bc34:	f7f7 fabc 	bl	80031b0 <chThdCreateStatic>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	4a3e      	ldr	r2, [pc, #248]	; (800bd34 <rt_test_012_007_execute+0x144>)
 800bc3c:	6053      	str	r3, [r2, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 800bc3e:	4b3b      	ldr	r3, [pc, #236]	; (800bd2c <rt_test_012_007_execute+0x13c>)
 800bc40:	689c      	ldr	r4, [r3, #8]
 800bc42:	f7ff fc8d 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800bc46:	4603      	mov	r3, r0
 800bc48:	1cda      	adds	r2, r3, #3
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	4b38      	ldr	r3, [pc, #224]	; (800bd30 <rt_test_012_007_execute+0x140>)
 800bc50:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800bc54:	4620      	mov	r0, r4
 800bc56:	f7f7 faab 	bl	80031b0 <chThdCreateStatic>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	4a35      	ldr	r2, [pc, #212]	; (800bd34 <rt_test_012_007_execute+0x144>)
 800bc5e:	6093      	str	r3, [r2, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800bc60:	4b32      	ldr	r3, [pc, #200]	; (800bd2c <rt_test_012_007_execute+0x13c>)
 800bc62:	68dc      	ldr	r4, [r3, #12]
 800bc64:	f7ff fc7c 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	1c9a      	adds	r2, r3, #2
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	4b2f      	ldr	r3, [pc, #188]	; (800bd30 <rt_test_012_007_execute+0x140>)
 800bc72:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800bc76:	4620      	mov	r0, r4
 800bc78:	f7f7 fa9a 	bl	80031b0 <chThdCreateStatic>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	4a2d      	ldr	r2, [pc, #180]	; (800bd34 <rt_test_012_007_execute+0x144>)
 800bc80:	60d3      	str	r3, [r2, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800bc82:	4b2a      	ldr	r3, [pc, #168]	; (800bd2c <rt_test_012_007_execute+0x13c>)
 800bc84:	691c      	ldr	r4, [r3, #16]
 800bc86:	f7ff fc6b 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	1c5a      	adds	r2, r3, #1
 800bc8e:	2300      	movs	r3, #0
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	4b27      	ldr	r3, [pc, #156]	; (800bd30 <rt_test_012_007_execute+0x140>)
 800bc94:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f7f7 fa89 	bl	80031b0 <chThdCreateStatic>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	4a24      	ldr	r2, [pc, #144]	; (800bd34 <rt_test_012_007_execute+0x144>)
 800bca2:	6113      	str	r3, [r2, #16]
  }
  test_end_step(1);

  /* [12.7.2] The semaphore is reset waking up the five threads. The
     operation is repeated continuously in a one-second time window.*/
  test_set_step(2);
 800bca4:	4b20      	ldr	r3, [pc, #128]	; (800bd28 <rt_test_012_007_execute+0x138>)
 800bca6:	2202      	movs	r2, #2
 800bca8:	601a      	str	r2, [r3, #0]
  {
    systime_t start, end;

    n = 0;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	9305      	str	r3, [sp, #20]
    start = test_wait_tick();
 800bcae:	f7fb fe97 	bl	80079e0 <test_wait_tick>
 800bcb2:	9004      	str	r0, [sp, #16]
    end = chTimeAddX(start, TIME_MS2I(1000));
 800bcb4:	f242 7110 	movw	r1, #10000	; 0x2710
 800bcb8:	9804      	ldr	r0, [sp, #16]
 800bcba:	f7ff fbd9 	bl	800b470 <chTimeAddX.lto_priv.6>
 800bcbe:	9003      	str	r0, [sp, #12]
    do {
      chSemReset(&sem1, 0);
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	481d      	ldr	r0, [pc, #116]	; (800bd38 <rt_test_012_007_execute+0x148>)
 800bcc4:	f7ff fc64 	bl	800b590 <chSemReset.lto_priv.1>
      n++;
 800bcc8:	9b05      	ldr	r3, [sp, #20]
 800bcca:	3301      	adds	r3, #1
 800bccc:	9305      	str	r3, [sp, #20]
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 800bcce:	9903      	ldr	r1, [sp, #12]
 800bcd0:	9804      	ldr	r0, [sp, #16]
 800bcd2:	f7ff fc25 	bl	800b520 <chVTIsSystemTimeWithinX.lto_priv.1>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1f1      	bne.n	800bcc0 <rt_test_012_007_execute+0xd0>
  }
  test_end_step(2);

  /* [12.7.3] The five threads are terminated.*/
  test_set_step(3);
 800bcdc:	4b12      	ldr	r3, [pc, #72]	; (800bd28 <rt_test_012_007_execute+0x138>)
 800bcde:	2203      	movs	r2, #3
 800bce0:	601a      	str	r2, [r3, #0]
  {
    test_terminate_threads();
 800bce2:	f7fb fe35 	bl	8007950 <test_terminate_threads>
    chSemReset(&sem1, 0);
 800bce6:	2100      	movs	r1, #0
 800bce8:	4813      	ldr	r0, [pc, #76]	; (800bd38 <rt_test_012_007_execute+0x148>)
 800bcea:	f7ff fc51 	bl	800b590 <chSemReset.lto_priv.1>
    test_wait_threads();
 800bcee:	f7fb fe4f 	bl	8007990 <test_wait_threads>
  }
  test_end_step(3);

  /* [12.7.4] The score is printed.*/
  test_set_step(4);
 800bcf2:	4b0d      	ldr	r3, [pc, #52]	; (800bd28 <rt_test_012_007_execute+0x138>)
 800bcf4:	2204      	movs	r2, #4
 800bcf6:	601a      	str	r2, [r3, #0]
  {
    test_print("--- Score : ");
 800bcf8:	4810      	ldr	r0, [pc, #64]	; (800bd3c <rt_test_012_007_execute+0x14c>)
 800bcfa:	f7ff fc81 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n);
 800bcfe:	9805      	ldr	r0, [sp, #20]
 800bd00:	f7ff fc6e 	bl	800b5e0 <test_printn.lto_priv.1>
    test_print(" reschedules/S, ");
 800bd04:	480e      	ldr	r0, [pc, #56]	; (800bd40 <rt_test_012_007_execute+0x150>)
 800bd06:	f7ff fc7b 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n * 6);
 800bd0a:	9a05      	ldr	r2, [sp, #20]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	005b      	lsls	r3, r3, #1
 800bd10:	4413      	add	r3, r2
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7ff fc63 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" ctxswc/S");
 800bd1a:	480a      	ldr	r0, [pc, #40]	; (800bd44 <rt_test_012_007_execute+0x154>)
 800bd1c:	f7ff fc80 	bl	800b620 <test_println.lto_priv.1>
  }
  test_end_step(4);
}
 800bd20:	bf00      	nop
 800bd22:	b006      	add	sp, #24
 800bd24:	bd10      	pop	{r4, pc}
 800bd26:	bf00      	nop
 800bd28:	20000c6c 	.word	0x20000c6c
 800bd2c:	0801d708 	.word	0x0801d708
 800bd30:	0800b721 	.word	0x0800b721
 800bd34:	20001508 	.word	0x20001508
 800bd38:	20001558 	.word	0x20001558
 800bd3c:	0801e684 	.word	0x0801e684
 800bd40:	0801e718 	.word	0x0801e718
 800bd44:	0801e6a0 	.word	0x0801e6a0
	...

0800bd50 <rt_test_012_008_execute>:
 * - [12.8.2] Waiting one second then terminating the 5 threads.
 * - [12.8.3] The score is printed.
 * .
 */

static void rt_test_012_008_execute(void) {
 800bd50:	b510      	push	{r4, lr}
 800bd52:	b084      	sub	sp, #16
  uint32_t n;

  /* [12.8.1] The five threads are created at lower priority. The
     threds have equal priority and start calling @p chThdYield()
     continuously.*/
  test_set_step(1);
 800bd54:	4b3b      	ldr	r3, [pc, #236]	; (800be44 <rt_test_012_008_execute+0xf4>)
 800bd56:	2201      	movs	r2, #1
 800bd58:	601a      	str	r2, [r3, #0]
  {
    n = 0;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	9303      	str	r3, [sp, #12]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800bd5e:	f7fb fe3f 	bl	80079e0 <test_wait_tick>
 800bd62:	4b39      	ldr	r3, [pc, #228]	; (800be48 <rt_test_012_008_execute+0xf8>)
 800bd64:	681c      	ldr	r4, [r3, #0]
 800bd66:	f7ff fbfb 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	1e5a      	subs	r2, r3, #1
 800bd6e:	ab03      	add	r3, sp, #12
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	4b36      	ldr	r3, [pc, #216]	; (800be4c <rt_test_012_008_execute+0xfc>)
 800bd74:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800bd78:	4620      	mov	r0, r4
 800bd7a:	f7f7 fa19 	bl	80031b0 <chThdCreateStatic>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	4a33      	ldr	r2, [pc, #204]	; (800be50 <rt_test_012_008_execute+0x100>)
 800bd82:	6013      	str	r3, [r2, #0]

    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800bd84:	4b30      	ldr	r3, [pc, #192]	; (800be48 <rt_test_012_008_execute+0xf8>)
 800bd86:	685c      	ldr	r4, [r3, #4]
 800bd88:	f7ff fbea 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	1e5a      	subs	r2, r3, #1
 800bd90:	ab03      	add	r3, sp, #12
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	4b2d      	ldr	r3, [pc, #180]	; (800be4c <rt_test_012_008_execute+0xfc>)
 800bd96:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f7f7 fa08 	bl	80031b0 <chThdCreateStatic>
 800bda0:	4603      	mov	r3, r0
 800bda2:	4a2b      	ldr	r2, [pc, #172]	; (800be50 <rt_test_012_008_execute+0x100>)
 800bda4:	6053      	str	r3, [r2, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800bda6:	4b28      	ldr	r3, [pc, #160]	; (800be48 <rt_test_012_008_execute+0xf8>)
 800bda8:	689c      	ldr	r4, [r3, #8]
 800bdaa:	f7ff fbd9 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	1e5a      	subs	r2, r3, #1
 800bdb2:	ab03      	add	r3, sp, #12
 800bdb4:	9300      	str	r3, [sp, #0]
 800bdb6:	4b25      	ldr	r3, [pc, #148]	; (800be4c <rt_test_012_008_execute+0xfc>)
 800bdb8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f7f7 f9f7 	bl	80031b0 <chThdCreateStatic>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	4a22      	ldr	r2, [pc, #136]	; (800be50 <rt_test_012_008_execute+0x100>)
 800bdc6:	6093      	str	r3, [r2, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800bdc8:	4b1f      	ldr	r3, [pc, #124]	; (800be48 <rt_test_012_008_execute+0xf8>)
 800bdca:	68dc      	ldr	r4, [r3, #12]
 800bdcc:	f7ff fbc8 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	1e5a      	subs	r2, r3, #1
 800bdd4:	ab03      	add	r3, sp, #12
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	4b1c      	ldr	r3, [pc, #112]	; (800be4c <rt_test_012_008_execute+0xfc>)
 800bdda:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800bdde:	4620      	mov	r0, r4
 800bde0:	f7f7 f9e6 	bl	80031b0 <chThdCreateStatic>
 800bde4:	4603      	mov	r3, r0
 800bde6:	4a1a      	ldr	r2, [pc, #104]	; (800be50 <rt_test_012_008_execute+0x100>)
 800bde8:	60d3      	str	r3, [r2, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800bdea:	4b17      	ldr	r3, [pc, #92]	; (800be48 <rt_test_012_008_execute+0xf8>)
 800bdec:	691c      	ldr	r4, [r3, #16]
 800bdee:	f7ff fbb7 	bl	800b560 <chThdGetPriorityX.lto_priv.7>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	1e5a      	subs	r2, r3, #1
 800bdf6:	ab03      	add	r3, sp, #12
 800bdf8:	9300      	str	r3, [sp, #0]
 800bdfa:	4b14      	ldr	r3, [pc, #80]	; (800be4c <rt_test_012_008_execute+0xfc>)
 800bdfc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800be00:	4620      	mov	r0, r4
 800be02:	f7f7 f9d5 	bl	80031b0 <chThdCreateStatic>
 800be06:	4603      	mov	r3, r0
 800be08:	4a11      	ldr	r2, [pc, #68]	; (800be50 <rt_test_012_008_execute+0x100>)
 800be0a:	6113      	str	r3, [r2, #16]
  }
  test_end_step(1);

  /* [12.8.2] Waiting one second then terminating the 5 threads.*/
  test_set_step(2);
 800be0c:	4b0d      	ldr	r3, [pc, #52]	; (800be44 <rt_test_012_008_execute+0xf4>)
 800be0e:	2202      	movs	r2, #2
 800be10:	601a      	str	r2, [r3, #0]
  {
    chThdSleepSeconds(1);
 800be12:	f242 7010 	movw	r0, #10000	; 0x2710
 800be16:	f7f7 fb0b 	bl	8003430 <chThdSleep>
    test_terminate_threads();
 800be1a:	f7fb fd99 	bl	8007950 <test_terminate_threads>
    test_wait_threads();
 800be1e:	f7fb fdb7 	bl	8007990 <test_wait_threads>
  }
  test_end_step(2);

  /* [12.8.3] The score is printed.*/
  test_set_step(3);
 800be22:	4b08      	ldr	r3, [pc, #32]	; (800be44 <rt_test_012_008_execute+0xf4>)
 800be24:	2203      	movs	r2, #3
 800be26:	601a      	str	r2, [r3, #0]
  {
    test_print("--- Score : ");
 800be28:	480a      	ldr	r0, [pc, #40]	; (800be54 <rt_test_012_008_execute+0x104>)
 800be2a:	f7ff fbe9 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n);
 800be2e:	9b03      	ldr	r3, [sp, #12]
 800be30:	4618      	mov	r0, r3
 800be32:	f7ff fbd5 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" ctxswc/S");
 800be36:	4808      	ldr	r0, [pc, #32]	; (800be58 <rt_test_012_008_execute+0x108>)
 800be38:	f7ff fbf2 	bl	800b620 <test_println.lto_priv.1>
  }
  test_end_step(3);
}
 800be3c:	bf00      	nop
 800be3e:	b004      	add	sp, #16
 800be40:	bd10      	pop	{r4, pc}
 800be42:	bf00      	nop
 800be44:	20000c6c 	.word	0x20000c6c
 800be48:	0801d708 	.word	0x0801d708
 800be4c:	0800b751 	.word	0x0800b751
 800be50:	20001508 	.word	0x20001508
 800be54:	0801e684 	.word	0x0801e684
 800be58:	0801e6a0 	.word	0x0801e6a0
 800be5c:	00000000 	.word	0x00000000

0800be60 <rt_test_012_009_execute>:
 *   one-second time window.
 * - [12.9.2] The score is printed.
 * .
 */

static void rt_test_012_009_execute(void) {
 800be60:	b500      	push	{lr}
 800be62:	b085      	sub	sp, #20
  uint32_t n;

  /* [12.9.1] Two timers are set then reset without waiting for their
     counter to elapse. The operation is repeated continuously in a
     one-second time window.*/
  test_set_step(1);
 800be64:	4b20      	ldr	r3, [pc, #128]	; (800bee8 <rt_test_012_009_execute+0x88>)
 800be66:	2201      	movs	r2, #1
 800be68:	601a      	str	r2, [r3, #0]
  {
    systime_t start, end;

    n = 0;
 800be6a:	2300      	movs	r3, #0
 800be6c:	9303      	str	r3, [sp, #12]
    start = test_wait_tick();
 800be6e:	f7fb fdb7 	bl	80079e0 <test_wait_tick>
 800be72:	9002      	str	r0, [sp, #8]
    end = chTimeAddX(start, TIME_MS2I(1000));
 800be74:	f242 7110 	movw	r1, #10000	; 0x2710
 800be78:	9802      	ldr	r0, [sp, #8]
 800be7a:	f7ff faf9 	bl	800b470 <chTimeAddX.lto_priv.6>
 800be7e:	9001      	str	r0, [sp, #4]
    do {
      chSysLock();
 800be80:	f7ff fb26 	bl	800b4d0 <chSysLock.lto_priv.27>
      chVTDoSetI(&vt1, 1, tmo, NULL);
 800be84:	2300      	movs	r3, #0
 800be86:	4a19      	ldr	r2, [pc, #100]	; (800beec <rt_test_012_009_execute+0x8c>)
 800be88:	2101      	movs	r1, #1
 800be8a:	4819      	ldr	r0, [pc, #100]	; (800bef0 <rt_test_012_009_execute+0x90>)
 800be8c:	f7f6 faa8 	bl	80023e0 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 800be90:	2300      	movs	r3, #0
 800be92:	4a16      	ldr	r2, [pc, #88]	; (800beec <rt_test_012_009_execute+0x8c>)
 800be94:	f242 7110 	movw	r1, #10000	; 0x2710
 800be98:	4816      	ldr	r0, [pc, #88]	; (800bef4 <rt_test_012_009_execute+0x94>)
 800be9a:	f7f6 faa1 	bl	80023e0 <chVTDoSetI>
      chVTDoResetI(&vt1);
 800be9e:	4814      	ldr	r0, [pc, #80]	; (800bef0 <rt_test_012_009_execute+0x90>)
 800bea0:	f7f6 fabe 	bl	8002420 <chVTDoResetI>
      chVTDoResetI(&vt2);
 800bea4:	4813      	ldr	r0, [pc, #76]	; (800bef4 <rt_test_012_009_execute+0x94>)
 800bea6:	f7f6 fabb 	bl	8002420 <chVTDoResetI>
      chSysUnlock();
 800beaa:	f7ff fb21 	bl	800b4f0 <chSysUnlock.lto_priv.27>
      n++;
 800beae:	9b03      	ldr	r3, [sp, #12]
 800beb0:	3301      	adds	r3, #1
 800beb2:	9303      	str	r3, [sp, #12]
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 800beb4:	9901      	ldr	r1, [sp, #4]
 800beb6:	9802      	ldr	r0, [sp, #8]
 800beb8:	f7ff fb32 	bl	800b520 <chVTIsSystemTimeWithinX.lto_priv.1>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1de      	bne.n	800be80 <rt_test_012_009_execute+0x20>
  }
  test_end_step(1);

  /* [12.9.2] The score is printed.*/
  test_set_step(2);
 800bec2:	4b09      	ldr	r3, [pc, #36]	; (800bee8 <rt_test_012_009_execute+0x88>)
 800bec4:	2202      	movs	r2, #2
 800bec6:	601a      	str	r2, [r3, #0]
  {
    test_print("--- Score : ");
 800bec8:	480b      	ldr	r0, [pc, #44]	; (800bef8 <rt_test_012_009_execute+0x98>)
 800beca:	f7ff fb99 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n * 2);
 800bece:	9b03      	ldr	r3, [sp, #12]
 800bed0:	005b      	lsls	r3, r3, #1
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7ff fb84 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" timers/S");
 800bed8:	4808      	ldr	r0, [pc, #32]	; (800befc <rt_test_012_009_execute+0x9c>)
 800beda:	f7ff fba1 	bl	800b620 <test_println.lto_priv.1>
  }
  test_end_step(2);
}
 800bede:	bf00      	nop
 800bee0:	b005      	add	sp, #20
 800bee2:	f85d fb04 	ldr.w	pc, [sp], #4
 800bee6:	bf00      	nop
 800bee8:	20000c6c 	.word	0x20000c6c
 800beec:	0800b641 	.word	0x0800b641
 800bef0:	20001574 	.word	0x20001574
 800bef4:	2000158c 	.word	0x2000158c
 800bef8:	0801e684 	.word	0x0801e684
 800befc:	0801e74c 	.word	0x0801e74c

0800bf00 <rt_test_012_010_setup>:
 *   repeated continuously in a one-second time window.
 * - [12.10.2] The score is printed.
 * .
 */

static void rt_test_012_010_setup(void) {
 800bf00:	b508      	push	{r3, lr}
  chSemObjectInit(&sem1, 1);
 800bf02:	2101      	movs	r1, #1
 800bf04:	4802      	ldr	r0, [pc, #8]	; (800bf10 <rt_test_012_010_setup+0x10>)
 800bf06:	f7f7 fc9b 	bl	8003840 <chSemObjectInit>
}
 800bf0a:	bf00      	nop
 800bf0c:	bd08      	pop	{r3, pc}
 800bf0e:	bf00      	nop
 800bf10:	20001558 	.word	0x20001558
	...

0800bf20 <rt_test_012_010_execute>:

static void rt_test_012_010_execute(void) {
 800bf20:	b500      	push	{lr}
 800bf22:	b085      	sub	sp, #20
  uint32_t n;

  /* [12.10.1] A semaphore is teken and released. The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 800bf24:	4b20      	ldr	r3, [pc, #128]	; (800bfa8 <rt_test_012_010_execute+0x88>)
 800bf26:	2201      	movs	r2, #1
 800bf28:	601a      	str	r2, [r3, #0]
  {
    systime_t start, end;

    n = 0;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	9303      	str	r3, [sp, #12]
    start = test_wait_tick();
 800bf2e:	f7fb fd57 	bl	80079e0 <test_wait_tick>
 800bf32:	9002      	str	r0, [sp, #8]
    end = chTimeAddX(start, TIME_MS2I(1000));
 800bf34:	f242 7110 	movw	r1, #10000	; 0x2710
 800bf38:	9802      	ldr	r0, [sp, #8]
 800bf3a:	f7ff fa99 	bl	800b470 <chTimeAddX.lto_priv.6>
 800bf3e:	9001      	str	r0, [sp, #4]
    do {
      chSemWait(&sem1);
 800bf40:	481a      	ldr	r0, [pc, #104]	; (800bfac <rt_test_012_010_execute+0x8c>)
 800bf42:	f7f7 fcc5 	bl	80038d0 <chSemWait>
      chSemSignal(&sem1);
 800bf46:	4819      	ldr	r0, [pc, #100]	; (800bfac <rt_test_012_010_execute+0x8c>)
 800bf48:	f7f7 fd4a 	bl	80039e0 <chSemSignal>
      chSemWait(&sem1);
 800bf4c:	4817      	ldr	r0, [pc, #92]	; (800bfac <rt_test_012_010_execute+0x8c>)
 800bf4e:	f7f7 fcbf 	bl	80038d0 <chSemWait>
      chSemSignal(&sem1);
 800bf52:	4816      	ldr	r0, [pc, #88]	; (800bfac <rt_test_012_010_execute+0x8c>)
 800bf54:	f7f7 fd44 	bl	80039e0 <chSemSignal>
      chSemWait(&sem1);
 800bf58:	4814      	ldr	r0, [pc, #80]	; (800bfac <rt_test_012_010_execute+0x8c>)
 800bf5a:	f7f7 fcb9 	bl	80038d0 <chSemWait>
      chSemSignal(&sem1);
 800bf5e:	4813      	ldr	r0, [pc, #76]	; (800bfac <rt_test_012_010_execute+0x8c>)
 800bf60:	f7f7 fd3e 	bl	80039e0 <chSemSignal>
      chSemWait(&sem1);
 800bf64:	4811      	ldr	r0, [pc, #68]	; (800bfac <rt_test_012_010_execute+0x8c>)
 800bf66:	f7f7 fcb3 	bl	80038d0 <chSemWait>
      chSemSignal(&sem1);
 800bf6a:	4810      	ldr	r0, [pc, #64]	; (800bfac <rt_test_012_010_execute+0x8c>)
 800bf6c:	f7f7 fd38 	bl	80039e0 <chSemSignal>
      n++;
 800bf70:	9b03      	ldr	r3, [sp, #12]
 800bf72:	3301      	adds	r3, #1
 800bf74:	9303      	str	r3, [sp, #12]
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 800bf76:	9901      	ldr	r1, [sp, #4]
 800bf78:	9802      	ldr	r0, [sp, #8]
 800bf7a:	f7ff fad1 	bl	800b520 <chVTIsSystemTimeWithinX.lto_priv.1>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1dd      	bne.n	800bf40 <rt_test_012_010_execute+0x20>
  }
  test_end_step(1);

  /* [12.10.2] The score is printed.*/
  test_set_step(2);
 800bf84:	4b08      	ldr	r3, [pc, #32]	; (800bfa8 <rt_test_012_010_execute+0x88>)
 800bf86:	2202      	movs	r2, #2
 800bf88:	601a      	str	r2, [r3, #0]
  {
    test_print("--- Score : ");
 800bf8a:	4809      	ldr	r0, [pc, #36]	; (800bfb0 <rt_test_012_010_execute+0x90>)
 800bf8c:	f7ff fb38 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n * 4);
 800bf90:	9b03      	ldr	r3, [sp, #12]
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7ff fb23 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" wait+signal/S");
 800bf9a:	4806      	ldr	r0, [pc, #24]	; (800bfb4 <rt_test_012_010_execute+0x94>)
 800bf9c:	f7ff fb40 	bl	800b620 <test_println.lto_priv.1>
  }
  test_end_step(2);
}
 800bfa0:	bf00      	nop
 800bfa2:	b005      	add	sp, #20
 800bfa4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bfa8:	20000c6c 	.word	0x20000c6c
 800bfac:	20001558 	.word	0x20001558
 800bfb0:	0801e684 	.word	0x0801e684
 800bfb4:	0801e768 	.word	0x0801e768
	...

0800bfc0 <rt_test_012_011_setup>:
 *   repeated continuously in a one-second time window.
 * - [12.11.2] The score is printed.
 * .
 */

static void rt_test_012_011_setup(void) {
 800bfc0:	b508      	push	{r3, lr}
  chMtxObjectInit(&mtx1);
 800bfc2:	4802      	ldr	r0, [pc, #8]	; (800bfcc <rt_test_012_011_setup+0xc>)
 800bfc4:	f7f7 fe64 	bl	8003c90 <chMtxObjectInit>
}
 800bfc8:	bf00      	nop
 800bfca:	bd08      	pop	{r3, pc}
 800bfcc:	20001564 	.word	0x20001564

0800bfd0 <rt_test_012_011_execute>:

static void rt_test_012_011_execute(void) {
 800bfd0:	b500      	push	{lr}
 800bfd2:	b085      	sub	sp, #20
  uint32_t n;

  /* [12.11.1] A mutex is locked and unlocked. The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 800bfd4:	4b20      	ldr	r3, [pc, #128]	; (800c058 <rt_test_012_011_execute+0x88>)
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	601a      	str	r2, [r3, #0]
  {
    systime_t start, end;

    n = 0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	9303      	str	r3, [sp, #12]
    start = test_wait_tick();
 800bfde:	f7fb fcff 	bl	80079e0 <test_wait_tick>
 800bfe2:	9002      	str	r0, [sp, #8]
    end = chTimeAddX(start, TIME_MS2I(1000));
 800bfe4:	f242 7110 	movw	r1, #10000	; 0x2710
 800bfe8:	9802      	ldr	r0, [sp, #8]
 800bfea:	f7ff fa41 	bl	800b470 <chTimeAddX.lto_priv.6>
 800bfee:	9001      	str	r0, [sp, #4]
    do {
      chMtxLock(&mtx1);
 800bff0:	481a      	ldr	r0, [pc, #104]	; (800c05c <rt_test_012_011_execute+0x8c>)
 800bff2:	f7f7 fe5d 	bl	8003cb0 <chMtxLock>
      chMtxUnlock(&mtx1);
 800bff6:	4819      	ldr	r0, [pc, #100]	; (800c05c <rt_test_012_011_execute+0x8c>)
 800bff8:	f7f7 ff0a 	bl	8003e10 <chMtxUnlock>
      chMtxLock(&mtx1);
 800bffc:	4817      	ldr	r0, [pc, #92]	; (800c05c <rt_test_012_011_execute+0x8c>)
 800bffe:	f7f7 fe57 	bl	8003cb0 <chMtxLock>
      chMtxUnlock(&mtx1);
 800c002:	4816      	ldr	r0, [pc, #88]	; (800c05c <rt_test_012_011_execute+0x8c>)
 800c004:	f7f7 ff04 	bl	8003e10 <chMtxUnlock>
      chMtxLock(&mtx1);
 800c008:	4814      	ldr	r0, [pc, #80]	; (800c05c <rt_test_012_011_execute+0x8c>)
 800c00a:	f7f7 fe51 	bl	8003cb0 <chMtxLock>
      chMtxUnlock(&mtx1);
 800c00e:	4813      	ldr	r0, [pc, #76]	; (800c05c <rt_test_012_011_execute+0x8c>)
 800c010:	f7f7 fefe 	bl	8003e10 <chMtxUnlock>
      chMtxLock(&mtx1);
 800c014:	4811      	ldr	r0, [pc, #68]	; (800c05c <rt_test_012_011_execute+0x8c>)
 800c016:	f7f7 fe4b 	bl	8003cb0 <chMtxLock>
      chMtxUnlock(&mtx1);
 800c01a:	4810      	ldr	r0, [pc, #64]	; (800c05c <rt_test_012_011_execute+0x8c>)
 800c01c:	f7f7 fef8 	bl	8003e10 <chMtxUnlock>
      n++;
 800c020:	9b03      	ldr	r3, [sp, #12]
 800c022:	3301      	adds	r3, #1
 800c024:	9303      	str	r3, [sp, #12]
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 800c026:	9901      	ldr	r1, [sp, #4]
 800c028:	9802      	ldr	r0, [sp, #8]
 800c02a:	f7ff fa79 	bl	800b520 <chVTIsSystemTimeWithinX.lto_priv.1>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1dd      	bne.n	800bff0 <rt_test_012_011_execute+0x20>
  }
  test_end_step(1);

  /* [12.11.2] The score is printed.*/
  test_set_step(2);
 800c034:	4b08      	ldr	r3, [pc, #32]	; (800c058 <rt_test_012_011_execute+0x88>)
 800c036:	2202      	movs	r2, #2
 800c038:	601a      	str	r2, [r3, #0]
  {
    test_print("--- Score : ");
 800c03a:	4809      	ldr	r0, [pc, #36]	; (800c060 <rt_test_012_011_execute+0x90>)
 800c03c:	f7ff fae0 	bl	800b600 <test_print.lto_priv.1>
    test_printn(n * 4);
 800c040:	9b03      	ldr	r3, [sp, #12]
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff facb 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" lock+unlock/S");
 800c04a:	4806      	ldr	r0, [pc, #24]	; (800c064 <rt_test_012_011_execute+0x94>)
 800c04c:	f7ff fae8 	bl	800b620 <test_println.lto_priv.1>
  }
  test_end_step(2);
}
 800c050:	bf00      	nop
 800c052:	b005      	add	sp, #20
 800c054:	f85d fb04 	ldr.w	pc, [sp], #4
 800c058:	20000c6c 	.word	0x20000c6c
 800c05c:	20001564 	.word	0x20001564
 800c060:	0801e684 	.word	0x0801e684
 800c064:	0801e788 	.word	0x0801e788
	...

0800c070 <rt_test_012_012_execute>:
 * - [12.12.8] The size of an event listener is printed.
 * - [12.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_012_012_execute(void) {
 800c070:	b508      	push	{r3, lr}

  /* [12.12.1] The size of the system area is printed.*/
  test_set_step(1);
 800c072:	4b37      	ldr	r3, [pc, #220]	; (800c150 <rt_test_012_012_execute+0xe0>)
 800c074:	2201      	movs	r2, #1
 800c076:	601a      	str	r2, [r3, #0]
  {
    test_print("--- OS    : ");
 800c078:	4836      	ldr	r0, [pc, #216]	; (800c154 <rt_test_012_012_execute+0xe4>)
 800c07a:	f7ff fac1 	bl	800b600 <test_print.lto_priv.1>
    test_printn(sizeof(os_instance_t));
 800c07e:	2088      	movs	r0, #136	; 0x88
 800c080:	f7ff faae 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" bytes");
 800c084:	4834      	ldr	r0, [pc, #208]	; (800c158 <rt_test_012_012_execute+0xe8>)
 800c086:	f7ff facb 	bl	800b620 <test_println.lto_priv.1>
  }
  test_end_step(1);

  /* [12.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 800c08a:	4b31      	ldr	r3, [pc, #196]	; (800c150 <rt_test_012_012_execute+0xe0>)
 800c08c:	2202      	movs	r2, #2
 800c08e:	601a      	str	r2, [r3, #0]
  {
    test_print("--- Thread: ");
 800c090:	4832      	ldr	r0, [pc, #200]	; (800c15c <rt_test_012_012_execute+0xec>)
 800c092:	f7ff fab5 	bl	800b600 <test_print.lto_priv.1>
    test_printn(sizeof(thread_t));
 800c096:	2048      	movs	r0, #72	; 0x48
 800c098:	f7ff faa2 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" bytes");
 800c09c:	482e      	ldr	r0, [pc, #184]	; (800c158 <rt_test_012_012_execute+0xe8>)
 800c09e:	f7ff fabf 	bl	800b620 <test_println.lto_priv.1>
  }
  test_end_step(2);

  /* [12.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 800c0a2:	4b2b      	ldr	r3, [pc, #172]	; (800c150 <rt_test_012_012_execute+0xe0>)
 800c0a4:	2203      	movs	r2, #3
 800c0a6:	601a      	str	r2, [r3, #0]
  {
    test_print("--- Timer : ");
 800c0a8:	482d      	ldr	r0, [pc, #180]	; (800c160 <rt_test_012_012_execute+0xf0>)
 800c0aa:	f7ff faa9 	bl	800b600 <test_print.lto_priv.1>
    test_printn(sizeof(virtual_timer_t));
 800c0ae:	2018      	movs	r0, #24
 800c0b0:	f7ff fa96 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" bytes");
 800c0b4:	4828      	ldr	r0, [pc, #160]	; (800c158 <rt_test_012_012_execute+0xe8>)
 800c0b6:	f7ff fab3 	bl	800b620 <test_println.lto_priv.1>
  }
  test_end_step(3);

  /* [12.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 800c0ba:	4b25      	ldr	r3, [pc, #148]	; (800c150 <rt_test_012_012_execute+0xe0>)
 800c0bc:	2204      	movs	r2, #4
 800c0be:	601a      	str	r2, [r3, #0]
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 800c0c0:	4828      	ldr	r0, [pc, #160]	; (800c164 <rt_test_012_012_execute+0xf4>)
 800c0c2:	f7ff fa9d 	bl	800b600 <test_print.lto_priv.1>
    test_printn(sizeof(semaphore_t));
 800c0c6:	200c      	movs	r0, #12
 800c0c8:	f7ff fa8a 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" bytes");
 800c0cc:	4822      	ldr	r0, [pc, #136]	; (800c158 <rt_test_012_012_execute+0xe8>)
 800c0ce:	f7ff faa7 	bl	800b620 <test_println.lto_priv.1>
#endif
  }
  test_end_step(4);

  /* [12.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 800c0d2:	4b1f      	ldr	r3, [pc, #124]	; (800c150 <rt_test_012_012_execute+0xe0>)
 800c0d4:	2205      	movs	r2, #5
 800c0d6:	601a      	str	r2, [r3, #0]
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 800c0d8:	4823      	ldr	r0, [pc, #140]	; (800c168 <rt_test_012_012_execute+0xf8>)
 800c0da:	f7ff fa91 	bl	800b600 <test_print.lto_priv.1>
    test_printn(sizeof(mutex_t));
 800c0de:	2010      	movs	r0, #16
 800c0e0:	f7ff fa7e 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" bytes");
 800c0e4:	481c      	ldr	r0, [pc, #112]	; (800c158 <rt_test_012_012_execute+0xe8>)
 800c0e6:	f7ff fa9b 	bl	800b620 <test_println.lto_priv.1>
#endif
  }
  test_end_step(5);

  /* [12.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 800c0ea:	4b19      	ldr	r3, [pc, #100]	; (800c150 <rt_test_012_012_execute+0xe0>)
 800c0ec:	2206      	movs	r2, #6
 800c0ee:	601a      	str	r2, [r3, #0]
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 800c0f0:	481e      	ldr	r0, [pc, #120]	; (800c16c <rt_test_012_012_execute+0xfc>)
 800c0f2:	f7ff fa85 	bl	800b600 <test_print.lto_priv.1>
    test_printn(sizeof(condition_variable_t));
 800c0f6:	2008      	movs	r0, #8
 800c0f8:	f7ff fa72 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" bytes");
 800c0fc:	4816      	ldr	r0, [pc, #88]	; (800c158 <rt_test_012_012_execute+0xe8>)
 800c0fe:	f7ff fa8f 	bl	800b620 <test_println.lto_priv.1>
#endif
  }
  test_end_step(6);

  /* [12.12.7] The size of an event source is printed.*/
  test_set_step(7);
 800c102:	4b13      	ldr	r3, [pc, #76]	; (800c150 <rt_test_012_012_execute+0xe0>)
 800c104:	2207      	movs	r2, #7
 800c106:	601a      	str	r2, [r3, #0]
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 800c108:	4819      	ldr	r0, [pc, #100]	; (800c170 <rt_test_012_012_execute+0x100>)
 800c10a:	f7ff fa79 	bl	800b600 <test_print.lto_priv.1>
    test_printn(sizeof(event_source_t));
 800c10e:	2004      	movs	r0, #4
 800c110:	f7ff fa66 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" bytes");
 800c114:	4810      	ldr	r0, [pc, #64]	; (800c158 <rt_test_012_012_execute+0xe8>)
 800c116:	f7ff fa83 	bl	800b620 <test_println.lto_priv.1>
#endif
  }
  test_end_step(7);

  /* [12.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 800c11a:	4b0d      	ldr	r3, [pc, #52]	; (800c150 <rt_test_012_012_execute+0xe0>)
 800c11c:	2208      	movs	r2, #8
 800c11e:	601a      	str	r2, [r3, #0]
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 800c120:	4814      	ldr	r0, [pc, #80]	; (800c174 <rt_test_012_012_execute+0x104>)
 800c122:	f7ff fa6d 	bl	800b600 <test_print.lto_priv.1>
    test_printn(sizeof(event_listener_t));
 800c126:	2014      	movs	r0, #20
 800c128:	f7ff fa5a 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" bytes");
 800c12c:	480a      	ldr	r0, [pc, #40]	; (800c158 <rt_test_012_012_execute+0xe8>)
 800c12e:	f7ff fa77 	bl	800b620 <test_println.lto_priv.1>
#endif
  }
  test_end_step(8);

  /* [12.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 800c132:	4b07      	ldr	r3, [pc, #28]	; (800c150 <rt_test_012_012_execute+0xe0>)
 800c134:	2209      	movs	r2, #9
 800c136:	601a      	str	r2, [r3, #0]
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 800c138:	480f      	ldr	r0, [pc, #60]	; (800c178 <rt_test_012_012_execute+0x108>)
 800c13a:	f7ff fa61 	bl	800b600 <test_print.lto_priv.1>
    test_printn(sizeof(mailbox_t));
 800c13e:	2028      	movs	r0, #40	; 0x28
 800c140:	f7ff fa4e 	bl	800b5e0 <test_printn.lto_priv.1>
    test_println(" bytes");
 800c144:	4804      	ldr	r0, [pc, #16]	; (800c158 <rt_test_012_012_execute+0xe8>)
 800c146:	f7ff fa6b 	bl	800b620 <test_println.lto_priv.1>
#endif
  }
  test_end_step(9);
}
 800c14a:	bf00      	nop
 800c14c:	bd08      	pop	{r3, pc}
 800c14e:	bf00      	nop
 800c150:	20000c6c 	.word	0x20000c6c
 800c154:	0801e7a8 	.word	0x0801e7a8
 800c158:	0801e7b8 	.word	0x0801e7b8
 800c15c:	0801e7c0 	.word	0x0801e7c0
 800c160:	0801e7d0 	.word	0x0801e7d0
 800c164:	0801e7e0 	.word	0x0801e7e0
 800c168:	0801e7f0 	.word	0x0801e7f0
 800c16c:	0801e800 	.word	0x0801e800
 800c170:	0801e810 	.word	0x0801e810
 800c174:	0801e820 	.word	0x0801e820
 800c178:	0801e830 	.word	0x0801e830
 800c17c:	00000000 	.word	0x00000000

0800c180 <test_printn.lto_priv.2>:
static inline void test_printn(uint32_t n) {
 800c180:	b500      	push	{lr}
 800c182:	b083      	sub	sp, #12
 800c184:	9001      	str	r0, [sp, #4]
  test_printf("%u", n);
 800c186:	9901      	ldr	r1, [sp, #4]
 800c188:	4803      	ldr	r0, [pc, #12]	; (800c198 <test_printn.lto_priv.2+0x18>)
 800c18a:	f7fb fb89 	bl	80078a0 <test_printf>
}
 800c18e:	bf00      	nop
 800c190:	b003      	add	sp, #12
 800c192:	f85d fb04 	ldr.w	pc, [sp], #4
 800c196:	bf00      	nop
 800c198:	0801d71c 	.word	0x0801d71c
 800c19c:	00000000 	.word	0x00000000

0800c1a0 <test_print.lto_priv.2>:
static inline void test_print(const char *msgp) {
 800c1a0:	b500      	push	{lr}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	9001      	str	r0, [sp, #4]
  test_printf("%s", msgp);
 800c1a6:	9901      	ldr	r1, [sp, #4]
 800c1a8:	4803      	ldr	r0, [pc, #12]	; (800c1b8 <test_print.lto_priv.2+0x18>)
 800c1aa:	f7fb fb79 	bl	80078a0 <test_printf>
}
 800c1ae:	bf00      	nop
 800c1b0:	b003      	add	sp, #12
 800c1b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1b6:	bf00      	nop
 800c1b8:	0801d720 	.word	0x0801d720
 800c1bc:	00000000 	.word	0x00000000

0800c1c0 <test_println.lto_priv.2>:
static inline void test_println(const char *msgp) {
 800c1c0:	b500      	push	{lr}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	9001      	str	r0, [sp, #4]
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800c1c6:	9901      	ldr	r1, [sp, #4]
 800c1c8:	4803      	ldr	r0, [pc, #12]	; (800c1d8 <test_println.lto_priv.2+0x18>)
 800c1ca:	f7fb fb69 	bl	80078a0 <test_printf>
}
 800c1ce:	bf00      	nop
 800c1d0:	b003      	add	sp, #12
 800c1d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1d6:	bf00      	nop
 800c1d8:	0801d4d0 	.word	0x0801d4d0
 800c1dc:	00000000 	.word	0x00000000

0800c1e0 <oslib_test_001_001_execute>:
 * <h2>Test Steps</h2>
 * - [1.1.1] Prints the version string.
 * .
 */

static void oslib_test_001_001_execute(void) {
 800c1e0:	b508      	push	{r3, lr}

  /* [1.1.1] Prints the version string.*/
  test_set_step(1);
 800c1e2:	4b1c      	ldr	r3, [pc, #112]	; (800c254 <oslib_test_001_001_execute+0x74>)
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	601a      	str	r2, [r3, #0]
  {
#if defined(PORT_ARCHITECTURE_NAME)
    test_print("--- Architecture:                       ");
 800c1e8:	481b      	ldr	r0, [pc, #108]	; (800c258 <oslib_test_001_001_execute+0x78>)
 800c1ea:	f7ff ffd9 	bl	800c1a0 <test_print.lto_priv.2>
    test_println(PORT_ARCHITECTURE_NAME);
 800c1ee:	481b      	ldr	r0, [pc, #108]	; (800c25c <oslib_test_001_001_execute+0x7c>)
 800c1f0:	f7ff ffe6 	bl	800c1c0 <test_println.lto_priv.2>
#endif
#if defined(PORT_CORE_VARIANT_NAME)
    test_print("--- Core Variant:                       ");
 800c1f4:	481a      	ldr	r0, [pc, #104]	; (800c260 <oslib_test_001_001_execute+0x80>)
 800c1f6:	f7ff ffd3 	bl	800c1a0 <test_print.lto_priv.2>
    test_println(PORT_CORE_VARIANT_NAME);
 800c1fa:	481a      	ldr	r0, [pc, #104]	; (800c264 <oslib_test_001_001_execute+0x84>)
 800c1fc:	f7ff ffe0 	bl	800c1c0 <test_println.lto_priv.2>
#endif
#if defined(PORT_COMPILER_NAME)
    test_print("--- Compiler:                           ");
 800c200:	4819      	ldr	r0, [pc, #100]	; (800c268 <oslib_test_001_001_execute+0x88>)
 800c202:	f7ff ffcd 	bl	800c1a0 <test_print.lto_priv.2>
    test_println(PORT_COMPILER_NAME);
 800c206:	4819      	ldr	r0, [pc, #100]	; (800c26c <oslib_test_001_001_execute+0x8c>)
 800c208:	f7ff ffda 	bl	800c1c0 <test_println.lto_priv.2>
#endif
#if defined(PORT_INFO)
    test_print("--- Port Info:                          ");
 800c20c:	4818      	ldr	r0, [pc, #96]	; (800c270 <oslib_test_001_001_execute+0x90>)
 800c20e:	f7ff ffc7 	bl	800c1a0 <test_print.lto_priv.2>
    test_println(PORT_INFO);
 800c212:	4818      	ldr	r0, [pc, #96]	; (800c274 <oslib_test_001_001_execute+0x94>)
 800c214:	f7ff ffd4 	bl	800c1c0 <test_println.lto_priv.2>
#endif
#if defined(PORT_NATURAL_ALIGN)
    test_print("--- Natural alignment:                  ");
 800c218:	4817      	ldr	r0, [pc, #92]	; (800c278 <oslib_test_001_001_execute+0x98>)
 800c21a:	f7ff ffc1 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(PORT_NATURAL_ALIGN);
 800c21e:	2004      	movs	r0, #4
 800c220:	f7ff ffae 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c224:	4815      	ldr	r0, [pc, #84]	; (800c27c <oslib_test_001_001_execute+0x9c>)
 800c226:	f7ff ffcb 	bl	800c1c0 <test_println.lto_priv.2>
#endif
#if defined(PORT_STACK_ALIGN)
    test_print("--- Stack alignment:                    ");
 800c22a:	4815      	ldr	r0, [pc, #84]	; (800c280 <oslib_test_001_001_execute+0xa0>)
 800c22c:	f7ff ffb8 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(PORT_STACK_ALIGN);
 800c230:	2008      	movs	r0, #8
 800c232:	f7ff ffa5 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c236:	4811      	ldr	r0, [pc, #68]	; (800c27c <oslib_test_001_001_execute+0x9c>)
 800c238:	f7ff ffc2 	bl	800c1c0 <test_println.lto_priv.2>
#endif
#if defined(PORT_WORKING_AREA_ALIGN)
    test_print("--- Working area alignment:             ");
 800c23c:	4811      	ldr	r0, [pc, #68]	; (800c284 <oslib_test_001_001_execute+0xa4>)
 800c23e:	f7ff ffaf 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(PORT_WORKING_AREA_ALIGN);
 800c242:	2008      	movs	r0, #8
 800c244:	f7ff ff9c 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c248:	480c      	ldr	r0, [pc, #48]	; (800c27c <oslib_test_001_001_execute+0x9c>)
 800c24a:	f7ff ffb9 	bl	800c1c0 <test_println.lto_priv.2>
#endif
  }
  test_end_step(1);
}
 800c24e:	bf00      	nop
 800c250:	bd08      	pop	{r3, pc}
 800c252:	bf00      	nop
 800c254:	20000c6c 	.word	0x20000c6c
 800c258:	0801d724 	.word	0x0801d724
 800c25c:	0801d750 	.word	0x0801d750
 800c260:	0801d75c 	.word	0x0801d75c
 800c264:	0801d788 	.word	0x0801d788
 800c268:	0801d794 	.word	0x0801d794
 800c26c:	0801d7c0 	.word	0x0801d7c0
 800c270:	0801d7d4 	.word	0x0801d7d4
 800c274:	0801d800 	.word	0x0801d800
 800c278:	0801d818 	.word	0x0801d818
 800c27c:	0801d4e8 	.word	0x0801d4e8
 800c280:	0801d844 	.word	0x0801d844
 800c284:	0801d870 	.word	0x0801d870
	...

0800c290 <oslib_test_001_002_execute>:
 * <h2>Test Steps</h2>
 * - [1.2.1] Prints the version string.
 * .
 */

static void oslib_test_001_002_execute(void) {
 800c290:	b508      	push	{r3, lr}

  /* [1.2.1] Prints the version string.*/
  test_set_step(1);
 800c292:	4b19      	ldr	r3, [pc, #100]	; (800c2f8 <oslib_test_001_002_execute+0x68>)
 800c294:	2201      	movs	r2, #1
 800c296:	601a      	str	r2, [r3, #0]
  {
    test_println("--- Product:                            ChibiOS/LIB");
 800c298:	4818      	ldr	r0, [pc, #96]	; (800c2fc <oslib_test_001_002_execute+0x6c>)
 800c29a:	f7ff ff91 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- Stable Flag:                        ");
 800c29e:	4818      	ldr	r0, [pc, #96]	; (800c300 <oslib_test_001_002_execute+0x70>)
 800c2a0:	f7ff ff7e 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_OSLIB_STABLE);
 800c2a4:	2001      	movs	r0, #1
 800c2a6:	f7ff ff6b 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c2aa:	4816      	ldr	r0, [pc, #88]	; (800c304 <oslib_test_001_002_execute+0x74>)
 800c2ac:	f7ff ff88 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- Version String:                     ");
 800c2b0:	4815      	ldr	r0, [pc, #84]	; (800c308 <oslib_test_001_002_execute+0x78>)
 800c2b2:	f7ff ff75 	bl	800c1a0 <test_print.lto_priv.2>
    test_println(CH_OSLIB_VERSION);
 800c2b6:	4815      	ldr	r0, [pc, #84]	; (800c30c <oslib_test_001_002_execute+0x7c>)
 800c2b8:	f7ff ff82 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- Major Number:                       ");
 800c2bc:	4814      	ldr	r0, [pc, #80]	; (800c310 <oslib_test_001_002_execute+0x80>)
 800c2be:	f7ff ff6f 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_OSLIB_MAJOR);
 800c2c2:	2001      	movs	r0, #1
 800c2c4:	f7ff ff5c 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c2c8:	480e      	ldr	r0, [pc, #56]	; (800c304 <oslib_test_001_002_execute+0x74>)
 800c2ca:	f7ff ff79 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- Minor Number:                       ");
 800c2ce:	4811      	ldr	r0, [pc, #68]	; (800c314 <oslib_test_001_002_execute+0x84>)
 800c2d0:	f7ff ff66 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_OSLIB_MINOR);
 800c2d4:	2003      	movs	r0, #3
 800c2d6:	f7ff ff53 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c2da:	480a      	ldr	r0, [pc, #40]	; (800c304 <oslib_test_001_002_execute+0x74>)
 800c2dc:	f7ff ff70 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- Patch Number:                       ");
 800c2e0:	480d      	ldr	r0, [pc, #52]	; (800c318 <oslib_test_001_002_execute+0x88>)
 800c2e2:	f7ff ff5d 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_OSLIB_PATCH);
 800c2e6:	2001      	movs	r0, #1
 800c2e8:	f7ff ff4a 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c2ec:	4805      	ldr	r0, [pc, #20]	; (800c304 <oslib_test_001_002_execute+0x74>)
 800c2ee:	f7ff ff67 	bl	800c1c0 <test_println.lto_priv.2>
  }
  test_end_step(1);
}
 800c2f2:	bf00      	nop
 800c2f4:	bd08      	pop	{r3, pc}
 800c2f6:	bf00      	nop
 800c2f8:	20000c6c 	.word	0x20000c6c
 800c2fc:	0801e8cc 	.word	0x0801e8cc
 800c300:	0801d8e0 	.word	0x0801d8e0
 800c304:	0801d4e8 	.word	0x0801d4e8
 800c308:	0801d90c 	.word	0x0801d90c
 800c30c:	0801e900 	.word	0x0801e900
 800c310:	0801d940 	.word	0x0801d940
 800c314:	0801d96c 	.word	0x0801d96c
 800c318:	0801d998 	.word	0x0801d998
 800c31c:	00000000 	.word	0x00000000

0800c320 <oslib_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void oslib_test_001_003_execute(void) {
 800c320:	b508      	push	{r3, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 800c322:	4b4a      	ldr	r3, [pc, #296]	; (800c44c <oslib_test_001_003_execute+0x12c>)
 800c324:	2201      	movs	r2, #1
 800c326:	601a      	str	r2, [r3, #0]
  {
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 800c328:	4849      	ldr	r0, [pc, #292]	; (800c450 <oslib_test_001_003_execute+0x130>)
 800c32a:	f7ff ff39 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_USE_MAILBOXES);
 800c32e:	2001      	movs	r0, #1
 800c330:	f7ff ff26 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c334:	4847      	ldr	r0, [pc, #284]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c336:	f7ff ff43 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 800c33a:	4847      	ldr	r0, [pc, #284]	; (800c458 <oslib_test_001_003_execute+0x138>)
 800c33c:	f7ff ff30 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_USE_MEMCORE);
 800c340:	2001      	movs	r0, #1
 800c342:	f7ff ff1d 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c346:	4843      	ldr	r0, [pc, #268]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c348:	f7ff ff3a 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 800c34c:	4843      	ldr	r0, [pc, #268]	; (800c45c <oslib_test_001_003_execute+0x13c>)
 800c34e:	f7ff ff27 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_USE_HEAP);
 800c352:	2001      	movs	r0, #1
 800c354:	f7ff ff14 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c358:	483e      	ldr	r0, [pc, #248]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c35a:	f7ff ff31 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 800c35e:	4840      	ldr	r0, [pc, #256]	; (800c460 <oslib_test_001_003_execute+0x140>)
 800c360:	f7ff ff1e 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_USE_MEMPOOLS);
 800c364:	2001      	movs	r0, #1
 800c366:	f7ff ff0b 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c36a:	483a      	ldr	r0, [pc, #232]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c36c:	f7ff ff28 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 800c370:	483c      	ldr	r0, [pc, #240]	; (800c464 <oslib_test_001_003_execute+0x144>)
 800c372:	f7ff ff15 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
 800c376:	2001      	movs	r0, #1
 800c378:	f7ff ff02 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c37c:	4835      	ldr	r0, [pc, #212]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c37e:	f7ff ff1f 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_USE_PIPES:                   ");
 800c382:	4839      	ldr	r0, [pc, #228]	; (800c468 <oslib_test_001_003_execute+0x148>)
 800c384:	f7ff ff0c 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_USE_PIPES);
 800c388:	2001      	movs	r0, #1
 800c38a:	f7ff fef9 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c38e:	4831      	ldr	r0, [pc, #196]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c390:	f7ff ff16 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_USE_OBJ_CACHES:              ");
 800c394:	4835      	ldr	r0, [pc, #212]	; (800c46c <oslib_test_001_003_execute+0x14c>)
 800c396:	f7ff ff03 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_USE_OBJ_CACHES);
 800c39a:	2001      	movs	r0, #1
 800c39c:	f7ff fef0 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c3a0:	482c      	ldr	r0, [pc, #176]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c3a2:	f7ff ff0d 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_USE_DELEGATES:               ");
 800c3a6:	4832      	ldr	r0, [pc, #200]	; (800c470 <oslib_test_001_003_execute+0x150>)
 800c3a8:	f7ff fefa 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_USE_DELEGATES);
 800c3ac:	2001      	movs	r0, #1
 800c3ae:	f7ff fee7 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c3b2:	4828      	ldr	r0, [pc, #160]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c3b4:	f7ff ff04 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 800c3b8:	482e      	ldr	r0, [pc, #184]	; (800c474 <oslib_test_001_003_execute+0x154>)
 800c3ba:	f7ff fef1 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_USE_FACTORY);
 800c3be:	2001      	movs	r0, #1
 800c3c0:	f7ff fede 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c3c4:	4823      	ldr	r0, [pc, #140]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c3c6:	f7ff fefb 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 800c3ca:	482b      	ldr	r0, [pc, #172]	; (800c478 <oslib_test_001_003_execute+0x158>)
 800c3cc:	f7ff fee8 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 800c3d0:	2008      	movs	r0, #8
 800c3d2:	f7ff fed5 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c3d6:	481f      	ldr	r0, [pc, #124]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c3d8:	f7ff fef2 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 800c3dc:	4827      	ldr	r0, [pc, #156]	; (800c47c <oslib_test_001_003_execute+0x15c>)
 800c3de:	f7ff fedf 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
 800c3e2:	2001      	movs	r0, #1
 800c3e4:	f7ff fecc 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c3e8:	481a      	ldr	r0, [pc, #104]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c3ea:	f7ff fee9 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 800c3ee:	4824      	ldr	r0, [pc, #144]	; (800c480 <oslib_test_001_003_execute+0x160>)
 800c3f0:	f7ff fed6 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
 800c3f4:	2001      	movs	r0, #1
 800c3f6:	f7ff fec3 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c3fa:	4816      	ldr	r0, [pc, #88]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c3fc:	f7ff fee0 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 800c400:	4820      	ldr	r0, [pc, #128]	; (800c484 <oslib_test_001_003_execute+0x164>)
 800c402:	f7ff fecd 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
 800c406:	2001      	movs	r0, #1
 800c408:	f7ff feba 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c40c:	4811      	ldr	r0, [pc, #68]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c40e:	f7ff fed7 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 800c412:	481d      	ldr	r0, [pc, #116]	; (800c488 <oslib_test_001_003_execute+0x168>)
 800c414:	f7ff fec4 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
 800c418:	2001      	movs	r0, #1
 800c41a:	f7ff feb1 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c41e:	480d      	ldr	r0, [pc, #52]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c420:	f7ff fece 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 800c424:	4819      	ldr	r0, [pc, #100]	; (800c48c <oslib_test_001_003_execute+0x16c>)
 800c426:	f7ff febb 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
 800c42a:	2001      	movs	r0, #1
 800c42c:	f7ff fea8 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c430:	4808      	ldr	r0, [pc, #32]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c432:	f7ff fec5 	bl	800c1c0 <test_println.lto_priv.2>
    test_print("--- CH_CFG_FACTORY_PIPES:               ");
 800c436:	4816      	ldr	r0, [pc, #88]	; (800c490 <oslib_test_001_003_execute+0x170>)
 800c438:	f7ff feb2 	bl	800c1a0 <test_print.lto_priv.2>
    test_printn(CH_CFG_FACTORY_PIPES);
 800c43c:	2001      	movs	r0, #1
 800c43e:	f7ff fe9f 	bl	800c180 <test_printn.lto_priv.2>
    test_println("");
 800c442:	4804      	ldr	r0, [pc, #16]	; (800c454 <oslib_test_001_003_execute+0x134>)
 800c444:	f7ff febc 	bl	800c1c0 <test_println.lto_priv.2>
  }
  test_end_step(1);
}
 800c448:	bf00      	nop
 800c44a:	bd08      	pop	{r3, pc}
 800c44c:	20000c6c 	.word	0x20000c6c
 800c450:	0801e918 	.word	0x0801e918
 800c454:	0801d4e8 	.word	0x0801d4e8
 800c458:	0801e944 	.word	0x0801e944
 800c45c:	0801e970 	.word	0x0801e970
 800c460:	0801e99c 	.word	0x0801e99c
 800c464:	0801e9c8 	.word	0x0801e9c8
 800c468:	0801e9f4 	.word	0x0801e9f4
 800c46c:	0801ea20 	.word	0x0801ea20
 800c470:	0801ea4c 	.word	0x0801ea4c
 800c474:	0801ea78 	.word	0x0801ea78
 800c478:	0801eaa4 	.word	0x0801eaa4
 800c47c:	0801ead0 	.word	0x0801ead0
 800c480:	0801eafc 	.word	0x0801eafc
 800c484:	0801eb28 	.word	0x0801eb28
 800c488:	0801eb54 	.word	0x0801eb54
 800c48c:	0801eb80 	.word	0x0801eb80
 800c490:	0801ebac 	.word	0x0801ebac
	...

0800c4a0 <chSysLock.lto_priv.28>:
static inline void chSysLock(void) {
 800c4a0:	b082      	sub	sp, #8
 800c4a2:	2330      	movs	r3, #48	; 0x30
 800c4a4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800c4a6:	9b01      	ldr	r3, [sp, #4]
 800c4a8:	f383 8811 	msr	BASEPRI, r3
}
 800c4ac:	bf00      	nop
}
 800c4ae:	bf00      	nop
}
 800c4b0:	bf00      	nop
 800c4b2:	b002      	add	sp, #8
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop
	...

0800c4c0 <chSysUnlock.lto_priv.28>:
static inline void chSysUnlock(void) {
 800c4c0:	b082      	sub	sp, #8
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800c4c6:	9b01      	ldr	r3, [sp, #4]
 800c4c8:	f383 8811 	msr	BASEPRI, r3
}
 800c4cc:	bf00      	nop
}
 800c4ce:	bf00      	nop
}
 800c4d0:	bf00      	nop
 800c4d2:	b002      	add	sp, #8
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
	...

0800c4e0 <chMBGetSizeI.lto_priv.1>:
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {
 800c4e0:	b082      	sub	sp, #8
 800c4e2:	9001      	str	r0, [sp, #4]
  return (size_t)(mbp->top - mbp->buffer);
 800c4e4:	9b01      	ldr	r3, [sp, #4]
 800c4e6:	685a      	ldr	r2, [r3, #4]
 800c4e8:	9b01      	ldr	r3, [sp, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	1ad3      	subs	r3, r2, r3
 800c4ee:	109b      	asrs	r3, r3, #2
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	b002      	add	sp, #8
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
	...

0800c500 <chMBGetUsedCountI.lto_priv.1>:
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {
 800c500:	b082      	sub	sp, #8
 800c502:	9001      	str	r0, [sp, #4]
  return mbp->cnt;
 800c504:	9b01      	ldr	r3, [sp, #4]
 800c506:	691b      	ldr	r3, [r3, #16]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	b002      	add	sp, #8
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop

0800c510 <chMBGetFreeCountI.lto_priv.1>:
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {
 800c510:	b510      	push	{r4, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	9001      	str	r0, [sp, #4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800c516:	9801      	ldr	r0, [sp, #4]
 800c518:	f7ff ffe2 	bl	800c4e0 <chMBGetSizeI.lto_priv.1>
 800c51c:	4604      	mov	r4, r0
 800c51e:	9801      	ldr	r0, [sp, #4]
 800c520:	f7ff ffee 	bl	800c500 <chMBGetUsedCountI.lto_priv.1>
 800c524:	4603      	mov	r3, r0
 800c526:	1ae3      	subs	r3, r4, r3
}
 800c528:	4618      	mov	r0, r3
 800c52a:	b002      	add	sp, #8
 800c52c:	bd10      	pop	{r4, pc}
 800c52e:	bf00      	nop

0800c530 <chMBResumeX>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {
 800c530:	b082      	sub	sp, #8
 800c532:	9001      	str	r0, [sp, #4]

  mbp->reset = false;
 800c534:	9b01      	ldr	r3, [sp, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	751a      	strb	r2, [r3, #20]
}
 800c53a:	bf00      	nop
 800c53c:	b002      	add	sp, #8
 800c53e:	4770      	bx	lr

0800c540 <osalSysLock.lto_priv.5>:
static inline void osalSysLock(void) {
 800c540:	b508      	push	{r3, lr}
  chSysLock();
 800c542:	f7ff ffad 	bl	800c4a0 <chSysLock.lto_priv.28>
}
 800c546:	bf00      	nop
 800c548:	bd08      	pop	{r3, pc}
 800c54a:	bf00      	nop
 800c54c:	0000      	movs	r0, r0
	...

0800c550 <osalSysUnlock.lto_priv.5>:
static inline void osalSysUnlock(void) {
 800c550:	b508      	push	{r3, lr}
  chSysUnlock();
 800c552:	f7ff ffb5 	bl	800c4c0 <chSysUnlock.lto_priv.28>
}
 800c556:	bf00      	nop
 800c558:	bd08      	pop	{r3, pc}
 800c55a:	bf00      	nop
 800c55c:	0000      	movs	r0, r0
	...

0800c560 <oslib_test_002_001_setup>:
 * - [2.1.8] Testing final conditions. Data pointers must be aligned to
 *   buffer start, semaphore counters are checked.
 * .
 */

static void oslib_test_002_001_setup(void) {
 800c560:	b508      	push	{r3, lr}
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
 800c562:	2204      	movs	r2, #4
 800c564:	4902      	ldr	r1, [pc, #8]	; (800c570 <oslib_test_002_001_setup+0x10>)
 800c566:	4803      	ldr	r0, [pc, #12]	; (800c574 <oslib_test_002_001_setup+0x14>)
 800c568:	f7f8 fb6a 	bl	8004c40 <chMBObjectInit>
}
 800c56c:	bf00      	nop
 800c56e:	bd08      	pop	{r3, pc}
 800c570:	200015a4 	.word	0x200015a4
 800c574:	20000830 	.word	0x20000830
	...

0800c580 <oslib_test_002_001_teardown>:

static void oslib_test_002_001_teardown(void) {
 800c580:	b508      	push	{r3, lr}
  chMBReset(&mb1);
 800c582:	4802      	ldr	r0, [pc, #8]	; (800c58c <oslib_test_002_001_teardown+0xc>)
 800c584:	f7f8 fb84 	bl	8004c90 <chMBReset>
}
 800c588:	bf00      	nop
 800c58a:	bd08      	pop	{r3, pc}
 800c58c:	20000830 	.word	0x20000830

0800c590 <oslib_test_002_001_execute>:

static void oslib_test_002_001_execute(void) {
 800c590:	b500      	push	{lr}
 800c592:	b085      	sub	sp, #20
  msg_t msg1, msg2;
  unsigned i;

  /* [2.1.1] Testing the mailbox size.*/
  test_set_step(1);
 800c594:	4ba5      	ldr	r3, [pc, #660]	; (800c82c <oslib_test_002_001_execute+0x29c>)
 800c596:	2201      	movs	r2, #1
 800c598:	601a      	str	r2, [r3, #0]
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 800c59a:	f7ff ffd1 	bl	800c540 <osalSysLock.lto_priv.5>
 800c59e:	48a4      	ldr	r0, [pc, #656]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c5a0:	f7ff ffb6 	bl	800c510 <chMBGetFreeCountI.lto_priv.1>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b04      	cmp	r3, #4
 800c5a8:	bf0c      	ite	eq
 800c5aa:	2301      	moveq	r3, #1
 800c5ac:	2300      	movne	r3, #0
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	49a0      	ldr	r1, [pc, #640]	; (800c834 <oslib_test_002_001_execute+0x2a4>)
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fa fe1c 	bl	80071f0 <__test_assert>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d002      	beq.n	800c5c4 <oslib_test_002_001_execute+0x34>
 800c5be:	f7ff ffc7 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800c5c2:	e1f1      	b.n	800c9a8 <oslib_test_002_001_execute+0x418>
 800c5c4:	f7ff ffc4 	bl	800c550 <osalSysUnlock.lto_priv.5>
  }
  test_end_step(1);

  /* [2.1.2] Resetting the mailbox, conditions are checked, no errors
     expected.*/
  test_set_step(2);
 800c5c8:	4b98      	ldr	r3, [pc, #608]	; (800c82c <oslib_test_002_001_execute+0x29c>)
 800c5ca:	2202      	movs	r2, #2
 800c5cc:	601a      	str	r2, [r3, #0]
  {
    chMBReset(&mb1);
 800c5ce:	4898      	ldr	r0, [pc, #608]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c5d0:	f7f8 fb5e 	bl	8004c90 <chMBReset>
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800c5d4:	f7ff ffb4 	bl	800c540 <osalSysLock.lto_priv.5>
 800c5d8:	4895      	ldr	r0, [pc, #596]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c5da:	f7ff ff99 	bl	800c510 <chMBGetFreeCountI.lto_priv.1>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b04      	cmp	r3, #4
 800c5e2:	bf0c      	ite	eq
 800c5e4:	2301      	moveq	r3, #1
 800c5e6:	2300      	movne	r3, #0
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	4993      	ldr	r1, [pc, #588]	; (800c838 <oslib_test_002_001_execute+0x2a8>)
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fa fdff 	bl	80071f0 <__test_assert>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d002      	beq.n	800c5fe <oslib_test_002_001_execute+0x6e>
 800c5f8:	f7ff ffaa 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800c5fc:	e1d4      	b.n	800c9a8 <oslib_test_002_001_execute+0x418>
 800c5fe:	f7ff ffa7 	bl	800c550 <osalSysUnlock.lto_priv.5>
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800c602:	f7ff ff9d 	bl	800c540 <osalSysLock.lto_priv.5>
 800c606:	488a      	ldr	r0, [pc, #552]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c608:	f7ff ff7a 	bl	800c500 <chMBGetUsedCountI.lto_priv.1>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	bf0c      	ite	eq
 800c612:	2301      	moveq	r3, #1
 800c614:	2300      	movne	r3, #0
 800c616:	b2db      	uxtb	r3, r3
 800c618:	4988      	ldr	r1, [pc, #544]	; (800c83c <oslib_test_002_001_execute+0x2ac>)
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fa fde8 	bl	80071f0 <__test_assert>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d002      	beq.n	800c62c <oslib_test_002_001_execute+0x9c>
 800c626:	f7ff ff93 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800c62a:	e1bd      	b.n	800c9a8 <oslib_test_002_001_execute+0x418>
 800c62c:	f7ff ff90 	bl	800c550 <osalSysUnlock.lto_priv.5>
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800c630:	f7ff ff86 	bl	800c540 <osalSysLock.lto_priv.5>
 800c634:	4b7e      	ldr	r3, [pc, #504]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	4b7d      	ldr	r3, [pc, #500]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c63a:	689b      	ldr	r3, [r3, #8]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	bf0c      	ite	eq
 800c640:	2301      	moveq	r3, #1
 800c642:	2300      	movne	r3, #0
 800c644:	b2db      	uxtb	r3, r3
 800c646:	497e      	ldr	r1, [pc, #504]	; (800c840 <oslib_test_002_001_execute+0x2b0>)
 800c648:	4618      	mov	r0, r3
 800c64a:	f7fa fdd1 	bl	80071f0 <__test_assert>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d002      	beq.n	800c65a <oslib_test_002_001_execute+0xca>
 800c654:	f7ff ff7c 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800c658:	e1a6      	b.n	800c9a8 <oslib_test_002_001_execute+0x418>
 800c65a:	f7ff ff79 	bl	800c550 <osalSysUnlock.lto_priv.5>
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800c65e:	f7ff ff6f 	bl	800c540 <osalSysLock.lto_priv.5>
 800c662:	4b73      	ldr	r3, [pc, #460]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	4b72      	ldr	r3, [pc, #456]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	bf0c      	ite	eq
 800c66e:	2301      	moveq	r3, #1
 800c670:	2300      	movne	r3, #0
 800c672:	b2db      	uxtb	r3, r3
 800c674:	4973      	ldr	r1, [pc, #460]	; (800c844 <oslib_test_002_001_execute+0x2b4>)
 800c676:	4618      	mov	r0, r3
 800c678:	f7fa fdba 	bl	80071f0 <__test_assert>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d002      	beq.n	800c688 <oslib_test_002_001_execute+0xf8>
 800c682:	f7ff ff65 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800c686:	e18f      	b.n	800c9a8 <oslib_test_002_001_execute+0x418>
 800c688:	f7ff ff62 	bl	800c550 <osalSysUnlock.lto_priv.5>
  }
  test_end_step(2);

  /* [2.1.3] Testing the behavior of API when the mailbox is in reset
     state then return in active state.*/
  test_set_step(3);
 800c68c:	4b67      	ldr	r3, [pc, #412]	; (800c82c <oslib_test_002_001_execute+0x29c>)
 800c68e:	2203      	movs	r2, #3
 800c690:	601a      	str	r2, [r3, #0]
  {
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800c692:	f04f 32ff 	mov.w	r2, #4294967295
 800c696:	2100      	movs	r1, #0
 800c698:	4865      	ldr	r0, [pc, #404]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c69a:	f7f8 fb31 	bl	8004d00 <chMBPostTimeout>
 800c69e:	9002      	str	r0, [sp, #8]
    test_assert(msg1 == MSG_RESET, "not in reset state");
 800c6a0:	9b02      	ldr	r3, [sp, #8]
 800c6a2:	f113 0f02 	cmn.w	r3, #2
 800c6a6:	bf0c      	ite	eq
 800c6a8:	2301      	moveq	r3, #1
 800c6aa:	2300      	movne	r3, #0
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	4966      	ldr	r1, [pc, #408]	; (800c848 <oslib_test_002_001_execute+0x2b8>)
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7fa fd9d 	bl	80071f0 <__test_assert>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f040 8175 	bne.w	800c9a8 <oslib_test_002_001_execute+0x418>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800c6be:	f04f 32ff 	mov.w	r2, #4294967295
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	485a      	ldr	r0, [pc, #360]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c6c6:	f7f8 fbb3 	bl	8004e30 <chMBPostAheadTimeout>
 800c6ca:	9002      	str	r0, [sp, #8]
    test_assert(msg1 == MSG_RESET, "not in reset state");
 800c6cc:	9b02      	ldr	r3, [sp, #8]
 800c6ce:	f113 0f02 	cmn.w	r3, #2
 800c6d2:	bf0c      	ite	eq
 800c6d4:	2301      	moveq	r3, #1
 800c6d6:	2300      	movne	r3, #0
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	495b      	ldr	r1, [pc, #364]	; (800c848 <oslib_test_002_001_execute+0x2b8>)
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7fa fd87 	bl	80071f0 <__test_assert>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f040 815f 	bne.w	800c9a8 <oslib_test_002_001_execute+0x418>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800c6ea:	ab01      	add	r3, sp, #4
 800c6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	484f      	ldr	r0, [pc, #316]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c6f4:	f7f8 fc34 	bl	8004f60 <chMBFetchTimeout>
 800c6f8:	9002      	str	r0, [sp, #8]
    test_assert(msg1 == MSG_RESET, "not in reset state");
 800c6fa:	9b02      	ldr	r3, [sp, #8]
 800c6fc:	f113 0f02 	cmn.w	r3, #2
 800c700:	bf0c      	ite	eq
 800c702:	2301      	moveq	r3, #1
 800c704:	2300      	movne	r3, #0
 800c706:	b2db      	uxtb	r3, r3
 800c708:	494f      	ldr	r1, [pc, #316]	; (800c848 <oslib_test_002_001_execute+0x2b8>)
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fa fd70 	bl	80071f0 <__test_assert>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	f040 8148 	bne.w	800c9a8 <oslib_test_002_001_execute+0x418>
    chMBResumeX(&mb1);
 800c718:	4845      	ldr	r0, [pc, #276]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c71a:	f7ff ff09 	bl	800c530 <chMBResumeX>
  }
  test_end_step(3);

  /* [2.1.4] Filling the mailbox using chMBPostTimeout() and
     chMBPostAheadTimeout() once, no errors expected.*/
  test_set_step(4);
 800c71e:	4b43      	ldr	r3, [pc, #268]	; (800c82c <oslib_test_002_001_execute+0x29c>)
 800c720:	2204      	movs	r2, #4
 800c722:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < MB_SIZE - 1; i++) {
 800c724:	2300      	movs	r3, #0
 800c726:	9303      	str	r3, [sp, #12]
 800c728:	e019      	b.n	800c75e <oslib_test_002_001_execute+0x1ce>
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800c72a:	9b03      	ldr	r3, [sp, #12]
 800c72c:	3342      	adds	r3, #66	; 0x42
 800c72e:	f04f 32ff 	mov.w	r2, #4294967295
 800c732:	4619      	mov	r1, r3
 800c734:	483e      	ldr	r0, [pc, #248]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c736:	f7f8 fae3 	bl	8004d00 <chMBPostTimeout>
 800c73a:	9002      	str	r0, [sp, #8]
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800c73c:	9b02      	ldr	r3, [sp, #8]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	bf0c      	ite	eq
 800c742:	2301      	moveq	r3, #1
 800c744:	2300      	movne	r3, #0
 800c746:	b2db      	uxtb	r3, r3
 800c748:	4940      	ldr	r1, [pc, #256]	; (800c84c <oslib_test_002_001_execute+0x2bc>)
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fa fd50 	bl	80071f0 <__test_assert>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	f040 8128 	bne.w	800c9a8 <oslib_test_002_001_execute+0x418>
    for (i = 0; i < MB_SIZE - 1; i++) {
 800c758:	9b03      	ldr	r3, [sp, #12]
 800c75a:	3301      	adds	r3, #1
 800c75c:	9303      	str	r3, [sp, #12]
 800c75e:	9b03      	ldr	r3, [sp, #12]
 800c760:	2b02      	cmp	r3, #2
 800c762:	d9e2      	bls.n	800c72a <oslib_test_002_001_execute+0x19a>
    }
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 800c764:	f04f 32ff 	mov.w	r2, #4294967295
 800c768:	2141      	movs	r1, #65	; 0x41
 800c76a:	4831      	ldr	r0, [pc, #196]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c76c:	f7f8 fb60 	bl	8004e30 <chMBPostAheadTimeout>
 800c770:	9002      	str	r0, [sp, #8]
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800c772:	9b02      	ldr	r3, [sp, #8]
 800c774:	2b00      	cmp	r3, #0
 800c776:	bf0c      	ite	eq
 800c778:	2301      	moveq	r3, #1
 800c77a:	2300      	movne	r3, #0
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	4933      	ldr	r1, [pc, #204]	; (800c84c <oslib_test_002_001_execute+0x2bc>)
 800c780:	4618      	mov	r0, r3
 800c782:	f7fa fd35 	bl	80071f0 <__test_assert>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	f040 810d 	bne.w	800c9a8 <oslib_test_002_001_execute+0x418>
  }
  test_end_step(4);

  /* [2.1.5] Testing intermediate conditions. Data pointers must be
     aligned, semaphore counters are checked.*/
  test_set_step(5);
 800c78e:	4b27      	ldr	r3, [pc, #156]	; (800c82c <oslib_test_002_001_execute+0x29c>)
 800c790:	2205      	movs	r2, #5
 800c792:	601a      	str	r2, [r3, #0]
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800c794:	f7ff fed4 	bl	800c540 <osalSysLock.lto_priv.5>
 800c798:	4825      	ldr	r0, [pc, #148]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c79a:	f7ff feb9 	bl	800c510 <chMBGetFreeCountI.lto_priv.1>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	bf0c      	ite	eq
 800c7a4:	2301      	moveq	r3, #1
 800c7a6:	2300      	movne	r3, #0
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	4929      	ldr	r1, [pc, #164]	; (800c850 <oslib_test_002_001_execute+0x2c0>)
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7fa fd1f 	bl	80071f0 <__test_assert>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d002      	beq.n	800c7be <oslib_test_002_001_execute+0x22e>
 800c7b8:	f7ff feca 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800c7bc:	e0f4      	b.n	800c9a8 <oslib_test_002_001_execute+0x418>
 800c7be:	f7ff fec7 	bl	800c550 <osalSysUnlock.lto_priv.5>
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800c7c2:	f7ff febd 	bl	800c540 <osalSysLock.lto_priv.5>
 800c7c6:	481a      	ldr	r0, [pc, #104]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c7c8:	f7ff fe9a 	bl	800c500 <chMBGetUsedCountI.lto_priv.1>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b04      	cmp	r3, #4
 800c7d0:	bf0c      	ite	eq
 800c7d2:	2301      	moveq	r3, #1
 800c7d4:	2300      	movne	r3, #0
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	491e      	ldr	r1, [pc, #120]	; (800c854 <oslib_test_002_001_execute+0x2c4>)
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7fa fd08 	bl	80071f0 <__test_assert>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d002      	beq.n	800c7ec <oslib_test_002_001_execute+0x25c>
 800c7e6:	f7ff feb3 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800c7ea:	e0dd      	b.n	800c9a8 <oslib_test_002_001_execute+0x418>
 800c7ec:	f7ff feb0 	bl	800c550 <osalSysUnlock.lto_priv.5>
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800c7f0:	f7ff fea6 	bl	800c540 <osalSysLock.lto_priv.5>
 800c7f4:	4b0e      	ldr	r3, [pc, #56]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c7f6:	68da      	ldr	r2, [r3, #12]
 800c7f8:	4b0d      	ldr	r3, [pc, #52]	; (800c830 <oslib_test_002_001_execute+0x2a0>)
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	bf0c      	ite	eq
 800c800:	2301      	moveq	r3, #1
 800c802:	2300      	movne	r3, #0
 800c804:	b2db      	uxtb	r3, r3
 800c806:	4914      	ldr	r1, [pc, #80]	; (800c858 <oslib_test_002_001_execute+0x2c8>)
 800c808:	4618      	mov	r0, r3
 800c80a:	f7fa fcf1 	bl	80071f0 <__test_assert>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d002      	beq.n	800c81a <oslib_test_002_001_execute+0x28a>
 800c814:	f7ff fe9c 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800c818:	e0c6      	b.n	800c9a8 <oslib_test_002_001_execute+0x418>
 800c81a:	f7ff fe99 	bl	800c550 <osalSysUnlock.lto_priv.5>
  }
  test_end_step(5);

  /* [2.1.6] Emptying the mailbox using chMBFetchTimeout(), no errors
     expected.*/
  test_set_step(6);
 800c81e:	4b03      	ldr	r3, [pc, #12]	; (800c82c <oslib_test_002_001_execute+0x29c>)
 800c820:	2206      	movs	r2, #6
 800c822:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < MB_SIZE; i++) {
 800c824:	2300      	movs	r3, #0
 800c826:	9303      	str	r3, [sp, #12]
 800c828:	e036      	b.n	800c898 <oslib_test_002_001_execute+0x308>
 800c82a:	bf00      	nop
 800c82c:	20000c6c 	.word	0x20000c6c
 800c830:	20000830 	.word	0x20000830
 800c834:	0801ec00 	.word	0x0801ec00
 800c838:	0801ec0c 	.word	0x0801ec0c
 800c83c:	0801ec18 	.word	0x0801ec18
 800c840:	0801ec24 	.word	0x0801ec24
 800c844:	0801ec48 	.word	0x0801ec48
 800c848:	0801ec6c 	.word	0x0801ec6c
 800c84c:	0801e258 	.word	0x0801e258
 800c850:	0801ec80 	.word	0x0801ec80
 800c854:	0801ec8c 	.word	0x0801ec8c
 800c858:	0801ec98 	.word	0x0801ec98
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800c85c:	ab01      	add	r3, sp, #4
 800c85e:	f04f 32ff 	mov.w	r2, #4294967295
 800c862:	4619      	mov	r1, r3
 800c864:	4852      	ldr	r0, [pc, #328]	; (800c9b0 <oslib_test_002_001_execute+0x420>)
 800c866:	f7f8 fb7b 	bl	8004f60 <chMBFetchTimeout>
 800c86a:	9002      	str	r0, [sp, #8]
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800c86c:	9b02      	ldr	r3, [sp, #8]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	bf0c      	ite	eq
 800c872:	2301      	moveq	r3, #1
 800c874:	2300      	movne	r3, #0
 800c876:	b2db      	uxtb	r3, r3
 800c878:	494e      	ldr	r1, [pc, #312]	; (800c9b4 <oslib_test_002_001_execute+0x424>)
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fa fcb8 	bl	80071f0 <__test_assert>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	f040 8090 	bne.w	800c9a8 <oslib_test_002_001_execute+0x418>
      test_emit_token(msg2);
 800c888:	9b01      	ldr	r3, [sp, #4]
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7fa fd0f 	bl	80072b0 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 800c892:	9b03      	ldr	r3, [sp, #12]
 800c894:	3301      	adds	r3, #1
 800c896:	9303      	str	r3, [sp, #12]
 800c898:	9b03      	ldr	r3, [sp, #12]
 800c89a:	2b03      	cmp	r3, #3
 800c89c:	d9de      	bls.n	800c85c <oslib_test_002_001_execute+0x2cc>
    }
    test_assert_sequence("ABCD", "wrong get sequence");
 800c89e:	4946      	ldr	r1, [pc, #280]	; (800c9b8 <oslib_test_002_001_execute+0x428>)
 800c8a0:	4846      	ldr	r0, [pc, #280]	; (800c9bc <oslib_test_002_001_execute+0x42c>)
 800c8a2:	f7fa fcbd 	bl	8007220 <__test_assert_sequence>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d17d      	bne.n	800c9a8 <oslib_test_002_001_execute+0x418>
  }
  test_end_step(6);

  /* [2.1.7] Posting and then fetching one more message, no errors
     expected.*/
  test_set_step(7);
 800c8ac:	4b44      	ldr	r3, [pc, #272]	; (800c9c0 <oslib_test_002_001_execute+0x430>)
 800c8ae:	2207      	movs	r2, #7
 800c8b0:	601a      	str	r2, [r3, #0]
  {
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800c8b2:	9b03      	ldr	r3, [sp, #12]
 800c8b4:	3342      	adds	r3, #66	; 0x42
 800c8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	483c      	ldr	r0, [pc, #240]	; (800c9b0 <oslib_test_002_001_execute+0x420>)
 800c8be:	f7f8 fa1f 	bl	8004d00 <chMBPostTimeout>
 800c8c2:	9002      	str	r0, [sp, #8]
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800c8c4:	9b02      	ldr	r3, [sp, #8]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	bf0c      	ite	eq
 800c8ca:	2301      	moveq	r3, #1
 800c8cc:	2300      	movne	r3, #0
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	4938      	ldr	r1, [pc, #224]	; (800c9b4 <oslib_test_002_001_execute+0x424>)
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7fa fc8c 	bl	80071f0 <__test_assert>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d164      	bne.n	800c9a8 <oslib_test_002_001_execute+0x418>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800c8de:	ab01      	add	r3, sp, #4
 800c8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	4832      	ldr	r0, [pc, #200]	; (800c9b0 <oslib_test_002_001_execute+0x420>)
 800c8e8:	f7f8 fb3a 	bl	8004f60 <chMBFetchTimeout>
 800c8ec:	9002      	str	r0, [sp, #8]
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800c8ee:	9b02      	ldr	r3, [sp, #8]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	bf0c      	ite	eq
 800c8f4:	2301      	moveq	r3, #1
 800c8f6:	2300      	movne	r3, #0
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	492e      	ldr	r1, [pc, #184]	; (800c9b4 <oslib_test_002_001_execute+0x424>)
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fa fc77 	bl	80071f0 <__test_assert>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d14f      	bne.n	800c9a8 <oslib_test_002_001_execute+0x418>
  }
  test_end_step(7);

  /* [2.1.8] Testing final conditions. Data pointers must be aligned to
     buffer start, semaphore counters are checked.*/
  test_set_step(8);
 800c908:	4b2d      	ldr	r3, [pc, #180]	; (800c9c0 <oslib_test_002_001_execute+0x430>)
 800c90a:	2208      	movs	r2, #8
 800c90c:	601a      	str	r2, [r3, #0]
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800c90e:	f7ff fe17 	bl	800c540 <osalSysLock.lto_priv.5>
 800c912:	4827      	ldr	r0, [pc, #156]	; (800c9b0 <oslib_test_002_001_execute+0x420>)
 800c914:	f7ff fdfc 	bl	800c510 <chMBGetFreeCountI.lto_priv.1>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b04      	cmp	r3, #4
 800c91c:	bf0c      	ite	eq
 800c91e:	2301      	moveq	r3, #1
 800c920:	2300      	movne	r3, #0
 800c922:	b2db      	uxtb	r3, r3
 800c924:	4927      	ldr	r1, [pc, #156]	; (800c9c4 <oslib_test_002_001_execute+0x434>)
 800c926:	4618      	mov	r0, r3
 800c928:	f7fa fc62 	bl	80071f0 <__test_assert>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d002      	beq.n	800c938 <oslib_test_002_001_execute+0x3a8>
 800c932:	f7ff fe0d 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800c936:	e037      	b.n	800c9a8 <oslib_test_002_001_execute+0x418>
 800c938:	f7ff fe0a 	bl	800c550 <osalSysUnlock.lto_priv.5>
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800c93c:	f7ff fe00 	bl	800c540 <osalSysLock.lto_priv.5>
 800c940:	481b      	ldr	r0, [pc, #108]	; (800c9b0 <oslib_test_002_001_execute+0x420>)
 800c942:	f7ff fddd 	bl	800c500 <chMBGetUsedCountI.lto_priv.1>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	bf0c      	ite	eq
 800c94c:	2301      	moveq	r3, #1
 800c94e:	2300      	movne	r3, #0
 800c950:	b2db      	uxtb	r3, r3
 800c952:	491d      	ldr	r1, [pc, #116]	; (800c9c8 <oslib_test_002_001_execute+0x438>)
 800c954:	4618      	mov	r0, r3
 800c956:	f7fa fc4b 	bl	80071f0 <__test_assert>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d002      	beq.n	800c966 <oslib_test_002_001_execute+0x3d6>
 800c960:	f7ff fdf6 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800c964:	e020      	b.n	800c9a8 <oslib_test_002_001_execute+0x418>
 800c966:	f7ff fdf3 	bl	800c550 <osalSysUnlock.lto_priv.5>
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800c96a:	4b11      	ldr	r3, [pc, #68]	; (800c9b0 <oslib_test_002_001_execute+0x420>)
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	4b10      	ldr	r3, [pc, #64]	; (800c9b0 <oslib_test_002_001_execute+0x420>)
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	429a      	cmp	r2, r3
 800c974:	bf0c      	ite	eq
 800c976:	2301      	moveq	r3, #1
 800c978:	2300      	movne	r3, #0
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	4913      	ldr	r1, [pc, #76]	; (800c9cc <oslib_test_002_001_execute+0x43c>)
 800c97e:	4618      	mov	r0, r3
 800c980:	f7fa fc36 	bl	80071f0 <__test_assert>
 800c984:	4603      	mov	r3, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d10e      	bne.n	800c9a8 <oslib_test_002_001_execute+0x418>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800c98a:	4b09      	ldr	r3, [pc, #36]	; (800c9b0 <oslib_test_002_001_execute+0x420>)
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	4b08      	ldr	r3, [pc, #32]	; (800c9b0 <oslib_test_002_001_execute+0x420>)
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	429a      	cmp	r2, r3
 800c994:	bf0c      	ite	eq
 800c996:	2301      	moveq	r3, #1
 800c998:	2300      	movne	r3, #0
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	490c      	ldr	r1, [pc, #48]	; (800c9d0 <oslib_test_002_001_execute+0x440>)
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7fa fc26 	bl	80071f0 <__test_assert>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2b00      	cmp	r3, #0
  }
  test_end_step(8);
}
 800c9a8:	b005      	add	sp, #20
 800c9aa:	f85d fb04 	ldr.w	pc, [sp], #4
 800c9ae:	bf00      	nop
 800c9b0:	20000830 	.word	0x20000830
 800c9b4:	0801e258 	.word	0x0801e258
 800c9b8:	0801ecb0 	.word	0x0801ecb0
 800c9bc:	0801e410 	.word	0x0801e410
 800c9c0:	20000c6c 	.word	0x20000c6c
 800c9c4:	0801ec0c 	.word	0x0801ec0c
 800c9c8:	0801ec18 	.word	0x0801ec18
 800c9cc:	0801ec24 	.word	0x0801ec24
 800c9d0:	0801ec48 	.word	0x0801ec48
	...

0800c9e0 <oslib_test_002_002_setup>:
 * - [2.2.7] Testing final conditions. Data pointers must be aligned to
 *   buffer start, semaphore counters are checked.
 * .
 */

static void oslib_test_002_002_setup(void) {
 800c9e0:	b508      	push	{r3, lr}
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
 800c9e2:	2204      	movs	r2, #4
 800c9e4:	4902      	ldr	r1, [pc, #8]	; (800c9f0 <oslib_test_002_002_setup+0x10>)
 800c9e6:	4803      	ldr	r0, [pc, #12]	; (800c9f4 <oslib_test_002_002_setup+0x14>)
 800c9e8:	f7f8 f92a 	bl	8004c40 <chMBObjectInit>
}
 800c9ec:	bf00      	nop
 800c9ee:	bd08      	pop	{r3, pc}
 800c9f0:	200015a4 	.word	0x200015a4
 800c9f4:	20000830 	.word	0x20000830
	...

0800ca00 <oslib_test_002_002_teardown>:

static void oslib_test_002_002_teardown(void) {
 800ca00:	b508      	push	{r3, lr}
  chMBReset(&mb1);
 800ca02:	4802      	ldr	r0, [pc, #8]	; (800ca0c <oslib_test_002_002_teardown+0xc>)
 800ca04:	f7f8 f944 	bl	8004c90 <chMBReset>
}
 800ca08:	bf00      	nop
 800ca0a:	bd08      	pop	{r3, pc}
 800ca0c:	20000830 	.word	0x20000830

0800ca10 <oslib_test_002_002_execute>:

static void oslib_test_002_002_execute(void) {
 800ca10:	b500      	push	{lr}
 800ca12:	b085      	sub	sp, #20
  msg_t msg1, msg2;
  unsigned i;

  /* [2.2.1] Testing the mailbox size.*/
  test_set_step(1);
 800ca14:	4b86      	ldr	r3, [pc, #536]	; (800cc30 <oslib_test_002_002_execute+0x220>)
 800ca16:	2201      	movs	r2, #1
 800ca18:	601a      	str	r2, [r3, #0]
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 800ca1a:	f7ff fd91 	bl	800c540 <osalSysLock.lto_priv.5>
 800ca1e:	4885      	ldr	r0, [pc, #532]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800ca20:	f7ff fd76 	bl	800c510 <chMBGetFreeCountI.lto_priv.1>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b04      	cmp	r3, #4
 800ca28:	bf0c      	ite	eq
 800ca2a:	2301      	moveq	r3, #1
 800ca2c:	2300      	movne	r3, #0
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	4981      	ldr	r1, [pc, #516]	; (800cc38 <oslib_test_002_002_execute+0x228>)
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7fa fbdc 	bl	80071f0 <__test_assert>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d002      	beq.n	800ca44 <oslib_test_002_002_execute+0x34>
 800ca3e:	f7ff fd87 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800ca42:	e1b3      	b.n	800cdac <oslib_test_002_002_execute+0x39c>
 800ca44:	f7ff fd84 	bl	800c550 <osalSysUnlock.lto_priv.5>
  }
  test_end_step(1);

  /* [2.2.2] Resetting the mailbox, conditions are checked, no errors
     expected. The mailbox is then returned in active state.*/
  test_set_step(2);
 800ca48:	4b79      	ldr	r3, [pc, #484]	; (800cc30 <oslib_test_002_002_execute+0x220>)
 800ca4a:	2202      	movs	r2, #2
 800ca4c:	601a      	str	r2, [r3, #0]
  {
    chSysLock();
 800ca4e:	f7ff fd27 	bl	800c4a0 <chSysLock.lto_priv.28>
    chMBResetI(&mb1);
 800ca52:	4878      	ldr	r0, [pc, #480]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800ca54:	f7f8 f92c 	bl	8004cb0 <chMBResetI>
    chSysUnlock();
 800ca58:	f7ff fd32 	bl	800c4c0 <chSysUnlock.lto_priv.28>
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800ca5c:	f7ff fd70 	bl	800c540 <osalSysLock.lto_priv.5>
 800ca60:	4874      	ldr	r0, [pc, #464]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800ca62:	f7ff fd55 	bl	800c510 <chMBGetFreeCountI.lto_priv.1>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b04      	cmp	r3, #4
 800ca6a:	bf0c      	ite	eq
 800ca6c:	2301      	moveq	r3, #1
 800ca6e:	2300      	movne	r3, #0
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	4972      	ldr	r1, [pc, #456]	; (800cc3c <oslib_test_002_002_execute+0x22c>)
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7fa fbbb 	bl	80071f0 <__test_assert>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d002      	beq.n	800ca86 <oslib_test_002_002_execute+0x76>
 800ca80:	f7ff fd66 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800ca84:	e192      	b.n	800cdac <oslib_test_002_002_execute+0x39c>
 800ca86:	f7ff fd63 	bl	800c550 <osalSysUnlock.lto_priv.5>
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800ca8a:	f7ff fd59 	bl	800c540 <osalSysLock.lto_priv.5>
 800ca8e:	4869      	ldr	r0, [pc, #420]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800ca90:	f7ff fd36 	bl	800c500 <chMBGetUsedCountI.lto_priv.1>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	bf0c      	ite	eq
 800ca9a:	2301      	moveq	r3, #1
 800ca9c:	2300      	movne	r3, #0
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	4967      	ldr	r1, [pc, #412]	; (800cc40 <oslib_test_002_002_execute+0x230>)
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fa fba4 	bl	80071f0 <__test_assert>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d002      	beq.n	800cab4 <oslib_test_002_002_execute+0xa4>
 800caae:	f7ff fd4f 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800cab2:	e17b      	b.n	800cdac <oslib_test_002_002_execute+0x39c>
 800cab4:	f7ff fd4c 	bl	800c550 <osalSysUnlock.lto_priv.5>
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800cab8:	f7ff fd42 	bl	800c540 <osalSysLock.lto_priv.5>
 800cabc:	4b5d      	ldr	r3, [pc, #372]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	4b5c      	ldr	r3, [pc, #368]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	bf0c      	ite	eq
 800cac8:	2301      	moveq	r3, #1
 800caca:	2300      	movne	r3, #0
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	495d      	ldr	r1, [pc, #372]	; (800cc44 <oslib_test_002_002_execute+0x234>)
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7fa fb8d 	bl	80071f0 <__test_assert>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d002      	beq.n	800cae2 <oslib_test_002_002_execute+0xd2>
 800cadc:	f7ff fd38 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800cae0:	e164      	b.n	800cdac <oslib_test_002_002_execute+0x39c>
 800cae2:	f7ff fd35 	bl	800c550 <osalSysUnlock.lto_priv.5>
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800cae6:	f7ff fd2b 	bl	800c540 <osalSysLock.lto_priv.5>
 800caea:	4b52      	ldr	r3, [pc, #328]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	4b51      	ldr	r3, [pc, #324]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	bf0c      	ite	eq
 800caf6:	2301      	moveq	r3, #1
 800caf8:	2300      	movne	r3, #0
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	4952      	ldr	r1, [pc, #328]	; (800cc48 <oslib_test_002_002_execute+0x238>)
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fa fb76 	bl	80071f0 <__test_assert>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d002      	beq.n	800cb10 <oslib_test_002_002_execute+0x100>
 800cb0a:	f7ff fd21 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800cb0e:	e14d      	b.n	800cdac <oslib_test_002_002_execute+0x39c>
 800cb10:	f7ff fd1e 	bl	800c550 <osalSysUnlock.lto_priv.5>
    chMBResumeX(&mb1);
 800cb14:	4847      	ldr	r0, [pc, #284]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800cb16:	f7ff fd0b 	bl	800c530 <chMBResumeX>
  }
  test_end_step(2);

  /* [2.2.3] Filling the mailbox using chMBPostI() and chMBPostAheadI()
     once, no errors expected.*/
  test_set_step(3);
 800cb1a:	4b45      	ldr	r3, [pc, #276]	; (800cc30 <oslib_test_002_002_execute+0x220>)
 800cb1c:	2203      	movs	r2, #3
 800cb1e:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < MB_SIZE - 1; i++) {
 800cb20:	2300      	movs	r3, #0
 800cb22:	9303      	str	r3, [sp, #12]
 800cb24:	e01b      	b.n	800cb5e <oslib_test_002_002_execute+0x14e>
      chSysLock();
 800cb26:	f7ff fcbb 	bl	800c4a0 <chSysLock.lto_priv.28>
      msg1 = chMBPostI(&mb1, 'B' + i);
 800cb2a:	9b03      	ldr	r3, [sp, #12]
 800cb2c:	3342      	adds	r3, #66	; 0x42
 800cb2e:	4619      	mov	r1, r3
 800cb30:	4840      	ldr	r0, [pc, #256]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800cb32:	f7f8 f945 	bl	8004dc0 <chMBPostI>
 800cb36:	9002      	str	r0, [sp, #8]
      chSysUnlock();
 800cb38:	f7ff fcc2 	bl	800c4c0 <chSysUnlock.lto_priv.28>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800cb3c:	9b02      	ldr	r3, [sp, #8]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	bf0c      	ite	eq
 800cb42:	2301      	moveq	r3, #1
 800cb44:	2300      	movne	r3, #0
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	4940      	ldr	r1, [pc, #256]	; (800cc4c <oslib_test_002_002_execute+0x23c>)
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7fa fb50 	bl	80071f0 <__test_assert>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	f040 812a 	bne.w	800cdac <oslib_test_002_002_execute+0x39c>
    for (i = 0; i < MB_SIZE - 1; i++) {
 800cb58:	9b03      	ldr	r3, [sp, #12]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	9303      	str	r3, [sp, #12]
 800cb5e:	9b03      	ldr	r3, [sp, #12]
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	d9e0      	bls.n	800cb26 <oslib_test_002_002_execute+0x116>
    }
    chSysLock();
 800cb64:	f7ff fc9c 	bl	800c4a0 <chSysLock.lto_priv.28>
    msg1 = chMBPostAheadI(&mb1, 'A');
 800cb68:	2141      	movs	r1, #65	; 0x41
 800cb6a:	4832      	ldr	r0, [pc, #200]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800cb6c:	f7f8 f9c0 	bl	8004ef0 <chMBPostAheadI>
 800cb70:	9002      	str	r0, [sp, #8]
    chSysUnlock();
 800cb72:	f7ff fca5 	bl	800c4c0 <chSysUnlock.lto_priv.28>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800cb76:	9b02      	ldr	r3, [sp, #8]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	bf0c      	ite	eq
 800cb7c:	2301      	moveq	r3, #1
 800cb7e:	2300      	movne	r3, #0
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	4932      	ldr	r1, [pc, #200]	; (800cc4c <oslib_test_002_002_execute+0x23c>)
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7fa fb33 	bl	80071f0 <__test_assert>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f040 810d 	bne.w	800cdac <oslib_test_002_002_execute+0x39c>
  }
  test_end_step(3);

  /* [2.2.4] Testing intermediate conditions. Data pointers must be
     aligned, semaphore counters are checked.*/
  test_set_step(4);
 800cb92:	4b27      	ldr	r3, [pc, #156]	; (800cc30 <oslib_test_002_002_execute+0x220>)
 800cb94:	2204      	movs	r2, #4
 800cb96:	601a      	str	r2, [r3, #0]
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800cb98:	f7ff fcd2 	bl	800c540 <osalSysLock.lto_priv.5>
 800cb9c:	4825      	ldr	r0, [pc, #148]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800cb9e:	f7ff fcb7 	bl	800c510 <chMBGetFreeCountI.lto_priv.1>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	bf0c      	ite	eq
 800cba8:	2301      	moveq	r3, #1
 800cbaa:	2300      	movne	r3, #0
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	4928      	ldr	r1, [pc, #160]	; (800cc50 <oslib_test_002_002_execute+0x240>)
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fa fb1d 	bl	80071f0 <__test_assert>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d002      	beq.n	800cbc2 <oslib_test_002_002_execute+0x1b2>
 800cbbc:	f7ff fcc8 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800cbc0:	e0f4      	b.n	800cdac <oslib_test_002_002_execute+0x39c>
 800cbc2:	f7ff fcc5 	bl	800c550 <osalSysUnlock.lto_priv.5>
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800cbc6:	f7ff fcbb 	bl	800c540 <osalSysLock.lto_priv.5>
 800cbca:	481a      	ldr	r0, [pc, #104]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800cbcc:	f7ff fc98 	bl	800c500 <chMBGetUsedCountI.lto_priv.1>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b04      	cmp	r3, #4
 800cbd4:	bf0c      	ite	eq
 800cbd6:	2301      	moveq	r3, #1
 800cbd8:	2300      	movne	r3, #0
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	491d      	ldr	r1, [pc, #116]	; (800cc54 <oslib_test_002_002_execute+0x244>)
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7fa fb06 	bl	80071f0 <__test_assert>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d002      	beq.n	800cbf0 <oslib_test_002_002_execute+0x1e0>
 800cbea:	f7ff fcb1 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800cbee:	e0dd      	b.n	800cdac <oslib_test_002_002_execute+0x39c>
 800cbf0:	f7ff fcae 	bl	800c550 <osalSysUnlock.lto_priv.5>
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800cbf4:	f7ff fca4 	bl	800c540 <osalSysLock.lto_priv.5>
 800cbf8:	4b0e      	ldr	r3, [pc, #56]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800cbfa:	68da      	ldr	r2, [r3, #12]
 800cbfc:	4b0d      	ldr	r3, [pc, #52]	; (800cc34 <oslib_test_002_002_execute+0x224>)
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	bf0c      	ite	eq
 800cc04:	2301      	moveq	r3, #1
 800cc06:	2300      	movne	r3, #0
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	4913      	ldr	r1, [pc, #76]	; (800cc58 <oslib_test_002_002_execute+0x248>)
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7fa faef 	bl	80071f0 <__test_assert>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d002      	beq.n	800cc1e <oslib_test_002_002_execute+0x20e>
 800cc18:	f7ff fc9a 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800cc1c:	e0c6      	b.n	800cdac <oslib_test_002_002_execute+0x39c>
 800cc1e:	f7ff fc97 	bl	800c550 <osalSysUnlock.lto_priv.5>
  }
  test_end_step(4);

  /* [2.2.5] Emptying the mailbox using chMBFetchI(), no errors
     expected.*/
  test_set_step(5);
 800cc22:	4b03      	ldr	r3, [pc, #12]	; (800cc30 <oslib_test_002_002_execute+0x220>)
 800cc24:	2205      	movs	r2, #5
 800cc26:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < MB_SIZE; i++) {
 800cc28:	2300      	movs	r3, #0
 800cc2a:	9303      	str	r3, [sp, #12]
 800cc2c:	e036      	b.n	800cc9c <oslib_test_002_002_execute+0x28c>
 800cc2e:	bf00      	nop
 800cc30:	20000c6c 	.word	0x20000c6c
 800cc34:	20000830 	.word	0x20000830
 800cc38:	0801ec00 	.word	0x0801ec00
 800cc3c:	0801ec0c 	.word	0x0801ec0c
 800cc40:	0801ec18 	.word	0x0801ec18
 800cc44:	0801ec24 	.word	0x0801ec24
 800cc48:	0801ec48 	.word	0x0801ec48
 800cc4c:	0801e258 	.word	0x0801e258
 800cc50:	0801ec80 	.word	0x0801ec80
 800cc54:	0801ec8c 	.word	0x0801ec8c
 800cc58:	0801ec98 	.word	0x0801ec98
      chSysLock();
 800cc5c:	f7ff fc20 	bl	800c4a0 <chSysLock.lto_priv.28>
      msg1 = chMBFetchI(&mb1, &msg2);
 800cc60:	ab01      	add	r3, sp, #4
 800cc62:	4619      	mov	r1, r3
 800cc64:	4853      	ldr	r0, [pc, #332]	; (800cdb4 <oslib_test_002_002_execute+0x3a4>)
 800cc66:	f7f8 f9db 	bl	8005020 <chMBFetchI>
 800cc6a:	9002      	str	r0, [sp, #8]
      chSysUnlock();
 800cc6c:	f7ff fc28 	bl	800c4c0 <chSysUnlock.lto_priv.28>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800cc70:	9b02      	ldr	r3, [sp, #8]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	bf0c      	ite	eq
 800cc76:	2301      	moveq	r3, #1
 800cc78:	2300      	movne	r3, #0
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	494e      	ldr	r1, [pc, #312]	; (800cdb8 <oslib_test_002_002_execute+0x3a8>)
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fa fab6 	bl	80071f0 <__test_assert>
 800cc84:	4603      	mov	r3, r0
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f040 8090 	bne.w	800cdac <oslib_test_002_002_execute+0x39c>
      test_emit_token(msg2);
 800cc8c:	9b01      	ldr	r3, [sp, #4]
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7fa fb0d 	bl	80072b0 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 800cc96:	9b03      	ldr	r3, [sp, #12]
 800cc98:	3301      	adds	r3, #1
 800cc9a:	9303      	str	r3, [sp, #12]
 800cc9c:	9b03      	ldr	r3, [sp, #12]
 800cc9e:	2b03      	cmp	r3, #3
 800cca0:	d9dc      	bls.n	800cc5c <oslib_test_002_002_execute+0x24c>
    }
    test_assert_sequence("ABCD", "wrong get sequence");
 800cca2:	4946      	ldr	r1, [pc, #280]	; (800cdbc <oslib_test_002_002_execute+0x3ac>)
 800cca4:	4846      	ldr	r0, [pc, #280]	; (800cdc0 <oslib_test_002_002_execute+0x3b0>)
 800cca6:	f7fa fabb 	bl	8007220 <__test_assert_sequence>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d17d      	bne.n	800cdac <oslib_test_002_002_execute+0x39c>
  }
  test_end_step(5);

  /* [2.2.6] Posting and then fetching one more message, no errors
     expected.*/
  test_set_step(6);
 800ccb0:	4b44      	ldr	r3, [pc, #272]	; (800cdc4 <oslib_test_002_002_execute+0x3b4>)
 800ccb2:	2206      	movs	r2, #6
 800ccb4:	601a      	str	r2, [r3, #0]
  {
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800ccb6:	9b03      	ldr	r3, [sp, #12]
 800ccb8:	3342      	adds	r3, #66	; 0x42
 800ccba:	f04f 32ff 	mov.w	r2, #4294967295
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	483c      	ldr	r0, [pc, #240]	; (800cdb4 <oslib_test_002_002_execute+0x3a4>)
 800ccc2:	f7f8 f81d 	bl	8004d00 <chMBPostTimeout>
 800ccc6:	9002      	str	r0, [sp, #8]
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800ccc8:	9b02      	ldr	r3, [sp, #8]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	bf0c      	ite	eq
 800ccce:	2301      	moveq	r3, #1
 800ccd0:	2300      	movne	r3, #0
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	4938      	ldr	r1, [pc, #224]	; (800cdb8 <oslib_test_002_002_execute+0x3a8>)
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fa fa8a 	bl	80071f0 <__test_assert>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d164      	bne.n	800cdac <oslib_test_002_002_execute+0x39c>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800cce2:	ab01      	add	r3, sp, #4
 800cce4:	f04f 32ff 	mov.w	r2, #4294967295
 800cce8:	4619      	mov	r1, r3
 800ccea:	4832      	ldr	r0, [pc, #200]	; (800cdb4 <oslib_test_002_002_execute+0x3a4>)
 800ccec:	f7f8 f938 	bl	8004f60 <chMBFetchTimeout>
 800ccf0:	9002      	str	r0, [sp, #8]
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800ccf2:	9b02      	ldr	r3, [sp, #8]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	bf0c      	ite	eq
 800ccf8:	2301      	moveq	r3, #1
 800ccfa:	2300      	movne	r3, #0
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	492e      	ldr	r1, [pc, #184]	; (800cdb8 <oslib_test_002_002_execute+0x3a8>)
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7fa fa75 	bl	80071f0 <__test_assert>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d14f      	bne.n	800cdac <oslib_test_002_002_execute+0x39c>
  }
  test_end_step(6);

  /* [2.2.7] Testing final conditions. Data pointers must be aligned to
     buffer start, semaphore counters are checked.*/
  test_set_step(7);
 800cd0c:	4b2d      	ldr	r3, [pc, #180]	; (800cdc4 <oslib_test_002_002_execute+0x3b4>)
 800cd0e:	2207      	movs	r2, #7
 800cd10:	601a      	str	r2, [r3, #0]
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800cd12:	f7ff fc15 	bl	800c540 <osalSysLock.lto_priv.5>
 800cd16:	4827      	ldr	r0, [pc, #156]	; (800cdb4 <oslib_test_002_002_execute+0x3a4>)
 800cd18:	f7ff fbfa 	bl	800c510 <chMBGetFreeCountI.lto_priv.1>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b04      	cmp	r3, #4
 800cd20:	bf0c      	ite	eq
 800cd22:	2301      	moveq	r3, #1
 800cd24:	2300      	movne	r3, #0
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	4927      	ldr	r1, [pc, #156]	; (800cdc8 <oslib_test_002_002_execute+0x3b8>)
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fa fa60 	bl	80071f0 <__test_assert>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d002      	beq.n	800cd3c <oslib_test_002_002_execute+0x32c>
 800cd36:	f7ff fc0b 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800cd3a:	e037      	b.n	800cdac <oslib_test_002_002_execute+0x39c>
 800cd3c:	f7ff fc08 	bl	800c550 <osalSysUnlock.lto_priv.5>
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800cd40:	f7ff fbfe 	bl	800c540 <osalSysLock.lto_priv.5>
 800cd44:	481b      	ldr	r0, [pc, #108]	; (800cdb4 <oslib_test_002_002_execute+0x3a4>)
 800cd46:	f7ff fbdb 	bl	800c500 <chMBGetUsedCountI.lto_priv.1>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	bf0c      	ite	eq
 800cd50:	2301      	moveq	r3, #1
 800cd52:	2300      	movne	r3, #0
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	491d      	ldr	r1, [pc, #116]	; (800cdcc <oslib_test_002_002_execute+0x3bc>)
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7fa fa49 	bl	80071f0 <__test_assert>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d002      	beq.n	800cd6a <oslib_test_002_002_execute+0x35a>
 800cd64:	f7ff fbf4 	bl	800c550 <osalSysUnlock.lto_priv.5>
 800cd68:	e020      	b.n	800cdac <oslib_test_002_002_execute+0x39c>
 800cd6a:	f7ff fbf1 	bl	800c550 <osalSysUnlock.lto_priv.5>
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800cd6e:	4b11      	ldr	r3, [pc, #68]	; (800cdb4 <oslib_test_002_002_execute+0x3a4>)
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	4b10      	ldr	r3, [pc, #64]	; (800cdb4 <oslib_test_002_002_execute+0x3a4>)
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	bf0c      	ite	eq
 800cd7a:	2301      	moveq	r3, #1
 800cd7c:	2300      	movne	r3, #0
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	4913      	ldr	r1, [pc, #76]	; (800cdd0 <oslib_test_002_002_execute+0x3c0>)
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fa fa34 	bl	80071f0 <__test_assert>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10e      	bne.n	800cdac <oslib_test_002_002_execute+0x39c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800cd8e:	4b09      	ldr	r3, [pc, #36]	; (800cdb4 <oslib_test_002_002_execute+0x3a4>)
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	4b08      	ldr	r3, [pc, #32]	; (800cdb4 <oslib_test_002_002_execute+0x3a4>)
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	bf0c      	ite	eq
 800cd9a:	2301      	moveq	r3, #1
 800cd9c:	2300      	movne	r3, #0
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	490c      	ldr	r1, [pc, #48]	; (800cdd4 <oslib_test_002_002_execute+0x3c4>)
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7fa fa24 	bl	80071f0 <__test_assert>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
  }
  test_end_step(7);
}
 800cdac:	b005      	add	sp, #20
 800cdae:	f85d fb04 	ldr.w	pc, [sp], #4
 800cdb2:	bf00      	nop
 800cdb4:	20000830 	.word	0x20000830
 800cdb8:	0801e258 	.word	0x0801e258
 800cdbc:	0801ecb0 	.word	0x0801ecb0
 800cdc0:	0801e410 	.word	0x0801e410
 800cdc4:	20000c6c 	.word	0x20000c6c
 800cdc8:	0801ec0c 	.word	0x0801ec0c
 800cdcc:	0801ec18 	.word	0x0801ec18
 800cdd0:	0801ec24 	.word	0x0801ec24
 800cdd4:	0801ec48 	.word	0x0801ec48
	...

0800cde0 <oslib_test_002_003_setup>:
 *   active state.
 * - [2.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_002_003_setup(void) {
 800cde0:	b508      	push	{r3, lr}
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
 800cde2:	2204      	movs	r2, #4
 800cde4:	4902      	ldr	r1, [pc, #8]	; (800cdf0 <oslib_test_002_003_setup+0x10>)
 800cde6:	4803      	ldr	r0, [pc, #12]	; (800cdf4 <oslib_test_002_003_setup+0x14>)
 800cde8:	f7f7 ff2a 	bl	8004c40 <chMBObjectInit>
}
 800cdec:	bf00      	nop
 800cdee:	bd08      	pop	{r3, pc}
 800cdf0:	200015a4 	.word	0x200015a4
 800cdf4:	20000830 	.word	0x20000830
	...

0800ce00 <oslib_test_002_003_teardown>:

static void oslib_test_002_003_teardown(void) {
 800ce00:	b508      	push	{r3, lr}
  chMBReset(&mb1);
 800ce02:	4802      	ldr	r0, [pc, #8]	; (800ce0c <oslib_test_002_003_teardown+0xc>)
 800ce04:	f7f7 ff44 	bl	8004c90 <chMBReset>
}
 800ce08:	bf00      	nop
 800ce0a:	bd08      	pop	{r3, pc}
 800ce0c:	20000830 	.word	0x20000830

0800ce10 <oslib_test_002_003_execute>:

static void oslib_test_002_003_execute(void) {
 800ce10:	b500      	push	{lr}
 800ce12:	b085      	sub	sp, #20
  msg_t msg1, msg2;
  unsigned i;

  /* [2.3.1] Filling the mailbox.*/
  test_set_step(1);
 800ce14:	4b5b      	ldr	r3, [pc, #364]	; (800cf84 <oslib_test_002_003_execute+0x174>)
 800ce16:	2201      	movs	r2, #1
 800ce18:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < MB_SIZE; i++) {
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	9303      	str	r3, [sp, #12]
 800ce1e:	e019      	b.n	800ce54 <oslib_test_002_003_execute+0x44>
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800ce20:	9b03      	ldr	r3, [sp, #12]
 800ce22:	3342      	adds	r3, #66	; 0x42
 800ce24:	f04f 32ff 	mov.w	r2, #4294967295
 800ce28:	4619      	mov	r1, r3
 800ce2a:	4857      	ldr	r0, [pc, #348]	; (800cf88 <oslib_test_002_003_execute+0x178>)
 800ce2c:	f7f7 ff68 	bl	8004d00 <chMBPostTimeout>
 800ce30:	9002      	str	r0, [sp, #8]
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800ce32:	9b02      	ldr	r3, [sp, #8]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	bf0c      	ite	eq
 800ce38:	2301      	moveq	r3, #1
 800ce3a:	2300      	movne	r3, #0
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	4953      	ldr	r1, [pc, #332]	; (800cf8c <oslib_test_002_003_execute+0x17c>)
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fa f9d5 	bl	80071f0 <__test_assert>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f040 8097 	bne.w	800cf7c <oslib_test_002_003_execute+0x16c>
    for (i = 0; i < MB_SIZE; i++) {
 800ce4e:	9b03      	ldr	r3, [sp, #12]
 800ce50:	3301      	adds	r3, #1
 800ce52:	9303      	str	r3, [sp, #12]
 800ce54:	9b03      	ldr	r3, [sp, #12]
 800ce56:	2b03      	cmp	r3, #3
 800ce58:	d9e2      	bls.n	800ce20 <oslib_test_002_003_execute+0x10>
  }
  test_end_step(1);

  /* [2.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 800ce5a:	4b4a      	ldr	r3, [pc, #296]	; (800cf84 <oslib_test_002_003_execute+0x174>)
 800ce5c:	2202      	movs	r2, #2
 800ce5e:	601a      	str	r2, [r3, #0]
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 800ce60:	2201      	movs	r2, #1
 800ce62:	2158      	movs	r1, #88	; 0x58
 800ce64:	4848      	ldr	r0, [pc, #288]	; (800cf88 <oslib_test_002_003_execute+0x178>)
 800ce66:	f7f7 ff4b 	bl	8004d00 <chMBPostTimeout>
 800ce6a:	9002      	str	r0, [sp, #8]
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800ce6c:	9b02      	ldr	r3, [sp, #8]
 800ce6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce72:	bf0c      	ite	eq
 800ce74:	2301      	moveq	r3, #1
 800ce76:	2300      	movne	r3, #0
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	4944      	ldr	r1, [pc, #272]	; (800cf8c <oslib_test_002_003_execute+0x17c>)
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7fa f9b7 	bl	80071f0 <__test_assert>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d179      	bne.n	800cf7c <oslib_test_002_003_execute+0x16c>
    chSysLock();
 800ce88:	f7ff fb0a 	bl	800c4a0 <chSysLock.lto_priv.28>
    msg1 = chMBPostI(&mb1, 'X');
 800ce8c:	2158      	movs	r1, #88	; 0x58
 800ce8e:	483e      	ldr	r0, [pc, #248]	; (800cf88 <oslib_test_002_003_execute+0x178>)
 800ce90:	f7f7 ff96 	bl	8004dc0 <chMBPostI>
 800ce94:	9002      	str	r0, [sp, #8]
    chSysUnlock();
 800ce96:	f7ff fb13 	bl	800c4c0 <chSysUnlock.lto_priv.28>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800ce9a:	9b02      	ldr	r3, [sp, #8]
 800ce9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea0:	bf0c      	ite	eq
 800cea2:	2301      	moveq	r3, #1
 800cea4:	2300      	movne	r3, #0
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	4938      	ldr	r1, [pc, #224]	; (800cf8c <oslib_test_002_003_execute+0x17c>)
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fa f9a0 	bl	80071f0 <__test_assert>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d162      	bne.n	800cf7c <oslib_test_002_003_execute+0x16c>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	2158      	movs	r1, #88	; 0x58
 800ceba:	4833      	ldr	r0, [pc, #204]	; (800cf88 <oslib_test_002_003_execute+0x178>)
 800cebc:	f7f7 ffb8 	bl	8004e30 <chMBPostAheadTimeout>
 800cec0:	9002      	str	r0, [sp, #8]
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800cec2:	9b02      	ldr	r3, [sp, #8]
 800cec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec8:	bf0c      	ite	eq
 800ceca:	2301      	moveq	r3, #1
 800cecc:	2300      	movne	r3, #0
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	492e      	ldr	r1, [pc, #184]	; (800cf8c <oslib_test_002_003_execute+0x17c>)
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fa f98c 	bl	80071f0 <__test_assert>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d14e      	bne.n	800cf7c <oslib_test_002_003_execute+0x16c>
    chSysLock();
 800cede:	f7ff fadf 	bl	800c4a0 <chSysLock.lto_priv.28>
    msg1 = chMBPostAheadI(&mb1, 'X');
 800cee2:	2158      	movs	r1, #88	; 0x58
 800cee4:	4828      	ldr	r0, [pc, #160]	; (800cf88 <oslib_test_002_003_execute+0x178>)
 800cee6:	f7f8 f803 	bl	8004ef0 <chMBPostAheadI>
 800ceea:	9002      	str	r0, [sp, #8]
    chSysUnlock();
 800ceec:	f7ff fae8 	bl	800c4c0 <chSysUnlock.lto_priv.28>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800cef0:	9b02      	ldr	r3, [sp, #8]
 800cef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef6:	bf0c      	ite	eq
 800cef8:	2301      	moveq	r3, #1
 800cefa:	2300      	movne	r3, #0
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	4923      	ldr	r1, [pc, #140]	; (800cf8c <oslib_test_002_003_execute+0x17c>)
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7fa f975 	bl	80071f0 <__test_assert>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d137      	bne.n	800cf7c <oslib_test_002_003_execute+0x16c>
  }
  test_end_step(2);

  /* [2.3.3] Resetting the mailbox. The mailbox is then returned in
     active state.*/
  test_set_step(3);
 800cf0c:	4b1d      	ldr	r3, [pc, #116]	; (800cf84 <oslib_test_002_003_execute+0x174>)
 800cf0e:	2203      	movs	r2, #3
 800cf10:	601a      	str	r2, [r3, #0]
  {
    chMBReset(&mb1);
 800cf12:	481d      	ldr	r0, [pc, #116]	; (800cf88 <oslib_test_002_003_execute+0x178>)
 800cf14:	f7f7 febc 	bl	8004c90 <chMBReset>
    chMBResumeX(&mb1);
 800cf18:	481b      	ldr	r0, [pc, #108]	; (800cf88 <oslib_test_002_003_execute+0x178>)
 800cf1a:	f7ff fb09 	bl	800c530 <chMBResumeX>
  }
  test_end_step(3);

  /* [2.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.*/
  test_set_step(4);
 800cf1e:	4b19      	ldr	r3, [pc, #100]	; (800cf84 <oslib_test_002_003_execute+0x174>)
 800cf20:	2204      	movs	r2, #4
 800cf22:	601a      	str	r2, [r3, #0]
  {
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800cf24:	ab01      	add	r3, sp, #4
 800cf26:	2201      	movs	r2, #1
 800cf28:	4619      	mov	r1, r3
 800cf2a:	4817      	ldr	r0, [pc, #92]	; (800cf88 <oslib_test_002_003_execute+0x178>)
 800cf2c:	f7f8 f818 	bl	8004f60 <chMBFetchTimeout>
 800cf30:	9002      	str	r0, [sp, #8]
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800cf32:	9b02      	ldr	r3, [sp, #8]
 800cf34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf38:	bf0c      	ite	eq
 800cf3a:	2301      	moveq	r3, #1
 800cf3c:	2300      	movne	r3, #0
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	4912      	ldr	r1, [pc, #72]	; (800cf8c <oslib_test_002_003_execute+0x17c>)
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fa f954 	bl	80071f0 <__test_assert>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d116      	bne.n	800cf7c <oslib_test_002_003_execute+0x16c>
    chSysLock();
 800cf4e:	f7ff faa7 	bl	800c4a0 <chSysLock.lto_priv.28>
    msg1 = chMBFetchI(&mb1, &msg2);
 800cf52:	ab01      	add	r3, sp, #4
 800cf54:	4619      	mov	r1, r3
 800cf56:	480c      	ldr	r0, [pc, #48]	; (800cf88 <oslib_test_002_003_execute+0x178>)
 800cf58:	f7f8 f862 	bl	8005020 <chMBFetchI>
 800cf5c:	9002      	str	r0, [sp, #8]
    chSysUnlock();
 800cf5e:	f7ff faaf 	bl	800c4c0 <chSysUnlock.lto_priv.28>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800cf62:	9b02      	ldr	r3, [sp, #8]
 800cf64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf68:	bf0c      	ite	eq
 800cf6a:	2301      	moveq	r3, #1
 800cf6c:	2300      	movne	r3, #0
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	4906      	ldr	r1, [pc, #24]	; (800cf8c <oslib_test_002_003_execute+0x17c>)
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fa f93c 	bl	80071f0 <__test_assert>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
  }
  test_end_step(4);
}
 800cf7c:	b005      	add	sp, #20
 800cf7e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf82:	bf00      	nop
 800cf84:	20000c6c 	.word	0x20000c6c
 800cf88:	20000830 	.word	0x20000830
 800cf8c:	0801e258 	.word	0x0801e258

0800cf90 <chPipeResume>:
 *
 * @param[in] pp        the pointer to an initialized @p pipe_t object
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {
 800cf90:	b082      	sub	sp, #8
 800cf92:	9001      	str	r0, [sp, #4]

  pp->reset = false;
 800cf94:	9b01      	ldr	r3, [sp, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	751a      	strb	r2, [r3, #20]
}
 800cf9a:	bf00      	nop
 800cf9c:	b002      	add	sp, #8
 800cf9e:	4770      	bx	lr

0800cfa0 <oslib_test_003_001_setup>:
 * - [3.1.13] Write wrapping buffer boundary.
 * - [3.1.14] Read wrapping buffer boundary.
 * .
 */

static void oslib_test_003_001_setup(void) {
 800cfa0:	b508      	push	{r3, lr}
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE);
 800cfa2:	2210      	movs	r2, #16
 800cfa4:	4902      	ldr	r1, [pc, #8]	; (800cfb0 <oslib_test_003_001_setup+0x10>)
 800cfa6:	4803      	ldr	r0, [pc, #12]	; (800cfb4 <oslib_test_003_001_setup+0x14>)
 800cfa8:	f7f8 fd9a 	bl	8005ae0 <chPipeObjectInit>
}
 800cfac:	bf00      	nop
 800cfae:	bd08      	pop	{r3, pc}
 800cfb0:	200015b4 	.word	0x200015b4
 800cfb4:	20000858 	.word	0x20000858
	...

0800cfc0 <oslib_test_003_001_execute>:

static void oslib_test_003_001_execute(void) {
 800cfc0:	b500      	push	{lr}
 800cfc2:	b0a5      	sub	sp, #148	; 0x94

  /* [3.1.1] Resetting pipe.*/
  test_set_step(1);
 800cfc4:	4b89      	ldr	r3, [pc, #548]	; (800d1ec <oslib_test_003_001_execute+0x22c>)
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	601a      	str	r2, [r3, #0]
  {
    chPipeReset(&pipe1);
 800cfca:	4889      	ldr	r0, [pc, #548]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800cfcc:	f7f8 fdc0 	bl	8005b50 <chPipeReset>

    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800cfd0:	4b87      	ldr	r3, [pc, #540]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800cfd2:	68da      	ldr	r2, [r3, #12]
 800cfd4:	4b86      	ldr	r3, [pc, #536]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d10b      	bne.n	800cff4 <oslib_test_003_001_execute+0x34>
 800cfdc:	4b84      	ldr	r3, [pc, #528]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800cfde:	689a      	ldr	r2, [r3, #8]
 800cfe0:	4b83      	ldr	r3, [pc, #524]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d105      	bne.n	800cff4 <oslib_test_003_001_execute+0x34>
 800cfe8:	4b81      	ldr	r3, [pc, #516]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800cfea:	691b      	ldr	r3, [r3, #16]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <oslib_test_003_001_execute+0x34>
 800cff0:	2301      	movs	r3, #1
 800cff2:	e000      	b.n	800cff6 <oslib_test_003_001_execute+0x36>
 800cff4:	2300      	movs	r3, #0
 800cff6:	f003 0301 	and.w	r3, r3, #1
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	497d      	ldr	r1, [pc, #500]	; (800d1f4 <oslib_test_003_001_execute+0x234>)
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fa f8f6 	bl	80071f0 <__test_assert>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	f040 8321 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
                "invalid pipe state");
  }
  test_end_step(1);

  /* [3.1.2] Writing data, must fail.*/
  test_set_step(2);
 800d00c:	4b77      	ldr	r3, [pc, #476]	; (800d1ec <oslib_test_003_001_execute+0x22c>)
 800d00e:	2202      	movs	r2, #2
 800d010:	601a      	str	r2, [r3, #0]
  {
    size_t n;

    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800d012:	2300      	movs	r3, #0
 800d014:	2210      	movs	r2, #16
 800d016:	4978      	ldr	r1, [pc, #480]	; (800d1f8 <oslib_test_003_001_execute+0x238>)
 800d018:	4875      	ldr	r0, [pc, #468]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d01a:	f7f8 fdd1 	bl	8005bc0 <chPipeWriteTimeout>
 800d01e:	9023      	str	r0, [sp, #140]	; 0x8c
    test_assert(n == 0, "not reset");
 800d020:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d022:	2b00      	cmp	r3, #0
 800d024:	bf0c      	ite	eq
 800d026:	2301      	moveq	r3, #1
 800d028:	2300      	movne	r3, #0
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	4973      	ldr	r1, [pc, #460]	; (800d1fc <oslib_test_003_001_execute+0x23c>)
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fa f8de 	bl	80071f0 <__test_assert>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	f040 8309 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800d03c:	4b6c      	ldr	r3, [pc, #432]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d03e:	68da      	ldr	r2, [r3, #12]
 800d040:	4b6b      	ldr	r3, [pc, #428]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	429a      	cmp	r2, r3
 800d046:	d10b      	bne.n	800d060 <oslib_test_003_001_execute+0xa0>
 800d048:	4b69      	ldr	r3, [pc, #420]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d04a:	689a      	ldr	r2, [r3, #8]
 800d04c:	4b68      	ldr	r3, [pc, #416]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	429a      	cmp	r2, r3
 800d052:	d105      	bne.n	800d060 <oslib_test_003_001_execute+0xa0>
 800d054:	4b66      	ldr	r3, [pc, #408]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d056:	691b      	ldr	r3, [r3, #16]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d101      	bne.n	800d060 <oslib_test_003_001_execute+0xa0>
 800d05c:	2301      	movs	r3, #1
 800d05e:	e000      	b.n	800d062 <oslib_test_003_001_execute+0xa2>
 800d060:	2300      	movs	r3, #0
 800d062:	f003 0301 	and.w	r3, r3, #1
 800d066:	b2db      	uxtb	r3, r3
 800d068:	4962      	ldr	r1, [pc, #392]	; (800d1f4 <oslib_test_003_001_execute+0x234>)
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fa f8c0 	bl	80071f0 <__test_assert>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	f040 82eb 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
                "invalid pipe state");
  }
  test_end_step(2);

  /* [3.1.3] Reading data, must fail.*/
  test_set_step(3);
 800d078:	4b5c      	ldr	r3, [pc, #368]	; (800d1ec <oslib_test_003_001_execute+0x22c>)
 800d07a:	2203      	movs	r2, #3
 800d07c:	601a      	str	r2, [r3, #0]
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800d07e:	4669      	mov	r1, sp
 800d080:	2300      	movs	r3, #0
 800d082:	2210      	movs	r2, #16
 800d084:	485a      	ldr	r0, [pc, #360]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d086:	f7f8 fdeb 	bl	8005c60 <chPipeReadTimeout>
 800d08a:	9022      	str	r0, [sp, #136]	; 0x88
    test_assert(n == 0, "not reset");
 800d08c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d08e:	2b00      	cmp	r3, #0
 800d090:	bf0c      	ite	eq
 800d092:	2301      	moveq	r3, #1
 800d094:	2300      	movne	r3, #0
 800d096:	b2db      	uxtb	r3, r3
 800d098:	4958      	ldr	r1, [pc, #352]	; (800d1fc <oslib_test_003_001_execute+0x23c>)
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fa f8a8 	bl	80071f0 <__test_assert>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f040 82d3 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800d0a8:	4b51      	ldr	r3, [pc, #324]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d0aa:	68da      	ldr	r2, [r3, #12]
 800d0ac:	4b50      	ldr	r3, [pc, #320]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d10b      	bne.n	800d0cc <oslib_test_003_001_execute+0x10c>
 800d0b4:	4b4e      	ldr	r3, [pc, #312]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d0b6:	689a      	ldr	r2, [r3, #8]
 800d0b8:	4b4d      	ldr	r3, [pc, #308]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d105      	bne.n	800d0cc <oslib_test_003_001_execute+0x10c>
 800d0c0:	4b4b      	ldr	r3, [pc, #300]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d0c2:	691b      	ldr	r3, [r3, #16]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d101      	bne.n	800d0cc <oslib_test_003_001_execute+0x10c>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e000      	b.n	800d0ce <oslib_test_003_001_execute+0x10e>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	f003 0301 	and.w	r3, r3, #1
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	4947      	ldr	r1, [pc, #284]	; (800d1f4 <oslib_test_003_001_execute+0x234>)
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7fa f88a 	bl	80071f0 <__test_assert>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	f040 82b5 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
                "invalid pipe state");
  }
  test_end_step(3);

  /* [3.1.4] Reactivating pipe.*/
  test_set_step(4);
 800d0e4:	4b41      	ldr	r3, [pc, #260]	; (800d1ec <oslib_test_003_001_execute+0x22c>)
 800d0e6:	2204      	movs	r2, #4
 800d0e8:	601a      	str	r2, [r3, #0]
  {
    chPipeResume(&pipe1);
 800d0ea:	4841      	ldr	r0, [pc, #260]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d0ec:	f7ff ff50 	bl	800cf90 <chPipeResume>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800d0f0:	4b3f      	ldr	r3, [pc, #252]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d0f2:	68da      	ldr	r2, [r3, #12]
 800d0f4:	4b3e      	ldr	r3, [pc, #248]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d10b      	bne.n	800d114 <oslib_test_003_001_execute+0x154>
 800d0fc:	4b3c      	ldr	r3, [pc, #240]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d0fe:	689a      	ldr	r2, [r3, #8]
 800d100:	4b3b      	ldr	r3, [pc, #236]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	429a      	cmp	r2, r3
 800d106:	d105      	bne.n	800d114 <oslib_test_003_001_execute+0x154>
 800d108:	4b39      	ldr	r3, [pc, #228]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d101      	bne.n	800d114 <oslib_test_003_001_execute+0x154>
 800d110:	2301      	movs	r3, #1
 800d112:	e000      	b.n	800d116 <oslib_test_003_001_execute+0x156>
 800d114:	2300      	movs	r3, #0
 800d116:	f003 0301 	and.w	r3, r3, #1
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	4935      	ldr	r1, [pc, #212]	; (800d1f4 <oslib_test_003_001_execute+0x234>)
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fa f866 	bl	80071f0 <__test_assert>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	f040 8291 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
                "invalid pipe state");
  }
  test_end_step(4);

  /* [3.1.5] Filling whole pipe.*/
  test_set_step(5);
 800d12c:	4b2f      	ldr	r3, [pc, #188]	; (800d1ec <oslib_test_003_001_execute+0x22c>)
 800d12e:	2205      	movs	r2, #5
 800d130:	601a      	str	r2, [r3, #0]
  {
    size_t n;

    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800d132:	2300      	movs	r3, #0
 800d134:	2210      	movs	r2, #16
 800d136:	4930      	ldr	r1, [pc, #192]	; (800d1f8 <oslib_test_003_001_execute+0x238>)
 800d138:	482d      	ldr	r0, [pc, #180]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d13a:	f7f8 fd41 	bl	8005bc0 <chPipeWriteTimeout>
 800d13e:	9021      	str	r0, [sp, #132]	; 0x84
    test_assert(n == PIPE_SIZE, "wrong size");
 800d140:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d142:	2b10      	cmp	r3, #16
 800d144:	bf0c      	ite	eq
 800d146:	2301      	moveq	r3, #1
 800d148:	2300      	movne	r3, #0
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	492c      	ldr	r1, [pc, #176]	; (800d200 <oslib_test_003_001_execute+0x240>)
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fa f84e 	bl	80071f0 <__test_assert>
 800d154:	4603      	mov	r3, r0
 800d156:	2b00      	cmp	r3, #0
 800d158:	f040 8279 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800d15c:	4b24      	ldr	r3, [pc, #144]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d15e:	68da      	ldr	r2, [r3, #12]
 800d160:	4b23      	ldr	r3, [pc, #140]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	429a      	cmp	r2, r3
 800d166:	d10b      	bne.n	800d180 <oslib_test_003_001_execute+0x1c0>
 800d168:	4b21      	ldr	r3, [pc, #132]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d16a:	689a      	ldr	r2, [r3, #8]
 800d16c:	4b20      	ldr	r3, [pc, #128]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	429a      	cmp	r2, r3
 800d172:	d105      	bne.n	800d180 <oslib_test_003_001_execute+0x1c0>
 800d174:	4b1e      	ldr	r3, [pc, #120]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d176:	691b      	ldr	r3, [r3, #16]
 800d178:	2b10      	cmp	r3, #16
 800d17a:	d101      	bne.n	800d180 <oslib_test_003_001_execute+0x1c0>
 800d17c:	2301      	movs	r3, #1
 800d17e:	e000      	b.n	800d182 <oslib_test_003_001_execute+0x1c2>
 800d180:	2300      	movs	r3, #0
 800d182:	f003 0301 	and.w	r3, r3, #1
 800d186:	b2db      	uxtb	r3, r3
 800d188:	491a      	ldr	r1, [pc, #104]	; (800d1f4 <oslib_test_003_001_execute+0x234>)
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7fa f830 	bl	80071f0 <__test_assert>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	f040 825b 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
                "invalid pipe state");
  }
  test_end_step(5);

  /* [3.1.6] Emptying pipe.*/
  test_set_step(6);
 800d198:	4b14      	ldr	r3, [pc, #80]	; (800d1ec <oslib_test_003_001_execute+0x22c>)
 800d19a:	2206      	movs	r2, #6
 800d19c:	601a      	str	r2, [r3, #0]
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800d19e:	a904      	add	r1, sp, #16
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	2210      	movs	r2, #16
 800d1a4:	4812      	ldr	r0, [pc, #72]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d1a6:	f7f8 fd5b 	bl	8005c60 <chPipeReadTimeout>
 800d1aa:	9020      	str	r0, [sp, #128]	; 0x80
    test_assert(n == PIPE_SIZE, "wrong size");
 800d1ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d1ae:	2b10      	cmp	r3, #16
 800d1b0:	bf0c      	ite	eq
 800d1b2:	2301      	moveq	r3, #1
 800d1b4:	2300      	movne	r3, #0
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	4911      	ldr	r1, [pc, #68]	; (800d200 <oslib_test_003_001_execute+0x240>)
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fa f818 	bl	80071f0 <__test_assert>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	f040 8243 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800d1c8:	4b09      	ldr	r3, [pc, #36]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d1ca:	68da      	ldr	r2, [r3, #12]
 800d1cc:	4b08      	ldr	r3, [pc, #32]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d117      	bne.n	800d204 <oslib_test_003_001_execute+0x244>
 800d1d4:	4b06      	ldr	r3, [pc, #24]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d1d6:	689a      	ldr	r2, [r3, #8]
 800d1d8:	4b05      	ldr	r3, [pc, #20]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d111      	bne.n	800d204 <oslib_test_003_001_execute+0x244>
 800d1e0:	4b03      	ldr	r3, [pc, #12]	; (800d1f0 <oslib_test_003_001_execute+0x230>)
 800d1e2:	691b      	ldr	r3, [r3, #16]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d10d      	bne.n	800d204 <oslib_test_003_001_execute+0x244>
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e00c      	b.n	800d206 <oslib_test_003_001_execute+0x246>
 800d1ec:	20000c6c 	.word	0x20000c6c
 800d1f0:	20000858 	.word	0x20000858
 800d1f4:	0801ed20 	.word	0x0801ed20
 800d1f8:	0801ed0c 	.word	0x0801ed0c
 800d1fc:	0801ed34 	.word	0x0801ed34
 800d200:	0801ec00 	.word	0x0801ec00
 800d204:	2300      	movs	r3, #0
 800d206:	f003 0301 	and.w	r3, r3, #1
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	497d      	ldr	r1, [pc, #500]	; (800d404 <oslib_test_003_001_execute+0x444>)
 800d20e:	4618      	mov	r0, r3
 800d210:	f7f9 ffee 	bl	80071f0 <__test_assert>
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	f040 8219 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == 0),
                "invalid pipe state");
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800d21c:	ab04      	add	r3, sp, #16
 800d21e:	2210      	movs	r2, #16
 800d220:	4619      	mov	r1, r3
 800d222:	4879      	ldr	r0, [pc, #484]	; (800d408 <oslib_test_003_001_execute+0x448>)
 800d224:	f00f fb22 	bl	801c86c <memcmp>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	bf0c      	ite	eq
 800d22e:	2301      	moveq	r3, #1
 800d230:	2300      	movne	r3, #0
 800d232:	b2db      	uxtb	r3, r3
 800d234:	4975      	ldr	r1, [pc, #468]	; (800d40c <oslib_test_003_001_execute+0x44c>)
 800d236:	4618      	mov	r0, r3
 800d238:	f7f9 ffda 	bl	80071f0 <__test_assert>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	f040 8205 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
  }
  test_end_step(6);

  /* [3.1.7] Small write.*/
  test_set_step(7);
 800d244:	4b72      	ldr	r3, [pc, #456]	; (800d410 <oslib_test_003_001_execute+0x450>)
 800d246:	2207      	movs	r2, #7
 800d248:	601a      	str	r2, [r3, #0]
  {
    size_t n;

    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 800d24a:	2300      	movs	r3, #0
 800d24c:	2204      	movs	r2, #4
 800d24e:	496e      	ldr	r1, [pc, #440]	; (800d408 <oslib_test_003_001_execute+0x448>)
 800d250:	4870      	ldr	r0, [pc, #448]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d252:	f7f8 fcb5 	bl	8005bc0 <chPipeWriteTimeout>
 800d256:	901f      	str	r0, [sp, #124]	; 0x7c
    test_assert(n == 4, "wrong size");
 800d258:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d25a:	2b04      	cmp	r3, #4
 800d25c:	bf0c      	ite	eq
 800d25e:	2301      	moveq	r3, #1
 800d260:	2300      	movne	r3, #0
 800d262:	b2db      	uxtb	r3, r3
 800d264:	496c      	ldr	r1, [pc, #432]	; (800d418 <oslib_test_003_001_execute+0x458>)
 800d266:	4618      	mov	r0, r3
 800d268:	f7f9 ffc2 	bl	80071f0 <__test_assert>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	f040 81ed 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800d274:	4b67      	ldr	r3, [pc, #412]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d276:	68da      	ldr	r2, [r3, #12]
 800d278:	4b66      	ldr	r3, [pc, #408]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d00b      	beq.n	800d298 <oslib_test_003_001_execute+0x2d8>
 800d280:	4b64      	ldr	r3, [pc, #400]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d282:	68da      	ldr	r2, [r3, #12]
 800d284:	4b63      	ldr	r3, [pc, #396]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d105      	bne.n	800d298 <oslib_test_003_001_execute+0x2d8>
 800d28c:	4b61      	ldr	r3, [pc, #388]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d28e:	691b      	ldr	r3, [r3, #16]
 800d290:	2b04      	cmp	r3, #4
 800d292:	d101      	bne.n	800d298 <oslib_test_003_001_execute+0x2d8>
 800d294:	2301      	movs	r3, #1
 800d296:	e000      	b.n	800d29a <oslib_test_003_001_execute+0x2da>
 800d298:	2300      	movs	r3, #0
 800d29a:	f003 0301 	and.w	r3, r3, #1
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	4958      	ldr	r1, [pc, #352]	; (800d404 <oslib_test_003_001_execute+0x444>)
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7f9 ffa4 	bl	80071f0 <__test_assert>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	f040 81cf 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
                "invalid pipe state");
  }
  test_end_step(7);

  /* [3.1.8] Filling remaining space.*/
  test_set_step(8);
 800d2b0:	4b57      	ldr	r3, [pc, #348]	; (800d410 <oslib_test_003_001_execute+0x450>)
 800d2b2:	2208      	movs	r2, #8
 800d2b4:	601a      	str	r2, [r3, #0]
  {
    size_t n;

    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	220c      	movs	r2, #12
 800d2ba:	4953      	ldr	r1, [pc, #332]	; (800d408 <oslib_test_003_001_execute+0x448>)
 800d2bc:	4855      	ldr	r0, [pc, #340]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d2be:	f7f8 fc7f 	bl	8005bc0 <chPipeWriteTimeout>
 800d2c2:	901e      	str	r0, [sp, #120]	; 0x78
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 800d2c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d2c6:	2b0c      	cmp	r3, #12
 800d2c8:	bf0c      	ite	eq
 800d2ca:	2301      	moveq	r3, #1
 800d2cc:	2300      	movne	r3, #0
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	4951      	ldr	r1, [pc, #324]	; (800d418 <oslib_test_003_001_execute+0x458>)
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7f9 ff8c 	bl	80071f0 <__test_assert>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f040 81b7 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800d2e0:	4b4c      	ldr	r3, [pc, #304]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d2e2:	68da      	ldr	r2, [r3, #12]
 800d2e4:	4b4b      	ldr	r3, [pc, #300]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d10b      	bne.n	800d304 <oslib_test_003_001_execute+0x344>
 800d2ec:	4b49      	ldr	r3, [pc, #292]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d2ee:	689a      	ldr	r2, [r3, #8]
 800d2f0:	4b48      	ldr	r3, [pc, #288]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d105      	bne.n	800d304 <oslib_test_003_001_execute+0x344>
 800d2f8:	4b46      	ldr	r3, [pc, #280]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d2fa:	691b      	ldr	r3, [r3, #16]
 800d2fc:	2b10      	cmp	r3, #16
 800d2fe:	d101      	bne.n	800d304 <oslib_test_003_001_execute+0x344>
 800d300:	2301      	movs	r3, #1
 800d302:	e000      	b.n	800d306 <oslib_test_003_001_execute+0x346>
 800d304:	2300      	movs	r3, #0
 800d306:	f003 0301 	and.w	r3, r3, #1
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	493d      	ldr	r1, [pc, #244]	; (800d404 <oslib_test_003_001_execute+0x444>)
 800d30e:	4618      	mov	r0, r3
 800d310:	f7f9 ff6e 	bl	80071f0 <__test_assert>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	f040 8199 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
                "invalid pipe state");
  }
  test_end_step(8);

  /* [3.1.9] Small Read.*/
  test_set_step(9);
 800d31c:	4b3c      	ldr	r3, [pc, #240]	; (800d410 <oslib_test_003_001_execute+0x450>)
 800d31e:	2209      	movs	r2, #9
 800d320:	601a      	str	r2, [r3, #0]
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 800d322:	a908      	add	r1, sp, #32
 800d324:	2300      	movs	r3, #0
 800d326:	2204      	movs	r2, #4
 800d328:	483a      	ldr	r0, [pc, #232]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d32a:	f7f8 fc99 	bl	8005c60 <chPipeReadTimeout>
 800d32e:	901d      	str	r0, [sp, #116]	; 0x74
    test_assert(n == 4, "wrong size");
 800d330:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d332:	2b04      	cmp	r3, #4
 800d334:	bf0c      	ite	eq
 800d336:	2301      	moveq	r3, #1
 800d338:	2300      	movne	r3, #0
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	4936      	ldr	r1, [pc, #216]	; (800d418 <oslib_test_003_001_execute+0x458>)
 800d33e:	4618      	mov	r0, r3
 800d340:	f7f9 ff56 	bl	80071f0 <__test_assert>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	f040 8181 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 800d34c:	4b31      	ldr	r3, [pc, #196]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d34e:	68da      	ldr	r2, [r3, #12]
 800d350:	4b30      	ldr	r3, [pc, #192]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	429a      	cmp	r2, r3
 800d356:	d00b      	beq.n	800d370 <oslib_test_003_001_execute+0x3b0>
 800d358:	4b2e      	ldr	r3, [pc, #184]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d35a:	689a      	ldr	r2, [r3, #8]
 800d35c:	4b2d      	ldr	r3, [pc, #180]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	429a      	cmp	r2, r3
 800d362:	d105      	bne.n	800d370 <oslib_test_003_001_execute+0x3b0>
 800d364:	4b2b      	ldr	r3, [pc, #172]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d366:	691b      	ldr	r3, [r3, #16]
 800d368:	2b0c      	cmp	r3, #12
 800d36a:	d101      	bne.n	800d370 <oslib_test_003_001_execute+0x3b0>
 800d36c:	2301      	movs	r3, #1
 800d36e:	e000      	b.n	800d372 <oslib_test_003_001_execute+0x3b2>
 800d370:	2300      	movs	r3, #0
 800d372:	f003 0301 	and.w	r3, r3, #1
 800d376:	b2db      	uxtb	r3, r3
 800d378:	4922      	ldr	r1, [pc, #136]	; (800d404 <oslib_test_003_001_execute+0x444>)
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7f9 ff38 	bl	80071f0 <__test_assert>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	f040 8163 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE - 4),
                "invalid pipe state");
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 800d388:	ab08      	add	r3, sp, #32
 800d38a:	2204      	movs	r2, #4
 800d38c:	4619      	mov	r1, r3
 800d38e:	481e      	ldr	r0, [pc, #120]	; (800d408 <oslib_test_003_001_execute+0x448>)
 800d390:	f00f fa6c 	bl	801c86c <memcmp>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	bf0c      	ite	eq
 800d39a:	2301      	moveq	r3, #1
 800d39c:	2300      	movne	r3, #0
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	491a      	ldr	r1, [pc, #104]	; (800d40c <oslib_test_003_001_execute+0x44c>)
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7f9 ff24 	bl	80071f0 <__test_assert>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f040 814f 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
  }
  test_end_step(9);

  /* [3.1.10] Reading remaining data.*/
  test_set_step(10);
 800d3b0:	4b17      	ldr	r3, [pc, #92]	; (800d410 <oslib_test_003_001_execute+0x450>)
 800d3b2:	220a      	movs	r2, #10
 800d3b4:	601a      	str	r2, [r3, #0]
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 800d3b6:	a90c      	add	r1, sp, #48	; 0x30
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	220c      	movs	r2, #12
 800d3bc:	4815      	ldr	r0, [pc, #84]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d3be:	f7f8 fc4f 	bl	8005c60 <chPipeReadTimeout>
 800d3c2:	901c      	str	r0, [sp, #112]	; 0x70
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 800d3c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d3c6:	2b0c      	cmp	r3, #12
 800d3c8:	bf0c      	ite	eq
 800d3ca:	2301      	moveq	r3, #1
 800d3cc:	2300      	movne	r3, #0
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	4911      	ldr	r1, [pc, #68]	; (800d418 <oslib_test_003_001_execute+0x458>)
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7f9 ff0c 	bl	80071f0 <__test_assert>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f040 8137 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800d3e0:	4b0c      	ldr	r3, [pc, #48]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d3e2:	68da      	ldr	r2, [r3, #12]
 800d3e4:	4b0b      	ldr	r3, [pc, #44]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d117      	bne.n	800d41c <oslib_test_003_001_execute+0x45c>
 800d3ec:	4b09      	ldr	r3, [pc, #36]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d3ee:	689a      	ldr	r2, [r3, #8]
 800d3f0:	4b08      	ldr	r3, [pc, #32]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d111      	bne.n	800d41c <oslib_test_003_001_execute+0x45c>
 800d3f8:	4b06      	ldr	r3, [pc, #24]	; (800d414 <oslib_test_003_001_execute+0x454>)
 800d3fa:	691b      	ldr	r3, [r3, #16]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10d      	bne.n	800d41c <oslib_test_003_001_execute+0x45c>
 800d400:	2301      	movs	r3, #1
 800d402:	e00c      	b.n	800d41e <oslib_test_003_001_execute+0x45e>
 800d404:	0801ed20 	.word	0x0801ed20
 800d408:	0801ed0c 	.word	0x0801ed0c
 800d40c:	0801ed40 	.word	0x0801ed40
 800d410:	20000c6c 	.word	0x20000c6c
 800d414:	20000858 	.word	0x20000858
 800d418:	0801ec00 	.word	0x0801ec00
 800d41c:	2300      	movs	r3, #0
 800d41e:	f003 0301 	and.w	r3, r3, #1
 800d422:	b2db      	uxtb	r3, r3
 800d424:	498b      	ldr	r1, [pc, #556]	; (800d654 <oslib_test_003_001_execute+0x694>)
 800d426:	4618      	mov	r0, r3
 800d428:	f7f9 fee2 	bl	80071f0 <__test_assert>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f040 810d 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == 0),
                "invalid pipe state");
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 800d434:	ab0c      	add	r3, sp, #48	; 0x30
 800d436:	220c      	movs	r2, #12
 800d438:	4619      	mov	r1, r3
 800d43a:	4887      	ldr	r0, [pc, #540]	; (800d658 <oslib_test_003_001_execute+0x698>)
 800d43c:	f00f fa16 	bl	801c86c <memcmp>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	bf0c      	ite	eq
 800d446:	2301      	moveq	r3, #1
 800d448:	2300      	movne	r3, #0
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	4983      	ldr	r1, [pc, #524]	; (800d65c <oslib_test_003_001_execute+0x69c>)
 800d44e:	4618      	mov	r0, r3
 800d450:	f7f9 fece 	bl	80071f0 <__test_assert>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	f040 80f9 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
  }
  test_end_step(10);

  /* [3.1.11] Small Write.*/
  test_set_step(11);
 800d45c:	4b80      	ldr	r3, [pc, #512]	; (800d660 <oslib_test_003_001_execute+0x6a0>)
 800d45e:	220b      	movs	r2, #11
 800d460:	601a      	str	r2, [r3, #0]
  {
    size_t n;

    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 800d462:	2300      	movs	r3, #0
 800d464:	2205      	movs	r2, #5
 800d466:	497c      	ldr	r1, [pc, #496]	; (800d658 <oslib_test_003_001_execute+0x698>)
 800d468:	487e      	ldr	r0, [pc, #504]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d46a:	f7f8 fba9 	bl	8005bc0 <chPipeWriteTimeout>
 800d46e:	901b      	str	r0, [sp, #108]	; 0x6c
    test_assert(n == 5, "wrong size");
 800d470:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d472:	2b05      	cmp	r3, #5
 800d474:	bf0c      	ite	eq
 800d476:	2301      	moveq	r3, #1
 800d478:	2300      	movne	r3, #0
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	497a      	ldr	r1, [pc, #488]	; (800d668 <oslib_test_003_001_execute+0x6a8>)
 800d47e:	4618      	mov	r0, r3
 800d480:	f7f9 feb6 	bl	80071f0 <__test_assert>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	f040 80e1 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800d48c:	4b75      	ldr	r3, [pc, #468]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d48e:	68da      	ldr	r2, [r3, #12]
 800d490:	4b74      	ldr	r3, [pc, #464]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	429a      	cmp	r2, r3
 800d496:	d00b      	beq.n	800d4b0 <oslib_test_003_001_execute+0x4f0>
 800d498:	4b72      	ldr	r3, [pc, #456]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d49a:	68da      	ldr	r2, [r3, #12]
 800d49c:	4b71      	ldr	r3, [pc, #452]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d105      	bne.n	800d4b0 <oslib_test_003_001_execute+0x4f0>
 800d4a4:	4b6f      	ldr	r3, [pc, #444]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d4a6:	691b      	ldr	r3, [r3, #16]
 800d4a8:	2b05      	cmp	r3, #5
 800d4aa:	d101      	bne.n	800d4b0 <oslib_test_003_001_execute+0x4f0>
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	e000      	b.n	800d4b2 <oslib_test_003_001_execute+0x4f2>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	f003 0301 	and.w	r3, r3, #1
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	4966      	ldr	r1, [pc, #408]	; (800d654 <oslib_test_003_001_execute+0x694>)
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7f9 fe98 	bl	80071f0 <__test_assert>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	f040 80c3 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
                "invalid pipe state");
  }
  test_end_step(11);

  /* [3.1.12] Small Read.*/
  test_set_step(12);
 800d4c8:	4b65      	ldr	r3, [pc, #404]	; (800d660 <oslib_test_003_001_execute+0x6a0>)
 800d4ca:	220c      	movs	r2, #12
 800d4cc:	601a      	str	r2, [r3, #0]
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 800d4ce:	a910      	add	r1, sp, #64	; 0x40
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	2205      	movs	r2, #5
 800d4d4:	4863      	ldr	r0, [pc, #396]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d4d6:	f7f8 fbc3 	bl	8005c60 <chPipeReadTimeout>
 800d4da:	901a      	str	r0, [sp, #104]	; 0x68
    test_assert(n == 5, "wrong size");
 800d4dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d4de:	2b05      	cmp	r3, #5
 800d4e0:	bf0c      	ite	eq
 800d4e2:	2301      	moveq	r3, #1
 800d4e4:	2300      	movne	r3, #0
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	495f      	ldr	r1, [pc, #380]	; (800d668 <oslib_test_003_001_execute+0x6a8>)
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7f9 fe80 	bl	80071f0 <__test_assert>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f040 80ab 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800d4f8:	4b5a      	ldr	r3, [pc, #360]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d4fa:	68da      	ldr	r2, [r3, #12]
 800d4fc:	4b59      	ldr	r3, [pc, #356]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	429a      	cmp	r2, r3
 800d502:	d10b      	bne.n	800d51c <oslib_test_003_001_execute+0x55c>
 800d504:	4b57      	ldr	r3, [pc, #348]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d506:	689a      	ldr	r2, [r3, #8]
 800d508:	4b56      	ldr	r3, [pc, #344]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d005      	beq.n	800d51c <oslib_test_003_001_execute+0x55c>
 800d510:	4b54      	ldr	r3, [pc, #336]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d512:	691b      	ldr	r3, [r3, #16]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d101      	bne.n	800d51c <oslib_test_003_001_execute+0x55c>
 800d518:	2301      	movs	r3, #1
 800d51a:	e000      	b.n	800d51e <oslib_test_003_001_execute+0x55e>
 800d51c:	2300      	movs	r3, #0
 800d51e:	f003 0301 	and.w	r3, r3, #1
 800d522:	b2db      	uxtb	r3, r3
 800d524:	494b      	ldr	r1, [pc, #300]	; (800d654 <oslib_test_003_001_execute+0x694>)
 800d526:	4618      	mov	r0, r3
 800d528:	f7f9 fe62 	bl	80071f0 <__test_assert>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f040 808d 	bne.w	800d64e <oslib_test_003_001_execute+0x68e>
                (pipe1.wrptr != pipe1.buffer) &&
                (pipe1.cnt == 0),
                "invalid pipe state");
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 800d534:	ab10      	add	r3, sp, #64	; 0x40
 800d536:	2205      	movs	r2, #5
 800d538:	4619      	mov	r1, r3
 800d53a:	4847      	ldr	r0, [pc, #284]	; (800d658 <oslib_test_003_001_execute+0x698>)
 800d53c:	f00f f996 	bl	801c86c <memcmp>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	bf0c      	ite	eq
 800d546:	2301      	moveq	r3, #1
 800d548:	2300      	movne	r3, #0
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	4943      	ldr	r1, [pc, #268]	; (800d65c <oslib_test_003_001_execute+0x69c>)
 800d54e:	4618      	mov	r0, r3
 800d550:	f7f9 fe4e 	bl	80071f0 <__test_assert>
 800d554:	4603      	mov	r3, r0
 800d556:	2b00      	cmp	r3, #0
 800d558:	d179      	bne.n	800d64e <oslib_test_003_001_execute+0x68e>
  }
  test_end_step(12);

  /* [3.1.13] Write wrapping buffer boundary.*/
  test_set_step(13);
 800d55a:	4b41      	ldr	r3, [pc, #260]	; (800d660 <oslib_test_003_001_execute+0x6a0>)
 800d55c:	220d      	movs	r2, #13
 800d55e:	601a      	str	r2, [r3, #0]
  {
    size_t n;

    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800d560:	2300      	movs	r3, #0
 800d562:	2210      	movs	r2, #16
 800d564:	493c      	ldr	r1, [pc, #240]	; (800d658 <oslib_test_003_001_execute+0x698>)
 800d566:	483f      	ldr	r0, [pc, #252]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d568:	f7f8 fb2a 	bl	8005bc0 <chPipeWriteTimeout>
 800d56c:	9019      	str	r0, [sp, #100]	; 0x64
    test_assert(n == PIPE_SIZE, "wrong size");
 800d56e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d570:	2b10      	cmp	r3, #16
 800d572:	bf0c      	ite	eq
 800d574:	2301      	moveq	r3, #1
 800d576:	2300      	movne	r3, #0
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	493b      	ldr	r1, [pc, #236]	; (800d668 <oslib_test_003_001_execute+0x6a8>)
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7f9 fe37 	bl	80071f0 <__test_assert>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d162      	bne.n	800d64e <oslib_test_003_001_execute+0x68e>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800d588:	4b36      	ldr	r3, [pc, #216]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d58a:	68da      	ldr	r2, [r3, #12]
 800d58c:	4b35      	ldr	r3, [pc, #212]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	429a      	cmp	r2, r3
 800d592:	d10b      	bne.n	800d5ac <oslib_test_003_001_execute+0x5ec>
 800d594:	4b33      	ldr	r3, [pc, #204]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d596:	689a      	ldr	r2, [r3, #8]
 800d598:	4b32      	ldr	r3, [pc, #200]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d005      	beq.n	800d5ac <oslib_test_003_001_execute+0x5ec>
 800d5a0:	4b30      	ldr	r3, [pc, #192]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d5a2:	691b      	ldr	r3, [r3, #16]
 800d5a4:	2b10      	cmp	r3, #16
 800d5a6:	d101      	bne.n	800d5ac <oslib_test_003_001_execute+0x5ec>
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	e000      	b.n	800d5ae <oslib_test_003_001_execute+0x5ee>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	f003 0301 	and.w	r3, r3, #1
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	4927      	ldr	r1, [pc, #156]	; (800d654 <oslib_test_003_001_execute+0x694>)
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7f9 fe1a 	bl	80071f0 <__test_assert>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d145      	bne.n	800d64e <oslib_test_003_001_execute+0x68e>
                "invalid pipe state");
  }
  test_end_step(13);

  /* [3.1.14] Read wrapping buffer boundary.*/
  test_set_step(14);
 800d5c2:	4b27      	ldr	r3, [pc, #156]	; (800d660 <oslib_test_003_001_execute+0x6a0>)
 800d5c4:	220e      	movs	r2, #14
 800d5c6:	601a      	str	r2, [r3, #0]
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800d5c8:	a914      	add	r1, sp, #80	; 0x50
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	2210      	movs	r2, #16
 800d5ce:	4825      	ldr	r0, [pc, #148]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d5d0:	f7f8 fb46 	bl	8005c60 <chPipeReadTimeout>
 800d5d4:	9018      	str	r0, [sp, #96]	; 0x60
    test_assert(n == PIPE_SIZE, "wrong size");
 800d5d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d5d8:	2b10      	cmp	r3, #16
 800d5da:	bf0c      	ite	eq
 800d5dc:	2301      	moveq	r3, #1
 800d5de:	2300      	movne	r3, #0
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	4921      	ldr	r1, [pc, #132]	; (800d668 <oslib_test_003_001_execute+0x6a8>)
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7f9 fe03 	bl	80071f0 <__test_assert>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d12e      	bne.n	800d64e <oslib_test_003_001_execute+0x68e>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800d5f0:	4b1c      	ldr	r3, [pc, #112]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d5f2:	68da      	ldr	r2, [r3, #12]
 800d5f4:	4b1b      	ldr	r3, [pc, #108]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d10b      	bne.n	800d614 <oslib_test_003_001_execute+0x654>
 800d5fc:	4b19      	ldr	r3, [pc, #100]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d5fe:	689a      	ldr	r2, [r3, #8]
 800d600:	4b18      	ldr	r3, [pc, #96]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	429a      	cmp	r2, r3
 800d606:	d005      	beq.n	800d614 <oslib_test_003_001_execute+0x654>
 800d608:	4b16      	ldr	r3, [pc, #88]	; (800d664 <oslib_test_003_001_execute+0x6a4>)
 800d60a:	691b      	ldr	r3, [r3, #16]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d101      	bne.n	800d614 <oslib_test_003_001_execute+0x654>
 800d610:	2301      	movs	r3, #1
 800d612:	e000      	b.n	800d616 <oslib_test_003_001_execute+0x656>
 800d614:	2300      	movs	r3, #0
 800d616:	f003 0301 	and.w	r3, r3, #1
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	490d      	ldr	r1, [pc, #52]	; (800d654 <oslib_test_003_001_execute+0x694>)
 800d61e:	4618      	mov	r0, r3
 800d620:	f7f9 fde6 	bl	80071f0 <__test_assert>
 800d624:	4603      	mov	r3, r0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d111      	bne.n	800d64e <oslib_test_003_001_execute+0x68e>
                (pipe1.wrptr != pipe1.buffer) &&
                (pipe1.cnt == 0),
                "invalid pipe state");
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800d62a:	ab14      	add	r3, sp, #80	; 0x50
 800d62c:	2210      	movs	r2, #16
 800d62e:	4619      	mov	r1, r3
 800d630:	4809      	ldr	r0, [pc, #36]	; (800d658 <oslib_test_003_001_execute+0x698>)
 800d632:	f00f f91b 	bl	801c86c <memcmp>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	bf0c      	ite	eq
 800d63c:	2301      	moveq	r3, #1
 800d63e:	2300      	movne	r3, #0
 800d640:	b2db      	uxtb	r3, r3
 800d642:	4906      	ldr	r1, [pc, #24]	; (800d65c <oslib_test_003_001_execute+0x69c>)
 800d644:	4618      	mov	r0, r3
 800d646:	f7f9 fdd3 	bl	80071f0 <__test_assert>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
  }
  test_end_step(14);
}
 800d64e:	b025      	add	sp, #148	; 0x94
 800d650:	f85d fb04 	ldr.w	pc, [sp], #4
 800d654:	0801ed20 	.word	0x0801ed20
 800d658:	0801ed0c 	.word	0x0801ed0c
 800d65c:	0801ed40 	.word	0x0801ed40
 800d660:	20000c6c 	.word	0x20000c6c
 800d664:	20000858 	.word	0x20000858
 800d668:	0801ec00 	.word	0x0801ec00
 800d66c:	00000000 	.word	0x00000000

0800d670 <oslib_test_003_002_setup>:
 * - [3.2.1] Reading while pipe is empty.
 * - [3.2.2] Writing a string larger than pipe buffer.
 * .
 */

static void oslib_test_003_002_setup(void) {
 800d670:	b508      	push	{r3, lr}
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
 800d672:	2208      	movs	r2, #8
 800d674:	4902      	ldr	r1, [pc, #8]	; (800d680 <oslib_test_003_002_setup+0x10>)
 800d676:	4803      	ldr	r0, [pc, #12]	; (800d684 <oslib_test_003_002_setup+0x14>)
 800d678:	f7f8 fa32 	bl	8005ae0 <chPipeObjectInit>
}
 800d67c:	bf00      	nop
 800d67e:	bd08      	pop	{r3, pc}
 800d680:	200015b4 	.word	0x200015b4
 800d684:	20000858 	.word	0x20000858
	...

0800d690 <oslib_test_003_002_execute>:

static void oslib_test_003_002_execute(void) {
 800d690:	b500      	push	{lr}
 800d692:	b087      	sub	sp, #28

  /* [3.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 800d694:	4b34      	ldr	r3, [pc, #208]	; (800d768 <oslib_test_003_002_execute+0xd8>)
 800d696:	2201      	movs	r2, #1
 800d698:	601a      	str	r2, [r3, #0]
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800d69a:	4669      	mov	r1, sp
 800d69c:	2300      	movs	r3, #0
 800d69e:	2210      	movs	r2, #16
 800d6a0:	4832      	ldr	r0, [pc, #200]	; (800d76c <oslib_test_003_002_execute+0xdc>)
 800d6a2:	f7f8 fadd 	bl	8005c60 <chPipeReadTimeout>
 800d6a6:	9005      	str	r0, [sp, #20]
    test_assert(n == 0, "wrong size");
 800d6a8:	9b05      	ldr	r3, [sp, #20]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	bf0c      	ite	eq
 800d6ae:	2301      	moveq	r3, #1
 800d6b0:	2300      	movne	r3, #0
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	492e      	ldr	r1, [pc, #184]	; (800d770 <oslib_test_003_002_execute+0xe0>)
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7f9 fd9a 	bl	80071f0 <__test_assert>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d14f      	bne.n	800d762 <oslib_test_003_002_execute+0xd2>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800d6c2:	4b2a      	ldr	r3, [pc, #168]	; (800d76c <oslib_test_003_002_execute+0xdc>)
 800d6c4:	68da      	ldr	r2, [r3, #12]
 800d6c6:	4b29      	ldr	r3, [pc, #164]	; (800d76c <oslib_test_003_002_execute+0xdc>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d10b      	bne.n	800d6e6 <oslib_test_003_002_execute+0x56>
 800d6ce:	4b27      	ldr	r3, [pc, #156]	; (800d76c <oslib_test_003_002_execute+0xdc>)
 800d6d0:	689a      	ldr	r2, [r3, #8]
 800d6d2:	4b26      	ldr	r3, [pc, #152]	; (800d76c <oslib_test_003_002_execute+0xdc>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d105      	bne.n	800d6e6 <oslib_test_003_002_execute+0x56>
 800d6da:	4b24      	ldr	r3, [pc, #144]	; (800d76c <oslib_test_003_002_execute+0xdc>)
 800d6dc:	691b      	ldr	r3, [r3, #16]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d101      	bne.n	800d6e6 <oslib_test_003_002_execute+0x56>
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e000      	b.n	800d6e8 <oslib_test_003_002_execute+0x58>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	f003 0301 	and.w	r3, r3, #1
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	4921      	ldr	r1, [pc, #132]	; (800d774 <oslib_test_003_002_execute+0xe4>)
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7f9 fd7d 	bl	80071f0 <__test_assert>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d132      	bne.n	800d762 <oslib_test_003_002_execute+0xd2>
                "invalid pipe state");
  }
  test_end_step(1);

  /* [3.2.2] Writing a string larger than pipe buffer.*/
  test_set_step(2);
 800d6fc:	4b1a      	ldr	r3, [pc, #104]	; (800d768 <oslib_test_003_002_execute+0xd8>)
 800d6fe:	2202      	movs	r2, #2
 800d700:	601a      	str	r2, [r3, #0]
  {
    size_t n;

    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800d702:	2300      	movs	r3, #0
 800d704:	2210      	movs	r2, #16
 800d706:	491c      	ldr	r1, [pc, #112]	; (800d778 <oslib_test_003_002_execute+0xe8>)
 800d708:	4818      	ldr	r0, [pc, #96]	; (800d76c <oslib_test_003_002_execute+0xdc>)
 800d70a:	f7f8 fa59 	bl	8005bc0 <chPipeWriteTimeout>
 800d70e:	9004      	str	r0, [sp, #16]
    test_assert(n == PIPE_SIZE / 2, "wrong size");
 800d710:	9b04      	ldr	r3, [sp, #16]
 800d712:	2b08      	cmp	r3, #8
 800d714:	bf0c      	ite	eq
 800d716:	2301      	moveq	r3, #1
 800d718:	2300      	movne	r3, #0
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	4914      	ldr	r1, [pc, #80]	; (800d770 <oslib_test_003_002_execute+0xe0>)
 800d71e:	4618      	mov	r0, r3
 800d720:	f7f9 fd66 	bl	80071f0 <__test_assert>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d11b      	bne.n	800d762 <oslib_test_003_002_execute+0xd2>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800d72a:	4b10      	ldr	r3, [pc, #64]	; (800d76c <oslib_test_003_002_execute+0xdc>)
 800d72c:	68da      	ldr	r2, [r3, #12]
 800d72e:	4b0f      	ldr	r3, [pc, #60]	; (800d76c <oslib_test_003_002_execute+0xdc>)
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	429a      	cmp	r2, r3
 800d734:	d10b      	bne.n	800d74e <oslib_test_003_002_execute+0xbe>
 800d736:	4b0d      	ldr	r3, [pc, #52]	; (800d76c <oslib_test_003_002_execute+0xdc>)
 800d738:	689a      	ldr	r2, [r3, #8]
 800d73a:	4b0c      	ldr	r3, [pc, #48]	; (800d76c <oslib_test_003_002_execute+0xdc>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d105      	bne.n	800d74e <oslib_test_003_002_execute+0xbe>
 800d742:	4b0a      	ldr	r3, [pc, #40]	; (800d76c <oslib_test_003_002_execute+0xdc>)
 800d744:	691b      	ldr	r3, [r3, #16]
 800d746:	2b08      	cmp	r3, #8
 800d748:	d101      	bne.n	800d74e <oslib_test_003_002_execute+0xbe>
 800d74a:	2301      	movs	r3, #1
 800d74c:	e000      	b.n	800d750 <oslib_test_003_002_execute+0xc0>
 800d74e:	2300      	movs	r3, #0
 800d750:	f003 0301 	and.w	r3, r3, #1
 800d754:	b2db      	uxtb	r3, r3
 800d756:	4907      	ldr	r1, [pc, #28]	; (800d774 <oslib_test_003_002_execute+0xe4>)
 800d758:	4618      	mov	r0, r3
 800d75a:	f7f9 fd49 	bl	80071f0 <__test_assert>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
  test_end_step(2);
}
 800d762:	b007      	add	sp, #28
 800d764:	f85d fb04 	ldr.w	pc, [sp], #4
 800d768:	20000c6c 	.word	0x20000c6c
 800d76c:	20000858 	.word	0x20000858
 800d770:	0801ec00 	.word	0x0801ec00
 800d774:	0801ed20 	.word	0x0801ed20
 800d778:	0801ed0c 	.word	0x0801ed0c
 800d77c:	00000000 	.word	0x00000000

0800d780 <chThdGetSelfX.lto_priv.14>:
  return __sch_get_currthread();
 800d780:	4b01      	ldr	r3, [pc, #4]	; (800d788 <chThdGetSelfX.lto_priv.14+0x8>)
 800d782:	68db      	ldr	r3, [r3, #12]
}
 800d784:	4618      	mov	r0, r3
 800d786:	4770      	bx	lr
 800d788:	20000a48 	.word	0x20000a48
 800d78c:	00000000 	.word	0x00000000

0800d790 <chThdGetPriorityX.lto_priv.8>:
static inline tprio_t chThdGetPriorityX(void) {
 800d790:	b508      	push	{r3, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 800d792:	f7ff fff5 	bl	800d780 <chThdGetSelfX.lto_priv.14>
 800d796:	4603      	mov	r3, r0
 800d798:	689b      	ldr	r3, [r3, #8]
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	bd08      	pop	{r3, pc}
 800d79e:	bf00      	nop

0800d7a0 <chGuardedPoolObjectInit.lto_priv.0>:
                                           size_t size) {
 800d7a0:	b500      	push	{lr}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	9001      	str	r0, [sp, #4]
 800d7a6:	9100      	str	r1, [sp, #0]
  chGuardedPoolObjectInitAligned(gmp, size, PORT_NATURAL_ALIGN);
 800d7a8:	2204      	movs	r2, #4
 800d7aa:	9900      	ldr	r1, [sp, #0]
 800d7ac:	9801      	ldr	r0, [sp, #4]
 800d7ae:	f7f7 ffe7 	bl	8005780 <chGuardedPoolObjectInitAligned>
}
 800d7b2:	bf00      	nop
 800d7b4:	b003      	add	sp, #12
 800d7b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7ba:	bf00      	nop
 800d7bc:	0000      	movs	r0, r0
	...

0800d7c0 <chJobObjectInit>:
 * @init
 */
static inline void chJobObjectInit(jobs_queue_t *jqp,
                                   size_t jobsn,
                                   job_descriptor_t *jobsbuf,
                                   msg_t *msgbuf) {
 800d7c0:	b500      	push	{lr}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	9003      	str	r0, [sp, #12]
 800d7c6:	9102      	str	r1, [sp, #8]
 800d7c8:	9201      	str	r2, [sp, #4]
 800d7ca:	9300      	str	r3, [sp, #0]

  chDbgCheck((jobsn > 0U) && (jobsbuf != NULL) && (msgbuf != NULL));

  chGuardedPoolObjectInit(&jqp->free, sizeof (job_descriptor_t));
 800d7cc:	9b03      	ldr	r3, [sp, #12]
 800d7ce:	2108      	movs	r1, #8
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7ff ffe5 	bl	800d7a0 <chGuardedPoolObjectInit.lto_priv.0>
  chGuardedPoolLoadArray(&jqp->free, (void *)jobsbuf, jobsn);
 800d7d6:	9b03      	ldr	r3, [sp, #12]
 800d7d8:	9a02      	ldr	r2, [sp, #8]
 800d7da:	9901      	ldr	r1, [sp, #4]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7f7 ffe7 	bl	80057b0 <chGuardedPoolLoadArray>
  chMBObjectInit(&jqp->mbx, msgbuf, jobsn);
 800d7e2:	9b03      	ldr	r3, [sp, #12]
 800d7e4:	331c      	adds	r3, #28
 800d7e6:	9a02      	ldr	r2, [sp, #8]
 800d7e8:	9900      	ldr	r1, [sp, #0]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7f7 fa28 	bl	8004c40 <chMBObjectInit>
}
 800d7f0:	bf00      	nop
 800d7f2:	b005      	add	sp, #20
 800d7f4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d800 <chJobGet>:
 * @param[in] jqp       pointer to a @p jobs_queue_t structure
 * @return              The pointer to the allocated job object.
 *
 * @api
 */
static inline job_descriptor_t *chJobGet(jobs_queue_t *jqp) {
 800d800:	b500      	push	{lr}
 800d802:	b083      	sub	sp, #12
 800d804:	9001      	str	r0, [sp, #4]

  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800d806:	9b01      	ldr	r3, [sp, #4]
 800d808:	f04f 31ff 	mov.w	r1, #4294967295
 800d80c:	4618      	mov	r0, r3
 800d80e:	f7f8 f80f 	bl	8005830 <chGuardedPoolAllocTimeout>
 800d812:	4603      	mov	r3, r0
}
 800d814:	4618      	mov	r0, r3
 800d816:	b003      	add	sp, #12
 800d818:	f85d fb04 	ldr.w	pc, [sp], #4
 800d81c:	0000      	movs	r0, r0
	...

0800d820 <chJobPost>:
 * @param[in] jqp       pointer to a @p jobs_queue_t structure
 * @param[in] jp        pointer to the job object to be posted
 *
 * @api
 */
static inline void chJobPost(jobs_queue_t *jqp, job_descriptor_t *jp) {
 800d820:	b500      	push	{lr}
 800d822:	b085      	sub	sp, #20
 800d824:	9001      	str	r0, [sp, #4]
 800d826:	9100      	str	r1, [sp, #0]
  msg_t msg;

  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800d828:	9b01      	ldr	r3, [sp, #4]
 800d82a:	331c      	adds	r3, #28
 800d82c:	9900      	ldr	r1, [sp, #0]
 800d82e:	2200      	movs	r2, #0
 800d830:	4618      	mov	r0, r3
 800d832:	f7f7 fa65 	bl	8004d00 <chMBPostTimeout>
 800d836:	9003      	str	r0, [sp, #12]
  chDbgAssert(msg == MSG_OK, "post failed");
}
 800d838:	bf00      	nop
 800d83a:	b005      	add	sp, #20
 800d83c:	f85d fb04 	ldr.w	pc, [sp], #4

0800d840 <chJobDispatch>:
 * @return              The function outcome.
 * @retval MSG_OK       if a job has been executed.
 * @retval MSG_RESET    if the internal mailbox has been reset.
 * @retval MSG_JOB_NULL if a @p JOB_NULL has been received.
 */
static inline msg_t chJobDispatch(jobs_queue_t *jqp) {
 800d840:	b500      	push	{lr}
 800d842:	b087      	sub	sp, #28
 800d844:	9001      	str	r0, [sp, #4]
  msg_t msg, jmsg;

  /* Waiting for a job.*/
  msg = chMBFetchTimeout(&jqp->mbx, &jmsg, TIME_INFINITE);
 800d846:	9b01      	ldr	r3, [sp, #4]
 800d848:	331c      	adds	r3, #28
 800d84a:	a903      	add	r1, sp, #12
 800d84c:	f04f 32ff 	mov.w	r2, #4294967295
 800d850:	4618      	mov	r0, r3
 800d852:	f7f7 fb85 	bl	8004f60 <chMBFetchTimeout>
 800d856:	9005      	str	r0, [sp, #20]
  if (msg == MSG_OK) {
 800d858:	9b05      	ldr	r3, [sp, #20]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d114      	bne.n	800d888 <chJobDispatch+0x48>
    job_descriptor_t *jp = (job_descriptor_t *)jmsg;
 800d85e:	9b03      	ldr	r3, [sp, #12]
 800d860:	9304      	str	r3, [sp, #16]

    chDbgAssert(jp != NULL, "is NULL");

    if (jp->jobfunc != NULL) {
 800d862:	9b04      	ldr	r3, [sp, #16]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00b      	beq.n	800d882 <chJobDispatch+0x42>

      /* Invoking the job function.*/
      jp->jobfunc(jp->jobarg);
 800d86a:	9b04      	ldr	r3, [sp, #16]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	9a04      	ldr	r2, [sp, #16]
 800d870:	6852      	ldr	r2, [r2, #4]
 800d872:	4610      	mov	r0, r2
 800d874:	4798      	blx	r3

      /* Returning the job descriptor object.*/
      chGuardedPoolFree(&jqp->free, (void *)jp);
 800d876:	9b01      	ldr	r3, [sp, #4]
 800d878:	9904      	ldr	r1, [sp, #16]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7f7 fff0 	bl	8005860 <chGuardedPoolFree>
 800d880:	e002      	b.n	800d888 <chJobDispatch+0x48>
    }
    else {
      msg = MSG_JOB_NULL;
 800d882:	f06f 0301 	mvn.w	r3, #1
 800d886:	9305      	str	r3, [sp, #20]
    }
  }

  return msg;
 800d888:	9b05      	ldr	r3, [sp, #20]
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	b007      	add	sp, #28
 800d88e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d892:	bf00      	nop
	...

0800d8a0 <job_slow>:

static jobs_queue_t jq;
static job_descriptor_t jobs[JOBS_QUEUE_SIZE];
static msg_t msg_queue[JOBS_QUEUE_SIZE];

static void job_slow(void *arg) {
 800d8a0:	b500      	push	{lr}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	9001      	str	r0, [sp, #4]

  test_emit_token((int)arg);
 800d8a6:	9b01      	ldr	r3, [sp, #4]
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7f9 fd00 	bl	80072b0 <test_emit_token>
  chThdSleepMilliseconds(10);
 800d8b0:	2064      	movs	r0, #100	; 0x64
 800d8b2:	f7f5 fdbd 	bl	8003430 <chThdSleep>
}
 800d8b6:	bf00      	nop
 800d8b8:	b003      	add	sp, #12
 800d8ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8be:	bf00      	nop

0800d8c0 <Thread1.lto_priv.0>:

static THD_WORKING_AREA(wa1Thread1, 256);
static THD_WORKING_AREA(wa2Thread1, 256);
static THD_FUNCTION(Thread1, arg) {
 800d8c0:	b500      	push	{lr}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	9001      	str	r0, [sp, #4]
  msg_t msg;

  (void)arg;

  do {
    msg = chJobDispatch(&jq);
 800d8c6:	4806      	ldr	r0, [pc, #24]	; (800d8e0 <Thread1.lto_priv.0+0x20>)
 800d8c8:	f7ff ffba 	bl	800d840 <chJobDispatch>
 800d8cc:	9003      	str	r0, [sp, #12]
  } while (msg == MSG_OK);
 800d8ce:	9b03      	ldr	r3, [sp, #12]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d0f8      	beq.n	800d8c6 <Thread1.lto_priv.0+0x6>
}
 800d8d4:	bf00      	nop
 800d8d6:	bf00      	nop
 800d8d8:	b005      	add	sp, #20
 800d8da:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8de:	bf00      	nop
 800d8e0:	200015c4 	.word	0x200015c4
	...

0800d8f0 <oslib_test_004_001_execute>:
 * - [4.1.3] Sending jobs with various timings.
 * - [4.1.4] Sending two null jobs to make threads exit.
 * .
 */

static void oslib_test_004_001_execute(void) {
 800d8f0:	b500      	push	{lr}
 800d8f2:	b093      	sub	sp, #76	; 0x4c
  thread_t *tp1, *tp2;

  /* [4.1.1] Initializing the Jobs Queue object.*/
  test_set_step(1);
 800d8f4:	4b3e      	ldr	r3, [pc, #248]	; (800d9f0 <oslib_test_004_001_execute+0x100>)
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	601a      	str	r2, [r3, #0]
  {
    chJobObjectInit(&jq, JOBS_QUEUE_SIZE, jobs, msg_queue);
 800d8fa:	4b3e      	ldr	r3, [pc, #248]	; (800d9f4 <oslib_test_004_001_execute+0x104>)
 800d8fc:	4a3e      	ldr	r2, [pc, #248]	; (800d9f8 <oslib_test_004_001_execute+0x108>)
 800d8fe:	2104      	movs	r1, #4
 800d900:	483e      	ldr	r0, [pc, #248]	; (800d9fc <oslib_test_004_001_execute+0x10c>)
 800d902:	f7ff ff5d 	bl	800d7c0 <chJobObjectInit>
  }
  test_end_step(1);

  /* [4.1.2] Starting the dispatcher threads.*/
  test_set_step(2);
 800d906:	4b3a      	ldr	r3, [pc, #232]	; (800d9f0 <oslib_test_004_001_execute+0x100>)
 800d908:	2202      	movs	r2, #2
 800d90a:	601a      	str	r2, [r3, #0]
  {
    thread_descriptor_t td1 = {
 800d90c:	4b3c      	ldr	r3, [pc, #240]	; (800da00 <oslib_test_004_001_execute+0x110>)
 800d90e:	9307      	str	r3, [sp, #28]
 800d910:	4b3c      	ldr	r3, [pc, #240]	; (800da04 <oslib_test_004_001_execute+0x114>)
 800d912:	9308      	str	r3, [sp, #32]
      .name  = "dispatcher1",
      .wbase = wa1Thread1,
      .wend  = THD_WORKING_AREA_END(wa1Thread1),
 800d914:	4b3c      	ldr	r3, [pc, #240]	; (800da08 <oslib_test_004_001_execute+0x118>)
    thread_descriptor_t td1 = {
 800d916:	9309      	str	r3, [sp, #36]	; 0x24
      .prio  = chThdGetPriorityX() - 1,
 800d918:	f7ff ff3a 	bl	800d790 <chThdGetPriorityX.lto_priv.8>
 800d91c:	4603      	mov	r3, r0
 800d91e:	3b01      	subs	r3, #1
    thread_descriptor_t td1 = {
 800d920:	930a      	str	r3, [sp, #40]	; 0x28
 800d922:	4b3a      	ldr	r3, [pc, #232]	; (800da0c <oslib_test_004_001_execute+0x11c>)
 800d924:	930b      	str	r3, [sp, #44]	; 0x2c
 800d926:	2300      	movs	r3, #0
 800d928:	930c      	str	r3, [sp, #48]	; 0x30
      .funcp = Thread1,
      .arg   = NULL
    };
    tp1 = chThdCreate(&td1);
 800d92a:	ab07      	add	r3, sp, #28
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7f5 fc27 	bl	8003180 <chThdCreate>
 800d932:	9010      	str	r0, [sp, #64]	; 0x40

    thread_descriptor_t td2 = {
 800d934:	4b36      	ldr	r3, [pc, #216]	; (800da10 <oslib_test_004_001_execute+0x120>)
 800d936:	9301      	str	r3, [sp, #4]
 800d938:	4b36      	ldr	r3, [pc, #216]	; (800da14 <oslib_test_004_001_execute+0x124>)
 800d93a:	9302      	str	r3, [sp, #8]
      .name  = "dispatcher2",
      .wbase = wa2Thread1,
      .wend  = THD_WORKING_AREA_END(wa2Thread1),
 800d93c:	4b36      	ldr	r3, [pc, #216]	; (800da18 <oslib_test_004_001_execute+0x128>)
    thread_descriptor_t td2 = {
 800d93e:	9303      	str	r3, [sp, #12]
      .prio  = chThdGetPriorityX() - 2,
 800d940:	f7ff ff26 	bl	800d790 <chThdGetPriorityX.lto_priv.8>
 800d944:	4603      	mov	r3, r0
 800d946:	3b02      	subs	r3, #2
    thread_descriptor_t td2 = {
 800d948:	9304      	str	r3, [sp, #16]
 800d94a:	4b30      	ldr	r3, [pc, #192]	; (800da0c <oslib_test_004_001_execute+0x11c>)
 800d94c:	9305      	str	r3, [sp, #20]
 800d94e:	2300      	movs	r3, #0
 800d950:	9306      	str	r3, [sp, #24]
      .funcp = Thread1,
      .arg   = NULL
    };
    tp2 = chThdCreate(&td2);
 800d952:	ab01      	add	r3, sp, #4
 800d954:	4618      	mov	r0, r3
 800d956:	f7f5 fc13 	bl	8003180 <chThdCreate>
 800d95a:	900f      	str	r0, [sp, #60]	; 0x3c
  }
  test_end_step(2);

  /* [4.1.3] Sending jobs with various timings.*/
  test_set_step(3);
 800d95c:	4b24      	ldr	r3, [pc, #144]	; (800d9f0 <oslib_test_004_001_execute+0x100>)
 800d95e:	2203      	movs	r2, #3
 800d960:	601a      	str	r2, [r3, #0]
  {
    unsigned i;
    job_descriptor_t *jdp;

    for (i = 0; i < 8; i++) {
 800d962:	2300      	movs	r3, #0
 800d964:	9311      	str	r3, [sp, #68]	; 0x44
 800d966:	e012      	b.n	800d98e <oslib_test_004_001_execute+0x9e>
      jdp = chJobGet(&jq);
 800d968:	4824      	ldr	r0, [pc, #144]	; (800d9fc <oslib_test_004_001_execute+0x10c>)
 800d96a:	f7ff ff49 	bl	800d800 <chJobGet>
 800d96e:	900d      	str	r0, [sp, #52]	; 0x34
      jdp->jobfunc = job_slow;
 800d970:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d972:	4a2a      	ldr	r2, [pc, #168]	; (800da1c <oslib_test_004_001_execute+0x12c>)
 800d974:	601a      	str	r2, [r3, #0]
      jdp->jobarg  = (void *)('a' + i);
 800d976:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d978:	3361      	adds	r3, #97	; 0x61
 800d97a:	461a      	mov	r2, r3
 800d97c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d97e:	605a      	str	r2, [r3, #4]
      chJobPost(&jq, jdp);
 800d980:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d982:	481e      	ldr	r0, [pc, #120]	; (800d9fc <oslib_test_004_001_execute+0x10c>)
 800d984:	f7ff ff4c 	bl	800d820 <chJobPost>
    for (i = 0; i < 8; i++) {
 800d988:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d98a:	3301      	adds	r3, #1
 800d98c:	9311      	str	r3, [sp, #68]	; 0x44
 800d98e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d990:	2b07      	cmp	r3, #7
 800d992:	d9e9      	bls.n	800d968 <oslib_test_004_001_execute+0x78>
    }
  }
  test_end_step(3);

  /* [4.1.4] Sending two null jobs to make threads exit.*/
  test_set_step(4);
 800d994:	4b16      	ldr	r3, [pc, #88]	; (800d9f0 <oslib_test_004_001_execute+0x100>)
 800d996:	2204      	movs	r2, #4
 800d998:	601a      	str	r2, [r3, #0]
  {
    job_descriptor_t *jdp;

    jdp = chJobGet(&jq);
 800d99a:	4818      	ldr	r0, [pc, #96]	; (800d9fc <oslib_test_004_001_execute+0x10c>)
 800d99c:	f7ff ff30 	bl	800d800 <chJobGet>
 800d9a0:	900e      	str	r0, [sp, #56]	; 0x38
    jdp->jobfunc = NULL;
 800d9a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	601a      	str	r2, [r3, #0]
    jdp->jobarg  = NULL;
 800d9a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	605a      	str	r2, [r3, #4]
    chJobPost(&jq, jdp);
 800d9ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d9b0:	4812      	ldr	r0, [pc, #72]	; (800d9fc <oslib_test_004_001_execute+0x10c>)
 800d9b2:	f7ff ff35 	bl	800d820 <chJobPost>
    jdp = chJobGet(&jq);
 800d9b6:	4811      	ldr	r0, [pc, #68]	; (800d9fc <oslib_test_004_001_execute+0x10c>)
 800d9b8:	f7ff ff22 	bl	800d800 <chJobGet>
 800d9bc:	900e      	str	r0, [sp, #56]	; 0x38
    jdp->jobfunc = NULL;
 800d9be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	601a      	str	r2, [r3, #0]
    jdp->jobarg  = NULL;
 800d9c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	605a      	str	r2, [r3, #4]
    chJobPost(&jq, jdp);
 800d9ca:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d9cc:	480b      	ldr	r0, [pc, #44]	; (800d9fc <oslib_test_004_001_execute+0x10c>)
 800d9ce:	f7ff ff27 	bl	800d820 <chJobPost>
    (void) chThdWait(tp1);
 800d9d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d9d4:	f7f5 fcbc 	bl	8003350 <chThdWait>
    (void) chThdWait(tp2);
 800d9d8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d9da:	f7f5 fcb9 	bl	8003350 <chThdWait>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 800d9de:	4910      	ldr	r1, [pc, #64]	; (800da20 <oslib_test_004_001_execute+0x130>)
 800d9e0:	4810      	ldr	r0, [pc, #64]	; (800da24 <oslib_test_004_001_execute+0x134>)
 800d9e2:	f7f9 fc1d 	bl	8007220 <__test_assert_sequence>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
  }
  test_end_step(4);
}
 800d9ea:	b013      	add	sp, #76	; 0x4c
 800d9ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9f0:	20000c6c 	.word	0x20000c6c
 800d9f4:	20001628 	.word	0x20001628
 800d9f8:	20001608 	.word	0x20001608
 800d9fc:	200015c4 	.word	0x200015c4
 800da00:	0801ed88 	.word	0x0801ed88
 800da04:	20001638 	.word	0x20001638
 800da08:	20001828 	.word	0x20001828
 800da0c:	0800d8c1 	.word	0x0800d8c1
 800da10:	0801ed94 	.word	0x0801ed94
 800da14:	20001828 	.word	0x20001828
 800da18:	20001a18 	.word	0x20001a18
 800da1c:	0800d8a1 	.word	0x0800d8a1
 800da20:	0801eda0 	.word	0x0801eda0
 800da24:	0801edb4 	.word	0x0801edb4
	...

0800da30 <chThdGetSelfX.lto_priv.15>:
  return __sch_get_currthread();
 800da30:	4b01      	ldr	r3, [pc, #4]	; (800da38 <chThdGetSelfX.lto_priv.15+0x8>)
 800da32:	68db      	ldr	r3, [r3, #12]
}
 800da34:	4618      	mov	r0, r3
 800da36:	4770      	bx	lr
 800da38:	20000a48 	.word	0x20000a48
 800da3c:	00000000 	.word	0x00000000

0800da40 <chThdGetPriorityX.lto_priv.9>:
static inline tprio_t chThdGetPriorityX(void) {
 800da40:	b508      	push	{r3, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 800da42:	f7ff fff5 	bl	800da30 <chThdGetSelfX.lto_priv.15>
 800da46:	4603      	mov	r3, r0
 800da48:	689b      	ldr	r3, [r3, #8]
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	bd08      	pop	{r3, pc}
 800da4e:	bf00      	nop

0800da50 <chDelegateCallDirect0>:
 *
 * @param[in] tp        pointer to the delegate thread
 * @param[in] func      pointer to the function to be called
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect0(thread_t *tp, delegate_fn0_t func) {
 800da50:	b500      	push	{lr}
 800da52:	b083      	sub	sp, #12
 800da54:	9001      	str	r0, [sp, #4]
 800da56:	9100      	str	r1, [sp, #0]

  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 800da58:	9a00      	ldr	r2, [sp, #0]
 800da5a:	4904      	ldr	r1, [pc, #16]	; (800da6c <chDelegateCallDirect0+0x1c>)
 800da5c:	9801      	ldr	r0, [sp, #4]
 800da5e:	f7f8 fc9f 	bl	80063a0 <chDelegateCallVeneer>
 800da62:	4603      	mov	r3, r0
}
 800da64:	4618      	mov	r0, r3
 800da66:	b003      	add	sp, #12
 800da68:	f85d fb04 	ldr.w	pc, [sp], #4
 800da6c:	08006221 	.word	0x08006221

0800da70 <chDelegateCallDirect1>:
 * @param[in] func      pointer to the function to be called
 * @param[in] p1        parameter 1 passed as a @p msg_t
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect1(thread_t *tp, delegate_fn1_t func,
                                          msg_t p1) {
 800da70:	b500      	push	{lr}
 800da72:	b085      	sub	sp, #20
 800da74:	9003      	str	r0, [sp, #12]
 800da76:	9102      	str	r1, [sp, #8]
 800da78:	9201      	str	r2, [sp, #4]

  return chDelegateCallVeneer(tp, __ch_delegate_fn1, func, p1);
 800da7a:	9b01      	ldr	r3, [sp, #4]
 800da7c:	9a02      	ldr	r2, [sp, #8]
 800da7e:	4904      	ldr	r1, [pc, #16]	; (800da90 <chDelegateCallDirect1+0x20>)
 800da80:	9803      	ldr	r0, [sp, #12]
 800da82:	f7f8 fc8d 	bl	80063a0 <chDelegateCallVeneer>
 800da86:	4603      	mov	r3, r0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	b005      	add	sp, #20
 800da8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800da90:	08006251 	.word	0x08006251
	...

0800daa0 <chDelegateCallDirect2>:
 * @param[in] p1        parameter 1 passed as a @p msg_t
 * @param[in] p2        parameter 2 passed as a @p msg_t
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect2(thread_t *tp, delegate_fn2_t func,
                                          msg_t p1, msg_t p2) {
 800daa0:	b500      	push	{lr}
 800daa2:	b087      	sub	sp, #28
 800daa4:	9005      	str	r0, [sp, #20]
 800daa6:	9104      	str	r1, [sp, #16]
 800daa8:	9203      	str	r2, [sp, #12]
 800daaa:	9302      	str	r3, [sp, #8]

  return chDelegateCallVeneer(tp, __ch_delegate_fn2, func, p1, p2);
 800daac:	9b02      	ldr	r3, [sp, #8]
 800daae:	9300      	str	r3, [sp, #0]
 800dab0:	9b03      	ldr	r3, [sp, #12]
 800dab2:	9a04      	ldr	r2, [sp, #16]
 800dab4:	4904      	ldr	r1, [pc, #16]	; (800dac8 <chDelegateCallDirect2+0x28>)
 800dab6:	9805      	ldr	r0, [sp, #20]
 800dab8:	f7f8 fc72 	bl	80063a0 <chDelegateCallVeneer>
 800dabc:	4603      	mov	r3, r0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	b007      	add	sp, #28
 800dac2:	f85d fb04 	ldr.w	pc, [sp], #4
 800dac6:	bf00      	nop
 800dac8:	08006291 	.word	0x08006291
 800dacc:	00000000 	.word	0x00000000

0800dad0 <chDelegateCallDirect3>:
 * @param[in] p2        parameter 2 passed as a @p msg_t
 * @param[in] p3        parameter 3 passed as a @p msg_t
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect3(thread_t *tp, delegate_fn3_t func,
                                          msg_t p1, msg_t p2, msg_t p3) {
 800dad0:	b500      	push	{lr}
 800dad2:	b087      	sub	sp, #28
 800dad4:	9005      	str	r0, [sp, #20]
 800dad6:	9104      	str	r1, [sp, #16]
 800dad8:	9203      	str	r2, [sp, #12]
 800dada:	9302      	str	r3, [sp, #8]

  return chDelegateCallVeneer(tp, __ch_delegate_fn3, func, p1, p2, p3);
 800dadc:	9b08      	ldr	r3, [sp, #32]
 800dade:	9301      	str	r3, [sp, #4]
 800dae0:	9b02      	ldr	r3, [sp, #8]
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	9b03      	ldr	r3, [sp, #12]
 800dae6:	9a04      	ldr	r2, [sp, #16]
 800dae8:	4904      	ldr	r1, [pc, #16]	; (800dafc <chDelegateCallDirect3+0x2c>)
 800daea:	9805      	ldr	r0, [sp, #20]
 800daec:	f7f8 fc58 	bl	80063a0 <chDelegateCallVeneer>
 800daf0:	4603      	mov	r3, r0
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	b007      	add	sp, #28
 800daf6:	f85d fb04 	ldr.w	pc, [sp], #4
 800dafa:	bf00      	nop
 800dafc:	080062e1 	.word	0x080062e1

0800db00 <chDelegateCallDirect4>:
 * @param[in] p4        parameter 4 passed as a @p msg_t
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect4(thread_t *tp, delegate_fn4_t func,
                                          msg_t p1, msg_t p2, msg_t p3,
                                          msg_t p4) {
 800db00:	b500      	push	{lr}
 800db02:	b089      	sub	sp, #36	; 0x24
 800db04:	9007      	str	r0, [sp, #28]
 800db06:	9106      	str	r1, [sp, #24]
 800db08:	9205      	str	r2, [sp, #20]
 800db0a:	9304      	str	r3, [sp, #16]

  return chDelegateCallVeneer(tp, __ch_delegate_fn4, func, p1, p2, p3, p4);
 800db0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db0e:	9302      	str	r3, [sp, #8]
 800db10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db12:	9301      	str	r3, [sp, #4]
 800db14:	9b04      	ldr	r3, [sp, #16]
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	9b05      	ldr	r3, [sp, #20]
 800db1a:	9a06      	ldr	r2, [sp, #24]
 800db1c:	4904      	ldr	r1, [pc, #16]	; (800db30 <chDelegateCallDirect4+0x30>)
 800db1e:	9807      	ldr	r0, [sp, #28]
 800db20:	f7f8 fc3e 	bl	80063a0 <chDelegateCallVeneer>
 800db24:	4603      	mov	r3, r0
}
 800db26:	4618      	mov	r0, r3
 800db28:	b009      	add	sp, #36	; 0x24
 800db2a:	f85d fb04 	ldr.w	pc, [sp], #4
 800db2e:	bf00      	nop
 800db30:	08006341 	.word	0x08006341
	...

0800db40 <dis_func0>:
 * Shared code.
 ****************************************************************************/

static bool exit_flag;

static int dis_func0(void) {
 800db40:	b508      	push	{r3, lr}

  test_emit_token('0');
 800db42:	2030      	movs	r0, #48	; 0x30
 800db44:	f7f9 fbb4 	bl	80072b0 <test_emit_token>

  return (msg_t)0x55AA;
 800db48:	f245 53aa 	movw	r3, #21930	; 0x55aa
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	bd08      	pop	{r3, pc}

0800db50 <dis_func1>:

static msg_t dis_func1(msg_t a) {
 800db50:	b500      	push	{lr}
 800db52:	b083      	sub	sp, #12
 800db54:	9001      	str	r0, [sp, #4]

  test_emit_token((char)a);
 800db56:	9b01      	ldr	r3, [sp, #4]
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7f9 fba8 	bl	80072b0 <test_emit_token>

  return (msg_t)a;
 800db60:	9b01      	ldr	r3, [sp, #4]
}
 800db62:	4618      	mov	r0, r3
 800db64:	b003      	add	sp, #12
 800db66:	f85d fb04 	ldr.w	pc, [sp], #4
 800db6a:	bf00      	nop
 800db6c:	0000      	movs	r0, r0
	...

0800db70 <dis_func2>:

static msg_t dis_func2(msg_t a, msg_t b) {
 800db70:	b500      	push	{lr}
 800db72:	b083      	sub	sp, #12
 800db74:	9001      	str	r0, [sp, #4]
 800db76:	9100      	str	r1, [sp, #0]

  test_emit_token((char)a);
 800db78:	9b01      	ldr	r3, [sp, #4]
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7f9 fb97 	bl	80072b0 <test_emit_token>
  test_emit_token((char)b);
 800db82:	9b00      	ldr	r3, [sp, #0]
 800db84:	b2db      	uxtb	r3, r3
 800db86:	4618      	mov	r0, r3
 800db88:	f7f9 fb92 	bl	80072b0 <test_emit_token>

  return (msg_t)a;
 800db8c:	9b01      	ldr	r3, [sp, #4]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	b003      	add	sp, #12
 800db92:	f85d fb04 	ldr.w	pc, [sp], #4
 800db96:	bf00      	nop
	...

0800dba0 <dis_func3>:

static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 800dba0:	b500      	push	{lr}
 800dba2:	b085      	sub	sp, #20
 800dba4:	9003      	str	r0, [sp, #12]
 800dba6:	9102      	str	r1, [sp, #8]
 800dba8:	9201      	str	r2, [sp, #4]

  test_emit_token((char)a);
 800dbaa:	9b03      	ldr	r3, [sp, #12]
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7f9 fb7e 	bl	80072b0 <test_emit_token>
  test_emit_token((char)b);
 800dbb4:	9b02      	ldr	r3, [sp, #8]
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7f9 fb79 	bl	80072b0 <test_emit_token>
  test_emit_token((char)c);
 800dbbe:	9b01      	ldr	r3, [sp, #4]
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7f9 fb74 	bl	80072b0 <test_emit_token>

  return (msg_t)a;
 800dbc8:	9b03      	ldr	r3, [sp, #12]
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	b005      	add	sp, #20
 800dbce:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbd2:	bf00      	nop
	...

0800dbe0 <dis_func4>:

static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 800dbe0:	b500      	push	{lr}
 800dbe2:	b085      	sub	sp, #20
 800dbe4:	9003      	str	r0, [sp, #12]
 800dbe6:	9102      	str	r1, [sp, #8]
 800dbe8:	9201      	str	r2, [sp, #4]
 800dbea:	9300      	str	r3, [sp, #0]

  test_emit_token((char)a);
 800dbec:	9b03      	ldr	r3, [sp, #12]
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7f9 fb5d 	bl	80072b0 <test_emit_token>
  test_emit_token((char)b);
 800dbf6:	9b02      	ldr	r3, [sp, #8]
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7f9 fb58 	bl	80072b0 <test_emit_token>
  test_emit_token((char)c);
 800dc00:	9b01      	ldr	r3, [sp, #4]
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7f9 fb53 	bl	80072b0 <test_emit_token>
  test_emit_token((char)d);
 800dc0a:	9b00      	ldr	r3, [sp, #0]
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7f9 fb4e 	bl	80072b0 <test_emit_token>

  return (msg_t)a;
 800dc14:	9b03      	ldr	r3, [sp, #12]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	b005      	add	sp, #20
 800dc1a:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc1e:	bf00      	nop

0800dc20 <dis_func_end>:

static int dis_func_end(void) {
 800dc20:	b508      	push	{r3, lr}

  test_emit_token('Z');
 800dc22:	205a      	movs	r0, #90	; 0x5a
 800dc24:	f7f9 fb44 	bl	80072b0 <test_emit_token>
  exit_flag = true;
 800dc28:	4b03      	ldr	r3, [pc, #12]	; (800dc38 <dis_func_end+0x18>)
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	701a      	strb	r2, [r3, #0]

  return (msg_t)0xAA55;
 800dc2e:	f64a 2355 	movw	r3, #43605	; 0xaa55
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	bd08      	pop	{r3, pc}
 800dc36:	bf00      	nop
 800dc38:	20001a18 	.word	0x20001a18
 800dc3c:	00000000 	.word	0x00000000

0800dc40 <Thread1.lto_priv.1>:

static THD_WORKING_AREA(waThread1, 256);
static THD_FUNCTION(Thread1, arg) {
 800dc40:	b500      	push	{lr}
 800dc42:	b083      	sub	sp, #12
 800dc44:	9001      	str	r0, [sp, #4]

  (void)arg;

  exit_flag = false;
 800dc46:	4b0a      	ldr	r3, [pc, #40]	; (800dc70 <Thread1.lto_priv.1+0x30>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	701a      	strb	r2, [r3, #0]
  do {
    chDelegateDispatch();
 800dc4c:	f7f8 fbc0 	bl	80063d0 <chDelegateDispatch>
  } while (!exit_flag);
 800dc50:	4b07      	ldr	r3, [pc, #28]	; (800dc70 <Thread1.lto_priv.1+0x30>)
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	f083 0301 	eor.w	r3, r3, #1
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d1f6      	bne.n	800dc4c <Thread1.lto_priv.1+0xc>

  chThdExit(0x0FA5);
 800dc5e:	f640 70a5 	movw	r0, #4005	; 0xfa5
 800dc62:	f7f5 fb25 	bl	80032b0 <chThdExit>
}
 800dc66:	bf00      	nop
 800dc68:	b003      	add	sp, #12
 800dc6a:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc6e:	bf00      	nop
 800dc70:	20001a18 	.word	0x20001a18
	...

0800dc80 <oslib_test_005_001_execute>:
 *   emitted tokens.
 * - [5.1.3] Waiting for the thread to terminate-.
 * .
 */

static void oslib_test_005_001_execute(void) {
 800dc80:	b500      	push	{lr}
 800dc82:	b08d      	sub	sp, #52	; 0x34
  thread_t *tp;

  /* [5.1.1] Starting the dispatcher thread.*/
  test_set_step(1);
 800dc84:	4b5b      	ldr	r3, [pc, #364]	; (800ddf4 <oslib_test_005_001_execute+0x174>)
 800dc86:	2201      	movs	r2, #1
 800dc88:	601a      	str	r2, [r3, #0]
  {
    thread_descriptor_t td = {
 800dc8a:	4b5b      	ldr	r3, [pc, #364]	; (800ddf8 <oslib_test_005_001_execute+0x178>)
 800dc8c:	9303      	str	r3, [sp, #12]
 800dc8e:	4b5b      	ldr	r3, [pc, #364]	; (800ddfc <oslib_test_005_001_execute+0x17c>)
 800dc90:	9304      	str	r3, [sp, #16]
      .name  = "dispatcher",
      .wbase = waThread1,
      .wend  = THD_WORKING_AREA_END(waThread1),
 800dc92:	4b5b      	ldr	r3, [pc, #364]	; (800de00 <oslib_test_005_001_execute+0x180>)
    thread_descriptor_t td = {
 800dc94:	9305      	str	r3, [sp, #20]
      .prio  = chThdGetPriorityX() + 1,
 800dc96:	f7ff fed3 	bl	800da40 <chThdGetPriorityX.lto_priv.9>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	3301      	adds	r3, #1
    thread_descriptor_t td = {
 800dc9e:	9306      	str	r3, [sp, #24]
 800dca0:	4b58      	ldr	r3, [pc, #352]	; (800de04 <oslib_test_005_001_execute+0x184>)
 800dca2:	9307      	str	r3, [sp, #28]
 800dca4:	2300      	movs	r3, #0
 800dca6:	9308      	str	r3, [sp, #32]
      .funcp = Thread1,
      .arg   = NULL
    };
    tp = chThdCreate(&td);
 800dca8:	ab03      	add	r3, sp, #12
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7f5 fa68 	bl	8003180 <chThdCreate>
 800dcb0:	900b      	str	r0, [sp, #44]	; 0x2c
  }
  test_end_step(1);

  /* [5.1.2] Calling the default veneers, checking the result and the
     emitted tokens.*/
  test_set_step(2);
 800dcb2:	4b50      	ldr	r3, [pc, #320]	; (800ddf4 <oslib_test_005_001_execute+0x174>)
 800dcb4:	2202      	movs	r2, #2
 800dcb6:	601a      	str	r2, [r3, #0]
  {
    int retval;

    retval = chDelegateCallDirect0(tp, (delegate_fn0_t)dis_func0);
 800dcb8:	4953      	ldr	r1, [pc, #332]	; (800de08 <oslib_test_005_001_execute+0x188>)
 800dcba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dcbc:	f7ff fec8 	bl	800da50 <chDelegateCallDirect0>
 800dcc0:	900a      	str	r0, [sp, #40]	; 0x28
    test_assert(retval == 0x55AA, "invalid return value");
 800dcc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcc4:	f245 52aa 	movw	r2, #21930	; 0x55aa
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	bf0c      	ite	eq
 800dccc:	2301      	moveq	r3, #1
 800dcce:	2300      	movne	r3, #0
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	494e      	ldr	r1, [pc, #312]	; (800de0c <oslib_test_005_001_execute+0x18c>)
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7f9 fa8b 	bl	80071f0 <__test_assert>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	f040 8085 	bne.w	800ddec <oslib_test_005_001_execute+0x16c>

    retval = chDelegateCallDirect1(tp, (delegate_fn1_t)dis_func1, 'A');
 800dce2:	2241      	movs	r2, #65	; 0x41
 800dce4:	494a      	ldr	r1, [pc, #296]	; (800de10 <oslib_test_005_001_execute+0x190>)
 800dce6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dce8:	f7ff fec2 	bl	800da70 <chDelegateCallDirect1>
 800dcec:	900a      	str	r0, [sp, #40]	; 0x28
    test_assert(retval == (int)'A', "invalid return value");
 800dcee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcf0:	2b41      	cmp	r3, #65	; 0x41
 800dcf2:	bf0c      	ite	eq
 800dcf4:	2301      	moveq	r3, #1
 800dcf6:	2300      	movne	r3, #0
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	4944      	ldr	r1, [pc, #272]	; (800de0c <oslib_test_005_001_execute+0x18c>)
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7f9 fa77 	bl	80071f0 <__test_assert>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d171      	bne.n	800ddec <oslib_test_005_001_execute+0x16c>

    retval = chDelegateCallDirect2(tp, (delegate_fn2_t)dis_func2, 'B', 'C');
 800dd08:	2343      	movs	r3, #67	; 0x43
 800dd0a:	2242      	movs	r2, #66	; 0x42
 800dd0c:	4941      	ldr	r1, [pc, #260]	; (800de14 <oslib_test_005_001_execute+0x194>)
 800dd0e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dd10:	f7ff fec6 	bl	800daa0 <chDelegateCallDirect2>
 800dd14:	900a      	str	r0, [sp, #40]	; 0x28
    test_assert(retval == (int)'B', "invalid return value");
 800dd16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd18:	2b42      	cmp	r3, #66	; 0x42
 800dd1a:	bf0c      	ite	eq
 800dd1c:	2301      	moveq	r3, #1
 800dd1e:	2300      	movne	r3, #0
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	493a      	ldr	r1, [pc, #232]	; (800de0c <oslib_test_005_001_execute+0x18c>)
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7f9 fa63 	bl	80071f0 <__test_assert>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d15d      	bne.n	800ddec <oslib_test_005_001_execute+0x16c>

    retval = chDelegateCallDirect3(tp, (delegate_fn3_t)dis_func3, 'D', 'E', 'F');
 800dd30:	2346      	movs	r3, #70	; 0x46
 800dd32:	9300      	str	r3, [sp, #0]
 800dd34:	2345      	movs	r3, #69	; 0x45
 800dd36:	2244      	movs	r2, #68	; 0x44
 800dd38:	4937      	ldr	r1, [pc, #220]	; (800de18 <oslib_test_005_001_execute+0x198>)
 800dd3a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dd3c:	f7ff fec8 	bl	800dad0 <chDelegateCallDirect3>
 800dd40:	900a      	str	r0, [sp, #40]	; 0x28
    test_assert(retval == (int)'D', "invalid return value");
 800dd42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd44:	2b44      	cmp	r3, #68	; 0x44
 800dd46:	bf0c      	ite	eq
 800dd48:	2301      	moveq	r3, #1
 800dd4a:	2300      	movne	r3, #0
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	492f      	ldr	r1, [pc, #188]	; (800de0c <oslib_test_005_001_execute+0x18c>)
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7f9 fa4d 	bl	80071f0 <__test_assert>
 800dd56:	4603      	mov	r3, r0
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d147      	bne.n	800ddec <oslib_test_005_001_execute+0x16c>

    retval = chDelegateCallDirect4(tp, (delegate_fn4_t)dis_func4, 'G', 'H', 'I', 'J');
 800dd5c:	234a      	movs	r3, #74	; 0x4a
 800dd5e:	9301      	str	r3, [sp, #4]
 800dd60:	2349      	movs	r3, #73	; 0x49
 800dd62:	9300      	str	r3, [sp, #0]
 800dd64:	2348      	movs	r3, #72	; 0x48
 800dd66:	2247      	movs	r2, #71	; 0x47
 800dd68:	492c      	ldr	r1, [pc, #176]	; (800de1c <oslib_test_005_001_execute+0x19c>)
 800dd6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dd6c:	f7ff fec8 	bl	800db00 <chDelegateCallDirect4>
 800dd70:	900a      	str	r0, [sp, #40]	; 0x28
    test_assert(retval == (int)'G', "invalid return value");
 800dd72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd74:	2b47      	cmp	r3, #71	; 0x47
 800dd76:	bf0c      	ite	eq
 800dd78:	2301      	moveq	r3, #1
 800dd7a:	2300      	movne	r3, #0
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	4923      	ldr	r1, [pc, #140]	; (800de0c <oslib_test_005_001_execute+0x18c>)
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7f9 fa35 	bl	80071f0 <__test_assert>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d12f      	bne.n	800ddec <oslib_test_005_001_execute+0x16c>

    retval = chDelegateCallDirect0(tp, (delegate_fn0_t)dis_func_end);
 800dd8c:	4924      	ldr	r1, [pc, #144]	; (800de20 <oslib_test_005_001_execute+0x1a0>)
 800dd8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dd90:	f7ff fe5e 	bl	800da50 <chDelegateCallDirect0>
 800dd94:	900a      	str	r0, [sp, #40]	; 0x28
    test_assert(retval == 0xAA55, "invalid return value");
 800dd96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd98:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	bf0c      	ite	eq
 800dda0:	2301      	moveq	r3, #1
 800dda2:	2300      	movne	r3, #0
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	4919      	ldr	r1, [pc, #100]	; (800de0c <oslib_test_005_001_execute+0x18c>)
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7f9 fa21 	bl	80071f0 <__test_assert>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d11b      	bne.n	800ddec <oslib_test_005_001_execute+0x16c>

    test_assert_sequence("0ABCDEFGHIJZ", "unexpected tokens");
 800ddb4:	491b      	ldr	r1, [pc, #108]	; (800de24 <oslib_test_005_001_execute+0x1a4>)
 800ddb6:	481c      	ldr	r0, [pc, #112]	; (800de28 <oslib_test_005_001_execute+0x1a8>)
 800ddb8:	f7f9 fa32 	bl	8007220 <__test_assert_sequence>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d114      	bne.n	800ddec <oslib_test_005_001_execute+0x16c>
  }
  test_end_step(2);

  /* [5.1.3] Waiting for the thread to terminate-.*/
  test_set_step(3);
 800ddc2:	4b0c      	ldr	r3, [pc, #48]	; (800ddf4 <oslib_test_005_001_execute+0x174>)
 800ddc4:	2203      	movs	r2, #3
 800ddc6:	601a      	str	r2, [r3, #0]
  {
    msg_t msg = chThdWait(tp);
 800ddc8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ddca:	f7f5 fac1 	bl	8003350 <chThdWait>
 800ddce:	9009      	str	r0, [sp, #36]	; 0x24
    test_assert(msg == 0x0FA5, "invalid exit code");
 800ddd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddd2:	f640 72a5 	movw	r2, #4005	; 0xfa5
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	bf0c      	ite	eq
 800ddda:	2301      	moveq	r3, #1
 800dddc:	2300      	movne	r3, #0
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	4912      	ldr	r1, [pc, #72]	; (800de2c <oslib_test_005_001_execute+0x1ac>)
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7f9 fa04 	bl	80071f0 <__test_assert>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
  }
  test_end_step(3);
}
 800ddec:	b00d      	add	sp, #52	; 0x34
 800ddee:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddf2:	bf00      	nop
 800ddf4:	20000c6c 	.word	0x20000c6c
 800ddf8:	0801ede0 	.word	0x0801ede0
 800ddfc:	20001a20 	.word	0x20001a20
 800de00:	20001c10 	.word	0x20001c10
 800de04:	0800dc41 	.word	0x0800dc41
 800de08:	0800db41 	.word	0x0800db41
 800de0c:	0801edec 	.word	0x0801edec
 800de10:	0800db51 	.word	0x0800db51
 800de14:	0800db71 	.word	0x0800db71
 800de18:	0800dba1 	.word	0x0800dba1
 800de1c:	0800dbe1 	.word	0x0800dbe1
 800de20:	0800dc21 	.word	0x0800dc21
 800de24:	0801eda0 	.word	0x0801eda0
 800de28:	0801ee04 	.word	0x0801ee04
 800de2c:	0801ee14 	.word	0x0801ee14

0800de30 <chSysLock.lto_priv.29>:
static inline void chSysLock(void) {
 800de30:	b082      	sub	sp, #8
 800de32:	2330      	movs	r3, #48	; 0x30
 800de34:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800de36:	9b01      	ldr	r3, [sp, #4]
 800de38:	f383 8811 	msr	BASEPRI, r3
}
 800de3c:	bf00      	nop
}
 800de3e:	bf00      	nop
}
 800de40:	bf00      	nop
 800de42:	b002      	add	sp, #8
 800de44:	4770      	bx	lr
 800de46:	bf00      	nop
	...

0800de50 <chSysUnlock.lto_priv.29>:
static inline void chSysUnlock(void) {
 800de50:	b082      	sub	sp, #8
 800de52:	2300      	movs	r3, #0
 800de54:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800de56:	9b01      	ldr	r3, [sp, #4]
 800de58:	f383 8811 	msr	BASEPRI, r3
}
 800de5c:	bf00      	nop
}
 800de5e:	bf00      	nop
}
 800de60:	bf00      	nop
 800de62:	b002      	add	sp, #8
 800de64:	4770      	bx	lr
 800de66:	bf00      	nop
	...

0800de70 <chCacheReleaseObject>:
 * @param[in] objp      pointer to the @p oc_object_t structure
 *
 * @api
 */
static inline void chCacheReleaseObject(objects_cache_t *ocp,
                                        oc_object_t *objp) {
 800de70:	b500      	push	{lr}
 800de72:	b083      	sub	sp, #12
 800de74:	9001      	str	r0, [sp, #4]
 800de76:	9100      	str	r1, [sp, #0]

  chSysLock();
 800de78:	f7ff ffda 	bl	800de30 <chSysLock.lto_priv.29>
  chCacheReleaseObjectI(ocp, objp);
 800de7c:	9900      	ldr	r1, [sp, #0]
 800de7e:	9801      	ldr	r0, [sp, #4]
 800de80:	f7f8 f8ee 	bl	8006060 <chCacheReleaseObjectI>
  chSchRescheduleS();
 800de84:	f7f4 fe74 	bl	8002b70 <chSchRescheduleS>
  chSysUnlock();
 800de88:	f7ff ffe2 	bl	800de50 <chSysUnlock.lto_priv.29>
}
 800de8c:	bf00      	nop
 800de8e:	b003      	add	sp, #12
 800de90:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800dea0 <obj_read>:
static cached_object_t objects[NUM_OBJECTS];
static objects_cache_t cache1;

static bool obj_read(objects_cache_t *ocp,
                     oc_object_t *objp,
                     bool async) {
 800dea0:	b500      	push	{lr}
 800dea2:	b085      	sub	sp, #20
 800dea4:	9003      	str	r0, [sp, #12]
 800dea6:	9102      	str	r1, [sp, #8]
 800dea8:	4613      	mov	r3, r2
 800deaa:	f88d 3007 	strb.w	r3, [sp, #7]

  test_emit_token('a' + objp->obj_key);
 800deae:	9b02      	ldr	r3, [sp, #8]
 800deb0:	695b      	ldr	r3, [r3, #20]
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	3361      	adds	r3, #97	; 0x61
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	4618      	mov	r0, r3
 800deba:	f7f9 f9f9 	bl	80072b0 <test_emit_token>

  objp->obj_flags &= ~OC_FLAG_NOTSYNC;
 800debe:	9b02      	ldr	r3, [sp, #8]
 800dec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec2:	f023 0208 	bic.w	r2, r3, #8
 800dec6:	9b02      	ldr	r3, [sp, #8]
 800dec8:	625a      	str	r2, [r3, #36]	; 0x24

  if (async) {
 800deca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d003      	beq.n	800deda <obj_read+0x3a>
    chCacheReleaseObject(ocp, objp);
 800ded2:	9902      	ldr	r1, [sp, #8]
 800ded4:	9803      	ldr	r0, [sp, #12]
 800ded6:	f7ff ffcb 	bl	800de70 <chCacheReleaseObject>
  }

  return false;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	b005      	add	sp, #20
 800dee0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800def0 <obj_write>:

static bool obj_write(objects_cache_t *ocp,
                      oc_object_t *objp,
                      bool async) {
 800def0:	b500      	push	{lr}
 800def2:	b085      	sub	sp, #20
 800def4:	9003      	str	r0, [sp, #12]
 800def6:	9102      	str	r1, [sp, #8]
 800def8:	4613      	mov	r3, r2
 800defa:	f88d 3007 	strb.w	r3, [sp, #7]
  (void)ocp;
  (void)async;

  test_emit_token('A' + objp->obj_key);
 800defe:	9b02      	ldr	r3, [sp, #8]
 800df00:	695b      	ldr	r3, [r3, #20]
 800df02:	b2db      	uxtb	r3, r3
 800df04:	3341      	adds	r3, #65	; 0x41
 800df06:	b2db      	uxtb	r3, r3
 800df08:	4618      	mov	r0, r3
 800df0a:	f7f9 f9d1 	bl	80072b0 <test_emit_token>

  return false;
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	b005      	add	sp, #20
 800df14:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800df20 <oslib_test_006_001_execute>:
 * - [6.1.5] Checking cached objects.
 * - [6.1.6] Checking non-cached objects.
 * .
 */

static void oslib_test_006_001_execute(void) {
 800df20:	b500      	push	{lr}
 800df22:	b091      	sub	sp, #68	; 0x44

  /* [6.1.1] Cache initialization.*/
  test_set_step(1);
 800df24:	4b6a      	ldr	r3, [pc, #424]	; (800e0d0 <oslib_test_006_001_execute+0x1b0>)
 800df26:	2201      	movs	r2, #1
 800df28:	601a      	str	r2, [r3, #0]
  {
    chCacheObjectInit(&cache1,
 800df2a:	4b6a      	ldr	r3, [pc, #424]	; (800e0d4 <oslib_test_006_001_execute+0x1b4>)
 800df2c:	9303      	str	r3, [sp, #12]
 800df2e:	4b6a      	ldr	r3, [pc, #424]	; (800e0d8 <oslib_test_006_001_execute+0x1b8>)
 800df30:	9302      	str	r3, [sp, #8]
 800df32:	4b6a      	ldr	r3, [pc, #424]	; (800e0dc <oslib_test_006_001_execute+0x1bc>)
 800df34:	9301      	str	r3, [sp, #4]
 800df36:	233c      	movs	r3, #60	; 0x3c
 800df38:	9300      	str	r3, [sp, #0]
 800df3a:	2304      	movs	r3, #4
 800df3c:	4a68      	ldr	r2, [pc, #416]	; (800e0e0 <oslib_test_006_001_execute+0x1c0>)
 800df3e:	2108      	movs	r1, #8
 800df40:	4868      	ldr	r0, [pc, #416]	; (800e0e4 <oslib_test_006_001_execute+0x1c4>)
 800df42:	f7f7 ffa5 	bl	8005e90 <chCacheObjectInit>
                      obj_write);
  }
  test_end_step(1);

  /* [6.1.2] Getting and releasing objects without initialization.*/
  test_set_step(2);
 800df46:	4b62      	ldr	r3, [pc, #392]	; (800e0d0 <oslib_test_006_001_execute+0x1b0>)
 800df48:	2202      	movs	r2, #2
 800df4a:	601a      	str	r2, [r3, #0]
  {
    uint32_t i;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800df4c:	2300      	movs	r3, #0
 800df4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800df50:	e02e      	b.n	800dfb0 <oslib_test_006_001_execute+0x90>
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 800df52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df54:	2100      	movs	r1, #0
 800df56:	4863      	ldr	r0, [pc, #396]	; (800e0e4 <oslib_test_006_001_execute+0x1c4>)
 800df58:	f7f8 f81a 	bl	8005f90 <chCacheGetObject>
 800df5c:	9004      	str	r0, [sp, #16]

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800df5e:	9b04      	ldr	r3, [sp, #16]
 800df60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df62:	f003 0302 	and.w	r3, r3, #2
 800df66:	2b00      	cmp	r3, #0
 800df68:	bf14      	ite	ne
 800df6a:	2301      	movne	r3, #1
 800df6c:	2300      	moveq	r3, #0
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	495d      	ldr	r1, [pc, #372]	; (800e0e8 <oslib_test_006_001_execute+0x1c8>)
 800df72:	4618      	mov	r0, r3
 800df74:	f7f9 f93c 	bl	80071f0 <__test_assert>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f040 81bb 	bne.w	800e2f6 <oslib_test_006_001_execute+0x3d6>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 800df80:	9b04      	ldr	r3, [sp, #16]
 800df82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df84:	f003 0308 	and.w	r3, r3, #8
 800df88:	2b00      	cmp	r3, #0
 800df8a:	bf14      	ite	ne
 800df8c:	2301      	movne	r3, #1
 800df8e:	2300      	moveq	r3, #0
 800df90:	b2db      	uxtb	r3, r3
 800df92:	4956      	ldr	r1, [pc, #344]	; (800e0ec <oslib_test_006_001_execute+0x1cc>)
 800df94:	4618      	mov	r0, r3
 800df96:	f7f9 f92b 	bl	80071f0 <__test_assert>
 800df9a:	4603      	mov	r3, r0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	f040 81aa 	bne.w	800e2f6 <oslib_test_006_001_execute+0x3d6>

      chCacheReleaseObject(&cache1, objp);
 800dfa2:	9904      	ldr	r1, [sp, #16]
 800dfa4:	484f      	ldr	r0, [pc, #316]	; (800e0e4 <oslib_test_006_001_execute+0x1c4>)
 800dfa6:	f7ff ff63 	bl	800de70 <chCacheReleaseObject>
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800dfaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfac:	3301      	adds	r3, #1
 800dfae:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfb2:	2b07      	cmp	r3, #7
 800dfb4:	d9cd      	bls.n	800df52 <oslib_test_006_001_execute+0x32>
    }

    test_assert_sequence("", "unexpected tokens");
 800dfb6:	494e      	ldr	r1, [pc, #312]	; (800e0f0 <oslib_test_006_001_execute+0x1d0>)
 800dfb8:	484e      	ldr	r0, [pc, #312]	; (800e0f4 <oslib_test_006_001_execute+0x1d4>)
 800dfba:	f7f9 f931 	bl	8007220 <__test_assert_sequence>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f040 8198 	bne.w	800e2f6 <oslib_test_006_001_execute+0x3d6>
  }
  test_end_step(2);

  /* [6.1.3] Getting and releasing objects with synchronous
     initialization.*/
  test_set_step(3);
 800dfc6:	4b42      	ldr	r3, [pc, #264]	; (800e0d0 <oslib_test_006_001_execute+0x1b0>)
 800dfc8:	2203      	movs	r2, #3
 800dfca:	601a      	str	r2, [r3, #0]
  {
    uint32_t i;
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800dfcc:	2300      	movs	r3, #0
 800dfce:	930e      	str	r3, [sp, #56]	; 0x38
 800dfd0:	e06d      	b.n	800e0ae <oslib_test_006_001_execute+0x18e>
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800dfd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	4843      	ldr	r0, [pc, #268]	; (800e0e4 <oslib_test_006_001_execute+0x1c4>)
 800dfd8:	f7f7 ffda 	bl	8005f90 <chCacheGetObject>
 800dfdc:	9006      	str	r0, [sp, #24]

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800dfde:	9b06      	ldr	r3, [sp, #24]
 800dfe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe2:	f003 0302 	and.w	r3, r3, #2
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	bf14      	ite	ne
 800dfea:	2301      	movne	r3, #1
 800dfec:	2300      	moveq	r3, #0
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	493d      	ldr	r1, [pc, #244]	; (800e0e8 <oslib_test_006_001_execute+0x1c8>)
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7f9 f8fc 	bl	80071f0 <__test_assert>
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	f040 817b 	bne.w	800e2f6 <oslib_test_006_001_execute+0x3d6>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 800e000:	9b06      	ldr	r3, [sp, #24]
 800e002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e004:	f003 0308 	and.w	r3, r3, #8
 800e008:	2b00      	cmp	r3, #0
 800e00a:	bf14      	ite	ne
 800e00c:	2301      	movne	r3, #1
 800e00e:	2300      	moveq	r3, #0
 800e010:	b2db      	uxtb	r3, r3
 800e012:	4939      	ldr	r1, [pc, #228]	; (800e0f8 <oslib_test_006_001_execute+0x1d8>)
 800e014:	4618      	mov	r0, r3
 800e016:	f7f9 f8eb 	bl	80071f0 <__test_assert>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	f040 816a 	bne.w	800e2f6 <oslib_test_006_001_execute+0x3d6>

      error = chCacheReadObject(&cache1, objp, false);
 800e022:	2200      	movs	r2, #0
 800e024:	9906      	ldr	r1, [sp, #24]
 800e026:	482f      	ldr	r0, [pc, #188]	; (800e0e4 <oslib_test_006_001_execute+0x1c4>)
 800e028:	f7f8 f8a2 	bl	8006170 <chCacheReadObject>
 800e02c:	4603      	mov	r3, r0
 800e02e:	f88d 3017 	strb.w	r3, [sp, #23]

      test_assert(error == false, "returned error");
 800e032:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800e036:	2b00      	cmp	r3, #0
 800e038:	bf14      	ite	ne
 800e03a:	2301      	movne	r3, #1
 800e03c:	2300      	moveq	r3, #0
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	f083 0301 	eor.w	r3, r3, #1
 800e044:	b2db      	uxtb	r3, r3
 800e046:	f003 0301 	and.w	r3, r3, #1
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	492b      	ldr	r1, [pc, #172]	; (800e0fc <oslib_test_006_001_execute+0x1dc>)
 800e04e:	4618      	mov	r0, r3
 800e050:	f7f9 f8ce 	bl	80071f0 <__test_assert>
 800e054:	4603      	mov	r3, r0
 800e056:	2b00      	cmp	r3, #0
 800e058:	f040 814d 	bne.w	800e2f6 <oslib_test_006_001_execute+0x3d6>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800e05c:	9b06      	ldr	r3, [sp, #24]
 800e05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e060:	f003 0302 	and.w	r3, r3, #2
 800e064:	2b00      	cmp	r3, #0
 800e066:	bf14      	ite	ne
 800e068:	2301      	movne	r3, #1
 800e06a:	2300      	moveq	r3, #0
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	491e      	ldr	r1, [pc, #120]	; (800e0e8 <oslib_test_006_001_execute+0x1c8>)
 800e070:	4618      	mov	r0, r3
 800e072:	f7f9 f8bd 	bl	80071f0 <__test_assert>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f040 813c 	bne.w	800e2f6 <oslib_test_006_001_execute+0x3d6>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 800e07e:	9b06      	ldr	r3, [sp, #24]
 800e080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e082:	f003 0308 	and.w	r3, r3, #8
 800e086:	2b00      	cmp	r3, #0
 800e088:	bf0c      	ite	eq
 800e08a:	2301      	moveq	r3, #1
 800e08c:	2300      	movne	r3, #0
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	491b      	ldr	r1, [pc, #108]	; (800e100 <oslib_test_006_001_execute+0x1e0>)
 800e092:	4618      	mov	r0, r3
 800e094:	f7f9 f8ac 	bl	80071f0 <__test_assert>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	f040 812b 	bne.w	800e2f6 <oslib_test_006_001_execute+0x3d6>

      chCacheReleaseObject(&cache1, objp);
 800e0a0:	9906      	ldr	r1, [sp, #24]
 800e0a2:	4810      	ldr	r0, [pc, #64]	; (800e0e4 <oslib_test_006_001_execute+0x1c4>)
 800e0a4:	f7ff fee4 	bl	800de70 <chCacheReleaseObject>
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800e0a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	930e      	str	r3, [sp, #56]	; 0x38
 800e0ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0b0:	2b07      	cmp	r3, #7
 800e0b2:	d98e      	bls.n	800dfd2 <oslib_test_006_001_execute+0xb2>
    }

    test_assert_sequence("abcdefgh", "unexpected tokens");
 800e0b4:	490e      	ldr	r1, [pc, #56]	; (800e0f0 <oslib_test_006_001_execute+0x1d0>)
 800e0b6:	4813      	ldr	r0, [pc, #76]	; (800e104 <oslib_test_006_001_execute+0x1e4>)
 800e0b8:	f7f9 f8b2 	bl	8007220 <__test_assert_sequence>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f040 8119 	bne.w	800e2f6 <oslib_test_006_001_execute+0x3d6>
  }
  test_end_step(3);

  /* [6.1.4] Getting and releasing objects with asynchronous
     initialization.*/
  test_set_step(4);
 800e0c4:	4b02      	ldr	r3, [pc, #8]	; (800e0d0 <oslib_test_006_001_execute+0x1b0>)
 800e0c6:	2204      	movs	r2, #4
 800e0c8:	601a      	str	r2, [r3, #0]
  {
    uint32_t i;
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	930d      	str	r3, [sp, #52]	; 0x34
 800e0ce:	e08f      	b.n	800e1f0 <oslib_test_006_001_execute+0x2d0>
 800e0d0:	20000c6c 	.word	0x20000c6c
 800e0d4:	0800def1 	.word	0x0800def1
 800e0d8:	0800dea1 	.word	0x0800dea1
 800e0dc:	20001c50 	.word	0x20001c50
 800e0e0:	20001c10 	.word	0x20001c10
 800e0e4:	20001d40 	.word	0x20001d40
 800e0e8:	0801ee48 	.word	0x0801ee48
 800e0ec:	0801ee54 	.word	0x0801ee54
 800e0f0:	0801eda0 	.word	0x0801eda0
 800e0f4:	0801d4e8 	.word	0x0801d4e8
 800e0f8:	0801ee80 	.word	0x0801ee80
 800e0fc:	0801ee6c 	.word	0x0801ee6c
 800e100:	0801ee7c 	.word	0x0801ee7c
 800e104:	0801edb4 	.word	0x0801edb4
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800e108:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e10a:	2100      	movs	r1, #0
 800e10c:	487b      	ldr	r0, [pc, #492]	; (800e2fc <oslib_test_006_001_execute+0x3dc>)
 800e10e:	f7f7 ff3f 	bl	8005f90 <chCacheGetObject>
 800e112:	9008      	str	r0, [sp, #32]

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800e114:	9b08      	ldr	r3, [sp, #32]
 800e116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e118:	f003 0302 	and.w	r3, r3, #2
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	bf14      	ite	ne
 800e120:	2301      	movne	r3, #1
 800e122:	2300      	moveq	r3, #0
 800e124:	b2db      	uxtb	r3, r3
 800e126:	4976      	ldr	r1, [pc, #472]	; (800e300 <oslib_test_006_001_execute+0x3e0>)
 800e128:	4618      	mov	r0, r3
 800e12a:	f7f9 f861 	bl	80071f0 <__test_assert>
 800e12e:	4603      	mov	r3, r0
 800e130:	2b00      	cmp	r3, #0
 800e132:	f040 80e0 	bne.w	800e2f6 <oslib_test_006_001_execute+0x3d6>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 800e136:	9b08      	ldr	r3, [sp, #32]
 800e138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e13a:	f003 0308 	and.w	r3, r3, #8
 800e13e:	2b00      	cmp	r3, #0
 800e140:	bf14      	ite	ne
 800e142:	2301      	movne	r3, #1
 800e144:	2300      	moveq	r3, #0
 800e146:	b2db      	uxtb	r3, r3
 800e148:	496e      	ldr	r1, [pc, #440]	; (800e304 <oslib_test_006_001_execute+0x3e4>)
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7f9 f850 	bl	80071f0 <__test_assert>
 800e150:	4603      	mov	r3, r0
 800e152:	2b00      	cmp	r3, #0
 800e154:	f040 80cf 	bne.w	800e2f6 <oslib_test_006_001_execute+0x3d6>

      error = chCacheReadObject(&cache1, objp, true);
 800e158:	2201      	movs	r2, #1
 800e15a:	9908      	ldr	r1, [sp, #32]
 800e15c:	4867      	ldr	r0, [pc, #412]	; (800e2fc <oslib_test_006_001_execute+0x3dc>)
 800e15e:	f7f8 f807 	bl	8006170 <chCacheReadObject>
 800e162:	4603      	mov	r3, r0
 800e164:	f88d 301f 	strb.w	r3, [sp, #31]

      test_assert(error == false, "returned error");
 800e168:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	bf14      	ite	ne
 800e170:	2301      	movne	r3, #1
 800e172:	2300      	moveq	r3, #0
 800e174:	b2db      	uxtb	r3, r3
 800e176:	f083 0301 	eor.w	r3, r3, #1
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	f003 0301 	and.w	r3, r3, #1
 800e180:	b2db      	uxtb	r3, r3
 800e182:	4961      	ldr	r1, [pc, #388]	; (800e308 <oslib_test_006_001_execute+0x3e8>)
 800e184:	4618      	mov	r0, r3
 800e186:	f7f9 f833 	bl	80071f0 <__test_assert>
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	f040 80b2 	bne.w	800e2f6 <oslib_test_006_001_execute+0x3d6>

      objp = chCacheGetObject(&cache1, 0U, i);
 800e192:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e194:	2100      	movs	r1, #0
 800e196:	4859      	ldr	r0, [pc, #356]	; (800e2fc <oslib_test_006_001_execute+0x3dc>)
 800e198:	f7f7 fefa 	bl	8005f90 <chCacheGetObject>
 800e19c:	9008      	str	r0, [sp, #32]

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800e19e:	9b08      	ldr	r3, [sp, #32]
 800e1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a2:	f003 0302 	and.w	r3, r3, #2
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	bf14      	ite	ne
 800e1aa:	2301      	movne	r3, #1
 800e1ac:	2300      	moveq	r3, #0
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	4953      	ldr	r1, [pc, #332]	; (800e300 <oslib_test_006_001_execute+0x3e0>)
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7f9 f81c 	bl	80071f0 <__test_assert>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f040 809b 	bne.w	800e2f6 <oslib_test_006_001_execute+0x3d6>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 800e1c0:	9b08      	ldr	r3, [sp, #32]
 800e1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c4:	f003 0308 	and.w	r3, r3, #8
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	bf0c      	ite	eq
 800e1cc:	2301      	moveq	r3, #1
 800e1ce:	2300      	movne	r3, #0
 800e1d0:	b2db      	uxtb	r3, r3
 800e1d2:	494e      	ldr	r1, [pc, #312]	; (800e30c <oslib_test_006_001_execute+0x3ec>)
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7f9 f80b 	bl	80071f0 <__test_assert>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f040 808a 	bne.w	800e2f6 <oslib_test_006_001_execute+0x3d6>

      chCacheReleaseObject(&cache1, objp);
 800e1e2:	9908      	ldr	r1, [sp, #32]
 800e1e4:	4845      	ldr	r0, [pc, #276]	; (800e2fc <oslib_test_006_001_execute+0x3dc>)
 800e1e6:	f7ff fe43 	bl	800de70 <chCacheReleaseObject>
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800e1ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	930d      	str	r3, [sp, #52]	; 0x34
 800e1f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1f2:	2b07      	cmp	r3, #7
 800e1f4:	d988      	bls.n	800e108 <oslib_test_006_001_execute+0x1e8>
    }

    test_assert_sequence("abcdefgh", "unexpected tokens");
 800e1f6:	4946      	ldr	r1, [pc, #280]	; (800e310 <oslib_test_006_001_execute+0x3f0>)
 800e1f8:	4846      	ldr	r0, [pc, #280]	; (800e314 <oslib_test_006_001_execute+0x3f4>)
 800e1fa:	f7f9 f811 	bl	8007220 <__test_assert_sequence>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d178      	bne.n	800e2f6 <oslib_test_006_001_execute+0x3d6>
  }
  test_end_step(4);

  /* [6.1.5] Checking cached objects.*/
  test_set_step(5);
 800e204:	4b44      	ldr	r3, [pc, #272]	; (800e318 <oslib_test_006_001_execute+0x3f8>)
 800e206:	2205      	movs	r2, #5
 800e208:	601a      	str	r2, [r3, #0]
  {
    uint32_t i;

    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 800e20a:	2304      	movs	r3, #4
 800e20c:	930c      	str	r3, [sp, #48]	; 0x30
 800e20e:	e02c      	b.n	800e26a <oslib_test_006_001_execute+0x34a>
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800e210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e212:	2100      	movs	r1, #0
 800e214:	4839      	ldr	r0, [pc, #228]	; (800e2fc <oslib_test_006_001_execute+0x3dc>)
 800e216:	f7f7 febb 	bl	8005f90 <chCacheGetObject>
 800e21a:	9009      	str	r0, [sp, #36]	; 0x24

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800e21c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e220:	f003 0302 	and.w	r3, r3, #2
 800e224:	2b00      	cmp	r3, #0
 800e226:	bf14      	ite	ne
 800e228:	2301      	movne	r3, #1
 800e22a:	2300      	moveq	r3, #0
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	4934      	ldr	r1, [pc, #208]	; (800e300 <oslib_test_006_001_execute+0x3e0>)
 800e230:	4618      	mov	r0, r3
 800e232:	f7f8 ffdd 	bl	80071f0 <__test_assert>
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d15c      	bne.n	800e2f6 <oslib_test_006_001_execute+0x3d6>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 800e23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e240:	f003 0308 	and.w	r3, r3, #8
 800e244:	2b00      	cmp	r3, #0
 800e246:	bf0c      	ite	eq
 800e248:	2301      	moveq	r3, #1
 800e24a:	2300      	movne	r3, #0
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	492f      	ldr	r1, [pc, #188]	; (800e30c <oslib_test_006_001_execute+0x3ec>)
 800e250:	4618      	mov	r0, r3
 800e252:	f7f8 ffcd 	bl	80071f0 <__test_assert>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d14c      	bne.n	800e2f6 <oslib_test_006_001_execute+0x3d6>

      chCacheReleaseObject(&cache1, objp);
 800e25c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e25e:	4827      	ldr	r0, [pc, #156]	; (800e2fc <oslib_test_006_001_execute+0x3dc>)
 800e260:	f7ff fe06 	bl	800de70 <chCacheReleaseObject>
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 800e264:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e266:	3301      	adds	r3, #1
 800e268:	930c      	str	r3, [sp, #48]	; 0x30
 800e26a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e26c:	2b07      	cmp	r3, #7
 800e26e:	d9cf      	bls.n	800e210 <oslib_test_006_001_execute+0x2f0>
    }

    test_assert_sequence("", "unexpected tokens");
 800e270:	4927      	ldr	r1, [pc, #156]	; (800e310 <oslib_test_006_001_execute+0x3f0>)
 800e272:	482a      	ldr	r0, [pc, #168]	; (800e31c <oslib_test_006_001_execute+0x3fc>)
 800e274:	f7f8 ffd4 	bl	8007220 <__test_assert_sequence>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d13b      	bne.n	800e2f6 <oslib_test_006_001_execute+0x3d6>
  }
  test_end_step(5);

  /* [6.1.6] Checking non-cached objects.*/
  test_set_step(6);
 800e27e:	4b26      	ldr	r3, [pc, #152]	; (800e318 <oslib_test_006_001_execute+0x3f8>)
 800e280:	2206      	movs	r2, #6
 800e282:	601a      	str	r2, [r3, #0]
  {
    uint32_t i;

    for (i = 0; i < NUM_OBJECTS; i++) {
 800e284:	2300      	movs	r3, #0
 800e286:	930b      	str	r3, [sp, #44]	; 0x2c
 800e288:	e02c      	b.n	800e2e4 <oslib_test_006_001_execute+0x3c4>
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800e28a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e28c:	2100      	movs	r1, #0
 800e28e:	481b      	ldr	r0, [pc, #108]	; (800e2fc <oslib_test_006_001_execute+0x3dc>)
 800e290:	f7f7 fe7e 	bl	8005f90 <chCacheGetObject>
 800e294:	900a      	str	r0, [sp, #40]	; 0x28

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800e296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29a:	f003 0302 	and.w	r3, r3, #2
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	bf14      	ite	ne
 800e2a2:	2301      	movne	r3, #1
 800e2a4:	2300      	moveq	r3, #0
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	4915      	ldr	r1, [pc, #84]	; (800e300 <oslib_test_006_001_execute+0x3e0>)
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7f8 ffa0 	bl	80071f0 <__test_assert>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d11f      	bne.n	800e2f6 <oslib_test_006_001_execute+0x3d6>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 800e2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ba:	f003 0308 	and.w	r3, r3, #8
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	bf14      	ite	ne
 800e2c2:	2301      	movne	r3, #1
 800e2c4:	2300      	moveq	r3, #0
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	490e      	ldr	r1, [pc, #56]	; (800e304 <oslib_test_006_001_execute+0x3e4>)
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7f8 ff90 	bl	80071f0 <__test_assert>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d10f      	bne.n	800e2f6 <oslib_test_006_001_execute+0x3d6>

      chCacheReleaseObject(&cache1, objp);
 800e2d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e2d8:	4808      	ldr	r0, [pc, #32]	; (800e2fc <oslib_test_006_001_execute+0x3dc>)
 800e2da:	f7ff fdc9 	bl	800de70 <chCacheReleaseObject>
    for (i = 0; i < NUM_OBJECTS; i++) {
 800e2de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2e6:	2b03      	cmp	r3, #3
 800e2e8:	d9cf      	bls.n	800e28a <oslib_test_006_001_execute+0x36a>
    }

    test_assert_sequence("", "unexpected tokens");
 800e2ea:	4909      	ldr	r1, [pc, #36]	; (800e310 <oslib_test_006_001_execute+0x3f0>)
 800e2ec:	480b      	ldr	r0, [pc, #44]	; (800e31c <oslib_test_006_001_execute+0x3fc>)
 800e2ee:	f7f8 ff97 	bl	8007220 <__test_assert_sequence>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
  }
  test_end_step(6);
}
 800e2f6:	b011      	add	sp, #68	; 0x44
 800e2f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e2fc:	20001d40 	.word	0x20001d40
 800e300:	0801ee48 	.word	0x0801ee48
 800e304:	0801ee80 	.word	0x0801ee80
 800e308:	0801ee6c 	.word	0x0801ee6c
 800e30c:	0801ee7c 	.word	0x0801ee7c
 800e310:	0801eda0 	.word	0x0801eda0
 800e314:	0801edb4 	.word	0x0801edb4
 800e318:	20000c6c 	.word	0x20000c6c
 800e31c:	0801d4e8 	.word	0x0801d4e8

0800e320 <chPoolObjectInit.lto_priv.2>:
                                    memgetfunc_t provider) {
 800e320:	b500      	push	{lr}
 800e322:	b085      	sub	sp, #20
 800e324:	9003      	str	r0, [sp, #12]
 800e326:	9102      	str	r1, [sp, #8]
 800e328:	9201      	str	r2, [sp, #4]
  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 800e32a:	9b01      	ldr	r3, [sp, #4]
 800e32c:	2204      	movs	r2, #4
 800e32e:	9902      	ldr	r1, [sp, #8]
 800e330:	9803      	ldr	r0, [sp, #12]
 800e332:	f7f7 f995 	bl	8005660 <chPoolObjectInitAligned>
}
 800e336:	bf00      	nop
 800e338:	b005      	add	sp, #20
 800e33a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e33e:	bf00      	nop

0800e340 <chGuardedPoolObjectInit.lto_priv.1>:
                                           size_t size) {
 800e340:	b500      	push	{lr}
 800e342:	b083      	sub	sp, #12
 800e344:	9001      	str	r0, [sp, #4]
 800e346:	9100      	str	r1, [sp, #0]
  chGuardedPoolObjectInitAligned(gmp, size, PORT_NATURAL_ALIGN);
 800e348:	2204      	movs	r2, #4
 800e34a:	9900      	ldr	r1, [sp, #0]
 800e34c:	9801      	ldr	r0, [sp, #4]
 800e34e:	f7f7 fa17 	bl	8005780 <chGuardedPoolObjectInitAligned>
}
 800e352:	bf00      	nop
 800e354:	b003      	add	sp, #12
 800e356:	f85d fb04 	ldr.w	pc, [sp], #4
 800e35a:	bf00      	nop
 800e35c:	0000      	movs	r0, r0
	...

0800e360 <null_provider>:

#if CH_CFG_USE_SEMAPHORES
static GUARDEDMEMORYPOOL_DECL(gmp1, sizeof (uint32_t), PORT_NATURAL_ALIGN);
#endif

static void *null_provider(size_t size, unsigned align) {
 800e360:	b082      	sub	sp, #8
 800e362:	9001      	str	r0, [sp, #4]
 800e364:	9100      	str	r1, [sp, #0]

  (void)size;
  (void)align;

  return NULL;
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	b002      	add	sp, #8
 800e36c:	4770      	bx	lr
 800e36e:	bf00      	nop

0800e370 <oslib_test_007_001_setup>:
 * - [7.1.7] Covering the case where a provider is unable to return
 *   more memory.
 * .
 */

static void oslib_test_007_001_setup(void) {
 800e370:	b508      	push	{r3, lr}
  chPoolObjectInit(&mp1, sizeof (uint32_t), NULL);
 800e372:	2200      	movs	r2, #0
 800e374:	2104      	movs	r1, #4
 800e376:	4802      	ldr	r0, [pc, #8]	; (800e380 <oslib_test_007_001_setup+0x10>)
 800e378:	f7ff ffd2 	bl	800e320 <chPoolObjectInit.lto_priv.2>
}
 800e37c:	bf00      	nop
 800e37e:	bd08      	pop	{r3, pc}
 800e380:	200008a8 	.word	0x200008a8
	...

0800e390 <oslib_test_007_001_execute>:

static void oslib_test_007_001_execute(void) {
 800e390:	b500      	push	{lr}
 800e392:	b083      	sub	sp, #12
  unsigned i;

  /* [7.1.1] Adding the objects to the pool using chPoolLoadArray().*/
  test_set_step(1);
 800e394:	4b49      	ldr	r3, [pc, #292]	; (800e4bc <oslib_test_007_001_execute+0x12c>)
 800e396:	2201      	movs	r2, #1
 800e398:	601a      	str	r2, [r3, #0]
  {
    chPoolLoadArray(&mp1, objects, MEMORY_POOL_SIZE);
 800e39a:	2204      	movs	r2, #4
 800e39c:	4948      	ldr	r1, [pc, #288]	; (800e4c0 <oslib_test_007_001_execute+0x130>)
 800e39e:	4849      	ldr	r0, [pc, #292]	; (800e4c4 <oslib_test_007_001_execute+0x134>)
 800e3a0:	f7f7 f976 	bl	8005690 <chPoolLoadArray>
  }
  test_end_step(1);

  /* [7.1.2] Emptying the pool using chPoolAlloc().*/
  test_set_step(2);
 800e3a4:	4b45      	ldr	r3, [pc, #276]	; (800e4bc <oslib_test_007_001_execute+0x12c>)
 800e3a6:	2202      	movs	r2, #2
 800e3a8:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	9301      	str	r3, [sp, #4]
 800e3ae:	e012      	b.n	800e3d6 <oslib_test_007_001_execute+0x46>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 800e3b0:	4844      	ldr	r0, [pc, #272]	; (800e4c4 <oslib_test_007_001_execute+0x134>)
 800e3b2:	f7f7 f9b5 	bl	8005720 <chPoolAlloc>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	bf14      	ite	ne
 800e3bc:	2301      	movne	r3, #1
 800e3be:	2300      	moveq	r3, #0
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	4941      	ldr	r1, [pc, #260]	; (800e4c8 <oslib_test_007_001_execute+0x138>)
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7f8 ff13 	bl	80071f0 <__test_assert>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d172      	bne.n	800e4b6 <oslib_test_007_001_execute+0x126>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800e3d0:	9b01      	ldr	r3, [sp, #4]
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	9301      	str	r3, [sp, #4]
 800e3d6:	9b01      	ldr	r3, [sp, #4]
 800e3d8:	2b03      	cmp	r3, #3
 800e3da:	d9e9      	bls.n	800e3b0 <oslib_test_007_001_execute+0x20>
  }
  test_end_step(2);

  /* [7.1.3] Now must be empty.*/
  test_set_step(3);
 800e3dc:	4b37      	ldr	r3, [pc, #220]	; (800e4bc <oslib_test_007_001_execute+0x12c>)
 800e3de:	2203      	movs	r2, #3
 800e3e0:	601a      	str	r2, [r3, #0]
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 800e3e2:	4838      	ldr	r0, [pc, #224]	; (800e4c4 <oslib_test_007_001_execute+0x134>)
 800e3e4:	f7f7 f99c 	bl	8005720 <chPoolAlloc>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	bf0c      	ite	eq
 800e3ee:	2301      	moveq	r3, #1
 800e3f0:	2300      	movne	r3, #0
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	4935      	ldr	r1, [pc, #212]	; (800e4cc <oslib_test_007_001_execute+0x13c>)
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7f8 fefa 	bl	80071f0 <__test_assert>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d159      	bne.n	800e4b6 <oslib_test_007_001_execute+0x126>
  }
  test_end_step(3);

  /* [7.1.4] Adding the objects to the pool using chPoolFree().*/
  test_set_step(4);
 800e402:	4b2e      	ldr	r3, [pc, #184]	; (800e4bc <oslib_test_007_001_execute+0x12c>)
 800e404:	2204      	movs	r2, #4
 800e406:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800e408:	2300      	movs	r3, #0
 800e40a:	9301      	str	r3, [sp, #4]
 800e40c:	e00a      	b.n	800e424 <oslib_test_007_001_execute+0x94>
      chPoolFree(&mp1, &objects[i]);
 800e40e:	9b01      	ldr	r3, [sp, #4]
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	4a2b      	ldr	r2, [pc, #172]	; (800e4c0 <oslib_test_007_001_execute+0x130>)
 800e414:	4413      	add	r3, r2
 800e416:	4619      	mov	r1, r3
 800e418:	482a      	ldr	r0, [pc, #168]	; (800e4c4 <oslib_test_007_001_execute+0x134>)
 800e41a:	f7f7 f9a1 	bl	8005760 <chPoolFree>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800e41e:	9b01      	ldr	r3, [sp, #4]
 800e420:	3301      	adds	r3, #1
 800e422:	9301      	str	r3, [sp, #4]
 800e424:	9b01      	ldr	r3, [sp, #4]
 800e426:	2b03      	cmp	r3, #3
 800e428:	d9f1      	bls.n	800e40e <oslib_test_007_001_execute+0x7e>
  }
  test_end_step(4);

  /* [7.1.5] Emptying the pool using chPoolAlloc() again.*/
  test_set_step(5);
 800e42a:	4b24      	ldr	r3, [pc, #144]	; (800e4bc <oslib_test_007_001_execute+0x12c>)
 800e42c:	2205      	movs	r2, #5
 800e42e:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800e430:	2300      	movs	r3, #0
 800e432:	9301      	str	r3, [sp, #4]
 800e434:	e012      	b.n	800e45c <oslib_test_007_001_execute+0xcc>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 800e436:	4823      	ldr	r0, [pc, #140]	; (800e4c4 <oslib_test_007_001_execute+0x134>)
 800e438:	f7f7 f972 	bl	8005720 <chPoolAlloc>
 800e43c:	4603      	mov	r3, r0
 800e43e:	2b00      	cmp	r3, #0
 800e440:	bf14      	ite	ne
 800e442:	2301      	movne	r3, #1
 800e444:	2300      	moveq	r3, #0
 800e446:	b2db      	uxtb	r3, r3
 800e448:	491f      	ldr	r1, [pc, #124]	; (800e4c8 <oslib_test_007_001_execute+0x138>)
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7f8 fed0 	bl	80071f0 <__test_assert>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d12f      	bne.n	800e4b6 <oslib_test_007_001_execute+0x126>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800e456:	9b01      	ldr	r3, [sp, #4]
 800e458:	3301      	adds	r3, #1
 800e45a:	9301      	str	r3, [sp, #4]
 800e45c:	9b01      	ldr	r3, [sp, #4]
 800e45e:	2b03      	cmp	r3, #3
 800e460:	d9e9      	bls.n	800e436 <oslib_test_007_001_execute+0xa6>
  }
  test_end_step(5);

  /* [7.1.6] Now must be empty again.*/
  test_set_step(6);
 800e462:	4b16      	ldr	r3, [pc, #88]	; (800e4bc <oslib_test_007_001_execute+0x12c>)
 800e464:	2206      	movs	r2, #6
 800e466:	601a      	str	r2, [r3, #0]
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 800e468:	4816      	ldr	r0, [pc, #88]	; (800e4c4 <oslib_test_007_001_execute+0x134>)
 800e46a:	f7f7 f959 	bl	8005720 <chPoolAlloc>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	bf0c      	ite	eq
 800e474:	2301      	moveq	r3, #1
 800e476:	2300      	movne	r3, #0
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	4914      	ldr	r1, [pc, #80]	; (800e4cc <oslib_test_007_001_execute+0x13c>)
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7f8 feb7 	bl	80071f0 <__test_assert>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d116      	bne.n	800e4b6 <oslib_test_007_001_execute+0x126>
  }
  test_end_step(6);

  /* [7.1.7] Covering the case where a provider is unable to return
     more memory.*/
  test_set_step(7);
 800e488:	4b0c      	ldr	r3, [pc, #48]	; (800e4bc <oslib_test_007_001_execute+0x12c>)
 800e48a:	2207      	movs	r2, #7
 800e48c:	601a      	str	r2, [r3, #0]
  {
    chPoolObjectInit(&mp1, sizeof (uint32_t), null_provider);
 800e48e:	4a10      	ldr	r2, [pc, #64]	; (800e4d0 <oslib_test_007_001_execute+0x140>)
 800e490:	2104      	movs	r1, #4
 800e492:	480c      	ldr	r0, [pc, #48]	; (800e4c4 <oslib_test_007_001_execute+0x134>)
 800e494:	f7ff ff44 	bl	800e320 <chPoolObjectInit.lto_priv.2>
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800e498:	480a      	ldr	r0, [pc, #40]	; (800e4c4 <oslib_test_007_001_execute+0x134>)
 800e49a:	f7f7 f941 	bl	8005720 <chPoolAlloc>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	bf0c      	ite	eq
 800e4a4:	2301      	moveq	r3, #1
 800e4a6:	2300      	movne	r3, #0
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	490a      	ldr	r1, [pc, #40]	; (800e4d4 <oslib_test_007_001_execute+0x144>)
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7f8 fe9f 	bl	80071f0 <__test_assert>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
  }
  test_end_step(7);
}
 800e4b6:	b003      	add	sp, #12
 800e4b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4bc:	20000c6c 	.word	0x20000c6c
 800e4c0:	20001d84 	.word	0x20001d84
 800e4c4:	200008a8 	.word	0x200008a8
 800e4c8:	0801eea8 	.word	0x0801eea8
 800e4cc:	0801eeb4 	.word	0x0801eeb4
 800e4d0:	0800e361 	.word	0x0800e361
 800e4d4:	0801eec4 	.word	0x0801eec4
	...

0800e4e0 <oslib_test_007_002_setup>:
 * - [7.2.5] Emptying the pool using chGuardedPoolAllocTimeout() again.
 * - [7.2.6] Now must be empty again.
 * .
 */

static void oslib_test_007_002_setup(void) {
 800e4e0:	b508      	push	{r3, lr}
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
 800e4e2:	2104      	movs	r1, #4
 800e4e4:	4802      	ldr	r0, [pc, #8]	; (800e4f0 <oslib_test_007_002_setup+0x10>)
 800e4e6:	f7ff ff2b 	bl	800e340 <chGuardedPoolObjectInit.lto_priv.1>
}
 800e4ea:	bf00      	nop
 800e4ec:	bd08      	pop	{r3, pc}
 800e4ee:	bf00      	nop
 800e4f0:	200008b8 	.word	0x200008b8
	...

0800e500 <oslib_test_007_002_execute>:

static void oslib_test_007_002_execute(void) {
 800e500:	b500      	push	{lr}
 800e502:	b083      	sub	sp, #12
  unsigned i;

  /* [7.2.1] Adding the objects to the pool using
     chGuardedPoolLoadArray().*/
  test_set_step(1);
 800e504:	4b3f      	ldr	r3, [pc, #252]	; (800e604 <oslib_test_007_002_execute+0x104>)
 800e506:	2201      	movs	r2, #1
 800e508:	601a      	str	r2, [r3, #0]
  {
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 800e50a:	2204      	movs	r2, #4
 800e50c:	493e      	ldr	r1, [pc, #248]	; (800e608 <oslib_test_007_002_execute+0x108>)
 800e50e:	483f      	ldr	r0, [pc, #252]	; (800e60c <oslib_test_007_002_execute+0x10c>)
 800e510:	f7f7 f94e 	bl	80057b0 <chGuardedPoolLoadArray>
  }
  test_end_step(1);

  /* [7.2.2] Emptying the pool using chGuardedPoolAllocTimeout().*/
  test_set_step(2);
 800e514:	4b3b      	ldr	r3, [pc, #236]	; (800e604 <oslib_test_007_002_execute+0x104>)
 800e516:	2202      	movs	r2, #2
 800e518:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800e51a:	2300      	movs	r3, #0
 800e51c:	9301      	str	r3, [sp, #4]
 800e51e:	e013      	b.n	800e548 <oslib_test_007_002_execute+0x48>
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800e520:	2100      	movs	r1, #0
 800e522:	483a      	ldr	r0, [pc, #232]	; (800e60c <oslib_test_007_002_execute+0x10c>)
 800e524:	f7f7 f984 	bl	8005830 <chGuardedPoolAllocTimeout>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	bf14      	ite	ne
 800e52e:	2301      	movne	r3, #1
 800e530:	2300      	moveq	r3, #0
 800e532:	b2db      	uxtb	r3, r3
 800e534:	4936      	ldr	r1, [pc, #216]	; (800e610 <oslib_test_007_002_execute+0x110>)
 800e536:	4618      	mov	r0, r3
 800e538:	f7f8 fe5a 	bl	80071f0 <__test_assert>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d15d      	bne.n	800e5fe <oslib_test_007_002_execute+0xfe>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800e542:	9b01      	ldr	r3, [sp, #4]
 800e544:	3301      	adds	r3, #1
 800e546:	9301      	str	r3, [sp, #4]
 800e548:	9b01      	ldr	r3, [sp, #4]
 800e54a:	2b03      	cmp	r3, #3
 800e54c:	d9e8      	bls.n	800e520 <oslib_test_007_002_execute+0x20>
  }
  test_end_step(2);

  /* [7.2.3] Now must be empty.*/
  test_set_step(3);
 800e54e:	4b2d      	ldr	r3, [pc, #180]	; (800e604 <oslib_test_007_002_execute+0x104>)
 800e550:	2203      	movs	r2, #3
 800e552:	601a      	str	r2, [r3, #0]
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800e554:	2100      	movs	r1, #0
 800e556:	482d      	ldr	r0, [pc, #180]	; (800e60c <oslib_test_007_002_execute+0x10c>)
 800e558:	f7f7 f96a 	bl	8005830 <chGuardedPoolAllocTimeout>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	bf0c      	ite	eq
 800e562:	2301      	moveq	r3, #1
 800e564:	2300      	movne	r3, #0
 800e566:	b2db      	uxtb	r3, r3
 800e568:	492a      	ldr	r1, [pc, #168]	; (800e614 <oslib_test_007_002_execute+0x114>)
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7f8 fe40 	bl	80071f0 <__test_assert>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d143      	bne.n	800e5fe <oslib_test_007_002_execute+0xfe>
  }
  test_end_step(3);

  /* [7.2.4] Adding the objects to the pool using
     chGuardedPoolFree().*/
  test_set_step(4);
 800e576:	4b23      	ldr	r3, [pc, #140]	; (800e604 <oslib_test_007_002_execute+0x104>)
 800e578:	2204      	movs	r2, #4
 800e57a:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800e57c:	2300      	movs	r3, #0
 800e57e:	9301      	str	r3, [sp, #4]
 800e580:	e00a      	b.n	800e598 <oslib_test_007_002_execute+0x98>
      chGuardedPoolFree(&gmp1, &objects[i]);
 800e582:	9b01      	ldr	r3, [sp, #4]
 800e584:	009b      	lsls	r3, r3, #2
 800e586:	4a20      	ldr	r2, [pc, #128]	; (800e608 <oslib_test_007_002_execute+0x108>)
 800e588:	4413      	add	r3, r2
 800e58a:	4619      	mov	r1, r3
 800e58c:	481f      	ldr	r0, [pc, #124]	; (800e60c <oslib_test_007_002_execute+0x10c>)
 800e58e:	f7f7 f967 	bl	8005860 <chGuardedPoolFree>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800e592:	9b01      	ldr	r3, [sp, #4]
 800e594:	3301      	adds	r3, #1
 800e596:	9301      	str	r3, [sp, #4]
 800e598:	9b01      	ldr	r3, [sp, #4]
 800e59a:	2b03      	cmp	r3, #3
 800e59c:	d9f1      	bls.n	800e582 <oslib_test_007_002_execute+0x82>
  }
  test_end_step(4);

  /* [7.2.5] Emptying the pool using chGuardedPoolAllocTimeout()
     again.*/
  test_set_step(5);
 800e59e:	4b19      	ldr	r3, [pc, #100]	; (800e604 <oslib_test_007_002_execute+0x104>)
 800e5a0:	2205      	movs	r2, #5
 800e5a2:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	9301      	str	r3, [sp, #4]
 800e5a8:	e013      	b.n	800e5d2 <oslib_test_007_002_execute+0xd2>
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800e5aa:	2100      	movs	r1, #0
 800e5ac:	4817      	ldr	r0, [pc, #92]	; (800e60c <oslib_test_007_002_execute+0x10c>)
 800e5ae:	f7f7 f93f 	bl	8005830 <chGuardedPoolAllocTimeout>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	bf14      	ite	ne
 800e5b8:	2301      	movne	r3, #1
 800e5ba:	2300      	moveq	r3, #0
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	4914      	ldr	r1, [pc, #80]	; (800e610 <oslib_test_007_002_execute+0x110>)
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7f8 fe15 	bl	80071f0 <__test_assert>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d118      	bne.n	800e5fe <oslib_test_007_002_execute+0xfe>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800e5cc:	9b01      	ldr	r3, [sp, #4]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	9301      	str	r3, [sp, #4]
 800e5d2:	9b01      	ldr	r3, [sp, #4]
 800e5d4:	2b03      	cmp	r3, #3
 800e5d6:	d9e8      	bls.n	800e5aa <oslib_test_007_002_execute+0xaa>
  }
  test_end_step(5);

  /* [7.2.6] Now must be empty again.*/
  test_set_step(6);
 800e5d8:	4b0a      	ldr	r3, [pc, #40]	; (800e604 <oslib_test_007_002_execute+0x104>)
 800e5da:	2206      	movs	r2, #6
 800e5dc:	601a      	str	r2, [r3, #0]
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800e5de:	2100      	movs	r1, #0
 800e5e0:	480a      	ldr	r0, [pc, #40]	; (800e60c <oslib_test_007_002_execute+0x10c>)
 800e5e2:	f7f7 f925 	bl	8005830 <chGuardedPoolAllocTimeout>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	bf0c      	ite	eq
 800e5ec:	2301      	moveq	r3, #1
 800e5ee:	2300      	movne	r3, #0
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	4908      	ldr	r1, [pc, #32]	; (800e614 <oslib_test_007_002_execute+0x114>)
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7f8 fdfb 	bl	80071f0 <__test_assert>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	2b00      	cmp	r3, #0
  }
  test_end_step(6);
}
 800e5fe:	b003      	add	sp, #12
 800e600:	f85d fb04 	ldr.w	pc, [sp], #4
 800e604:	20000c6c 	.word	0x20000c6c
 800e608:	20001d84 	.word	0x20001d84
 800e60c:	200008b8 	.word	0x200008b8
 800e610:	0801eea8 	.word	0x0801eea8
 800e614:	0801eeb4 	.word	0x0801eeb4
	...

0800e620 <oslib_test_007_003_setup>:
 * - [7.3.1] Trying to allocate with 100mS timeout, must fail because
 *   the pool is empty.
 * .
 */

static void oslib_test_007_003_setup(void) {
 800e620:	b508      	push	{r3, lr}
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
 800e622:	2104      	movs	r1, #4
 800e624:	4802      	ldr	r0, [pc, #8]	; (800e630 <oslib_test_007_003_setup+0x10>)
 800e626:	f7ff fe8b 	bl	800e340 <chGuardedPoolObjectInit.lto_priv.1>
}
 800e62a:	bf00      	nop
 800e62c:	bd08      	pop	{r3, pc}
 800e62e:	bf00      	nop
 800e630:	200008b8 	.word	0x200008b8
	...

0800e640 <oslib_test_007_003_execute>:

static void oslib_test_007_003_execute(void) {
 800e640:	b508      	push	{r3, lr}

  /* [7.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 800e642:	4b0a      	ldr	r3, [pc, #40]	; (800e66c <oslib_test_007_003_execute+0x2c>)
 800e644:	2201      	movs	r2, #1
 800e646:	601a      	str	r2, [r3, #0]
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 800e648:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e64c:	4808      	ldr	r0, [pc, #32]	; (800e670 <oslib_test_007_003_execute+0x30>)
 800e64e:	f7f7 f8ef 	bl	8005830 <chGuardedPoolAllocTimeout>
 800e652:	4603      	mov	r3, r0
 800e654:	2b00      	cmp	r3, #0
 800e656:	bf0c      	ite	eq
 800e658:	2301      	moveq	r3, #1
 800e65a:	2300      	movne	r3, #0
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	4905      	ldr	r1, [pc, #20]	; (800e674 <oslib_test_007_003_execute+0x34>)
 800e660:	4618      	mov	r0, r3
 800e662:	f7f8 fdc5 	bl	80071f0 <__test_assert>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
  }
  test_end_step(1);
}
 800e66a:	bd08      	pop	{r3, pc}
 800e66c:	20000c6c 	.word	0x20000c6c
 800e670:	200008b8 	.word	0x200008b8
 800e674:	0801eeb4 	.word	0x0801eeb4
	...

0800e680 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 800e680:	b500      	push	{lr}
 800e682:	b083      	sub	sp, #12
 800e684:	9001      	str	r0, [sp, #4]
 800e686:	9100      	str	r1, [sp, #0]

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 800e688:	2208      	movs	r2, #8
 800e68a:	9900      	ldr	r1, [sp, #0]
 800e68c:	9801      	ldr	r0, [sp, #4]
 800e68e:	f7f6 fdff 	bl	8005290 <chHeapAllocAligned>
 800e692:	4603      	mov	r3, r0
}
 800e694:	4618      	mov	r0, r3
 800e696:	b003      	add	sp, #12
 800e698:	f85d fb04 	ldr.w	pc, [sp], #4
 800e69c:	0000      	movs	r0, r0
	...

0800e6a0 <oslib_test_008_001_setup>:
 * - [8.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void oslib_test_008_001_setup(void) {
 800e6a0:	b508      	push	{r3, lr}
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
 800e6a2:	2280      	movs	r2, #128	; 0x80
 800e6a4:	4902      	ldr	r1, [pc, #8]	; (800e6b0 <oslib_test_008_001_setup+0x10>)
 800e6a6:	4803      	ldr	r0, [pc, #12]	; (800e6b4 <oslib_test_008_001_setup+0x14>)
 800e6a8:	f7f6 fdc2 	bl	8005230 <chHeapObjectInit>
}
 800e6ac:	bf00      	nop
 800e6ae:	bd08      	pop	{r3, pc}
 800e6b0:	20001db0 	.word	0x20001db0
 800e6b4:	20001d94 	.word	0x20001d94
	...

0800e6c0 <oslib_test_008_001_execute>:

static void oslib_test_008_001_execute(void) {
 800e6c0:	b500      	push	{lr}
 800e6c2:	b089      	sub	sp, #36	; 0x24
  void *p1, *p2, *p3;
  size_t n, sz;

  /* [8.1.1] Testing initial conditions, the heap must not be
     fragmented and one free block present.*/
  test_set_step(1);
 800e6c4:	4b8b      	ldr	r3, [pc, #556]	; (800e8f4 <oslib_test_008_001_execute+0x234>)
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	601a      	str	r2, [r3, #0]
  {
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 800e6ca:	ab03      	add	r3, sp, #12
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	4889      	ldr	r0, [pc, #548]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e6d2:	f7f6 ff1d 	bl	8005510 <chHeapStatus>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	bf0c      	ite	eq
 800e6dc:	2301      	moveq	r3, #1
 800e6de:	2300      	movne	r3, #0
 800e6e0:	b2db      	uxtb	r3, r3
 800e6e2:	4986      	ldr	r1, [pc, #536]	; (800e8fc <oslib_test_008_001_execute+0x23c>)
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7f8 fd83 	bl	80071f0 <__test_assert>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	f040 81cc 	bne.w	800ea8a <oslib_test_008_001_execute+0x3ca>
  }
  test_end_step(1);

  /* [8.1.2] Trying to allocate an block bigger than available space,
     an error is expected.*/
  test_set_step(2);
 800e6f2:	4b80      	ldr	r3, [pc, #512]	; (800e8f4 <oslib_test_008_001_execute+0x234>)
 800e6f4:	2202      	movs	r2, #2
 800e6f6:	601a      	str	r2, [r3, #0]
  {
    p1 = chHeapAlloc(&test_heap, sizeof test_heap_buffer * 2);
 800e6f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e6fc:	487e      	ldr	r0, [pc, #504]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e6fe:	f7ff ffbf 	bl	800e680 <chHeapAlloc>
 800e702:	9007      	str	r0, [sp, #28]
    test_assert(p1 == NULL, "allocation not failed");
 800e704:	9b07      	ldr	r3, [sp, #28]
 800e706:	2b00      	cmp	r3, #0
 800e708:	bf0c      	ite	eq
 800e70a:	2301      	moveq	r3, #1
 800e70c:	2300      	movne	r3, #0
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	497b      	ldr	r1, [pc, #492]	; (800e900 <oslib_test_008_001_execute+0x240>)
 800e712:	4618      	mov	r0, r3
 800e714:	f7f8 fd6c 	bl	80071f0 <__test_assert>
 800e718:	4603      	mov	r3, r0
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f040 81b5 	bne.w	800ea8a <oslib_test_008_001_execute+0x3ca>
  }
  test_end_step(2);

  /* [8.1.3] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(3);
 800e720:	4b74      	ldr	r3, [pc, #464]	; (800e8f4 <oslib_test_008_001_execute+0x234>)
 800e722:	2203      	movs	r2, #3
 800e724:	601a      	str	r2, [r3, #0]
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800e726:	2110      	movs	r1, #16
 800e728:	4873      	ldr	r0, [pc, #460]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e72a:	f7ff ffa9 	bl	800e680 <chHeapAlloc>
 800e72e:	9007      	str	r0, [sp, #28]
    test_assert(p1 != NULL, "allocation failed");
 800e730:	9b07      	ldr	r3, [sp, #28]
 800e732:	2b00      	cmp	r3, #0
 800e734:	bf14      	ite	ne
 800e736:	2301      	movne	r3, #1
 800e738:	2300      	moveq	r3, #0
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	4971      	ldr	r1, [pc, #452]	; (800e904 <oslib_test_008_001_execute+0x244>)
 800e73e:	4618      	mov	r0, r3
 800e740:	f7f8 fd56 	bl	80071f0 <__test_assert>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	f040 819f 	bne.w	800ea8a <oslib_test_008_001_execute+0x3ca>
    chHeapFree(p1);
 800e74c:	9807      	ldr	r0, [sp, #28]
 800e74e:	f7f6 fe6f 	bl	8005430 <chHeapFree>
  }
  test_end_step(3);

  /* [8.1.4] Using chHeapStatus() to assess the heap state. There must
     be at least one free block of sufficient size.*/
  test_set_step(4);
 800e752:	4b68      	ldr	r3, [pc, #416]	; (800e8f4 <oslib_test_008_001_execute+0x234>)
 800e754:	2204      	movs	r2, #4
 800e756:	601a      	str	r2, [r3, #0]
  {
    size_t total_size, largest_size;

    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800e758:	aa01      	add	r2, sp, #4
 800e75a:	ab02      	add	r3, sp, #8
 800e75c:	4619      	mov	r1, r3
 800e75e:	4866      	ldr	r0, [pc, #408]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e760:	f7f6 fed6 	bl	8005510 <chHeapStatus>
 800e764:	4603      	mov	r3, r0
 800e766:	9304      	str	r3, [sp, #16]
    test_assert(n == 1, "missing free block");
 800e768:	9b04      	ldr	r3, [sp, #16]
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	bf0c      	ite	eq
 800e76e:	2301      	moveq	r3, #1
 800e770:	2300      	movne	r3, #0
 800e772:	b2db      	uxtb	r3, r3
 800e774:	4964      	ldr	r1, [pc, #400]	; (800e908 <oslib_test_008_001_execute+0x248>)
 800e776:	4618      	mov	r0, r3
 800e778:	f7f8 fd3a 	bl	80071f0 <__test_assert>
 800e77c:	4603      	mov	r3, r0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	f040 8183 	bne.w	800ea8a <oslib_test_008_001_execute+0x3ca>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 800e784:	9b02      	ldr	r3, [sp, #8]
 800e786:	2b0f      	cmp	r3, #15
 800e788:	bf8c      	ite	hi
 800e78a:	2301      	movhi	r3, #1
 800e78c:	2300      	movls	r3, #0
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	495e      	ldr	r1, [pc, #376]	; (800e90c <oslib_test_008_001_execute+0x24c>)
 800e792:	4618      	mov	r0, r3
 800e794:	f7f8 fd2c 	bl	80071f0 <__test_assert>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f040 8175 	bne.w	800ea8a <oslib_test_008_001_execute+0x3ca>
    test_assert(total_size == largest_size, "unexpected heap state");
 800e7a0:	9a02      	ldr	r2, [sp, #8]
 800e7a2:	9b01      	ldr	r3, [sp, #4]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	bf0c      	ite	eq
 800e7a8:	2301      	moveq	r3, #1
 800e7aa:	2300      	movne	r3, #0
 800e7ac:	b2db      	uxtb	r3, r3
 800e7ae:	4957      	ldr	r1, [pc, #348]	; (800e90c <oslib_test_008_001_execute+0x24c>)
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7f8 fd1d 	bl	80071f0 <__test_assert>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	f040 8166 	bne.w	800ea8a <oslib_test_008_001_execute+0x3ca>
  }
  test_end_step(4);

  /* [8.1.5] Allocating then freeing in the same order.*/
  test_set_step(5);
 800e7be:	4b4d      	ldr	r3, [pc, #308]	; (800e8f4 <oslib_test_008_001_execute+0x234>)
 800e7c0:	2205      	movs	r2, #5
 800e7c2:	601a      	str	r2, [r3, #0]
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800e7c4:	2110      	movs	r1, #16
 800e7c6:	484c      	ldr	r0, [pc, #304]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e7c8:	f7ff ff5a 	bl	800e680 <chHeapAlloc>
 800e7cc:	9007      	str	r0, [sp, #28]
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800e7ce:	2110      	movs	r1, #16
 800e7d0:	4849      	ldr	r0, [pc, #292]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e7d2:	f7ff ff55 	bl	800e680 <chHeapAlloc>
 800e7d6:	9006      	str	r0, [sp, #24]
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800e7d8:	2110      	movs	r1, #16
 800e7da:	4847      	ldr	r0, [pc, #284]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e7dc:	f7ff ff50 	bl	800e680 <chHeapAlloc>
 800e7e0:	9005      	str	r0, [sp, #20]
    chHeapFree(p1);                                 /* Does not merge.*/
 800e7e2:	9807      	ldr	r0, [sp, #28]
 800e7e4:	f7f6 fe24 	bl	8005430 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 800e7e8:	9806      	ldr	r0, [sp, #24]
 800e7ea:	f7f6 fe21 	bl	8005430 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 800e7ee:	9805      	ldr	r0, [sp, #20]
 800e7f0:	f7f6 fe1e 	bl	8005430 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800e7f4:	ab04      	add	r3, sp, #16
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	483f      	ldr	r0, [pc, #252]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e7fc:	f7f6 fe88 	bl	8005510 <chHeapStatus>
 800e800:	4603      	mov	r3, r0
 800e802:	2b01      	cmp	r3, #1
 800e804:	bf0c      	ite	eq
 800e806:	2301      	moveq	r3, #1
 800e808:	2300      	movne	r3, #0
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	493b      	ldr	r1, [pc, #236]	; (800e8fc <oslib_test_008_001_execute+0x23c>)
 800e80e:	4618      	mov	r0, r3
 800e810:	f7f8 fcee 	bl	80071f0 <__test_assert>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	f040 8137 	bne.w	800ea8a <oslib_test_008_001_execute+0x3ca>
  }
  test_end_step(5);

  /* [8.1.6] Allocating then freeing in reverse order.*/
  test_set_step(6);
 800e81c:	4b35      	ldr	r3, [pc, #212]	; (800e8f4 <oslib_test_008_001_execute+0x234>)
 800e81e:	2206      	movs	r2, #6
 800e820:	601a      	str	r2, [r3, #0]
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800e822:	2110      	movs	r1, #16
 800e824:	4834      	ldr	r0, [pc, #208]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e826:	f7ff ff2b 	bl	800e680 <chHeapAlloc>
 800e82a:	9007      	str	r0, [sp, #28]
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800e82c:	2110      	movs	r1, #16
 800e82e:	4832      	ldr	r0, [pc, #200]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e830:	f7ff ff26 	bl	800e680 <chHeapAlloc>
 800e834:	9006      	str	r0, [sp, #24]
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800e836:	2110      	movs	r1, #16
 800e838:	482f      	ldr	r0, [pc, #188]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e83a:	f7ff ff21 	bl	800e680 <chHeapAlloc>
 800e83e:	9005      	str	r0, [sp, #20]
    chHeapFree(p3);                                 /* Merges forward.*/
 800e840:	9805      	ldr	r0, [sp, #20]
 800e842:	f7f6 fdf5 	bl	8005430 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 800e846:	9806      	ldr	r0, [sp, #24]
 800e848:	f7f6 fdf2 	bl	8005430 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 800e84c:	9807      	ldr	r0, [sp, #28]
 800e84e:	f7f6 fdef 	bl	8005430 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800e852:	ab04      	add	r3, sp, #16
 800e854:	2200      	movs	r2, #0
 800e856:	4619      	mov	r1, r3
 800e858:	4827      	ldr	r0, [pc, #156]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e85a:	f7f6 fe59 	bl	8005510 <chHeapStatus>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b01      	cmp	r3, #1
 800e862:	bf0c      	ite	eq
 800e864:	2301      	moveq	r3, #1
 800e866:	2300      	movne	r3, #0
 800e868:	b2db      	uxtb	r3, r3
 800e86a:	4924      	ldr	r1, [pc, #144]	; (800e8fc <oslib_test_008_001_execute+0x23c>)
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7f8 fcbf 	bl	80071f0 <__test_assert>
 800e872:	4603      	mov	r3, r0
 800e874:	2b00      	cmp	r3, #0
 800e876:	f040 8108 	bne.w	800ea8a <oslib_test_008_001_execute+0x3ca>
  }
  test_end_step(6);

  /* [8.1.7] Small fragments handling. Checking the behavior when
     allocating blocks with size not multiple of alignment unit.*/
  test_set_step(7);
 800e87a:	4b1e      	ldr	r3, [pc, #120]	; (800e8f4 <oslib_test_008_001_execute+0x234>)
 800e87c:	2207      	movs	r2, #7
 800e87e:	601a      	str	r2, [r3, #0]
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE + 1);
 800e880:	2111      	movs	r1, #17
 800e882:	481d      	ldr	r0, [pc, #116]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e884:	f7ff fefc 	bl	800e680 <chHeapAlloc>
 800e888:	9007      	str	r0, [sp, #28]
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800e88a:	2110      	movs	r1, #16
 800e88c:	481a      	ldr	r0, [pc, #104]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e88e:	f7ff fef7 	bl	800e680 <chHeapAlloc>
 800e892:	9006      	str	r0, [sp, #24]
    chHeapFree(p1);
 800e894:	9807      	ldr	r0, [sp, #28]
 800e896:	f7f6 fdcb 	bl	8005430 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 800e89a:	ab04      	add	r3, sp, #16
 800e89c:	2200      	movs	r2, #0
 800e89e:	4619      	mov	r1, r3
 800e8a0:	4815      	ldr	r0, [pc, #84]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e8a2:	f7f6 fe35 	bl	8005510 <chHeapStatus>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b02      	cmp	r3, #2
 800e8aa:	bf0c      	ite	eq
 800e8ac:	2301      	moveq	r3, #1
 800e8ae:	2300      	movne	r3, #0
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	4917      	ldr	r1, [pc, #92]	; (800e910 <oslib_test_008_001_execute+0x250>)
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7f8 fc9b 	bl	80071f0 <__test_assert>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f040 80e4 	bne.w	800ea8a <oslib_test_008_001_execute+0x3ca>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800e8c2:	2110      	movs	r1, #16
 800e8c4:	480c      	ldr	r0, [pc, #48]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e8c6:	f7ff fedb 	bl	800e680 <chHeapAlloc>
 800e8ca:	9007      	str	r0, [sp, #28]
    /* Note, the first situation happens when the alignment size is smaller
       than the header size, the second in the other cases.*/
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800e8cc:	ab04      	add	r3, sp, #16
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	4809      	ldr	r0, [pc, #36]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e8d4:	f7f6 fe1c 	bl	8005510 <chHeapStatus>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d008      	beq.n	800e8f0 <oslib_test_008_001_execute+0x230>
 800e8de:	ab04      	add	r3, sp, #16
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	4804      	ldr	r0, [pc, #16]	; (800e8f8 <oslib_test_008_001_execute+0x238>)
 800e8e6:	f7f6 fe13 	bl	8005510 <chHeapStatus>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	2b02      	cmp	r3, #2
 800e8ee:	d111      	bne.n	800e914 <oslib_test_008_001_execute+0x254>
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	e010      	b.n	800e916 <oslib_test_008_001_execute+0x256>
 800e8f4:	20000c6c 	.word	0x20000c6c
 800e8f8:	20001d94 	.word	0x20001d94
 800e8fc:	0801e568 	.word	0x0801e568
 800e900:	0801ef28 	.word	0x0801ef28
 800e904:	0801ef40 	.word	0x0801ef40
 800e908:	0801ef54 	.word	0x0801ef54
 800e90c:	0801ef68 	.word	0x0801ef68
 800e910:	0801ef80 	.word	0x0801ef80
 800e914:	2300      	movs	r3, #0
 800e916:	f003 0301 	and.w	r3, r3, #1
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	495c      	ldr	r1, [pc, #368]	; (800ea90 <oslib_test_008_001_execute+0x3d0>)
 800e91e:	4618      	mov	r0, r3
 800e920:	f7f8 fc66 	bl	80071f0 <__test_assert>
 800e924:	4603      	mov	r3, r0
 800e926:	2b00      	cmp	r3, #0
 800e928:	f040 80af 	bne.w	800ea8a <oslib_test_008_001_execute+0x3ca>
                (chHeapStatus(&test_heap, &n, NULL) == 2), "heap fragmented");
    chHeapFree(p2);
 800e92c:	9806      	ldr	r0, [sp, #24]
 800e92e:	f7f6 fd7f 	bl	8005430 <chHeapFree>
    chHeapFree(p1);
 800e932:	9807      	ldr	r0, [sp, #28]
 800e934:	f7f6 fd7c 	bl	8005430 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800e938:	ab04      	add	r3, sp, #16
 800e93a:	2200      	movs	r2, #0
 800e93c:	4619      	mov	r1, r3
 800e93e:	4855      	ldr	r0, [pc, #340]	; (800ea94 <oslib_test_008_001_execute+0x3d4>)
 800e940:	f7f6 fde6 	bl	8005510 <chHeapStatus>
 800e944:	4603      	mov	r3, r0
 800e946:	2b01      	cmp	r3, #1
 800e948:	bf0c      	ite	eq
 800e94a:	2301      	moveq	r3, #1
 800e94c:	2300      	movne	r3, #0
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	494f      	ldr	r1, [pc, #316]	; (800ea90 <oslib_test_008_001_execute+0x3d0>)
 800e952:	4618      	mov	r0, r3
 800e954:	f7f8 fc4c 	bl	80071f0 <__test_assert>
 800e958:	4603      	mov	r3, r0
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	f040 8095 	bne.w	800ea8a <oslib_test_008_001_execute+0x3ca>
  }
  test_end_step(7);

  /* [8.1.8] Skipping a fragment, the first fragment in the list is too
     small so the allocator must pick the second one.*/
  test_set_step(8);
 800e960:	4b4d      	ldr	r3, [pc, #308]	; (800ea98 <oslib_test_008_001_execute+0x3d8>)
 800e962:	2208      	movs	r2, #8
 800e964:	601a      	str	r2, [r3, #0]
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800e966:	2110      	movs	r1, #16
 800e968:	484a      	ldr	r0, [pc, #296]	; (800ea94 <oslib_test_008_001_execute+0x3d4>)
 800e96a:	f7ff fe89 	bl	800e680 <chHeapAlloc>
 800e96e:	9007      	str	r0, [sp, #28]
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800e970:	2110      	movs	r1, #16
 800e972:	4848      	ldr	r0, [pc, #288]	; (800ea94 <oslib_test_008_001_execute+0x3d4>)
 800e974:	f7ff fe84 	bl	800e680 <chHeapAlloc>
 800e978:	9006      	str	r0, [sp, #24]
    chHeapFree(p1);
 800e97a:	9807      	ldr	r0, [sp, #28]
 800e97c:	f7f6 fd58 	bl	8005430 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 800e980:	ab04      	add	r3, sp, #16
 800e982:	2200      	movs	r2, #0
 800e984:	4619      	mov	r1, r3
 800e986:	4843      	ldr	r0, [pc, #268]	; (800ea94 <oslib_test_008_001_execute+0x3d4>)
 800e988:	f7f6 fdc2 	bl	8005510 <chHeapStatus>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b02      	cmp	r3, #2
 800e990:	bf0c      	ite	eq
 800e992:	2301      	moveq	r3, #1
 800e994:	2300      	movne	r3, #0
 800e996:	b2db      	uxtb	r3, r3
 800e998:	4940      	ldr	r1, [pc, #256]	; (800ea9c <oslib_test_008_001_execute+0x3dc>)
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7f8 fc28 	bl	80071f0 <__test_assert>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d171      	bne.n	800ea8a <oslib_test_008_001_execute+0x3ca>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE * 2); /* Skips first fragment.*/
 800e9a6:	2120      	movs	r1, #32
 800e9a8:	483a      	ldr	r0, [pc, #232]	; (800ea94 <oslib_test_008_001_execute+0x3d4>)
 800e9aa:	f7ff fe69 	bl	800e680 <chHeapAlloc>
 800e9ae:	9007      	str	r0, [sp, #28]
    chHeapFree(p1);
 800e9b0:	9807      	ldr	r0, [sp, #28]
 800e9b2:	f7f6 fd3d 	bl	8005430 <chHeapFree>
    chHeapFree(p2);
 800e9b6:	9806      	ldr	r0, [sp, #24]
 800e9b8:	f7f6 fd3a 	bl	8005430 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800e9bc:	ab04      	add	r3, sp, #16
 800e9be:	2200      	movs	r2, #0
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	4834      	ldr	r0, [pc, #208]	; (800ea94 <oslib_test_008_001_execute+0x3d4>)
 800e9c4:	f7f6 fda4 	bl	8005510 <chHeapStatus>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	bf0c      	ite	eq
 800e9ce:	2301      	moveq	r3, #1
 800e9d0:	2300      	movne	r3, #0
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	492e      	ldr	r1, [pc, #184]	; (800ea90 <oslib_test_008_001_execute+0x3d0>)
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7f8 fc0a 	bl	80071f0 <__test_assert>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d153      	bne.n	800ea8a <oslib_test_008_001_execute+0x3ca>
  }
  test_end_step(8);

  /* [8.1.9] Allocating the whole available space.*/
  test_set_step(9);
 800e9e2:	4b2d      	ldr	r3, [pc, #180]	; (800ea98 <oslib_test_008_001_execute+0x3d8>)
 800e9e4:	2209      	movs	r2, #9
 800e9e6:	601a      	str	r2, [r3, #0]
  {
    (void)chHeapStatus(&test_heap, &n, NULL);
 800e9e8:	ab04      	add	r3, sp, #16
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	4829      	ldr	r0, [pc, #164]	; (800ea94 <oslib_test_008_001_execute+0x3d4>)
 800e9f0:	f7f6 fd8e 	bl	8005510 <chHeapStatus>
    p1 = chHeapAlloc(&test_heap, n);
 800e9f4:	9b04      	ldr	r3, [sp, #16]
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	4826      	ldr	r0, [pc, #152]	; (800ea94 <oslib_test_008_001_execute+0x3d4>)
 800e9fa:	f7ff fe41 	bl	800e680 <chHeapAlloc>
 800e9fe:	9007      	str	r0, [sp, #28]
    test_assert(p1 != NULL, "allocation failed");
 800ea00:	9b07      	ldr	r3, [sp, #28]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	bf14      	ite	ne
 800ea06:	2301      	movne	r3, #1
 800ea08:	2300      	moveq	r3, #0
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	4924      	ldr	r1, [pc, #144]	; (800eaa0 <oslib_test_008_001_execute+0x3e0>)
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7f8 fbee 	bl	80071f0 <__test_assert>
 800ea14:	4603      	mov	r3, r0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d137      	bne.n	800ea8a <oslib_test_008_001_execute+0x3ca>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	481d      	ldr	r0, [pc, #116]	; (800ea94 <oslib_test_008_001_execute+0x3d4>)
 800ea20:	f7f6 fd76 	bl	8005510 <chHeapStatus>
 800ea24:	4603      	mov	r3, r0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	bf0c      	ite	eq
 800ea2a:	2301      	moveq	r3, #1
 800ea2c:	2300      	movne	r3, #0
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	491c      	ldr	r1, [pc, #112]	; (800eaa4 <oslib_test_008_001_execute+0x3e4>)
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7f8 fbdc 	bl	80071f0 <__test_assert>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d125      	bne.n	800ea8a <oslib_test_008_001_execute+0x3ca>
    chHeapFree(p1);
 800ea3e:	9807      	ldr	r0, [sp, #28]
 800ea40:	f7f6 fcf6 	bl	8005430 <chHeapFree>
  }
  test_end_step(9);

  /* [8.1.10] Testing final conditions. The heap geometry must be the
     same than the one registered at beginning.*/
  test_set_step(10);
 800ea44:	4b14      	ldr	r3, [pc, #80]	; (800ea98 <oslib_test_008_001_execute+0x3d8>)
 800ea46:	220a      	movs	r2, #10
 800ea48:	601a      	str	r2, [r3, #0]
  {
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800ea4a:	ab04      	add	r3, sp, #16
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	4619      	mov	r1, r3
 800ea50:	4810      	ldr	r0, [pc, #64]	; (800ea94 <oslib_test_008_001_execute+0x3d4>)
 800ea52:	f7f6 fd5d 	bl	8005510 <chHeapStatus>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	bf0c      	ite	eq
 800ea5c:	2301      	moveq	r3, #1
 800ea5e:	2300      	movne	r3, #0
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	490b      	ldr	r1, [pc, #44]	; (800ea90 <oslib_test_008_001_execute+0x3d0>)
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7f8 fbc3 	bl	80071f0 <__test_assert>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d10c      	bne.n	800ea8a <oslib_test_008_001_execute+0x3ca>
    test_assert(n == sz, "size changed");
 800ea70:	9a04      	ldr	r2, [sp, #16]
 800ea72:	9b03      	ldr	r3, [sp, #12]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	bf0c      	ite	eq
 800ea78:	2301      	moveq	r3, #1
 800ea7a:	2300      	movne	r3, #0
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	490a      	ldr	r1, [pc, #40]	; (800eaa8 <oslib_test_008_001_execute+0x3e8>)
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7f8 fbb5 	bl	80071f0 <__test_assert>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2b00      	cmp	r3, #0
  }
  test_end_step(10);
}
 800ea8a:	b009      	add	sp, #36	; 0x24
 800ea8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea90:	0801e568 	.word	0x0801e568
 800ea94:	20001d94 	.word	0x20001d94
 800ea98:	20000c6c 	.word	0x20000c6c
 800ea9c:	0801ef80 	.word	0x0801ef80
 800eaa0:	0801ef40 	.word	0x0801ef40
 800eaa4:	0801ec0c 	.word	0x0801ec0c
 800eaa8:	0801ef90 	.word	0x0801ef90
 800eaac:	00000000 	.word	0x00000000

0800eab0 <oslib_test_008_002_execute>:
 *   is freed using chHeapFree(), must not fail.
 * - [8.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_008_002_execute(void) {
 800eab0:	b500      	push	{lr}
 800eab2:	b085      	sub	sp, #20
  void *p1;
  size_t total_size, largest_size;

  /* [8.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 800eab4:	4b1a      	ldr	r3, [pc, #104]	; (800eb20 <oslib_test_008_002_execute+0x70>)
 800eab6:	2201      	movs	r2, #1
 800eab8:	601a      	str	r2, [r3, #0]
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 800eaba:	aa01      	add	r2, sp, #4
 800eabc:	ab02      	add	r3, sp, #8
 800eabe:	4619      	mov	r1, r3
 800eac0:	2000      	movs	r0, #0
 800eac2:	f7f6 fd25 	bl	8005510 <chHeapStatus>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
 800eac6:	2110      	movs	r1, #16
 800eac8:	4816      	ldr	r0, [pc, #88]	; (800eb24 <oslib_test_008_002_execute+0x74>)
 800eaca:	f7ff fdd9 	bl	800e680 <chHeapAlloc>
 800eace:	9003      	str	r0, [sp, #12]
    test_assert(p1 != NULL, "allocation failed");
 800ead0:	9b03      	ldr	r3, [sp, #12]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	bf14      	ite	ne
 800ead6:	2301      	movne	r3, #1
 800ead8:	2300      	moveq	r3, #0
 800eada:	b2db      	uxtb	r3, r3
 800eadc:	4912      	ldr	r1, [pc, #72]	; (800eb28 <oslib_test_008_002_execute+0x78>)
 800eade:	4618      	mov	r0, r3
 800eae0:	f7f8 fb86 	bl	80071f0 <__test_assert>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d117      	bne.n	800eb1a <oslib_test_008_002_execute+0x6a>
    chHeapFree(p1);
 800eaea:	9803      	ldr	r0, [sp, #12]
 800eaec:	f7f6 fca0 	bl	8005430 <chHeapFree>
  }
  test_end_step(1);

  /* [8.2.2] Testing allocation failure.*/
  test_set_step(2);
 800eaf0:	4b0b      	ldr	r3, [pc, #44]	; (800eb20 <oslib_test_008_002_execute+0x70>)
 800eaf2:	2202      	movs	r2, #2
 800eaf4:	601a      	str	r2, [r3, #0]
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
 800eaf6:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800eafa:	2000      	movs	r0, #0
 800eafc:	f7ff fdc0 	bl	800e680 <chHeapAlloc>
 800eb00:	9003      	str	r0, [sp, #12]
    test_assert(p1 == NULL, "allocation not failed");
 800eb02:	9b03      	ldr	r3, [sp, #12]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	bf0c      	ite	eq
 800eb08:	2301      	moveq	r3, #1
 800eb0a:	2300      	movne	r3, #0
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	4907      	ldr	r1, [pc, #28]	; (800eb2c <oslib_test_008_002_execute+0x7c>)
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7f8 fb6d 	bl	80071f0 <__test_assert>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b00      	cmp	r3, #0
  }
  test_end_step(2);
}
 800eb1a:	b005      	add	sp, #20
 800eb1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb20:	20000c6c 	.word	0x20000c6c
 800eb24:	20001d94 	.word	0x20001d94
 800eb28:	0801ef40 	.word	0x0801ef40
 800eb2c:	0801ef28 	.word	0x0801ef28

0800eb30 <chFactoryDuplicateReference>:
 * @param[in] dep       pointer to the element field of the object
 * @return              The duplicated object reference.
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {
 800eb30:	b082      	sub	sp, #8
 800eb32:	9001      	str	r0, [sp, #4]

  dep->refs++;
 800eb34:	9b01      	ldr	r3, [sp, #4]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	1c5a      	adds	r2, r3, #1
 800eb3a:	9b01      	ldr	r3, [sp, #4]
 800eb3c:	605a      	str	r2, [r3, #4]

  return dep;
 800eb3e:	9b01      	ldr	r3, [sp, #4]
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	b002      	add	sp, #8
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop
	...

0800eb50 <oslib_test_009_001_teardown>:
 * - [9.1.6] Retrieving the registered object by name again, must not
 *   exist.
 * .
 */

static void oslib_test_009_001_teardown(void) {
 800eb50:	b500      	push	{lr}
 800eb52:	b083      	sub	sp, #12
  registered_object_t *rop;

  rop = chFactoryFindObject("myobj");
 800eb54:	4809      	ldr	r0, [pc, #36]	; (800eb7c <oslib_test_009_001_teardown+0x2c>)
 800eb56:	f7f7 fe1b 	bl	8006790 <chFactoryFindObject>
 800eb5a:	9001      	str	r0, [sp, #4]
  if (rop != NULL) {
 800eb5c:	9b01      	ldr	r3, [sp, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d007      	beq.n	800eb72 <oslib_test_009_001_teardown+0x22>
    while (rop->element.refs > 0U) {
 800eb62:	e002      	b.n	800eb6a <oslib_test_009_001_teardown+0x1a>
      chFactoryReleaseObject(rop);
 800eb64:	9801      	ldr	r0, [sp, #4]
 800eb66:	f7f7 fe2b 	bl	80067c0 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 800eb6a:	9b01      	ldr	r3, [sp, #4]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1f8      	bne.n	800eb64 <oslib_test_009_001_teardown+0x14>
    }
  }
}
 800eb72:	bf00      	nop
 800eb74:	b003      	add	sp, #12
 800eb76:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb7a:	bf00      	nop
 800eb7c:	0801efd4 	.word	0x0801efd4

0800eb80 <oslib_test_009_001_execute>:

static void oslib_test_009_001_execute(void) {
 800eb80:	b500      	push	{lr}
 800eb82:	b085      	sub	sp, #20
  registered_object_t *rop;

  /* [9.1.1] Retrieving a registered object by name, must not exist.*/
  test_set_step(1);
 800eb84:	4b79      	ldr	r3, [pc, #484]	; (800ed6c <oslib_test_009_001_execute+0x1ec>)
 800eb86:	2201      	movs	r2, #1
 800eb88:	601a      	str	r2, [r3, #0]
  {
    rop = chFactoryFindObject("myobj");
 800eb8a:	4879      	ldr	r0, [pc, #484]	; (800ed70 <oslib_test_009_001_execute+0x1f0>)
 800eb8c:	f7f7 fe00 	bl	8006790 <chFactoryFindObject>
 800eb90:	9003      	str	r0, [sp, #12]
    test_assert(rop == NULL, "found");
 800eb92:	9b03      	ldr	r3, [sp, #12]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	bf0c      	ite	eq
 800eb98:	2301      	moveq	r3, #1
 800eb9a:	2300      	movne	r3, #0
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	4975      	ldr	r1, [pc, #468]	; (800ed74 <oslib_test_009_001_execute+0x1f4>)
 800eba0:	4618      	mov	r0, r3
 800eba2:	f7f8 fb25 	bl	80071f0 <__test_assert>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	f040 80dc 	bne.w	800ed66 <oslib_test_009_001_execute+0x1e6>
  }
  test_end_step(1);

  /* [9.1.2] Registering an object, it must not exists, must succeed.*/
  test_set_step(2);
 800ebae:	4b6f      	ldr	r3, [pc, #444]	; (800ed6c <oslib_test_009_001_execute+0x1ec>)
 800ebb0:	2202      	movs	r2, #2
 800ebb2:	601a      	str	r2, [r3, #0]
  {
    static uint32_t myobj = 0x55aa;

    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 800ebb4:	4970      	ldr	r1, [pc, #448]	; (800ed78 <oslib_test_009_001_execute+0x1f8>)
 800ebb6:	486e      	ldr	r0, [pc, #440]	; (800ed70 <oslib_test_009_001_execute+0x1f0>)
 800ebb8:	f7f7 fdc2 	bl	8006740 <chFactoryRegisterObject>
 800ebbc:	9003      	str	r0, [sp, #12]
    test_assert(rop != NULL, "cannot register");
 800ebbe:	9b03      	ldr	r3, [sp, #12]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	bf14      	ite	ne
 800ebc4:	2301      	movne	r3, #1
 800ebc6:	2300      	moveq	r3, #0
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	496c      	ldr	r1, [pc, #432]	; (800ed7c <oslib_test_009_001_execute+0x1fc>)
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7f8 fb0f 	bl	80071f0 <__test_assert>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	f040 80c6 	bne.w	800ed66 <oslib_test_009_001_execute+0x1e6>
  }
  test_end_step(2);

  /* [9.1.3] Registering an object with the same name, must fail.*/
  test_set_step(3);
 800ebda:	4b64      	ldr	r3, [pc, #400]	; (800ed6c <oslib_test_009_001_execute+0x1ec>)
 800ebdc:	2203      	movs	r2, #3
 800ebde:	601a      	str	r2, [r3, #0]
  {
    registered_object_t *rop1;
    static uint32_t myobj = 0x55aa;

    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800ebe0:	4967      	ldr	r1, [pc, #412]	; (800ed80 <oslib_test_009_001_execute+0x200>)
 800ebe2:	4863      	ldr	r0, [pc, #396]	; (800ed70 <oslib_test_009_001_execute+0x1f0>)
 800ebe4:	f7f7 fdac 	bl	8006740 <chFactoryRegisterObject>
 800ebe8:	9002      	str	r0, [sp, #8]
    test_assert(rop1 == NULL, "can register");
 800ebea:	9b02      	ldr	r3, [sp, #8]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	bf0c      	ite	eq
 800ebf0:	2301      	moveq	r3, #1
 800ebf2:	2300      	movne	r3, #0
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	4963      	ldr	r1, [pc, #396]	; (800ed84 <oslib_test_009_001_execute+0x204>)
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7f8 faf9 	bl	80071f0 <__test_assert>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	f040 80b0 	bne.w	800ed66 <oslib_test_009_001_execute+0x1e6>
  test_end_step(3);

  /* [9.1.4] Retrieving the registered object by name, must exist, then
     increasing the reference counter, finally releasing both
     references.*/
  test_set_step(4);
 800ec06:	4b59      	ldr	r3, [pc, #356]	; (800ed6c <oslib_test_009_001_execute+0x1ec>)
 800ec08:	2204      	movs	r2, #4
 800ec0a:	601a      	str	r2, [r3, #0]
  {
    registered_object_t *rop1, *rop2;

    rop1 = chFactoryFindObject("myobj");
 800ec0c:	4858      	ldr	r0, [pc, #352]	; (800ed70 <oslib_test_009_001_execute+0x1f0>)
 800ec0e:	f7f7 fdbf 	bl	8006790 <chFactoryFindObject>
 800ec12:	9001      	str	r0, [sp, #4]
    test_assert(rop1 != NULL, "not found");
 800ec14:	9b01      	ldr	r3, [sp, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	bf14      	ite	ne
 800ec1a:	2301      	movne	r3, #1
 800ec1c:	2300      	moveq	r3, #0
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	4959      	ldr	r1, [pc, #356]	; (800ed88 <oslib_test_009_001_execute+0x208>)
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7f8 fae4 	bl	80071f0 <__test_assert>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	f040 809b 	bne.w	800ed66 <oslib_test_009_001_execute+0x1e6>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 800ec30:	9b01      	ldr	r3, [sp, #4]
 800ec32:	691b      	ldr	r3, [r3, #16]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f245 52aa 	movw	r2, #21930	; 0x55aa
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	bf0c      	ite	eq
 800ec3e:	2301      	moveq	r3, #1
 800ec40:	2300      	movne	r3, #0
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	4951      	ldr	r1, [pc, #324]	; (800ed8c <oslib_test_009_001_execute+0x20c>)
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7f8 fad2 	bl	80071f0 <__test_assert>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	f040 8089 	bne.w	800ed66 <oslib_test_009_001_execute+0x1e6>
    test_assert(rop == rop1, "object reference mismatch");
 800ec54:	9a03      	ldr	r2, [sp, #12]
 800ec56:	9b01      	ldr	r3, [sp, #4]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	bf0c      	ite	eq
 800ec5c:	2301      	moveq	r3, #1
 800ec5e:	2300      	movne	r3, #0
 800ec60:	b2db      	uxtb	r3, r3
 800ec62:	494b      	ldr	r1, [pc, #300]	; (800ed90 <oslib_test_009_001_execute+0x210>)
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7f8 fac3 	bl	80071f0 <__test_assert>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d17a      	bne.n	800ed66 <oslib_test_009_001_execute+0x1e6>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 800ec70:	9b01      	ldr	r3, [sp, #4]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	2b02      	cmp	r3, #2
 800ec76:	bf0c      	ite	eq
 800ec78:	2301      	moveq	r3, #1
 800ec7a:	2300      	movne	r3, #0
 800ec7c:	b2db      	uxtb	r3, r3
 800ec7e:	4944      	ldr	r1, [pc, #272]	; (800ed90 <oslib_test_009_001_execute+0x210>)
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7f8 fab5 	bl	80071f0 <__test_assert>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d16c      	bne.n	800ed66 <oslib_test_009_001_execute+0x1e6>

    rop2 = (registered_object_t *)chFactoryDuplicateReference(&rop1->element);
 800ec8c:	9b01      	ldr	r3, [sp, #4]
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7ff ff4e 	bl	800eb30 <chFactoryDuplicateReference>
 800ec94:	9000      	str	r0, [sp, #0]
    test_assert(rop1 == rop2, "object reference mismatch");
 800ec96:	9a01      	ldr	r2, [sp, #4]
 800ec98:	9b00      	ldr	r3, [sp, #0]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	bf0c      	ite	eq
 800ec9e:	2301      	moveq	r3, #1
 800eca0:	2300      	movne	r3, #0
 800eca2:	b2db      	uxtb	r3, r3
 800eca4:	493a      	ldr	r1, [pc, #232]	; (800ed90 <oslib_test_009_001_execute+0x210>)
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7f8 faa2 	bl	80071f0 <__test_assert>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d159      	bne.n	800ed66 <oslib_test_009_001_execute+0x1e6>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 800ecb2:	9b00      	ldr	r3, [sp, #0]
 800ecb4:	691b      	ldr	r3, [r3, #16]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f245 52aa 	movw	r2, #21930	; 0x55aa
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	bf0c      	ite	eq
 800ecc0:	2301      	moveq	r3, #1
 800ecc2:	2300      	movne	r3, #0
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	4931      	ldr	r1, [pc, #196]	; (800ed8c <oslib_test_009_001_execute+0x20c>)
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7f8 fa91 	bl	80071f0 <__test_assert>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d148      	bne.n	800ed66 <oslib_test_009_001_execute+0x1e6>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 800ecd4:	9b00      	ldr	r3, [sp, #0]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	2b03      	cmp	r3, #3
 800ecda:	bf0c      	ite	eq
 800ecdc:	2301      	moveq	r3, #1
 800ecde:	2300      	movne	r3, #0
 800ece0:	b2db      	uxtb	r3, r3
 800ece2:	492b      	ldr	r1, [pc, #172]	; (800ed90 <oslib_test_009_001_execute+0x210>)
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7f8 fa83 	bl	80071f0 <__test_assert>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d13a      	bne.n	800ed66 <oslib_test_009_001_execute+0x1e6>

    chFactoryReleaseObject(rop2);
 800ecf0:	9800      	ldr	r0, [sp, #0]
 800ecf2:	f7f7 fd65 	bl	80067c0 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 800ecf6:	9b01      	ldr	r3, [sp, #4]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	2b02      	cmp	r3, #2
 800ecfc:	bf0c      	ite	eq
 800ecfe:	2301      	moveq	r3, #1
 800ed00:	2300      	movne	r3, #0
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	4923      	ldr	r1, [pc, #140]	; (800ed94 <oslib_test_009_001_execute+0x214>)
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7f8 fa72 	bl	80071f0 <__test_assert>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d129      	bne.n	800ed66 <oslib_test_009_001_execute+0x1e6>

    chFactoryReleaseObject(rop1);
 800ed12:	9801      	ldr	r0, [sp, #4]
 800ed14:	f7f7 fd54 	bl	80067c0 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 800ed18:	9b03      	ldr	r3, [sp, #12]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	bf0c      	ite	eq
 800ed20:	2301      	moveq	r3, #1
 800ed22:	2300      	movne	r3, #0
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	491b      	ldr	r1, [pc, #108]	; (800ed94 <oslib_test_009_001_execute+0x214>)
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7f8 fa61 	bl	80071f0 <__test_assert>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d118      	bne.n	800ed66 <oslib_test_009_001_execute+0x1e6>
  }
  test_end_step(4);

  /* [9.1.5] Releasing the first reference to the object, must not
     trigger an assertion.*/
  test_set_step(5);
 800ed34:	4b0d      	ldr	r3, [pc, #52]	; (800ed6c <oslib_test_009_001_execute+0x1ec>)
 800ed36:	2205      	movs	r2, #5
 800ed38:	601a      	str	r2, [r3, #0]
  {
    chFactoryReleaseObject(rop);
 800ed3a:	9803      	ldr	r0, [sp, #12]
 800ed3c:	f7f7 fd40 	bl	80067c0 <chFactoryReleaseObject>
  }
  test_end_step(5);

  /* [9.1.6] Retrieving the registered object by name again, must not
     exist.*/
  test_set_step(6);
 800ed40:	4b0a      	ldr	r3, [pc, #40]	; (800ed6c <oslib_test_009_001_execute+0x1ec>)
 800ed42:	2206      	movs	r2, #6
 800ed44:	601a      	str	r2, [r3, #0]
  {
    rop = chFactoryFindObject("myobj");
 800ed46:	480a      	ldr	r0, [pc, #40]	; (800ed70 <oslib_test_009_001_execute+0x1f0>)
 800ed48:	f7f7 fd22 	bl	8006790 <chFactoryFindObject>
 800ed4c:	9003      	str	r0, [sp, #12]
    test_assert(rop == NULL, "found");
 800ed4e:	9b03      	ldr	r3, [sp, #12]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	bf0c      	ite	eq
 800ed54:	2301      	moveq	r3, #1
 800ed56:	2300      	movne	r3, #0
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	4906      	ldr	r1, [pc, #24]	; (800ed74 <oslib_test_009_001_execute+0x1f4>)
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7f8 fa47 	bl	80071f0 <__test_assert>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
  }
  test_end_step(6);
}
 800ed66:	b005      	add	sp, #20
 800ed68:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed6c:	20000c6c 	.word	0x20000c6c
 800ed70:	0801efd4 	.word	0x0801efd4
 800ed74:	0801f000 	.word	0x0801f000
 800ed78:	200008d4 	.word	0x200008d4
 800ed7c:	0801efdc 	.word	0x0801efdc
 800ed80:	200008d8 	.word	0x200008d8
 800ed84:	0801efec 	.word	0x0801efec
 800ed88:	0801effc 	.word	0x0801effc
 800ed8c:	0801f008 	.word	0x0801f008
 800ed90:	0801f018 	.word	0x0801f018
 800ed94:	0801f034 	.word	0x0801f034
	...

0800eda0 <oslib_test_009_002_teardown>:
 * - [9.2.6] Retrieving the dynamic buffer by name again, must not
 *   exist.
 * .
 */

static void oslib_test_009_002_teardown(void) {
 800eda0:	b500      	push	{lr}
 800eda2:	b083      	sub	sp, #12
  dyn_buffer_t *dbp;

  dbp = chFactoryFindBuffer("mybuf");
 800eda4:	4809      	ldr	r0, [pc, #36]	; (800edcc <oslib_test_009_002_teardown+0x2c>)
 800eda6:	f7f7 fd53 	bl	8006850 <chFactoryFindBuffer>
 800edaa:	9001      	str	r0, [sp, #4]
  if (dbp != NULL) {
 800edac:	9b01      	ldr	r3, [sp, #4]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d007      	beq.n	800edc2 <oslib_test_009_002_teardown+0x22>
    while (dbp->element.refs > 0U) {
 800edb2:	e002      	b.n	800edba <oslib_test_009_002_teardown+0x1a>
      chFactoryReleaseBuffer(dbp);
 800edb4:	9801      	ldr	r0, [sp, #4]
 800edb6:	f7f7 fd63 	bl	8006880 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
 800edba:	9b01      	ldr	r3, [sp, #4]
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1f8      	bne.n	800edb4 <oslib_test_009_002_teardown+0x14>
    }
  }
}
 800edc2:	bf00      	nop
 800edc4:	b003      	add	sp, #12
 800edc6:	f85d fb04 	ldr.w	pc, [sp], #4
 800edca:	bf00      	nop
 800edcc:	0801f058 	.word	0x0801f058

0800edd0 <oslib_test_009_002_execute>:

static void oslib_test_009_002_execute(void) {
 800edd0:	b500      	push	{lr}
 800edd2:	b085      	sub	sp, #20
  dyn_buffer_t *dbp;

  /* [9.2.1] Retrieving a dynamic buffer by name, must not exist.*/
  test_set_step(1);
 800edd4:	4b67      	ldr	r3, [pc, #412]	; (800ef74 <oslib_test_009_002_execute+0x1a4>)
 800edd6:	2201      	movs	r2, #1
 800edd8:	601a      	str	r2, [r3, #0]
  {
    dbp = chFactoryFindBuffer("mybuf");
 800edda:	4867      	ldr	r0, [pc, #412]	; (800ef78 <oslib_test_009_002_execute+0x1a8>)
 800eddc:	f7f7 fd38 	bl	8006850 <chFactoryFindBuffer>
 800ede0:	9003      	str	r0, [sp, #12]
    test_assert(dbp == NULL, "found");
 800ede2:	9b03      	ldr	r3, [sp, #12]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	bf0c      	ite	eq
 800ede8:	2301      	moveq	r3, #1
 800edea:	2300      	movne	r3, #0
 800edec:	b2db      	uxtb	r3, r3
 800edee:	4963      	ldr	r1, [pc, #396]	; (800ef7c <oslib_test_009_002_execute+0x1ac>)
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7f8 f9fd 	bl	80071f0 <__test_assert>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f040 80b8 	bne.w	800ef6e <oslib_test_009_002_execute+0x19e>
  }
  test_end_step(1);

  /* [9.2.2] Creating a dynamic buffer it must not exists, must
     succeed.*/
  test_set_step(2);
 800edfe:	4b5d      	ldr	r3, [pc, #372]	; (800ef74 <oslib_test_009_002_execute+0x1a4>)
 800ee00:	2202      	movs	r2, #2
 800ee02:	601a      	str	r2, [r3, #0]
  {
    dbp = chFactoryCreateBuffer("mybuf", 128U);
 800ee04:	2180      	movs	r1, #128	; 0x80
 800ee06:	485c      	ldr	r0, [pc, #368]	; (800ef78 <oslib_test_009_002_execute+0x1a8>)
 800ee08:	f7f7 fcfa 	bl	8006800 <chFactoryCreateBuffer>
 800ee0c:	9003      	str	r0, [sp, #12]
    test_assert(dbp != NULL, "cannot create");
 800ee0e:	9b03      	ldr	r3, [sp, #12]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	bf14      	ite	ne
 800ee14:	2301      	movne	r3, #1
 800ee16:	2300      	moveq	r3, #0
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	4959      	ldr	r1, [pc, #356]	; (800ef80 <oslib_test_009_002_execute+0x1b0>)
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7f8 f9e7 	bl	80071f0 <__test_assert>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	f040 80a2 	bne.w	800ef6e <oslib_test_009_002_execute+0x19e>
  }
  test_end_step(2);

  /* [9.2.3] Creating a dynamic buffer with the same name, must fail.*/
  test_set_step(3);
 800ee2a:	4b52      	ldr	r3, [pc, #328]	; (800ef74 <oslib_test_009_002_execute+0x1a4>)
 800ee2c:	2203      	movs	r2, #3
 800ee2e:	601a      	str	r2, [r3, #0]
  {
    dyn_buffer_t *dbp1;

    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
 800ee30:	2180      	movs	r1, #128	; 0x80
 800ee32:	4851      	ldr	r0, [pc, #324]	; (800ef78 <oslib_test_009_002_execute+0x1a8>)
 800ee34:	f7f7 fce4 	bl	8006800 <chFactoryCreateBuffer>
 800ee38:	9002      	str	r0, [sp, #8]
    test_assert(dbp1 == NULL, "can create");
 800ee3a:	9b02      	ldr	r3, [sp, #8]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	bf0c      	ite	eq
 800ee40:	2301      	moveq	r3, #1
 800ee42:	2300      	movne	r3, #0
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	494f      	ldr	r1, [pc, #316]	; (800ef84 <oslib_test_009_002_execute+0x1b4>)
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7f8 f9d1 	bl	80071f0 <__test_assert>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	f040 808c 	bne.w	800ef6e <oslib_test_009_002_execute+0x19e>
  test_end_step(3);

  /* [9.2.4] Retrieving the dynamic buffer by name, must exist, then
     increasing the reference counter, finally releasing both
     references.*/
  test_set_step(4);
 800ee56:	4b47      	ldr	r3, [pc, #284]	; (800ef74 <oslib_test_009_002_execute+0x1a4>)
 800ee58:	2204      	movs	r2, #4
 800ee5a:	601a      	str	r2, [r3, #0]
  {
    dyn_buffer_t *dbp1, *dbp2;

    dbp1 = chFactoryFindBuffer("mybuf");
 800ee5c:	4846      	ldr	r0, [pc, #280]	; (800ef78 <oslib_test_009_002_execute+0x1a8>)
 800ee5e:	f7f7 fcf7 	bl	8006850 <chFactoryFindBuffer>
 800ee62:	9001      	str	r0, [sp, #4]
    test_assert(dbp1 != NULL, "not found");
 800ee64:	9b01      	ldr	r3, [sp, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	bf14      	ite	ne
 800ee6a:	2301      	movne	r3, #1
 800ee6c:	2300      	moveq	r3, #0
 800ee6e:	b2db      	uxtb	r3, r3
 800ee70:	4945      	ldr	r1, [pc, #276]	; (800ef88 <oslib_test_009_002_execute+0x1b8>)
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7f8 f9bc 	bl	80071f0 <__test_assert>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d177      	bne.n	800ef6e <oslib_test_009_002_execute+0x19e>
    test_assert(dbp == dbp1, "object reference mismatch");
 800ee7e:	9a03      	ldr	r2, [sp, #12]
 800ee80:	9b01      	ldr	r3, [sp, #4]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	bf0c      	ite	eq
 800ee86:	2301      	moveq	r3, #1
 800ee88:	2300      	movne	r3, #0
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	493f      	ldr	r1, [pc, #252]	; (800ef8c <oslib_test_009_002_execute+0x1bc>)
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7f8 f9ae 	bl	80071f0 <__test_assert>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d169      	bne.n	800ef6e <oslib_test_009_002_execute+0x19e>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 800ee9a:	9b01      	ldr	r3, [sp, #4]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	2b02      	cmp	r3, #2
 800eea0:	bf0c      	ite	eq
 800eea2:	2301      	moveq	r3, #1
 800eea4:	2300      	movne	r3, #0
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	4938      	ldr	r1, [pc, #224]	; (800ef8c <oslib_test_009_002_execute+0x1bc>)
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7f8 f9a0 	bl	80071f0 <__test_assert>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d15b      	bne.n	800ef6e <oslib_test_009_002_execute+0x19e>

    dbp2 = (dyn_buffer_t *)chFactoryDuplicateReference(&dbp1->element);
 800eeb6:	9b01      	ldr	r3, [sp, #4]
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7ff fe39 	bl	800eb30 <chFactoryDuplicateReference>
 800eebe:	9000      	str	r0, [sp, #0]
    test_assert(dbp1 == dbp2, "object reference mismatch");
 800eec0:	9a01      	ldr	r2, [sp, #4]
 800eec2:	9b00      	ldr	r3, [sp, #0]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	bf0c      	ite	eq
 800eec8:	2301      	moveq	r3, #1
 800eeca:	2300      	movne	r3, #0
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	492f      	ldr	r1, [pc, #188]	; (800ef8c <oslib_test_009_002_execute+0x1bc>)
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7f8 f98d 	bl	80071f0 <__test_assert>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d148      	bne.n	800ef6e <oslib_test_009_002_execute+0x19e>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 800eedc:	9b00      	ldr	r3, [sp, #0]
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	2b03      	cmp	r3, #3
 800eee2:	bf0c      	ite	eq
 800eee4:	2301      	moveq	r3, #1
 800eee6:	2300      	movne	r3, #0
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	4928      	ldr	r1, [pc, #160]	; (800ef8c <oslib_test_009_002_execute+0x1bc>)
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7f8 f97f 	bl	80071f0 <__test_assert>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d13a      	bne.n	800ef6e <oslib_test_009_002_execute+0x19e>

    chFactoryReleaseBuffer(dbp2);
 800eef8:	9800      	ldr	r0, [sp, #0]
 800eefa:	f7f7 fcc1 	bl	8006880 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 800eefe:	9b01      	ldr	r3, [sp, #4]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	2b02      	cmp	r3, #2
 800ef04:	bf0c      	ite	eq
 800ef06:	2301      	moveq	r3, #1
 800ef08:	2300      	movne	r3, #0
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	4920      	ldr	r1, [pc, #128]	; (800ef90 <oslib_test_009_002_execute+0x1c0>)
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7f8 f96e 	bl	80071f0 <__test_assert>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d129      	bne.n	800ef6e <oslib_test_009_002_execute+0x19e>

    chFactoryReleaseBuffer(dbp1);
 800ef1a:	9801      	ldr	r0, [sp, #4]
 800ef1c:	f7f7 fcb0 	bl	8006880 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 800ef20:	9b03      	ldr	r3, [sp, #12]
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	bf0c      	ite	eq
 800ef28:	2301      	moveq	r3, #1
 800ef2a:	2300      	movne	r3, #0
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	4918      	ldr	r1, [pc, #96]	; (800ef90 <oslib_test_009_002_execute+0x1c0>)
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7f8 f95d 	bl	80071f0 <__test_assert>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d118      	bne.n	800ef6e <oslib_test_009_002_execute+0x19e>
  }
  test_end_step(4);

  /* [9.2.5] Releasing the first reference to the dynamic buffer, must
     not trigger an assertion.*/
  test_set_step(5);
 800ef3c:	4b0d      	ldr	r3, [pc, #52]	; (800ef74 <oslib_test_009_002_execute+0x1a4>)
 800ef3e:	2205      	movs	r2, #5
 800ef40:	601a      	str	r2, [r3, #0]
  {
    chFactoryReleaseBuffer(dbp);
 800ef42:	9803      	ldr	r0, [sp, #12]
 800ef44:	f7f7 fc9c 	bl	8006880 <chFactoryReleaseBuffer>
  }
  test_end_step(5);

  /* [9.2.6] Retrieving the dynamic buffer by name again, must not
     exist.*/
  test_set_step(6);
 800ef48:	4b0a      	ldr	r3, [pc, #40]	; (800ef74 <oslib_test_009_002_execute+0x1a4>)
 800ef4a:	2206      	movs	r2, #6
 800ef4c:	601a      	str	r2, [r3, #0]
  {
    dbp = chFactoryFindBuffer("mybuf");
 800ef4e:	480a      	ldr	r0, [pc, #40]	; (800ef78 <oslib_test_009_002_execute+0x1a8>)
 800ef50:	f7f7 fc7e 	bl	8006850 <chFactoryFindBuffer>
 800ef54:	9003      	str	r0, [sp, #12]
    test_assert(dbp == NULL, "found");
 800ef56:	9b03      	ldr	r3, [sp, #12]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	bf0c      	ite	eq
 800ef5c:	2301      	moveq	r3, #1
 800ef5e:	2300      	movne	r3, #0
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	4906      	ldr	r1, [pc, #24]	; (800ef7c <oslib_test_009_002_execute+0x1ac>)
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7f8 f943 	bl	80071f0 <__test_assert>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b00      	cmp	r3, #0
  }
  test_end_step(6);
}
 800ef6e:	b005      	add	sp, #20
 800ef70:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef74:	20000c6c 	.word	0x20000c6c
 800ef78:	0801f058 	.word	0x0801f058
 800ef7c:	0801f000 	.word	0x0801f000
 800ef80:	0801f060 	.word	0x0801f060
 800ef84:	0801f070 	.word	0x0801f070
 800ef88:	0801effc 	.word	0x0801effc
 800ef8c:	0801f018 	.word	0x0801f018
 800ef90:	0801f034 	.word	0x0801f034
	...

0800efa0 <oslib_test_009_003_teardown>:
 * - [9.3.6] Retrieving the dynamic semaphore by name again, must not
 *   exist.
 * .
 */

static void oslib_test_009_003_teardown(void) {
 800efa0:	b500      	push	{lr}
 800efa2:	b083      	sub	sp, #12
  dyn_semaphore_t *dsp;

  dsp = chFactoryFindSemaphore("mysem");
 800efa4:	4809      	ldr	r0, [pc, #36]	; (800efcc <oslib_test_009_003_teardown+0x2c>)
 800efa6:	f7f7 fcab 	bl	8006900 <chFactoryFindSemaphore>
 800efaa:	9001      	str	r0, [sp, #4]
  if (dsp != NULL) {
 800efac:	9b01      	ldr	r3, [sp, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d007      	beq.n	800efc2 <oslib_test_009_003_teardown+0x22>
    while (dsp->element.refs > 0U) {
 800efb2:	e002      	b.n	800efba <oslib_test_009_003_teardown+0x1a>
      chFactoryReleaseSemaphore(dsp);
 800efb4:	9801      	ldr	r0, [sp, #4]
 800efb6:	f7f7 fcbb 	bl	8006930 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 800efba:	9b01      	ldr	r3, [sp, #4]
 800efbc:	685b      	ldr	r3, [r3, #4]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d1f8      	bne.n	800efb4 <oslib_test_009_003_teardown+0x14>
    }
  }
}
 800efc2:	bf00      	nop
 800efc4:	b003      	add	sp, #12
 800efc6:	f85d fb04 	ldr.w	pc, [sp], #4
 800efca:	bf00      	nop
 800efcc:	0801f08c 	.word	0x0801f08c

0800efd0 <oslib_test_009_003_execute>:

static void oslib_test_009_003_execute(void) {
 800efd0:	b500      	push	{lr}
 800efd2:	b085      	sub	sp, #20
  dyn_semaphore_t *dsp;

  /* [9.3.1] Retrieving a dynamic semaphore by name, must not exist.*/
  test_set_step(1);
 800efd4:	4b67      	ldr	r3, [pc, #412]	; (800f174 <oslib_test_009_003_execute+0x1a4>)
 800efd6:	2201      	movs	r2, #1
 800efd8:	601a      	str	r2, [r3, #0]
  {
    dsp = chFactoryFindSemaphore("mysem");
 800efda:	4867      	ldr	r0, [pc, #412]	; (800f178 <oslib_test_009_003_execute+0x1a8>)
 800efdc:	f7f7 fc90 	bl	8006900 <chFactoryFindSemaphore>
 800efe0:	9003      	str	r0, [sp, #12]
    test_assert(dsp == NULL, "found");
 800efe2:	9b03      	ldr	r3, [sp, #12]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	bf0c      	ite	eq
 800efe8:	2301      	moveq	r3, #1
 800efea:	2300      	movne	r3, #0
 800efec:	b2db      	uxtb	r3, r3
 800efee:	4963      	ldr	r1, [pc, #396]	; (800f17c <oslib_test_009_003_execute+0x1ac>)
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7f8 f8fd 	bl	80071f0 <__test_assert>
 800eff6:	4603      	mov	r3, r0
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f040 80b8 	bne.w	800f16e <oslib_test_009_003_execute+0x19e>
  }
  test_end_step(1);

  /* [9.3.2] Creating a dynamic semaphore it must not exists, must
     succeed.*/
  test_set_step(2);
 800effe:	4b5d      	ldr	r3, [pc, #372]	; (800f174 <oslib_test_009_003_execute+0x1a4>)
 800f000:	2202      	movs	r2, #2
 800f002:	601a      	str	r2, [r3, #0]
  {
    dsp = chFactoryCreateSemaphore("mysem", 0);
 800f004:	2100      	movs	r1, #0
 800f006:	485c      	ldr	r0, [pc, #368]	; (800f178 <oslib_test_009_003_execute+0x1a8>)
 800f008:	f7f7 fc52 	bl	80068b0 <chFactoryCreateSemaphore>
 800f00c:	9003      	str	r0, [sp, #12]
    test_assert(dsp != NULL, "cannot create");
 800f00e:	9b03      	ldr	r3, [sp, #12]
 800f010:	2b00      	cmp	r3, #0
 800f012:	bf14      	ite	ne
 800f014:	2301      	movne	r3, #1
 800f016:	2300      	moveq	r3, #0
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	4959      	ldr	r1, [pc, #356]	; (800f180 <oslib_test_009_003_execute+0x1b0>)
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7f8 f8e7 	bl	80071f0 <__test_assert>
 800f022:	4603      	mov	r3, r0
 800f024:	2b00      	cmp	r3, #0
 800f026:	f040 80a2 	bne.w	800f16e <oslib_test_009_003_execute+0x19e>
  }
  test_end_step(2);

  /* [9.3.3] Creating a dynamic semaphore with the same name, must
     fail.*/
  test_set_step(3);
 800f02a:	4b52      	ldr	r3, [pc, #328]	; (800f174 <oslib_test_009_003_execute+0x1a4>)
 800f02c:	2203      	movs	r2, #3
 800f02e:	601a      	str	r2, [r3, #0]
  {
    dyn_semaphore_t *dsp1;

    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 800f030:	2100      	movs	r1, #0
 800f032:	4851      	ldr	r0, [pc, #324]	; (800f178 <oslib_test_009_003_execute+0x1a8>)
 800f034:	f7f7 fc3c 	bl	80068b0 <chFactoryCreateSemaphore>
 800f038:	9002      	str	r0, [sp, #8]
    test_assert(dsp1 == NULL, "can create");
 800f03a:	9b02      	ldr	r3, [sp, #8]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	bf0c      	ite	eq
 800f040:	2301      	moveq	r3, #1
 800f042:	2300      	movne	r3, #0
 800f044:	b2db      	uxtb	r3, r3
 800f046:	494f      	ldr	r1, [pc, #316]	; (800f184 <oslib_test_009_003_execute+0x1b4>)
 800f048:	4618      	mov	r0, r3
 800f04a:	f7f8 f8d1 	bl	80071f0 <__test_assert>
 800f04e:	4603      	mov	r3, r0
 800f050:	2b00      	cmp	r3, #0
 800f052:	f040 808c 	bne.w	800f16e <oslib_test_009_003_execute+0x19e>
  test_end_step(3);

  /* [9.3.4] Retrieving the dynamic semaphore by name, must exist, then
     increasing the reference counter, finally releasing both
     references.*/
  test_set_step(4);
 800f056:	4b47      	ldr	r3, [pc, #284]	; (800f174 <oslib_test_009_003_execute+0x1a4>)
 800f058:	2204      	movs	r2, #4
 800f05a:	601a      	str	r2, [r3, #0]
  {
    dyn_semaphore_t *dsp1, *dsp2;

    dsp1 = chFactoryFindSemaphore("mysem");
 800f05c:	4846      	ldr	r0, [pc, #280]	; (800f178 <oslib_test_009_003_execute+0x1a8>)
 800f05e:	f7f7 fc4f 	bl	8006900 <chFactoryFindSemaphore>
 800f062:	9001      	str	r0, [sp, #4]
    test_assert(dsp1 != NULL, "not found");
 800f064:	9b01      	ldr	r3, [sp, #4]
 800f066:	2b00      	cmp	r3, #0
 800f068:	bf14      	ite	ne
 800f06a:	2301      	movne	r3, #1
 800f06c:	2300      	moveq	r3, #0
 800f06e:	b2db      	uxtb	r3, r3
 800f070:	4945      	ldr	r1, [pc, #276]	; (800f188 <oslib_test_009_003_execute+0x1b8>)
 800f072:	4618      	mov	r0, r3
 800f074:	f7f8 f8bc 	bl	80071f0 <__test_assert>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d177      	bne.n	800f16e <oslib_test_009_003_execute+0x19e>
    test_assert(dsp == dsp1, "object reference mismatch");
 800f07e:	9a03      	ldr	r2, [sp, #12]
 800f080:	9b01      	ldr	r3, [sp, #4]
 800f082:	429a      	cmp	r2, r3
 800f084:	bf0c      	ite	eq
 800f086:	2301      	moveq	r3, #1
 800f088:	2300      	movne	r3, #0
 800f08a:	b2db      	uxtb	r3, r3
 800f08c:	493f      	ldr	r1, [pc, #252]	; (800f18c <oslib_test_009_003_execute+0x1bc>)
 800f08e:	4618      	mov	r0, r3
 800f090:	f7f8 f8ae 	bl	80071f0 <__test_assert>
 800f094:	4603      	mov	r3, r0
 800f096:	2b00      	cmp	r3, #0
 800f098:	d169      	bne.n	800f16e <oslib_test_009_003_execute+0x19e>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 800f09a:	9b01      	ldr	r3, [sp, #4]
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	2b02      	cmp	r3, #2
 800f0a0:	bf0c      	ite	eq
 800f0a2:	2301      	moveq	r3, #1
 800f0a4:	2300      	movne	r3, #0
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	4938      	ldr	r1, [pc, #224]	; (800f18c <oslib_test_009_003_execute+0x1bc>)
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7f8 f8a0 	bl	80071f0 <__test_assert>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d15b      	bne.n	800f16e <oslib_test_009_003_execute+0x19e>

    dsp2 = (dyn_semaphore_t *)chFactoryDuplicateReference(&dsp1->element);
 800f0b6:	9b01      	ldr	r3, [sp, #4]
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7ff fd39 	bl	800eb30 <chFactoryDuplicateReference>
 800f0be:	9000      	str	r0, [sp, #0]
    test_assert(dsp1 == dsp2, "object reference mismatch");
 800f0c0:	9a01      	ldr	r2, [sp, #4]
 800f0c2:	9b00      	ldr	r3, [sp, #0]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	bf0c      	ite	eq
 800f0c8:	2301      	moveq	r3, #1
 800f0ca:	2300      	movne	r3, #0
 800f0cc:	b2db      	uxtb	r3, r3
 800f0ce:	492f      	ldr	r1, [pc, #188]	; (800f18c <oslib_test_009_003_execute+0x1bc>)
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7f8 f88d 	bl	80071f0 <__test_assert>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d148      	bne.n	800f16e <oslib_test_009_003_execute+0x19e>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 800f0dc:	9b00      	ldr	r3, [sp, #0]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	2b03      	cmp	r3, #3
 800f0e2:	bf0c      	ite	eq
 800f0e4:	2301      	moveq	r3, #1
 800f0e6:	2300      	movne	r3, #0
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	4928      	ldr	r1, [pc, #160]	; (800f18c <oslib_test_009_003_execute+0x1bc>)
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7f8 f87f 	bl	80071f0 <__test_assert>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d13a      	bne.n	800f16e <oslib_test_009_003_execute+0x19e>

    chFactoryReleaseSemaphore(dsp2);
 800f0f8:	9800      	ldr	r0, [sp, #0]
 800f0fa:	f7f7 fc19 	bl	8006930 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 800f0fe:	9b01      	ldr	r3, [sp, #4]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	2b02      	cmp	r3, #2
 800f104:	bf0c      	ite	eq
 800f106:	2301      	moveq	r3, #1
 800f108:	2300      	movne	r3, #0
 800f10a:	b2db      	uxtb	r3, r3
 800f10c:	4920      	ldr	r1, [pc, #128]	; (800f190 <oslib_test_009_003_execute+0x1c0>)
 800f10e:	4618      	mov	r0, r3
 800f110:	f7f8 f86e 	bl	80071f0 <__test_assert>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	d129      	bne.n	800f16e <oslib_test_009_003_execute+0x19e>

    chFactoryReleaseSemaphore(dsp1);
 800f11a:	9801      	ldr	r0, [sp, #4]
 800f11c:	f7f7 fc08 	bl	8006930 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 800f120:	9b03      	ldr	r3, [sp, #12]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	2b01      	cmp	r3, #1
 800f126:	bf0c      	ite	eq
 800f128:	2301      	moveq	r3, #1
 800f12a:	2300      	movne	r3, #0
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	4918      	ldr	r1, [pc, #96]	; (800f190 <oslib_test_009_003_execute+0x1c0>)
 800f130:	4618      	mov	r0, r3
 800f132:	f7f8 f85d 	bl	80071f0 <__test_assert>
 800f136:	4603      	mov	r3, r0
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d118      	bne.n	800f16e <oslib_test_009_003_execute+0x19e>
  }
  test_end_step(4);

  /* [9.3.5] Releasing the first reference to the dynamic semaphore
     must not trigger an assertion.*/
  test_set_step(5);
 800f13c:	4b0d      	ldr	r3, [pc, #52]	; (800f174 <oslib_test_009_003_execute+0x1a4>)
 800f13e:	2205      	movs	r2, #5
 800f140:	601a      	str	r2, [r3, #0]
  {
    chFactoryReleaseSemaphore(dsp);
 800f142:	9803      	ldr	r0, [sp, #12]
 800f144:	f7f7 fbf4 	bl	8006930 <chFactoryReleaseSemaphore>
  }
  test_end_step(5);

  /* [9.3.6] Retrieving the dynamic semaphore by name again, must not
     exist.*/
  test_set_step(6);
 800f148:	4b0a      	ldr	r3, [pc, #40]	; (800f174 <oslib_test_009_003_execute+0x1a4>)
 800f14a:	2206      	movs	r2, #6
 800f14c:	601a      	str	r2, [r3, #0]
  {
    dsp = chFactoryFindSemaphore("mysem");
 800f14e:	480a      	ldr	r0, [pc, #40]	; (800f178 <oslib_test_009_003_execute+0x1a8>)
 800f150:	f7f7 fbd6 	bl	8006900 <chFactoryFindSemaphore>
 800f154:	9003      	str	r0, [sp, #12]
    test_assert(dsp == NULL, "found");
 800f156:	9b03      	ldr	r3, [sp, #12]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	bf0c      	ite	eq
 800f15c:	2301      	moveq	r3, #1
 800f15e:	2300      	movne	r3, #0
 800f160:	b2db      	uxtb	r3, r3
 800f162:	4906      	ldr	r1, [pc, #24]	; (800f17c <oslib_test_009_003_execute+0x1ac>)
 800f164:	4618      	mov	r0, r3
 800f166:	f7f8 f843 	bl	80071f0 <__test_assert>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b00      	cmp	r3, #0
  }
  test_end_step(6);
}
 800f16e:	b005      	add	sp, #20
 800f170:	f85d fb04 	ldr.w	pc, [sp], #4
 800f174:	20000c6c 	.word	0x20000c6c
 800f178:	0801f08c 	.word	0x0801f08c
 800f17c:	0801f000 	.word	0x0801f000
 800f180:	0801f060 	.word	0x0801f060
 800f184:	0801f070 	.word	0x0801f070
 800f188:	0801effc 	.word	0x0801effc
 800f18c:	0801f018 	.word	0x0801f018
 800f190:	0801f034 	.word	0x0801f034
	...

0800f1a0 <oslib_test_009_004_teardown>:
 * - [9.4.6] Retrieving the dynamic mailbox by name again, must not
 *   exist.
 * .
 */

static void oslib_test_009_004_teardown(void) {
 800f1a0:	b500      	push	{lr}
 800f1a2:	b083      	sub	sp, #12
  dyn_mailbox_t *dmp;

  dmp = chFactoryFindMailbox("mymbx");
 800f1a4:	4809      	ldr	r0, [pc, #36]	; (800f1cc <oslib_test_009_004_teardown+0x2c>)
 800f1a6:	f7f7 fc0b 	bl	80069c0 <chFactoryFindMailbox>
 800f1aa:	9001      	str	r0, [sp, #4]
  if (dmp != NULL) {
 800f1ac:	9b01      	ldr	r3, [sp, #4]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d007      	beq.n	800f1c2 <oslib_test_009_004_teardown+0x22>
    while (dmp->element.refs > 0U) {
 800f1b2:	e002      	b.n	800f1ba <oslib_test_009_004_teardown+0x1a>
      chFactoryReleaseMailbox(dmp);
 800f1b4:	9801      	ldr	r0, [sp, #4]
 800f1b6:	f7f7 fc1b 	bl	80069f0 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
 800f1ba:	9b01      	ldr	r3, [sp, #4]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d1f8      	bne.n	800f1b4 <oslib_test_009_004_teardown+0x14>
    }
  }
}
 800f1c2:	bf00      	nop
 800f1c4:	b003      	add	sp, #12
 800f1c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f1ca:	bf00      	nop
 800f1cc:	0801f0a4 	.word	0x0801f0a4

0800f1d0 <oslib_test_009_004_execute>:

static void oslib_test_009_004_execute(void) {
 800f1d0:	b500      	push	{lr}
 800f1d2:	b085      	sub	sp, #20
  dyn_mailbox_t *dmp;

  /* [9.4.1] Retrieving a dynamic mailbox by name, must not exist.*/
  test_set_step(1);
 800f1d4:	4b67      	ldr	r3, [pc, #412]	; (800f374 <oslib_test_009_004_execute+0x1a4>)
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	601a      	str	r2, [r3, #0]
  {
    dmp = chFactoryFindMailbox("mymbx");
 800f1da:	4867      	ldr	r0, [pc, #412]	; (800f378 <oslib_test_009_004_execute+0x1a8>)
 800f1dc:	f7f7 fbf0 	bl	80069c0 <chFactoryFindMailbox>
 800f1e0:	9003      	str	r0, [sp, #12]
    test_assert(dmp == NULL, "found");
 800f1e2:	9b03      	ldr	r3, [sp, #12]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	bf0c      	ite	eq
 800f1e8:	2301      	moveq	r3, #1
 800f1ea:	2300      	movne	r3, #0
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	4963      	ldr	r1, [pc, #396]	; (800f37c <oslib_test_009_004_execute+0x1ac>)
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7f7 fffd 	bl	80071f0 <__test_assert>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f040 80b8 	bne.w	800f36e <oslib_test_009_004_execute+0x19e>
  }
  test_end_step(1);

  /* [9.4.2] Creating a dynamic mailbox it must not exists, must
     succeed.*/
  test_set_step(2);
 800f1fe:	4b5d      	ldr	r3, [pc, #372]	; (800f374 <oslib_test_009_004_execute+0x1a4>)
 800f200:	2202      	movs	r2, #2
 800f202:	601a      	str	r2, [r3, #0]
  {
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 800f204:	2110      	movs	r1, #16
 800f206:	485c      	ldr	r0, [pc, #368]	; (800f378 <oslib_test_009_004_execute+0x1a8>)
 800f208:	f7f7 fbb2 	bl	8006970 <chFactoryCreateMailbox>
 800f20c:	9003      	str	r0, [sp, #12]
    test_assert(dmp != NULL, "cannot create");
 800f20e:	9b03      	ldr	r3, [sp, #12]
 800f210:	2b00      	cmp	r3, #0
 800f212:	bf14      	ite	ne
 800f214:	2301      	movne	r3, #1
 800f216:	2300      	moveq	r3, #0
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	4959      	ldr	r1, [pc, #356]	; (800f380 <oslib_test_009_004_execute+0x1b0>)
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7f7 ffe7 	bl	80071f0 <__test_assert>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	f040 80a2 	bne.w	800f36e <oslib_test_009_004_execute+0x19e>
  }
  test_end_step(2);

  /* [9.4.3] Creating a dynamic mailbox with the same name, must
     fail.*/
  test_set_step(3);
 800f22a:	4b52      	ldr	r3, [pc, #328]	; (800f374 <oslib_test_009_004_execute+0x1a4>)
 800f22c:	2203      	movs	r2, #3
 800f22e:	601a      	str	r2, [r3, #0]
  {
    dyn_mailbox_t *dmp1;

    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 800f230:	2110      	movs	r1, #16
 800f232:	4851      	ldr	r0, [pc, #324]	; (800f378 <oslib_test_009_004_execute+0x1a8>)
 800f234:	f7f7 fb9c 	bl	8006970 <chFactoryCreateMailbox>
 800f238:	9002      	str	r0, [sp, #8]
    test_assert(dmp1 == NULL, "can create");
 800f23a:	9b02      	ldr	r3, [sp, #8]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	bf0c      	ite	eq
 800f240:	2301      	moveq	r3, #1
 800f242:	2300      	movne	r3, #0
 800f244:	b2db      	uxtb	r3, r3
 800f246:	494f      	ldr	r1, [pc, #316]	; (800f384 <oslib_test_009_004_execute+0x1b4>)
 800f248:	4618      	mov	r0, r3
 800f24a:	f7f7 ffd1 	bl	80071f0 <__test_assert>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b00      	cmp	r3, #0
 800f252:	f040 808c 	bne.w	800f36e <oslib_test_009_004_execute+0x19e>
  test_end_step(3);

  /* [9.4.4] Retrieving the dynamic mailbox by name, must exist, then
     increasing the reference counter, finally releasing both
     references.*/
  test_set_step(4);
 800f256:	4b47      	ldr	r3, [pc, #284]	; (800f374 <oslib_test_009_004_execute+0x1a4>)
 800f258:	2204      	movs	r2, #4
 800f25a:	601a      	str	r2, [r3, #0]
  {
    dyn_mailbox_t *dmp1, *dmp2;

    dmp1 = chFactoryFindMailbox("mymbx");
 800f25c:	4846      	ldr	r0, [pc, #280]	; (800f378 <oslib_test_009_004_execute+0x1a8>)
 800f25e:	f7f7 fbaf 	bl	80069c0 <chFactoryFindMailbox>
 800f262:	9001      	str	r0, [sp, #4]
    test_assert(dmp1 != NULL, "not found");
 800f264:	9b01      	ldr	r3, [sp, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	bf14      	ite	ne
 800f26a:	2301      	movne	r3, #1
 800f26c:	2300      	moveq	r3, #0
 800f26e:	b2db      	uxtb	r3, r3
 800f270:	4945      	ldr	r1, [pc, #276]	; (800f388 <oslib_test_009_004_execute+0x1b8>)
 800f272:	4618      	mov	r0, r3
 800f274:	f7f7 ffbc 	bl	80071f0 <__test_assert>
 800f278:	4603      	mov	r3, r0
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d177      	bne.n	800f36e <oslib_test_009_004_execute+0x19e>
    test_assert(dmp == dmp1, "object reference mismatch");
 800f27e:	9a03      	ldr	r2, [sp, #12]
 800f280:	9b01      	ldr	r3, [sp, #4]
 800f282:	429a      	cmp	r2, r3
 800f284:	bf0c      	ite	eq
 800f286:	2301      	moveq	r3, #1
 800f288:	2300      	movne	r3, #0
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	493f      	ldr	r1, [pc, #252]	; (800f38c <oslib_test_009_004_execute+0x1bc>)
 800f28e:	4618      	mov	r0, r3
 800f290:	f7f7 ffae 	bl	80071f0 <__test_assert>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d169      	bne.n	800f36e <oslib_test_009_004_execute+0x19e>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 800f29a:	9b01      	ldr	r3, [sp, #4]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	2b02      	cmp	r3, #2
 800f2a0:	bf0c      	ite	eq
 800f2a2:	2301      	moveq	r3, #1
 800f2a4:	2300      	movne	r3, #0
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	4938      	ldr	r1, [pc, #224]	; (800f38c <oslib_test_009_004_execute+0x1bc>)
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7f7 ffa0 	bl	80071f0 <__test_assert>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d15b      	bne.n	800f36e <oslib_test_009_004_execute+0x19e>

    dmp2 = (dyn_mailbox_t *)chFactoryDuplicateReference(&dmp1->element);
 800f2b6:	9b01      	ldr	r3, [sp, #4]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7ff fc39 	bl	800eb30 <chFactoryDuplicateReference>
 800f2be:	9000      	str	r0, [sp, #0]
    test_assert(dmp1 == dmp2, "object reference mismatch");
 800f2c0:	9a01      	ldr	r2, [sp, #4]
 800f2c2:	9b00      	ldr	r3, [sp, #0]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	bf0c      	ite	eq
 800f2c8:	2301      	moveq	r3, #1
 800f2ca:	2300      	movne	r3, #0
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	492f      	ldr	r1, [pc, #188]	; (800f38c <oslib_test_009_004_execute+0x1bc>)
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7f7 ff8d 	bl	80071f0 <__test_assert>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d148      	bne.n	800f36e <oslib_test_009_004_execute+0x19e>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 800f2dc:	9b00      	ldr	r3, [sp, #0]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	2b03      	cmp	r3, #3
 800f2e2:	bf0c      	ite	eq
 800f2e4:	2301      	moveq	r3, #1
 800f2e6:	2300      	movne	r3, #0
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	4928      	ldr	r1, [pc, #160]	; (800f38c <oslib_test_009_004_execute+0x1bc>)
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7f7 ff7f 	bl	80071f0 <__test_assert>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d13a      	bne.n	800f36e <oslib_test_009_004_execute+0x19e>

    chFactoryReleaseMailbox(dmp2);
 800f2f8:	9800      	ldr	r0, [sp, #0]
 800f2fa:	f7f7 fb79 	bl	80069f0 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 800f2fe:	9b01      	ldr	r3, [sp, #4]
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	2b02      	cmp	r3, #2
 800f304:	bf0c      	ite	eq
 800f306:	2301      	moveq	r3, #1
 800f308:	2300      	movne	r3, #0
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	4920      	ldr	r1, [pc, #128]	; (800f390 <oslib_test_009_004_execute+0x1c0>)
 800f30e:	4618      	mov	r0, r3
 800f310:	f7f7 ff6e 	bl	80071f0 <__test_assert>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d129      	bne.n	800f36e <oslib_test_009_004_execute+0x19e>

    chFactoryReleaseMailbox(dmp1);
 800f31a:	9801      	ldr	r0, [sp, #4]
 800f31c:	f7f7 fb68 	bl	80069f0 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 800f320:	9b03      	ldr	r3, [sp, #12]
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	2b01      	cmp	r3, #1
 800f326:	bf0c      	ite	eq
 800f328:	2301      	moveq	r3, #1
 800f32a:	2300      	movne	r3, #0
 800f32c:	b2db      	uxtb	r3, r3
 800f32e:	4918      	ldr	r1, [pc, #96]	; (800f390 <oslib_test_009_004_execute+0x1c0>)
 800f330:	4618      	mov	r0, r3
 800f332:	f7f7 ff5d 	bl	80071f0 <__test_assert>
 800f336:	4603      	mov	r3, r0
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d118      	bne.n	800f36e <oslib_test_009_004_execute+0x19e>
  }
  test_end_step(4);

  /* [9.4.5] Releasing the first reference to the dynamic mailbox must
     not trigger an assertion.*/
  test_set_step(5);
 800f33c:	4b0d      	ldr	r3, [pc, #52]	; (800f374 <oslib_test_009_004_execute+0x1a4>)
 800f33e:	2205      	movs	r2, #5
 800f340:	601a      	str	r2, [r3, #0]
  {
    chFactoryReleaseMailbox(dmp);
 800f342:	9803      	ldr	r0, [sp, #12]
 800f344:	f7f7 fb54 	bl	80069f0 <chFactoryReleaseMailbox>
  }
  test_end_step(5);

  /* [9.4.6] Retrieving the dynamic mailbox by name again, must not
     exist.*/
  test_set_step(6);
 800f348:	4b0a      	ldr	r3, [pc, #40]	; (800f374 <oslib_test_009_004_execute+0x1a4>)
 800f34a:	2206      	movs	r2, #6
 800f34c:	601a      	str	r2, [r3, #0]
  {
    dmp = chFactoryFindMailbox("mymbx");
 800f34e:	480a      	ldr	r0, [pc, #40]	; (800f378 <oslib_test_009_004_execute+0x1a8>)
 800f350:	f7f7 fb36 	bl	80069c0 <chFactoryFindMailbox>
 800f354:	9003      	str	r0, [sp, #12]
    test_assert(dmp == NULL, "found");
 800f356:	9b03      	ldr	r3, [sp, #12]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	bf0c      	ite	eq
 800f35c:	2301      	moveq	r3, #1
 800f35e:	2300      	movne	r3, #0
 800f360:	b2db      	uxtb	r3, r3
 800f362:	4906      	ldr	r1, [pc, #24]	; (800f37c <oslib_test_009_004_execute+0x1ac>)
 800f364:	4618      	mov	r0, r3
 800f366:	f7f7 ff43 	bl	80071f0 <__test_assert>
 800f36a:	4603      	mov	r3, r0
 800f36c:	2b00      	cmp	r3, #0
  }
  test_end_step(6);
}
 800f36e:	b005      	add	sp, #20
 800f370:	f85d fb04 	ldr.w	pc, [sp], #4
 800f374:	20000c6c 	.word	0x20000c6c
 800f378:	0801f0a4 	.word	0x0801f0a4
 800f37c:	0801f000 	.word	0x0801f000
 800f380:	0801f060 	.word	0x0801f060
 800f384:	0801f070 	.word	0x0801f070
 800f388:	0801effc 	.word	0x0801effc
 800f38c:	0801f018 	.word	0x0801f018
 800f390:	0801f034 	.word	0x0801f034
	...

0800f3a0 <oslib_test_009_005_teardown>:
 * - [9.5.6] Retrieving the dynamic objects FIFO by name again, must
 *   not exist.
 * .
 */

static void oslib_test_009_005_teardown(void) {
 800f3a0:	b500      	push	{lr}
 800f3a2:	b083      	sub	sp, #12
  dyn_objects_fifo_t *dofp;

  dofp = chFactoryFindObjectsFIFO("myfifo");
 800f3a4:	4809      	ldr	r0, [pc, #36]	; (800f3cc <oslib_test_009_005_teardown+0x2c>)
 800f3a6:	f7f7 fb8b 	bl	8006ac0 <chFactoryFindObjectsFIFO>
 800f3aa:	9001      	str	r0, [sp, #4]
  if (dofp != NULL) {
 800f3ac:	9b01      	ldr	r3, [sp, #4]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d007      	beq.n	800f3c2 <oslib_test_009_005_teardown+0x22>
    while (dofp->element.refs > 0U) {
 800f3b2:	e002      	b.n	800f3ba <oslib_test_009_005_teardown+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
 800f3b4:	9801      	ldr	r0, [sp, #4]
 800f3b6:	f7f7 fb9b 	bl	8006af0 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
 800f3ba:	9b01      	ldr	r3, [sp, #4]
 800f3bc:	685b      	ldr	r3, [r3, #4]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d1f8      	bne.n	800f3b4 <oslib_test_009_005_teardown+0x14>
    }
  }
}
 800f3c2:	bf00      	nop
 800f3c4:	b003      	add	sp, #12
 800f3c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f3ca:	bf00      	nop
 800f3cc:	0801f0bc 	.word	0x0801f0bc

0800f3d0 <oslib_test_009_005_execute>:

static void oslib_test_009_005_execute(void) {
 800f3d0:	b500      	push	{lr}
 800f3d2:	b085      	sub	sp, #20
  dyn_objects_fifo_t *dofp;

  /* [9.5.1] Retrieving a dynamic objects FIFO by name, must not
     exist.*/
  test_set_step(1);
 800f3d4:	4b69      	ldr	r3, [pc, #420]	; (800f57c <oslib_test_009_005_execute+0x1ac>)
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	601a      	str	r2, [r3, #0]
  {
    dofp = chFactoryFindObjectsFIFO("myfifo");
 800f3da:	4869      	ldr	r0, [pc, #420]	; (800f580 <oslib_test_009_005_execute+0x1b0>)
 800f3dc:	f7f7 fb70 	bl	8006ac0 <chFactoryFindObjectsFIFO>
 800f3e0:	9003      	str	r0, [sp, #12]
    test_assert(dofp == NULL, "found");
 800f3e2:	9b03      	ldr	r3, [sp, #12]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	bf0c      	ite	eq
 800f3e8:	2301      	moveq	r3, #1
 800f3ea:	2300      	movne	r3, #0
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	4965      	ldr	r1, [pc, #404]	; (800f584 <oslib_test_009_005_execute+0x1b4>)
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7f7 fefd 	bl	80071f0 <__test_assert>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	f040 80bc 	bne.w	800f576 <oslib_test_009_005_execute+0x1a6>
  }
  test_end_step(1);

  /* [9.5.2] Creating a dynamic objects FIFO it must not exists, must
     succeed.*/
  test_set_step(2);
 800f3fe:	4b5f      	ldr	r3, [pc, #380]	; (800f57c <oslib_test_009_005_execute+0x1ac>)
 800f400:	2202      	movs	r2, #2
 800f402:	601a      	str	r2, [r3, #0]
  {
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800f404:	2304      	movs	r3, #4
 800f406:	2210      	movs	r2, #16
 800f408:	2110      	movs	r1, #16
 800f40a:	485d      	ldr	r0, [pc, #372]	; (800f580 <oslib_test_009_005_execute+0x1b0>)
 800f40c:	f7f7 fb08 	bl	8006a20 <chFactoryCreateObjectsFIFO>
 800f410:	9003      	str	r0, [sp, #12]
    test_assert(dofp != NULL, "cannot create");
 800f412:	9b03      	ldr	r3, [sp, #12]
 800f414:	2b00      	cmp	r3, #0
 800f416:	bf14      	ite	ne
 800f418:	2301      	movne	r3, #1
 800f41a:	2300      	moveq	r3, #0
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	495a      	ldr	r1, [pc, #360]	; (800f588 <oslib_test_009_005_execute+0x1b8>)
 800f420:	4618      	mov	r0, r3
 800f422:	f7f7 fee5 	bl	80071f0 <__test_assert>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	f040 80a4 	bne.w	800f576 <oslib_test_009_005_execute+0x1a6>
  }
  test_end_step(2);

  /* [9.5.3] Creating a dynamic objects FIFO with the same name, must
     fail.*/
  test_set_step(3);
 800f42e:	4b53      	ldr	r3, [pc, #332]	; (800f57c <oslib_test_009_005_execute+0x1ac>)
 800f430:	2203      	movs	r2, #3
 800f432:	601a      	str	r2, [r3, #0]
  {
    dyn_objects_fifo_t *dofp1;

    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800f434:	2304      	movs	r3, #4
 800f436:	2210      	movs	r2, #16
 800f438:	2110      	movs	r1, #16
 800f43a:	4851      	ldr	r0, [pc, #324]	; (800f580 <oslib_test_009_005_execute+0x1b0>)
 800f43c:	f7f7 faf0 	bl	8006a20 <chFactoryCreateObjectsFIFO>
 800f440:	9002      	str	r0, [sp, #8]
    test_assert(dofp1 == NULL, "can create");
 800f442:	9b02      	ldr	r3, [sp, #8]
 800f444:	2b00      	cmp	r3, #0
 800f446:	bf0c      	ite	eq
 800f448:	2301      	moveq	r3, #1
 800f44a:	2300      	movne	r3, #0
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	494f      	ldr	r1, [pc, #316]	; (800f58c <oslib_test_009_005_execute+0x1bc>)
 800f450:	4618      	mov	r0, r3
 800f452:	f7f7 fecd 	bl	80071f0 <__test_assert>
 800f456:	4603      	mov	r3, r0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	f040 808c 	bne.w	800f576 <oslib_test_009_005_execute+0x1a6>
  test_end_step(3);

  /* [9.5.4] Retrieving the dynamic objects FIFO by name, must exist,
     then increasing the reference counter, finally releasing both
     references.*/
  test_set_step(4);
 800f45e:	4b47      	ldr	r3, [pc, #284]	; (800f57c <oslib_test_009_005_execute+0x1ac>)
 800f460:	2204      	movs	r2, #4
 800f462:	601a      	str	r2, [r3, #0]
  {
    dyn_objects_fifo_t *dofp1, *dofp2;

    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 800f464:	4846      	ldr	r0, [pc, #280]	; (800f580 <oslib_test_009_005_execute+0x1b0>)
 800f466:	f7f7 fb2b 	bl	8006ac0 <chFactoryFindObjectsFIFO>
 800f46a:	9001      	str	r0, [sp, #4]
    test_assert(dofp1 != NULL, "not found");
 800f46c:	9b01      	ldr	r3, [sp, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	bf14      	ite	ne
 800f472:	2301      	movne	r3, #1
 800f474:	2300      	moveq	r3, #0
 800f476:	b2db      	uxtb	r3, r3
 800f478:	4945      	ldr	r1, [pc, #276]	; (800f590 <oslib_test_009_005_execute+0x1c0>)
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7f7 feb8 	bl	80071f0 <__test_assert>
 800f480:	4603      	mov	r3, r0
 800f482:	2b00      	cmp	r3, #0
 800f484:	d177      	bne.n	800f576 <oslib_test_009_005_execute+0x1a6>
    test_assert(dofp == dofp1, "object reference mismatch");
 800f486:	9a03      	ldr	r2, [sp, #12]
 800f488:	9b01      	ldr	r3, [sp, #4]
 800f48a:	429a      	cmp	r2, r3
 800f48c:	bf0c      	ite	eq
 800f48e:	2301      	moveq	r3, #1
 800f490:	2300      	movne	r3, #0
 800f492:	b2db      	uxtb	r3, r3
 800f494:	493f      	ldr	r1, [pc, #252]	; (800f594 <oslib_test_009_005_execute+0x1c4>)
 800f496:	4618      	mov	r0, r3
 800f498:	f7f7 feaa 	bl	80071f0 <__test_assert>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d169      	bne.n	800f576 <oslib_test_009_005_execute+0x1a6>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 800f4a2:	9b01      	ldr	r3, [sp, #4]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	2b02      	cmp	r3, #2
 800f4a8:	bf0c      	ite	eq
 800f4aa:	2301      	moveq	r3, #1
 800f4ac:	2300      	movne	r3, #0
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	4938      	ldr	r1, [pc, #224]	; (800f594 <oslib_test_009_005_execute+0x1c4>)
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7f7 fe9c 	bl	80071f0 <__test_assert>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d15b      	bne.n	800f576 <oslib_test_009_005_execute+0x1a6>

    dofp2 = (dyn_objects_fifo_t *)chFactoryDuplicateReference(&dofp1->element);
 800f4be:	9b01      	ldr	r3, [sp, #4]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7ff fb35 	bl	800eb30 <chFactoryDuplicateReference>
 800f4c6:	9000      	str	r0, [sp, #0]
    test_assert(dofp1 == dofp2, "object reference mismatch");
 800f4c8:	9a01      	ldr	r2, [sp, #4]
 800f4ca:	9b00      	ldr	r3, [sp, #0]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	bf0c      	ite	eq
 800f4d0:	2301      	moveq	r3, #1
 800f4d2:	2300      	movne	r3, #0
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	492f      	ldr	r1, [pc, #188]	; (800f594 <oslib_test_009_005_execute+0x1c4>)
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7f7 fe89 	bl	80071f0 <__test_assert>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d148      	bne.n	800f576 <oslib_test_009_005_execute+0x1a6>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 800f4e4:	9b00      	ldr	r3, [sp, #0]
 800f4e6:	685b      	ldr	r3, [r3, #4]
 800f4e8:	2b03      	cmp	r3, #3
 800f4ea:	bf0c      	ite	eq
 800f4ec:	2301      	moveq	r3, #1
 800f4ee:	2300      	movne	r3, #0
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	4928      	ldr	r1, [pc, #160]	; (800f594 <oslib_test_009_005_execute+0x1c4>)
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7f7 fe7b 	bl	80071f0 <__test_assert>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d13a      	bne.n	800f576 <oslib_test_009_005_execute+0x1a6>

    chFactoryReleaseObjectsFIFO(dofp2);
 800f500:	9800      	ldr	r0, [sp, #0]
 800f502:	f7f7 faf5 	bl	8006af0 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 800f506:	9b01      	ldr	r3, [sp, #4]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	2b02      	cmp	r3, #2
 800f50c:	bf0c      	ite	eq
 800f50e:	2301      	moveq	r3, #1
 800f510:	2300      	movne	r3, #0
 800f512:	b2db      	uxtb	r3, r3
 800f514:	4920      	ldr	r1, [pc, #128]	; (800f598 <oslib_test_009_005_execute+0x1c8>)
 800f516:	4618      	mov	r0, r3
 800f518:	f7f7 fe6a 	bl	80071f0 <__test_assert>
 800f51c:	4603      	mov	r3, r0
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d129      	bne.n	800f576 <oslib_test_009_005_execute+0x1a6>

    chFactoryReleaseObjectsFIFO(dofp1);
 800f522:	9801      	ldr	r0, [sp, #4]
 800f524:	f7f7 fae4 	bl	8006af0 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 800f528:	9b03      	ldr	r3, [sp, #12]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	bf0c      	ite	eq
 800f530:	2301      	moveq	r3, #1
 800f532:	2300      	movne	r3, #0
 800f534:	b2db      	uxtb	r3, r3
 800f536:	4918      	ldr	r1, [pc, #96]	; (800f598 <oslib_test_009_005_execute+0x1c8>)
 800f538:	4618      	mov	r0, r3
 800f53a:	f7f7 fe59 	bl	80071f0 <__test_assert>
 800f53e:	4603      	mov	r3, r0
 800f540:	2b00      	cmp	r3, #0
 800f542:	d118      	bne.n	800f576 <oslib_test_009_005_execute+0x1a6>
  }
  test_end_step(4);

  /* [9.5.5] Releasing the first reference to the dynamic objects FIFO
     must not trigger an assertion.*/
  test_set_step(5);
 800f544:	4b0d      	ldr	r3, [pc, #52]	; (800f57c <oslib_test_009_005_execute+0x1ac>)
 800f546:	2205      	movs	r2, #5
 800f548:	601a      	str	r2, [r3, #0]
  {
    chFactoryReleaseObjectsFIFO(dofp);
 800f54a:	9803      	ldr	r0, [sp, #12]
 800f54c:	f7f7 fad0 	bl	8006af0 <chFactoryReleaseObjectsFIFO>
  }
  test_end_step(5);

  /* [9.5.6] Retrieving the dynamic objects FIFO by name again, must
     not exist.*/
  test_set_step(6);
 800f550:	4b0a      	ldr	r3, [pc, #40]	; (800f57c <oslib_test_009_005_execute+0x1ac>)
 800f552:	2206      	movs	r2, #6
 800f554:	601a      	str	r2, [r3, #0]
  {
    dofp = chFactoryFindObjectsFIFO("myfifo");
 800f556:	480a      	ldr	r0, [pc, #40]	; (800f580 <oslib_test_009_005_execute+0x1b0>)
 800f558:	f7f7 fab2 	bl	8006ac0 <chFactoryFindObjectsFIFO>
 800f55c:	9003      	str	r0, [sp, #12]
    test_assert(dofp == NULL, "found");
 800f55e:	9b03      	ldr	r3, [sp, #12]
 800f560:	2b00      	cmp	r3, #0
 800f562:	bf0c      	ite	eq
 800f564:	2301      	moveq	r3, #1
 800f566:	2300      	movne	r3, #0
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	4906      	ldr	r1, [pc, #24]	; (800f584 <oslib_test_009_005_execute+0x1b4>)
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7f7 fe3f 	bl	80071f0 <__test_assert>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
  }
  test_end_step(6);
}
 800f576:	b005      	add	sp, #20
 800f578:	f85d fb04 	ldr.w	pc, [sp], #4
 800f57c:	20000c6c 	.word	0x20000c6c
 800f580:	0801f0bc 	.word	0x0801f0bc
 800f584:	0801f000 	.word	0x0801f000
 800f588:	0801f060 	.word	0x0801f060
 800f58c:	0801f070 	.word	0x0801f070
 800f590:	0801effc 	.word	0x0801effc
 800f594:	0801f018 	.word	0x0801f018
 800f598:	0801f034 	.word	0x0801f034
 800f59c:	00000000 	.word	0x00000000

0800f5a0 <oslib_test_009_006_teardown>:
 *   trigger an assertion.
 * - [9.6.6] Retrieving the dynamic pipe by name again, must not exist.
 * .
 */

static void oslib_test_009_006_teardown(void) {
 800f5a0:	b500      	push	{lr}
 800f5a2:	b083      	sub	sp, #12
  dyn_pipe_t *dpp;

  dpp = chFactoryFindPipe("mypipe");
 800f5a4:	4809      	ldr	r0, [pc, #36]	; (800f5cc <oslib_test_009_006_teardown+0x2c>)
 800f5a6:	f7f7 fae3 	bl	8006b70 <chFactoryFindPipe>
 800f5aa:	9001      	str	r0, [sp, #4]
  if (dpp != NULL) {
 800f5ac:	9b01      	ldr	r3, [sp, #4]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d007      	beq.n	800f5c2 <oslib_test_009_006_teardown+0x22>
    while (dpp->element.refs > 0U) {
 800f5b2:	e002      	b.n	800f5ba <oslib_test_009_006_teardown+0x1a>
      chFactoryReleasePipe(dpp);
 800f5b4:	9801      	ldr	r0, [sp, #4]
 800f5b6:	f7f7 faf3 	bl	8006ba0 <chFactoryReleasePipe>
    while (dpp->element.refs > 0U) {
 800f5ba:	9b01      	ldr	r3, [sp, #4]
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d1f8      	bne.n	800f5b4 <oslib_test_009_006_teardown+0x14>
    }
  }
}
 800f5c2:	bf00      	nop
 800f5c4:	b003      	add	sp, #12
 800f5c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5ca:	bf00      	nop
 800f5cc:	0801f0d4 	.word	0x0801f0d4

0800f5d0 <oslib_test_009_006_execute>:

static void oslib_test_009_006_execute(void) {
 800f5d0:	b500      	push	{lr}
 800f5d2:	b085      	sub	sp, #20
  dyn_pipe_t *dpp;

  /* [9.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 800f5d4:	4b67      	ldr	r3, [pc, #412]	; (800f774 <oslib_test_009_006_execute+0x1a4>)
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	601a      	str	r2, [r3, #0]
  {
    dpp = chFactoryFindPipe("mypipe");
 800f5da:	4867      	ldr	r0, [pc, #412]	; (800f778 <oslib_test_009_006_execute+0x1a8>)
 800f5dc:	f7f7 fac8 	bl	8006b70 <chFactoryFindPipe>
 800f5e0:	9003      	str	r0, [sp, #12]
    test_assert(dpp == NULL, "found");
 800f5e2:	9b03      	ldr	r3, [sp, #12]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	bf0c      	ite	eq
 800f5e8:	2301      	moveq	r3, #1
 800f5ea:	2300      	movne	r3, #0
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	4963      	ldr	r1, [pc, #396]	; (800f77c <oslib_test_009_006_execute+0x1ac>)
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7f7 fdfd 	bl	80071f0 <__test_assert>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	f040 80b8 	bne.w	800f76e <oslib_test_009_006_execute+0x19e>
  }
  test_end_step(1);

  /* [9.6.2] Creating a dynamic pipe it must not exists, must
     succeed.*/
  test_set_step(2);
 800f5fe:	4b5d      	ldr	r3, [pc, #372]	; (800f774 <oslib_test_009_006_execute+0x1a4>)
 800f600:	2202      	movs	r2, #2
 800f602:	601a      	str	r2, [r3, #0]
  {
    dpp = chFactoryCreatePipe("mypipe", 16U);
 800f604:	2110      	movs	r1, #16
 800f606:	485c      	ldr	r0, [pc, #368]	; (800f778 <oslib_test_009_006_execute+0x1a8>)
 800f608:	f7f7 fa8a 	bl	8006b20 <chFactoryCreatePipe>
 800f60c:	9003      	str	r0, [sp, #12]
    test_assert(dpp != NULL, "cannot create");
 800f60e:	9b03      	ldr	r3, [sp, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	bf14      	ite	ne
 800f614:	2301      	movne	r3, #1
 800f616:	2300      	moveq	r3, #0
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	4959      	ldr	r1, [pc, #356]	; (800f780 <oslib_test_009_006_execute+0x1b0>)
 800f61c:	4618      	mov	r0, r3
 800f61e:	f7f7 fde7 	bl	80071f0 <__test_assert>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	f040 80a2 	bne.w	800f76e <oslib_test_009_006_execute+0x19e>
  }
  test_end_step(2);

  /* [9.6.3] Creating a dynamic pipe with the same name, must fail.*/
  test_set_step(3);
 800f62a:	4b52      	ldr	r3, [pc, #328]	; (800f774 <oslib_test_009_006_execute+0x1a4>)
 800f62c:	2203      	movs	r2, #3
 800f62e:	601a      	str	r2, [r3, #0]
  {
    dyn_pipe_t *dpp1;

    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 800f630:	2110      	movs	r1, #16
 800f632:	4851      	ldr	r0, [pc, #324]	; (800f778 <oslib_test_009_006_execute+0x1a8>)
 800f634:	f7f7 fa74 	bl	8006b20 <chFactoryCreatePipe>
 800f638:	9002      	str	r0, [sp, #8]
    test_assert(dpp1 == NULL, "can create");
 800f63a:	9b02      	ldr	r3, [sp, #8]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	bf0c      	ite	eq
 800f640:	2301      	moveq	r3, #1
 800f642:	2300      	movne	r3, #0
 800f644:	b2db      	uxtb	r3, r3
 800f646:	494f      	ldr	r1, [pc, #316]	; (800f784 <oslib_test_009_006_execute+0x1b4>)
 800f648:	4618      	mov	r0, r3
 800f64a:	f7f7 fdd1 	bl	80071f0 <__test_assert>
 800f64e:	4603      	mov	r3, r0
 800f650:	2b00      	cmp	r3, #0
 800f652:	f040 808c 	bne.w	800f76e <oslib_test_009_006_execute+0x19e>
  test_end_step(3);

  /* [9.6.4] Retrieving the dynamic pipe by name, must exist, then
     increasing the reference counter, finally releasing both
     references.*/
  test_set_step(4);
 800f656:	4b47      	ldr	r3, [pc, #284]	; (800f774 <oslib_test_009_006_execute+0x1a4>)
 800f658:	2204      	movs	r2, #4
 800f65a:	601a      	str	r2, [r3, #0]
  {
    dyn_pipe_t *dpp1, *dpp2;

    dpp1 = chFactoryFindPipe("mypipe");
 800f65c:	4846      	ldr	r0, [pc, #280]	; (800f778 <oslib_test_009_006_execute+0x1a8>)
 800f65e:	f7f7 fa87 	bl	8006b70 <chFactoryFindPipe>
 800f662:	9001      	str	r0, [sp, #4]
    test_assert(dpp1 != NULL, "not found");
 800f664:	9b01      	ldr	r3, [sp, #4]
 800f666:	2b00      	cmp	r3, #0
 800f668:	bf14      	ite	ne
 800f66a:	2301      	movne	r3, #1
 800f66c:	2300      	moveq	r3, #0
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	4945      	ldr	r1, [pc, #276]	; (800f788 <oslib_test_009_006_execute+0x1b8>)
 800f672:	4618      	mov	r0, r3
 800f674:	f7f7 fdbc 	bl	80071f0 <__test_assert>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d177      	bne.n	800f76e <oslib_test_009_006_execute+0x19e>
    test_assert(dpp == dpp1, "object reference mismatch");
 800f67e:	9a03      	ldr	r2, [sp, #12]
 800f680:	9b01      	ldr	r3, [sp, #4]
 800f682:	429a      	cmp	r2, r3
 800f684:	bf0c      	ite	eq
 800f686:	2301      	moveq	r3, #1
 800f688:	2300      	movne	r3, #0
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	493f      	ldr	r1, [pc, #252]	; (800f78c <oslib_test_009_006_execute+0x1bc>)
 800f68e:	4618      	mov	r0, r3
 800f690:	f7f7 fdae 	bl	80071f0 <__test_assert>
 800f694:	4603      	mov	r3, r0
 800f696:	2b00      	cmp	r3, #0
 800f698:	d169      	bne.n	800f76e <oslib_test_009_006_execute+0x19e>
    test_assert(dpp1->element.refs == 2, "object reference mismatch");
 800f69a:	9b01      	ldr	r3, [sp, #4]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	2b02      	cmp	r3, #2
 800f6a0:	bf0c      	ite	eq
 800f6a2:	2301      	moveq	r3, #1
 800f6a4:	2300      	movne	r3, #0
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	4938      	ldr	r1, [pc, #224]	; (800f78c <oslib_test_009_006_execute+0x1bc>)
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7f7 fda0 	bl	80071f0 <__test_assert>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d15b      	bne.n	800f76e <oslib_test_009_006_execute+0x19e>

    dpp2 = (dyn_pipe_t *)chFactoryDuplicateReference(&dpp1->element);
 800f6b6:	9b01      	ldr	r3, [sp, #4]
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7ff fa39 	bl	800eb30 <chFactoryDuplicateReference>
 800f6be:	9000      	str	r0, [sp, #0]
    test_assert(dpp1 == dpp2, "object reference mismatch");
 800f6c0:	9a01      	ldr	r2, [sp, #4]
 800f6c2:	9b00      	ldr	r3, [sp, #0]
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	bf0c      	ite	eq
 800f6c8:	2301      	moveq	r3, #1
 800f6ca:	2300      	movne	r3, #0
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	492f      	ldr	r1, [pc, #188]	; (800f78c <oslib_test_009_006_execute+0x1bc>)
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7f7 fd8d 	bl	80071f0 <__test_assert>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d148      	bne.n	800f76e <oslib_test_009_006_execute+0x19e>
    test_assert(dpp2->element.refs == 3, "object reference mismatch");
 800f6dc:	9b00      	ldr	r3, [sp, #0]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	2b03      	cmp	r3, #3
 800f6e2:	bf0c      	ite	eq
 800f6e4:	2301      	moveq	r3, #1
 800f6e6:	2300      	movne	r3, #0
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	4928      	ldr	r1, [pc, #160]	; (800f78c <oslib_test_009_006_execute+0x1bc>)
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7f7 fd7f 	bl	80071f0 <__test_assert>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d13a      	bne.n	800f76e <oslib_test_009_006_execute+0x19e>

    chFactoryReleasePipe(dpp2);
 800f6f8:	9800      	ldr	r0, [sp, #0]
 800f6fa:	f7f7 fa51 	bl	8006ba0 <chFactoryReleasePipe>
    test_assert(dpp1->element.refs == 2, "references mismatch");
 800f6fe:	9b01      	ldr	r3, [sp, #4]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	2b02      	cmp	r3, #2
 800f704:	bf0c      	ite	eq
 800f706:	2301      	moveq	r3, #1
 800f708:	2300      	movne	r3, #0
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	4920      	ldr	r1, [pc, #128]	; (800f790 <oslib_test_009_006_execute+0x1c0>)
 800f70e:	4618      	mov	r0, r3
 800f710:	f7f7 fd6e 	bl	80071f0 <__test_assert>
 800f714:	4603      	mov	r3, r0
 800f716:	2b00      	cmp	r3, #0
 800f718:	d129      	bne.n	800f76e <oslib_test_009_006_execute+0x19e>

    chFactoryReleasePipe(dpp1);
 800f71a:	9801      	ldr	r0, [sp, #4]
 800f71c:	f7f7 fa40 	bl	8006ba0 <chFactoryReleasePipe>
    test_assert(dpp->element.refs == 1, "references mismatch");
 800f720:	9b03      	ldr	r3, [sp, #12]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	2b01      	cmp	r3, #1
 800f726:	bf0c      	ite	eq
 800f728:	2301      	moveq	r3, #1
 800f72a:	2300      	movne	r3, #0
 800f72c:	b2db      	uxtb	r3, r3
 800f72e:	4918      	ldr	r1, [pc, #96]	; (800f790 <oslib_test_009_006_execute+0x1c0>)
 800f730:	4618      	mov	r0, r3
 800f732:	f7f7 fd5d 	bl	80071f0 <__test_assert>
 800f736:	4603      	mov	r3, r0
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d118      	bne.n	800f76e <oslib_test_009_006_execute+0x19e>
  }
  test_end_step(4);

  /* [9.6.5] Releasing the first reference to the dynamic pipe must not
     trigger an assertion.*/
  test_set_step(5);
 800f73c:	4b0d      	ldr	r3, [pc, #52]	; (800f774 <oslib_test_009_006_execute+0x1a4>)
 800f73e:	2205      	movs	r2, #5
 800f740:	601a      	str	r2, [r3, #0]
  {
    chFactoryReleasePipe(dpp);
 800f742:	9803      	ldr	r0, [sp, #12]
 800f744:	f7f7 fa2c 	bl	8006ba0 <chFactoryReleasePipe>
  }
  test_end_step(5);

  /* [9.6.6] Retrieving the dynamic pipe by name again, must not
     exist.*/
  test_set_step(6);
 800f748:	4b0a      	ldr	r3, [pc, #40]	; (800f774 <oslib_test_009_006_execute+0x1a4>)
 800f74a:	2206      	movs	r2, #6
 800f74c:	601a      	str	r2, [r3, #0]
  {
    dpp = chFactoryFindPipe("mypipe");
 800f74e:	480a      	ldr	r0, [pc, #40]	; (800f778 <oslib_test_009_006_execute+0x1a8>)
 800f750:	f7f7 fa0e 	bl	8006b70 <chFactoryFindPipe>
 800f754:	9003      	str	r0, [sp, #12]
    test_assert(dpp == NULL, "found");
 800f756:	9b03      	ldr	r3, [sp, #12]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	bf0c      	ite	eq
 800f75c:	2301      	moveq	r3, #1
 800f75e:	2300      	movne	r3, #0
 800f760:	b2db      	uxtb	r3, r3
 800f762:	4906      	ldr	r1, [pc, #24]	; (800f77c <oslib_test_009_006_execute+0x1ac>)
 800f764:	4618      	mov	r0, r3
 800f766:	f7f7 fd43 	bl	80071f0 <__test_assert>
 800f76a:	4603      	mov	r3, r0
 800f76c:	2b00      	cmp	r3, #0
  }
  test_end_step(6);
}
 800f76e:	b005      	add	sp, #20
 800f770:	f85d fb04 	ldr.w	pc, [sp], #4
 800f774:	20000c6c 	.word	0x20000c6c
 800f778:	0801f0d4 	.word	0x0801f0d4
 800f77c:	0801f000 	.word	0x0801f000
 800f780:	0801f060 	.word	0x0801f060
 800f784:	0801f070 	.word	0x0801f070
 800f788:	0801effc 	.word	0x0801effc
 800f78c:	0801f018 	.word	0x0801f018
 800f790:	0801f034 	.word	0x0801f034
	...

0800f7a0 <_read_r>:
#endif

/***************************************************************************/

__attribute__((used))
int _read_r(struct _reent *r, int file, char * ptr, int len) {
 800f7a0:	b084      	sub	sp, #16
 800f7a2:	9003      	str	r0, [sp, #12]
 800f7a4:	9102      	str	r1, [sp, #8]
 800f7a6:	9201      	str	r2, [sp, #4]
 800f7a8:	9300      	str	r3, [sp, #0]
  return len;
#else
  (void)file;
  (void)ptr;
  (void)len;
  __errno_r(r)  = EINVAL;
 800f7aa:	9b03      	ldr	r3, [sp, #12]
 800f7ac:	2216      	movs	r2, #22
 800f7ae:	601a      	str	r2, [r3, #0]
  return -1;
 800f7b0:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	b004      	add	sp, #16
 800f7b8:	4770      	bx	lr
 800f7ba:	bf00      	nop
 800f7bc:	0000      	movs	r0, r0
	...

0800f7c0 <_lseek_r>:

/***************************************************************************/

__attribute__((used))
int _lseek_r(struct _reent *r, int file, int ptr, int dir) {
 800f7c0:	b084      	sub	sp, #16
 800f7c2:	9003      	str	r0, [sp, #12]
 800f7c4:	9102      	str	r1, [sp, #8]
 800f7c6:	9201      	str	r2, [sp, #4]
 800f7c8:	9300      	str	r3, [sp, #0]
  (void)r;
  (void)file;
  (void)ptr;
  (void)dir;

  return 0;
 800f7ca:	2300      	movs	r3, #0
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	b004      	add	sp, #16
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop
	...

0800f7e0 <_write_r>:

/***************************************************************************/

__attribute__((used))
int _write_r(struct _reent *r, int file, char * ptr, int len) {
 800f7e0:	b084      	sub	sp, #16
 800f7e2:	9003      	str	r0, [sp, #12]
 800f7e4:	9102      	str	r1, [sp, #8]
 800f7e6:	9201      	str	r2, [sp, #4]
 800f7e8:	9300      	str	r3, [sp, #0]
    __errno_r(r) = EINVAL;
    return -1;
  }
  sdWrite(&STDOUT_SD, (uint8_t *)ptr, (size_t)len);
#endif
  return len;
 800f7ea:	9b00      	ldr	r3, [sp, #0]
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	b004      	add	sp, #16
 800f7f0:	4770      	bx	lr
 800f7f2:	bf00      	nop
	...

0800f800 <_close_r>:
}

/***************************************************************************/

__attribute__((used))
int _close_r(struct _reent *r, int file) {
 800f800:	b082      	sub	sp, #8
 800f802:	9001      	str	r0, [sp, #4]
 800f804:	9100      	str	r1, [sp, #0]
  (void)r;
  (void)file;

  return 0;
 800f806:	2300      	movs	r3, #0
}
 800f808:	4618      	mov	r0, r3
 800f80a:	b002      	add	sp, #8
 800f80c:	4770      	bx	lr
 800f80e:	bf00      	nop

0800f810 <_sbrk_r>:

/***************************************************************************/

__attribute__((used))
caddr_t _sbrk_r(struct _reent *r, int incr) {
 800f810:	b500      	push	{lr}
 800f812:	b085      	sub	sp, #20
 800f814:	9001      	str	r0, [sp, #4]
 800f816:	9100      	str	r1, [sp, #0]
#if CH_CFG_USE_MEMCORE
  void *p;

  chDbgCheck(incr >= 0);

  p = chCoreAllocFromBase((size_t)incr, 1U, 0U);
 800f818:	9b00      	ldr	r3, [sp, #0]
 800f81a:	2200      	movs	r2, #0
 800f81c:	2101      	movs	r1, #1
 800f81e:	4618      	mov	r0, r3
 800f820:	f7f5 fcbe 	bl	80051a0 <chCoreAllocFromBase>
 800f824:	9003      	str	r0, [sp, #12]
  if (p == NULL) {
 800f826:	9b03      	ldr	r3, [sp, #12]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d105      	bne.n	800f838 <_sbrk_r+0x28>
    __errno_r(r)  = ENOMEM;
 800f82c:	9b01      	ldr	r3, [sp, #4]
 800f82e:	220c      	movs	r2, #12
 800f830:	601a      	str	r2, [r3, #0]
    return (caddr_t)-1;
 800f832:	f04f 33ff 	mov.w	r3, #4294967295
 800f836:	e000      	b.n	800f83a <_sbrk_r+0x2a>
  }
  return (caddr_t)p;
 800f838:	9b03      	ldr	r3, [sp, #12]
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	b005      	add	sp, #20
 800f83e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f842:	bf00      	nop
	...

0800f850 <_fstat_r>:

/***************************************************************************/

__attribute__((used))
int _fstat_r(struct _reent *r, int file, struct stat * st) {
 800f850:	b500      	push	{lr}
 800f852:	b085      	sub	sp, #20
 800f854:	9003      	str	r0, [sp, #12]
 800f856:	9102      	str	r1, [sp, #8]
 800f858:	9201      	str	r2, [sp, #4]
  (void)r;
  (void)file;

  memset(st, 0, sizeof(*st));
 800f85a:	2258      	movs	r2, #88	; 0x58
 800f85c:	2100      	movs	r1, #0
 800f85e:	9801      	ldr	r0, [sp, #4]
 800f860:	f00c fe9e 	bl	801c5a0 <memset>
  st->st_mode = S_IFCHR;
 800f864:	9b01      	ldr	r3, [sp, #4]
 800f866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f86a:	605a      	str	r2, [r3, #4]
  return 0;
 800f86c:	2300      	movs	r3, #0
}
 800f86e:	4618      	mov	r0, r3
 800f870:	b005      	add	sp, #20
 800f872:	f85d fb04 	ldr.w	pc, [sp], #4
 800f876:	bf00      	nop
	...

0800f880 <_isatty_r>:

/***************************************************************************/

__attribute__((used))
int _isatty_r(struct _reent *r, int fd) {
 800f880:	b082      	sub	sp, #8
 800f882:	9001      	str	r0, [sp, #4]
 800f884:	9100      	str	r1, [sp, #0]
  (void)r;
  (void)fd;

  return 1;
 800f886:	2301      	movs	r3, #1
}
 800f888:	4618      	mov	r0, r3
 800f88a:	b002      	add	sp, #8
 800f88c:	4770      	bx	lr
 800f88e:	bf00      	nop

0800f890 <_exit>:

/***************************************************************************/

__attribute__((used))
void _exit(int status) {
 800f890:	b500      	push	{lr}
 800f892:	b083      	sub	sp, #12
 800f894:	9001      	str	r0, [sp, #4]

  (void) status;

  chSysHalt("exit");
 800f896:	4802      	ldr	r0, [pc, #8]	; (800f8a0 <_exit+0x10>)
 800f898:	f7f2 fa9a 	bl	8001dd0 <chSysHalt>
  abort();
 800f89c:	f00c f9ba 	bl	801bc14 <abort>
 800f8a0:	0801f110 	.word	0x0801f110
	...

0800f8b0 <_kill>:
}

/***************************************************************************/

__attribute__((used))
int _kill(int pid, int sig) {
 800f8b0:	b500      	push	{lr}
 800f8b2:	b083      	sub	sp, #12
 800f8b4:	9001      	str	r0, [sp, #4]
 800f8b6:	9100      	str	r1, [sp, #0]

  (void) pid;
  (void) sig;

  chSysHalt("kill");
 800f8b8:	4802      	ldr	r0, [pc, #8]	; (800f8c4 <_kill+0x14>)
 800f8ba:	f7f2 fa89 	bl	8001dd0 <chSysHalt>
  abort();
 800f8be:	f00c f9a9 	bl	801bc14 <abort>
 800f8c2:	bf00      	nop
 800f8c4:	0801f118 	.word	0x0801f118
	...

0800f8d0 <_getpid>:
/***************************************************************************/

__attribute__((used))
int _getpid(void) {

  return 1;
 800f8d0:	2301      	movs	r3, #1
  abort();
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	4770      	bx	lr
 800f8d6:	bf00      	nop
	...

0800f8e0 <chRegSetThreadName>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 800f8e0:	b082      	sub	sp, #8
 800f8e2:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 800f8e4:	4b03      	ldr	r3, [pc, #12]	; (800f8f4 <chRegSetThreadName+0x14>)
 800f8e6:	68db      	ldr	r3, [r3, #12]
 800f8e8:	9a01      	ldr	r2, [sp, #4]
 800f8ea:	61da      	str	r2, [r3, #28]
#else
  (void)name;
#endif
}
 800f8ec:	bf00      	nop
 800f8ee:	b002      	add	sp, #8
 800f8f0:	4770      	bx	lr
 800f8f2:	bf00      	nop
 800f8f4:	20000a48 	.word	0x20000a48
	...

0800f900 <test_execute>:
                                 const testsuite_t *tsp) {
 800f900:	b500      	push	{lr}
 800f902:	b083      	sub	sp, #12
 800f904:	9001      	str	r0, [sp, #4]
 800f906:	9100      	str	r1, [sp, #0]
  return (msg_t)test_execute_stream(stream, tsp);
 800f908:	9900      	ldr	r1, [sp, #0]
 800f90a:	9801      	ldr	r0, [sp, #4]
 800f90c:	f7f7 fce8 	bl	80072e0 <test_execute_stream>
 800f910:	4603      	mov	r3, r0
}
 800f912:	4618      	mov	r0, r3
 800f914:	b003      	add	sp, #12
 800f916:	f85d fb04 	ldr.w	pc, [sp], #4
 800f91a:	bf00      	nop
 800f91c:	0000      	movs	r0, r0
	...

0800f920 <Thread1.lto_priv.2>:


static THD_WORKING_AREA(waThread1, FALCON_SIG_WORKBUF_SIZE);

/* Define the thread function */
static THD_FUNCTION(Thread1, arg) {
 800f920:	b510      	push	{r4, lr}
 800f922:	f6ad 3d78 	subw	sp, sp, #2936	; 0xb78
 800f926:	f60d 3378 	addw	r3, sp, #2936	; 0xb78
 800f92a:	f6a3 3364 	subw	r3, r3, #2916	; 0xb64
 800f92e:	6018      	str	r0, [r3, #0]
    (void)arg;
    chRegSetThreadName("falcon_sign");
 800f930:	4850      	ldr	r0, [pc, #320]	; (800fa74 <Thread1.lto_priv.2+0x154>)
 800f932:	f7ff ffd5 	bl	800f8e0 <chRegSetThreadName>

    /* Create a buffer to hold the message to sign */
    uint8_t message[MESSAGE_SIZE_BYTES];
    unsigned long long mlen=MESSAGE_SIZE_BYTES;
 800f936:	f04f 0210 	mov.w	r2, #16
 800f93a:	f04f 0300 	mov.w	r3, #0
 800f93e:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
 800f942:	e9c1 2300 	strd	r2, r3, [r1]
    uint8_t secret_key[CRYPTO_SECRETKEYBYTES];// = (const uint8_t*) "Y\004\0@\0041;üNÀ#ÑE\027Ñ>\v\236@\f\217\202ôo·ü\036» >ÃøOþÿÝ\201\027 ûð?ø\b\020Æ\0N|  @\004\037\003÷ÿ\177çï?$\237úð0\212$\017ÀÿÐ}+Ð\201÷ @óÐ@\003\220}\0\022ýïÐ\0\024@\004Ô^\002ûð}\003ÿý\024`\204\aß\202ü\0;\024nÿ\004!þ\aÿ¾\0oûàRC\030\016\210ð^¾\024oþóï½\0/D\003Ï?\eá~Ü Æë±Ãø\036\200\024\017|\eÏ¿\0\036E\003À\003\f\"\002\vð\211\eï¼\003ÿÃ\0!\177\020\0Ç\024\021¿ô\200ûìAFà\200F\003"...
//    static uint8_t big[64000];
//    big[0]=0;
//    chnWrite(&SD1, big, 64000);

    crypto_sign_keypair(public_key, secret_key);
 800f946:	aa07      	add	r2, sp, #28
 800f948:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 800f94c:	4611      	mov	r1, r2
 800f94e:	4618      	mov	r0, r3
 800f950:	f001 fa9e 	bl	8010e90 <crypto_sign_keypair>
//    secret:"Y\004\0@\0041;üNÀ#ÑE\027Ñ>\v\236@\f\217\202ôo·ü\036» >ÃøOþÿÝ\201\027 ûð?ø\b\020Æ\0N|  @\004\037\003÷ÿ\177çï?$\237úð0\212$\017ÀÿÐ}+Ð\201÷ @óÐ@\003\220}\0\022ýïÐ\0\024@\004Ô^\002ûð}\003ÿý\024`\204\aß\202ü\0;\024nÿ\004!þ\aÿ¾\0oûàRC\030\016\210ð^¾\024oþóï½\0/D\003Ï?\eá~Ü Æë±Ãø\036\200\024\017|\eÏ¿\0\036E\003À\003\f\"\002\vð\211\eï¼\003ÿÃ\0!\177\020\0Ç\024\021¿ô\200ûìAFà\200F\003"...
//    public:"\t´ÄI\023ç\eãg\b\0266ÄÑÌ^YéÑw$\211\037JKÅP]±¥:\022K×\230\022\216Æ\223ôÙj´§z\207hôÐjºÄ­Á¡h¿\201²\\Ã§E«eàë\202WCÃTþÔæ«TÅ\016\211\234óØCæ$â\224ê<ãì\227a¤·\237á}*L,\023L$é^)u\023Uê\001\nQ\004\025ÝÕ¹obVy\001+1\231RÍ&\\ì\214:t\230\230\002\203\203\2044\026J¿ÞF¸P+\203\0Z¹N\221Ü\005Ï¦Ï~Àm1\224Ì8Tí93ÔÅ\022B\231\211\232Þ\213Ú&ÌCòöIfV\025¡R,ÔÃ°tÞ"...
//    memset(secret_key, 0, sizeof(secret_key));
//    memset(public_key, 0, sizeof(public_key));
    memset(signature, 0, sizeof(signature));
 800f954:	f60d 03a4 	addw	r3, sp, #2212	; 0x8a4
 800f958:	f240 22b2 	movw	r2, #690	; 0x2b2
 800f95c:	2100      	movs	r1, #0
 800f95e:	4618      	mov	r0, r3
 800f960:	f00c fe1e 	bl	801c5a0 <memset>
    chnWrite(&SD1, public_key, CRYPTO_PUBLICKEYBYTES);
 800f964:	4b44      	ldr	r3, [pc, #272]	; (800fa78 <Thread1.lto_priv.2+0x158>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	f50d 61a4 	add.w	r1, sp, #1312	; 0x520
 800f96e:	f240 3281 	movw	r2, #897	; 0x381
 800f972:	4841      	ldr	r0, [pc, #260]	; (800fa78 <Thread1.lto_priv.2+0x158>)
 800f974:	4798      	blx	r3

//    chnWrite(&SD1, secret_key, CRYPTO_SECRETKEYBYTES);

    while (true) {
        /* Generate a random message */
        for (int i = 0; i < MESSAGE_SIZE_BYTES; i++) {
 800f976:	2300      	movs	r3, #0
 800f978:	f8cd 3b74 	str.w	r3, [sp, #2932]	; 0xb74
 800f97c:	e014      	b.n	800f9a8 <Thread1.lto_priv.2+0x88>
            message[i] = rand() % 256;
 800f97e:	f00c f82f 	bl	801b9e0 <rand>
 800f982:	4603      	mov	r3, r0
 800f984:	425a      	negs	r2, r3
 800f986:	b2db      	uxtb	r3, r3
 800f988:	b2d2      	uxtb	r2, r2
 800f98a:	bf58      	it	pl
 800f98c:	4253      	negpl	r3, r2
 800f98e:	b2d9      	uxtb	r1, r3
 800f990:	f50d 6236 	add.w	r2, sp, #2912	; 0xb60
 800f994:	f8dd 3b74 	ldr.w	r3, [sp, #2932]	; 0xb74
 800f998:	4413      	add	r3, r2
 800f99a:	460a      	mov	r2, r1
 800f99c:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < MESSAGE_SIZE_BYTES; i++) {
 800f99e:	f8dd 3b74 	ldr.w	r3, [sp, #2932]	; 0xb74
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	f8cd 3b74 	str.w	r3, [sp, #2932]	; 0xb74
 800f9a8:	f8dd 3b74 	ldr.w	r3, [sp, #2932]	; 0xb74
 800f9ac:	2b0f      	cmp	r3, #15
 800f9ae:	dde6      	ble.n	800f97e <Thread1.lto_priv.2+0x5e>
        }

        chnWrite(&SD1, message, MESSAGE_SIZE_BYTES);
 800f9b0:	4b31      	ldr	r3, [pc, #196]	; (800fa78 <Thread1.lto_priv.2+0x158>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	685b      	ldr	r3, [r3, #4]
 800f9b6:	f50d 6136 	add.w	r1, sp, #2912	; 0xb60
 800f9ba:	2210      	movs	r2, #16
 800f9bc:	482e      	ldr	r0, [pc, #184]	; (800fa78 <Thread1.lto_priv.2+0x158>)
 800f9be:	4798      	blx	r3
        memset(message, 0, sizeof(message));
 800f9c0:	f50d 6336 	add.w	r3, sp, #2912	; 0xb60
 800f9c4:	2210      	movs	r2, #16
 800f9c6:	2100      	movs	r1, #0
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f00c fde9 	bl	801c5a0 <memset>
        /* Sign the message */
        chnWrite(&SD1, secret_key, CRYPTO_SECRETKEYBYTES);
 800f9ce:	4b2a      	ldr	r3, [pc, #168]	; (800fa78 <Thread1.lto_priv.2+0x158>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	a907      	add	r1, sp, #28
 800f9d6:	f240 5201 	movw	r2, #1281	; 0x501
 800f9da:	4827      	ldr	r0, [pc, #156]	; (800fa78 <Thread1.lto_priv.2+0x158>)
 800f9dc:	4798      	blx	r3

        crypto_sign(signature, NULL, message, MESSAGE_SIZE_BYTES, secret_key);
 800f9de:	f50d 6136 	add.w	r1, sp, #2912	; 0xb60
 800f9e2:	f60d 00a4 	addw	r0, sp, #2212	; 0x8a4
 800f9e6:	ab07      	add	r3, sp, #28
 800f9e8:	9302      	str	r3, [sp, #8]
 800f9ea:	f04f 0210 	mov.w	r2, #16
 800f9ee:	f04f 0300 	mov.w	r3, #0
 800f9f2:	e9cd 2300 	strd	r2, r3, [sp]
 800f9f6:	460a      	mov	r2, r1
 800f9f8:	2100      	movs	r1, #0
 800f9fa:	f001 faf1 	bl	8010fe0 <crypto_sign>

        /* Verify the signature (for testing purposes) */
        chnWrite(&SD1, signature, CRYPTO_BYTES);
 800f9fe:	4b1e      	ldr	r3, [pc, #120]	; (800fa78 <Thread1.lto_priv.2+0x158>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	f60d 01a4 	addw	r1, sp, #2212	; 0x8a4
 800fa08:	f240 22b2 	movw	r2, #690	; 0x2b2
 800fa0c:	481a      	ldr	r0, [pc, #104]	; (800fa78 <Thread1.lto_priv.2+0x158>)
 800fa0e:	4798      	blx	r3

        int signature_verified = crypto_sign_open(message, &mlen, signature, CRYPTO_BYTES, public_key);
 800fa10:	f60d 04a4 	addw	r4, sp, #2212	; 0x8a4
 800fa14:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
 800fa18:	f50d 6036 	add.w	r0, sp, #2912	; 0xb60
 800fa1c:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 800fa20:	9302      	str	r3, [sp, #8]
 800fa22:	f240 22b2 	movw	r2, #690	; 0x2b2
 800fa26:	f04f 0300 	mov.w	r3, #0
 800fa2a:	e9cd 2300 	strd	r2, r3, [sp]
 800fa2e:	4622      	mov	r2, r4
 800fa30:	f001 fc0e 	bl	8011250 <crypto_sign_open>
 800fa34:	f8cd 0b70 	str.w	r0, [sp, #2928]	; 0xb70

        /* Do something with the signature (e.g. send it over a network) */
        if (signature_verified==0){
 800fa38:	f8dd 3b70 	ldr.w	r3, [sp, #2928]	; 0xb70
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d107      	bne.n	800fa50 <Thread1.lto_priv.2+0x130>
        chnWrite(&SD1, signature, 16);
 800fa40:	4b0d      	ldr	r3, [pc, #52]	; (800fa78 <Thread1.lto_priv.2+0x158>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	f60d 01a4 	addw	r1, sp, #2212	; 0x8a4
 800fa4a:	2210      	movs	r2, #16
 800fa4c:	480a      	ldr	r0, [pc, #40]	; (800fa78 <Thread1.lto_priv.2+0x158>)
 800fa4e:	4798      	blx	r3
        }
        /* Wait for some time before signing the next message */
        palSetPad(GPIOD, GPIOD_LED3);       // Orange.
 800fa50:	4b0a      	ldr	r3, [pc, #40]	; (800fa7c <Thread1.lto_priv.2+0x15c>)
 800fa52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fa56:	831a      	strh	r2, [r3, #24]
//        chprintf((BaseSequentialStream *)&SD1, "Hello, world!\r\n");
        chThdSleepMilliseconds(1000);
 800fa58:	f242 7010 	movw	r0, #10000	; 0x2710
 800fa5c:	f7f3 fce8 	bl	8003430 <chThdSleep>
        palClearPad(GPIOD, GPIOD_LED3);     // Orange.
 800fa60:	4b06      	ldr	r3, [pc, #24]	; (800fa7c <Thread1.lto_priv.2+0x15c>)
 800fa62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fa66:	835a      	strh	r2, [r3, #26]
        chThdSleepMilliseconds(500);
 800fa68:	f241 3088 	movw	r0, #5000	; 0x1388
 800fa6c:	f7f3 fce0 	bl	8003430 <chThdSleep>
    while (true) {
 800fa70:	e781      	b.n	800f976 <Thread1.lto_priv.2+0x56>
 800fa72:	bf00      	nop
 800fa74:	0801f120 	.word	0x0801f120
 800fa78:	20000938 	.word	0x20000938
 800fa7c:	40020c00 	.word	0x40020c00

0800fa80 <main>:

/*
 * Application entry point.
 */

int main(void) {
 800fa80:	b500      	push	{lr}
 800fa82:	b083      	sub	sp, #12
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */

  /* Initialize ChibiOS */
  halInit();
 800fa84:	f7f0 fcdc 	bl	8000440 <halInit>
  chSysInit();
 800fa88:	f7f2 f972 	bl	8001d70 <chSysInit>

  sdStart(&SD1, NULL);
 800fa8c:	2100      	movs	r1, #0
 800fa8e:	4817      	ldr	r0, [pc, #92]	; (800faec <main+0x6c>)
 800fa90:	f7f1 f9c6 	bl	8000e20 <sdStart>
  sdStart(&SD2, NULL);
 800fa94:	2100      	movs	r1, #0
 800fa96:	4816      	ldr	r0, [pc, #88]	; (800faf0 <main+0x70>)
 800fa98:	f7f1 f9c2 	bl	8000e20 <sdStart>
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 800fa9c:	f240 3282 	movw	r2, #898	; 0x382
 800faa0:	2104      	movs	r1, #4
 800faa2:	4814      	ldr	r0, [pc, #80]	; (800faf4 <main+0x74>)
 800faa4:	f7f1 fcc4 	bl	8001430 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 800faa8:	f240 3282 	movw	r2, #898	; 0x382
 800faac:	2108      	movs	r1, #8
 800faae:	4811      	ldr	r0, [pc, #68]	; (800faf4 <main+0x74>)
 800fab0:	f7f1 fcbe 	bl	8001430 <_pal_lld_setgroupmode>

  /*
   * Creates the example thread.
   */

  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800fab4:	2300      	movs	r3, #0
 800fab6:	9300      	str	r3, [sp, #0]
 800fab8:	4b0f      	ldr	r3, [pc, #60]	; (800faf8 <main+0x78>)
 800faba:	2280      	movs	r2, #128	; 0x80
 800fabc:	f647 51f0 	movw	r1, #32240	; 0x7df0
 800fac0:	480e      	ldr	r0, [pc, #56]	; (800fafc <main+0x7c>)
 800fac2:	f7f3 fb75 	bl	80031b0 <chThdCreateStatic>
   * sleeping in a loop and check the button state.
   */

  /* Infinite loop */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 800fac6:	4b0b      	ldr	r3, [pc, #44]	; (800faf4 <main+0x74>)
 800fac8:	691b      	ldr	r3, [r3, #16]
 800faca:	f003 0301 	and.w	r3, r3, #1
 800face:	2b00      	cmp	r3, #0
 800fad0:	d007      	beq.n	800fae2 <main+0x62>
      test_execute((BaseSequentialStream *)&SD2, &rt_test_suite);
 800fad2:	490b      	ldr	r1, [pc, #44]	; (800fb00 <main+0x80>)
 800fad4:	4806      	ldr	r0, [pc, #24]	; (800faf0 <main+0x70>)
 800fad6:	f7ff ff13 	bl	800f900 <test_execute>
      test_execute((BaseSequentialStream *)&SD2, &oslib_test_suite);
 800fada:	490a      	ldr	r1, [pc, #40]	; (800fb04 <main+0x84>)
 800fadc:	4804      	ldr	r0, [pc, #16]	; (800faf0 <main+0x70>)
 800fade:	f7ff ff0f 	bl	800f900 <test_execute>
    }
    chThdSleepMilliseconds(1000);
 800fae2:	f242 7010 	movw	r0, #10000	; 0x2710
 800fae6:	f7f3 fca3 	bl	8003430 <chThdSleep>
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 800faea:	e7ec      	b.n	800fac6 <main+0x46>
 800faec:	20000938 	.word	0x20000938
 800faf0:	200009b8 	.word	0x200009b8
 800faf4:	40020000 	.word	0x40020000
 800faf8:	0800f921 	.word	0x0800f921
 800fafc:	20001e30 	.word	0x20001e30
 800fb00:	0801d700 	.word	0x0801d700
 800fb04:	0801e8b4 	.word	0x0801e8b4
	...

0800fb10 <fpr_ursh.lto_priv.0>:
 *
 * Shift count n MUST be in the 0..63 range.
 */
static inline uint64_t
fpr_ursh(uint64_t x, int n)
{
 800fb10:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800fb14:	b088      	sub	sp, #32
 800fb16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fb1a:	9205      	str	r2, [sp, #20]
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800fb1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb20:	f04f 0000 	mov.w	r0, #0
 800fb24:	f04f 0100 	mov.w	r1, #0
 800fb28:	0018      	movs	r0, r3
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb30:	ea80 0a02 	eor.w	sl, r0, r2
 800fb34:	ea81 0b03 	eor.w	fp, r1, r3
 800fb38:	9b05      	ldr	r3, [sp, #20]
 800fb3a:	115b      	asrs	r3, r3, #5
 800fb3c:	17da      	asrs	r2, r3, #31
 800fb3e:	9300      	str	r3, [sp, #0]
 800fb40:	9201      	str	r2, [sp, #4]
 800fb42:	2300      	movs	r3, #0
 800fb44:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fb48:	4608      	mov	r0, r1
 800fb4a:	f1d0 0800 	rsbs	r8, r0, #0
 800fb4e:	eb63 0902 	sbc.w	r9, r3, r2
 800fb52:	ea0a 0408 	and.w	r4, sl, r8
 800fb56:	ea0b 0509 	and.w	r5, fp, r9
 800fb5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb5e:	ea82 0104 	eor.w	r1, r2, r4
 800fb62:	9102      	str	r1, [sp, #8]
 800fb64:	406b      	eors	r3, r5
 800fb66:	9303      	str	r3, [sp, #12]
 800fb68:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800fb6c:	e9cd 3406 	strd	r3, r4, [sp, #24]
	return x >> (n & 31);
 800fb70:	9b05      	ldr	r3, [sp, #20]
 800fb72:	f003 011f 	and.w	r1, r3, #31
 800fb76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb7a:	f1c1 0420 	rsb	r4, r1, #32
 800fb7e:	f1a1 0020 	sub.w	r0, r1, #32
 800fb82:	fa22 f601 	lsr.w	r6, r2, r1
 800fb86:	fa03 f404 	lsl.w	r4, r3, r4
 800fb8a:	4326      	orrs	r6, r4
 800fb8c:	fa23 f000 	lsr.w	r0, r3, r0
 800fb90:	4306      	orrs	r6, r0
 800fb92:	fa23 f701 	lsr.w	r7, r3, r1
 800fb96:	4632      	mov	r2, r6
 800fb98:	463b      	mov	r3, r7
}
 800fb9a:	4610      	mov	r0, r2
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	b008      	add	sp, #32
 800fba0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800fba4:	4770      	bx	lr
 800fba6:	bf00      	nop
	...

0800fbb0 <fpr_irsh>:
 *
 * Shift count n MUST be in the 0..63 range.
 */
static inline int64_t
fpr_irsh(int64_t x, int n)
{
 800fbb0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800fbb4:	b088      	sub	sp, #32
 800fbb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fbba:	9205      	str	r2, [sp, #20]
	x ^= (x ^ (x >> 32)) & -(int64_t)(n >> 5);
 800fbbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fbc0:	f04f 0000 	mov.w	r0, #0
 800fbc4:	f04f 0100 	mov.w	r1, #0
 800fbc8:	0018      	movs	r0, r3
 800fbca:	17d9      	asrs	r1, r3, #31
 800fbcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fbd0:	ea80 0a02 	eor.w	sl, r0, r2
 800fbd4:	ea81 0b03 	eor.w	fp, r1, r3
 800fbd8:	9b05      	ldr	r3, [sp, #20]
 800fbda:	115b      	asrs	r3, r3, #5
 800fbdc:	17da      	asrs	r2, r3, #31
 800fbde:	9300      	str	r3, [sp, #0]
 800fbe0:	9201      	str	r2, [sp, #4]
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fbe8:	4608      	mov	r0, r1
 800fbea:	f1d0 0800 	rsbs	r8, r0, #0
 800fbee:	eb63 0902 	sbc.w	r9, r3, r2
 800fbf2:	ea0a 0408 	and.w	r4, sl, r8
 800fbf6:	ea0b 0509 	and.w	r5, fp, r9
 800fbfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fbfe:	ea82 0104 	eor.w	r1, r2, r4
 800fc02:	9102      	str	r1, [sp, #8]
 800fc04:	406b      	eors	r3, r5
 800fc06:	9303      	str	r3, [sp, #12]
 800fc08:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800fc0c:	e9cd 3406 	strd	r3, r4, [sp, #24]
	return x >> (n & 31);
 800fc10:	9b05      	ldr	r3, [sp, #20]
 800fc12:	f003 011f 	and.w	r1, r3, #31
 800fc16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc1a:	f1c1 0420 	rsb	r4, r1, #32
 800fc1e:	f1b1 0020 	subs.w	r0, r1, #32
 800fc22:	fa22 f601 	lsr.w	r6, r2, r1
 800fc26:	fa03 f404 	lsl.w	r4, r3, r4
 800fc2a:	ea46 0604 	orr.w	r6, r6, r4
 800fc2e:	d402      	bmi.n	800fc36 <fpr_irsh+0x86>
 800fc30:	fa43 f000 	asr.w	r0, r3, r0
 800fc34:	4306      	orrs	r6, r0
 800fc36:	fa43 f701 	asr.w	r7, r3, r1
 800fc3a:	4632      	mov	r2, r6
 800fc3c:	463b      	mov	r3, r7
}
 800fc3e:	4610      	mov	r0, r2
 800fc40:	4619      	mov	r1, r3
 800fc42:	b008      	add	sp, #32
 800fc44:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800fc48:	4770      	bx	lr
 800fc4a:	bf00      	nop
 800fc4c:	0000      	movs	r0, r0
	...

0800fc50 <fpr_ulsh.lto_priv.0>:
 *
 * Shift count n MUST be in the 0..63 range.
 */
static inline uint64_t
fpr_ulsh(uint64_t x, int n)
{
 800fc50:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800fc54:	b088      	sub	sp, #32
 800fc56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fc5a:	9205      	str	r2, [sp, #20]
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800fc5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc60:	f04f 0000 	mov.w	r0, #0
 800fc64:	f04f 0100 	mov.w	r1, #0
 800fc68:	0011      	movs	r1, r2
 800fc6a:	2000      	movs	r0, #0
 800fc6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc70:	ea80 0a02 	eor.w	sl, r0, r2
 800fc74:	ea81 0b03 	eor.w	fp, r1, r3
 800fc78:	9b05      	ldr	r3, [sp, #20]
 800fc7a:	115b      	asrs	r3, r3, #5
 800fc7c:	17da      	asrs	r2, r3, #31
 800fc7e:	9300      	str	r3, [sp, #0]
 800fc80:	9201      	str	r2, [sp, #4]
 800fc82:	2300      	movs	r3, #0
 800fc84:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fc88:	4608      	mov	r0, r1
 800fc8a:	f1d0 0800 	rsbs	r8, r0, #0
 800fc8e:	eb63 0902 	sbc.w	r9, r3, r2
 800fc92:	ea0a 0408 	and.w	r4, sl, r8
 800fc96:	ea0b 0509 	and.w	r5, fp, r9
 800fc9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fc9e:	ea82 0104 	eor.w	r1, r2, r4
 800fca2:	9102      	str	r1, [sp, #8]
 800fca4:	406b      	eors	r3, r5
 800fca6:	9303      	str	r3, [sp, #12]
 800fca8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800fcac:	e9cd 3406 	strd	r3, r4, [sp, #24]
	return x << (n & 31);
 800fcb0:	9b05      	ldr	r3, [sp, #20]
 800fcb2:	f003 011f 	and.w	r1, r3, #31
 800fcb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fcba:	f1a1 0420 	sub.w	r4, r1, #32
 800fcbe:	f1c1 0020 	rsb	r0, r1, #32
 800fcc2:	fa03 f701 	lsl.w	r7, r3, r1
 800fcc6:	fa02 f404 	lsl.w	r4, r2, r4
 800fcca:	4327      	orrs	r7, r4
 800fccc:	fa22 f000 	lsr.w	r0, r2, r0
 800fcd0:	4307      	orrs	r7, r0
 800fcd2:	fa02 f601 	lsl.w	r6, r2, r1
 800fcd6:	4632      	mov	r2, r6
 800fcd8:	463b      	mov	r3, r7
}
 800fcda:	4610      	mov	r0, r2
 800fcdc:	4619      	mov	r1, r3
 800fcde:	b008      	add	sp, #32
 800fce0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800fce4:	4770      	bx	lr
 800fce6:	bf00      	nop
	...

0800fcf0 <fpr_of.lto_priv.0>:
#define fpr_scaled   Zf(fpr_scaled)
fpr fpr_scaled(int64_t i, int sc);

static inline fpr
fpr_of(int64_t i)
{
 800fcf0:	b500      	push	{lr}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	e9cd 0100 	strd	r0, r1, [sp]
	return fpr_scaled(i, 0);
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fcfe:	f003 facf 	bl	80132a0 <falcon_inner_fpr_scaled>
 800fd02:	4602      	mov	r2, r0
 800fd04:	460b      	mov	r3, r1
}
 800fd06:	4610      	mov	r0, r2
 800fd08:	4619      	mov	r1, r3
 800fd0a:	b003      	add	sp, #12
 800fd0c:	f85d fb04 	ldr.w	pc, [sp], #4

0800fd10 <fpr_rint.lto_priv.0>:
static const fpr fpr_mtwo63m1 = 14114281232179134464U;
static const fpr fpr_ptwo63 = 4890909195324358656;

static inline int64_t
fpr_rint(fpr x)
{
 800fd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd14:	b09f      	sub	sp, #124	; 0x7c
 800fd16:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	/*
	 * We assume that the value fits in -(2^63-1)..+(2^63-1). We can
	 * thus extract the mantissa as a 63-bit integer, then right-shift
	 * it as needed.
	 */
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800fd1a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800fd1e:	f04f 0000 	mov.w	r0, #0
 800fd22:	f04f 0100 	mov.w	r1, #0
 800fd26:	0299      	lsls	r1, r3, #10
 800fd28:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800fd2c:	0290      	lsls	r0, r2, #10
 800fd2e:	4604      	mov	r4, r0
 800fd30:	f021 4540 	bic.w	r5, r1, #3221225472	; 0xc0000000
 800fd34:	46a0      	mov	r8, r4
 800fd36:	f045 4980 	orr.w	r9, r5, #1073741824	; 0x40000000
 800fd3a:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
	e = 1085 - ((int)(x >> 52) & 0x7FF);
 800fd3e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800fd42:	f04f 0000 	mov.w	r0, #0
 800fd46:	f04f 0100 	mov.w	r1, #0
 800fd4a:	0d18      	lsrs	r0, r3, #20
 800fd4c:	2100      	movs	r1, #0
 800fd4e:	4603      	mov	r3, r0
 800fd50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd54:	f5c3 6387 	rsb	r3, r3, #1080	; 0x438
 800fd58:	3305      	adds	r3, #5
 800fd5a:	931b      	str	r3, [sp, #108]	; 0x6c
	/*
	 * If a shift of more than 63 bits is needed, then simply set m
	 * to zero. This also covers the case of an input operand equal
	 * to zero.
	 */
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 800fd5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fd5e:	3b40      	subs	r3, #64	; 0x40
 800fd60:	0fdb      	lsrs	r3, r3, #31
 800fd62:	2200      	movs	r2, #0
 800fd64:	469a      	mov	sl, r3
 800fd66:	4693      	mov	fp, r2
 800fd68:	2300      	movs	r3, #0
 800fd6a:	f1da 0600 	rsbs	r6, sl, #0
 800fd6e:	eb63 070b 	sbc.w	r7, r3, fp
 800fd72:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800fd76:	ea02 0106 	and.w	r1, r2, r6
 800fd7a:	910e      	str	r1, [sp, #56]	; 0x38
 800fd7c:	403b      	ands	r3, r7
 800fd7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd80:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 800fd84:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
	e &= 63;
 800fd88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fd8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd8e:	931b      	str	r3, [sp, #108]	; 0x6c
	 *
	 * We thus first extract a word consisting of all the dropped bit
	 * AND the lowest kept bit; then we shrink it down to three bits,
	 * the lowest being "sticky".
	 */
	d = fpr_ulsh(m, 63 - e);
 800fd90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fd92:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800fd96:	461a      	mov	r2, r3
 800fd98:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800fd9c:	f7ff ff58 	bl	800fc50 <fpr_ulsh.lto_priv.0>
 800fda0:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 800fda4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800fda6:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800fdaa:	f04f 0000 	mov.w	r0, #0
 800fdae:	f04f 0100 	mov.w	r1, #0
 800fdb2:	0018      	movs	r0, r3
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800fdbc:	4323      	orrs	r3, r4
 800fdbe:	9317      	str	r3, [sp, #92]	; 0x5c
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 800fdc0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800fdc4:	f04f 0000 	mov.w	r0, #0
 800fdc8:	f04f 0100 	mov.w	r1, #0
 800fdcc:	0f58      	lsrs	r0, r3, #29
 800fdce:	2100      	movs	r1, #0
 800fdd0:	4601      	mov	r1, r0
 800fdd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fdd4:	425a      	negs	r2, r3
 800fdd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fdd8:	4313      	orrs	r3, r2
 800fdda:	0fdb      	lsrs	r3, r3, #31
 800fddc:	430b      	orrs	r3, r1
 800fdde:	9316      	str	r3, [sp, #88]	; 0x58
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800fde0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fde2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800fde6:	f7ff fe93 	bl	800fb10 <fpr_ursh.lto_priv.0>
 800fdea:	22c8      	movs	r2, #200	; 0xc8
 800fdec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fdee:	fa22 f303 	lsr.w	r3, r2, r3
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	9300      	str	r3, [sp, #0]
 800fdf6:	9201      	str	r2, [sp, #4]
 800fdf8:	9b00      	ldr	r3, [sp, #0]
 800fdfa:	f003 0301 	and.w	r3, r3, #1
 800fdfe:	9302      	str	r3, [sp, #8]
 800fe00:	2300      	movs	r3, #0
 800fe02:	9303      	str	r3, [sp, #12]
 800fe04:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fe08:	4623      	mov	r3, r4
 800fe0a:	18c3      	adds	r3, r0, r3
 800fe0c:	9310      	str	r3, [sp, #64]	; 0x40
 800fe0e:	462b      	mov	r3, r5
 800fe10:	eb41 0303 	adc.w	r3, r1, r3
 800fe14:	9311      	str	r3, [sp, #68]	; 0x44
 800fe16:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 800fe1a:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70

	/*
	 * Apply the sign bit.
	 */
	s = (uint32_t)(x >> 63);
 800fe1e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800fe22:	f04f 0200 	mov.w	r2, #0
 800fe26:	f04f 0300 	mov.w	r3, #0
 800fe2a:	0fca      	lsrs	r2, r1, #31
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	4613      	mov	r3, r2
 800fe30:	9315      	str	r3, [sp, #84]	; 0x54
	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 800fe32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe34:	2200      	movs	r2, #0
 800fe36:	9304      	str	r3, [sp, #16]
 800fe38:	9205      	str	r2, [sp, #20]
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe40:	4602      	mov	r2, r0
 800fe42:	4252      	negs	r2, r2
 800fe44:	9206      	str	r2, [sp, #24]
 800fe46:	460a      	mov	r2, r1
 800fe48:	eb63 0302 	sbc.w	r3, r3, r2
 800fe4c:	9307      	str	r3, [sp, #28]
 800fe4e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800fe52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe56:	4604      	mov	r4, r0
 800fe58:	4054      	eors	r4, r2
 800fe5a:	9408      	str	r4, [sp, #32]
 800fe5c:	4059      	eors	r1, r3
 800fe5e:	9109      	str	r1, [sp, #36]	; 0x24
 800fe60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe62:	2200      	movs	r2, #0
 800fe64:	930a      	str	r3, [sp, #40]	; 0x28
 800fe66:	920b      	str	r2, [sp, #44]	; 0x2c
 800fe68:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 800fe6c:	4623      	mov	r3, r4
 800fe6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fe72:	4602      	mov	r2, r0
 800fe74:	189b      	adds	r3, r3, r2
 800fe76:	930c      	str	r3, [sp, #48]	; 0x30
 800fe78:	460b      	mov	r3, r1
 800fe7a:	462a      	mov	r2, r5
 800fe7c:	eb42 0303 	adc.w	r3, r2, r3
 800fe80:	930d      	str	r3, [sp, #52]	; 0x34
 800fe82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
}
 800fe86:	4610      	mov	r0, r2
 800fe88:	4619      	mov	r1, r3
 800fe8a:	b01f      	add	sp, #124	; 0x7c
 800fe8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe90 <fpr_floor>:

static inline int64_t
fpr_floor(fpr x)
{
 800fe90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe94:	b099      	sub	sp, #100	; 0x64
 800fe96:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	 * a scaling factor. Since we assume that the value fits
	 * in the -(2^63-1)..+(2^63-1) range, we can left-shift the
	 * absolute value to make it in the 2^62..2^63-1 range: we
	 * will only need a right-shift afterwards.
	 */
	e = (int)(x >> 52) & 0x7FF;
 800fe9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fe9e:	f04f 0000 	mov.w	r0, #0
 800fea2:	f04f 0100 	mov.w	r1, #0
 800fea6:	0d18      	lsrs	r0, r3, #20
 800fea8:	2100      	movs	r1, #0
 800feaa:	4603      	mov	r3, r0
 800feac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800feb0:	9317      	str	r3, [sp, #92]	; 0x5c
	t = x >> 63;
 800feb2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800feb6:	f04f 0000 	mov.w	r0, #0
 800feba:	f04f 0100 	mov.w	r1, #0
 800febe:	0fd8      	lsrs	r0, r3, #31
 800fec0:	2100      	movs	r1, #0
 800fec2:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	xi = (int64_t)(((x << 10) | ((uint64_t)1 << 62))
 800fec6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800feca:	f04f 0000 	mov.w	r0, #0
 800fece:	f04f 0100 	mov.w	r1, #0
 800fed2:	0299      	lsls	r1, r3, #10
 800fed4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800fed8:	0290      	lsls	r0, r2, #10
 800feda:	9000      	str	r0, [sp, #0]
 800fedc:	f041 4380 	orr.w	r3, r1, #1073741824	; 0x40000000
 800fee0:	9301      	str	r3, [sp, #4]
		& (((uint64_t)1 << 63) - 1));
 800fee2:	e9dd 2300 	ldrd	r2, r3, [sp]
	xi = (int64_t)(((x << 10) | ((uint64_t)1 << 62))
 800fee6:	9208      	str	r2, [sp, #32]
 800fee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800feec:	9309      	str	r3, [sp, #36]	; 0x24
 800feee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fef2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	xi = (xi ^ -(int64_t)t) + (int64_t)t;
 800fef6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fefa:	2100      	movs	r1, #0
 800fefc:	4254      	negs	r4, r2
 800fefe:	eb61 0503 	sbc.w	r5, r1, r3
 800ff02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ff06:	ea84 0102 	eor.w	r1, r4, r2
 800ff0a:	9102      	str	r1, [sp, #8]
 800ff0c:	406b      	eors	r3, r5
 800ff0e:	9303      	str	r3, [sp, #12]
 800ff10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ff14:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ff18:	4621      	mov	r1, r4
 800ff1a:	1889      	adds	r1, r1, r2
 800ff1c:	910a      	str	r1, [sp, #40]	; 0x28
 800ff1e:	4629      	mov	r1, r5
 800ff20:	eb43 0101 	adc.w	r1, r3, r1
 800ff24:	910b      	str	r1, [sp, #44]	; 0x2c
 800ff26:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800ff2a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
	cc = 1085 - e;
 800ff2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff30:	f5c3 6387 	rsb	r3, r3, #1080	; 0x438
 800ff34:	3305      	adds	r3, #5
 800ff36:	9311      	str	r3, [sp, #68]	; 0x44
	/*
	 * We perform an arithmetic right-shift on the value. This
	 * applies floor() semantics on both positive and negative values
	 * (rounding toward minus infinity).
	 */
	xi = fpr_irsh(xi, cc & 63);
 800ff38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff3e:	461a      	mov	r2, r3
 800ff40:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800ff44:	f7ff fe34 	bl	800fbb0 <fpr_irsh>
 800ff48:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	 *
	 * For an input of zero, the non-shifted xi was incorrect (we used
	 * a top implicit bit of value 1, not 0), but this does not matter
	 * since this operation will clamp it down.
	 */
	xi ^= (xi ^ -(int64_t)t) & -(int64_t)((uint32_t)(63 - cc) >> 31);
 800ff4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ff50:	2100      	movs	r1, #0
 800ff52:	4250      	negs	r0, r2
 800ff54:	9004      	str	r0, [sp, #16]
 800ff56:	eb61 0303 	sbc.w	r3, r1, r3
 800ff5a:	9305      	str	r3, [sp, #20]
 800ff5c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ff60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff64:	4604      	mov	r4, r0
 800ff66:	ea84 0a02 	eor.w	sl, r4, r2
 800ff6a:	ea81 0b03 	eor.w	fp, r1, r3
 800ff6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff70:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800ff74:	0fdb      	lsrs	r3, r3, #31
 800ff76:	2200      	movs	r2, #0
 800ff78:	9306      	str	r3, [sp, #24]
 800ff7a:	9207      	str	r2, [sp, #28]
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800ff82:	4608      	mov	r0, r1
 800ff84:	f1d0 0800 	rsbs	r8, r0, #0
 800ff88:	eb63 0902 	sbc.w	r9, r3, r2
 800ff8c:	ea0a 0608 	and.w	r6, sl, r8
 800ff90:	ea0b 0709 	and.w	r7, fp, r9
 800ff94:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ff98:	ea82 0106 	eor.w	r1, r2, r6
 800ff9c:	910c      	str	r1, [sp, #48]	; 0x30
 800ff9e:	407b      	eors	r3, r7
 800ffa0:	930d      	str	r3, [sp, #52]	; 0x34
 800ffa2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ffa6:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
	return xi;
 800ffaa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
}
 800ffae:	4610      	mov	r0, r2
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	b019      	add	sp, #100	; 0x64
 800ffb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ffc0 <fpr_trunc.lto_priv.0>:

static inline int64_t
fpr_trunc(fpr x)
{
 800ffc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffc4:	b091      	sub	sp, #68	; 0x44
 800ffc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
	 * Extract the absolute value. Since we assume that the value
	 * fits in the -(2^63-1)..+(2^63-1) range, we can left-shift
	 * the absolute value into the 2^62..2^63-1 range, and then
	 * do a right shift afterwards.
	 */
	e = (int)(x >> 52) & 0x7FF;
 800ffca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ffce:	f04f 0000 	mov.w	r0, #0
 800ffd2:	f04f 0100 	mov.w	r1, #0
 800ffd6:	0d18      	lsrs	r0, r3, #20
 800ffd8:	2100      	movs	r1, #0
 800ffda:	4603      	mov	r3, r0
 800ffdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ffe0:	930f      	str	r3, [sp, #60]	; 0x3c
	xu = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800ffe2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ffe6:	f04f 0000 	mov.w	r0, #0
 800ffea:	f04f 0100 	mov.w	r1, #0
 800ffee:	0299      	lsls	r1, r3, #10
 800fff0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800fff4:	0290      	lsls	r0, r2, #10
 800fff6:	4682      	mov	sl, r0
 800fff8:	f021 4b40 	bic.w	fp, r1, #3221225472	; 0xc0000000
 800fffc:	f8cd a000 	str.w	sl, [sp]
 8010000:	f04b 4380 	orr.w	r3, fp, #1073741824	; 0x40000000
 8010004:	9301      	str	r3, [sp, #4]
 8010006:	e9dd 2300 	ldrd	r2, r3, [sp]
 801000a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	cc = 1085 - e;
 801000e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010010:	f5c3 6387 	rsb	r3, r3, #1080	; 0x438
 8010014:	3305      	adds	r3, #5
 8010016:	930e      	str	r3, [sp, #56]	; 0x38
	xu = fpr_ursh(xu, cc & 63);
 8010018:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801001c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801001e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010022:	461a      	mov	r2, r3
 8010024:	f7ff fd74 	bl	800fb10 <fpr_ursh.lto_priv.0>
 8010028:	4602      	mov	r2, r0
 801002a:	460b      	mov	r3, r1
 801002c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	/*
	 * If the exponent is too low (cc > 63), then the shift was wrong
	 * and we must clamp the value to 0. This also covers the case
	 * of an input equal to zero.
	 */
	xu &= -(uint64_t)((uint32_t)(cc - 64) >> 31);
 8010030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010032:	3b40      	subs	r3, #64	; 0x40
 8010034:	0fdb      	lsrs	r3, r3, #31
 8010036:	2200      	movs	r2, #0
 8010038:	9302      	str	r3, [sp, #8]
 801003a:	9203      	str	r2, [sp, #12]
 801003c:	2300      	movs	r3, #0
 801003e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010042:	4608      	mov	r0, r1
 8010044:	f1d0 0800 	rsbs	r8, r0, #0
 8010048:	eb63 0902 	sbc.w	r9, r3, r2
 801004c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010050:	ea08 0102 	and.w	r1, r8, r2
 8010054:	9104      	str	r1, [sp, #16]
 8010056:	ea09 0303 	and.w	r3, r9, r3
 801005a:	9305      	str	r3, [sp, #20]
 801005c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010060:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28

	/*
	 * Apply back the sign, if the source value is negative.
	 */
	t = x >> 63;
 8010064:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010068:	f04f 0200 	mov.w	r2, #0
 801006c:	f04f 0300 	mov.w	r3, #0
 8010070:	0fca      	lsrs	r2, r1, #31
 8010072:	2300      	movs	r3, #0
 8010074:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	xu = (xu ^ -t) + t;
 8010078:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801007c:	2100      	movs	r1, #0
 801007e:	4256      	negs	r6, r2
 8010080:	eb61 0703 	sbc.w	r7, r1, r3
 8010084:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010088:	ea86 0402 	eor.w	r4, r6, r2
 801008c:	ea87 0503 	eor.w	r5, r7, r3
 8010090:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010094:	18a1      	adds	r1, r4, r2
 8010096:	9106      	str	r1, [sp, #24]
 8010098:	eb45 0303 	adc.w	r3, r5, r3
 801009c:	9307      	str	r3, [sp, #28]
 801009e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80100a2:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
	return *(int64_t *)&xu;
 80100a6:	ab0a      	add	r3, sp, #40	; 0x28
 80100a8:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80100ac:	4610      	mov	r0, r2
 80100ae:	4619      	mov	r1, r3
 80100b0:	b011      	add	sp, #68	; 0x44
 80100b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b6:	bf00      	nop
	...

080100c0 <fpr_sub.lto_priv.0>:
#define fpr_add   Zf(fpr_add)
fpr fpr_add(fpr x, fpr y);

static inline fpr
fpr_sub(fpr x, fpr y)
{
 80100c0:	b530      	push	{r4, r5, lr}
 80100c2:	b085      	sub	sp, #20
 80100c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100c8:	e9cd 2300 	strd	r2, r3, [sp]
	y ^= (uint64_t)1 << 63;
 80100cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100d0:	4614      	mov	r4, r2
 80100d2:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
 80100d6:	e9cd 4500 	strd	r4, r5, [sp]
	return fpr_add(x, y);
 80100da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100e2:	f003 f925 	bl	8013330 <falcon_inner_fpr_add>
 80100e6:	4602      	mov	r2, r0
 80100e8:	460b      	mov	r3, r1
}
 80100ea:	4610      	mov	r0, r2
 80100ec:	4619      	mov	r1, r3
 80100ee:	b005      	add	sp, #20
 80100f0:	bd30      	pop	{r4, r5, pc}
 80100f2:	bf00      	nop
	...

08010100 <fpr_neg.lto_priv.0>:

static inline fpr
fpr_neg(fpr x)
{
 8010100:	b082      	sub	sp, #8
 8010102:	e9cd 0100 	strd	r0, r1, [sp]
	x ^= (uint64_t)1 << 63;
 8010106:	e9dd 0100 	ldrd	r0, r1, [sp]
 801010a:	4602      	mov	r2, r0
 801010c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010110:	e9cd 2300 	strd	r2, r3, [sp]
	return x;
 8010114:	e9dd 2300 	ldrd	r2, r3, [sp]
}
 8010118:	4610      	mov	r0, r2
 801011a:	4619      	mov	r1, r3
 801011c:	b002      	add	sp, #8
 801011e:	4770      	bx	lr

08010120 <fpr_half.lto_priv.0>:

static inline fpr
fpr_half(fpr x)
{
 8010120:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8010124:	b084      	sub	sp, #16
 8010126:	e9cd 0100 	strd	r0, r1, [sp]
	 * To divide a value by 2, we just have to subtract 1 from its
	 * exponent, but we have to take care of zero.
	 */
	uint32_t t;

	x -= (uint64_t)1 << 52;
 801012a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801012e:	f5a1 1980 	sub.w	r9, r1, #1048576	; 0x100000
 8010132:	4680      	mov	r8, r0
 8010134:	e9cd 8900 	strd	r8, r9, [sp]
	t = (((uint32_t)(x >> 52) & 0x7FF) + 1) >> 11;
 8010138:	e9dd 8900 	ldrd	r8, r9, [sp]
 801013c:	f04f 0000 	mov.w	r0, #0
 8010140:	f04f 0100 	mov.w	r1, #0
 8010144:	ea4f 5019 	mov.w	r0, r9, lsr #20
 8010148:	2100      	movs	r1, #0
 801014a:	4601      	mov	r1, r0
 801014c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8010150:	3101      	adds	r1, #1
 8010152:	0ac9      	lsrs	r1, r1, #11
 8010154:	9103      	str	r1, [sp, #12]
	x &= (uint64_t)t - 1;
 8010156:	9903      	ldr	r1, [sp, #12]
 8010158:	2000      	movs	r0, #0
 801015a:	460c      	mov	r4, r1
 801015c:	4605      	mov	r5, r0
 801015e:	1e62      	subs	r2, r4, #1
 8010160:	f145 33ff 	adc.w	r3, r5, #4294967295
 8010164:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010168:	ea00 0602 	and.w	r6, r0, r2
 801016c:	ea01 0703 	and.w	r7, r1, r3
 8010170:	e9cd 6700 	strd	r6, r7, [sp]
	return x;
 8010174:	e9dd 2300 	ldrd	r2, r3, [sp]
}
 8010178:	4610      	mov	r0, r2
 801017a:	4619      	mov	r1, r3
 801017c:	b004      	add	sp, #16
 801017e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8010182:	4770      	bx	lr
	...

08010190 <fpr_sqr.lto_priv.0>:
#define fpr_mul   Zf(fpr_mul)
fpr fpr_mul(fpr x, fpr y);

static inline fpr
fpr_sqr(fpr x)
{
 8010190:	b500      	push	{lr}
 8010192:	b083      	sub	sp, #12
 8010194:	e9cd 0100 	strd	r0, r1, [sp]
	return fpr_mul(x, x);
 8010198:	e9dd 2300 	ldrd	r2, r3, [sp]
 801019c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101a0:	f003 f96e 	bl	8013480 <falcon_inner_fpr_mul>
 80101a4:	4602      	mov	r2, r0
 80101a6:	460b      	mov	r3, r1
}
 80101a8:	4610      	mov	r0, r2
 80101aa:	4619      	mov	r1, r3
 80101ac:	b003      	add	sp, #12
 80101ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80101b2:	bf00      	nop
	...

080101c0 <prng_get_u64>:
/*
 * Get a 64-bit random value from a PRNG.
 */
static inline uint64_t
prng_get_u64(prng *p)
{
 80101c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c4:	b09d      	sub	sp, #116	; 0x74
 80101c6:	9019      	str	r0, [sp, #100]	; 0x64
	 * If there are less than 9 bytes in the buffer, we refill it.
	 * This means that we may drop the last few bytes, but this allows
	 * for faster extraction code. Also, it means that we never leave
	 * an empty buffer.
	 */
	u = p->ptr;
 80101c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80101ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80101ce:	931b      	str	r3, [sp, #108]	; 0x6c
	if (u >= (sizeof p->buf.d) - 9) {
 80101d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80101d2:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80101d6:	d904      	bls.n	80101e2 <prng_get_u64+0x22>
		Zf(prng_refill)(p);
 80101d8:	9819      	ldr	r0, [sp, #100]	; 0x64
 80101da:	f009 fca9 	bl	8019b30 <falcon_inner_prng_refill>
		u = 0;
 80101de:	2300      	movs	r3, #0
 80101e0:	931b      	str	r3, [sp, #108]	; 0x6c
	}
	p->ptr = u + 8;
 80101e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80101e4:	f103 0208 	add.w	r2, r3, #8
 80101e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80101ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/*
	 * On systems that use little-endian encoding and allow
	 * unaligned accesses, we can simply read the data where it is.
	 */
	return (uint64_t)p->buf.d[u + 0]
 80101ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80101f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80101f2:	4413      	add	r3, r2
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	2200      	movs	r2, #0
 80101fa:	9300      	str	r3, [sp, #0]
 80101fc:	9201      	str	r2, [sp, #4]
		| ((uint64_t)p->buf.d[u + 1] << 8)
 80101fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010200:	1c5a      	adds	r2, r3, #1
 8010202:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010204:	5c9b      	ldrb	r3, [r3, r2]
 8010206:	b2db      	uxtb	r3, r3
 8010208:	2200      	movs	r2, #0
 801020a:	461c      	mov	r4, r3
 801020c:	4615      	mov	r5, r2
 801020e:	f04f 0200 	mov.w	r2, #0
 8010212:	f04f 0300 	mov.w	r3, #0
 8010216:	022b      	lsls	r3, r5, #8
 8010218:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801021c:	0222      	lsls	r2, r4, #8
 801021e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010222:	4604      	mov	r4, r0
 8010224:	ea44 0802 	orr.w	r8, r4, r2
 8010228:	ea41 0903 	orr.w	r9, r1, r3
		| ((uint64_t)p->buf.d[u + 2] << 16)
 801022c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801022e:	1c9a      	adds	r2, r3, #2
 8010230:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010232:	5c9b      	ldrb	r3, [r3, r2]
 8010234:	b2db      	uxtb	r3, r3
 8010236:	2200      	movs	r2, #0
 8010238:	469a      	mov	sl, r3
 801023a:	4693      	mov	fp, r2
 801023c:	f04f 0200 	mov.w	r2, #0
 8010240:	f04f 0300 	mov.w	r3, #0
 8010244:	ea4f 430b 	mov.w	r3, fp, lsl #16
 8010248:	ea43 431a 	orr.w	r3, r3, sl, lsr #16
 801024c:	ea4f 420a 	mov.w	r2, sl, lsl #16
 8010250:	ea48 0102 	orr.w	r1, r8, r2
 8010254:	9102      	str	r1, [sp, #8]
 8010256:	ea49 0303 	orr.w	r3, r9, r3
 801025a:	9303      	str	r3, [sp, #12]
		| ((uint64_t)p->buf.d[u + 3] << 24)
 801025c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801025e:	1cda      	adds	r2, r3, #3
 8010260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010262:	5c9b      	ldrb	r3, [r3, r2]
 8010264:	b2db      	uxtb	r3, r3
 8010266:	2200      	movs	r2, #0
 8010268:	9304      	str	r3, [sp, #16]
 801026a:	9205      	str	r2, [sp, #20]
 801026c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8010270:	460b      	mov	r3, r1
 8010272:	0a1f      	lsrs	r7, r3, #8
 8010274:	460b      	mov	r3, r1
 8010276:	061e      	lsls	r6, r3, #24
 8010278:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 801027c:	461a      	mov	r2, r3
 801027e:	4332      	orrs	r2, r6
 8010280:	9206      	str	r2, [sp, #24]
 8010282:	4623      	mov	r3, r4
 8010284:	433b      	orrs	r3, r7
 8010286:	9307      	str	r3, [sp, #28]
		| ((uint64_t)p->buf.d[u + 4] << 32)
 8010288:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801028a:	1d1a      	adds	r2, r3, #4
 801028c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801028e:	5c9b      	ldrb	r3, [r3, r2]
 8010290:	b2db      	uxtb	r3, r3
 8010292:	2200      	movs	r2, #0
 8010294:	9308      	str	r3, [sp, #32]
 8010296:	9209      	str	r2, [sp, #36]	; 0x24
 8010298:	f04f 0200 	mov.w	r2, #0
 801029c:	f04f 0300 	mov.w	r3, #0
 80102a0:	9908      	ldr	r1, [sp, #32]
 80102a2:	000b      	movs	r3, r1
 80102a4:	2200      	movs	r2, #0
 80102a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102aa:	4604      	mov	r4, r0
 80102ac:	4314      	orrs	r4, r2
 80102ae:	940a      	str	r4, [sp, #40]	; 0x28
 80102b0:	4319      	orrs	r1, r3
 80102b2:	910b      	str	r1, [sp, #44]	; 0x2c
		| ((uint64_t)p->buf.d[u + 5] << 40)
 80102b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80102b6:	1d5a      	adds	r2, r3, #5
 80102b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80102ba:	5c9b      	ldrb	r3, [r3, r2]
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	2200      	movs	r2, #0
 80102c0:	930c      	str	r3, [sp, #48]	; 0x30
 80102c2:	920d      	str	r2, [sp, #52]	; 0x34
 80102c4:	f04f 0200 	mov.w	r2, #0
 80102c8:	f04f 0300 	mov.w	r3, #0
 80102cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80102ce:	020b      	lsls	r3, r1, #8
 80102d0:	2200      	movs	r2, #0
 80102d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80102d6:	4604      	mov	r4, r0
 80102d8:	4314      	orrs	r4, r2
 80102da:	940e      	str	r4, [sp, #56]	; 0x38
 80102dc:	4319      	orrs	r1, r3
 80102de:	910f      	str	r1, [sp, #60]	; 0x3c
		| ((uint64_t)p->buf.d[u + 6] << 48)
 80102e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80102e2:	3306      	adds	r3, #6
 80102e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80102e6:	5cd3      	ldrb	r3, [r2, r3]
 80102e8:	b2db      	uxtb	r3, r3
 80102ea:	2200      	movs	r2, #0
 80102ec:	9310      	str	r3, [sp, #64]	; 0x40
 80102ee:	9211      	str	r2, [sp, #68]	; 0x44
 80102f0:	f04f 0200 	mov.w	r2, #0
 80102f4:	f04f 0300 	mov.w	r3, #0
 80102f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80102fa:	040b      	lsls	r3, r1, #16
 80102fc:	2200      	movs	r2, #0
 80102fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010302:	4604      	mov	r4, r0
 8010304:	4314      	orrs	r4, r2
 8010306:	9412      	str	r4, [sp, #72]	; 0x48
 8010308:	4319      	orrs	r1, r3
 801030a:	9113      	str	r1, [sp, #76]	; 0x4c
		| ((uint64_t)p->buf.d[u + 7] << 56);
 801030c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801030e:	3307      	adds	r3, #7
 8010310:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010312:	5cd3      	ldrb	r3, [r2, r3]
 8010314:	b2db      	uxtb	r3, r3
 8010316:	2200      	movs	r2, #0
 8010318:	9314      	str	r3, [sp, #80]	; 0x50
 801031a:	9215      	str	r2, [sp, #84]	; 0x54
 801031c:	f04f 0200 	mov.w	r2, #0
 8010320:	f04f 0300 	mov.w	r3, #0
 8010324:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010326:	060b      	lsls	r3, r1, #24
 8010328:	2200      	movs	r2, #0
 801032a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801032e:	4604      	mov	r4, r0
 8010330:	4314      	orrs	r4, r2
 8010332:	9416      	str	r4, [sp, #88]	; 0x58
 8010334:	4319      	orrs	r1, r3
 8010336:	9117      	str	r1, [sp, #92]	; 0x5c
 8010338:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
}
 801033c:	4610      	mov	r0, r2
 801033e:	4619      	mov	r1, r3
 8010340:	b01d      	add	sp, #116	; 0x74
 8010342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010346:	bf00      	nop
	...

08010350 <prng_get_u8>:
/*
 * Get an 8-bit random value from a PRNG.
 */
static inline unsigned
prng_get_u8(prng *p)
{
 8010350:	b500      	push	{lr}
 8010352:	b085      	sub	sp, #20
 8010354:	9001      	str	r0, [sp, #4]
	unsigned v;

	v = p->buf.d[p->ptr ++];
 8010356:	9b01      	ldr	r3, [sp, #4]
 8010358:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801035c:	1c59      	adds	r1, r3, #1
 801035e:	9a01      	ldr	r2, [sp, #4]
 8010360:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
 8010364:	9a01      	ldr	r2, [sp, #4]
 8010366:	5cd3      	ldrb	r3, [r2, r3]
 8010368:	9303      	str	r3, [sp, #12]
	if (p->ptr == sizeof p->buf.d) {
 801036a:	9b01      	ldr	r3, [sp, #4]
 801036c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010374:	d102      	bne.n	801037c <prng_get_u8+0x2c>
		Zf(prng_refill)(p);
 8010376:	9801      	ldr	r0, [sp, #4]
 8010378:	f009 fbda 	bl	8019b30 <falcon_inner_prng_refill>
	}
	return v;
 801037c:	9b03      	ldr	r3, [sp, #12]
}
 801037e:	4618      	mov	r0, r3
 8010380:	b005      	add	sp, #20
 8010382:	f85d fb04 	ldr.w	pc, [sp], #4
 8010386:	bf00      	nop
	...

08010390 <smallints_to_fpr>:
 * Convert an integer polynomial (with small values) into the
 * representation with complex numbers.
 */
static void
smallints_to_fpr(fpr *r, const int8_t *t, unsigned logn)
{
 8010390:	b570      	push	{r4, r5, r6, lr}
 8010392:	b086      	sub	sp, #24
 8010394:	9003      	str	r0, [sp, #12]
 8010396:	9102      	str	r1, [sp, #8]
 8010398:	9201      	str	r2, [sp, #4]
	size_t n, u;

	n = MKN(logn);
 801039a:	2201      	movs	r2, #1
 801039c:	9b01      	ldr	r3, [sp, #4]
 801039e:	fa02 f303 	lsl.w	r3, r2, r3
 80103a2:	9304      	str	r3, [sp, #16]
	for (u = 0; u < n; u ++) {
 80103a4:	2300      	movs	r3, #0
 80103a6:	9305      	str	r3, [sp, #20]
 80103a8:	e017      	b.n	80103da <smallints_to_fpr+0x4a>
		r[u] = fpr_of(t[u]);
 80103aa:	9a02      	ldr	r2, [sp, #8]
 80103ac:	9b05      	ldr	r3, [sp, #20]
 80103ae:	4413      	add	r3, r2
 80103b0:	f993 3000 	ldrsb.w	r3, [r3]
 80103b4:	b25b      	sxtb	r3, r3
 80103b6:	17da      	asrs	r2, r3, #31
 80103b8:	461c      	mov	r4, r3
 80103ba:	4615      	mov	r5, r2
 80103bc:	9b05      	ldr	r3, [sp, #20]
 80103be:	00db      	lsls	r3, r3, #3
 80103c0:	9a03      	ldr	r2, [sp, #12]
 80103c2:	18d6      	adds	r6, r2, r3
 80103c4:	4620      	mov	r0, r4
 80103c6:	4629      	mov	r1, r5
 80103c8:	f7ff fc92 	bl	800fcf0 <fpr_of.lto_priv.0>
 80103cc:	4602      	mov	r2, r0
 80103ce:	460b      	mov	r3, r1
 80103d0:	e9c6 2300 	strd	r2, r3, [r6]
	for (u = 0; u < n; u ++) {
 80103d4:	9b05      	ldr	r3, [sp, #20]
 80103d6:	3301      	adds	r3, #1
 80103d8:	9305      	str	r3, [sp, #20]
 80103da:	9a05      	ldr	r2, [sp, #20]
 80103dc:	9b04      	ldr	r3, [sp, #16]
 80103de:	429a      	cmp	r2, r3
 80103e0:	d3e3      	bcc.n	80103aa <smallints_to_fpr+0x1a>
	}
}
 80103e2:	bf00      	nop
 80103e4:	bf00      	nop
 80103e6:	b006      	add	sp, #24
 80103e8:	bd70      	pop	{r4, r5, r6, pc}
 80103ea:	bf00      	nop
 80103ec:	0000      	movs	r0, r0
	...

080103f0 <ffSampling_fft_dyntree>:
static void
ffSampling_fft_dyntree(samplerZ samp, void *samp_ctx,
	fpr *restrict t0, fpr *restrict t1,
	fpr *restrict g00, fpr *restrict g01, fpr *restrict g11,
	unsigned orig_logn, unsigned logn, fpr *restrict tmp)
{
 80103f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103f2:	b093      	sub	sp, #76	; 0x4c
 80103f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80103f6:	910a      	str	r1, [sp, #40]	; 0x28
 80103f8:	9209      	str	r2, [sp, #36]	; 0x24
 80103fa:	9308      	str	r3, [sp, #32]
	/*
	 * Deepest level: the LDL tree leaf value is just g00 (the
	 * array has length only 1 at this point); we normalize it
	 * with regards to sigma, then use it for sampling.
	 */
	if (logn == 0) {
 80103fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d147      	bne.n	8010492 <ffSampling_fft_dyntree+0xa2>
		fpr leaf;

		leaf = g00[0];
 8010402:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010408:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		leaf = fpr_mul(fpr_sqrt(leaf), fpr_inv_sigma[orig_logn]);
 801040c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010410:	f003 fbd6 	bl	8013bc0 <falcon_inner_fpr_sqrt>
 8010414:	4a8a      	ldr	r2, [pc, #552]	; (8010640 <ffSampling_fft_dyntree+0x250>)
 8010416:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010418:	00db      	lsls	r3, r3, #3
 801041a:	4413      	add	r3, r2
 801041c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010420:	f003 f82e 	bl	8013480 <falcon_inner_fpr_mul>
 8010424:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		t0[0] = fpr_of(samp(samp_ctx, t0[0], leaf));
 8010428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801042a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801042e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010432:	e9cd 2300 	strd	r2, r3, [sp]
 8010436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010438:	9307      	str	r3, [sp, #28]
 801043a:	4602      	mov	r2, r0
 801043c:	460b      	mov	r3, r1
 801043e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010440:	9907      	ldr	r1, [sp, #28]
 8010442:	4788      	blx	r1
 8010444:	4603      	mov	r3, r0
 8010446:	17da      	asrs	r2, r3, #31
 8010448:	461e      	mov	r6, r3
 801044a:	4617      	mov	r7, r2
 801044c:	4630      	mov	r0, r6
 801044e:	4639      	mov	r1, r7
 8010450:	f7ff fc4e 	bl	800fcf0 <fpr_of.lto_priv.0>
 8010454:	4602      	mov	r2, r0
 8010456:	460b      	mov	r3, r1
 8010458:	9909      	ldr	r1, [sp, #36]	; 0x24
 801045a:	e9c1 2300 	strd	r2, r3, [r1]
		t1[0] = fpr_of(samp(samp_ctx, t1[0], leaf));
 801045e:	9b08      	ldr	r3, [sp, #32]
 8010460:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010464:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010468:	e9cd 2300 	strd	r2, r3, [sp]
 801046c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801046e:	4602      	mov	r2, r0
 8010470:	460b      	mov	r3, r1
 8010472:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010474:	47b0      	blx	r6
 8010476:	4603      	mov	r3, r0
 8010478:	17da      	asrs	r2, r3, #31
 801047a:	461c      	mov	r4, r3
 801047c:	4615      	mov	r5, r2
 801047e:	4620      	mov	r0, r4
 8010480:	4629      	mov	r1, r5
 8010482:	f7ff fc35 	bl	800fcf0 <fpr_of.lto_priv.0>
 8010486:	4602      	mov	r2, r0
 8010488:	460b      	mov	r3, r1
 801048a:	9908      	ldr	r1, [sp, #32]
 801048c:	e9c1 2300 	strd	r2, r3, [r1]
		return;
 8010490:	e0d4      	b.n	801063c <ffSampling_fft_dyntree+0x24c>
	}

	n = (size_t)1 << logn;
 8010492:	2201      	movs	r2, #1
 8010494:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010496:	fa02 f303 	lsl.w	r3, r2, r3
 801049a:	9311      	str	r3, [sp, #68]	; 0x44
	hn = n >> 1;
 801049c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801049e:	085b      	lsrs	r3, r3, #1
 80104a0:	9310      	str	r3, [sp, #64]	; 0x40

	/*
	 * Decompose G into LDL. We only need d00 (identical to g00),
	 * d11, and l10; we do that in place.
	 */
	Zf(poly_LDL_fft)(g00, g01, g11, logn);
 80104a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80104a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80104a6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80104a8:	9818      	ldr	r0, [sp, #96]	; 0x60
 80104aa:	f002 fad9 	bl	8012a60 <falcon_inner_poly_LDL_fft>

	/*
	 * Split d00 and d11 and expand them into half-size quasi-cyclic
	 * Gram matrices. We also save l10 in tmp[].
	 */
	Zf(poly_split_fft)(tmp, tmp + hn, g00, logn);
 80104ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104b0:	00db      	lsls	r3, r3, #3
 80104b2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80104b4:	18d1      	adds	r1, r2, r3
 80104b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80104b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80104ba:	981d      	ldr	r0, [sp, #116]	; 0x74
 80104bc:	f002 fc10 	bl	8012ce0 <falcon_inner_poly_split_fft>
	memcpy(g00, tmp, n * sizeof *tmp);
 80104c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80104c2:	00db      	lsls	r3, r3, #3
 80104c4:	461a      	mov	r2, r3
 80104c6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80104c8:	9818      	ldr	r0, [sp, #96]	; 0x60
 80104ca:	f00c f8b5 	bl	801c638 <memcpy>
	Zf(poly_split_fft)(tmp, tmp + hn, g11, logn);
 80104ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104d0:	00db      	lsls	r3, r3, #3
 80104d2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80104d4:	18d1      	adds	r1, r2, r3
 80104d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80104d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80104da:	981d      	ldr	r0, [sp, #116]	; 0x74
 80104dc:	f002 fc00 	bl	8012ce0 <falcon_inner_poly_split_fft>
	memcpy(g11, tmp, n * sizeof *tmp);
 80104e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80104e2:	00db      	lsls	r3, r3, #3
 80104e4:	461a      	mov	r2, r3
 80104e6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80104e8:	981a      	ldr	r0, [sp, #104]	; 0x68
 80104ea:	f00c f8a5 	bl	801c638 <memcpy>
	memcpy(tmp, g01, n * sizeof *g01);
 80104ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80104f0:	00db      	lsls	r3, r3, #3
 80104f2:	461a      	mov	r2, r3
 80104f4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80104f6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80104f8:	f00c f89e 	bl	801c638 <memcpy>
	memcpy(g01, g00, hn * sizeof *g00);
 80104fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104fe:	00db      	lsls	r3, r3, #3
 8010500:	461a      	mov	r2, r3
 8010502:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010504:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010506:	f00c f897 	bl	801c638 <memcpy>
	memcpy(g01 + hn, g11, hn * sizeof *g00);
 801050a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801050c:	00db      	lsls	r3, r3, #3
 801050e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010510:	18d0      	adds	r0, r2, r3
 8010512:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010514:	00db      	lsls	r3, r3, #3
 8010516:	461a      	mov	r2, r3
 8010518:	991a      	ldr	r1, [sp, #104]	; 0x68
 801051a:	f00c f88d 	bl	801c638 <memcpy>
	/*
	 * We split t1 and use the first recursive call on the two
	 * halves, using the right sub-tree. The result is merged
	 * back into tmp + 2*n.
	 */
	z1 = tmp + n;
 801051e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010520:	00db      	lsls	r3, r3, #3
 8010522:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010524:	4413      	add	r3, r2
 8010526:	930f      	str	r3, [sp, #60]	; 0x3c
	Zf(poly_split_fft)(z1, z1 + hn, t1, logn);
 8010528:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801052a:	00db      	lsls	r3, r3, #3
 801052c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801052e:	18d1      	adds	r1, r2, r3
 8010530:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010532:	9a08      	ldr	r2, [sp, #32]
 8010534:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010536:	f002 fbd3 	bl	8012ce0 <falcon_inner_poly_split_fft>
	ffSampling_fft_dyntree(samp, samp_ctx, z1, z1 + hn,
 801053a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801053c:	00db      	lsls	r3, r3, #3
 801053e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010540:	18d5      	adds	r5, r2, r3
		g11, g11 + hn, g01 + hn, orig_logn, logn - 1, z1 + n);
 8010542:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010544:	00db      	lsls	r3, r3, #3
	ffSampling_fft_dyntree(samp, samp_ctx, z1, z1 + hn,
 8010546:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010548:	4413      	add	r3, r2
		g11, g11 + hn, g01 + hn, orig_logn, logn - 1, z1 + n);
 801054a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801054c:	00d2      	lsls	r2, r2, #3
	ffSampling_fft_dyntree(samp, samp_ctx, z1, z1 + hn,
 801054e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010550:	440a      	add	r2, r1
 8010552:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010554:	3901      	subs	r1, #1
		g11, g11 + hn, g01 + hn, orig_logn, logn - 1, z1 + n);
 8010556:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010558:	00c0      	lsls	r0, r0, #3
	ffSampling_fft_dyntree(samp, samp_ctx, z1, z1 + hn,
 801055a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801055c:	4420      	add	r0, r4
 801055e:	9005      	str	r0, [sp, #20]
 8010560:	9104      	str	r1, [sp, #16]
 8010562:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010564:	9103      	str	r1, [sp, #12]
 8010566:	9202      	str	r2, [sp, #8]
 8010568:	9301      	str	r3, [sp, #4]
 801056a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801056c:	9300      	str	r3, [sp, #0]
 801056e:	462b      	mov	r3, r5
 8010570:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010572:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010574:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010576:	f7ff ff3b 	bl	80103f0 <ffSampling_fft_dyntree>
	Zf(poly_merge_fft)(tmp + (n << 1), z1, z1 + hn, logn);
 801057a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801057c:	011b      	lsls	r3, r3, #4
 801057e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010580:	18d0      	adds	r0, r2, r3
 8010582:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010584:	00db      	lsls	r3, r3, #3
 8010586:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010588:	441a      	add	r2, r3
 801058a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801058c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801058e:	f002 fcbf 	bl	8012f10 <falcon_inner_poly_merge_fft>
	 * At that point, l10 is in tmp, t1 is unmodified, and z1 is
	 * in tmp + (n << 1). The buffer in z1 is free.
	 *
	 * In the end, z1 is written over t1, and tb0 is in t0.
	 */
	memcpy(z1, t1, n * sizeof *t1);
 8010592:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010594:	00db      	lsls	r3, r3, #3
 8010596:	461a      	mov	r2, r3
 8010598:	9908      	ldr	r1, [sp, #32]
 801059a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801059c:	f00c f84c 	bl	801c638 <memcpy>
	Zf(poly_sub)(z1, tmp + (n << 1), logn);
 80105a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80105a2:	011b      	lsls	r3, r3, #4
 80105a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80105a6:	4413      	add	r3, r2
 80105a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80105aa:	4619      	mov	r1, r3
 80105ac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80105ae:	f001 fdf7 	bl	80121a0 <falcon_inner_poly_sub>
	memcpy(t1, tmp + (n << 1), n * sizeof *tmp);
 80105b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80105b4:	011b      	lsls	r3, r3, #4
 80105b6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80105b8:	18d1      	adds	r1, r2, r3
 80105ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80105bc:	00db      	lsls	r3, r3, #3
 80105be:	461a      	mov	r2, r3
 80105c0:	9808      	ldr	r0, [sp, #32]
 80105c2:	f00c f839 	bl	801c638 <memcpy>
	Zf(poly_mul_fft)(tmp, z1, logn);
 80105c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80105c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80105ca:	981d      	ldr	r0, [sp, #116]	; 0x74
 80105cc:	f001 fe78 	bl	80122c0 <falcon_inner_poly_mul_fft>
	Zf(poly_add)(t0, tmp, logn);
 80105d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80105d2:	991d      	ldr	r1, [sp, #116]	; 0x74
 80105d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105d6:	f001 fdb3 	bl	8012140 <falcon_inner_poly_add>

	/*
	 * Second recursive invocation, on the split tb0 (currently in t0)
	 * and the left sub-tree.
	 */
	z0 = tmp;
 80105da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80105dc:	930e      	str	r3, [sp, #56]	; 0x38
	Zf(poly_split_fft)(z0, z0 + hn, t0, logn);
 80105de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105e0:	00db      	lsls	r3, r3, #3
 80105e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80105e4:	18d1      	adds	r1, r2, r3
 80105e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80105e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80105ec:	f002 fb78 	bl	8012ce0 <falcon_inner_poly_split_fft>
	ffSampling_fft_dyntree(samp, samp_ctx, z0, z0 + hn,
 80105f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105f2:	00db      	lsls	r3, r3, #3
 80105f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80105f6:	18d4      	adds	r4, r2, r3
		g00, g00 + hn, g01, orig_logn, logn - 1, z0 + n);
 80105f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105fa:	00db      	lsls	r3, r3, #3
	ffSampling_fft_dyntree(samp, samp_ctx, z0, z0 + hn,
 80105fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80105fe:	4413      	add	r3, r2
 8010600:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010602:	3a01      	subs	r2, #1
		g00, g00 + hn, g01, orig_logn, logn - 1, z0 + n);
 8010604:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010606:	00c9      	lsls	r1, r1, #3
	ffSampling_fft_dyntree(samp, samp_ctx, z0, z0 + hn,
 8010608:	980e      	ldr	r0, [sp, #56]	; 0x38
 801060a:	4401      	add	r1, r0
 801060c:	9105      	str	r1, [sp, #20]
 801060e:	9204      	str	r2, [sp, #16]
 8010610:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010612:	9203      	str	r2, [sp, #12]
 8010614:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010616:	9202      	str	r2, [sp, #8]
 8010618:	9301      	str	r3, [sp, #4]
 801061a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801061c:	9300      	str	r3, [sp, #0]
 801061e:	4623      	mov	r3, r4
 8010620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010622:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010624:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010626:	f7ff fee3 	bl	80103f0 <ffSampling_fft_dyntree>
	Zf(poly_merge_fft)(t0, z0, z0 + hn, logn);
 801062a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801062c:	00db      	lsls	r3, r3, #3
 801062e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010630:	441a      	add	r2, r3
 8010632:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010634:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010636:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010638:	f002 fc6a 	bl	8012f10 <falcon_inner_poly_merge_fft>
}
 801063c:	b013      	add	sp, #76	; 0x4c
 801063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010640:	0801f130 	.word	0x0801f130
	...

08010650 <do_sign_dyn>:
static int
do_sign_dyn(samplerZ samp, void *samp_ctx, int16_t *s2,
	const int8_t *restrict f, const int8_t *restrict g,
	const int8_t *restrict F, const int8_t *restrict G,
	const uint16_t *hm, unsigned logn, fpr *restrict tmp)
{
 8010650:	b570      	push	{r4, r5, r6, lr}
 8010652:	b0a0      	sub	sp, #128	; 0x80
 8010654:	9009      	str	r0, [sp, #36]	; 0x24
 8010656:	9108      	str	r1, [sp, #32]
 8010658:	9207      	str	r2, [sp, #28]
 801065a:	9306      	str	r3, [sp, #24]
	fpr *b00, *b01, *b10, *b11, *g00, *g01, *g11;
	fpr ni;
	uint32_t sqn, ng;
	int16_t *s1tmp, *s2tmp;

	n = MKN(logn);
 801065c:	2201      	movs	r2, #1
 801065e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010660:	fa02 f303 	lsl.w	r3, r2, r3
 8010664:	931c      	str	r3, [sp, #112]	; 0x70

	/*
	 * Lattice basis is B = [[g, -f], [G, -F]]. We convert it to FFT.
	 */
	b00 = tmp;
 8010666:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010668:	931b      	str	r3, [sp, #108]	; 0x6c
	b01 = b00 + n;
 801066a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801066c:	00db      	lsls	r3, r3, #3
 801066e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010670:	4413      	add	r3, r2
 8010672:	931a      	str	r3, [sp, #104]	; 0x68
	b10 = b01 + n;
 8010674:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010676:	00db      	lsls	r3, r3, #3
 8010678:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801067a:	4413      	add	r3, r2
 801067c:	9319      	str	r3, [sp, #100]	; 0x64
	b11 = b10 + n;
 801067e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010680:	00db      	lsls	r3, r3, #3
 8010682:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010684:	4413      	add	r3, r2
 8010686:	9318      	str	r3, [sp, #96]	; 0x60
	smallints_to_fpr(b01, f, logn);
 8010688:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801068a:	9906      	ldr	r1, [sp, #24]
 801068c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801068e:	f7ff fe7f 	bl	8010390 <smallints_to_fpr>
	smallints_to_fpr(b00, g, logn);
 8010692:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010694:	9924      	ldr	r1, [sp, #144]	; 0x90
 8010696:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010698:	f7ff fe7a 	bl	8010390 <smallints_to_fpr>
	smallints_to_fpr(b11, F, logn);
 801069c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801069e:	9925      	ldr	r1, [sp, #148]	; 0x94
 80106a0:	9818      	ldr	r0, [sp, #96]	; 0x60
 80106a2:	f7ff fe75 	bl	8010390 <smallints_to_fpr>
	smallints_to_fpr(b10, G, logn);
 80106a6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80106a8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80106aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80106ac:	f7ff fe70 	bl	8010390 <smallints_to_fpr>
	Zf(FFT)(b01, logn);
 80106b0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80106b2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80106b4:	f001 fae4 	bl	8011c80 <falcon_inner_FFT>
	Zf(FFT)(b00, logn);
 80106b8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80106ba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80106bc:	f001 fae0 	bl	8011c80 <falcon_inner_FFT>
	Zf(FFT)(b11, logn);
 80106c0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80106c2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80106c4:	f001 fadc 	bl	8011c80 <falcon_inner_FFT>
	Zf(FFT)(b10, logn);
 80106c8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80106ca:	9819      	ldr	r0, [sp, #100]	; 0x64
 80106cc:	f001 fad8 	bl	8011c80 <falcon_inner_FFT>
	Zf(poly_neg)(b01, logn);
 80106d0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80106d2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80106d4:	f001 fd94 	bl	8012200 <falcon_inner_poly_neg>
	Zf(poly_neg)(b11, logn);
 80106d8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80106da:	9818      	ldr	r0, [sp, #96]	; 0x60
 80106dc:	f001 fd90 	bl	8012200 <falcon_inner_poly_neg>
	 * since it is equal to adj(g01).
	 *
	 * We _replace_ the matrix B with the Gram matrix, but we
	 * must keep b01 and b11 for computing the target vector.
	 */
	t0 = b11 + n;
 80106e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80106e2:	00db      	lsls	r3, r3, #3
 80106e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80106e6:	4413      	add	r3, r2
 80106e8:	9317      	str	r3, [sp, #92]	; 0x5c
	t1 = t0 + n;
 80106ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80106ec:	00db      	lsls	r3, r3, #3
 80106ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80106f0:	4413      	add	r3, r2
 80106f2:	9316      	str	r3, [sp, #88]	; 0x58

	memcpy(t0, b01, n * sizeof *b01);
 80106f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80106f6:	00db      	lsls	r3, r3, #3
 80106f8:	461a      	mov	r2, r3
 80106fa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80106fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80106fe:	f00b ff9b 	bl	801c638 <memcpy>
	Zf(poly_mulselfadj_fft)(t0, logn);    // t0 <- b01*adj(b01)
 8010702:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010704:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010706:	f001 ff03 	bl	8012510 <falcon_inner_poly_mulselfadj_fft>

	memcpy(t1, b00, n * sizeof *b00);
 801070a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801070c:	00db      	lsls	r3, r3, #3
 801070e:	461a      	mov	r2, r3
 8010710:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010712:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010714:	f00b ff90 	bl	801c638 <memcpy>
	Zf(poly_muladj_fft)(t1, b10, logn);   // t1 <- b00*adj(b10)
 8010718:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801071a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801071c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801071e:	f001 fe5f 	bl	80123e0 <falcon_inner_poly_muladj_fft>
	Zf(poly_mulselfadj_fft)(b00, logn);   // b00 <- b00*adj(b00)
 8010722:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010724:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010726:	f001 fef3 	bl	8012510 <falcon_inner_poly_mulselfadj_fft>
	Zf(poly_add)(b00, t0, logn);      // b00 <- g00
 801072a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801072c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801072e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010730:	f001 fd06 	bl	8012140 <falcon_inner_poly_add>
	memcpy(t0, b01, n * sizeof *b01);
 8010734:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010736:	00db      	lsls	r3, r3, #3
 8010738:	461a      	mov	r2, r3
 801073a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801073c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801073e:	f00b ff7b 	bl	801c638 <memcpy>
	Zf(poly_muladj_fft)(b01, b11, logn);  // b01 <- b01*adj(b11)
 8010742:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010744:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010746:	981a      	ldr	r0, [sp, #104]	; 0x68
 8010748:	f001 fe4a 	bl	80123e0 <falcon_inner_poly_muladj_fft>
	Zf(poly_add)(b01, t1, logn);      // b01 <- g01
 801074c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801074e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010750:	981a      	ldr	r0, [sp, #104]	; 0x68
 8010752:	f001 fcf5 	bl	8012140 <falcon_inner_poly_add>

	Zf(poly_mulselfadj_fft)(b10, logn);   // b10 <- b10*adj(b10)
 8010756:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010758:	9819      	ldr	r0, [sp, #100]	; 0x64
 801075a:	f001 fed9 	bl	8012510 <falcon_inner_poly_mulselfadj_fft>
	memcpy(t1, b11, n * sizeof *b11);
 801075e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010760:	00db      	lsls	r3, r3, #3
 8010762:	461a      	mov	r2, r3
 8010764:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010766:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010768:	f00b ff66 	bl	801c638 <memcpy>
	Zf(poly_mulselfadj_fft)(t1, logn);    // t1 <- b11*adj(b11)
 801076c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801076e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010770:	f001 fece 	bl	8012510 <falcon_inner_poly_mulselfadj_fft>
	Zf(poly_add)(b10, t1, logn);      // b10 <- g11
 8010774:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010776:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010778:	9819      	ldr	r0, [sp, #100]	; 0x64
 801077a:	f001 fce1 	bl	8012140 <falcon_inner_poly_add>
	/*
	 * We rename variables to make things clearer. The three elements
	 * of the Gram matrix uses the first 3*n slots of tmp[], followed
	 * by b11 and b01 (in that order).
	 */
	g00 = b00;
 801077e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010780:	9315      	str	r3, [sp, #84]	; 0x54
	g01 = b01;
 8010782:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010784:	9314      	str	r3, [sp, #80]	; 0x50
	g11 = b10;
 8010786:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010788:	9313      	str	r3, [sp, #76]	; 0x4c
	b01 = t0;
 801078a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801078c:	931a      	str	r3, [sp, #104]	; 0x68
	t0 = b01 + n;
 801078e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010790:	00db      	lsls	r3, r3, #3
 8010792:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010794:	4413      	add	r3, r2
 8010796:	9317      	str	r3, [sp, #92]	; 0x5c
	t1 = t0 + n;
 8010798:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801079a:	00db      	lsls	r3, r3, #3
 801079c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801079e:	4413      	add	r3, r2
 80107a0:	9316      	str	r3, [sp, #88]	; 0x58
	 */

	/*
	 * Set the target vector to [hm, 0] (hm is the hashed message).
	 */
	for (u = 0; u < n; u ++) {
 80107a2:	2300      	movs	r3, #0
 80107a4:	931f      	str	r3, [sp, #124]	; 0x7c
 80107a6:	e017      	b.n	80107d8 <do_sign_dyn+0x188>
		t0[u] = fpr_of(hm[u]);
 80107a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80107aa:	005b      	lsls	r3, r3, #1
 80107ac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80107ae:	4413      	add	r3, r2
 80107b0:	881b      	ldrh	r3, [r3, #0]
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	2200      	movs	r2, #0
 80107b6:	461c      	mov	r4, r3
 80107b8:	4615      	mov	r5, r2
 80107ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80107bc:	00db      	lsls	r3, r3, #3
 80107be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80107c0:	18d6      	adds	r6, r2, r3
 80107c2:	4620      	mov	r0, r4
 80107c4:	4629      	mov	r1, r5
 80107c6:	f7ff fa93 	bl	800fcf0 <fpr_of.lto_priv.0>
 80107ca:	4602      	mov	r2, r0
 80107cc:	460b      	mov	r3, r1
 80107ce:	e9c6 2300 	strd	r2, r3, [r6]
	for (u = 0; u < n; u ++) {
 80107d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80107d4:	3301      	adds	r3, #1
 80107d6:	931f      	str	r3, [sp, #124]	; 0x7c
 80107d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80107da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80107dc:	429a      	cmp	r2, r3
 80107de:	d3e3      	bcc.n	80107a8 <do_sign_dyn+0x158>

	/*
	 * Apply the lattice basis to obtain the real target
	 * vector (after normalization with regards to modulus).
	 */
	Zf(FFT)(t0, logn);
 80107e0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80107e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80107e4:	f001 fa4c 	bl	8011c80 <falcon_inner_FFT>
	ni = fpr_inverse_of_q;
 80107e8:	a3b3      	add	r3, pc, #716	; (adr r3, 8010ab8 <do_sign_dyn+0x468>)
 80107ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ee:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	memcpy(t1, t0, n * sizeof *t0);
 80107f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80107f4:	00db      	lsls	r3, r3, #3
 80107f6:	461a      	mov	r2, r3
 80107f8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80107fa:	9816      	ldr	r0, [sp, #88]	; 0x58
 80107fc:	f00b ff1c 	bl	801c638 <memcpy>
	Zf(poly_mul_fft)(t1, b01, logn);
 8010800:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010802:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010804:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010806:	f001 fd5b 	bl	80122c0 <falcon_inner_poly_mul_fft>
	Zf(poly_mulconst)(t1, fpr_neg(ni), logn);
 801080a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801080e:	f7ff fc77 	bl	8010100 <fpr_neg.lto_priv.0>
 8010812:	4602      	mov	r2, r0
 8010814:	460b      	mov	r3, r1
 8010816:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010818:	9100      	str	r1, [sp, #0]
 801081a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801081c:	f001 fec8 	bl	80125b0 <falcon_inner_poly_mulconst>
	Zf(poly_mul_fft)(t0, b11, logn);
 8010820:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010822:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010824:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010826:	f001 fd4b 	bl	80122c0 <falcon_inner_poly_mul_fft>
	Zf(poly_mulconst)(t0, ni, logn);
 801082a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801082c:	9300      	str	r3, [sp, #0]
 801082e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010832:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010834:	f001 febc 	bl	80125b0 <falcon_inner_poly_mulconst>
	/*
	 * b01 and b11 can be discarded, so we move back (t0,t1).
	 * Memory layout is now:
	 *      g00 g01 g11 t0 t1
	 */
	memcpy(b11, t0, n * 2 * sizeof *t0);
 8010838:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801083a:	011b      	lsls	r3, r3, #4
 801083c:	461a      	mov	r2, r3
 801083e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8010840:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010842:	f00b fef9 	bl	801c638 <memcpy>
	t0 = g11 + n;
 8010846:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010848:	00db      	lsls	r3, r3, #3
 801084a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801084c:	4413      	add	r3, r2
 801084e:	9317      	str	r3, [sp, #92]	; 0x5c
	t1 = t0 + n;
 8010850:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010852:	00db      	lsls	r3, r3, #3
 8010854:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010856:	4413      	add	r3, r2
 8010858:	9316      	str	r3, [sp, #88]	; 0x58

	/*
	 * Apply sampling; result is written over (t0,t1).
	 */
	ffSampling_fft_dyntree(samp, samp_ctx,
		t0, t1, g00, g01, g11, logn, logn, t1 + n);
 801085a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801085c:	00db      	lsls	r3, r3, #3
	ffSampling_fft_dyntree(samp, samp_ctx,
 801085e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010860:	4413      	add	r3, r2
 8010862:	9305      	str	r3, [sp, #20]
 8010864:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010866:	9304      	str	r3, [sp, #16]
 8010868:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801086a:	9303      	str	r3, [sp, #12]
 801086c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801086e:	9302      	str	r3, [sp, #8]
 8010870:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010872:	9301      	str	r3, [sp, #4]
 8010874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010876:	9300      	str	r3, [sp, #0]
 8010878:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801087a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801087c:	9908      	ldr	r1, [sp, #32]
 801087e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010880:	f7ff fdb6 	bl	80103f0 <ffSampling_fft_dyntree>
	 *     b00 b01 b10 b11 t0 t1
	 *
	 * We did not conserve the matrix basis, so we must recompute
	 * it now.
	 */
	b00 = tmp;
 8010884:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010886:	931b      	str	r3, [sp, #108]	; 0x6c
	b01 = b00 + n;
 8010888:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801088a:	00db      	lsls	r3, r3, #3
 801088c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801088e:	4413      	add	r3, r2
 8010890:	931a      	str	r3, [sp, #104]	; 0x68
	b10 = b01 + n;
 8010892:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010894:	00db      	lsls	r3, r3, #3
 8010896:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010898:	4413      	add	r3, r2
 801089a:	9319      	str	r3, [sp, #100]	; 0x64
	b11 = b10 + n;
 801089c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801089e:	00db      	lsls	r3, r3, #3
 80108a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80108a2:	4413      	add	r3, r2
 80108a4:	9318      	str	r3, [sp, #96]	; 0x60
	memmove(b11 + n, t0, n * 2 * sizeof *t0);
 80108a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80108a8:	00db      	lsls	r3, r3, #3
 80108aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80108ac:	18d0      	adds	r0, r2, r3
 80108ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80108b0:	011b      	lsls	r3, r3, #4
 80108b2:	461a      	mov	r2, r3
 80108b4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80108b6:	f00b fe59 	bl	801c56c <memmove>
	t0 = b11 + n;
 80108ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80108bc:	00db      	lsls	r3, r3, #3
 80108be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80108c0:	4413      	add	r3, r2
 80108c2:	9317      	str	r3, [sp, #92]	; 0x5c
	t1 = t0 + n;
 80108c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80108c6:	00db      	lsls	r3, r3, #3
 80108c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80108ca:	4413      	add	r3, r2
 80108cc:	9316      	str	r3, [sp, #88]	; 0x58
	smallints_to_fpr(b01, f, logn);
 80108ce:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80108d0:	9906      	ldr	r1, [sp, #24]
 80108d2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80108d4:	f7ff fd5c 	bl	8010390 <smallints_to_fpr>
	smallints_to_fpr(b00, g, logn);
 80108d8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80108da:	9924      	ldr	r1, [sp, #144]	; 0x90
 80108dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80108de:	f7ff fd57 	bl	8010390 <smallints_to_fpr>
	smallints_to_fpr(b11, F, logn);
 80108e2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80108e4:	9925      	ldr	r1, [sp, #148]	; 0x94
 80108e6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80108e8:	f7ff fd52 	bl	8010390 <smallints_to_fpr>
	smallints_to_fpr(b10, G, logn);
 80108ec:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80108ee:	9926      	ldr	r1, [sp, #152]	; 0x98
 80108f0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80108f2:	f7ff fd4d 	bl	8010390 <smallints_to_fpr>
	Zf(FFT)(b01, logn);
 80108f6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80108f8:	981a      	ldr	r0, [sp, #104]	; 0x68
 80108fa:	f001 f9c1 	bl	8011c80 <falcon_inner_FFT>
	Zf(FFT)(b00, logn);
 80108fe:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010900:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010902:	f001 f9bd 	bl	8011c80 <falcon_inner_FFT>
	Zf(FFT)(b11, logn);
 8010906:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010908:	9818      	ldr	r0, [sp, #96]	; 0x60
 801090a:	f001 f9b9 	bl	8011c80 <falcon_inner_FFT>
	Zf(FFT)(b10, logn);
 801090e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010910:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010912:	f001 f9b5 	bl	8011c80 <falcon_inner_FFT>
	Zf(poly_neg)(b01, logn);
 8010916:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010918:	981a      	ldr	r0, [sp, #104]	; 0x68
 801091a:	f001 fc71 	bl	8012200 <falcon_inner_poly_neg>
	Zf(poly_neg)(b11, logn);
 801091e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8010920:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010922:	f001 fc6d 	bl	8012200 <falcon_inner_poly_neg>
	tx = t1 + n;
 8010926:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010928:	00db      	lsls	r3, r3, #3
 801092a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801092c:	4413      	add	r3, r2
 801092e:	930f      	str	r3, [sp, #60]	; 0x3c
	ty = tx + n;
 8010930:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010932:	00db      	lsls	r3, r3, #3
 8010934:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010936:	4413      	add	r3, r2
 8010938:	930e      	str	r3, [sp, #56]	; 0x38

	/*
	 * Get the lattice point corresponding to that tiny vector.
	 */
	memcpy(tx, t0, n * sizeof *t0);
 801093a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801093c:	00db      	lsls	r3, r3, #3
 801093e:	461a      	mov	r2, r3
 8010940:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8010942:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010944:	f00b fe78 	bl	801c638 <memcpy>
	memcpy(ty, t1, n * sizeof *t1);
 8010948:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801094a:	00db      	lsls	r3, r3, #3
 801094c:	461a      	mov	r2, r3
 801094e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010950:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010952:	f00b fe71 	bl	801c638 <memcpy>
	Zf(poly_mul_fft)(tx, b00, logn);
 8010956:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010958:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801095a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801095c:	f001 fcb0 	bl	80122c0 <falcon_inner_poly_mul_fft>
	Zf(poly_mul_fft)(ty, b10, logn);
 8010960:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010962:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010964:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010966:	f001 fcab 	bl	80122c0 <falcon_inner_poly_mul_fft>
	Zf(poly_add)(tx, ty, logn);
 801096a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801096c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801096e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010970:	f001 fbe6 	bl	8012140 <falcon_inner_poly_add>
	memcpy(ty, t0, n * sizeof *t0);
 8010974:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010976:	00db      	lsls	r3, r3, #3
 8010978:	461a      	mov	r2, r3
 801097a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801097c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801097e:	f00b fe5b 	bl	801c638 <memcpy>
	Zf(poly_mul_fft)(ty, b01, logn);
 8010982:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010984:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010986:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010988:	f001 fc9a 	bl	80122c0 <falcon_inner_poly_mul_fft>

	memcpy(t0, tx, n * sizeof *tx);
 801098c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801098e:	00db      	lsls	r3, r3, #3
 8010990:	461a      	mov	r2, r3
 8010992:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010994:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010996:	f00b fe4f 	bl	801c638 <memcpy>
	Zf(poly_mul_fft)(t1, b11, logn);
 801099a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801099c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801099e:	9816      	ldr	r0, [sp, #88]	; 0x58
 80109a0:	f001 fc8e 	bl	80122c0 <falcon_inner_poly_mul_fft>
	Zf(poly_add)(t1, ty, logn);
 80109a4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80109a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80109a8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80109aa:	f001 fbc9 	bl	8012140 <falcon_inner_poly_add>
	Zf(iFFT)(t0, logn);
 80109ae:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80109b0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80109b2:	f001 fa7d 	bl	8011eb0 <falcon_inner_iFFT>
	Zf(iFFT)(t1, logn);
 80109b6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80109b8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80109ba:	f001 fa79 	bl	8011eb0 <falcon_inner_iFFT>

	s1tmp = (int16_t *)tx;
 80109be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109c0:	930d      	str	r3, [sp, #52]	; 0x34
	sqn = 0;
 80109c2:	2300      	movs	r3, #0
 80109c4:	931e      	str	r3, [sp, #120]	; 0x78
	ng = 0;
 80109c6:	2300      	movs	r3, #0
 80109c8:	931d      	str	r3, [sp, #116]	; 0x74
	for (u = 0; u < n; u ++) {
 80109ca:	2300      	movs	r3, #0
 80109cc:	931f      	str	r3, [sp, #124]	; 0x7c
 80109ce:	e029      	b.n	8010a24 <do_sign_dyn+0x3d4>
		int32_t z;

		z = (int32_t)hm[u] - (int32_t)fpr_rint(t0[u]);
 80109d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80109d2:	005b      	lsls	r3, r3, #1
 80109d4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80109d6:	4413      	add	r3, r2
 80109d8:	881b      	ldrh	r3, [r3, #0]
 80109da:	461c      	mov	r4, r3
 80109dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80109de:	00db      	lsls	r3, r3, #3
 80109e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80109e2:	4413      	add	r3, r2
 80109e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e8:	4610      	mov	r0, r2
 80109ea:	4619      	mov	r1, r3
 80109ec:	f7ff f990 	bl	800fd10 <fpr_rint.lto_priv.0>
 80109f0:	4602      	mov	r2, r0
 80109f2:	460b      	mov	r3, r1
 80109f4:	4613      	mov	r3, r2
 80109f6:	1ae3      	subs	r3, r4, r3
 80109f8:	930b      	str	r3, [sp, #44]	; 0x2c
		sqn += (uint32_t)(z * z);
 80109fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109fc:	fb03 f303 	mul.w	r3, r3, r3
 8010a00:	461a      	mov	r2, r3
 8010a02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010a04:	4413      	add	r3, r2
 8010a06:	931e      	str	r3, [sp, #120]	; 0x78
		ng |= sqn;
 8010a08:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010a0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010a0c:	4313      	orrs	r3, r2
 8010a0e:	931d      	str	r3, [sp, #116]	; 0x74
		s1tmp[u] = (int16_t)z;
 8010a10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010a12:	005b      	lsls	r3, r3, #1
 8010a14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a16:	4413      	add	r3, r2
 8010a18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a1a:	b212      	sxth	r2, r2
 8010a1c:	801a      	strh	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 8010a1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010a20:	3301      	adds	r3, #1
 8010a22:	931f      	str	r3, [sp, #124]	; 0x7c
 8010a24:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010a26:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d3d1      	bcc.n	80109d0 <do_sign_dyn+0x380>
	}
	sqn |= -(ng >> 31);
 8010a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a2e:	17db      	asrs	r3, r3, #31
 8010a30:	461a      	mov	r2, r3
 8010a32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010a34:	4313      	orrs	r3, r2
 8010a36:	931e      	str	r3, [sp, #120]	; 0x78
	 * versions (e.g. degree 16 or below). In that case, the caller
	 * will loop, and we must not write anything into s2[] because
	 * s2[] may overlap with the hashed message hm[] and we need
	 * hm[] for the next iteration.
	 */
	s2tmp = (int16_t *)tmp;
 8010a38:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010a3a:	930c      	str	r3, [sp, #48]	; 0x30
	for (u = 0; u < n; u ++) {
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	931f      	str	r3, [sp, #124]	; 0x7c
 8010a40:	e017      	b.n	8010a72 <do_sign_dyn+0x422>
		s2tmp[u] = (int16_t)-fpr_rint(t1[u]);
 8010a42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010a44:	00db      	lsls	r3, r3, #3
 8010a46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010a48:	4413      	add	r3, r2
 8010a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4e:	4610      	mov	r0, r2
 8010a50:	4619      	mov	r1, r3
 8010a52:	f7ff f95d 	bl	800fd10 <fpr_rint.lto_priv.0>
 8010a56:	4602      	mov	r2, r0
 8010a58:	460b      	mov	r3, r1
 8010a5a:	b293      	uxth	r3, r2
 8010a5c:	425b      	negs	r3, r3
 8010a5e:	b299      	uxth	r1, r3
 8010a60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010a62:	005b      	lsls	r3, r3, #1
 8010a64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a66:	4413      	add	r3, r2
 8010a68:	b20a      	sxth	r2, r1
 8010a6a:	801a      	strh	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 8010a6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010a6e:	3301      	adds	r3, #1
 8010a70:	931f      	str	r3, [sp, #124]	; 0x7c
 8010a72:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010a74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d3e3      	bcc.n	8010a42 <do_sign_dyn+0x3f2>
	}
	if (Zf(is_short_half)(sqn, s2tmp, logn)) {
 8010a7a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010a7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a7e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8010a80:	f001 f826 	bl	8011ad0 <falcon_inner_is_short_half>
 8010a84:	4603      	mov	r3, r0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d00f      	beq.n	8010aaa <do_sign_dyn+0x45a>
		memcpy(s2, s2tmp, n * sizeof *s2);
 8010a8a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010a8c:	005b      	lsls	r3, r3, #1
 8010a8e:	461a      	mov	r2, r3
 8010a90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a92:	9807      	ldr	r0, [sp, #28]
 8010a94:	f00b fdd0 	bl	801c638 <memcpy>
		memcpy(tmp, s1tmp, n * sizeof *s1tmp);
 8010a98:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010a9a:	005b      	lsls	r3, r3, #1
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010aa0:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8010aa2:	f00b fdc9 	bl	801c638 <memcpy>
		return 1;
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	e000      	b.n	8010aac <do_sign_dyn+0x45c>
	}
	return 0;
 8010aaa:	2300      	movs	r3, #0
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	b020      	add	sp, #128	; 0x80
 8010ab0:	bd70      	pop	{r4, r5, r6, pc}
 8010ab2:	bf00      	nop
 8010ab4:	f3af 8000 	nop.w
 8010ab8:	9097a782 	.word	0x9097a782
 8010abc:	3f1554e3 	.word	0x3f1554e3

08010ac0 <falcon_inner_gaussian0_sampler>:
 * Sample an integer value along a half-gaussian distribution centered
 * on zero and standard deviation 1.8205, with a precision of 72 bits.
 */
int
Zf(gaussian0_sampler)(prng *p)
{
 8010ac0:	b500      	push	{lr}
 8010ac2:	b08f      	sub	sp, #60	; 0x3c
 8010ac4:	9001      	str	r0, [sp, #4]
	int z;

	/*
	 * Get a random 72-bit value, into three 24-bit limbs v0..v2.
	 */
	lo = prng_get_u64(p);
 8010ac6:	9801      	ldr	r0, [sp, #4]
 8010ac8:	f7ff fb7a 	bl	80101c0 <prng_get_u64>
 8010acc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	hi = prng_get_u8(p);
 8010ad0:	9801      	ldr	r0, [sp, #4]
 8010ad2:	f7ff fc3d 	bl	8010350 <prng_get_u8>
 8010ad6:	9009      	str	r0, [sp, #36]	; 0x24
	v0 = (uint32_t)lo & 0xFFFFFF;
 8010ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ada:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010ade:	9308      	str	r3, [sp, #32]
	v1 = (uint32_t)(lo >> 24) & 0xFFFFFF;
 8010ae0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010ae4:	f04f 0200 	mov.w	r2, #0
 8010ae8:	f04f 0300 	mov.w	r3, #0
 8010aec:	0e02      	lsrs	r2, r0, #24
 8010aee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8010af2:	0e0b      	lsrs	r3, r1, #24
 8010af4:	4613      	mov	r3, r2
 8010af6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010afa:	9307      	str	r3, [sp, #28]
	v2 = (uint32_t)(lo >> 48) | (hi << 16);
 8010afc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010b00:	f04f 0200 	mov.w	r2, #0
 8010b04:	f04f 0300 	mov.w	r3, #0
 8010b08:	0c0a      	lsrs	r2, r1, #16
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b0e:	041b      	lsls	r3, r3, #16
 8010b10:	4313      	orrs	r3, r2
 8010b12:	9306      	str	r3, [sp, #24]

	/*
	 * Sampled value is z, such that v0..v2 is lower than the first
	 * z elements of the table.
	 */
	z = 0;
 8010b14:	2300      	movs	r3, #0
 8010b16:	930c      	str	r3, [sp, #48]	; 0x30
	for (u = 0; u < (sizeof dist) / sizeof(dist[0]); u += 3) {
 8010b18:	2300      	movs	r3, #0
 8010b1a:	930d      	str	r3, [sp, #52]	; 0x34
 8010b1c:	e02a      	b.n	8010b74 <falcon_inner_gaussian0_sampler+0xb4>
		uint32_t w0, w1, w2, cc;

		w0 = dist[u + 2];
 8010b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b20:	3302      	adds	r3, #2
 8010b22:	4a18      	ldr	r2, [pc, #96]	; (8010b84 <falcon_inner_gaussian0_sampler+0xc4>)
 8010b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b28:	9305      	str	r3, [sp, #20]
		w1 = dist[u + 1];
 8010b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	4a15      	ldr	r2, [pc, #84]	; (8010b84 <falcon_inner_gaussian0_sampler+0xc4>)
 8010b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b34:	9304      	str	r3, [sp, #16]
		w2 = dist[u + 0];
 8010b36:	4a13      	ldr	r2, [pc, #76]	; (8010b84 <falcon_inner_gaussian0_sampler+0xc4>)
 8010b38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b3e:	9303      	str	r3, [sp, #12]
		cc = (v0 - w0) >> 31;
 8010b40:	9a08      	ldr	r2, [sp, #32]
 8010b42:	9b05      	ldr	r3, [sp, #20]
 8010b44:	1ad3      	subs	r3, r2, r3
 8010b46:	0fdb      	lsrs	r3, r3, #31
 8010b48:	9302      	str	r3, [sp, #8]
		cc = (v1 - w1 - cc) >> 31;
 8010b4a:	9a07      	ldr	r2, [sp, #28]
 8010b4c:	9b04      	ldr	r3, [sp, #16]
 8010b4e:	1ad2      	subs	r2, r2, r3
 8010b50:	9b02      	ldr	r3, [sp, #8]
 8010b52:	1ad3      	subs	r3, r2, r3
 8010b54:	0fdb      	lsrs	r3, r3, #31
 8010b56:	9302      	str	r3, [sp, #8]
		cc = (v2 - w2 - cc) >> 31;
 8010b58:	9a06      	ldr	r2, [sp, #24]
 8010b5a:	9b03      	ldr	r3, [sp, #12]
 8010b5c:	1ad2      	subs	r2, r2, r3
 8010b5e:	9b02      	ldr	r3, [sp, #8]
 8010b60:	1ad3      	subs	r3, r2, r3
 8010b62:	0fdb      	lsrs	r3, r3, #31
 8010b64:	9302      	str	r3, [sp, #8]
		z += (int)cc;
 8010b66:	9b02      	ldr	r3, [sp, #8]
 8010b68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b6a:	4413      	add	r3, r2
 8010b6c:	930c      	str	r3, [sp, #48]	; 0x30
	for (u = 0; u < (sizeof dist) / sizeof(dist[0]); u += 3) {
 8010b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b70:	3303      	adds	r3, #3
 8010b72:	930d      	str	r3, [sp, #52]	; 0x34
 8010b74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b76:	2b35      	cmp	r3, #53	; 0x35
 8010b78:	d9d1      	bls.n	8010b1e <falcon_inner_gaussian0_sampler+0x5e>
	}
	return z;
 8010b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30

}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	b00f      	add	sp, #60	; 0x3c
 8010b80:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b84:	0801f1e0 	.word	0x0801f1e0
	...

08010b90 <BerExp>:
/*
 * Sample a bit with probability exp(-x) for some x >= 0.
 */
static int
BerExp(prng *p, fpr x, fpr ccs)
{
 8010b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b94:	b091      	sub	sp, #68	; 0x44
 8010b96:	9005      	str	r0, [sp, #20]
 8010b98:	e9cd 2302 	strd	r2, r3, [sp, #8]

	/*
	 * Reduce x modulo log(2): x = s*log(2) + r, with s an integer,
	 * and 0 <= r < log(2). Since x >= 0, we can use fpr_trunc().
	 */
	s = (int)fpr_trunc(fpr_mul(x, fpr_inv_log2));
 8010b9c:	a340      	add	r3, pc, #256	; (adr r3, 8010ca0 <BerExp+0x110>)
 8010b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ba6:	f002 fc6b 	bl	8013480 <falcon_inner_fpr_mul>
 8010baa:	4602      	mov	r2, r0
 8010bac:	460b      	mov	r3, r1
 8010bae:	4610      	mov	r0, r2
 8010bb0:	4619      	mov	r1, r3
 8010bb2:	f7ff fa05 	bl	800ffc0 <fpr_trunc.lto_priv.0>
 8010bb6:	4602      	mov	r2, r0
 8010bb8:	460b      	mov	r3, r1
 8010bba:	4613      	mov	r3, r2
 8010bbc:	930e      	str	r3, [sp, #56]	; 0x38
	r = fpr_sub(x, fpr_mul(fpr_of(s), fpr_log2));
 8010bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bc0:	17da      	asrs	r2, r3, #31
 8010bc2:	9300      	str	r3, [sp, #0]
 8010bc4:	9201      	str	r2, [sp, #4]
 8010bc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010bca:	f7ff f891 	bl	800fcf0 <fpr_of.lto_priv.0>
 8010bce:	a336      	add	r3, pc, #216	; (adr r3, 8010ca8 <BerExp+0x118>)
 8010bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd4:	f002 fc54 	bl	8013480 <falcon_inner_fpr_mul>
 8010bd8:	4602      	mov	r2, r0
 8010bda:	460b      	mov	r3, r1
 8010bdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010be0:	f7ff fa6e 	bl	80100c0 <fpr_sub.lto_priv.0>
 8010be4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
	 * with probability about 0.000000000230383991, which is
	 * approximatively equal to 2^(-32). In any case, if s >= 64,
	 * then BerExp will be non-zero with probability less than
	 * 2^(-64), so we can simply saturate s at 63.
	 */
	sw = (uint32_t)s;
 8010be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bea:	930b      	str	r3, [sp, #44]	; 0x2c
	sw ^= (sw ^ 63) & -((63 - sw) >> 31);
 8010bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bee:	f083 033f 	eor.w	r3, r3, #63	; 0x3f
 8010bf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010bf4:	f1c2 023f 	rsb	r2, r2, #63	; 0x3f
 8010bf8:	17d2      	asrs	r2, r2, #31
 8010bfa:	4013      	ands	r3, r2
 8010bfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010bfe:	4053      	eors	r3, r2
 8010c00:	930b      	str	r3, [sp, #44]	; 0x2c
	s = (int)sw;
 8010c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c04:	930e      	str	r3, [sp, #56]	; 0x38
	 * The "-1" operation makes sure that the value fits on 64 bits
	 * (i.e. if r = 0, we may get 2^64, and we prefer 2^64-1 in that
	 * case). The bias is negligible since fpr_expm_p63() only computes
	 * with 51 bits of precision or so.
	 */
	z = ((fpr_expm_p63(r, ccs) << 1) - 1) >> s;
 8010c06:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8010c0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010c0e:	f003 fb7f 	bl	8014310 <falcon_inner_fpr_expm_p63>
 8010c12:	4602      	mov	r2, r0
 8010c14:	460b      	mov	r3, r1
 8010c16:	eb12 0a02 	adds.w	sl, r2, r2
 8010c1a:	eb43 0b03 	adc.w	fp, r3, r3
 8010c1e:	4652      	mov	r2, sl
 8010c20:	465b      	mov	r3, fp
 8010c22:	f112 38ff 	adds.w	r8, r2, #4294967295
 8010c26:	f143 39ff 	adc.w	r9, r3, #4294967295
 8010c2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c2c:	f1c3 0120 	rsb	r1, r3, #32
 8010c30:	f1a3 0220 	sub.w	r2, r3, #32
 8010c34:	fa28 f403 	lsr.w	r4, r8, r3
 8010c38:	fa09 f101 	lsl.w	r1, r9, r1
 8010c3c:	430c      	orrs	r4, r1
 8010c3e:	fa29 f202 	lsr.w	r2, r9, r2
 8010c42:	4314      	orrs	r4, r2
 8010c44:	fa29 f503 	lsr.w	r5, r9, r3
 8010c48:	e9cd 4508 	strd	r4, r5, [sp, #32]
	 * Sample a bit with probability exp(-x). Since x = s*log(2) + r,
	 * exp(-x) = 2^-s * exp(-r), we compare lazily exp(-x) with the
	 * PRNG output to limit its consumption, the sign of the difference
	 * yields the expected result.
	 */
	i = 64;
 8010c4c:	2340      	movs	r3, #64	; 0x40
 8010c4e:	930f      	str	r3, [sp, #60]	; 0x3c
	do {
		i -= 8;
 8010c50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c52:	3b08      	subs	r3, #8
 8010c54:	930f      	str	r3, [sp, #60]	; 0x3c
		w = prng_get_u8(p) - ((uint32_t)(z >> i) & 0xFF);
 8010c56:	9805      	ldr	r0, [sp, #20]
 8010c58:	f7ff fb7a 	bl	8010350 <prng_get_u8>
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010c62:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010c64:	f1c1 0420 	rsb	r4, r1, #32
 8010c68:	f1a1 0020 	sub.w	r0, r1, #32
 8010c6c:	fa22 f601 	lsr.w	r6, r2, r1
 8010c70:	fa03 f404 	lsl.w	r4, r3, r4
 8010c74:	4326      	orrs	r6, r4
 8010c76:	fa23 f000 	lsr.w	r0, r3, r0
 8010c7a:	4306      	orrs	r6, r0
 8010c7c:	fa23 f701 	lsr.w	r7, r3, r1
 8010c80:	4633      	mov	r3, r6
 8010c82:	b2db      	uxtb	r3, r3
 8010c84:	1aeb      	subs	r3, r5, r3
 8010c86:	9307      	str	r3, [sp, #28]
	} while (!w && i > 0);
 8010c88:	9b07      	ldr	r3, [sp, #28]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d102      	bne.n	8010c94 <BerExp+0x104>
 8010c8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	dcdd      	bgt.n	8010c50 <BerExp+0xc0>
	return (int)(w >> 31);
 8010c94:	9b07      	ldr	r3, [sp, #28]
 8010c96:	0fdb      	lsrs	r3, r3, #31
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	b011      	add	sp, #68	; 0x44
 8010c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca0:	652b82fe 	.word	0x652b82fe
 8010ca4:	3ff71547 	.word	0x3ff71547
 8010ca8:	fefa39ef 	.word	0xfefa39ef
 8010cac:	3fe62e42 	.word	0x3fe62e42

08010cb0 <falcon_inner_sampler>:
 * The value of sigma MUST lie between 1 and 2 (i.e. isigma lies between
 * 0.5 and 1); in Falcon, sigma should always be between 1.2 and 1.9.
 */
int
Zf(sampler)(void *ctx, fpr mu, fpr isigma)
{
 8010cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cb4:	b095      	sub	sp, #84	; 0x54
 8010cb6:	9005      	str	r0, [sp, #20]
 8010cb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	sampler_context *spc;
	int s;
	fpr r, dss, ccs;

	spc = ctx;
 8010cbc:	9b05      	ldr	r3, [sp, #20]
 8010cbe:	9313      	str	r3, [sp, #76]	; 0x4c

	/*
	 * Center is mu. We compute mu = s + r where s is an integer
	 * and 0 <= r < 1.
	 */
	s = (int)fpr_floor(mu);
 8010cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010cc4:	f7ff f8e4 	bl	800fe90 <fpr_floor>
 8010cc8:	4602      	mov	r2, r0
 8010cca:	460b      	mov	r3, r1
 8010ccc:	4613      	mov	r3, r2
 8010cce:	9312      	str	r3, [sp, #72]	; 0x48
	r = fpr_sub(mu, fpr_of(s));
 8010cd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010cd2:	17da      	asrs	r2, r3, #31
 8010cd4:	4698      	mov	r8, r3
 8010cd6:	4691      	mov	r9, r2
 8010cd8:	4640      	mov	r0, r8
 8010cda:	4649      	mov	r1, r9
 8010cdc:	f7ff f808 	bl	800fcf0 <fpr_of.lto_priv.0>
 8010ce0:	4602      	mov	r2, r0
 8010ce2:	460b      	mov	r3, r1
 8010ce4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ce8:	f7ff f9ea 	bl	80100c0 <fpr_sub.lto_priv.0>
 8010cec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40

	/*
	 * dss = 1/(2*sigma^2) = 0.5*(isigma^2).
	 */
	dss = fpr_half(fpr_sqr(isigma));
 8010cf0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8010cf4:	f7ff fa4c 	bl	8010190 <fpr_sqr.lto_priv.0>
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	460b      	mov	r3, r1
 8010cfc:	4610      	mov	r0, r2
 8010cfe:	4619      	mov	r1, r3
 8010d00:	f7ff fa0e 	bl	8010120 <fpr_half.lto_priv.0>
 8010d04:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38

	/*
	 * ccs = sigma_min / sigma = sigma_min * isigma.
	 */
	ccs = fpr_mul(isigma, spc->sigma_min);
 8010d08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d0a:	e9d3 23c4 	ldrd	r2, r3, [r3, #784]	; 0x310
 8010d0e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8010d12:	f002 fbb5 	bl	8013480 <falcon_inner_fpr_mul>
 8010d16:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		 *  - b = 1: z >= 1 and sampled against a Gaussian
		 *    centered on 1.
		 *  - b = 0: z <= 0 and sampled against a Gaussian
		 *    centered on 0.
		 */
		z0 = Zf(gaussian0_sampler)(&spc->p);
 8010d1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7ff fecf 	bl	8010ac0 <falcon_inner_gaussian0_sampler>
 8010d22:	900b      	str	r0, [sp, #44]	; 0x2c
		b = (int)prng_get_u8(&spc->p) & 1;
 8010d24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7ff fb12 	bl	8010350 <prng_get_u8>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	f003 0301 	and.w	r3, r3, #1
 8010d32:	930a      	str	r3, [sp, #40]	; 0x28
		z = b + ((b << 1) - 1) * z0;
 8010d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d36:	005b      	lsls	r3, r3, #1
 8010d38:	3b01      	subs	r3, #1
 8010d3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010d3c:	fb02 f303 	mul.w	r3, r2, r3
 8010d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d42:	4413      	add	r3, r2
 8010d44:	9309      	str	r3, [sp, #36]	; 0x24
		 * makes rejection more probable, but makes rejection
		 * rate sufficiently decorrelated from the Gaussian
		 * center and standard deviation that the whole sampler
		 * can be said to be constant-time.
		 */
		x = fpr_mul(fpr_sqr(fpr_sub(fpr_of(z), r)), dss);
 8010d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d48:	17da      	asrs	r2, r3, #31
 8010d4a:	461c      	mov	r4, r3
 8010d4c:	4615      	mov	r5, r2
 8010d4e:	4620      	mov	r0, r4
 8010d50:	4629      	mov	r1, r5
 8010d52:	f7fe ffcd 	bl	800fcf0 <fpr_of.lto_priv.0>
 8010d56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010d5a:	f7ff f9b1 	bl	80100c0 <fpr_sub.lto_priv.0>
 8010d5e:	4602      	mov	r2, r0
 8010d60:	460b      	mov	r3, r1
 8010d62:	4610      	mov	r0, r2
 8010d64:	4619      	mov	r1, r3
 8010d66:	f7ff fa13 	bl	8010190 <fpr_sqr.lto_priv.0>
 8010d6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010d6e:	f002 fb87 	bl	8013480 <falcon_inner_fpr_mul>
 8010d72:	e9cd 0106 	strd	r0, r1, [sp, #24]
		x = fpr_sub(x, fpr_mul(fpr_of(z0 * z0), fpr_inv_2sqrsigma0));
 8010d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d78:	fb03 f303 	mul.w	r3, r3, r3
 8010d7c:	17da      	asrs	r2, r3, #31
 8010d7e:	461e      	mov	r6, r3
 8010d80:	4617      	mov	r7, r2
 8010d82:	4630      	mov	r0, r6
 8010d84:	4639      	mov	r1, r7
 8010d86:	f7fe ffb3 	bl	800fcf0 <fpr_of.lto_priv.0>
 8010d8a:	a311      	add	r3, pc, #68	; (adr r3, 8010dd0 <falcon_inner_sampler+0x120>)
 8010d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d90:	f002 fb76 	bl	8013480 <falcon_inner_fpr_mul>
 8010d94:	4602      	mov	r2, r0
 8010d96:	460b      	mov	r3, r1
 8010d98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d9c:	f7ff f990 	bl	80100c0 <fpr_sub.lto_priv.0>
 8010da0:	e9cd 0106 	strd	r0, r1, [sp, #24]
		if (BerExp(&spc->p, x, ccs)) {
 8010da4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010da6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010daa:	e9cd 2300 	strd	r2, r3, [sp]
 8010dae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010db2:	4608      	mov	r0, r1
 8010db4:	f7ff feec 	bl	8010b90 <BerExp>
 8010db8:	4603      	mov	r3, r0
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d0ad      	beq.n	8010d1a <falcon_inner_sampler+0x6a>
			/*
			 * Rejection sampling was centered on r, but the
			 * actual center is mu = s + r.
			 */
			return s + z;
 8010dbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dc2:	4413      	add	r3, r2
		}
	}
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	b015      	add	sp, #84	; 0x54
 8010dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dcc:	f3af 8000 	nop.w
 8010dd0:	c183bbc2 	.word	0xc183bbc2
 8010dd4:	3fc34f8b 	.word	0x3fc34f8b
	...

08010de0 <falcon_inner_sign_dyn>:
void
Zf(sign_dyn)(int16_t *sig, inner_shake256_context *rng,
	const int8_t *restrict f, const int8_t *restrict g,
	const int8_t *restrict F, const int8_t *restrict G,
	const uint16_t *hm, unsigned logn, uint8_t *tmp)
{
 8010de0:	b510      	push	{r4, lr}
 8010de2:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 8010de6:	acd4      	add	r4, sp, #848	; 0x350
 8010de8:	f5a4 744b 	sub.w	r4, r4, #812	; 0x32c
 8010dec:	6020      	str	r0, [r4, #0]
 8010dee:	a8d4      	add	r0, sp, #848	; 0x350
 8010df0:	f5a0 704c 	sub.w	r0, r0, #816	; 0x330
 8010df4:	6001      	str	r1, [r0, #0]
 8010df6:	a9d4      	add	r1, sp, #848	; 0x350
 8010df8:	f5a1 714d 	sub.w	r1, r1, #820	; 0x334
 8010dfc:	600a      	str	r2, [r1, #0]
 8010dfe:	aad4      	add	r2, sp, #848	; 0x350
 8010e00:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 8010e04:	6013      	str	r3, [r2, #0]
	fpr *ftmp;

	ftmp = (fpr *)tmp;
 8010e06:	9bda      	ldr	r3, [sp, #872]	; 0x368
 8010e08:	93d3      	str	r3, [sp, #844]	; 0x34c

		/*
		 * Normal sampling. We use a fast PRNG seeded from our
		 * SHAKE context ('rng').
		 */
		spc.sigma_min = fpr_sigma_min[logn];
 8010e0a:	4a1d      	ldr	r2, [pc, #116]	; (8010e80 <falcon_inner_sign_dyn+0xa0>)
 8010e0c:	9bd9      	ldr	r3, [sp, #868]	; 0x364
 8010e0e:	00db      	lsls	r3, r3, #3
 8010e10:	4413      	add	r3, r2
 8010e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e16:	a9d4      	add	r1, sp, #848	; 0x350
 8010e18:	f5a1 714a 	sub.w	r1, r1, #808	; 0x328
 8010e1c:	e9c1 23c4 	strd	r2, r3, [r1, #784]	; 0x310
		Zf(prng_init)(&spc.p, rng);
 8010e20:	abd4      	add	r3, sp, #848	; 0x350
 8010e22:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8010e26:	aa0a      	add	r2, sp, #40	; 0x28
 8010e28:	6819      	ldr	r1, [r3, #0]
 8010e2a:	4610      	mov	r0, r2
 8010e2c:	f008 fe68 	bl	8019b00 <falcon_inner_prng_init>
		samp = Zf(sampler);
 8010e30:	4b14      	ldr	r3, [pc, #80]	; (8010e84 <falcon_inner_sign_dyn+0xa4>)
 8010e32:	93d2      	str	r3, [sp, #840]	; 0x348
		samp_ctx = &spc;
 8010e34:	ab0a      	add	r3, sp, #40	; 0x28
 8010e36:	93d1      	str	r3, [sp, #836]	; 0x344

		/*
		 * Do the actual signature.
		 */
		if (do_sign_dyn(samp, samp_ctx, sig,
 8010e38:	abd4      	add	r3, sp, #848	; 0x350
 8010e3a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010e3e:	aad4      	add	r2, sp, #848	; 0x350
 8010e40:	f5a2 724b 	sub.w	r2, r2, #812	; 0x32c
 8010e44:	99d3      	ldr	r1, [sp, #844]	; 0x34c
 8010e46:	9105      	str	r1, [sp, #20]
 8010e48:	99d9      	ldr	r1, [sp, #868]	; 0x364
 8010e4a:	9104      	str	r1, [sp, #16]
 8010e4c:	99d8      	ldr	r1, [sp, #864]	; 0x360
 8010e4e:	9103      	str	r1, [sp, #12]
 8010e50:	99d7      	ldr	r1, [sp, #860]	; 0x35c
 8010e52:	9102      	str	r1, [sp, #8]
 8010e54:	99d6      	ldr	r1, [sp, #856]	; 0x358
 8010e56:	9101      	str	r1, [sp, #4]
 8010e58:	a9d4      	add	r1, sp, #848	; 0x350
 8010e5a:	f5a1 714e 	sub.w	r1, r1, #824	; 0x338
 8010e5e:	6809      	ldr	r1, [r1, #0]
 8010e60:	9100      	str	r1, [sp, #0]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	6812      	ldr	r2, [r2, #0]
 8010e66:	99d1      	ldr	r1, [sp, #836]	; 0x344
 8010e68:	98d2      	ldr	r0, [sp, #840]	; 0x348
 8010e6a:	f7ff fbf1 	bl	8010650 <do_sign_dyn>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d100      	bne.n	8010e76 <falcon_inner_sign_dyn+0x96>
	for (;;) {
 8010e74:	e7c9      	b.n	8010e0a <falcon_inner_sign_dyn+0x2a>
			f, g, F, G, hm, logn, ftmp))
		{
			break;
		}
	}
}
 8010e76:	bf00      	nop
 8010e78:	f50d 7d54 	add.w	sp, sp, #848	; 0x350
 8010e7c:	bd10      	pop	{r4, pc}
 8010e7e:	bf00      	nop
 8010e80:	0801f188 	.word	0x0801f188
 8010e84:	08010cb1 	.word	0x08010cb1
	...

08010e90 <crypto_sign_keypair>:
	int security_strength);
int randombytes(unsigned char *x, unsigned long long xlen);

int
crypto_sign_keypair(unsigned char *pk, unsigned char *sk)
{
 8010e90:	b500      	push	{lr}
 8010e92:	b089      	sub	sp, #36	; 0x24
 8010e94:	9005      	str	r0, [sp, #20]
 8010e96:	9104      	str	r1, [sp, #16]


	/*
	 * Generate key pair.
	 */
	randombytes(seed, sizeof seed);
 8010e98:	f04f 0230 	mov.w	r2, #48	; 0x30
 8010e9c:	f04f 0300 	mov.w	r3, #0
 8010ea0:	4845      	ldr	r0, [pc, #276]	; (8010fb8 <crypto_sign_keypair+0x128>)
 8010ea2:	f00a fa25 	bl	801b2f0 <randombytes>
	inner_shake256_init(&rng);
 8010ea6:	4845      	ldr	r0, [pc, #276]	; (8010fbc <crypto_sign_keypair+0x12c>)
 8010ea8:	f009 fcea 	bl	801a880 <falcon_inner_i_shake256_init>
	inner_shake256_inject(&rng, seed, sizeof seed);
 8010eac:	2230      	movs	r2, #48	; 0x30
 8010eae:	4942      	ldr	r1, [pc, #264]	; (8010fb8 <crypto_sign_keypair+0x128>)
 8010eb0:	4842      	ldr	r0, [pc, #264]	; (8010fbc <crypto_sign_keypair+0x12c>)
 8010eb2:	f009 fcfd 	bl	801a8b0 <falcon_inner_i_shake256_inject>
	inner_shake256_flip(&rng);
 8010eb6:	4841      	ldr	r0, [pc, #260]	; (8010fbc <crypto_sign_keypair+0x12c>)
 8010eb8:	f009 fd52 	bl	801a960 <falcon_inner_i_shake256_flip>
	Zf(keygen)(&rng, f, g, F, NULL, h, 9, tmp.b);
 8010ebc:	4b40      	ldr	r3, [pc, #256]	; (8010fc0 <crypto_sign_keypair+0x130>)
 8010ebe:	9303      	str	r3, [sp, #12]
 8010ec0:	2309      	movs	r3, #9
 8010ec2:	9302      	str	r3, [sp, #8]
 8010ec4:	4b3f      	ldr	r3, [pc, #252]	; (8010fc4 <crypto_sign_keypair+0x134>)
 8010ec6:	9301      	str	r3, [sp, #4]
 8010ec8:	2300      	movs	r3, #0
 8010eca:	9300      	str	r3, [sp, #0]
 8010ecc:	4b3e      	ldr	r3, [pc, #248]	; (8010fc8 <crypto_sign_keypair+0x138>)
 8010ece:	4a3f      	ldr	r2, [pc, #252]	; (8010fcc <crypto_sign_keypair+0x13c>)
 8010ed0:	493f      	ldr	r1, [pc, #252]	; (8010fd0 <crypto_sign_keypair+0x140>)
 8010ed2:	483a      	ldr	r0, [pc, #232]	; (8010fbc <crypto_sign_keypair+0x12c>)
 8010ed4:	f008 fcc4 	bl	8019860 <falcon_inner_keygen>


	/*
	 * Encode private key.
	 */
	sk[0] = 0x50 + 9;
 8010ed8:	9b04      	ldr	r3, [sp, #16]
 8010eda:	2259      	movs	r2, #89	; 0x59
 8010edc:	701a      	strb	r2, [r3, #0]
	u = 1;
 8010ede:	2301      	movs	r3, #1
 8010ee0:	9307      	str	r3, [sp, #28]
	v = Zf(trim_i8_encode)(sk + u, CRYPTO_SECRETKEYBYTES - u,
 8010ee2:	9a04      	ldr	r2, [sp, #16]
 8010ee4:	9b07      	ldr	r3, [sp, #28]
 8010ee6:	18d0      	adds	r0, r2, r3
 8010ee8:	9b07      	ldr	r3, [sp, #28]
 8010eea:	f5c3 61a0 	rsb	r1, r3, #1280	; 0x500
 8010eee:	3101      	adds	r1, #1
		f, 9, Zf(max_fg_bits)[9]);
 8010ef0:	4b38      	ldr	r3, [pc, #224]	; (8010fd4 <crypto_sign_keypair+0x144>)
 8010ef2:	7a5b      	ldrb	r3, [r3, #9]
	v = Zf(trim_i8_encode)(sk + u, CRYPTO_SECRETKEYBYTES - u,
 8010ef4:	9300      	str	r3, [sp, #0]
 8010ef6:	2309      	movs	r3, #9
 8010ef8:	4a35      	ldr	r2, [pc, #212]	; (8010fd0 <crypto_sign_keypair+0x140>)
 8010efa:	f000 fb21 	bl	8011540 <falcon_inner_trim_i8_encode>
 8010efe:	9006      	str	r0, [sp, #24]
	if (v == 0) {
 8010f00:	9b06      	ldr	r3, [sp, #24]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d102      	bne.n	8010f0c <crypto_sign_keypair+0x7c>
		return -1;
 8010f06:	f04f 33ff 	mov.w	r3, #4294967295
 8010f0a:	e051      	b.n	8010fb0 <crypto_sign_keypair+0x120>
	}
	u += v;
 8010f0c:	9a07      	ldr	r2, [sp, #28]
 8010f0e:	9b06      	ldr	r3, [sp, #24]
 8010f10:	4413      	add	r3, r2
 8010f12:	9307      	str	r3, [sp, #28]
	v = Zf(trim_i8_encode)(sk + u, CRYPTO_SECRETKEYBYTES - u,
 8010f14:	9a04      	ldr	r2, [sp, #16]
 8010f16:	9b07      	ldr	r3, [sp, #28]
 8010f18:	18d0      	adds	r0, r2, r3
 8010f1a:	9b07      	ldr	r3, [sp, #28]
 8010f1c:	f5c3 61a0 	rsb	r1, r3, #1280	; 0x500
 8010f20:	3101      	adds	r1, #1
		g, 9, Zf(max_fg_bits)[9]);
 8010f22:	4b2c      	ldr	r3, [pc, #176]	; (8010fd4 <crypto_sign_keypair+0x144>)
 8010f24:	7a5b      	ldrb	r3, [r3, #9]
	v = Zf(trim_i8_encode)(sk + u, CRYPTO_SECRETKEYBYTES - u,
 8010f26:	9300      	str	r3, [sp, #0]
 8010f28:	2309      	movs	r3, #9
 8010f2a:	4a28      	ldr	r2, [pc, #160]	; (8010fcc <crypto_sign_keypair+0x13c>)
 8010f2c:	f000 fb08 	bl	8011540 <falcon_inner_trim_i8_encode>
 8010f30:	9006      	str	r0, [sp, #24]
	if (v == 0) {
 8010f32:	9b06      	ldr	r3, [sp, #24]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d102      	bne.n	8010f3e <crypto_sign_keypair+0xae>
		return -1;
 8010f38:	f04f 33ff 	mov.w	r3, #4294967295
 8010f3c:	e038      	b.n	8010fb0 <crypto_sign_keypair+0x120>
	}
	u += v;
 8010f3e:	9a07      	ldr	r2, [sp, #28]
 8010f40:	9b06      	ldr	r3, [sp, #24]
 8010f42:	4413      	add	r3, r2
 8010f44:	9307      	str	r3, [sp, #28]
	v = Zf(trim_i8_encode)(sk + u, CRYPTO_SECRETKEYBYTES - u,
 8010f46:	9a04      	ldr	r2, [sp, #16]
 8010f48:	9b07      	ldr	r3, [sp, #28]
 8010f4a:	18d0      	adds	r0, r2, r3
 8010f4c:	9b07      	ldr	r3, [sp, #28]
 8010f4e:	f5c3 61a0 	rsb	r1, r3, #1280	; 0x500
 8010f52:	3101      	adds	r1, #1
		F, 9, Zf(max_FG_bits)[9]);
 8010f54:	4b20      	ldr	r3, [pc, #128]	; (8010fd8 <crypto_sign_keypair+0x148>)
 8010f56:	7a5b      	ldrb	r3, [r3, #9]
	v = Zf(trim_i8_encode)(sk + u, CRYPTO_SECRETKEYBYTES - u,
 8010f58:	9300      	str	r3, [sp, #0]
 8010f5a:	2309      	movs	r3, #9
 8010f5c:	4a1a      	ldr	r2, [pc, #104]	; (8010fc8 <crypto_sign_keypair+0x138>)
 8010f5e:	f000 faef 	bl	8011540 <falcon_inner_trim_i8_encode>
 8010f62:	9006      	str	r0, [sp, #24]
	if (v == 0) {
 8010f64:	9b06      	ldr	r3, [sp, #24]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d102      	bne.n	8010f70 <crypto_sign_keypair+0xe0>
		return -1;
 8010f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f6e:	e01f      	b.n	8010fb0 <crypto_sign_keypair+0x120>
	}
	u += v;
 8010f70:	9a07      	ldr	r2, [sp, #28]
 8010f72:	9b06      	ldr	r3, [sp, #24]
 8010f74:	4413      	add	r3, r2
 8010f76:	9307      	str	r3, [sp, #28]
	if (u != CRYPTO_SECRETKEYBYTES) {
 8010f78:	9b07      	ldr	r3, [sp, #28]
 8010f7a:	f240 5201 	movw	r2, #1281	; 0x501
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	d002      	beq.n	8010f88 <crypto_sign_keypair+0xf8>
		return -1;
 8010f82:	f04f 33ff 	mov.w	r3, #4294967295
 8010f86:	e013      	b.n	8010fb0 <crypto_sign_keypair+0x120>
	}

	/*
	 * Encode public key.
	 */
	pk[0] = 0x00 + 9;
 8010f88:	9b05      	ldr	r3, [sp, #20]
 8010f8a:	2209      	movs	r2, #9
 8010f8c:	701a      	strb	r2, [r3, #0]
	v = Zf(modq_encode)(pk + 1, CRYPTO_PUBLICKEYBYTES - 1, h, 9);
 8010f8e:	9b05      	ldr	r3, [sp, #20]
 8010f90:	1c58      	adds	r0, r3, #1
 8010f92:	2309      	movs	r3, #9
 8010f94:	4a0b      	ldr	r2, [pc, #44]	; (8010fc4 <crypto_sign_keypair+0x134>)
 8010f96:	f44f 7160 	mov.w	r1, #896	; 0x380
 8010f9a:	f000 fa01 	bl	80113a0 <falcon_inner_modq_encode>
 8010f9e:	9006      	str	r0, [sp, #24]
	if (v != CRYPTO_PUBLICKEYBYTES - 1) {
 8010fa0:	9b06      	ldr	r3, [sp, #24]
 8010fa2:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8010fa6:	d002      	beq.n	8010fae <crypto_sign_keypair+0x11e>
		return -1;
 8010fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8010fac:	e000      	b.n	8010fb0 <crypto_sign_keypair+0x120>
	}

	return 0;
 8010fae:	2300      	movs	r3, #0
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	b009      	add	sp, #36	; 0x24
 8010fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8010fb8:	20009c20 	.word	0x20009c20
 8010fbc:	20009c50 	.word	0x20009c50
 8010fc0:	2000a720 	.word	0x2000a720
 8010fc4:	2000a320 	.word	0x2000a320
 8010fc8:	2000a120 	.word	0x2000a120
 8010fcc:	20009f20 	.word	0x20009f20
 8010fd0:	20009d20 	.word	0x20009d20
 8010fd4:	0801f2b8 	.word	0x0801f2b8
 8010fd8:	0801f2c4 	.word	0x0801f2c4
 8010fdc:	00000000 	.word	0x00000000

08010fe0 <crypto_sign>:

int
crypto_sign(unsigned char *sm, unsigned long long *smlen,
	const unsigned char *m, unsigned long long mlen,
	const unsigned char *sk)
{
 8010fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe4:	b08f      	sub	sp, #60	; 0x3c
 8010fe6:	9009      	str	r0, [sp, #36]	; 0x24
 8010fe8:	9108      	str	r1, [sp, #32]
 8010fea:	9207      	str	r2, [sp, #28]
	size_t u, v, sig_len;

	/*
	 * Decode the private key.
	 */
	if (sk[0] != 0x50 + 9) {
 8010fec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	2b59      	cmp	r3, #89	; 0x59
 8010ff2:	d002      	beq.n	8010ffa <crypto_sign+0x1a>
		return -1;
 8010ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ff8:	e10b      	b.n	8011212 <crypto_sign+0x232>
	}
	u = 1;
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	930d      	str	r3, [sp, #52]	; 0x34
	v = Zf(trim_i8_decode)(f, 9, Zf(max_fg_bits)[9],
 8010ffe:	4b87      	ldr	r3, [pc, #540]	; (801121c <crypto_sign+0x23c>)
 8011000:	7a5b      	ldrb	r3, [r3, #9]
 8011002:	4619      	mov	r1, r3
		sk + u, CRYPTO_SECRETKEYBYTES - u);
 8011004:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011008:	441a      	add	r2, r3
	v = Zf(trim_i8_decode)(f, 9, Zf(max_fg_bits)[9],
 801100a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801100c:	f5c3 63a0 	rsb	r3, r3, #1280	; 0x500
 8011010:	3301      	adds	r3, #1
 8011012:	9300      	str	r3, [sp, #0]
 8011014:	4613      	mov	r3, r2
 8011016:	460a      	mov	r2, r1
 8011018:	2109      	movs	r1, #9
 801101a:	4881      	ldr	r0, [pc, #516]	; (8011220 <crypto_sign+0x240>)
 801101c:	f000 fb20 	bl	8011660 <falcon_inner_trim_i8_decode>
 8011020:	900c      	str	r0, [sp, #48]	; 0x30
	if (v == 0) {
 8011022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011024:	2b00      	cmp	r3, #0
 8011026:	d102      	bne.n	801102e <crypto_sign+0x4e>
		return -1;
 8011028:	f04f 33ff 	mov.w	r3, #4294967295
 801102c:	e0f1      	b.n	8011212 <crypto_sign+0x232>
	}
	u += v;
 801102e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011032:	4413      	add	r3, r2
 8011034:	930d      	str	r3, [sp, #52]	; 0x34
	v = Zf(trim_i8_decode)(g, 9, Zf(max_fg_bits)[9],
 8011036:	4b79      	ldr	r3, [pc, #484]	; (801121c <crypto_sign+0x23c>)
 8011038:	7a5b      	ldrb	r3, [r3, #9]
 801103a:	4619      	mov	r1, r3
		sk + u, CRYPTO_SECRETKEYBYTES - u);
 801103c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801103e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011040:	441a      	add	r2, r3
	v = Zf(trim_i8_decode)(g, 9, Zf(max_fg_bits)[9],
 8011042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011044:	f5c3 63a0 	rsb	r3, r3, #1280	; 0x500
 8011048:	3301      	adds	r3, #1
 801104a:	9300      	str	r3, [sp, #0]
 801104c:	4613      	mov	r3, r2
 801104e:	460a      	mov	r2, r1
 8011050:	2109      	movs	r1, #9
 8011052:	4874      	ldr	r0, [pc, #464]	; (8011224 <crypto_sign+0x244>)
 8011054:	f000 fb04 	bl	8011660 <falcon_inner_trim_i8_decode>
 8011058:	900c      	str	r0, [sp, #48]	; 0x30
	if (v == 0) {
 801105a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801105c:	2b00      	cmp	r3, #0
 801105e:	d102      	bne.n	8011066 <crypto_sign+0x86>
		return -1;
 8011060:	f04f 33ff 	mov.w	r3, #4294967295
 8011064:	e0d5      	b.n	8011212 <crypto_sign+0x232>
	}
	u += v;
 8011066:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801106a:	4413      	add	r3, r2
 801106c:	930d      	str	r3, [sp, #52]	; 0x34
	v = Zf(trim_i8_decode)(F, 9, Zf(max_FG_bits)[9],
 801106e:	4b6e      	ldr	r3, [pc, #440]	; (8011228 <crypto_sign+0x248>)
 8011070:	7a5b      	ldrb	r3, [r3, #9]
 8011072:	4619      	mov	r1, r3
		sk + u, CRYPTO_SECRETKEYBYTES - u);
 8011074:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011078:	441a      	add	r2, r3
	v = Zf(trim_i8_decode)(F, 9, Zf(max_FG_bits)[9],
 801107a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801107c:	f5c3 63a0 	rsb	r3, r3, #1280	; 0x500
 8011080:	3301      	adds	r3, #1
 8011082:	9300      	str	r3, [sp, #0]
 8011084:	4613      	mov	r3, r2
 8011086:	460a      	mov	r2, r1
 8011088:	2109      	movs	r1, #9
 801108a:	4868      	ldr	r0, [pc, #416]	; (801122c <crypto_sign+0x24c>)
 801108c:	f000 fae8 	bl	8011660 <falcon_inner_trim_i8_decode>
 8011090:	900c      	str	r0, [sp, #48]	; 0x30
	if (v == 0) {
 8011092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011094:	2b00      	cmp	r3, #0
 8011096:	d102      	bne.n	801109e <crypto_sign+0xbe>
		return -1;
 8011098:	f04f 33ff 	mov.w	r3, #4294967295
 801109c:	e0b9      	b.n	8011212 <crypto_sign+0x232>
	}
	u += v;
 801109e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110a2:	4413      	add	r3, r2
 80110a4:	930d      	str	r3, [sp, #52]	; 0x34
	if (u != CRYPTO_SECRETKEYBYTES) {
 80110a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110a8:	f240 5201 	movw	r2, #1281	; 0x501
 80110ac:	4293      	cmp	r3, r2
 80110ae:	d002      	beq.n	80110b6 <crypto_sign+0xd6>
		return -1;
 80110b0:	f04f 33ff 	mov.w	r3, #4294967295
 80110b4:	e0ad      	b.n	8011212 <crypto_sign+0x232>
	}
	if (!Zf(complete_private)(G, f, g, F, 9, tmp.b)) {
 80110b6:	4b5e      	ldr	r3, [pc, #376]	; (8011230 <crypto_sign+0x250>)
 80110b8:	9301      	str	r3, [sp, #4]
 80110ba:	2309      	movs	r3, #9
 80110bc:	9300      	str	r3, [sp, #0]
 80110be:	4b5b      	ldr	r3, [pc, #364]	; (801122c <crypto_sign+0x24c>)
 80110c0:	4a58      	ldr	r2, [pc, #352]	; (8011224 <crypto_sign+0x244>)
 80110c2:	4957      	ldr	r1, [pc, #348]	; (8011220 <crypto_sign+0x240>)
 80110c4:	485b      	ldr	r0, [pc, #364]	; (8011234 <crypto_sign+0x254>)
 80110c6:	f00a f84b 	bl	801b160 <falcon_inner_complete_private>
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d102      	bne.n	80110d6 <crypto_sign+0xf6>
		return -1;
 80110d0:	f04f 33ff 	mov.w	r3, #4294967295
 80110d4:	e09d      	b.n	8011212 <crypto_sign+0x232>
	}

	/*
	 * Create a random nonce (40 bytes).
	 */
	randombytes(nonce, sizeof nonce);
 80110d6:	f04f 0228 	mov.w	r2, #40	; 0x28
 80110da:	f04f 0300 	mov.w	r3, #0
 80110de:	4856      	ldr	r0, [pc, #344]	; (8011238 <crypto_sign+0x258>)
 80110e0:	f00a f906 	bl	801b2f0 <randombytes>

	/*
	 * Hash message nonce + message into a vector.
	 */
	inner_shake256_init(&sc);
 80110e4:	4855      	ldr	r0, [pc, #340]	; (801123c <crypto_sign+0x25c>)
 80110e6:	f009 fbcb 	bl	801a880 <falcon_inner_i_shake256_init>
	inner_shake256_inject(&sc, nonce, sizeof nonce);
 80110ea:	2228      	movs	r2, #40	; 0x28
 80110ec:	4952      	ldr	r1, [pc, #328]	; (8011238 <crypto_sign+0x258>)
 80110ee:	4853      	ldr	r0, [pc, #332]	; (801123c <crypto_sign+0x25c>)
 80110f0:	f009 fbde 	bl	801a8b0 <falcon_inner_i_shake256_inject>
	inner_shake256_inject(&sc, m, mlen);
 80110f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80110f6:	461a      	mov	r2, r3
 80110f8:	9907      	ldr	r1, [sp, #28]
 80110fa:	4850      	ldr	r0, [pc, #320]	; (801123c <crypto_sign+0x25c>)
 80110fc:	f009 fbd8 	bl	801a8b0 <falcon_inner_i_shake256_inject>
	inner_shake256_flip(&sc);
 8011100:	484e      	ldr	r0, [pc, #312]	; (801123c <crypto_sign+0x25c>)
 8011102:	f009 fc2d 	bl	801a960 <falcon_inner_i_shake256_flip>
	Zf(hash_to_point_vartime)(&sc, r.hm, 9);
 8011106:	2209      	movs	r2, #9
 8011108:	494d      	ldr	r1, [pc, #308]	; (8011240 <crypto_sign+0x260>)
 801110a:	484c      	ldr	r0, [pc, #304]	; (801123c <crypto_sign+0x25c>)
 801110c:	f000 fc58 	bl	80119c0 <falcon_inner_hash_to_point_vartime>

	/*
	 * Initialize a RNG.
	 */
	randombytes(seed, sizeof seed);
 8011110:	f04f 0230 	mov.w	r2, #48	; 0x30
 8011114:	f04f 0300 	mov.w	r3, #0
 8011118:	484a      	ldr	r0, [pc, #296]	; (8011244 <crypto_sign+0x264>)
 801111a:	f00a f8e9 	bl	801b2f0 <randombytes>
	inner_shake256_init(&sc);
 801111e:	4847      	ldr	r0, [pc, #284]	; (801123c <crypto_sign+0x25c>)
 8011120:	f009 fbae 	bl	801a880 <falcon_inner_i_shake256_init>
	inner_shake256_inject(&sc, seed, sizeof seed);
 8011124:	2230      	movs	r2, #48	; 0x30
 8011126:	4947      	ldr	r1, [pc, #284]	; (8011244 <crypto_sign+0x264>)
 8011128:	4844      	ldr	r0, [pc, #272]	; (801123c <crypto_sign+0x25c>)
 801112a:	f009 fbc1 	bl	801a8b0 <falcon_inner_i_shake256_inject>
	inner_shake256_flip(&sc);
 801112e:	4843      	ldr	r0, [pc, #268]	; (801123c <crypto_sign+0x25c>)
 8011130:	f009 fc16 	bl	801a960 <falcon_inner_i_shake256_flip>


	/*
	 * Compute the signature.
	 */
	Zf(sign_dyn)(r.sig, &sc, f, g, F, G, r.hm, 9, tmp.b);
 8011134:	4b3e      	ldr	r3, [pc, #248]	; (8011230 <crypto_sign+0x250>)
 8011136:	9304      	str	r3, [sp, #16]
 8011138:	2309      	movs	r3, #9
 801113a:	9303      	str	r3, [sp, #12]
 801113c:	4b40      	ldr	r3, [pc, #256]	; (8011240 <crypto_sign+0x260>)
 801113e:	9302      	str	r3, [sp, #8]
 8011140:	4b3c      	ldr	r3, [pc, #240]	; (8011234 <crypto_sign+0x254>)
 8011142:	9301      	str	r3, [sp, #4]
 8011144:	4b39      	ldr	r3, [pc, #228]	; (801122c <crypto_sign+0x24c>)
 8011146:	9300      	str	r3, [sp, #0]
 8011148:	4b36      	ldr	r3, [pc, #216]	; (8011224 <crypto_sign+0x244>)
 801114a:	4a35      	ldr	r2, [pc, #212]	; (8011220 <crypto_sign+0x240>)
 801114c:	493b      	ldr	r1, [pc, #236]	; (801123c <crypto_sign+0x25c>)
 801114e:	483c      	ldr	r0, [pc, #240]	; (8011240 <crypto_sign+0x260>)
 8011150:	f7ff fe46 	bl	8010de0 <falcon_inner_sign_dyn>
	 *   signature length     2 bytes, big-endian
	 *   nonce                40 bytes
	 *   message              mlen bytes
	 *   signature            slen bytes
	 */
	esig[0] = 0x20 + 9;
 8011154:	4b3c      	ldr	r3, [pc, #240]	; (8011248 <crypto_sign+0x268>)
 8011156:	2229      	movs	r2, #41	; 0x29
 8011158:	701a      	strb	r2, [r3, #0]
	sig_len = Zf(comp_encode)(esig + 1, (sizeof esig) - 1, r.sig, 9);
 801115a:	483c      	ldr	r0, [pc, #240]	; (801124c <crypto_sign+0x26c>)
 801115c:	2309      	movs	r3, #9
 801115e:	4a38      	ldr	r2, [pc, #224]	; (8011240 <crypto_sign+0x260>)
 8011160:	f240 2187 	movw	r1, #647	; 0x287
 8011164:	f000 faf4 	bl	8011750 <falcon_inner_comp_encode>
 8011168:	900b      	str	r0, [sp, #44]	; 0x2c
	if (sig_len == 0) {
 801116a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801116c:	2b00      	cmp	r3, #0
 801116e:	d102      	bne.n	8011176 <crypto_sign+0x196>
		return -1;
 8011170:	f04f 33ff 	mov.w	r3, #4294967295
 8011174:	e04d      	b.n	8011212 <crypto_sign+0x232>
	}
	sig_len ++;
 8011176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011178:	3301      	adds	r3, #1
 801117a:	930b      	str	r3, [sp, #44]	; 0x2c
	memmove(sm + 2 + sizeof nonce, m, mlen);
 801117c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801117e:	332a      	adds	r3, #42	; 0x2a
 8011180:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011182:	9907      	ldr	r1, [sp, #28]
 8011184:	4618      	mov	r0, r3
 8011186:	f00b f9f1 	bl	801c56c <memmove>
	sm[0] = (unsigned char)(sig_len >> 8);
 801118a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801118c:	0a1b      	lsrs	r3, r3, #8
 801118e:	b2da      	uxtb	r2, r3
 8011190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011192:	701a      	strb	r2, [r3, #0]
	sm[1] = (unsigned char)sig_len;
 8011194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011196:	3301      	adds	r3, #1
 8011198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801119a:	b2d2      	uxtb	r2, r2
 801119c:	701a      	strb	r2, [r3, #0]
	memcpy(sm + 2, nonce, sizeof nonce);
 801119e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111a0:	3302      	adds	r3, #2
 80111a2:	4a25      	ldr	r2, [pc, #148]	; (8011238 <crypto_sign+0x258>)
 80111a4:	4694      	mov	ip, r2
 80111a6:	4699      	mov	r9, r3
 80111a8:	f10c 0320 	add.w	r3, ip, #32
 80111ac:	9306      	str	r3, [sp, #24]
 80111ae:	46ce      	mov	lr, r9
 80111b0:	46e0      	mov	r8, ip
 80111b2:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80111b6:	f8ce 0000 	str.w	r0, [lr]
 80111ba:	f8ce 1004 	str.w	r1, [lr, #4]
 80111be:	f8ce 2008 	str.w	r2, [lr, #8]
 80111c2:	f8ce 300c 	str.w	r3, [lr, #12]
 80111c6:	f10c 0c10 	add.w	ip, ip, #16
 80111ca:	f109 0910 	add.w	r9, r9, #16
 80111ce:	9b06      	ldr	r3, [sp, #24]
 80111d0:	459c      	cmp	ip, r3
 80111d2:	d1ec      	bne.n	80111ae <crypto_sign+0x1ce>
 80111d4:	464a      	mov	r2, r9
 80111d6:	4663      	mov	r3, ip
 80111d8:	cb03      	ldmia	r3!, {r0, r1}
 80111da:	6010      	str	r0, [r2, #0]
 80111dc:	6051      	str	r1, [r2, #4]
	memcpy(sm + 2 + (sizeof nonce) + mlen, esig, sig_len);
 80111de:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80111e0:	332a      	adds	r3, #42	; 0x2a
 80111e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111e4:	4413      	add	r3, r2
 80111e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111e8:	4917      	ldr	r1, [pc, #92]	; (8011248 <crypto_sign+0x268>)
 80111ea:	4618      	mov	r0, r3
 80111ec:	f00b fa24 	bl	801c638 <memcpy>
	*smlen = 2 + (sizeof nonce) + mlen + sig_len;
 80111f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111f2:	2200      	movs	r2, #0
 80111f4:	461e      	mov	r6, r3
 80111f6:	4617      	mov	r7, r2
 80111f8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80111fc:	18b4      	adds	r4, r6, r2
 80111fe:	eb47 0503 	adc.w	r5, r7, r3
 8011202:	f114 0a2a 	adds.w	sl, r4, #42	; 0x2a
 8011206:	f145 0b00 	adc.w	fp, r5, #0
 801120a:	9b08      	ldr	r3, [sp, #32]
 801120c:	e9c3 ab00 	strd	sl, fp, [r3]
	return 0;
 8011210:	2300      	movs	r3, #0
}
 8011212:	4618      	mov	r0, r3
 8011214:	b00f      	add	sp, #60	; 0x3c
 8011216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801121a:	bf00      	nop
 801121c:	0801f2b8 	.word	0x0801f2b8
 8011220:	2000df20 	.word	0x2000df20
 8011224:	2000e120 	.word	0x2000e120
 8011228:	0801f2c4 	.word	0x0801f2c4
 801122c:	2000e320 	.word	0x2000e320
 8011230:	2000e720 	.word	0x2000e720
 8011234:	2000e520 	.word	0x2000e520
 8011238:	20017720 	.word	0x20017720
 801123c:	20017748 	.word	0x20017748
 8011240:	20017818 	.word	0x20017818
 8011244:	20017c18 	.word	0x20017c18
 8011248:	20017c48 	.word	0x20017c48
 801124c:	20017c49 	.word	0x20017c49

08011250 <crypto_sign_open>:

int
crypto_sign_open(unsigned char *m, unsigned long long *mlen,
	const unsigned char *sm, unsigned long long smlen,
	const unsigned char *pk)
{
 8011250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011254:	b08b      	sub	sp, #44	; 0x2c
 8011256:	9005      	str	r0, [sp, #20]
 8011258:	9104      	str	r1, [sp, #16]
 801125a:	9203      	str	r2, [sp, #12]
	size_t sig_len, msg_len;

	/*
	 * Decode public key.
	 */
	if (pk[0] != 0x00 + 9) {
 801125c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	2b09      	cmp	r3, #9
 8011262:	d002      	beq.n	801126a <crypto_sign_open+0x1a>
		return -1;
 8011264:	f04f 33ff 	mov.w	r3, #4294967295
 8011268:	e088      	b.n	801137c <crypto_sign_open+0x12c>
	}
	if (Zf(modq_decode)(h, 9, pk + 1, CRYPTO_PUBLICKEYBYTES - 1)
 801126a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801126c:	1c5a      	adds	r2, r3, #1
 801126e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8011272:	2109      	movs	r1, #9
 8011274:	4843      	ldr	r0, [pc, #268]	; (8011384 <crypto_sign_open+0x134>)
 8011276:	f000 f903 	bl	8011480 <falcon_inner_modq_decode>
 801127a:	4603      	mov	r3, r0
 801127c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8011280:	d002      	beq.n	8011288 <crypto_sign_open+0x38>
		!= CRYPTO_PUBLICKEYBYTES - 1)
	{
		return -1;
 8011282:	f04f 33ff 	mov.w	r3, #4294967295
 8011286:	e079      	b.n	801137c <crypto_sign_open+0x12c>
	}
	Zf(to_ntt_monty)(h, 9);
 8011288:	2109      	movs	r1, #9
 801128a:	483e      	ldr	r0, [pc, #248]	; (8011384 <crypto_sign_open+0x134>)
 801128c:	f009 fe78 	bl	801af80 <falcon_inner_to_ntt_monty>

	/*
	 * Find nonce, signature, message length.
	 */
	if (smlen < 2 + NONCELEN) {
 8011290:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011294:	2a2a      	cmp	r2, #42	; 0x2a
 8011296:	f173 0300 	sbcs.w	r3, r3, #0
 801129a:	d202      	bcs.n	80112a2 <crypto_sign_open+0x52>
		return -1;
 801129c:	f04f 33ff 	mov.w	r3, #4294967295
 80112a0:	e06c      	b.n	801137c <crypto_sign_open+0x12c>
	}
	sig_len = ((size_t)sm[0] << 8) | (size_t)sm[1];
 80112a2:	9b03      	ldr	r3, [sp, #12]
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	021b      	lsls	r3, r3, #8
 80112a8:	9a03      	ldr	r2, [sp, #12]
 80112aa:	3201      	adds	r2, #1
 80112ac:	7812      	ldrb	r2, [r2, #0]
 80112ae:	4313      	orrs	r3, r2
 80112b0:	9309      	str	r3, [sp, #36]	; 0x24
	if (sig_len > (smlen - 2 - NONCELEN)) {
 80112b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112b4:	2200      	movs	r2, #0
 80112b6:	461e      	mov	r6, r3
 80112b8:	4617      	mov	r7, r2
 80112ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80112be:	f1b2 042a 	subs.w	r4, r2, #42	; 0x2a
 80112c2:	f143 35ff 	adc.w	r5, r3, #4294967295
 80112c6:	42b4      	cmp	r4, r6
 80112c8:	eb75 0307 	sbcs.w	r3, r5, r7
 80112cc:	d202      	bcs.n	80112d4 <crypto_sign_open+0x84>
		return -1;
 80112ce:	f04f 33ff 	mov.w	r3, #4294967295
 80112d2:	e053      	b.n	801137c <crypto_sign_open+0x12c>
	}
	msg_len = smlen - 2 - NONCELEN - sig_len;
 80112d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80112d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112d8:	1ad3      	subs	r3, r2, r3
 80112da:	3b2a      	subs	r3, #42	; 0x2a
 80112dc:	9308      	str	r3, [sp, #32]

	/*
	 * Decode signature.
	 */
	esig = sm + 2 + NONCELEN + msg_len;
 80112de:	9b08      	ldr	r3, [sp, #32]
 80112e0:	332a      	adds	r3, #42	; 0x2a
 80112e2:	9a03      	ldr	r2, [sp, #12]
 80112e4:	4413      	add	r3, r2
 80112e6:	9307      	str	r3, [sp, #28]
	if (sig_len < 1 || esig[0] != 0x20 + 9) {
 80112e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d003      	beq.n	80112f6 <crypto_sign_open+0xa6>
 80112ee:	9b07      	ldr	r3, [sp, #28]
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	2b29      	cmp	r3, #41	; 0x29
 80112f4:	d002      	beq.n	80112fc <crypto_sign_open+0xac>
		return -1;
 80112f6:	f04f 33ff 	mov.w	r3, #4294967295
 80112fa:	e03f      	b.n	801137c <crypto_sign_open+0x12c>
	}
	if (Zf(comp_decode)(sig, 9,
		esig + 1, sig_len - 1) != sig_len - 1)
 80112fc:	9b07      	ldr	r3, [sp, #28]
 80112fe:	1c5a      	adds	r2, r3, #1
	if (Zf(comp_decode)(sig, 9,
 8011300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011302:	3b01      	subs	r3, #1
 8011304:	2109      	movs	r1, #9
 8011306:	4820      	ldr	r0, [pc, #128]	; (8011388 <crypto_sign_open+0x138>)
 8011308:	f000 faca 	bl	80118a0 <falcon_inner_comp_decode>
 801130c:	4602      	mov	r2, r0
		esig + 1, sig_len - 1) != sig_len - 1)
 801130e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011310:	3b01      	subs	r3, #1
	if (Zf(comp_decode)(sig, 9,
 8011312:	429a      	cmp	r2, r3
 8011314:	d002      	beq.n	801131c <crypto_sign_open+0xcc>
	{
		return -1;
 8011316:	f04f 33ff 	mov.w	r3, #4294967295
 801131a:	e02f      	b.n	801137c <crypto_sign_open+0x12c>
	}

	/*
	 * Hash nonce + message into a vector.
	 */
	inner_shake256_init(&sc);
 801131c:	481b      	ldr	r0, [pc, #108]	; (801138c <crypto_sign_open+0x13c>)
 801131e:	f009 faaf 	bl	801a880 <falcon_inner_i_shake256_init>
	inner_shake256_inject(&sc, sm + 2, NONCELEN + msg_len);
 8011322:	9b03      	ldr	r3, [sp, #12]
 8011324:	1c99      	adds	r1, r3, #2
 8011326:	9b08      	ldr	r3, [sp, #32]
 8011328:	3328      	adds	r3, #40	; 0x28
 801132a:	461a      	mov	r2, r3
 801132c:	4817      	ldr	r0, [pc, #92]	; (801138c <crypto_sign_open+0x13c>)
 801132e:	f009 fabf 	bl	801a8b0 <falcon_inner_i_shake256_inject>
	inner_shake256_flip(&sc);
 8011332:	4816      	ldr	r0, [pc, #88]	; (801138c <crypto_sign_open+0x13c>)
 8011334:	f009 fb14 	bl	801a960 <falcon_inner_i_shake256_flip>
	Zf(hash_to_point_vartime)(&sc, hm, 9);
 8011338:	2209      	movs	r2, #9
 801133a:	4915      	ldr	r1, [pc, #84]	; (8011390 <crypto_sign_open+0x140>)
 801133c:	4813      	ldr	r0, [pc, #76]	; (801138c <crypto_sign_open+0x13c>)
 801133e:	f000 fb3f 	bl	80119c0 <falcon_inner_hash_to_point_vartime>

	/*
	 * Verify signature.
	 */
	if (!Zf(verify_raw)(hm, sig, h, 9, tmp.b)) {
 8011342:	4b14      	ldr	r3, [pc, #80]	; (8011394 <crypto_sign_open+0x144>)
 8011344:	9300      	str	r3, [sp, #0]
 8011346:	2309      	movs	r3, #9
 8011348:	4a0e      	ldr	r2, [pc, #56]	; (8011384 <crypto_sign_open+0x134>)
 801134a:	490f      	ldr	r1, [pc, #60]	; (8011388 <crypto_sign_open+0x138>)
 801134c:	4810      	ldr	r0, [pc, #64]	; (8011390 <crypto_sign_open+0x140>)
 801134e:	f009 fe27 	bl	801afa0 <falcon_inner_verify_raw>
 8011352:	4603      	mov	r3, r0
 8011354:	2b00      	cmp	r3, #0
 8011356:	d102      	bne.n	801135e <crypto_sign_open+0x10e>
		return -1;
 8011358:	f04f 33ff 	mov.w	r3, #4294967295
 801135c:	e00e      	b.n	801137c <crypto_sign_open+0x12c>
	}

	/*
	 * Return plaintext.
	 */
	memmove(m, sm + 2 + NONCELEN, msg_len);
 801135e:	9b03      	ldr	r3, [sp, #12]
 8011360:	332a      	adds	r3, #42	; 0x2a
 8011362:	9a08      	ldr	r2, [sp, #32]
 8011364:	4619      	mov	r1, r3
 8011366:	9805      	ldr	r0, [sp, #20]
 8011368:	f00b f900 	bl	801c56c <memmove>
	*mlen = msg_len;
 801136c:	9b08      	ldr	r3, [sp, #32]
 801136e:	2200      	movs	r2, #0
 8011370:	4698      	mov	r8, r3
 8011372:	4691      	mov	r9, r2
 8011374:	9b04      	ldr	r3, [sp, #16]
 8011376:	e9c3 8900 	strd	r8, r9, [r3]
	return 0;
 801137a:	2300      	movs	r3, #0
}
 801137c:	4618      	mov	r0, r3
 801137e:	b00b      	add	sp, #44	; 0x2c
 8011380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011384:	20017ed0 	.word	0x20017ed0
 8011388:	200182d0 	.word	0x200182d0
 801138c:	200186d0 	.word	0x200186d0
 8011390:	200187a0 	.word	0x200187a0
 8011394:	20018ba0 	.word	0x20018ba0
	...

080113a0 <falcon_inner_modq_encode>:
/* see inner.h */
size_t
Zf(modq_encode)(
	void *out, size_t max_out_len,
	const uint16_t *x, unsigned logn)
{
 80113a0:	b08a      	sub	sp, #40	; 0x28
 80113a2:	9003      	str	r0, [sp, #12]
 80113a4:	9102      	str	r1, [sp, #8]
 80113a6:	9201      	str	r2, [sp, #4]
 80113a8:	9300      	str	r3, [sp, #0]
	size_t n, out_len, u;
	uint8_t *buf;
	uint32_t acc;
	int acc_len;

	n = (size_t)1 << logn;
 80113aa:	2201      	movs	r2, #1
 80113ac:	9b00      	ldr	r3, [sp, #0]
 80113ae:	fa02 f303 	lsl.w	r3, r2, r3
 80113b2:	9305      	str	r3, [sp, #20]
	for (u = 0; u < n; u ++) {
 80113b4:	2300      	movs	r3, #0
 80113b6:	9309      	str	r3, [sp, #36]	; 0x24
 80113b8:	e00c      	b.n	80113d4 <falcon_inner_modq_encode+0x34>
		if (x[u] >= 12289) {
 80113ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113bc:	005b      	lsls	r3, r3, #1
 80113be:	9a01      	ldr	r2, [sp, #4]
 80113c0:	4413      	add	r3, r2
 80113c2:	881b      	ldrh	r3, [r3, #0]
 80113c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80113c8:	d901      	bls.n	80113ce <falcon_inner_modq_encode+0x2e>
			return 0;
 80113ca:	2300      	movs	r3, #0
 80113cc:	e052      	b.n	8011474 <falcon_inner_modq_encode+0xd4>
	for (u = 0; u < n; u ++) {
 80113ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113d0:	3301      	adds	r3, #1
 80113d2:	9309      	str	r3, [sp, #36]	; 0x24
 80113d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113d6:	9b05      	ldr	r3, [sp, #20]
 80113d8:	429a      	cmp	r2, r3
 80113da:	d3ee      	bcc.n	80113ba <falcon_inner_modq_encode+0x1a>
		}
	}
	out_len = ((n * 14) + 7) >> 3;
 80113dc:	9a05      	ldr	r2, [sp, #20]
 80113de:	4613      	mov	r3, r2
 80113e0:	00db      	lsls	r3, r3, #3
 80113e2:	1a9b      	subs	r3, r3, r2
 80113e4:	005b      	lsls	r3, r3, #1
 80113e6:	3307      	adds	r3, #7
 80113e8:	08db      	lsrs	r3, r3, #3
 80113ea:	9304      	str	r3, [sp, #16]
	if (out == NULL) {
 80113ec:	9b03      	ldr	r3, [sp, #12]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d101      	bne.n	80113f6 <falcon_inner_modq_encode+0x56>
		return out_len;
 80113f2:	9b04      	ldr	r3, [sp, #16]
 80113f4:	e03e      	b.n	8011474 <falcon_inner_modq_encode+0xd4>
	}
	if (out_len > max_out_len) {
 80113f6:	9a04      	ldr	r2, [sp, #16]
 80113f8:	9b02      	ldr	r3, [sp, #8]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d901      	bls.n	8011402 <falcon_inner_modq_encode+0x62>
		return 0;
 80113fe:	2300      	movs	r3, #0
 8011400:	e038      	b.n	8011474 <falcon_inner_modq_encode+0xd4>
	}
	buf = out;
 8011402:	9b03      	ldr	r3, [sp, #12]
 8011404:	9308      	str	r3, [sp, #32]
	acc = 0;
 8011406:	2300      	movs	r3, #0
 8011408:	9307      	str	r3, [sp, #28]
	acc_len = 0;
 801140a:	2300      	movs	r3, #0
 801140c:	9306      	str	r3, [sp, #24]
	for (u = 0; u < n; u ++) {
 801140e:	2300      	movs	r3, #0
 8011410:	9309      	str	r3, [sp, #36]	; 0x24
 8011412:	e01e      	b.n	8011452 <falcon_inner_modq_encode+0xb2>
		acc = (acc << 14) | x[u];
 8011414:	9b07      	ldr	r3, [sp, #28]
 8011416:	039b      	lsls	r3, r3, #14
 8011418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801141a:	0052      	lsls	r2, r2, #1
 801141c:	9901      	ldr	r1, [sp, #4]
 801141e:	440a      	add	r2, r1
 8011420:	8812      	ldrh	r2, [r2, #0]
 8011422:	4313      	orrs	r3, r2
 8011424:	9307      	str	r3, [sp, #28]
		acc_len += 14;
 8011426:	9b06      	ldr	r3, [sp, #24]
 8011428:	330e      	adds	r3, #14
 801142a:	9306      	str	r3, [sp, #24]
		while (acc_len >= 8) {
 801142c:	e00b      	b.n	8011446 <falcon_inner_modq_encode+0xa6>
			acc_len -= 8;
 801142e:	9b06      	ldr	r3, [sp, #24]
 8011430:	3b08      	subs	r3, #8
 8011432:	9306      	str	r3, [sp, #24]
			*buf ++ = (uint8_t)(acc >> acc_len);
 8011434:	9a07      	ldr	r2, [sp, #28]
 8011436:	9b06      	ldr	r3, [sp, #24]
 8011438:	fa22 f103 	lsr.w	r1, r2, r3
 801143c:	9b08      	ldr	r3, [sp, #32]
 801143e:	1c5a      	adds	r2, r3, #1
 8011440:	9208      	str	r2, [sp, #32]
 8011442:	b2ca      	uxtb	r2, r1
 8011444:	701a      	strb	r2, [r3, #0]
		while (acc_len >= 8) {
 8011446:	9b06      	ldr	r3, [sp, #24]
 8011448:	2b07      	cmp	r3, #7
 801144a:	dcf0      	bgt.n	801142e <falcon_inner_modq_encode+0x8e>
	for (u = 0; u < n; u ++) {
 801144c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801144e:	3301      	adds	r3, #1
 8011450:	9309      	str	r3, [sp, #36]	; 0x24
 8011452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011454:	9b05      	ldr	r3, [sp, #20]
 8011456:	429a      	cmp	r2, r3
 8011458:	d3dc      	bcc.n	8011414 <falcon_inner_modq_encode+0x74>
		}
	}
	if (acc_len > 0) {
 801145a:	9b06      	ldr	r3, [sp, #24]
 801145c:	2b00      	cmp	r3, #0
 801145e:	dd08      	ble.n	8011472 <falcon_inner_modq_encode+0xd2>
		*buf = (uint8_t)(acc << (8 - acc_len));
 8011460:	9b06      	ldr	r3, [sp, #24]
 8011462:	f1c3 0308 	rsb	r3, r3, #8
 8011466:	9a07      	ldr	r2, [sp, #28]
 8011468:	fa02 f303 	lsl.w	r3, r2, r3
 801146c:	b2da      	uxtb	r2, r3
 801146e:	9b08      	ldr	r3, [sp, #32]
 8011470:	701a      	strb	r2, [r3, #0]
	}
	return out_len;
 8011472:	9b04      	ldr	r3, [sp, #16]
}
 8011474:	4618      	mov	r0, r3
 8011476:	b00a      	add	sp, #40	; 0x28
 8011478:	4770      	bx	lr
 801147a:	bf00      	nop
 801147c:	0000      	movs	r0, r0
	...

08011480 <falcon_inner_modq_decode>:
/* see inner.h */
size_t
Zf(modq_decode)(
	uint16_t *x, unsigned logn,
	const void *in, size_t max_in_len)
{
 8011480:	b08c      	sub	sp, #48	; 0x30
 8011482:	9003      	str	r0, [sp, #12]
 8011484:	9102      	str	r1, [sp, #8]
 8011486:	9201      	str	r2, [sp, #4]
 8011488:	9300      	str	r3, [sp, #0]
	size_t n, in_len, u;
	const uint8_t *buf;
	uint32_t acc;
	int acc_len;

	n = (size_t)1 << logn;
 801148a:	2201      	movs	r2, #1
 801148c:	9b02      	ldr	r3, [sp, #8]
 801148e:	fa02 f303 	lsl.w	r3, r2, r3
 8011492:	9307      	str	r3, [sp, #28]
	in_len = ((n * 14) + 7) >> 3;
 8011494:	9a07      	ldr	r2, [sp, #28]
 8011496:	4613      	mov	r3, r2
 8011498:	00db      	lsls	r3, r3, #3
 801149a:	1a9b      	subs	r3, r3, r2
 801149c:	005b      	lsls	r3, r3, #1
 801149e:	3307      	adds	r3, #7
 80114a0:	08db      	lsrs	r3, r3, #3
 80114a2:	9306      	str	r3, [sp, #24]
	if (in_len > max_in_len) {
 80114a4:	9a06      	ldr	r2, [sp, #24]
 80114a6:	9b00      	ldr	r3, [sp, #0]
 80114a8:	429a      	cmp	r2, r3
 80114aa:	d901      	bls.n	80114b0 <falcon_inner_modq_decode+0x30>
		return 0;
 80114ac:	2300      	movs	r3, #0
 80114ae:	e040      	b.n	8011532 <falcon_inner_modq_decode+0xb2>
	}
	buf = in;
 80114b0:	9b01      	ldr	r3, [sp, #4]
 80114b2:	930a      	str	r3, [sp, #40]	; 0x28
	acc = 0;
 80114b4:	2300      	movs	r3, #0
 80114b6:	9309      	str	r3, [sp, #36]	; 0x24
	acc_len = 0;
 80114b8:	2300      	movs	r3, #0
 80114ba:	9308      	str	r3, [sp, #32]
	u = 0;
 80114bc:	2300      	movs	r3, #0
 80114be:	930b      	str	r3, [sp, #44]	; 0x2c
	while (u < n) {
 80114c0:	e026      	b.n	8011510 <falcon_inner_modq_decode+0x90>
		acc = (acc << 8) | (*buf ++);
 80114c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114c4:	021a      	lsls	r2, r3, #8
 80114c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114c8:	1c59      	adds	r1, r3, #1
 80114ca:	910a      	str	r1, [sp, #40]	; 0x28
 80114cc:	781b      	ldrb	r3, [r3, #0]
 80114ce:	4313      	orrs	r3, r2
 80114d0:	9309      	str	r3, [sp, #36]	; 0x24
		acc_len += 8;
 80114d2:	9b08      	ldr	r3, [sp, #32]
 80114d4:	3308      	adds	r3, #8
 80114d6:	9308      	str	r3, [sp, #32]
		if (acc_len >= 14) {
 80114d8:	9b08      	ldr	r3, [sp, #32]
 80114da:	2b0d      	cmp	r3, #13
 80114dc:	dd18      	ble.n	8011510 <falcon_inner_modq_decode+0x90>
			unsigned w;

			acc_len -= 14;
 80114de:	9b08      	ldr	r3, [sp, #32]
 80114e0:	3b0e      	subs	r3, #14
 80114e2:	9308      	str	r3, [sp, #32]
			w = (acc >> acc_len) & 0x3FFF;
 80114e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114e6:	9b08      	ldr	r3, [sp, #32]
 80114e8:	fa22 f303 	lsr.w	r3, r2, r3
 80114ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80114f0:	9305      	str	r3, [sp, #20]
			if (w >= 12289) {
 80114f2:	9b05      	ldr	r3, [sp, #20]
 80114f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80114f8:	d901      	bls.n	80114fe <falcon_inner_modq_decode+0x7e>
				return 0;
 80114fa:	2300      	movs	r3, #0
 80114fc:	e019      	b.n	8011532 <falcon_inner_modq_decode+0xb2>
			}
			x[u ++] = (uint16_t)w;
 80114fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011500:	1c5a      	adds	r2, r3, #1
 8011502:	920b      	str	r2, [sp, #44]	; 0x2c
 8011504:	005b      	lsls	r3, r3, #1
 8011506:	9a03      	ldr	r2, [sp, #12]
 8011508:	4413      	add	r3, r2
 801150a:	9a05      	ldr	r2, [sp, #20]
 801150c:	b292      	uxth	r2, r2
 801150e:	801a      	strh	r2, [r3, #0]
	while (u < n) {
 8011510:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011512:	9b07      	ldr	r3, [sp, #28]
 8011514:	429a      	cmp	r2, r3
 8011516:	d3d4      	bcc.n	80114c2 <falcon_inner_modq_decode+0x42>
		}
	}
	if ((acc & (((uint32_t)1 << acc_len) - 1)) != 0) {
 8011518:	f04f 32ff 	mov.w	r2, #4294967295
 801151c:	9b08      	ldr	r3, [sp, #32]
 801151e:	fa02 f303 	lsl.w	r3, r2, r3
 8011522:	43da      	mvns	r2, r3
 8011524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011526:	4013      	ands	r3, r2
 8011528:	2b00      	cmp	r3, #0
 801152a:	d001      	beq.n	8011530 <falcon_inner_modq_decode+0xb0>
		return 0;
 801152c:	2300      	movs	r3, #0
 801152e:	e000      	b.n	8011532 <falcon_inner_modq_decode+0xb2>
	}
	return in_len;
 8011530:	9b06      	ldr	r3, [sp, #24]
}
 8011532:	4618      	mov	r0, r3
 8011534:	b00c      	add	sp, #48	; 0x30
 8011536:	4770      	bx	lr
	...

08011540 <falcon_inner_trim_i8_encode>:
/* see inner.h */
size_t
Zf(trim_i8_encode)(
	void *out, size_t max_out_len,
	const int8_t *x, unsigned logn, unsigned bits)
{
 8011540:	b08e      	sub	sp, #56	; 0x38
 8011542:	9003      	str	r0, [sp, #12]
 8011544:	9102      	str	r1, [sp, #8]
 8011546:	9201      	str	r2, [sp, #4]
 8011548:	9300      	str	r3, [sp, #0]
	int minv, maxv;
	uint8_t *buf;
	uint32_t acc, mask;
	unsigned acc_len;

	n = (size_t)1 << logn;
 801154a:	2201      	movs	r2, #1
 801154c:	9b00      	ldr	r3, [sp, #0]
 801154e:	fa02 f303 	lsl.w	r3, r2, r3
 8011552:	9309      	str	r3, [sp, #36]	; 0x24
	maxv = (1 << (bits - 1)) - 1;
 8011554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011556:	3b01      	subs	r3, #1
 8011558:	2201      	movs	r2, #1
 801155a:	fa02 f303 	lsl.w	r3, r2, r3
 801155e:	3b01      	subs	r3, #1
 8011560:	9308      	str	r3, [sp, #32]
	minv = -maxv;
 8011562:	9b08      	ldr	r3, [sp, #32]
 8011564:	425b      	negs	r3, r3
 8011566:	9307      	str	r3, [sp, #28]
	for (u = 0; u < n; u ++) {
 8011568:	2300      	movs	r3, #0
 801156a:	930d      	str	r3, [sp, #52]	; 0x34
 801156c:	e016      	b.n	801159c <falcon_inner_trim_i8_encode+0x5c>
		if (x[u] < minv || x[u] > maxv) {
 801156e:	9a01      	ldr	r2, [sp, #4]
 8011570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011572:	4413      	add	r3, r2
 8011574:	f993 3000 	ldrsb.w	r3, [r3]
 8011578:	461a      	mov	r2, r3
 801157a:	9b07      	ldr	r3, [sp, #28]
 801157c:	4293      	cmp	r3, r2
 801157e:	dc08      	bgt.n	8011592 <falcon_inner_trim_i8_encode+0x52>
 8011580:	9a01      	ldr	r2, [sp, #4]
 8011582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011584:	4413      	add	r3, r2
 8011586:	f993 3000 	ldrsb.w	r3, [r3]
 801158a:	461a      	mov	r2, r3
 801158c:	9b08      	ldr	r3, [sp, #32]
 801158e:	4293      	cmp	r3, r2
 8011590:	da01      	bge.n	8011596 <falcon_inner_trim_i8_encode+0x56>
			return 0;
 8011592:	2300      	movs	r3, #0
 8011594:	e05f      	b.n	8011656 <falcon_inner_trim_i8_encode+0x116>
	for (u = 0; u < n; u ++) {
 8011596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011598:	3301      	adds	r3, #1
 801159a:	930d      	str	r3, [sp, #52]	; 0x34
 801159c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801159e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d3e4      	bcc.n	801156e <falcon_inner_trim_i8_encode+0x2e>
		}
	}
	out_len = ((n * bits) + 7) >> 3;
 80115a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80115a8:	fb02 f303 	mul.w	r3, r2, r3
 80115ac:	3307      	adds	r3, #7
 80115ae:	08db      	lsrs	r3, r3, #3
 80115b0:	9306      	str	r3, [sp, #24]
	if (out == NULL) {
 80115b2:	9b03      	ldr	r3, [sp, #12]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d101      	bne.n	80115bc <falcon_inner_trim_i8_encode+0x7c>
		return out_len;
 80115b8:	9b06      	ldr	r3, [sp, #24]
 80115ba:	e04c      	b.n	8011656 <falcon_inner_trim_i8_encode+0x116>
	}
	if (out_len > max_out_len) {
 80115bc:	9a06      	ldr	r2, [sp, #24]
 80115be:	9b02      	ldr	r3, [sp, #8]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d901      	bls.n	80115c8 <falcon_inner_trim_i8_encode+0x88>
		return 0;
 80115c4:	2300      	movs	r3, #0
 80115c6:	e046      	b.n	8011656 <falcon_inner_trim_i8_encode+0x116>
	}
	buf = out;
 80115c8:	9b03      	ldr	r3, [sp, #12]
 80115ca:	930c      	str	r3, [sp, #48]	; 0x30
	acc = 0;
 80115cc:	2300      	movs	r3, #0
 80115ce:	930b      	str	r3, [sp, #44]	; 0x2c
	acc_len = 0;
 80115d0:	2300      	movs	r3, #0
 80115d2:	930a      	str	r3, [sp, #40]	; 0x28
	mask = ((uint32_t)1 << bits) - 1;
 80115d4:	2201      	movs	r2, #1
 80115d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115d8:	fa02 f303 	lsl.w	r3, r2, r3
 80115dc:	3b01      	subs	r3, #1
 80115de:	9305      	str	r3, [sp, #20]
	for (u = 0; u < n; u ++) {
 80115e0:	2300      	movs	r3, #0
 80115e2:	930d      	str	r3, [sp, #52]	; 0x34
 80115e4:	e024      	b.n	8011630 <falcon_inner_trim_i8_encode+0xf0>
		acc = (acc << bits) | ((uint8_t)x[u] & mask);
 80115e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80115e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115ea:	409a      	lsls	r2, r3
 80115ec:	9901      	ldr	r1, [sp, #4]
 80115ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115f0:	440b      	add	r3, r1
 80115f2:	f993 3000 	ldrsb.w	r3, [r3]
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	4619      	mov	r1, r3
 80115fa:	9b05      	ldr	r3, [sp, #20]
 80115fc:	400b      	ands	r3, r1
 80115fe:	4313      	orrs	r3, r2
 8011600:	930b      	str	r3, [sp, #44]	; 0x2c
		acc_len += bits;
 8011602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011604:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011606:	4413      	add	r3, r2
 8011608:	930a      	str	r3, [sp, #40]	; 0x28
		while (acc_len >= 8) {
 801160a:	e00b      	b.n	8011624 <falcon_inner_trim_i8_encode+0xe4>
			acc_len -= 8;
 801160c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801160e:	3b08      	subs	r3, #8
 8011610:	930a      	str	r3, [sp, #40]	; 0x28
			*buf ++ = (uint8_t)(acc >> acc_len);
 8011612:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011616:	fa22 f103 	lsr.w	r1, r2, r3
 801161a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801161c:	1c5a      	adds	r2, r3, #1
 801161e:	920c      	str	r2, [sp, #48]	; 0x30
 8011620:	b2ca      	uxtb	r2, r1
 8011622:	701a      	strb	r2, [r3, #0]
		while (acc_len >= 8) {
 8011624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011626:	2b07      	cmp	r3, #7
 8011628:	d8f0      	bhi.n	801160c <falcon_inner_trim_i8_encode+0xcc>
	for (u = 0; u < n; u ++) {
 801162a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801162c:	3301      	adds	r3, #1
 801162e:	930d      	str	r3, [sp, #52]	; 0x34
 8011630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011634:	429a      	cmp	r2, r3
 8011636:	d3d6      	bcc.n	80115e6 <falcon_inner_trim_i8_encode+0xa6>
		}
	}
	if (acc_len > 0) {
 8011638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801163a:	2b00      	cmp	r3, #0
 801163c:	d00a      	beq.n	8011654 <falcon_inner_trim_i8_encode+0x114>
		*buf ++ = (uint8_t)(acc << (8 - acc_len));
 801163e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011640:	f1c3 0308 	rsb	r3, r3, #8
 8011644:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011646:	fa02 f103 	lsl.w	r1, r2, r3
 801164a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801164c:	1c5a      	adds	r2, r3, #1
 801164e:	920c      	str	r2, [sp, #48]	; 0x30
 8011650:	b2ca      	uxtb	r2, r1
 8011652:	701a      	strb	r2, [r3, #0]
	}
	return out_len;
 8011654:	9b06      	ldr	r3, [sp, #24]
}
 8011656:	4618      	mov	r0, r3
 8011658:	b00e      	add	sp, #56	; 0x38
 801165a:	4770      	bx	lr
 801165c:	0000      	movs	r0, r0
	...

08011660 <falcon_inner_trim_i8_decode>:
/* see inner.h */
size_t
Zf(trim_i8_decode)(
	int8_t *x, unsigned logn, unsigned bits,
	const void *in, size_t max_in_len)
{
 8011660:	b08e      	sub	sp, #56	; 0x38
 8011662:	9003      	str	r0, [sp, #12]
 8011664:	9102      	str	r1, [sp, #8]
 8011666:	9201      	str	r2, [sp, #4]
 8011668:	9300      	str	r3, [sp, #0]
	const uint8_t *buf;
	size_t u;
	uint32_t acc, mask1, mask2;
	unsigned acc_len;

	n = (size_t)1 << logn;
 801166a:	2201      	movs	r2, #1
 801166c:	9b02      	ldr	r3, [sp, #8]
 801166e:	fa02 f303 	lsl.w	r3, r2, r3
 8011672:	9309      	str	r3, [sp, #36]	; 0x24
	in_len = ((n * bits) + 7) >> 3;
 8011674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011676:	9a01      	ldr	r2, [sp, #4]
 8011678:	fb02 f303 	mul.w	r3, r2, r3
 801167c:	3307      	adds	r3, #7
 801167e:	08db      	lsrs	r3, r3, #3
 8011680:	9308      	str	r3, [sp, #32]
	if (in_len > max_in_len) {
 8011682:	9a08      	ldr	r2, [sp, #32]
 8011684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011686:	429a      	cmp	r2, r3
 8011688:	d901      	bls.n	801168e <falcon_inner_trim_i8_decode+0x2e>
		return 0;
 801168a:	2300      	movs	r3, #0
 801168c:	e05a      	b.n	8011744 <falcon_inner_trim_i8_decode+0xe4>
	}
	buf = in;
 801168e:	9b00      	ldr	r3, [sp, #0]
 8011690:	930d      	str	r3, [sp, #52]	; 0x34
	u = 0;
 8011692:	2300      	movs	r3, #0
 8011694:	930c      	str	r3, [sp, #48]	; 0x30
	acc = 0;
 8011696:	2300      	movs	r3, #0
 8011698:	930b      	str	r3, [sp, #44]	; 0x2c
	acc_len = 0;
 801169a:	2300      	movs	r3, #0
 801169c:	930a      	str	r3, [sp, #40]	; 0x28
	mask1 = ((uint32_t)1 << bits) - 1;
 801169e:	2201      	movs	r2, #1
 80116a0:	9b01      	ldr	r3, [sp, #4]
 80116a2:	fa02 f303 	lsl.w	r3, r2, r3
 80116a6:	3b01      	subs	r3, #1
 80116a8:	9307      	str	r3, [sp, #28]
	mask2 = (uint32_t)1 << (bits - 1);
 80116aa:	9b01      	ldr	r3, [sp, #4]
 80116ac:	3b01      	subs	r3, #1
 80116ae:	2201      	movs	r2, #1
 80116b0:	fa02 f303 	lsl.w	r3, r2, r3
 80116b4:	9306      	str	r3, [sp, #24]
	while (u < n) {
 80116b6:	e034      	b.n	8011722 <falcon_inner_trim_i8_decode+0xc2>
		acc = (acc << 8) | *buf ++;
 80116b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116ba:	021a      	lsls	r2, r3, #8
 80116bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80116be:	1c59      	adds	r1, r3, #1
 80116c0:	910d      	str	r1, [sp, #52]	; 0x34
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	4313      	orrs	r3, r2
 80116c6:	930b      	str	r3, [sp, #44]	; 0x2c
		acc_len += 8;
 80116c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116ca:	3308      	adds	r3, #8
 80116cc:	930a      	str	r3, [sp, #40]	; 0x28
		while (acc_len >= bits && u < n) {
 80116ce:	e020      	b.n	8011712 <falcon_inner_trim_i8_decode+0xb2>
			uint32_t w;

			acc_len -= bits;
 80116d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116d2:	9b01      	ldr	r3, [sp, #4]
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	930a      	str	r3, [sp, #40]	; 0x28
			w = (acc >> acc_len) & mask1;
 80116d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80116da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116dc:	40da      	lsrs	r2, r3
 80116de:	9b07      	ldr	r3, [sp, #28]
 80116e0:	4013      	ands	r3, r2
 80116e2:	9305      	str	r3, [sp, #20]
			w |= -(w & mask2);
 80116e4:	9a05      	ldr	r2, [sp, #20]
 80116e6:	9b06      	ldr	r3, [sp, #24]
 80116e8:	4013      	ands	r3, r2
 80116ea:	425a      	negs	r2, r3
 80116ec:	9b05      	ldr	r3, [sp, #20]
 80116ee:	4313      	orrs	r3, r2
 80116f0:	9305      	str	r3, [sp, #20]
			if (w == -mask2) {
 80116f2:	9b06      	ldr	r3, [sp, #24]
 80116f4:	425a      	negs	r2, r3
 80116f6:	9b05      	ldr	r3, [sp, #20]
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d101      	bne.n	8011700 <falcon_inner_trim_i8_decode+0xa0>
				/*
				 * The -2^(bits-1) value is forbidden.
				 */
				return 0;
 80116fc:	2300      	movs	r3, #0
 80116fe:	e021      	b.n	8011744 <falcon_inner_trim_i8_decode+0xe4>
			}
			x[u ++] = (int8_t)*(int32_t *)&w;
 8011700:	ab05      	add	r3, sp, #20
 8011702:	6819      	ldr	r1, [r3, #0]
 8011704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011706:	1c5a      	adds	r2, r3, #1
 8011708:	920c      	str	r2, [sp, #48]	; 0x30
 801170a:	9a03      	ldr	r2, [sp, #12]
 801170c:	4413      	add	r3, r2
 801170e:	b24a      	sxtb	r2, r1
 8011710:	701a      	strb	r2, [r3, #0]
		while (acc_len >= bits && u < n) {
 8011712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011714:	9b01      	ldr	r3, [sp, #4]
 8011716:	429a      	cmp	r2, r3
 8011718:	d303      	bcc.n	8011722 <falcon_inner_trim_i8_decode+0xc2>
 801171a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801171c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801171e:	429a      	cmp	r2, r3
 8011720:	d3d6      	bcc.n	80116d0 <falcon_inner_trim_i8_decode+0x70>
	while (u < n) {
 8011722:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011726:	429a      	cmp	r2, r3
 8011728:	d3c6      	bcc.n	80116b8 <falcon_inner_trim_i8_decode+0x58>
		}
	}
	if ((acc & (((uint32_t)1 << acc_len) - 1)) != 0) {
 801172a:	f04f 32ff 	mov.w	r2, #4294967295
 801172e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011730:	fa02 f303 	lsl.w	r3, r2, r3
 8011734:	43da      	mvns	r2, r3
 8011736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011738:	4013      	ands	r3, r2
 801173a:	2b00      	cmp	r3, #0
 801173c:	d001      	beq.n	8011742 <falcon_inner_trim_i8_decode+0xe2>
		/*
		 * Extra bits in the last byte must be zero.
		 */
		return 0;
 801173e:	2300      	movs	r3, #0
 8011740:	e000      	b.n	8011744 <falcon_inner_trim_i8_decode+0xe4>
	}
	return in_len;
 8011742:	9b08      	ldr	r3, [sp, #32]
}
 8011744:	4618      	mov	r0, r3
 8011746:	b00e      	add	sp, #56	; 0x38
 8011748:	4770      	bx	lr
 801174a:	bf00      	nop
 801174c:	0000      	movs	r0, r0
	...

08011750 <falcon_inner_comp_encode>:
/* see inner.h */
size_t
Zf(comp_encode)(
	void *out, size_t max_out_len,
	const int16_t *x, unsigned logn)
{
 8011750:	b08c      	sub	sp, #48	; 0x30
 8011752:	9003      	str	r0, [sp, #12]
 8011754:	9102      	str	r1, [sp, #8]
 8011756:	9201      	str	r2, [sp, #4]
 8011758:	9300      	str	r3, [sp, #0]
	uint8_t *buf;
	size_t n, u, v;
	uint32_t acc;
	unsigned acc_len;

	n = (size_t)1 << logn;
 801175a:	2201      	movs	r2, #1
 801175c:	9b00      	ldr	r3, [sp, #0]
 801175e:	fa02 f303 	lsl.w	r3, r2, r3
 8011762:	9306      	str	r3, [sp, #24]
	buf = out;
 8011764:	9b03      	ldr	r3, [sp, #12]
 8011766:	9305      	str	r3, [sp, #20]

	/*
	 * Make sure that all values are within the -2047..+2047 range.
	 */
	for (u = 0; u < n; u ++) {
 8011768:	2300      	movs	r3, #0
 801176a:	930b      	str	r3, [sp, #44]	; 0x2c
 801176c:	e016      	b.n	801179c <falcon_inner_comp_encode+0x4c>
		if (x[u] < -2047 || x[u] > +2047) {
 801176e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011770:	005b      	lsls	r3, r3, #1
 8011772:	9a01      	ldr	r2, [sp, #4]
 8011774:	4413      	add	r3, r2
 8011776:	f9b3 3000 	ldrsh.w	r3, [r3]
 801177a:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 801177e:	dd08      	ble.n	8011792 <falcon_inner_comp_encode+0x42>
 8011780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011782:	005b      	lsls	r3, r3, #1
 8011784:	9a01      	ldr	r2, [sp, #4]
 8011786:	4413      	add	r3, r2
 8011788:	f9b3 3000 	ldrsh.w	r3, [r3]
 801178c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011790:	db01      	blt.n	8011796 <falcon_inner_comp_encode+0x46>
			return 0;
 8011792:	2300      	movs	r3, #0
 8011794:	e081      	b.n	801189a <falcon_inner_comp_encode+0x14a>
	for (u = 0; u < n; u ++) {
 8011796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011798:	3301      	adds	r3, #1
 801179a:	930b      	str	r3, [sp, #44]	; 0x2c
 801179c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801179e:	9b06      	ldr	r3, [sp, #24]
 80117a0:	429a      	cmp	r2, r3
 80117a2:	d3e4      	bcc.n	801176e <falcon_inner_comp_encode+0x1e>
		}
	}

	acc = 0;
 80117a4:	2300      	movs	r3, #0
 80117a6:	9309      	str	r3, [sp, #36]	; 0x24
	acc_len = 0;
 80117a8:	2300      	movs	r3, #0
 80117aa:	9308      	str	r3, [sp, #32]
	v = 0;
 80117ac:	2300      	movs	r3, #0
 80117ae:	930a      	str	r3, [sp, #40]	; 0x28
	for (u = 0; u < n; u ++) {
 80117b0:	2300      	movs	r3, #0
 80117b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80117b4:	e052      	b.n	801185c <falcon_inner_comp_encode+0x10c>

		/*
		 * Get sign and absolute value of next integer; push the
		 * sign bit.
		 */
		acc <<= 1;
 80117b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117b8:	005b      	lsls	r3, r3, #1
 80117ba:	9309      	str	r3, [sp, #36]	; 0x24
		t = x[u];
 80117bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117be:	005b      	lsls	r3, r3, #1
 80117c0:	9a01      	ldr	r2, [sp, #4]
 80117c2:	4413      	add	r3, r2
 80117c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80117c8:	9307      	str	r3, [sp, #28]
		if (t < 0) {
 80117ca:	9b07      	ldr	r3, [sp, #28]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	da06      	bge.n	80117de <falcon_inner_comp_encode+0x8e>
			t = -t;
 80117d0:	9b07      	ldr	r3, [sp, #28]
 80117d2:	425b      	negs	r3, r3
 80117d4:	9307      	str	r3, [sp, #28]
			acc |= 1;
 80117d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117d8:	f043 0301 	orr.w	r3, r3, #1
 80117dc:	9309      	str	r3, [sp, #36]	; 0x24
		}
		w = (unsigned)t;
 80117de:	9b07      	ldr	r3, [sp, #28]
 80117e0:	9304      	str	r3, [sp, #16]

		/*
		 * Push the low 7 bits of the absolute value.
		 */
		acc <<= 7;
 80117e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117e4:	01db      	lsls	r3, r3, #7
 80117e6:	9309      	str	r3, [sp, #36]	; 0x24
		acc |= w & 127u;
 80117e8:	9b04      	ldr	r3, [sp, #16]
 80117ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117f0:	4313      	orrs	r3, r2
 80117f2:	9309      	str	r3, [sp, #36]	; 0x24
		w >>= 7;
 80117f4:	9b04      	ldr	r3, [sp, #16]
 80117f6:	09db      	lsrs	r3, r3, #7
 80117f8:	9304      	str	r3, [sp, #16]

		/*
		 * We pushed exactly 8 bits.
		 */
		acc_len += 8;
 80117fa:	9b08      	ldr	r3, [sp, #32]
 80117fc:	3308      	adds	r3, #8
 80117fe:	9308      	str	r3, [sp, #32]
		 * 15 at this point, thus we will add at most 16 bits
		 * here. With the 8 bits above and possibly up to 7 bits
		 * from previous iterations, we may go up to 31 bits, which
		 * will fit in the accumulator, which is an uint32_t.
		 */
		acc <<= (w + 1);
 8011800:	9b04      	ldr	r3, [sp, #16]
 8011802:	3301      	adds	r3, #1
 8011804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011806:	fa02 f303 	lsl.w	r3, r2, r3
 801180a:	9309      	str	r3, [sp, #36]	; 0x24
		acc |= 1;
 801180c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801180e:	f043 0301 	orr.w	r3, r3, #1
 8011812:	9309      	str	r3, [sp, #36]	; 0x24
		acc_len += w + 1;
 8011814:	9a04      	ldr	r2, [sp, #16]
 8011816:	9b08      	ldr	r3, [sp, #32]
 8011818:	4413      	add	r3, r2
 801181a:	3301      	adds	r3, #1
 801181c:	9308      	str	r3, [sp, #32]

		/*
		 * Produce all full bytes.
		 */
		while (acc_len >= 8) {
 801181e:	e017      	b.n	8011850 <falcon_inner_comp_encode+0x100>
			acc_len -= 8;
 8011820:	9b08      	ldr	r3, [sp, #32]
 8011822:	3b08      	subs	r3, #8
 8011824:	9308      	str	r3, [sp, #32]
			if (buf != NULL) {
 8011826:	9b05      	ldr	r3, [sp, #20]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d00e      	beq.n	801184a <falcon_inner_comp_encode+0xfa>
				if (v >= max_out_len) {
 801182c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801182e:	9b02      	ldr	r3, [sp, #8]
 8011830:	429a      	cmp	r2, r3
 8011832:	d301      	bcc.n	8011838 <falcon_inner_comp_encode+0xe8>
					return 0;
 8011834:	2300      	movs	r3, #0
 8011836:	e030      	b.n	801189a <falcon_inner_comp_encode+0x14a>
				}
				buf[v] = (uint8_t)(acc >> acc_len);
 8011838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801183a:	9b08      	ldr	r3, [sp, #32]
 801183c:	fa22 f103 	lsr.w	r1, r2, r3
 8011840:	9a05      	ldr	r2, [sp, #20]
 8011842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011844:	4413      	add	r3, r2
 8011846:	b2ca      	uxtb	r2, r1
 8011848:	701a      	strb	r2, [r3, #0]
			}
			v ++;
 801184a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801184c:	3301      	adds	r3, #1
 801184e:	930a      	str	r3, [sp, #40]	; 0x28
		while (acc_len >= 8) {
 8011850:	9b08      	ldr	r3, [sp, #32]
 8011852:	2b07      	cmp	r3, #7
 8011854:	d8e4      	bhi.n	8011820 <falcon_inner_comp_encode+0xd0>
	for (u = 0; u < n; u ++) {
 8011856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011858:	3301      	adds	r3, #1
 801185a:	930b      	str	r3, [sp, #44]	; 0x2c
 801185c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801185e:	9b06      	ldr	r3, [sp, #24]
 8011860:	429a      	cmp	r2, r3
 8011862:	d3a8      	bcc.n	80117b6 <falcon_inner_comp_encode+0x66>
	}

	/*
	 * Flush remaining bits (if any).
	 */
	if (acc_len > 0) {
 8011864:	9b08      	ldr	r3, [sp, #32]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d016      	beq.n	8011898 <falcon_inner_comp_encode+0x148>
		if (buf != NULL) {
 801186a:	9b05      	ldr	r3, [sp, #20]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d010      	beq.n	8011892 <falcon_inner_comp_encode+0x142>
			if (v >= max_out_len) {
 8011870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011872:	9b02      	ldr	r3, [sp, #8]
 8011874:	429a      	cmp	r2, r3
 8011876:	d301      	bcc.n	801187c <falcon_inner_comp_encode+0x12c>
				return 0;
 8011878:	2300      	movs	r3, #0
 801187a:	e00e      	b.n	801189a <falcon_inner_comp_encode+0x14a>
			}
			buf[v] = (uint8_t)(acc << (8 - acc_len));
 801187c:	9b08      	ldr	r3, [sp, #32]
 801187e:	f1c3 0308 	rsb	r3, r3, #8
 8011882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011884:	fa02 f103 	lsl.w	r1, r2, r3
 8011888:	9a05      	ldr	r2, [sp, #20]
 801188a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801188c:	4413      	add	r3, r2
 801188e:	b2ca      	uxtb	r2, r1
 8011890:	701a      	strb	r2, [r3, #0]
		}
		v ++;
 8011892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011894:	3301      	adds	r3, #1
 8011896:	930a      	str	r3, [sp, #40]	; 0x28
	}

	return v;
 8011898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
}
 801189a:	4618      	mov	r0, r3
 801189c:	b00c      	add	sp, #48	; 0x30
 801189e:	4770      	bx	lr

080118a0 <falcon_inner_comp_decode>:
/* see inner.h */
size_t
Zf(comp_decode)(
	int16_t *x, unsigned logn,
	const void *in, size_t max_in_len)
{
 80118a0:	b08e      	sub	sp, #56	; 0x38
 80118a2:	9003      	str	r0, [sp, #12]
 80118a4:	9102      	str	r1, [sp, #8]
 80118a6:	9201      	str	r2, [sp, #4]
 80118a8:	9300      	str	r3, [sp, #0]
	const uint8_t *buf;
	size_t n, u, v;
	uint32_t acc;
	unsigned acc_len;

	n = (size_t)1 << logn;
 80118aa:	2201      	movs	r2, #1
 80118ac:	9b02      	ldr	r3, [sp, #8]
 80118ae:	fa02 f303 	lsl.w	r3, r2, r3
 80118b2:	9308      	str	r3, [sp, #32]
	buf = in;
 80118b4:	9b01      	ldr	r3, [sp, #4]
 80118b6:	9307      	str	r3, [sp, #28]
	acc = 0;
 80118b8:	2300      	movs	r3, #0
 80118ba:	930b      	str	r3, [sp, #44]	; 0x2c
	acc_len = 0;
 80118bc:	2300      	movs	r3, #0
 80118be:	930a      	str	r3, [sp, #40]	; 0x28
	v = 0;
 80118c0:	2300      	movs	r3, #0
 80118c2:	930c      	str	r3, [sp, #48]	; 0x30
	for (u = 0; u < n; u ++) {
 80118c4:	2300      	movs	r3, #0
 80118c6:	930d      	str	r3, [sp, #52]	; 0x34
 80118c8:	e061      	b.n	801198e <falcon_inner_comp_decode+0xee>

		/*
		 * Get next eight bits: sign and low seven bits of the
		 * absolute value.
		 */
		if (v >= max_in_len) {
 80118ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80118cc:	9b00      	ldr	r3, [sp, #0]
 80118ce:	429a      	cmp	r2, r3
 80118d0:	d301      	bcc.n	80118d6 <falcon_inner_comp_decode+0x36>
			return 0;
 80118d2:	2300      	movs	r3, #0
 80118d4:	e06b      	b.n	80119ae <falcon_inner_comp_decode+0x10e>
		}
		acc = (acc << 8) | (uint32_t)buf[v ++];
 80118d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118d8:	021a      	lsls	r2, r3, #8
 80118da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118dc:	1c59      	adds	r1, r3, #1
 80118de:	910c      	str	r1, [sp, #48]	; 0x30
 80118e0:	9907      	ldr	r1, [sp, #28]
 80118e2:	440b      	add	r3, r1
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	4313      	orrs	r3, r2
 80118e8:	930b      	str	r3, [sp, #44]	; 0x2c
		b = acc >> acc_len;
 80118ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80118ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118ee:	fa22 f303 	lsr.w	r3, r2, r3
 80118f2:	9306      	str	r3, [sp, #24]
		s = b & 128;
 80118f4:	9b06      	ldr	r3, [sp, #24]
 80118f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118fa:	9305      	str	r3, [sp, #20]
		m = b & 127;
 80118fc:	9b06      	ldr	r3, [sp, #24]
 80118fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011902:	9309      	str	r3, [sp, #36]	; 0x24

		/*
		 * Get next bits until a 1 is reached.
		 */
		for (;;) {
			if (acc_len == 0) {
 8011904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011906:	2b00      	cmp	r3, #0
 8011908:	d111      	bne.n	801192e <falcon_inner_comp_decode+0x8e>
				if (v >= max_in_len) {
 801190a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801190c:	9b00      	ldr	r3, [sp, #0]
 801190e:	429a      	cmp	r2, r3
 8011910:	d301      	bcc.n	8011916 <falcon_inner_comp_decode+0x76>
					return 0;
 8011912:	2300      	movs	r3, #0
 8011914:	e04b      	b.n	80119ae <falcon_inner_comp_decode+0x10e>
				}
				acc = (acc << 8) | (uint32_t)buf[v ++];
 8011916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011918:	021a      	lsls	r2, r3, #8
 801191a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801191c:	1c59      	adds	r1, r3, #1
 801191e:	910c      	str	r1, [sp, #48]	; 0x30
 8011920:	9907      	ldr	r1, [sp, #28]
 8011922:	440b      	add	r3, r1
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	4313      	orrs	r3, r2
 8011928:	930b      	str	r3, [sp, #44]	; 0x2c
				acc_len = 8;
 801192a:	2308      	movs	r3, #8
 801192c:	930a      	str	r3, [sp, #40]	; 0x28
			}
			acc_len --;
 801192e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011930:	3b01      	subs	r3, #1
 8011932:	930a      	str	r3, [sp, #40]	; 0x28
			if (((acc >> acc_len) & 1) != 0) {
 8011934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011938:	fa22 f303 	lsr.w	r3, r2, r3
 801193c:	f003 0301 	and.w	r3, r3, #1
 8011940:	2b00      	cmp	r3, #0
 8011942:	d108      	bne.n	8011956 <falcon_inner_comp_decode+0xb6>
				break;
			}
			m += 128;
 8011944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011946:	3380      	adds	r3, #128	; 0x80
 8011948:	9309      	str	r3, [sp, #36]	; 0x24
			if (m > 2047) {
 801194a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801194c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011950:	d3d8      	bcc.n	8011904 <falcon_inner_comp_decode+0x64>
				return 0;
 8011952:	2300      	movs	r3, #0
 8011954:	e02b      	b.n	80119ae <falcon_inner_comp_decode+0x10e>
				break;
 8011956:	bf00      	nop
		}

		/*
		 * "-0" is forbidden.
		 */
		if (s && m == 0) {
 8011958:	9b05      	ldr	r3, [sp, #20]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d004      	beq.n	8011968 <falcon_inner_comp_decode+0xc8>
 801195e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011960:	2b00      	cmp	r3, #0
 8011962:	d101      	bne.n	8011968 <falcon_inner_comp_decode+0xc8>
			return 0;
 8011964:	2300      	movs	r3, #0
 8011966:	e022      	b.n	80119ae <falcon_inner_comp_decode+0x10e>
		}

		x[u] = (int16_t)(s ? -(int)m : (int)m);
 8011968:	9b05      	ldr	r3, [sp, #20]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d005      	beq.n	801197a <falcon_inner_comp_decode+0xda>
 801196e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011970:	b29b      	uxth	r3, r3
 8011972:	425b      	negs	r3, r3
 8011974:	b29b      	uxth	r3, r3
 8011976:	b21b      	sxth	r3, r3
 8011978:	e001      	b.n	801197e <falcon_inner_comp_decode+0xde>
 801197a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801197c:	b21b      	sxth	r3, r3
 801197e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011980:	0052      	lsls	r2, r2, #1
 8011982:	9903      	ldr	r1, [sp, #12]
 8011984:	440a      	add	r2, r1
 8011986:	8013      	strh	r3, [r2, #0]
	for (u = 0; u < n; u ++) {
 8011988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801198a:	3301      	adds	r3, #1
 801198c:	930d      	str	r3, [sp, #52]	; 0x34
 801198e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011990:	9b08      	ldr	r3, [sp, #32]
 8011992:	429a      	cmp	r2, r3
 8011994:	d399      	bcc.n	80118ca <falcon_inner_comp_decode+0x2a>
	}

	/*
	 * Unused bits in the last byte must be zero.
	 */
	if ((acc & ((1u << acc_len) - 1u)) != 0) {
 8011996:	2201      	movs	r2, #1
 8011998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801199a:	fa02 f303 	lsl.w	r3, r2, r3
 801199e:	1e5a      	subs	r2, r3, #1
 80119a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119a2:	4013      	ands	r3, r2
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d001      	beq.n	80119ac <falcon_inner_comp_decode+0x10c>
		return 0;
 80119a8:	2300      	movs	r3, #0
 80119aa:	e000      	b.n	80119ae <falcon_inner_comp_decode+0x10e>
	}

	return v;
 80119ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	b00e      	add	sp, #56	; 0x38
 80119b2:	4770      	bx	lr
	...

080119c0 <falcon_inner_hash_to_point_vartime>:
/* see inner.h */
void
Zf(hash_to_point_vartime)(
	inner_shake256_context *sc,
	uint16_t *x, unsigned logn)
{
 80119c0:	b500      	push	{lr}
 80119c2:	b089      	sub	sp, #36	; 0x24
 80119c4:	9003      	str	r0, [sp, #12]
 80119c6:	9102      	str	r1, [sp, #8]
 80119c8:	9201      	str	r2, [sp, #4]
	 * nonce, the hashed output cannot be matched against potential
	 * plaintexts).
	 */
	size_t n;

	n = (size_t)1 << logn;
 80119ca:	2201      	movs	r2, #1
 80119cc:	9b01      	ldr	r3, [sp, #4]
 80119ce:	fa02 f303 	lsl.w	r3, r2, r3
 80119d2:	9307      	str	r3, [sp, #28]
	while (n > 0) {
 80119d4:	e024      	b.n	8011a20 <falcon_inner_hash_to_point_vartime+0x60>
		uint8_t buf[2];
		uint32_t w;

		inner_shake256_extract(sc, (void *)buf, sizeof buf);
 80119d6:	ab05      	add	r3, sp, #20
 80119d8:	2202      	movs	r2, #2
 80119da:	4619      	mov	r1, r3
 80119dc:	9803      	ldr	r0, [sp, #12]
 80119de:	f008 ffe7 	bl	801a9b0 <falcon_inner_i_shake256_extract>
		w = ((unsigned)buf[0] << 8) | (unsigned)buf[1];
 80119e2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80119e6:	021b      	lsls	r3, r3, #8
 80119e8:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80119ec:	4313      	orrs	r3, r2
 80119ee:	9306      	str	r3, [sp, #24]
		if (w < 61445) {
 80119f0:	9b06      	ldr	r3, [sp, #24]
 80119f2:	f24f 0204 	movw	r2, #61444	; 0xf004
 80119f6:	4293      	cmp	r3, r2
 80119f8:	d812      	bhi.n	8011a20 <falcon_inner_hash_to_point_vartime+0x60>
			while (w >= 12289) {
 80119fa:	e004      	b.n	8011a06 <falcon_inner_hash_to_point_vartime+0x46>
				w -= 12289;
 80119fc:	9b06      	ldr	r3, [sp, #24]
 80119fe:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8011a02:	3b01      	subs	r3, #1
 8011a04:	9306      	str	r3, [sp, #24]
			while (w >= 12289) {
 8011a06:	9b06      	ldr	r3, [sp, #24]
 8011a08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011a0c:	d8f6      	bhi.n	80119fc <falcon_inner_hash_to_point_vartime+0x3c>
			}
			*x ++ = (uint16_t)w;
 8011a0e:	9b02      	ldr	r3, [sp, #8]
 8011a10:	1c9a      	adds	r2, r3, #2
 8011a12:	9202      	str	r2, [sp, #8]
 8011a14:	9a06      	ldr	r2, [sp, #24]
 8011a16:	b292      	uxth	r2, r2
 8011a18:	801a      	strh	r2, [r3, #0]
			n --;
 8011a1a:	9b07      	ldr	r3, [sp, #28]
 8011a1c:	3b01      	subs	r3, #1
 8011a1e:	9307      	str	r3, [sp, #28]
	while (n > 0) {
 8011a20:	9b07      	ldr	r3, [sp, #28]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d1d7      	bne.n	80119d6 <falcon_inner_hash_to_point_vartime+0x16>
		}
	}
}
 8011a26:	bf00      	nop
 8011a28:	bf00      	nop
 8011a2a:	b009      	add	sp, #36	; 0x24
 8011a2c:	f85d fb04 	ldr.w	pc, [sp], #4

08011a30 <falcon_inner_is_short>:

/* see inner.h */
int
Zf(is_short)(
	const int16_t *s1, const int16_t *s2, unsigned logn)
{
 8011a30:	b08a      	sub	sp, #40	; 0x28
 8011a32:	9003      	str	r0, [sp, #12]
 8011a34:	9102      	str	r1, [sp, #8]
 8011a36:	9201      	str	r2, [sp, #4]
	 * the value exceeds 2^31-1.
	 */
	size_t n, u;
	uint32_t s, ng;

	n = (size_t)1 << logn;
 8011a38:	2201      	movs	r2, #1
 8011a3a:	9b01      	ldr	r3, [sp, #4]
 8011a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8011a40:	9306      	str	r3, [sp, #24]
	s = 0;
 8011a42:	2300      	movs	r3, #0
 8011a44:	9308      	str	r3, [sp, #32]
	ng = 0;
 8011a46:	2300      	movs	r3, #0
 8011a48:	9307      	str	r3, [sp, #28]
	for (u = 0; u < n; u ++) {
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8011a4e:	e026      	b.n	8011a9e <falcon_inner_is_short+0x6e>
		int32_t z;

		z = s1[u];
 8011a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a52:	005b      	lsls	r3, r3, #1
 8011a54:	9a03      	ldr	r2, [sp, #12]
 8011a56:	4413      	add	r3, r2
 8011a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a5c:	9305      	str	r3, [sp, #20]
		s += (uint32_t)(z * z);
 8011a5e:	9b05      	ldr	r3, [sp, #20]
 8011a60:	fb03 f303 	mul.w	r3, r3, r3
 8011a64:	461a      	mov	r2, r3
 8011a66:	9b08      	ldr	r3, [sp, #32]
 8011a68:	4413      	add	r3, r2
 8011a6a:	9308      	str	r3, [sp, #32]
		ng |= s;
 8011a6c:	9a07      	ldr	r2, [sp, #28]
 8011a6e:	9b08      	ldr	r3, [sp, #32]
 8011a70:	4313      	orrs	r3, r2
 8011a72:	9307      	str	r3, [sp, #28]
		z = s2[u];
 8011a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a76:	005b      	lsls	r3, r3, #1
 8011a78:	9a02      	ldr	r2, [sp, #8]
 8011a7a:	4413      	add	r3, r2
 8011a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a80:	9305      	str	r3, [sp, #20]
		s += (uint32_t)(z * z);
 8011a82:	9b05      	ldr	r3, [sp, #20]
 8011a84:	fb03 f303 	mul.w	r3, r3, r3
 8011a88:	461a      	mov	r2, r3
 8011a8a:	9b08      	ldr	r3, [sp, #32]
 8011a8c:	4413      	add	r3, r2
 8011a8e:	9308      	str	r3, [sp, #32]
		ng |= s;
 8011a90:	9a07      	ldr	r2, [sp, #28]
 8011a92:	9b08      	ldr	r3, [sp, #32]
 8011a94:	4313      	orrs	r3, r2
 8011a96:	9307      	str	r3, [sp, #28]
	for (u = 0; u < n; u ++) {
 8011a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a9a:	3301      	adds	r3, #1
 8011a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8011a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011aa0:	9b06      	ldr	r3, [sp, #24]
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d3d4      	bcc.n	8011a50 <falcon_inner_is_short+0x20>
	}
	s |= -(ng >> 31);
 8011aa6:	9b07      	ldr	r3, [sp, #28]
 8011aa8:	17db      	asrs	r3, r3, #31
 8011aaa:	461a      	mov	r2, r3
 8011aac:	9b08      	ldr	r3, [sp, #32]
 8011aae:	4313      	orrs	r3, r2
 8011ab0:	9308      	str	r3, [sp, #32]

	return s <= l2bound[logn];
 8011ab2:	4a06      	ldr	r2, [pc, #24]	; (8011acc <falcon_inner_is_short+0x9c>)
 8011ab4:	9b01      	ldr	r3, [sp, #4]
 8011ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011aba:	9a08      	ldr	r2, [sp, #32]
 8011abc:	429a      	cmp	r2, r3
 8011abe:	bf94      	ite	ls
 8011ac0:	2301      	movls	r3, #1
 8011ac2:	2300      	movhi	r3, #0
 8011ac4:	b2db      	uxtb	r3, r3
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	b00a      	add	sp, #40	; 0x28
 8011aca:	4770      	bx	lr
 8011acc:	0801f2d0 	.word	0x0801f2d0

08011ad0 <falcon_inner_is_short_half>:

/* see inner.h */
int
Zf(is_short_half)(
	uint32_t sqn, const int16_t *s2, unsigned logn)
{
 8011ad0:	b088      	sub	sp, #32
 8011ad2:	9003      	str	r0, [sp, #12]
 8011ad4:	9102      	str	r1, [sp, #8]
 8011ad6:	9201      	str	r2, [sp, #4]
	size_t n, u;
	uint32_t ng;

	n = (size_t)1 << logn;
 8011ad8:	2201      	movs	r2, #1
 8011ada:	9b01      	ldr	r3, [sp, #4]
 8011adc:	fa02 f303 	lsl.w	r3, r2, r3
 8011ae0:	9305      	str	r3, [sp, #20]
	ng = -(sqn >> 31);
 8011ae2:	9b03      	ldr	r3, [sp, #12]
 8011ae4:	17db      	asrs	r3, r3, #31
 8011ae6:	9306      	str	r3, [sp, #24]
	for (u = 0; u < n; u ++) {
 8011ae8:	2300      	movs	r3, #0
 8011aea:	9307      	str	r3, [sp, #28]
 8011aec:	e014      	b.n	8011b18 <falcon_inner_is_short_half+0x48>
		int32_t z;

		z = s2[u];
 8011aee:	9b07      	ldr	r3, [sp, #28]
 8011af0:	005b      	lsls	r3, r3, #1
 8011af2:	9a02      	ldr	r2, [sp, #8]
 8011af4:	4413      	add	r3, r2
 8011af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011afa:	9304      	str	r3, [sp, #16]
		sqn += (uint32_t)(z * z);
 8011afc:	9b04      	ldr	r3, [sp, #16]
 8011afe:	fb03 f303 	mul.w	r3, r3, r3
 8011b02:	461a      	mov	r2, r3
 8011b04:	9b03      	ldr	r3, [sp, #12]
 8011b06:	4413      	add	r3, r2
 8011b08:	9303      	str	r3, [sp, #12]
		ng |= sqn;
 8011b0a:	9a06      	ldr	r2, [sp, #24]
 8011b0c:	9b03      	ldr	r3, [sp, #12]
 8011b0e:	4313      	orrs	r3, r2
 8011b10:	9306      	str	r3, [sp, #24]
	for (u = 0; u < n; u ++) {
 8011b12:	9b07      	ldr	r3, [sp, #28]
 8011b14:	3301      	adds	r3, #1
 8011b16:	9307      	str	r3, [sp, #28]
 8011b18:	9a07      	ldr	r2, [sp, #28]
 8011b1a:	9b05      	ldr	r3, [sp, #20]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d3e6      	bcc.n	8011aee <falcon_inner_is_short_half+0x1e>
	}
	sqn |= -(ng >> 31);
 8011b20:	9b06      	ldr	r3, [sp, #24]
 8011b22:	17db      	asrs	r3, r3, #31
 8011b24:	461a      	mov	r2, r3
 8011b26:	9b03      	ldr	r3, [sp, #12]
 8011b28:	4313      	orrs	r3, r2
 8011b2a:	9303      	str	r3, [sp, #12]

	return sqn <= l2bound[logn];
 8011b2c:	4a06      	ldr	r2, [pc, #24]	; (8011b48 <falcon_inner_is_short_half+0x78>)
 8011b2e:	9b01      	ldr	r3, [sp, #4]
 8011b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b34:	9a03      	ldr	r2, [sp, #12]
 8011b36:	429a      	cmp	r2, r3
 8011b38:	bf94      	ite	ls
 8011b3a:	2301      	movls	r3, #1
 8011b3c:	2300      	movhi	r3, #0
 8011b3e:	b2db      	uxtb	r3, r3
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	b008      	add	sp, #32
 8011b44:	4770      	bx	lr
 8011b46:	bf00      	nop
 8011b48:	0801f2d0 	.word	0x0801f2d0
 8011b4c:	00000000 	.word	0x00000000

08011b50 <fpr_sub.lto_priv.1>:
{
 8011b50:	b530      	push	{r4, r5, lr}
 8011b52:	b085      	sub	sp, #20
 8011b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b58:	e9cd 2300 	strd	r2, r3, [sp]
	y ^= (uint64_t)1 << 63;
 8011b5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b60:	4614      	mov	r4, r2
 8011b62:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
 8011b66:	e9cd 4500 	strd	r4, r5, [sp]
	return fpr_add(x, y);
 8011b6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b72:	f001 fbdd 	bl	8013330 <falcon_inner_fpr_add>
 8011b76:	4602      	mov	r2, r0
 8011b78:	460b      	mov	r3, r1
}
 8011b7a:	4610      	mov	r0, r2
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	b005      	add	sp, #20
 8011b80:	bd30      	pop	{r4, r5, pc}
 8011b82:	bf00      	nop
	...

08011b90 <fpr_neg.lto_priv.1>:
{
 8011b90:	b082      	sub	sp, #8
 8011b92:	e9cd 0100 	strd	r0, r1, [sp]
	x ^= (uint64_t)1 << 63;
 8011b96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ba0:	e9cd 2300 	strd	r2, r3, [sp]
	return x;
 8011ba4:	e9dd 2300 	ldrd	r2, r3, [sp]
}
 8011ba8:	4610      	mov	r0, r2
 8011baa:	4619      	mov	r1, r3
 8011bac:	b002      	add	sp, #8
 8011bae:	4770      	bx	lr

08011bb0 <fpr_half.lto_priv.1>:
{
 8011bb0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8011bb4:	b084      	sub	sp, #16
 8011bb6:	e9cd 0100 	strd	r0, r1, [sp]
	x -= (uint64_t)1 << 52;
 8011bba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bbe:	f5a1 1980 	sub.w	r9, r1, #1048576	; 0x100000
 8011bc2:	4680      	mov	r8, r0
 8011bc4:	e9cd 8900 	strd	r8, r9, [sp]
	t = (((uint32_t)(x >> 52) & 0x7FF) + 1) >> 11;
 8011bc8:	e9dd 8900 	ldrd	r8, r9, [sp]
 8011bcc:	f04f 0000 	mov.w	r0, #0
 8011bd0:	f04f 0100 	mov.w	r1, #0
 8011bd4:	ea4f 5019 	mov.w	r0, r9, lsr #20
 8011bd8:	2100      	movs	r1, #0
 8011bda:	4601      	mov	r1, r0
 8011bdc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8011be0:	3101      	adds	r1, #1
 8011be2:	0ac9      	lsrs	r1, r1, #11
 8011be4:	9103      	str	r1, [sp, #12]
	x &= (uint64_t)t - 1;
 8011be6:	9903      	ldr	r1, [sp, #12]
 8011be8:	2000      	movs	r0, #0
 8011bea:	460c      	mov	r4, r1
 8011bec:	4605      	mov	r5, r0
 8011bee:	1e62      	subs	r2, r4, #1
 8011bf0:	f145 33ff 	adc.w	r3, r5, #4294967295
 8011bf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bf8:	ea00 0602 	and.w	r6, r0, r2
 8011bfc:	ea01 0703 	and.w	r7, r1, r3
 8011c00:	e9cd 6700 	strd	r6, r7, [sp]
	return x;
 8011c04:	e9dd 2300 	ldrd	r2, r3, [sp]
}
 8011c08:	4610      	mov	r0, r2
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	b004      	add	sp, #16
 8011c0e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8011c12:	4770      	bx	lr
	...

08011c20 <fpr_sqr.lto_priv.1>:
{
 8011c20:	b500      	push	{lr}
 8011c22:	b083      	sub	sp, #12
 8011c24:	e9cd 0100 	strd	r0, r1, [sp]
	return fpr_mul(x, x);
 8011c28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c30:	f001 fc26 	bl	8013480 <falcon_inner_fpr_mul>
 8011c34:	4602      	mov	r2, r0
 8011c36:	460b      	mov	r3, r1
}
 8011c38:	4610      	mov	r0, r2
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	b003      	add	sp, #12
 8011c3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c42:	bf00      	nop
	...

08011c50 <fpr_inv>:
#define fpr_div   Zf(fpr_div)
fpr fpr_div(fpr x, fpr y);

static inline fpr
fpr_inv(fpr x)
{
 8011c50:	b500      	push	{lr}
 8011c52:	b083      	sub	sp, #12
 8011c54:	e9cd 0100 	strd	r0, r1, [sp]
	return fpr_div(4607182418800017408u, x);
 8011c58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c5c:	f04f 0000 	mov.w	r0, #0
 8011c60:	4904      	ldr	r1, [pc, #16]	; (8011c74 <fpr_inv+0x24>)
 8011c62:	f001 fc85 	bl	8013570 <falcon_inner_fpr_div>
 8011c66:	4602      	mov	r2, r0
 8011c68:	460b      	mov	r3, r1
}
 8011c6a:	4610      	mov	r0, r2
 8011c6c:	4619      	mov	r1, r3
 8011c6e:	b003      	add	sp, #12
 8011c70:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c74:	3ff00000 	.word	0x3ff00000
	...

08011c80 <falcon_inner_FFT>:
 */

/* see inner.h */
void
Zf(FFT)(fpr *f, unsigned logn)
{
 8011c80:	b530      	push	{r4, r5, lr}
 8011c82:	b0af      	sub	sp, #188	; 0xbc
 8011c84:	9001      	str	r0, [sp, #4]
 8011c86:	9100      	str	r1, [sp, #0]

	/*
	 * Subsequent iterations are truncated to use only the first
	 * half of values.
	 */
	n = (size_t)1 << logn;
 8011c88:	2201      	movs	r2, #1
 8011c8a:	9b00      	ldr	r3, [sp, #0]
 8011c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8011c90:	9327      	str	r3, [sp, #156]	; 0x9c
	hn = n >> 1;
 8011c92:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011c94:	085b      	lsrs	r3, r3, #1
 8011c96:	9326      	str	r3, [sp, #152]	; 0x98
	t = hn;
 8011c98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011c9a:	932c      	str	r3, [sp, #176]	; 0xb0
	for (u = 1, m = 2; u < logn; u ++, m <<= 1) {
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	932d      	str	r3, [sp, #180]	; 0xb4
 8011ca0:	2302      	movs	r3, #2
 8011ca2:	932b      	str	r3, [sp, #172]	; 0xac
 8011ca4:	e0f8      	b.n	8011e98 <falcon_inner_FFT+0x218>
		size_t ht, hm, i1, j1;

		ht = t >> 1;
 8011ca6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8011ca8:	085b      	lsrs	r3, r3, #1
 8011caa:	9325      	str	r3, [sp, #148]	; 0x94
		hm = m >> 1;
 8011cac:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8011cae:	085b      	lsrs	r3, r3, #1
 8011cb0:	9324      	str	r3, [sp, #144]	; 0x90
		for (i1 = 0, j1 = 0; i1 < hm; i1 ++, j1 += t) {
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	932a      	str	r3, [sp, #168]	; 0xa8
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	9329      	str	r3, [sp, #164]	; 0xa4
 8011cba:	e0e0      	b.n	8011e7e <falcon_inner_FFT+0x1fe>
			size_t j, j2;

			j2 = j1 + ht;
 8011cbc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8011cbe:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011cc0:	4413      	add	r3, r2
 8011cc2:	9323      	str	r3, [sp, #140]	; 0x8c
			fpr s_re, s_im;

			s_re = fpr_gm_tab[((m + i1) << 1) + 0];
 8011cc4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8011cc6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8011cc8:	4413      	add	r3, r2
 8011cca:	005b      	lsls	r3, r3, #1
 8011ccc:	4a77      	ldr	r2, [pc, #476]	; (8011eac <falcon_inner_FFT+0x22c>)
 8011cce:	00db      	lsls	r3, r3, #3
 8011cd0:	4413      	add	r3, r2
 8011cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd6:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
			s_im = fpr_gm_tab[((m + i1) << 1) + 1];
 8011cda:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8011cdc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8011cde:	4413      	add	r3, r2
 8011ce0:	005b      	lsls	r3, r3, #1
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	4a71      	ldr	r2, [pc, #452]	; (8011eac <falcon_inner_FFT+0x22c>)
 8011ce6:	00db      	lsls	r3, r3, #3
 8011ce8:	4413      	add	r3, r2
 8011cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cee:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
			for (j = j1; j < j2; j ++) {
 8011cf2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011cf4:	9328      	str	r3, [sp, #160]	; 0xa0
 8011cf6:	e0b6      	b.n	8011e66 <falcon_inner_FFT+0x1e6>
				fpr x_re, x_im, y_re, y_im;

				x_re = f[j];
 8011cf8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011cfa:	00db      	lsls	r3, r3, #3
 8011cfc:	9a01      	ldr	r2, [sp, #4]
 8011cfe:	4413      	add	r3, r2
 8011d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d04:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
				x_im = f[j + hn];
 8011d08:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011d0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011d0c:	4413      	add	r3, r2
 8011d0e:	00db      	lsls	r3, r3, #3
 8011d10:	9a01      	ldr	r2, [sp, #4]
 8011d12:	4413      	add	r3, r2
 8011d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d18:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
				y_re = f[j + ht];
 8011d1c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011d1e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011d20:	4413      	add	r3, r2
 8011d22:	00db      	lsls	r3, r3, #3
 8011d24:	9a01      	ldr	r2, [sp, #4]
 8011d26:	4413      	add	r3, r2
 8011d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d2c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
				y_im = f[j + ht + hn];
 8011d30:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011d32:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011d34:	441a      	add	r2, r3
 8011d36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011d38:	4413      	add	r3, r2
 8011d3a:	00db      	lsls	r3, r3, #3
 8011d3c:	9a01      	ldr	r2, [sp, #4]
 8011d3e:	4413      	add	r3, r2
 8011d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d44:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				FPC_MUL(y_re, y_im, y_re, y_im, s_re, s_im);
 8011d48:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011d4c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8011d50:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011d54:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8011d58:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8011d5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8011d60:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8011d64:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8011d68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011d6c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8011d70:	f001 fb86 	bl	8013480 <falcon_inner_fpr_mul>
 8011d74:	4604      	mov	r4, r0
 8011d76:	460d      	mov	r5, r1
 8011d78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011d7c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8011d80:	f001 fb7e 	bl	8013480 <falcon_inner_fpr_mul>
 8011d84:	4602      	mov	r2, r0
 8011d86:	460b      	mov	r3, r1
 8011d88:	4620      	mov	r0, r4
 8011d8a:	4629      	mov	r1, r5
 8011d8c:	f7ff fee0 	bl	8011b50 <fpr_sub.lto_priv.1>
 8011d90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011d94:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011d98:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8011d9c:	f001 fb70 	bl	8013480 <falcon_inner_fpr_mul>
 8011da0:	4604      	mov	r4, r0
 8011da2:	460d      	mov	r5, r1
 8011da4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011da8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8011dac:	f001 fb68 	bl	8013480 <falcon_inner_fpr_mul>
 8011db0:	4602      	mov	r2, r0
 8011db2:	460b      	mov	r3, r1
 8011db4:	4620      	mov	r0, r4
 8011db6:	4629      	mov	r1, r5
 8011db8:	f001 faba 	bl	8013330 <falcon_inner_fpr_add>
 8011dbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011dc0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011dc4:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8011dc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011dcc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				FPC_ADD(f[j], f[j + hn],
 8011dd0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011dd4:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8011dd8:	f001 faaa 	bl	8013330 <falcon_inner_fpr_add>
 8011ddc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011de0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011de4:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8011de8:	f001 faa2 	bl	8013330 <falcon_inner_fpr_add>
 8011dec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011df0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011df2:	00db      	lsls	r3, r3, #3
 8011df4:	9a01      	ldr	r2, [sp, #4]
 8011df6:	18d1      	adds	r1, r2, r3
 8011df8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011dfc:	e9c1 2300 	strd	r2, r3, [r1]
 8011e00:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011e02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011e04:	4413      	add	r3, r2
 8011e06:	00db      	lsls	r3, r3, #3
 8011e08:	9a01      	ldr	r2, [sp, #4]
 8011e0a:	18d1      	adds	r1, r2, r3
 8011e0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011e10:	e9c1 2300 	strd	r2, r3, [r1]
					x_re, x_im, y_re, y_im);
				FPC_SUB(f[j + ht], f[j + ht + hn],
 8011e14:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011e18:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8011e1c:	f7ff fe98 	bl	8011b50 <fpr_sub.lto_priv.1>
 8011e20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e24:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011e28:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8011e2c:	f7ff fe90 	bl	8011b50 <fpr_sub.lto_priv.1>
 8011e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e34:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011e36:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011e38:	4413      	add	r3, r2
 8011e3a:	00db      	lsls	r3, r3, #3
 8011e3c:	9a01      	ldr	r2, [sp, #4]
 8011e3e:	18d1      	adds	r1, r2, r3
 8011e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e44:	e9c1 2300 	strd	r2, r3, [r1]
 8011e48:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011e4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011e4c:	441a      	add	r2, r3
 8011e4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011e50:	4413      	add	r3, r2
 8011e52:	00db      	lsls	r3, r3, #3
 8011e54:	9a01      	ldr	r2, [sp, #4]
 8011e56:	18d1      	adds	r1, r2, r3
 8011e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e5c:	e9c1 2300 	strd	r2, r3, [r1]
			for (j = j1; j < j2; j ++) {
 8011e60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011e62:	3301      	adds	r3, #1
 8011e64:	9328      	str	r3, [sp, #160]	; 0xa0
 8011e66:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8011e68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	f4ff af44 	bcc.w	8011cf8 <falcon_inner_FFT+0x78>
		for (i1 = 0, j1 = 0; i1 < hm; i1 ++, j1 += t) {
 8011e70:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8011e72:	3301      	adds	r3, #1
 8011e74:	932a      	str	r3, [sp, #168]	; 0xa8
 8011e76:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8011e78:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8011e7a:	4413      	add	r3, r2
 8011e7c:	9329      	str	r3, [sp, #164]	; 0xa4
 8011e7e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8011e80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011e82:	429a      	cmp	r2, r3
 8011e84:	f4ff af1a 	bcc.w	8011cbc <falcon_inner_FFT+0x3c>
					x_re, x_im, y_re, y_im);
			}
		}
		t = ht;
 8011e88:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011e8a:	932c      	str	r3, [sp, #176]	; 0xb0
	for (u = 1, m = 2; u < logn; u ++, m <<= 1) {
 8011e8c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8011e8e:	3301      	adds	r3, #1
 8011e90:	932d      	str	r3, [sp, #180]	; 0xb4
 8011e92:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8011e94:	005b      	lsls	r3, r3, #1
 8011e96:	932b      	str	r3, [sp, #172]	; 0xac
 8011e98:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8011e9a:	9b00      	ldr	r3, [sp, #0]
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	f4ff af02 	bcc.w	8011ca6 <falcon_inner_FFT+0x26>
	}
}
 8011ea2:	bf00      	nop
 8011ea4:	bf00      	nop
 8011ea6:	b02f      	add	sp, #188	; 0xbc
 8011ea8:	bd30      	pop	{r4, r5, pc}
 8011eaa:	bf00      	nop
 8011eac:	0801f300 	.word	0x0801f300

08011eb0 <falcon_inner_iFFT>:

/* see inner.h */
void
Zf(iFFT)(fpr *f, unsigned logn)
{
 8011eb0:	b530      	push	{r4, r5, lr}
 8011eb2:	b0b1      	sub	sp, #196	; 0xc4
 8011eb4:	9001      	str	r0, [sp, #4]
 8011eb6:	9100      	str	r1, [sp, #0]
	 * We make the last iteration a no-op by tweaking the final
	 * division into a division by N/2, not N.
	 */
	size_t u, n, hn, t, m;

	n = (size_t)1 << logn;
 8011eb8:	2201      	movs	r2, #1
 8011eba:	9b00      	ldr	r3, [sp, #0]
 8011ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8011ec0:	9329      	str	r3, [sp, #164]	; 0xa4
	t = 1;
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	932e      	str	r3, [sp, #184]	; 0xb8
	m = n;
 8011ec6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011ec8:	932d      	str	r3, [sp, #180]	; 0xb4
	hn = n >> 1;
 8011eca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011ecc:	085b      	lsrs	r3, r3, #1
 8011ece:	9328      	str	r3, [sp, #160]	; 0xa0
	for (u = logn; u > 1; u --) {
 8011ed0:	9b00      	ldr	r3, [sp, #0]
 8011ed2:	932f      	str	r3, [sp, #188]	; 0xbc
 8011ed4:	e0fb      	b.n	80120ce <falcon_inner_iFFT+0x21e>
		size_t hm, dt, i1, j1;

		hm = m >> 1;
 8011ed6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8011ed8:	085b      	lsrs	r3, r3, #1
 8011eda:	9325      	str	r3, [sp, #148]	; 0x94
		dt = t << 1;
 8011edc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8011ede:	005b      	lsls	r3, r3, #1
 8011ee0:	9324      	str	r3, [sp, #144]	; 0x90
		for (i1 = 0, j1 = 0; j1 < hn; i1 ++, j1 += dt) {
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	932c      	str	r3, [sp, #176]	; 0xb0
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	932b      	str	r3, [sp, #172]	; 0xac
 8011eea:	e0e4      	b.n	80120b6 <falcon_inner_iFFT+0x206>
			size_t j, j2;

			j2 = j1 + t;
 8011eec:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8011eee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8011ef0:	4413      	add	r3, r2
 8011ef2:	9323      	str	r3, [sp, #140]	; 0x8c
			fpr s_re, s_im;

			s_re = fpr_gm_tab[((hm + i1) << 1) + 0];
 8011ef4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011ef6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8011ef8:	4413      	add	r3, r2
 8011efa:	005b      	lsls	r3, r3, #1
 8011efc:	4a8b      	ldr	r2, [pc, #556]	; (801212c <falcon_inner_iFFT+0x27c>)
 8011efe:	00db      	lsls	r3, r3, #3
 8011f00:	4413      	add	r3, r2
 8011f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f06:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
			s_im = fpr_neg(fpr_gm_tab[((hm + i1) << 1) + 1]);
 8011f0a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011f0c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8011f0e:	4413      	add	r3, r2
 8011f10:	005b      	lsls	r3, r3, #1
 8011f12:	3301      	adds	r3, #1
 8011f14:	4a85      	ldr	r2, [pc, #532]	; (801212c <falcon_inner_iFFT+0x27c>)
 8011f16:	00db      	lsls	r3, r3, #3
 8011f18:	4413      	add	r3, r2
 8011f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f1e:	4610      	mov	r0, r2
 8011f20:	4619      	mov	r1, r3
 8011f22:	f7ff fe35 	bl	8011b90 <fpr_neg.lto_priv.1>
 8011f26:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
			for (j = j1; j < j2; j ++) {
 8011f2a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8011f2c:	932a      	str	r3, [sp, #168]	; 0xa8
 8011f2e:	e0b6      	b.n	801209e <falcon_inner_iFFT+0x1ee>
				fpr x_re, x_im, y_re, y_im;

				x_re = f[j];
 8011f30:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8011f32:	00db      	lsls	r3, r3, #3
 8011f34:	9a01      	ldr	r2, [sp, #4]
 8011f36:	4413      	add	r3, r2
 8011f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
				x_im = f[j + hn];
 8011f40:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8011f42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011f44:	4413      	add	r3, r2
 8011f46:	00db      	lsls	r3, r3, #3
 8011f48:	9a01      	ldr	r2, [sp, #4]
 8011f4a:	4413      	add	r3, r2
 8011f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f50:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
				y_re = f[j + t];
 8011f54:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8011f56:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8011f58:	4413      	add	r3, r2
 8011f5a:	00db      	lsls	r3, r3, #3
 8011f5c:	9a01      	ldr	r2, [sp, #4]
 8011f5e:	4413      	add	r3, r2
 8011f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f64:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
				y_im = f[j + t + hn];
 8011f68:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8011f6a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8011f6c:	441a      	add	r2, r3
 8011f6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011f70:	4413      	add	r3, r2
 8011f72:	00db      	lsls	r3, r3, #3
 8011f74:	9a01      	ldr	r2, [sp, #4]
 8011f76:	4413      	add	r3, r2
 8011f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				FPC_ADD(f[j], f[j + hn],
 8011f80:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011f84:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8011f88:	f001 f9d2 	bl	8013330 <falcon_inner_fpr_add>
 8011f8c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8011f90:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011f94:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8011f98:	f001 f9ca 	bl	8013330 <falcon_inner_fpr_add>
 8011f9c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8011fa0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8011fa2:	00db      	lsls	r3, r3, #3
 8011fa4:	9a01      	ldr	r2, [sp, #4]
 8011fa6:	18d1      	adds	r1, r2, r3
 8011fa8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011fac:	e9c1 2300 	strd	r2, r3, [r1]
 8011fb0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8011fb2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011fb4:	4413      	add	r3, r2
 8011fb6:	00db      	lsls	r3, r3, #3
 8011fb8:	9a01      	ldr	r2, [sp, #4]
 8011fba:	18d1      	adds	r1, r2, r3
 8011fbc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011fc0:	e9c1 2300 	strd	r2, r3, [r1]
					x_re, x_im, y_re, y_im);
				FPC_SUB(x_re, x_im, x_re, x_im, y_re, y_im);
 8011fc4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011fc8:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8011fcc:	f7ff fdc0 	bl	8011b50 <fpr_sub.lto_priv.1>
 8011fd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011fd4:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011fd8:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8011fdc:	f7ff fdb8 	bl	8011b50 <fpr_sub.lto_priv.1>
 8011fe0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011fe4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011fe8:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8011fec:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011ff0:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
				FPC_MUL(f[j + t], f[j + t + hn],
 8011ff4:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8011ff8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011ffc:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8012000:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012004:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8012008:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801200c:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8012010:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012014:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801201c:	f001 fa30 	bl	8013480 <falcon_inner_fpr_mul>
 8012020:	4604      	mov	r4, r0
 8012022:	460d      	mov	r5, r1
 8012024:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012028:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801202c:	f001 fa28 	bl	8013480 <falcon_inner_fpr_mul>
 8012030:	4602      	mov	r2, r0
 8012032:	460b      	mov	r3, r1
 8012034:	4620      	mov	r0, r4
 8012036:	4629      	mov	r1, r5
 8012038:	f7ff fd8a 	bl	8011b50 <fpr_sub.lto_priv.1>
 801203c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012040:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012048:	f001 fa1a 	bl	8013480 <falcon_inner_fpr_mul>
 801204c:	4604      	mov	r4, r0
 801204e:	460d      	mov	r5, r1
 8012050:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012054:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012058:	f001 fa12 	bl	8013480 <falcon_inner_fpr_mul>
 801205c:	4602      	mov	r2, r0
 801205e:	460b      	mov	r3, r1
 8012060:	4620      	mov	r0, r4
 8012062:	4629      	mov	r1, r5
 8012064:	f001 f964 	bl	8013330 <falcon_inner_fpr_add>
 8012068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801206c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801206e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8012070:	4413      	add	r3, r2
 8012072:	00db      	lsls	r3, r3, #3
 8012074:	9a01      	ldr	r2, [sp, #4]
 8012076:	18d1      	adds	r1, r2, r3
 8012078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801207c:	e9c1 2300 	strd	r2, r3, [r1]
 8012080:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8012082:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8012084:	441a      	add	r2, r3
 8012086:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012088:	4413      	add	r3, r2
 801208a:	00db      	lsls	r3, r3, #3
 801208c:	9a01      	ldr	r2, [sp, #4]
 801208e:	18d1      	adds	r1, r2, r3
 8012090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012094:	e9c1 2300 	strd	r2, r3, [r1]
			for (j = j1; j < j2; j ++) {
 8012098:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801209a:	3301      	adds	r3, #1
 801209c:	932a      	str	r3, [sp, #168]	; 0xa8
 801209e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80120a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80120a2:	429a      	cmp	r2, r3
 80120a4:	f4ff af44 	bcc.w	8011f30 <falcon_inner_iFFT+0x80>
		for (i1 = 0, j1 = 0; j1 < hn; i1 ++, j1 += dt) {
 80120a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80120aa:	3301      	adds	r3, #1
 80120ac:	932c      	str	r3, [sp, #176]	; 0xb0
 80120ae:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80120b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80120b2:	4413      	add	r3, r2
 80120b4:	932b      	str	r3, [sp, #172]	; 0xac
 80120b6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80120b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80120ba:	429a      	cmp	r2, r3
 80120bc:	f4ff af16 	bcc.w	8011eec <falcon_inner_iFFT+0x3c>
					x_re, x_im, s_re, s_im);
			}
		}
		t = dt;
 80120c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80120c2:	932e      	str	r3, [sp, #184]	; 0xb8
		m = hm;
 80120c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80120c6:	932d      	str	r3, [sp, #180]	; 0xb4
	for (u = logn; u > 1; u --) {
 80120c8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80120ca:	3b01      	subs	r3, #1
 80120cc:	932f      	str	r3, [sp, #188]	; 0xbc
 80120ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80120d0:	2b01      	cmp	r3, #1
 80120d2:	f63f af00 	bhi.w	8011ed6 <falcon_inner_iFFT+0x26>

	/*
	 * Last iteration is a no-op, provided that we divide by N/2
	 * instead of N. We need to make a special case for logn = 0.
	 */
	if (logn > 0) {
 80120d6:	9b00      	ldr	r3, [sp, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d023      	beq.n	8012124 <falcon_inner_iFFT+0x274>
		fpr ni;

		ni = fpr_p2_tab[logn];
 80120dc:	4a14      	ldr	r2, [pc, #80]	; (8012130 <falcon_inner_iFFT+0x280>)
 80120de:	9b00      	ldr	r3, [sp, #0]
 80120e0:	00db      	lsls	r3, r3, #3
 80120e2:	4413      	add	r3, r2
 80120e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e8:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
		for (u = 0; u < n; u ++) {
 80120ec:	2300      	movs	r3, #0
 80120ee:	932f      	str	r3, [sp, #188]	; 0xbc
 80120f0:	e014      	b.n	801211c <falcon_inner_iFFT+0x26c>
			f[u] = fpr_mul(f[u], ni);
 80120f2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80120f4:	00db      	lsls	r3, r3, #3
 80120f6:	9a01      	ldr	r2, [sp, #4]
 80120f8:	4413      	add	r3, r2
 80120fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80120fe:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8012100:	00db      	lsls	r3, r3, #3
 8012102:	9a01      	ldr	r2, [sp, #4]
 8012104:	18d4      	adds	r4, r2, r3
 8012106:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 801210a:	f001 f9b9 	bl	8013480 <falcon_inner_fpr_mul>
 801210e:	4602      	mov	r2, r0
 8012110:	460b      	mov	r3, r1
 8012112:	e9c4 2300 	strd	r2, r3, [r4]
		for (u = 0; u < n; u ++) {
 8012116:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8012118:	3301      	adds	r3, #1
 801211a:	932f      	str	r3, [sp, #188]	; 0xbc
 801211c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801211e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012120:	429a      	cmp	r2, r3
 8012122:	d3e6      	bcc.n	80120f2 <falcon_inner_iFFT+0x242>
		}
	}
}
 8012124:	bf00      	nop
 8012126:	b031      	add	sp, #196	; 0xc4
 8012128:	bd30      	pop	{r4, r5, pc}
 801212a:	bf00      	nop
 801212c:	0801f300 	.word	0x0801f300
 8012130:	08023300 	.word	0x08023300
	...

08012140 <falcon_inner_poly_add>:

/* see inner.h */
void
Zf(poly_add)(
	fpr *restrict a, const fpr *restrict b, unsigned logn)
{
 8012140:	b530      	push	{r4, r5, lr}
 8012142:	b087      	sub	sp, #28
 8012144:	9003      	str	r0, [sp, #12]
 8012146:	9102      	str	r1, [sp, #8]
 8012148:	9201      	str	r2, [sp, #4]
	size_t n, u;

	n = (size_t)1 << logn;
 801214a:	2201      	movs	r2, #1
 801214c:	9b01      	ldr	r3, [sp, #4]
 801214e:	fa02 f303 	lsl.w	r3, r2, r3
 8012152:	9304      	str	r3, [sp, #16]
	for (u = 0; u < n; u ++) {
 8012154:	2300      	movs	r3, #0
 8012156:	9305      	str	r3, [sp, #20]
 8012158:	e018      	b.n	801218c <falcon_inner_poly_add+0x4c>
		a[u] = fpr_add(a[u], b[u]);
 801215a:	9b05      	ldr	r3, [sp, #20]
 801215c:	00db      	lsls	r3, r3, #3
 801215e:	9a03      	ldr	r2, [sp, #12]
 8012160:	4413      	add	r3, r2
 8012162:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012166:	9b05      	ldr	r3, [sp, #20]
 8012168:	00db      	lsls	r3, r3, #3
 801216a:	9a02      	ldr	r2, [sp, #8]
 801216c:	4413      	add	r3, r2
 801216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012172:	9c05      	ldr	r4, [sp, #20]
 8012174:	00e4      	lsls	r4, r4, #3
 8012176:	9d03      	ldr	r5, [sp, #12]
 8012178:	442c      	add	r4, r5
 801217a:	f001 f8d9 	bl	8013330 <falcon_inner_fpr_add>
 801217e:	4602      	mov	r2, r0
 8012180:	460b      	mov	r3, r1
 8012182:	e9c4 2300 	strd	r2, r3, [r4]
	for (u = 0; u < n; u ++) {
 8012186:	9b05      	ldr	r3, [sp, #20]
 8012188:	3301      	adds	r3, #1
 801218a:	9305      	str	r3, [sp, #20]
 801218c:	9a05      	ldr	r2, [sp, #20]
 801218e:	9b04      	ldr	r3, [sp, #16]
 8012190:	429a      	cmp	r2, r3
 8012192:	d3e2      	bcc.n	801215a <falcon_inner_poly_add+0x1a>
	}
}
 8012194:	bf00      	nop
 8012196:	bf00      	nop
 8012198:	b007      	add	sp, #28
 801219a:	bd30      	pop	{r4, r5, pc}
 801219c:	0000      	movs	r0, r0
	...

080121a0 <falcon_inner_poly_sub>:

/* see inner.h */
void
Zf(poly_sub)(
	fpr *restrict a, const fpr *restrict b, unsigned logn)
{
 80121a0:	b530      	push	{r4, r5, lr}
 80121a2:	b087      	sub	sp, #28
 80121a4:	9003      	str	r0, [sp, #12]
 80121a6:	9102      	str	r1, [sp, #8]
 80121a8:	9201      	str	r2, [sp, #4]
	size_t n, u;

	n = (size_t)1 << logn;
 80121aa:	2201      	movs	r2, #1
 80121ac:	9b01      	ldr	r3, [sp, #4]
 80121ae:	fa02 f303 	lsl.w	r3, r2, r3
 80121b2:	9304      	str	r3, [sp, #16]
	for (u = 0; u < n; u ++) {
 80121b4:	2300      	movs	r3, #0
 80121b6:	9305      	str	r3, [sp, #20]
 80121b8:	e018      	b.n	80121ec <falcon_inner_poly_sub+0x4c>
		a[u] = fpr_sub(a[u], b[u]);
 80121ba:	9b05      	ldr	r3, [sp, #20]
 80121bc:	00db      	lsls	r3, r3, #3
 80121be:	9a03      	ldr	r2, [sp, #12]
 80121c0:	4413      	add	r3, r2
 80121c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80121c6:	9b05      	ldr	r3, [sp, #20]
 80121c8:	00db      	lsls	r3, r3, #3
 80121ca:	9a02      	ldr	r2, [sp, #8]
 80121cc:	4413      	add	r3, r2
 80121ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d2:	9c05      	ldr	r4, [sp, #20]
 80121d4:	00e4      	lsls	r4, r4, #3
 80121d6:	9d03      	ldr	r5, [sp, #12]
 80121d8:	442c      	add	r4, r5
 80121da:	f7ff fcb9 	bl	8011b50 <fpr_sub.lto_priv.1>
 80121de:	4602      	mov	r2, r0
 80121e0:	460b      	mov	r3, r1
 80121e2:	e9c4 2300 	strd	r2, r3, [r4]
	for (u = 0; u < n; u ++) {
 80121e6:	9b05      	ldr	r3, [sp, #20]
 80121e8:	3301      	adds	r3, #1
 80121ea:	9305      	str	r3, [sp, #20]
 80121ec:	9a05      	ldr	r2, [sp, #20]
 80121ee:	9b04      	ldr	r3, [sp, #16]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d3e2      	bcc.n	80121ba <falcon_inner_poly_sub+0x1a>
	}
}
 80121f4:	bf00      	nop
 80121f6:	bf00      	nop
 80121f8:	b007      	add	sp, #28
 80121fa:	bd30      	pop	{r4, r5, pc}
 80121fc:	0000      	movs	r0, r0
	...

08012200 <falcon_inner_poly_neg>:

/* see inner.h */
void
Zf(poly_neg)(fpr *a, unsigned logn)
{
 8012200:	b510      	push	{r4, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	9001      	str	r0, [sp, #4]
 8012206:	9100      	str	r1, [sp, #0]
	size_t n, u;

	n = (size_t)1 << logn;
 8012208:	2201      	movs	r2, #1
 801220a:	9b00      	ldr	r3, [sp, #0]
 801220c:	fa02 f303 	lsl.w	r3, r2, r3
 8012210:	9302      	str	r3, [sp, #8]
	for (u = 0; u < n; u ++) {
 8012212:	2300      	movs	r3, #0
 8012214:	9303      	str	r3, [sp, #12]
 8012216:	e014      	b.n	8012242 <falcon_inner_poly_neg+0x42>
		a[u] = fpr_neg(a[u]);
 8012218:	9b03      	ldr	r3, [sp, #12]
 801221a:	00db      	lsls	r3, r3, #3
 801221c:	9a01      	ldr	r2, [sp, #4]
 801221e:	4413      	add	r3, r2
 8012220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012224:	9903      	ldr	r1, [sp, #12]
 8012226:	00c9      	lsls	r1, r1, #3
 8012228:	9801      	ldr	r0, [sp, #4]
 801222a:	1844      	adds	r4, r0, r1
 801222c:	4610      	mov	r0, r2
 801222e:	4619      	mov	r1, r3
 8012230:	f7ff fcae 	bl	8011b90 <fpr_neg.lto_priv.1>
 8012234:	4602      	mov	r2, r0
 8012236:	460b      	mov	r3, r1
 8012238:	e9c4 2300 	strd	r2, r3, [r4]
	for (u = 0; u < n; u ++) {
 801223c:	9b03      	ldr	r3, [sp, #12]
 801223e:	3301      	adds	r3, #1
 8012240:	9303      	str	r3, [sp, #12]
 8012242:	9a03      	ldr	r2, [sp, #12]
 8012244:	9b02      	ldr	r3, [sp, #8]
 8012246:	429a      	cmp	r2, r3
 8012248:	d3e6      	bcc.n	8012218 <falcon_inner_poly_neg+0x18>
	}
}
 801224a:	bf00      	nop
 801224c:	bf00      	nop
 801224e:	b004      	add	sp, #16
 8012250:	bd10      	pop	{r4, pc}
 8012252:	bf00      	nop
	...

08012260 <falcon_inner_poly_adj_fft>:

/* see inner.h */
void
Zf(poly_adj_fft)(fpr *a, unsigned logn)
{
 8012260:	b510      	push	{r4, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	9001      	str	r0, [sp, #4]
 8012266:	9100      	str	r1, [sp, #0]
	size_t n, u;

	n = (size_t)1 << logn;
 8012268:	2201      	movs	r2, #1
 801226a:	9b00      	ldr	r3, [sp, #0]
 801226c:	fa02 f303 	lsl.w	r3, r2, r3
 8012270:	9302      	str	r3, [sp, #8]
	for (u = (n >> 1); u < n; u ++) {
 8012272:	9b02      	ldr	r3, [sp, #8]
 8012274:	085b      	lsrs	r3, r3, #1
 8012276:	9303      	str	r3, [sp, #12]
 8012278:	e014      	b.n	80122a4 <falcon_inner_poly_adj_fft+0x44>
		a[u] = fpr_neg(a[u]);
 801227a:	9b03      	ldr	r3, [sp, #12]
 801227c:	00db      	lsls	r3, r3, #3
 801227e:	9a01      	ldr	r2, [sp, #4]
 8012280:	4413      	add	r3, r2
 8012282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012286:	9903      	ldr	r1, [sp, #12]
 8012288:	00c9      	lsls	r1, r1, #3
 801228a:	9801      	ldr	r0, [sp, #4]
 801228c:	1844      	adds	r4, r0, r1
 801228e:	4610      	mov	r0, r2
 8012290:	4619      	mov	r1, r3
 8012292:	f7ff fc7d 	bl	8011b90 <fpr_neg.lto_priv.1>
 8012296:	4602      	mov	r2, r0
 8012298:	460b      	mov	r3, r1
 801229a:	e9c4 2300 	strd	r2, r3, [r4]
	for (u = (n >> 1); u < n; u ++) {
 801229e:	9b03      	ldr	r3, [sp, #12]
 80122a0:	3301      	adds	r3, #1
 80122a2:	9303      	str	r3, [sp, #12]
 80122a4:	9a03      	ldr	r2, [sp, #12]
 80122a6:	9b02      	ldr	r3, [sp, #8]
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d3e6      	bcc.n	801227a <falcon_inner_poly_adj_fft+0x1a>
	}
}
 80122ac:	bf00      	nop
 80122ae:	bf00      	nop
 80122b0:	b004      	add	sp, #16
 80122b2:	bd10      	pop	{r4, pc}
	...

080122c0 <falcon_inner_poly_mul_fft>:

/* see inner.h */
void
Zf(poly_mul_fft)(
	fpr *restrict a, const fpr *restrict b, unsigned logn)
{
 80122c0:	b530      	push	{r4, r5, lr}
 80122c2:	b09d      	sub	sp, #116	; 0x74
 80122c4:	9003      	str	r0, [sp, #12]
 80122c6:	9102      	str	r1, [sp, #8]
 80122c8:	9201      	str	r2, [sp, #4]
	size_t n, hn, u;

	n = (size_t)1 << logn;
 80122ca:	2201      	movs	r2, #1
 80122cc:	9b01      	ldr	r3, [sp, #4]
 80122ce:	fa02 f303 	lsl.w	r3, r2, r3
 80122d2:	931a      	str	r3, [sp, #104]	; 0x68
	hn = n >> 1;
 80122d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80122d6:	085b      	lsrs	r3, r3, #1
 80122d8:	9319      	str	r3, [sp, #100]	; 0x64
	for (u = 0; u < hn; u ++) {
 80122da:	2300      	movs	r3, #0
 80122dc:	931b      	str	r3, [sp, #108]	; 0x6c
 80122de:	e074      	b.n	80123ca <falcon_inner_poly_mul_fft+0x10a>
		fpr a_re, a_im, b_re, b_im;

		a_re = a[u];
 80122e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80122e2:	00db      	lsls	r3, r3, #3
 80122e4:	9a03      	ldr	r2, [sp, #12]
 80122e6:	4413      	add	r3, r2
 80122e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ec:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		a_im = a[u + hn];
 80122f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80122f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80122f4:	4413      	add	r3, r2
 80122f6:	00db      	lsls	r3, r3, #3
 80122f8:	9a03      	ldr	r2, [sp, #12]
 80122fa:	4413      	add	r3, r2
 80122fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012300:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		b_re = b[u];
 8012304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012306:	00db      	lsls	r3, r3, #3
 8012308:	9a02      	ldr	r2, [sp, #8]
 801230a:	4413      	add	r3, r2
 801230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012310:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		b_im = b[u + hn];
 8012314:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012316:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012318:	4413      	add	r3, r2
 801231a:	00db      	lsls	r3, r3, #3
 801231c:	9a02      	ldr	r2, [sp, #8]
 801231e:	4413      	add	r3, r2
 8012320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012324:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		FPC_MUL(a[u], a[u + hn], a_re, a_im, b_re, b_im);
 8012328:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801232c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012330:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012334:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012338:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801233c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012340:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012344:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012348:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801234c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012350:	f001 f896 	bl	8013480 <falcon_inner_fpr_mul>
 8012354:	4604      	mov	r4, r0
 8012356:	460d      	mov	r5, r1
 8012358:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801235c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012360:	f001 f88e 	bl	8013480 <falcon_inner_fpr_mul>
 8012364:	4602      	mov	r2, r0
 8012366:	460b      	mov	r3, r1
 8012368:	4620      	mov	r0, r4
 801236a:	4629      	mov	r1, r5
 801236c:	f7ff fbf0 	bl	8011b50 <fpr_sub.lto_priv.1>
 8012370:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012374:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012378:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801237c:	f001 f880 	bl	8013480 <falcon_inner_fpr_mul>
 8012380:	4604      	mov	r4, r0
 8012382:	460d      	mov	r5, r1
 8012384:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801238c:	f001 f878 	bl	8013480 <falcon_inner_fpr_mul>
 8012390:	4602      	mov	r2, r0
 8012392:	460b      	mov	r3, r1
 8012394:	4620      	mov	r0, r4
 8012396:	4629      	mov	r1, r5
 8012398:	f000 ffca 	bl	8013330 <falcon_inner_fpr_add>
 801239c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80123a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80123a2:	00db      	lsls	r3, r3, #3
 80123a4:	9a03      	ldr	r2, [sp, #12]
 80123a6:	18d1      	adds	r1, r2, r3
 80123a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80123ac:	e9c1 2300 	strd	r2, r3, [r1]
 80123b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80123b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80123b4:	4413      	add	r3, r2
 80123b6:	00db      	lsls	r3, r3, #3
 80123b8:	9a03      	ldr	r2, [sp, #12]
 80123ba:	18d1      	adds	r1, r2, r3
 80123bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123c0:	e9c1 2300 	strd	r2, r3, [r1]
	for (u = 0; u < hn; u ++) {
 80123c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80123c6:	3301      	adds	r3, #1
 80123c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80123ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80123cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d386      	bcc.n	80122e0 <falcon_inner_poly_mul_fft+0x20>
	}
}
 80123d2:	bf00      	nop
 80123d4:	bf00      	nop
 80123d6:	b01d      	add	sp, #116	; 0x74
 80123d8:	bd30      	pop	{r4, r5, pc}
 80123da:	bf00      	nop
 80123dc:	0000      	movs	r0, r0
	...

080123e0 <falcon_inner_poly_muladj_fft>:

/* see inner.h */
void
Zf(poly_muladj_fft)(
	fpr *restrict a, const fpr *restrict b, unsigned logn)
{
 80123e0:	b530      	push	{r4, r5, lr}
 80123e2:	b09d      	sub	sp, #116	; 0x74
 80123e4:	9003      	str	r0, [sp, #12]
 80123e6:	9102      	str	r1, [sp, #8]
 80123e8:	9201      	str	r2, [sp, #4]
	size_t n, hn, u;

	n = (size_t)1 << logn;
 80123ea:	2201      	movs	r2, #1
 80123ec:	9b01      	ldr	r3, [sp, #4]
 80123ee:	fa02 f303 	lsl.w	r3, r2, r3
 80123f2:	931a      	str	r3, [sp, #104]	; 0x68
	hn = n >> 1;
 80123f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80123f6:	085b      	lsrs	r3, r3, #1
 80123f8:	9319      	str	r3, [sp, #100]	; 0x64
	for (u = 0; u < hn; u ++) {
 80123fa:	2300      	movs	r3, #0
 80123fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80123fe:	e078      	b.n	80124f2 <falcon_inner_poly_muladj_fft+0x112>
		fpr a_re, a_im, b_re, b_im;

		a_re = a[u];
 8012400:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012402:	00db      	lsls	r3, r3, #3
 8012404:	9a03      	ldr	r2, [sp, #12]
 8012406:	4413      	add	r3, r2
 8012408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		a_im = a[u + hn];
 8012410:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012412:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012414:	4413      	add	r3, r2
 8012416:	00db      	lsls	r3, r3, #3
 8012418:	9a03      	ldr	r2, [sp, #12]
 801241a:	4413      	add	r3, r2
 801241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012420:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		b_re = b[u];
 8012424:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012426:	00db      	lsls	r3, r3, #3
 8012428:	9a02      	ldr	r2, [sp, #8]
 801242a:	4413      	add	r3, r2
 801242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012430:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		b_im = fpr_neg(b[u + hn]);
 8012434:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012436:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012438:	4413      	add	r3, r2
 801243a:	00db      	lsls	r3, r3, #3
 801243c:	9a02      	ldr	r2, [sp, #8]
 801243e:	4413      	add	r3, r2
 8012440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012444:	4610      	mov	r0, r2
 8012446:	4619      	mov	r1, r3
 8012448:	f7ff fba2 	bl	8011b90 <fpr_neg.lto_priv.1>
 801244c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
		FPC_MUL(a[u], a[u + hn], a_re, a_im, b_re, b_im);
 8012450:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012454:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012458:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801245c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012460:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8012464:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012468:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801246c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012470:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012474:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012478:	f001 f802 	bl	8013480 <falcon_inner_fpr_mul>
 801247c:	4604      	mov	r4, r0
 801247e:	460d      	mov	r5, r1
 8012480:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012488:	f000 fffa 	bl	8013480 <falcon_inner_fpr_mul>
 801248c:	4602      	mov	r2, r0
 801248e:	460b      	mov	r3, r1
 8012490:	4620      	mov	r0, r4
 8012492:	4629      	mov	r1, r5
 8012494:	f7ff fb5c 	bl	8011b50 <fpr_sub.lto_priv.1>
 8012498:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801249c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80124a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80124a4:	f000 ffec 	bl	8013480 <falcon_inner_fpr_mul>
 80124a8:	4604      	mov	r4, r0
 80124aa:	460d      	mov	r5, r1
 80124ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80124b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80124b4:	f000 ffe4 	bl	8013480 <falcon_inner_fpr_mul>
 80124b8:	4602      	mov	r2, r0
 80124ba:	460b      	mov	r3, r1
 80124bc:	4620      	mov	r0, r4
 80124be:	4629      	mov	r1, r5
 80124c0:	f000 ff36 	bl	8013330 <falcon_inner_fpr_add>
 80124c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80124c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80124ca:	00db      	lsls	r3, r3, #3
 80124cc:	9a03      	ldr	r2, [sp, #12]
 80124ce:	18d1      	adds	r1, r2, r3
 80124d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80124d4:	e9c1 2300 	strd	r2, r3, [r1]
 80124d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80124da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80124dc:	4413      	add	r3, r2
 80124de:	00db      	lsls	r3, r3, #3
 80124e0:	9a03      	ldr	r2, [sp, #12]
 80124e2:	18d1      	adds	r1, r2, r3
 80124e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80124e8:	e9c1 2300 	strd	r2, r3, [r1]
	for (u = 0; u < hn; u ++) {
 80124ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80124ee:	3301      	adds	r3, #1
 80124f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80124f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80124f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d382      	bcc.n	8012400 <falcon_inner_poly_muladj_fft+0x20>
	}
}
 80124fa:	bf00      	nop
 80124fc:	bf00      	nop
 80124fe:	b01d      	add	sp, #116	; 0x74
 8012500:	bd30      	pop	{r4, r5, pc}
 8012502:	bf00      	nop
	...

08012510 <falcon_inner_poly_mulselfadj_fft>:

/* see inner.h */
void
Zf(poly_mulselfadj_fft)(fpr *a, unsigned logn)
{
 8012510:	b570      	push	{r4, r5, r6, lr}
 8012512:	b08a      	sub	sp, #40	; 0x28
 8012514:	9001      	str	r0, [sp, #4]
 8012516:	9100      	str	r1, [sp, #0]
	 * Since each coefficient is multiplied with its own conjugate,
	 * the result contains only real values.
	 */
	size_t n, hn, u;

	n = (size_t)1 << logn;
 8012518:	2201      	movs	r2, #1
 801251a:	9b00      	ldr	r3, [sp, #0]
 801251c:	fa02 f303 	lsl.w	r3, r2, r3
 8012520:	9308      	str	r3, [sp, #32]
	hn = n >> 1;
 8012522:	9b08      	ldr	r3, [sp, #32]
 8012524:	085b      	lsrs	r3, r3, #1
 8012526:	9307      	str	r3, [sp, #28]
	for (u = 0; u < hn; u ++) {
 8012528:	2300      	movs	r3, #0
 801252a:	9309      	str	r3, [sp, #36]	; 0x24
 801252c:	e038      	b.n	80125a0 <falcon_inner_poly_mulselfadj_fft+0x90>
		fpr a_re, a_im;

		a_re = a[u];
 801252e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012530:	00db      	lsls	r3, r3, #3
 8012532:	9a01      	ldr	r2, [sp, #4]
 8012534:	4413      	add	r3, r2
 8012536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801253a:	e9cd 2304 	strd	r2, r3, [sp, #16]
		a_im = a[u + hn];
 801253e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012540:	9b07      	ldr	r3, [sp, #28]
 8012542:	4413      	add	r3, r2
 8012544:	00db      	lsls	r3, r3, #3
 8012546:	9a01      	ldr	r2, [sp, #4]
 8012548:	4413      	add	r3, r2
 801254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801254e:	e9cd 2302 	strd	r2, r3, [sp, #8]
		a[u] = fpr_add(fpr_sqr(a_re), fpr_sqr(a_im));
 8012552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012556:	f7ff fb63 	bl	8011c20 <fpr_sqr.lto_priv.1>
 801255a:	4604      	mov	r4, r0
 801255c:	460d      	mov	r5, r1
 801255e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012562:	f7ff fb5d 	bl	8011c20 <fpr_sqr.lto_priv.1>
 8012566:	4602      	mov	r2, r0
 8012568:	460b      	mov	r3, r1
 801256a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801256c:	00c9      	lsls	r1, r1, #3
 801256e:	9801      	ldr	r0, [sp, #4]
 8012570:	1846      	adds	r6, r0, r1
 8012572:	4620      	mov	r0, r4
 8012574:	4629      	mov	r1, r5
 8012576:	f000 fedb 	bl	8013330 <falcon_inner_fpr_add>
 801257a:	4602      	mov	r2, r0
 801257c:	460b      	mov	r3, r1
 801257e:	e9c6 2300 	strd	r2, r3, [r6]
		a[u + hn] = fpr_zero;
 8012582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012584:	9b07      	ldr	r3, [sp, #28]
 8012586:	4413      	add	r3, r2
 8012588:	00db      	lsls	r3, r3, #3
 801258a:	9a01      	ldr	r2, [sp, #4]
 801258c:	18d1      	adds	r1, r2, r3
 801258e:	f04f 0200 	mov.w	r2, #0
 8012592:	f04f 0300 	mov.w	r3, #0
 8012596:	e9c1 2300 	strd	r2, r3, [r1]
	for (u = 0; u < hn; u ++) {
 801259a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801259c:	3301      	adds	r3, #1
 801259e:	9309      	str	r3, [sp, #36]	; 0x24
 80125a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125a2:	9b07      	ldr	r3, [sp, #28]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d3c2      	bcc.n	801252e <falcon_inner_poly_mulselfadj_fft+0x1e>
	}
}
 80125a8:	bf00      	nop
 80125aa:	bf00      	nop
 80125ac:	b00a      	add	sp, #40	; 0x28
 80125ae:	bd70      	pop	{r4, r5, r6, pc}

080125b0 <falcon_inner_poly_mulconst>:

/* see inner.h */
void
Zf(poly_mulconst)(fpr *a, fpr x, unsigned logn)
{
 80125b0:	b510      	push	{r4, lr}
 80125b2:	b086      	sub	sp, #24
 80125b4:	9003      	str	r0, [sp, #12]
 80125b6:	e9cd 2300 	strd	r2, r3, [sp]
	size_t n, u;

	n = (size_t)1 << logn;
 80125ba:	2201      	movs	r2, #1
 80125bc:	9b08      	ldr	r3, [sp, #32]
 80125be:	fa02 f303 	lsl.w	r3, r2, r3
 80125c2:	9304      	str	r3, [sp, #16]
	for (u = 0; u < n; u ++) {
 80125c4:	2300      	movs	r3, #0
 80125c6:	9305      	str	r3, [sp, #20]
 80125c8:	e014      	b.n	80125f4 <falcon_inner_poly_mulconst+0x44>
		a[u] = fpr_mul(a[u], x);
 80125ca:	9b05      	ldr	r3, [sp, #20]
 80125cc:	00db      	lsls	r3, r3, #3
 80125ce:	9a03      	ldr	r2, [sp, #12]
 80125d0:	4413      	add	r3, r2
 80125d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80125d6:	9b05      	ldr	r3, [sp, #20]
 80125d8:	00db      	lsls	r3, r3, #3
 80125da:	9a03      	ldr	r2, [sp, #12]
 80125dc:	18d4      	adds	r4, r2, r3
 80125de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125e2:	f000 ff4d 	bl	8013480 <falcon_inner_fpr_mul>
 80125e6:	4602      	mov	r2, r0
 80125e8:	460b      	mov	r3, r1
 80125ea:	e9c4 2300 	strd	r2, r3, [r4]
	for (u = 0; u < n; u ++) {
 80125ee:	9b05      	ldr	r3, [sp, #20]
 80125f0:	3301      	adds	r3, #1
 80125f2:	9305      	str	r3, [sp, #20]
 80125f4:	9a05      	ldr	r2, [sp, #20]
 80125f6:	9b04      	ldr	r3, [sp, #16]
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d3e6      	bcc.n	80125ca <falcon_inner_poly_mulconst+0x1a>
	}
}
 80125fc:	bf00      	nop
 80125fe:	bf00      	nop
 8012600:	b006      	add	sp, #24
 8012602:	bd10      	pop	{r4, pc}
	...

08012610 <falcon_inner_poly_invnorm2_fft>:

/* see inner.h */
void
Zf(poly_invnorm2_fft)(fpr *restrict d,
	const fpr *restrict a, const fpr *restrict b, unsigned logn)
{
 8012610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012612:	b091      	sub	sp, #68	; 0x44
 8012614:	9003      	str	r0, [sp, #12]
 8012616:	9102      	str	r1, [sp, #8]
 8012618:	9201      	str	r2, [sp, #4]
 801261a:	9300      	str	r3, [sp, #0]
	size_t n, hn, u;

	n = (size_t)1 << logn;
 801261c:	2201      	movs	r2, #1
 801261e:	9b00      	ldr	r3, [sp, #0]
 8012620:	fa02 f303 	lsl.w	r3, r2, r3
 8012624:	930e      	str	r3, [sp, #56]	; 0x38
	hn = n >> 1;
 8012626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012628:	085b      	lsrs	r3, r3, #1
 801262a:	930d      	str	r3, [sp, #52]	; 0x34
	for (u = 0; u < hn; u ++) {
 801262c:	2300      	movs	r3, #0
 801262e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012630:	e05c      	b.n	80126ec <falcon_inner_poly_invnorm2_fft+0xdc>
		fpr a_re, a_im;
		fpr b_re, b_im;

		a_re = a[u];
 8012632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012634:	00db      	lsls	r3, r3, #3
 8012636:	9a02      	ldr	r2, [sp, #8]
 8012638:	4413      	add	r3, r2
 801263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		a_im = a[u + hn];
 8012642:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012646:	4413      	add	r3, r2
 8012648:	00db      	lsls	r3, r3, #3
 801264a:	9a02      	ldr	r2, [sp, #8]
 801264c:	4413      	add	r3, r2
 801264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012652:	e9cd 2308 	strd	r2, r3, [sp, #32]
		b_re = b[u];
 8012656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012658:	00db      	lsls	r3, r3, #3
 801265a:	9a01      	ldr	r2, [sp, #4]
 801265c:	4413      	add	r3, r2
 801265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012662:	e9cd 2306 	strd	r2, r3, [sp, #24]
		b_im = b[u + hn];
 8012666:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801266a:	4413      	add	r3, r2
 801266c:	00db      	lsls	r3, r3, #3
 801266e:	9a01      	ldr	r2, [sp, #4]
 8012670:	4413      	add	r3, r2
 8012672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012676:	e9cd 2304 	strd	r2, r3, [sp, #16]
		d[u] = fpr_inv(fpr_add(
 801267a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801267e:	f7ff facf 	bl	8011c20 <fpr_sqr.lto_priv.1>
 8012682:	4604      	mov	r4, r0
 8012684:	460d      	mov	r5, r1
 8012686:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801268a:	f7ff fac9 	bl	8011c20 <fpr_sqr.lto_priv.1>
 801268e:	4602      	mov	r2, r0
 8012690:	460b      	mov	r3, r1
 8012692:	4620      	mov	r0, r4
 8012694:	4629      	mov	r1, r5
 8012696:	f000 fe4b 	bl	8013330 <falcon_inner_fpr_add>
 801269a:	4604      	mov	r4, r0
 801269c:	460d      	mov	r5, r1
 801269e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80126a2:	f7ff fabd 	bl	8011c20 <fpr_sqr.lto_priv.1>
 80126a6:	4606      	mov	r6, r0
 80126a8:	460f      	mov	r7, r1
 80126aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80126ae:	f7ff fab7 	bl	8011c20 <fpr_sqr.lto_priv.1>
 80126b2:	4602      	mov	r2, r0
 80126b4:	460b      	mov	r3, r1
 80126b6:	4630      	mov	r0, r6
 80126b8:	4639      	mov	r1, r7
 80126ba:	f000 fe39 	bl	8013330 <falcon_inner_fpr_add>
 80126be:	4602      	mov	r2, r0
 80126c0:	460b      	mov	r3, r1
 80126c2:	4620      	mov	r0, r4
 80126c4:	4629      	mov	r1, r5
 80126c6:	f000 fe33 	bl	8013330 <falcon_inner_fpr_add>
 80126ca:	4602      	mov	r2, r0
 80126cc:	460b      	mov	r3, r1
 80126ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80126d0:	00c9      	lsls	r1, r1, #3
 80126d2:	9803      	ldr	r0, [sp, #12]
 80126d4:	1844      	adds	r4, r0, r1
 80126d6:	4610      	mov	r0, r2
 80126d8:	4619      	mov	r1, r3
 80126da:	f7ff fab9 	bl	8011c50 <fpr_inv>
 80126de:	4602      	mov	r2, r0
 80126e0:	460b      	mov	r3, r1
 80126e2:	e9c4 2300 	strd	r2, r3, [r4]
	for (u = 0; u < hn; u ++) {
 80126e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80126e8:	3301      	adds	r3, #1
 80126ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80126ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80126ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126f0:	429a      	cmp	r2, r3
 80126f2:	d39e      	bcc.n	8012632 <falcon_inner_poly_invnorm2_fft+0x22>
			fpr_add(fpr_sqr(a_re), fpr_sqr(a_im)),
			fpr_add(fpr_sqr(b_re), fpr_sqr(b_im))));
	}
}
 80126f4:	bf00      	nop
 80126f6:	bf00      	nop
 80126f8:	b011      	add	sp, #68	; 0x44
 80126fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126fc:	0000      	movs	r0, r0
	...

08012700 <falcon_inner_poly_add_muladj_fft>:
/* see inner.h */
void
Zf(poly_add_muladj_fft)(fpr *restrict d,
	const fpr *restrict F, const fpr *restrict G,
	const fpr *restrict f, const fpr *restrict g, unsigned logn)
{
 8012700:	b530      	push	{r4, r5, lr}
 8012702:	b0b9      	sub	sp, #228	; 0xe4
 8012704:	9003      	str	r0, [sp, #12]
 8012706:	9102      	str	r1, [sp, #8]
 8012708:	9201      	str	r2, [sp, #4]
 801270a:	9300      	str	r3, [sp, #0]
	size_t n, hn, u;

	n = (size_t)1 << logn;
 801270c:	2201      	movs	r2, #1
 801270e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8012710:	fa02 f303 	lsl.w	r3, r2, r3
 8012714:	9336      	str	r3, [sp, #216]	; 0xd8
	hn = n >> 1;
 8012716:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8012718:	085b      	lsrs	r3, r3, #1
 801271a:	9335      	str	r3, [sp, #212]	; 0xd4
	for (u = 0; u < hn; u ++) {
 801271c:	2300      	movs	r3, #0
 801271e:	9337      	str	r3, [sp, #220]	; 0xdc
 8012720:	e0f4      	b.n	801290c <falcon_inner_poly_add_muladj_fft+0x20c>
		fpr F_re, F_im, G_re, G_im;
		fpr f_re, f_im, g_re, g_im;
		fpr a_re, a_im, b_re, b_im;

		F_re = F[u];
 8012722:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8012724:	00db      	lsls	r3, r3, #3
 8012726:	9a02      	ldr	r2, [sp, #8]
 8012728:	4413      	add	r3, r2
 801272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272e:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
		F_im = F[u + hn];
 8012732:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8012734:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8012736:	4413      	add	r3, r2
 8012738:	00db      	lsls	r3, r3, #3
 801273a:	9a02      	ldr	r2, [sp, #8]
 801273c:	4413      	add	r3, r2
 801273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012742:	e9cd 2330 	strd	r2, r3, [sp, #192]	; 0xc0
		G_re = G[u];
 8012746:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8012748:	00db      	lsls	r3, r3, #3
 801274a:	9a01      	ldr	r2, [sp, #4]
 801274c:	4413      	add	r3, r2
 801274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012752:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
		G_im = G[u + hn];
 8012756:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8012758:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801275a:	4413      	add	r3, r2
 801275c:	00db      	lsls	r3, r3, #3
 801275e:	9a01      	ldr	r2, [sp, #4]
 8012760:	4413      	add	r3, r2
 8012762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012766:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
		f_re = f[u];
 801276a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 801276c:	00db      	lsls	r3, r3, #3
 801276e:	9a00      	ldr	r2, [sp, #0]
 8012770:	4413      	add	r3, r2
 8012772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012776:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
		f_im = f[u + hn];
 801277a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801277c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801277e:	4413      	add	r3, r2
 8012780:	00db      	lsls	r3, r3, #3
 8012782:	9a00      	ldr	r2, [sp, #0]
 8012784:	4413      	add	r3, r2
 8012786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278a:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
		g_re = g[u];
 801278e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8012790:	00db      	lsls	r3, r3, #3
 8012792:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8012794:	4413      	add	r3, r2
 8012796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279a:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
		g_im = g[u + hn];
 801279e:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80127a0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80127a2:	4413      	add	r3, r2
 80127a4:	00db      	lsls	r3, r3, #3
 80127a6:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 80127a8:	4413      	add	r3, r2
 80127aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ae:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90

		FPC_MUL(a_re, a_im, F_re, F_im, f_re, fpr_neg(f_im));
 80127b2:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 80127b6:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 80127ba:	e9dd 2330 	ldrd	r2, r3, [sp, #192]	; 0xc0
 80127be:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80127c2:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 80127c6:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 80127ca:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 80127ce:	f7ff f9df 	bl	8011b90 <fpr_neg.lto_priv.1>
 80127d2:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 80127d6:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 80127da:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 80127de:	f000 fe4f 	bl	8013480 <falcon_inner_fpr_mul>
 80127e2:	4604      	mov	r4, r0
 80127e4:	460d      	mov	r5, r1
 80127e6:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80127ea:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 80127ee:	f000 fe47 	bl	8013480 <falcon_inner_fpr_mul>
 80127f2:	4602      	mov	r2, r0
 80127f4:	460b      	mov	r3, r1
 80127f6:	4620      	mov	r0, r4
 80127f8:	4629      	mov	r1, r5
 80127fa:	f7ff f9a9 	bl	8011b50 <fpr_sub.lto_priv.1>
 80127fe:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 8012802:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8012806:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 801280a:	f000 fe39 	bl	8013480 <falcon_inner_fpr_mul>
 801280e:	4604      	mov	r4, r0
 8012810:	460d      	mov	r5, r1
 8012812:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8012816:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 801281a:	f000 fe31 	bl	8013480 <falcon_inner_fpr_mul>
 801281e:	4602      	mov	r2, r0
 8012820:	460b      	mov	r3, r1
 8012822:	4620      	mov	r0, r4
 8012824:	4629      	mov	r1, r5
 8012826:	f000 fd83 	bl	8013330 <falcon_inner_fpr_add>
 801282a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 801282e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8012832:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8012836:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801283a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		FPC_MUL(b_re, b_im, G_re, G_im, g_re, fpr_neg(g_im));
 801283e:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
 8012842:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8012846:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 801284a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801284e:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8012852:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012856:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 801285a:	f7ff f999 	bl	8011b90 <fpr_neg.lto_priv.1>
 801285e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012862:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012866:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801286a:	f000 fe09 	bl	8013480 <falcon_inner_fpr_mul>
 801286e:	4604      	mov	r4, r0
 8012870:	460d      	mov	r5, r1
 8012872:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012876:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801287a:	f000 fe01 	bl	8013480 <falcon_inner_fpr_mul>
 801287e:	4602      	mov	r2, r0
 8012880:	460b      	mov	r3, r1
 8012882:	4620      	mov	r0, r4
 8012884:	4629      	mov	r1, r5
 8012886:	f7ff f963 	bl	8011b50 <fpr_sub.lto_priv.1>
 801288a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801288e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012892:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8012896:	f000 fdf3 	bl	8013480 <falcon_inner_fpr_mul>
 801289a:	4604      	mov	r4, r0
 801289c:	460d      	mov	r5, r1
 801289e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80128a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80128a6:	f000 fdeb 	bl	8013480 <falcon_inner_fpr_mul>
 80128aa:	4602      	mov	r2, r0
 80128ac:	460b      	mov	r3, r1
 80128ae:	4620      	mov	r0, r4
 80128b0:	4629      	mov	r1, r5
 80128b2:	f000 fd3d 	bl	8013330 <falcon_inner_fpr_add>
 80128b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80128ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80128be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80128c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80128c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
		d[u] = fpr_add(a_re, b_re);
 80128ca:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80128cc:	00db      	lsls	r3, r3, #3
 80128ce:	9a03      	ldr	r2, [sp, #12]
 80128d0:	18d4      	adds	r4, r2, r3
 80128d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80128d6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80128da:	f000 fd29 	bl	8013330 <falcon_inner_fpr_add>
 80128de:	4602      	mov	r2, r0
 80128e0:	460b      	mov	r3, r1
 80128e2:	e9c4 2300 	strd	r2, r3, [r4]
		d[u + hn] = fpr_add(a_im, b_im);
 80128e6:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80128e8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80128ea:	4413      	add	r3, r2
 80128ec:	00db      	lsls	r3, r3, #3
 80128ee:	9a03      	ldr	r2, [sp, #12]
 80128f0:	18d4      	adds	r4, r2, r3
 80128f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80128f6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80128fa:	f000 fd19 	bl	8013330 <falcon_inner_fpr_add>
 80128fe:	4602      	mov	r2, r0
 8012900:	460b      	mov	r3, r1
 8012902:	e9c4 2300 	strd	r2, r3, [r4]
	for (u = 0; u < hn; u ++) {
 8012906:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8012908:	3301      	adds	r3, #1
 801290a:	9337      	str	r3, [sp, #220]	; 0xdc
 801290c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801290e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8012910:	429a      	cmp	r2, r3
 8012912:	f4ff af06 	bcc.w	8012722 <falcon_inner_poly_add_muladj_fft+0x22>
	}
}
 8012916:	bf00      	nop
 8012918:	bf00      	nop
 801291a:	b039      	add	sp, #228	; 0xe4
 801291c:	bd30      	pop	{r4, r5, pc}
 801291e:	bf00      	nop

08012920 <falcon_inner_poly_mul_autoadj_fft>:

/* see inner.h */
void
Zf(poly_mul_autoadj_fft)(
	fpr *restrict a, const fpr *restrict b, unsigned logn)
{
 8012920:	b530      	push	{r4, r5, lr}
 8012922:	b089      	sub	sp, #36	; 0x24
 8012924:	9003      	str	r0, [sp, #12]
 8012926:	9102      	str	r1, [sp, #8]
 8012928:	9201      	str	r2, [sp, #4]
	size_t n, hn, u;

	n = (size_t)1 << logn;
 801292a:	2201      	movs	r2, #1
 801292c:	9b01      	ldr	r3, [sp, #4]
 801292e:	fa02 f303 	lsl.w	r3, r2, r3
 8012932:	9306      	str	r3, [sp, #24]
	hn = n >> 1;
 8012934:	9b06      	ldr	r3, [sp, #24]
 8012936:	085b      	lsrs	r3, r3, #1
 8012938:	9305      	str	r3, [sp, #20]
	for (u = 0; u < hn; u ++) {
 801293a:	2300      	movs	r3, #0
 801293c:	9307      	str	r3, [sp, #28]
 801293e:	e032      	b.n	80129a6 <falcon_inner_poly_mul_autoadj_fft+0x86>
		a[u] = fpr_mul(a[u], b[u]);
 8012940:	9b07      	ldr	r3, [sp, #28]
 8012942:	00db      	lsls	r3, r3, #3
 8012944:	9a03      	ldr	r2, [sp, #12]
 8012946:	4413      	add	r3, r2
 8012948:	e9d3 0100 	ldrd	r0, r1, [r3]
 801294c:	9b07      	ldr	r3, [sp, #28]
 801294e:	00db      	lsls	r3, r3, #3
 8012950:	9a02      	ldr	r2, [sp, #8]
 8012952:	4413      	add	r3, r2
 8012954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012958:	9c07      	ldr	r4, [sp, #28]
 801295a:	00e4      	lsls	r4, r4, #3
 801295c:	9d03      	ldr	r5, [sp, #12]
 801295e:	442c      	add	r4, r5
 8012960:	f000 fd8e 	bl	8013480 <falcon_inner_fpr_mul>
 8012964:	4602      	mov	r2, r0
 8012966:	460b      	mov	r3, r1
 8012968:	e9c4 2300 	strd	r2, r3, [r4]
		a[u + hn] = fpr_mul(a[u + hn], b[u]);
 801296c:	9a07      	ldr	r2, [sp, #28]
 801296e:	9b05      	ldr	r3, [sp, #20]
 8012970:	4413      	add	r3, r2
 8012972:	00db      	lsls	r3, r3, #3
 8012974:	9a03      	ldr	r2, [sp, #12]
 8012976:	4413      	add	r3, r2
 8012978:	e9d3 0100 	ldrd	r0, r1, [r3]
 801297c:	9b07      	ldr	r3, [sp, #28]
 801297e:	00db      	lsls	r3, r3, #3
 8012980:	9a02      	ldr	r2, [sp, #8]
 8012982:	4413      	add	r3, r2
 8012984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012988:	9d07      	ldr	r5, [sp, #28]
 801298a:	9c05      	ldr	r4, [sp, #20]
 801298c:	442c      	add	r4, r5
 801298e:	00e4      	lsls	r4, r4, #3
 8012990:	9d03      	ldr	r5, [sp, #12]
 8012992:	442c      	add	r4, r5
 8012994:	f000 fd74 	bl	8013480 <falcon_inner_fpr_mul>
 8012998:	4602      	mov	r2, r0
 801299a:	460b      	mov	r3, r1
 801299c:	e9c4 2300 	strd	r2, r3, [r4]
	for (u = 0; u < hn; u ++) {
 80129a0:	9b07      	ldr	r3, [sp, #28]
 80129a2:	3301      	adds	r3, #1
 80129a4:	9307      	str	r3, [sp, #28]
 80129a6:	9a07      	ldr	r2, [sp, #28]
 80129a8:	9b05      	ldr	r3, [sp, #20]
 80129aa:	429a      	cmp	r2, r3
 80129ac:	d3c8      	bcc.n	8012940 <falcon_inner_poly_mul_autoadj_fft+0x20>
	}
}
 80129ae:	bf00      	nop
 80129b0:	bf00      	nop
 80129b2:	b009      	add	sp, #36	; 0x24
 80129b4:	bd30      	pop	{r4, r5, pc}
 80129b6:	bf00      	nop
	...

080129c0 <falcon_inner_poly_div_autoadj_fft>:

/* see inner.h */
void
Zf(poly_div_autoadj_fft)(
	fpr *restrict a, const fpr *restrict b, unsigned logn)
{
 80129c0:	b510      	push	{r4, lr}
 80129c2:	b08a      	sub	sp, #40	; 0x28
 80129c4:	9003      	str	r0, [sp, #12]
 80129c6:	9102      	str	r1, [sp, #8]
 80129c8:	9201      	str	r2, [sp, #4]
	size_t n, hn, u;

	n = (size_t)1 << logn;
 80129ca:	2201      	movs	r2, #1
 80129cc:	9b01      	ldr	r3, [sp, #4]
 80129ce:	fa02 f303 	lsl.w	r3, r2, r3
 80129d2:	9308      	str	r3, [sp, #32]
	hn = n >> 1;
 80129d4:	9b08      	ldr	r3, [sp, #32]
 80129d6:	085b      	lsrs	r3, r3, #1
 80129d8:	9307      	str	r3, [sp, #28]
	for (u = 0; u < hn; u ++) {
 80129da:	2300      	movs	r3, #0
 80129dc:	9309      	str	r3, [sp, #36]	; 0x24
 80129de:	e036      	b.n	8012a4e <falcon_inner_poly_div_autoadj_fft+0x8e>
		fpr ib;

		ib = fpr_inv(b[u]);
 80129e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129e2:	00db      	lsls	r3, r3, #3
 80129e4:	9a02      	ldr	r2, [sp, #8]
 80129e6:	4413      	add	r3, r2
 80129e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ec:	4610      	mov	r0, r2
 80129ee:	4619      	mov	r1, r3
 80129f0:	f7ff f92e 	bl	8011c50 <fpr_inv>
 80129f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
		a[u] = fpr_mul(a[u], ib);
 80129f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129fa:	00db      	lsls	r3, r3, #3
 80129fc:	9a03      	ldr	r2, [sp, #12]
 80129fe:	4413      	add	r3, r2
 8012a00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a06:	00db      	lsls	r3, r3, #3
 8012a08:	9a03      	ldr	r2, [sp, #12]
 8012a0a:	18d4      	adds	r4, r2, r3
 8012a0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a10:	f000 fd36 	bl	8013480 <falcon_inner_fpr_mul>
 8012a14:	4602      	mov	r2, r0
 8012a16:	460b      	mov	r3, r1
 8012a18:	e9c4 2300 	strd	r2, r3, [r4]
		a[u + hn] = fpr_mul(a[u + hn], ib);
 8012a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a1e:	9b07      	ldr	r3, [sp, #28]
 8012a20:	4413      	add	r3, r2
 8012a22:	00db      	lsls	r3, r3, #3
 8012a24:	9a03      	ldr	r2, [sp, #12]
 8012a26:	4413      	add	r3, r2
 8012a28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a2e:	9b07      	ldr	r3, [sp, #28]
 8012a30:	4413      	add	r3, r2
 8012a32:	00db      	lsls	r3, r3, #3
 8012a34:	9a03      	ldr	r2, [sp, #12]
 8012a36:	18d4      	adds	r4, r2, r3
 8012a38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a3c:	f000 fd20 	bl	8013480 <falcon_inner_fpr_mul>
 8012a40:	4602      	mov	r2, r0
 8012a42:	460b      	mov	r3, r1
 8012a44:	e9c4 2300 	strd	r2, r3, [r4]
	for (u = 0; u < hn; u ++) {
 8012a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a4a:	3301      	adds	r3, #1
 8012a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8012a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a50:	9b07      	ldr	r3, [sp, #28]
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d3c4      	bcc.n	80129e0 <falcon_inner_poly_div_autoadj_fft+0x20>
	}
}
 8012a56:	bf00      	nop
 8012a58:	bf00      	nop
 8012a5a:	b00a      	add	sp, #40	; 0x28
 8012a5c:	bd10      	pop	{r4, pc}
 8012a5e:	bf00      	nop

08012a60 <falcon_inner_poly_LDL_fft>:
/* see inner.h */
void
Zf(poly_LDL_fft)(
	const fpr *restrict g00,
	fpr *restrict g01, fpr *restrict g11, unsigned logn)
{
 8012a60:	b530      	push	{r4, r5, lr}
 8012a62:	b0b7      	sub	sp, #220	; 0xdc
 8012a64:	9003      	str	r0, [sp, #12]
 8012a66:	9102      	str	r1, [sp, #8]
 8012a68:	9201      	str	r2, [sp, #4]
 8012a6a:	9300      	str	r3, [sp, #0]
	size_t n, hn, u;

	n = (size_t)1 << logn;
 8012a6c:	2201      	movs	r2, #1
 8012a6e:	9b00      	ldr	r3, [sp, #0]
 8012a70:	fa02 f303 	lsl.w	r3, r2, r3
 8012a74:	9334      	str	r3, [sp, #208]	; 0xd0
	hn = n >> 1;
 8012a76:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8012a78:	085b      	lsrs	r3, r3, #1
 8012a7a:	9333      	str	r3, [sp, #204]	; 0xcc
	for (u = 0; u < hn; u ++) {
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	9335      	str	r3, [sp, #212]	; 0xd4
 8012a80:	e124      	b.n	8012ccc <falcon_inner_poly_LDL_fft+0x26c>
		fpr g00_re, g00_im, g01_re, g01_im, g11_re, g11_im;
		fpr mu_re, mu_im;

		g00_re = g00[u];
 8012a82:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8012a84:	00db      	lsls	r3, r3, #3
 8012a86:	9a03      	ldr	r2, [sp, #12]
 8012a88:	4413      	add	r3, r2
 8012a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a8e:	e9cd 2330 	strd	r2, r3, [sp, #192]	; 0xc0
		g00_im = g00[u + hn];
 8012a92:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8012a94:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8012a96:	4413      	add	r3, r2
 8012a98:	00db      	lsls	r3, r3, #3
 8012a9a:	9a03      	ldr	r2, [sp, #12]
 8012a9c:	4413      	add	r3, r2
 8012a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa2:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
		g01_re = g01[u];
 8012aa6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8012aa8:	00db      	lsls	r3, r3, #3
 8012aaa:	9a02      	ldr	r2, [sp, #8]
 8012aac:	4413      	add	r3, r2
 8012aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab2:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
		g01_im = g01[u + hn];
 8012ab6:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8012ab8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8012aba:	4413      	add	r3, r2
 8012abc:	00db      	lsls	r3, r3, #3
 8012abe:	9a02      	ldr	r2, [sp, #8]
 8012ac0:	4413      	add	r3, r2
 8012ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac6:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
		g11_re = g11[u];
 8012aca:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8012acc:	00db      	lsls	r3, r3, #3
 8012ace:	9a01      	ldr	r2, [sp, #4]
 8012ad0:	4413      	add	r3, r2
 8012ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad6:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
		g11_im = g11[u + hn];
 8012ada:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8012adc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8012ade:	4413      	add	r3, r2
 8012ae0:	00db      	lsls	r3, r3, #3
 8012ae2:	9a01      	ldr	r2, [sp, #4]
 8012ae4:	4413      	add	r3, r2
 8012ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aea:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
		FPC_DIV(mu_re, mu_im, g01_re, g01_im, g00_re, g00_im);
 8012aee:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 8012af2:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8012af6:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8012afa:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8012afe:	e9dd 2330 	ldrd	r2, r3, [sp, #192]	; 0xc0
 8012b02:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8012b06:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
 8012b0a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8012b0e:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8012b12:	f7ff f885 	bl	8011c20 <fpr_sqr.lto_priv.1>
 8012b16:	4604      	mov	r4, r0
 8012b18:	460d      	mov	r5, r1
 8012b1a:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8012b1e:	f7ff f87f 	bl	8011c20 <fpr_sqr.lto_priv.1>
 8012b22:	4602      	mov	r2, r0
 8012b24:	460b      	mov	r3, r1
 8012b26:	4620      	mov	r0, r4
 8012b28:	4629      	mov	r1, r5
 8012b2a:	f000 fc01 	bl	8013330 <falcon_inner_fpr_add>
 8012b2e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 8012b32:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8012b36:	f7ff f88b 	bl	8011c50 <fpr_inv>
 8012b3a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 8012b3e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8012b42:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8012b46:	f000 fc9b 	bl	8013480 <falcon_inner_fpr_mul>
 8012b4a:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8012b4e:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8012b52:	f7ff f81d 	bl	8011b90 <fpr_neg.lto_priv.1>
 8012b56:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8012b5a:	f000 fc91 	bl	8013480 <falcon_inner_fpr_mul>
 8012b5e:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 8012b62:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8012b66:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8012b6a:	f000 fc89 	bl	8013480 <falcon_inner_fpr_mul>
 8012b6e:	4604      	mov	r4, r0
 8012b70:	460d      	mov	r5, r1
 8012b72:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8012b76:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8012b7a:	f000 fc81 	bl	8013480 <falcon_inner_fpr_mul>
 8012b7e:	4602      	mov	r2, r0
 8012b80:	460b      	mov	r3, r1
 8012b82:	4620      	mov	r0, r4
 8012b84:	4629      	mov	r1, r5
 8012b86:	f7fe ffe3 	bl	8011b50 <fpr_sub.lto_priv.1>
 8012b8a:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 8012b8e:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8012b92:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8012b96:	f000 fc73 	bl	8013480 <falcon_inner_fpr_mul>
 8012b9a:	4604      	mov	r4, r0
 8012b9c:	460d      	mov	r5, r1
 8012b9e:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8012ba2:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8012ba6:	f000 fc6b 	bl	8013480 <falcon_inner_fpr_mul>
 8012baa:	4602      	mov	r2, r0
 8012bac:	460b      	mov	r3, r1
 8012bae:	4620      	mov	r0, r4
 8012bb0:	4629      	mov	r1, r5
 8012bb2:	f000 fbbd 	bl	8013330 <falcon_inner_fpr_add>
 8012bb6:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8012bba:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8012bbe:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8012bc2:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8012bc6:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		FPC_MUL(g01_re, g01_im, mu_re, mu_im, g01_re, fpr_neg(g01_im));
 8012bca:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012bce:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8012bd2:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012bd6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8012bda:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 8012bde:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012be2:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8012be6:	f7fe ffd3 	bl	8011b90 <fpr_neg.lto_priv.1>
 8012bea:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012bee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012bf2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8012bf6:	f000 fc43 	bl	8013480 <falcon_inner_fpr_mul>
 8012bfa:	4604      	mov	r4, r0
 8012bfc:	460d      	mov	r5, r1
 8012bfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012c06:	f000 fc3b 	bl	8013480 <falcon_inner_fpr_mul>
 8012c0a:	4602      	mov	r2, r0
 8012c0c:	460b      	mov	r3, r1
 8012c0e:	4620      	mov	r0, r4
 8012c10:	4629      	mov	r1, r5
 8012c12:	f7fe ff9d 	bl	8011b50 <fpr_sub.lto_priv.1>
 8012c16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012c1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012c1e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8012c22:	f000 fc2d 	bl	8013480 <falcon_inner_fpr_mul>
 8012c26:	4604      	mov	r4, r0
 8012c28:	460d      	mov	r5, r1
 8012c2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012c2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012c32:	f000 fc25 	bl	8013480 <falcon_inner_fpr_mul>
 8012c36:	4602      	mov	r2, r0
 8012c38:	460b      	mov	r3, r1
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	4629      	mov	r1, r5
 8012c3e:	f000 fb77 	bl	8013330 <falcon_inner_fpr_add>
 8012c42:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012c46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012c4a:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
 8012c4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012c52:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
		FPC_SUB(g11[u], g11[u + hn], g11_re, g11_im, g01_re, g01_im);
 8012c56:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 8012c5a:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 8012c5e:	f7fe ff77 	bl	8011b50 <fpr_sub.lto_priv.1>
 8012c62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012c66:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8012c6a:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8012c6e:	f7fe ff6f 	bl	8011b50 <fpr_sub.lto_priv.1>
 8012c72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c76:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8012c78:	00db      	lsls	r3, r3, #3
 8012c7a:	9a01      	ldr	r2, [sp, #4]
 8012c7c:	18d1      	adds	r1, r2, r3
 8012c7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012c82:	e9c1 2300 	strd	r2, r3, [r1]
 8012c86:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8012c88:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8012c8a:	4413      	add	r3, r2
 8012c8c:	00db      	lsls	r3, r3, #3
 8012c8e:	9a01      	ldr	r2, [sp, #4]
 8012c90:	18d1      	adds	r1, r2, r3
 8012c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c96:	e9c1 2300 	strd	r2, r3, [r1]
		g01[u] = mu_re;
 8012c9a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8012c9c:	00db      	lsls	r3, r3, #3
 8012c9e:	9a02      	ldr	r2, [sp, #8]
 8012ca0:	18d1      	adds	r1, r2, r3
 8012ca2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012ca6:	e9c1 2300 	strd	r2, r3, [r1]
		g01[u + hn] = fpr_neg(mu_im);
 8012caa:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8012cac:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8012cae:	4413      	add	r3, r2
 8012cb0:	00db      	lsls	r3, r3, #3
 8012cb2:	9a02      	ldr	r2, [sp, #8]
 8012cb4:	18d4      	adds	r4, r2, r3
 8012cb6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8012cba:	f7fe ff69 	bl	8011b90 <fpr_neg.lto_priv.1>
 8012cbe:	4602      	mov	r2, r0
 8012cc0:	460b      	mov	r3, r1
 8012cc2:	e9c4 2300 	strd	r2, r3, [r4]
	for (u = 0; u < hn; u ++) {
 8012cc6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8012cc8:	3301      	adds	r3, #1
 8012cca:	9335      	str	r3, [sp, #212]	; 0xd4
 8012ccc:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8012cce:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	f4ff aed6 	bcc.w	8012a82 <falcon_inner_poly_LDL_fft+0x22>
	}
}
 8012cd6:	bf00      	nop
 8012cd8:	bf00      	nop
 8012cda:	b037      	add	sp, #220	; 0xdc
 8012cdc:	bd30      	pop	{r4, r5, pc}
 8012cde:	bf00      	nop

08012ce0 <falcon_inner_poly_split_fft>:
/* see inner.h */
void
Zf(poly_split_fft)(
	fpr *restrict f0, fpr *restrict f1,
	const fpr *restrict f, unsigned logn)
{
 8012ce0:	b530      	push	{r4, r5, lr}
 8012ce2:	b0a9      	sub	sp, #164	; 0xa4
 8012ce4:	9003      	str	r0, [sp, #12]
 8012ce6:	9102      	str	r1, [sp, #8]
 8012ce8:	9201      	str	r2, [sp, #4]
 8012cea:	9300      	str	r3, [sp, #0]
	 * bit-reversal function over the ring degree. This changes
	 * indexes with regards to the Falcon specification.
	 */
	size_t n, hn, qn, u;

	n = (size_t)1 << logn;
 8012cec:	2201      	movs	r2, #1
 8012cee:	9b00      	ldr	r3, [sp, #0]
 8012cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8012cf4:	9326      	str	r3, [sp, #152]	; 0x98
	hn = n >> 1;
 8012cf6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012cf8:	085b      	lsrs	r3, r3, #1
 8012cfa:	9325      	str	r3, [sp, #148]	; 0x94
	qn = hn >> 1;
 8012cfc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012cfe:	085b      	lsrs	r3, r3, #1
 8012d00:	9324      	str	r3, [sp, #144]	; 0x90
	 * We process complex values by pairs. For logn = 1, there is only
	 * one complex value (the other one is the implicit conjugate),
	 * so we add the two lines below because the loop will be
	 * skipped.
	 */
	f0[0] = f[0];
 8012d02:	9b01      	ldr	r3, [sp, #4]
 8012d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d08:	9903      	ldr	r1, [sp, #12]
 8012d0a:	e9c1 2300 	strd	r2, r3, [r1]
	f1[0] = f[hn];
 8012d0e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012d10:	00db      	lsls	r3, r3, #3
 8012d12:	9a01      	ldr	r2, [sp, #4]
 8012d14:	4413      	add	r3, r2
 8012d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1a:	9902      	ldr	r1, [sp, #8]
 8012d1c:	e9c1 2300 	strd	r2, r3, [r1]

	for (u = 0; u < qn; u ++) {
 8012d20:	2300      	movs	r3, #0
 8012d22:	9327      	str	r3, [sp, #156]	; 0x9c
 8012d24:	e0e5      	b.n	8012ef2 <falcon_inner_poly_split_fft+0x212>
		fpr a_re, a_im, b_re, b_im;
		fpr t_re, t_im;

		a_re = f[(u << 1) + 0];
 8012d26:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8012d28:	011b      	lsls	r3, r3, #4
 8012d2a:	9a01      	ldr	r2, [sp, #4]
 8012d2c:	4413      	add	r3, r2
 8012d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d32:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
		a_im = f[(u << 1) + 0 + hn];
 8012d36:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8012d38:	005a      	lsls	r2, r3, #1
 8012d3a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012d3c:	4413      	add	r3, r2
 8012d3e:	00db      	lsls	r3, r3, #3
 8012d40:	9a01      	ldr	r2, [sp, #4]
 8012d42:	4413      	add	r3, r2
 8012d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d48:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
		b_re = f[(u << 1) + 1];
 8012d4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8012d4e:	011b      	lsls	r3, r3, #4
 8012d50:	3308      	adds	r3, #8
 8012d52:	9a01      	ldr	r2, [sp, #4]
 8012d54:	4413      	add	r3, r2
 8012d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d5a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
		b_im = f[(u << 1) + 1 + hn];
 8012d5e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8012d60:	005a      	lsls	r2, r3, #1
 8012d62:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012d64:	4413      	add	r3, r2
 8012d66:	3301      	adds	r3, #1
 8012d68:	00db      	lsls	r3, r3, #3
 8012d6a:	9a01      	ldr	r2, [sp, #4]
 8012d6c:	4413      	add	r3, r2
 8012d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d72:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70

		FPC_ADD(t_re, t_im, a_re, a_im, b_re, b_im);
 8012d76:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8012d7a:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8012d7e:	f000 fad7 	bl	8013330 <falcon_inner_fpr_add>
 8012d82:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 8012d86:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8012d8a:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8012d8e:	f000 facf 	bl	8013330 <falcon_inner_fpr_add>
 8012d92:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8012d96:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8012d9a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8012d9e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8012da2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		f0[u] = fpr_half(t_re);
 8012da6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8012da8:	00db      	lsls	r3, r3, #3
 8012daa:	9a03      	ldr	r2, [sp, #12]
 8012dac:	18d4      	adds	r4, r2, r3
 8012dae:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8012db2:	f7fe fefd 	bl	8011bb0 <fpr_half.lto_priv.1>
 8012db6:	4602      	mov	r2, r0
 8012db8:	460b      	mov	r3, r1
 8012dba:	e9c4 2300 	strd	r2, r3, [r4]
		f0[u + qn] = fpr_half(t_im);
 8012dbe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8012dc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012dc2:	4413      	add	r3, r2
 8012dc4:	00db      	lsls	r3, r3, #3
 8012dc6:	9a03      	ldr	r2, [sp, #12]
 8012dc8:	18d4      	adds	r4, r2, r3
 8012dca:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8012dce:	f7fe feef 	bl	8011bb0 <fpr_half.lto_priv.1>
 8012dd2:	4602      	mov	r2, r0
 8012dd4:	460b      	mov	r3, r1
 8012dd6:	e9c4 2300 	strd	r2, r3, [r4]

		FPC_SUB(t_re, t_im, a_re, a_im, b_re, b_im);
 8012dda:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8012dde:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8012de2:	f7fe feb5 	bl	8011b50 <fpr_sub.lto_priv.1>
 8012de6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8012dea:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8012dee:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8012df2:	f7fe fead 	bl	8011b50 <fpr_sub.lto_priv.1>
 8012df6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012dfa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8012dfe:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8012e02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012e06:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		FPC_MUL(t_re, t_im, t_re, t_im,
 8012e0a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012e0e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012e12:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012e16:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012e1a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8012e1c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012e1e:	4413      	add	r3, r2
 8012e20:	005b      	lsls	r3, r3, #1
 8012e22:	4a38      	ldr	r2, [pc, #224]	; (8012f04 <falcon_inner_poly_split_fft+0x224>)
 8012e24:	00db      	lsls	r3, r3, #3
 8012e26:	4413      	add	r3, r2
 8012e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012e30:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8012e32:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012e34:	4413      	add	r3, r2
 8012e36:	005b      	lsls	r3, r3, #1
 8012e38:	3301      	adds	r3, #1
 8012e3a:	4a32      	ldr	r2, [pc, #200]	; (8012f04 <falcon_inner_poly_split_fft+0x224>)
 8012e3c:	00db      	lsls	r3, r3, #3
 8012e3e:	4413      	add	r3, r2
 8012e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e44:	4610      	mov	r0, r2
 8012e46:	4619      	mov	r1, r3
 8012e48:	f7fe fea2 	bl	8011b90 <fpr_neg.lto_priv.1>
 8012e4c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012e50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012e54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012e58:	f000 fb12 	bl	8013480 <falcon_inner_fpr_mul>
 8012e5c:	4604      	mov	r4, r0
 8012e5e:	460d      	mov	r5, r1
 8012e60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012e64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012e68:	f000 fb0a 	bl	8013480 <falcon_inner_fpr_mul>
 8012e6c:	4602      	mov	r2, r0
 8012e6e:	460b      	mov	r3, r1
 8012e70:	4620      	mov	r0, r4
 8012e72:	4629      	mov	r1, r5
 8012e74:	f7fe fe6c 	bl	8011b50 <fpr_sub.lto_priv.1>
 8012e78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012e7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012e80:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012e84:	f000 fafc 	bl	8013480 <falcon_inner_fpr_mul>
 8012e88:	4604      	mov	r4, r0
 8012e8a:	460d      	mov	r5, r1
 8012e8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012e94:	f000 faf4 	bl	8013480 <falcon_inner_fpr_mul>
 8012e98:	4602      	mov	r2, r0
 8012e9a:	460b      	mov	r3, r1
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	4629      	mov	r1, r5
 8012ea0:	f000 fa46 	bl	8013330 <falcon_inner_fpr_add>
 8012ea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012ea8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012eac:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8012eb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012eb4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			fpr_gm_tab[((u + hn) << 1) + 0],
			fpr_neg(fpr_gm_tab[((u + hn) << 1) + 1]));
		f1[u] = fpr_half(t_re);
 8012eb8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8012eba:	00db      	lsls	r3, r3, #3
 8012ebc:	9a02      	ldr	r2, [sp, #8]
 8012ebe:	18d4      	adds	r4, r2, r3
 8012ec0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8012ec4:	f7fe fe74 	bl	8011bb0 <fpr_half.lto_priv.1>
 8012ec8:	4602      	mov	r2, r0
 8012eca:	460b      	mov	r3, r1
 8012ecc:	e9c4 2300 	strd	r2, r3, [r4]
		f1[u + qn] = fpr_half(t_im);
 8012ed0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8012ed2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012ed4:	4413      	add	r3, r2
 8012ed6:	00db      	lsls	r3, r3, #3
 8012ed8:	9a02      	ldr	r2, [sp, #8]
 8012eda:	18d4      	adds	r4, r2, r3
 8012edc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8012ee0:	f7fe fe66 	bl	8011bb0 <fpr_half.lto_priv.1>
 8012ee4:	4602      	mov	r2, r0
 8012ee6:	460b      	mov	r3, r1
 8012ee8:	e9c4 2300 	strd	r2, r3, [r4]
	for (u = 0; u < qn; u ++) {
 8012eec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8012eee:	3301      	adds	r3, #1
 8012ef0:	9327      	str	r3, [sp, #156]	; 0x9c
 8012ef2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8012ef4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	f4ff af15 	bcc.w	8012d26 <falcon_inner_poly_split_fft+0x46>
	}
}
 8012efc:	bf00      	nop
 8012efe:	bf00      	nop
 8012f00:	b029      	add	sp, #164	; 0xa4
 8012f02:	bd30      	pop	{r4, r5, pc}
 8012f04:	0801f300 	.word	0x0801f300
	...

08012f10 <falcon_inner_poly_merge_fft>:
/* see inner.h */
void
Zf(poly_merge_fft)(
	fpr *restrict f,
	const fpr *restrict f0, const fpr *restrict f1, unsigned logn)
{
 8012f10:	b530      	push	{r4, r5, lr}
 8012f12:	b0a9      	sub	sp, #164	; 0xa4
 8012f14:	9003      	str	r0, [sp, #12]
 8012f16:	9102      	str	r1, [sp, #8]
 8012f18:	9201      	str	r2, [sp, #4]
 8012f1a:	9300      	str	r3, [sp, #0]
	size_t n, hn, qn, u;

	n = (size_t)1 << logn;
 8012f1c:	2201      	movs	r2, #1
 8012f1e:	9b00      	ldr	r3, [sp, #0]
 8012f20:	fa02 f303 	lsl.w	r3, r2, r3
 8012f24:	9326      	str	r3, [sp, #152]	; 0x98
	hn = n >> 1;
 8012f26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012f28:	085b      	lsrs	r3, r3, #1
 8012f2a:	9325      	str	r3, [sp, #148]	; 0x94
	qn = hn >> 1;
 8012f2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012f2e:	085b      	lsrs	r3, r3, #1
 8012f30:	9324      	str	r3, [sp, #144]	; 0x90

	/*
	 * An extra copy to handle the special case logn = 1.
	 */
	f[0] = f0[0];
 8012f32:	9b02      	ldr	r3, [sp, #8]
 8012f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f38:	9903      	ldr	r1, [sp, #12]
 8012f3a:	e9c1 2300 	strd	r2, r3, [r1]
	f[hn] = f1[0];
 8012f3e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012f40:	00db      	lsls	r3, r3, #3
 8012f42:	9a03      	ldr	r2, [sp, #12]
 8012f44:	18d1      	adds	r1, r2, r3
 8012f46:	9b01      	ldr	r3, [sp, #4]
 8012f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f4c:	e9c1 2300 	strd	r2, r3, [r1]

	for (u = 0; u < qn; u ++) {
 8012f50:	2300      	movs	r3, #0
 8012f52:	9327      	str	r3, [sp, #156]	; 0x9c
 8012f54:	e0c9      	b.n	80130ea <falcon_inner_poly_merge_fft+0x1da>
		fpr a_re, a_im, b_re, b_im;
		fpr t_re, t_im;

		a_re = f0[u];
 8012f56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8012f58:	00db      	lsls	r3, r3, #3
 8012f5a:	9a02      	ldr	r2, [sp, #8]
 8012f5c:	4413      	add	r3, r2
 8012f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f62:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
		a_im = f0[u + qn];
 8012f66:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8012f68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012f6a:	4413      	add	r3, r2
 8012f6c:	00db      	lsls	r3, r3, #3
 8012f6e:	9a02      	ldr	r2, [sp, #8]
 8012f70:	4413      	add	r3, r2
 8012f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f76:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
		FPC_MUL(b_re, b_im, f1[u], f1[u + qn],
 8012f7a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8012f7c:	00db      	lsls	r3, r3, #3
 8012f7e:	9a01      	ldr	r2, [sp, #4]
 8012f80:	4413      	add	r3, r2
 8012f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f86:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8012f8a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8012f8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012f8e:	4413      	add	r3, r2
 8012f90:	00db      	lsls	r3, r3, #3
 8012f92:	9a01      	ldr	r2, [sp, #4]
 8012f94:	4413      	add	r3, r2
 8012f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8012f9e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8012fa0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012fa2:	4413      	add	r3, r2
 8012fa4:	005b      	lsls	r3, r3, #1
 8012fa6:	4a55      	ldr	r2, [pc, #340]	; (80130fc <falcon_inner_poly_merge_fft+0x1ec>)
 8012fa8:	00db      	lsls	r3, r3, #3
 8012faa:	4413      	add	r3, r2
 8012fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb0:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8012fb4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8012fb6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012fb8:	4413      	add	r3, r2
 8012fba:	005b      	lsls	r3, r3, #1
 8012fbc:	3301      	adds	r3, #1
 8012fbe:	4a4f      	ldr	r2, [pc, #316]	; (80130fc <falcon_inner_poly_merge_fft+0x1ec>)
 8012fc0:	00db      	lsls	r3, r3, #3
 8012fc2:	4413      	add	r3, r2
 8012fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8012fcc:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8012fd0:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8012fd4:	f000 fa54 	bl	8013480 <falcon_inner_fpr_mul>
 8012fd8:	4604      	mov	r4, r0
 8012fda:	460d      	mov	r5, r1
 8012fdc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8012fe0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8012fe4:	f000 fa4c 	bl	8013480 <falcon_inner_fpr_mul>
 8012fe8:	4602      	mov	r2, r0
 8012fea:	460b      	mov	r3, r1
 8012fec:	4620      	mov	r0, r4
 8012fee:	4629      	mov	r1, r5
 8012ff0:	f7fe fdae 	bl	8011b50 <fpr_sub.lto_priv.1>
 8012ff4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8012ff8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8012ffc:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8013000:	f000 fa3e 	bl	8013480 <falcon_inner_fpr_mul>
 8013004:	4604      	mov	r4, r0
 8013006:	460d      	mov	r5, r1
 8013008:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801300c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8013010:	f000 fa36 	bl	8013480 <falcon_inner_fpr_mul>
 8013014:	4602      	mov	r2, r0
 8013016:	460b      	mov	r3, r1
 8013018:	4620      	mov	r0, r4
 801301a:	4629      	mov	r1, r5
 801301c:	f000 f988 	bl	8013330 <falcon_inner_fpr_add>
 8013020:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8013024:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8013028:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 801302c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013030:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			fpr_gm_tab[((u + hn) << 1) + 0],
			fpr_gm_tab[((u + hn) << 1) + 1]);
		FPC_ADD(t_re, t_im, a_re, a_im, b_re, b_im);
 8013034:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013038:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 801303c:	f000 f978 	bl	8013330 <falcon_inner_fpr_add>
 8013040:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013044:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013048:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 801304c:	f000 f970 	bl	8013330 <falcon_inner_fpr_add>
 8013050:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013054:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013058:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801305c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013060:	e9cd 2308 	strd	r2, r3, [sp, #32]
		f[(u << 1) + 0] = t_re;
 8013064:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8013066:	011b      	lsls	r3, r3, #4
 8013068:	9a03      	ldr	r2, [sp, #12]
 801306a:	18d1      	adds	r1, r2, r3
 801306c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013070:	e9c1 2300 	strd	r2, r3, [r1]
		f[(u << 1) + 0 + hn] = t_im;
 8013074:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8013076:	005a      	lsls	r2, r3, #1
 8013078:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801307a:	4413      	add	r3, r2
 801307c:	00db      	lsls	r3, r3, #3
 801307e:	9a03      	ldr	r2, [sp, #12]
 8013080:	18d1      	adds	r1, r2, r3
 8013082:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013086:	e9c1 2300 	strd	r2, r3, [r1]
		FPC_SUB(t_re, t_im, a_re, a_im, b_re, b_im);
 801308a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801308e:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8013092:	f7fe fd5d 	bl	8011b50 <fpr_sub.lto_priv.1>
 8013096:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801309a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801309e:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 80130a2:	f7fe fd55 	bl	8011b50 <fpr_sub.lto_priv.1>
 80130a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80130aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80130ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80130b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80130b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
		f[(u << 1) + 1] = t_re;
 80130ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80130bc:	011b      	lsls	r3, r3, #4
 80130be:	3308      	adds	r3, #8
 80130c0:	9a03      	ldr	r2, [sp, #12]
 80130c2:	18d1      	adds	r1, r2, r3
 80130c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80130c8:	e9c1 2300 	strd	r2, r3, [r1]
		f[(u << 1) + 1 + hn] = t_im;
 80130cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80130ce:	005a      	lsls	r2, r3, #1
 80130d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80130d2:	4413      	add	r3, r2
 80130d4:	3301      	adds	r3, #1
 80130d6:	00db      	lsls	r3, r3, #3
 80130d8:	9a03      	ldr	r2, [sp, #12]
 80130da:	18d1      	adds	r1, r2, r3
 80130dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80130e0:	e9c1 2300 	strd	r2, r3, [r1]
	for (u = 0; u < qn; u ++) {
 80130e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80130e6:	3301      	adds	r3, #1
 80130e8:	9327      	str	r3, [sp, #156]	; 0x9c
 80130ea:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80130ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80130ee:	429a      	cmp	r2, r3
 80130f0:	f4ff af31 	bcc.w	8012f56 <falcon_inner_poly_merge_fft+0x46>
	}
}
 80130f4:	bf00      	nop
 80130f6:	bf00      	nop
 80130f8:	b029      	add	sp, #164	; 0xa4
 80130fa:	bd30      	pop	{r4, r5, pc}
 80130fc:	0801f300 	.word	0x0801f300

08013100 <fpr_ursh.lto_priv.1>:
{
 8013100:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013104:	b088      	sub	sp, #32
 8013106:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801310a:	9205      	str	r2, [sp, #20]
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 801310c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013110:	f04f 0000 	mov.w	r0, #0
 8013114:	f04f 0100 	mov.w	r1, #0
 8013118:	0018      	movs	r0, r3
 801311a:	2100      	movs	r1, #0
 801311c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013120:	ea80 0a02 	eor.w	sl, r0, r2
 8013124:	ea81 0b03 	eor.w	fp, r1, r3
 8013128:	9b05      	ldr	r3, [sp, #20]
 801312a:	115b      	asrs	r3, r3, #5
 801312c:	17da      	asrs	r2, r3, #31
 801312e:	9300      	str	r3, [sp, #0]
 8013130:	9201      	str	r2, [sp, #4]
 8013132:	2300      	movs	r3, #0
 8013134:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013138:	4608      	mov	r0, r1
 801313a:	f1d0 0800 	rsbs	r8, r0, #0
 801313e:	eb63 0902 	sbc.w	r9, r3, r2
 8013142:	ea0a 0408 	and.w	r4, sl, r8
 8013146:	ea0b 0509 	and.w	r5, fp, r9
 801314a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801314e:	ea82 0104 	eor.w	r1, r2, r4
 8013152:	9102      	str	r1, [sp, #8]
 8013154:	406b      	eors	r3, r5
 8013156:	9303      	str	r3, [sp, #12]
 8013158:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 801315c:	e9cd 3406 	strd	r3, r4, [sp, #24]
	return x >> (n & 31);
 8013160:	9b05      	ldr	r3, [sp, #20]
 8013162:	f003 011f 	and.w	r1, r3, #31
 8013166:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801316a:	f1c1 0420 	rsb	r4, r1, #32
 801316e:	f1a1 0020 	sub.w	r0, r1, #32
 8013172:	fa22 f601 	lsr.w	r6, r2, r1
 8013176:	fa03 f404 	lsl.w	r4, r3, r4
 801317a:	4326      	orrs	r6, r4
 801317c:	fa23 f000 	lsr.w	r0, r3, r0
 8013180:	4306      	orrs	r6, r0
 8013182:	fa23 f701 	lsr.w	r7, r3, r1
 8013186:	4632      	mov	r2, r6
 8013188:	463b      	mov	r3, r7
}
 801318a:	4610      	mov	r0, r2
 801318c:	4619      	mov	r1, r3
 801318e:	b008      	add	sp, #32
 8013190:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013194:	4770      	bx	lr
 8013196:	bf00      	nop
	...

080131a0 <fpr_trunc.lto_priv.1>:
{
 80131a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131a4:	b091      	sub	sp, #68	; 0x44
 80131a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
	e = (int)(x >> 52) & 0x7FF;
 80131aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80131ae:	f04f 0000 	mov.w	r0, #0
 80131b2:	f04f 0100 	mov.w	r1, #0
 80131b6:	0d18      	lsrs	r0, r3, #20
 80131b8:	2100      	movs	r1, #0
 80131ba:	4603      	mov	r3, r0
 80131bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80131c0:	930f      	str	r3, [sp, #60]	; 0x3c
	xu = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 80131c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80131c6:	f04f 0000 	mov.w	r0, #0
 80131ca:	f04f 0100 	mov.w	r1, #0
 80131ce:	0299      	lsls	r1, r3, #10
 80131d0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80131d4:	0290      	lsls	r0, r2, #10
 80131d6:	4682      	mov	sl, r0
 80131d8:	f021 4b40 	bic.w	fp, r1, #3221225472	; 0xc0000000
 80131dc:	f8cd a000 	str.w	sl, [sp]
 80131e0:	f04b 4380 	orr.w	r3, fp, #1073741824	; 0x40000000
 80131e4:	9301      	str	r3, [sp, #4]
 80131e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	cc = 1085 - e;
 80131ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80131f0:	f5c3 6387 	rsb	r3, r3, #1080	; 0x438
 80131f4:	3305      	adds	r3, #5
 80131f6:	930e      	str	r3, [sp, #56]	; 0x38
	xu = fpr_ursh(xu, cc & 63);
 80131f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80131fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013202:	461a      	mov	r2, r3
 8013204:	f7ff ff7c 	bl	8013100 <fpr_ursh.lto_priv.1>
 8013208:	4602      	mov	r2, r0
 801320a:	460b      	mov	r3, r1
 801320c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	xu &= -(uint64_t)((uint32_t)(cc - 64) >> 31);
 8013210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013212:	3b40      	subs	r3, #64	; 0x40
 8013214:	0fdb      	lsrs	r3, r3, #31
 8013216:	2200      	movs	r2, #0
 8013218:	9302      	str	r3, [sp, #8]
 801321a:	9203      	str	r2, [sp, #12]
 801321c:	2300      	movs	r3, #0
 801321e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013222:	4608      	mov	r0, r1
 8013224:	f1d0 0800 	rsbs	r8, r0, #0
 8013228:	eb63 0902 	sbc.w	r9, r3, r2
 801322c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013230:	ea08 0102 	and.w	r1, r8, r2
 8013234:	9104      	str	r1, [sp, #16]
 8013236:	ea09 0303 	and.w	r3, r9, r3
 801323a:	9305      	str	r3, [sp, #20]
 801323c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013240:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	t = x >> 63;
 8013244:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013248:	f04f 0200 	mov.w	r2, #0
 801324c:	f04f 0300 	mov.w	r3, #0
 8013250:	0fca      	lsrs	r2, r1, #31
 8013252:	2300      	movs	r3, #0
 8013254:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	xu = (xu ^ -t) + t;
 8013258:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801325c:	2100      	movs	r1, #0
 801325e:	4256      	negs	r6, r2
 8013260:	eb61 0703 	sbc.w	r7, r1, r3
 8013264:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013268:	ea86 0402 	eor.w	r4, r6, r2
 801326c:	ea87 0503 	eor.w	r5, r7, r3
 8013270:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013274:	18a1      	adds	r1, r4, r2
 8013276:	9106      	str	r1, [sp, #24]
 8013278:	eb45 0303 	adc.w	r3, r5, r3
 801327c:	9307      	str	r3, [sp, #28]
 801327e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8013282:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
	return *(int64_t *)&xu;
 8013286:	ab0a      	add	r3, sp, #40	; 0x28
 8013288:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 801328c:	4610      	mov	r0, r2
 801328e:	4619      	mov	r1, r3
 8013290:	b011      	add	sp, #68	; 0x44
 8013292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013296:	bf00      	nop
	...

080132a0 <falcon_inner_fpr_scaled>:

__attribute__((naked))
fpr
fpr_scaled(int64_t i __attribute__((unused)), int sc __attribute__((unused)))
{
	__asm__ (
 80132a0:	b570      	push	{r4, r5, r6, lr}
 80132a2:	17cb      	asrs	r3, r1, #31
 80132a4:	4058      	eors	r0, r3
 80132a6:	4059      	eors	r1, r3
 80132a8:	1ac0      	subs	r0, r0, r3
 80132aa:	4199      	sbcs	r1, r3
 80132ac:	f202 32fe 	addw	r2, r2, #1022	; 0x3fe
 80132b0:	ea50 0401 	orrs.w	r4, r0, r1
 80132b4:	ea34 74e2 	bics.w	r4, r4, r2, asr #31
 80132b8:	4265      	negs	r5, r4
 80132ba:	432c      	orrs	r4, r5
 80132bc:	ea12 72e4 	ands.w	r2, r2, r4, asr #31
 80132c0:	3220      	adds	r2, #32
 80132c2:	424c      	negs	r4, r1
 80132c4:	430c      	orrs	r4, r1
 80132c6:	ea90 0501 	eors.w	r5, r0, r1
 80132ca:	ea35 75e4 	bics.w	r5, r5, r4, asr #31
 80132ce:	4069      	eors	r1, r5
 80132d0:	ea10 70e4 	ands.w	r0, r0, r4, asr #31
 80132d4:	0fe4      	lsrs	r4, r4, #31
 80132d6:	eb12 1244 	adds.w	r2, r2, r4, lsl #5
 80132da:	fab1 f481 	clz	r4, r1
 80132de:	1b12      	subs	r2, r2, r4
 80132e0:	f1d4 0520 	rsbs	r5, r4, #32
 80132e4:	40a1      	lsls	r1, r4
 80132e6:	fa30 f505 	lsrs.w	r5, r0, r5
 80132ea:	40a0      	lsls	r0, r4
 80132ec:	4329      	orrs	r1, r5
 80132ee:	f36f 71df 	bfc	r1, #31, #1
 80132f2:	0005      	movs	r5, r0
 80132f4:	0ac0      	lsrs	r0, r0, #11
 80132f6:	ea50 5041 	orrs.w	r0, r0, r1, lsl #21
 80132fa:	0ac9      	lsrs	r1, r1, #11
 80132fc:	ea51 5102 	orrs.w	r1, r1, r2, lsl #20
 8013300:	f3c5 0608 	ubfx	r6, r5, #0, #9
 8013304:	f206 16ff 	addw	r6, r6, #511	; 0x1ff
 8013308:	4335      	orrs	r5, r6
 801330a:	f3c5 2542 	ubfx	r5, r5, #9, #3
 801330e:	26c8      	movs	r6, #200	; 0xc8
 8013310:	40ee      	lsrs	r6, r5
 8013312:	f016 0601 	ands.w	r6, r6, #1
 8013316:	1980      	adds	r0, r0, r6
 8013318:	f151 0100 	adcs.w	r1, r1, #0
 801331c:	ea51 71c3 	orrs.w	r1, r1, r3, lsl #31
 8013320:	bd70      	pop	{r4, r5, r6, pc}
	"@ Put back the sign.\n\t"
	"orrs	r1, r1, r3, lsl #31\n\t"
	"\n\t"
	"pop	{ r4, r5, r6, pc}\n\t"
	);
}
 8013322:	bf00      	nop
 8013324:	4610      	mov	r0, r2
 8013326:	4619      	mov	r1, r3
	...

08013330 <falcon_inner_fpr_add>:

__attribute__((naked))
fpr
fpr_add(fpr x __attribute__((unused)), fpr y __attribute__((unused)))
{
	__asm__ (
 8013330:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8013334:	f3c1 041e 	ubfx	r4, r1, #0, #31
 8013338:	f3c3 051e 	ubfx	r5, r3, #0, #31
 801333c:	1a87      	subs	r7, r0, r2
 801333e:	41ac      	sbcs	r4, r5
 8013340:	4327      	orrs	r7, r4
 8013342:	427d      	negs	r5, r7
 8013344:	432f      	orrs	r7, r5
 8013346:	ea31 0607 	bics.w	r6, r1, r7
 801334a:	4326      	orrs	r6, r4
 801334c:	ea90 0402 	eors.w	r4, r0, r2
 8013350:	ea91 0503 	eors.w	r5, r1, r3
 8013354:	ea14 74e6 	ands.w	r4, r4, r6, asr #31
 8013358:	ea15 75e6 	ands.w	r5, r5, r6, asr #31
 801335c:	4060      	eors	r0, r4
 801335e:	4069      	eors	r1, r5
 8013360:	4062      	eors	r2, r4
 8013362:	406b      	eors	r3, r5
 8013364:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8013368:	f204 75ff 	addw	r5, r4, #2047	; 0x7ff
 801336c:	0aed      	lsrs	r5, r5, #11
 801336e:	f36f 511e 	bfc	r1, #20, #11
 8013372:	ea51 5105 	orrs.w	r1, r1, r5, lsl #20
 8013376:	17cd      	asrs	r5, r1, #31
 8013378:	f36f 71df 	bfc	r1, #31, #1
 801337c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8013380:	f206 77ff 	addw	r7, r6, #2047	; 0x7ff
 8013384:	0aff      	lsrs	r7, r7, #11
 8013386:	f36f 531e 	bfc	r3, #20, #11
 801338a:	ea53 5307 	orrs.w	r3, r3, r7, lsl #20
 801338e:	17df      	asrs	r7, r3, #31
 8013390:	f36f 73df 	bfc	r3, #31, #1
 8013394:	00c9      	lsls	r1, r1, #3
 8013396:	ea51 7150 	orrs.w	r1, r1, r0, lsr #29
 801339a:	00c0      	lsls	r0, r0, #3
 801339c:	00db      	lsls	r3, r3, #3
 801339e:	ea53 7352 	orrs.w	r3, r3, r2, lsr #29
 80133a2:	00d2      	lsls	r2, r2, #3
 80133a4:	1ba6      	subs	r6, r4, r6
 80133a6:	f1b6 083c 	subs.w	r8, r6, #60	; 0x3c
 80133aa:	ea12 72e8 	ands.w	r2, r2, r8, asr #31
 80133ae:	ea13 73e8 	ands.w	r3, r3, r8, asr #31
 80133b2:	f1b6 0820 	subs.w	r8, r6, #32
 80133b6:	ea32 7be8 	bics.w	fp, r2, r8, asr #31
 80133ba:	ea12 72e8 	ands.w	r2, r2, r8, asr #31
 80133be:	ea33 7ae8 	bics.w	sl, r3, r8, asr #31
 80133c2:	ea52 020a 	orrs.w	r2, r2, sl
 80133c6:	ea13 73e8 	ands.w	r3, r3, r8, asr #31
 80133ca:	f016 061f 	ands.w	r6, r6, #31
 80133ce:	f1d6 0820 	rsbs	r8, r6, #32
 80133d2:	fa12 fa08 	lsls.w	sl, r2, r8
 80133d6:	ea5b 0b0a 	orrs.w	fp, fp, sl
 80133da:	40f2      	lsrs	r2, r6
 80133dc:	fa13 fa08 	lsls.w	sl, r3, r8
 80133e0:	ea52 020a 	orrs.w	r2, r2, sl
 80133e4:	40f3      	lsrs	r3, r6
 80133e6:	f1db 0600 	rsbs	r6, fp, #0
 80133ea:	ea56 060b 	orrs.w	r6, r6, fp
 80133ee:	ea52 72d6 	orrs.w	r2, r2, r6, lsr #31
 80133f2:	406f      	eors	r7, r5
 80133f4:	407a      	eors	r2, r7
 80133f6:	407b      	eors	r3, r7
 80133f8:	1bd2      	subs	r2, r2, r7
 80133fa:	41bb      	sbcs	r3, r7
 80133fc:	1880      	adds	r0, r0, r2
 80133fe:	4159      	adcs	r1, r3
 8013400:	fab0 f280 	clz	r2, r0
 8013404:	fab1 f381 	clz	r3, r1
 8013408:	f343 1640 	sbfx	r6, r3, #5, #1
 801340c:	4032      	ands	r2, r6
 801340e:	18d2      	adds	r2, r2, r3
 8013410:	1aa4      	subs	r4, r4, r2
 8013412:	f1b2 0720 	subs.w	r7, r2, #32
 8013416:	fa10 f707 	lsls.w	r7, r0, r7
 801341a:	4091      	lsls	r1, r2
 801341c:	f1d2 0620 	rsbs	r6, r2, #32
 8013420:	4339      	orrs	r1, r7
 8013422:	fa30 f606 	lsrs.w	r6, r0, r6
 8013426:	4331      	orrs	r1, r6
 8013428:	4090      	lsls	r0, r2
 801342a:	3407      	adds	r4, #7
 801342c:	ea14 74e1 	ands.w	r4, r4, r1, asr #31
 8013430:	0003      	movs	r3, r0
 8013432:	0ac0      	lsrs	r0, r0, #11
 8013434:	ea50 5041 	orrs.w	r0, r0, r1, lsl #21
 8013438:	0ac9      	lsrs	r1, r1, #11
 801343a:	f3c3 0608 	ubfx	r6, r3, #0, #9
 801343e:	f206 16ff 	addw	r6, r6, #511	; 0x1ff
 8013442:	4333      	orrs	r3, r6
 8013444:	f3c3 2342 	ubfx	r3, r3, #9, #3
 8013448:	26c8      	movs	r6, #200	; 0xc8
 801344a:	40de      	lsrs	r6, r3
 801344c:	f016 0601 	ands.w	r6, r6, #1
 8013450:	1980      	adds	r0, r0, r6
 8013452:	f151 0100 	adcs.w	r1, r1, #0
 8013456:	eb11 5104 	adds.w	r1, r1, r4, lsl #20
 801345a:	4264      	negs	r4, r4
 801345c:	ea10 70e4 	ands.w	r0, r0, r4, asr #31
 8013460:	ea11 71e4 	ands.w	r1, r1, r4, asr #31
 8013464:	f365 71df 	bfi	r1, r5, #31, #1
 8013468:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
	"@ conditional swap at the start, this is always correct.\n\t"
	"bfi	r1, r5, #31, #1\n\t"
	"\n\t"
	"pop	{ r4, r5, r6, r7, r8, r10, r11, pc }\n\t"
	);
}
 801346c:	bf00      	nop
 801346e:	4610      	mov	r0, r2
 8013470:	4619      	mov	r1, r3
 8013472:	bf00      	nop
	...

08013480 <falcon_inner_fpr_mul>:

__attribute__((naked))
fpr
fpr_mul(fpr x __attribute__((unused)), fpr y __attribute__((unused)))
{
	__asm__ (
 8013480:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8013484:	f030 447e 	bics.w	r4, r0, #4261412864	; 0xfe000000
 8013488:	01cd      	lsls	r5, r1, #7
 801348a:	ea55 6550 	orrs.w	r5, r5, r0, lsr #25
 801348e:	f055 6500 	orrs.w	r5, r5, #134217728	; 0x8000000
 8013492:	f035 4570 	bics.w	r5, r5, #4026531840	; 0xf0000000
 8013496:	f032 467e 	bics.w	r6, r2, #4261412864	; 0xfe000000
 801349a:	01df      	lsls	r7, r3, #7
 801349c:	ea57 6752 	orrs.w	r7, r7, r2, lsr #25
 80134a0:	f057 6700 	orrs.w	r7, r7, #134217728	; 0x8000000
 80134a4:	f037 4770 	bics.w	r7, r7, #4026531840	; 0xf0000000
 80134a8:	fba4 8a06 	umull	r8, sl, r4, r6
 80134ac:	ea5f 1aca 	movs.w	sl, sl, lsl #7
 80134b0:	ea5a 6a58 	orrs.w	sl, sl, r8, lsr #25
 80134b4:	ea9b 0b0b 	eors.w	fp, fp, fp
 80134b8:	fbe4 ab07 	umlal	sl, fp, r4, r7
 80134bc:	fbe5 ab06 	umlal	sl, fp, r5, r6
 80134c0:	ea58 18ca 	orrs.w	r8, r8, sl, lsl #7
 80134c4:	ea5f 6a5a 	movs.w	sl, sl, lsr #25
 80134c8:	ea5a 1acb 	orrs.w	sl, sl, fp, lsl #7
 80134cc:	ea9b 0b0b 	eors.w	fp, fp, fp
 80134d0:	fbe5 ab07 	umlal	sl, fp, r5, r7
 80134d4:	f1d8 0400 	rsbs	r4, r8, #0
 80134d8:	ea58 0804 	orrs.w	r8, r8, r4
 80134dc:	ea5a 7ad8 	orrs.w	sl, sl, r8, lsr #31
 80134e0:	f01a 0601 	ands.w	r6, sl, #1
 80134e4:	ea5f 55db 	movs.w	r5, fp, lsr #23
 80134e8:	426d      	negs	r5, r5
 80134ea:	ea56 065a 	orrs.w	r6, r6, sl, lsr #1
 80134ee:	ea56 76cb 	orrs.w	r6, r6, fp, lsl #31
 80134f2:	ea5f 075b 	movs.w	r7, fp, lsr #1
 80134f6:	ea9a 0a06 	eors.w	sl, sl, r6
 80134fa:	ea9b 0b07 	eors.w	fp, fp, r7
 80134fe:	ea3a 0a05 	bics.w	sl, sl, r5
 8013502:	ea3b 0b05 	bics.w	fp, fp, r5
 8013506:	ea96 060a 	eors.w	r6, r6, sl
 801350a:	ea97 070b 	eors.w	r7, r7, fp
 801350e:	0048      	lsls	r0, r1, #1
 8013510:	005a      	lsls	r2, r3, #1
 8013512:	0d40      	lsrs	r0, r0, #21
 8013514:	f200 74ff 	addw	r4, r0, #2047	; 0x7ff
 8013518:	0d52      	lsrs	r2, r2, #21
 801351a:	f202 78ff 	addw	r8, r2, #2047	; 0x7ff
 801351e:	1812      	adds	r2, r2, r0
 8013520:	f2a2 4200 	subw	r2, r2, #1024	; 0x400
 8013524:	1b52      	subs	r2, r2, r5
 8013526:	ea14 0408 	ands.w	r4, r4, r8
 801352a:	43d5      	mvns	r5, r2
 801352c:	ea15 5504 	ands.w	r5, r5, r4, lsl #20
 8013530:	ea12 72e5 	ands.w	r2, r2, r5, asr #31
 8013534:	ea16 76e5 	ands.w	r6, r6, r5, asr #31
 8013538:	ea17 77e5 	ands.w	r7, r7, r5, asr #31
 801353c:	4059      	eors	r1, r3
 801353e:	f36f 011e 	bfc	r1, #0, #31
 8013542:	f362 511e 	bfi	r1, r2, #20, #11
 8013546:	0034      	movs	r4, r6
 8013548:	08b0      	lsrs	r0, r6, #2
 801354a:	ea50 7087 	orrs.w	r0, r0, r7, lsl #30
 801354e:	eb11 0197 	adds.w	r1, r1, r7, lsr #2
 8013552:	f014 0407 	ands.w	r4, r4, #7
 8013556:	23c8      	movs	r3, #200	; 0xc8
 8013558:	40e3      	lsrs	r3, r4
 801355a:	f013 0301 	ands.w	r3, r3, #1
 801355e:	18c0      	adds	r0, r0, r3
 8013560:	f151 0100 	adcs.w	r1, r1, #0
 8013564:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
	"adds	r0, r3\n\t"
	"adcs	r1, #0\n\t"
	"\n\t"
	"pop	{ r4, r5, r6, r7, r8, r10, r11, pc }\n\t"
	);
}
 8013568:	bf00      	nop
 801356a:	4610      	mov	r0, r2
 801356c:	4619      	mov	r1, r3
 801356e:	bf00      	nop

08013570 <falcon_inner_fpr_div>:

__attribute__((naked))
fpr
fpr_div(fpr x __attribute__((unused)), fpr y __attribute__((unused)))
{
	__asm__ (
 8013570:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8013574:	f3c1 0413 	ubfx	r4, r1, #0, #20
 8013578:	f3c3 0513 	ubfx	r5, r3, #0, #20
 801357c:	f454 1480 	orrs.w	r4, r4, #1048576	; 0x100000
 8013580:	f455 1580 	orrs.w	r5, r5, #1048576	; 0x100000
 8013584:	ea98 0808 	eors.w	r8, r8, r8
 8013588:	1a86      	subs	r6, r0, r2
 801358a:	eb74 0705 	sbcs.w	r7, r4, r5
 801358e:	ea4f 0838 	mov.w	r8, r8, rrx
 8013592:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013596:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 801359a:	1b80      	subs	r0, r0, r6
 801359c:	41bc      	sbcs	r4, r7
 801359e:	1800      	adds	r0, r0, r0
 80135a0:	4164      	adcs	r4, r4
 80135a2:	1a86      	subs	r6, r0, r2
 80135a4:	eb74 0705 	sbcs.w	r7, r4, r5
 80135a8:	ea4f 0838 	mov.w	r8, r8, rrx
 80135ac:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80135b0:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80135b4:	1b80      	subs	r0, r0, r6
 80135b6:	41bc      	sbcs	r4, r7
 80135b8:	1800      	adds	r0, r0, r0
 80135ba:	4164      	adcs	r4, r4
 80135bc:	1a86      	subs	r6, r0, r2
 80135be:	eb74 0705 	sbcs.w	r7, r4, r5
 80135c2:	ea4f 0838 	mov.w	r8, r8, rrx
 80135c6:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80135ca:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80135ce:	1b80      	subs	r0, r0, r6
 80135d0:	41bc      	sbcs	r4, r7
 80135d2:	1800      	adds	r0, r0, r0
 80135d4:	4164      	adcs	r4, r4
 80135d6:	1a86      	subs	r6, r0, r2
 80135d8:	eb74 0705 	sbcs.w	r7, r4, r5
 80135dc:	ea4f 0838 	mov.w	r8, r8, rrx
 80135e0:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80135e4:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80135e8:	1b80      	subs	r0, r0, r6
 80135ea:	41bc      	sbcs	r4, r7
 80135ec:	1800      	adds	r0, r0, r0
 80135ee:	4164      	adcs	r4, r4
 80135f0:	1a86      	subs	r6, r0, r2
 80135f2:	eb74 0705 	sbcs.w	r7, r4, r5
 80135f6:	ea4f 0838 	mov.w	r8, r8, rrx
 80135fa:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80135fe:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013602:	1b80      	subs	r0, r0, r6
 8013604:	41bc      	sbcs	r4, r7
 8013606:	1800      	adds	r0, r0, r0
 8013608:	4164      	adcs	r4, r4
 801360a:	1a86      	subs	r6, r0, r2
 801360c:	eb74 0705 	sbcs.w	r7, r4, r5
 8013610:	ea4f 0838 	mov.w	r8, r8, rrx
 8013614:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013618:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 801361c:	1b80      	subs	r0, r0, r6
 801361e:	41bc      	sbcs	r4, r7
 8013620:	1800      	adds	r0, r0, r0
 8013622:	4164      	adcs	r4, r4
 8013624:	1a86      	subs	r6, r0, r2
 8013626:	eb74 0705 	sbcs.w	r7, r4, r5
 801362a:	ea4f 0838 	mov.w	r8, r8, rrx
 801362e:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013632:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013636:	1b80      	subs	r0, r0, r6
 8013638:	41bc      	sbcs	r4, r7
 801363a:	1800      	adds	r0, r0, r0
 801363c:	4164      	adcs	r4, r4
 801363e:	1a86      	subs	r6, r0, r2
 8013640:	eb74 0705 	sbcs.w	r7, r4, r5
 8013644:	ea4f 0838 	mov.w	r8, r8, rrx
 8013648:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 801364c:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013650:	1b80      	subs	r0, r0, r6
 8013652:	41bc      	sbcs	r4, r7
 8013654:	1800      	adds	r0, r0, r0
 8013656:	4164      	adcs	r4, r4
 8013658:	1a86      	subs	r6, r0, r2
 801365a:	eb74 0705 	sbcs.w	r7, r4, r5
 801365e:	ea4f 0838 	mov.w	r8, r8, rrx
 8013662:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013666:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 801366a:	1b80      	subs	r0, r0, r6
 801366c:	41bc      	sbcs	r4, r7
 801366e:	1800      	adds	r0, r0, r0
 8013670:	4164      	adcs	r4, r4
 8013672:	1a86      	subs	r6, r0, r2
 8013674:	eb74 0705 	sbcs.w	r7, r4, r5
 8013678:	ea4f 0838 	mov.w	r8, r8, rrx
 801367c:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013680:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013684:	1b80      	subs	r0, r0, r6
 8013686:	41bc      	sbcs	r4, r7
 8013688:	1800      	adds	r0, r0, r0
 801368a:	4164      	adcs	r4, r4
 801368c:	1a86      	subs	r6, r0, r2
 801368e:	eb74 0705 	sbcs.w	r7, r4, r5
 8013692:	ea4f 0838 	mov.w	r8, r8, rrx
 8013696:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 801369a:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 801369e:	1b80      	subs	r0, r0, r6
 80136a0:	41bc      	sbcs	r4, r7
 80136a2:	1800      	adds	r0, r0, r0
 80136a4:	4164      	adcs	r4, r4
 80136a6:	1a86      	subs	r6, r0, r2
 80136a8:	eb74 0705 	sbcs.w	r7, r4, r5
 80136ac:	ea4f 0838 	mov.w	r8, r8, rrx
 80136b0:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80136b4:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80136b8:	1b80      	subs	r0, r0, r6
 80136ba:	41bc      	sbcs	r4, r7
 80136bc:	1800      	adds	r0, r0, r0
 80136be:	4164      	adcs	r4, r4
 80136c0:	1a86      	subs	r6, r0, r2
 80136c2:	eb74 0705 	sbcs.w	r7, r4, r5
 80136c6:	ea4f 0838 	mov.w	r8, r8, rrx
 80136ca:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80136ce:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80136d2:	1b80      	subs	r0, r0, r6
 80136d4:	41bc      	sbcs	r4, r7
 80136d6:	1800      	adds	r0, r0, r0
 80136d8:	4164      	adcs	r4, r4
 80136da:	1a86      	subs	r6, r0, r2
 80136dc:	eb74 0705 	sbcs.w	r7, r4, r5
 80136e0:	ea4f 0838 	mov.w	r8, r8, rrx
 80136e4:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80136e8:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80136ec:	1b80      	subs	r0, r0, r6
 80136ee:	41bc      	sbcs	r4, r7
 80136f0:	1800      	adds	r0, r0, r0
 80136f2:	4164      	adcs	r4, r4
 80136f4:	1a86      	subs	r6, r0, r2
 80136f6:	eb74 0705 	sbcs.w	r7, r4, r5
 80136fa:	ea4f 0838 	mov.w	r8, r8, rrx
 80136fe:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013702:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013706:	1b80      	subs	r0, r0, r6
 8013708:	41bc      	sbcs	r4, r7
 801370a:	1800      	adds	r0, r0, r0
 801370c:	4164      	adcs	r4, r4
 801370e:	1a86      	subs	r6, r0, r2
 8013710:	eb74 0705 	sbcs.w	r7, r4, r5
 8013714:	ea4f 0838 	mov.w	r8, r8, rrx
 8013718:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 801371c:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013720:	1b80      	subs	r0, r0, r6
 8013722:	41bc      	sbcs	r4, r7
 8013724:	1800      	adds	r0, r0, r0
 8013726:	4164      	adcs	r4, r4
 8013728:	1a86      	subs	r6, r0, r2
 801372a:	eb74 0705 	sbcs.w	r7, r4, r5
 801372e:	ea4f 0838 	mov.w	r8, r8, rrx
 8013732:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013736:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 801373a:	1b80      	subs	r0, r0, r6
 801373c:	41bc      	sbcs	r4, r7
 801373e:	1800      	adds	r0, r0, r0
 8013740:	4164      	adcs	r4, r4
 8013742:	1a86      	subs	r6, r0, r2
 8013744:	eb74 0705 	sbcs.w	r7, r4, r5
 8013748:	ea4f 0838 	mov.w	r8, r8, rrx
 801374c:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013750:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013754:	1b80      	subs	r0, r0, r6
 8013756:	41bc      	sbcs	r4, r7
 8013758:	1800      	adds	r0, r0, r0
 801375a:	4164      	adcs	r4, r4
 801375c:	1a86      	subs	r6, r0, r2
 801375e:	eb74 0705 	sbcs.w	r7, r4, r5
 8013762:	ea4f 0838 	mov.w	r8, r8, rrx
 8013766:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 801376a:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 801376e:	1b80      	subs	r0, r0, r6
 8013770:	41bc      	sbcs	r4, r7
 8013772:	1800      	adds	r0, r0, r0
 8013774:	4164      	adcs	r4, r4
 8013776:	1a86      	subs	r6, r0, r2
 8013778:	eb74 0705 	sbcs.w	r7, r4, r5
 801377c:	ea4f 0838 	mov.w	r8, r8, rrx
 8013780:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013784:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013788:	1b80      	subs	r0, r0, r6
 801378a:	41bc      	sbcs	r4, r7
 801378c:	1800      	adds	r0, r0, r0
 801378e:	4164      	adcs	r4, r4
 8013790:	1a86      	subs	r6, r0, r2
 8013792:	eb74 0705 	sbcs.w	r7, r4, r5
 8013796:	ea4f 0838 	mov.w	r8, r8, rrx
 801379a:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 801379e:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80137a2:	1b80      	subs	r0, r0, r6
 80137a4:	41bc      	sbcs	r4, r7
 80137a6:	1800      	adds	r0, r0, r0
 80137a8:	4164      	adcs	r4, r4
 80137aa:	1a86      	subs	r6, r0, r2
 80137ac:	eb74 0705 	sbcs.w	r7, r4, r5
 80137b0:	ea4f 0838 	mov.w	r8, r8, rrx
 80137b4:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80137b8:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80137bc:	1b80      	subs	r0, r0, r6
 80137be:	41bc      	sbcs	r4, r7
 80137c0:	1800      	adds	r0, r0, r0
 80137c2:	4164      	adcs	r4, r4
 80137c4:	1a86      	subs	r6, r0, r2
 80137c6:	eb74 0705 	sbcs.w	r7, r4, r5
 80137ca:	ea4f 0838 	mov.w	r8, r8, rrx
 80137ce:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80137d2:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80137d6:	1b80      	subs	r0, r0, r6
 80137d8:	41bc      	sbcs	r4, r7
 80137da:	1800      	adds	r0, r0, r0
 80137dc:	4164      	adcs	r4, r4
 80137de:	1a86      	subs	r6, r0, r2
 80137e0:	eb74 0705 	sbcs.w	r7, r4, r5
 80137e4:	ea4f 0838 	mov.w	r8, r8, rrx
 80137e8:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80137ec:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80137f0:	1b80      	subs	r0, r0, r6
 80137f2:	41bc      	sbcs	r4, r7
 80137f4:	1800      	adds	r0, r0, r0
 80137f6:	4164      	adcs	r4, r4
 80137f8:	fa98 faa8 	rbit	sl, r8
 80137fc:	1a86      	subs	r6, r0, r2
 80137fe:	eb74 0705 	sbcs.w	r7, r4, r5
 8013802:	ea4f 0838 	mov.w	r8, r8, rrx
 8013806:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 801380a:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 801380e:	1b80      	subs	r0, r0, r6
 8013810:	41bc      	sbcs	r4, r7
 8013812:	1800      	adds	r0, r0, r0
 8013814:	4164      	adcs	r4, r4
 8013816:	1a86      	subs	r6, r0, r2
 8013818:	eb74 0705 	sbcs.w	r7, r4, r5
 801381c:	ea4f 0838 	mov.w	r8, r8, rrx
 8013820:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013824:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013828:	1b80      	subs	r0, r0, r6
 801382a:	41bc      	sbcs	r4, r7
 801382c:	1800      	adds	r0, r0, r0
 801382e:	4164      	adcs	r4, r4
 8013830:	1a86      	subs	r6, r0, r2
 8013832:	eb74 0705 	sbcs.w	r7, r4, r5
 8013836:	ea4f 0838 	mov.w	r8, r8, rrx
 801383a:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 801383e:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013842:	1b80      	subs	r0, r0, r6
 8013844:	41bc      	sbcs	r4, r7
 8013846:	1800      	adds	r0, r0, r0
 8013848:	4164      	adcs	r4, r4
 801384a:	1a86      	subs	r6, r0, r2
 801384c:	eb74 0705 	sbcs.w	r7, r4, r5
 8013850:	ea4f 0838 	mov.w	r8, r8, rrx
 8013854:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013858:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 801385c:	1b80      	subs	r0, r0, r6
 801385e:	41bc      	sbcs	r4, r7
 8013860:	1800      	adds	r0, r0, r0
 8013862:	4164      	adcs	r4, r4
 8013864:	1a86      	subs	r6, r0, r2
 8013866:	eb74 0705 	sbcs.w	r7, r4, r5
 801386a:	ea4f 0838 	mov.w	r8, r8, rrx
 801386e:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013872:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013876:	1b80      	subs	r0, r0, r6
 8013878:	41bc      	sbcs	r4, r7
 801387a:	1800      	adds	r0, r0, r0
 801387c:	4164      	adcs	r4, r4
 801387e:	1a86      	subs	r6, r0, r2
 8013880:	eb74 0705 	sbcs.w	r7, r4, r5
 8013884:	ea4f 0838 	mov.w	r8, r8, rrx
 8013888:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 801388c:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013890:	1b80      	subs	r0, r0, r6
 8013892:	41bc      	sbcs	r4, r7
 8013894:	1800      	adds	r0, r0, r0
 8013896:	4164      	adcs	r4, r4
 8013898:	1a86      	subs	r6, r0, r2
 801389a:	eb74 0705 	sbcs.w	r7, r4, r5
 801389e:	ea4f 0838 	mov.w	r8, r8, rrx
 80138a2:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80138a6:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80138aa:	1b80      	subs	r0, r0, r6
 80138ac:	41bc      	sbcs	r4, r7
 80138ae:	1800      	adds	r0, r0, r0
 80138b0:	4164      	adcs	r4, r4
 80138b2:	1a86      	subs	r6, r0, r2
 80138b4:	eb74 0705 	sbcs.w	r7, r4, r5
 80138b8:	ea4f 0838 	mov.w	r8, r8, rrx
 80138bc:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80138c0:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80138c4:	1b80      	subs	r0, r0, r6
 80138c6:	41bc      	sbcs	r4, r7
 80138c8:	1800      	adds	r0, r0, r0
 80138ca:	4164      	adcs	r4, r4
 80138cc:	1a86      	subs	r6, r0, r2
 80138ce:	eb74 0705 	sbcs.w	r7, r4, r5
 80138d2:	ea4f 0838 	mov.w	r8, r8, rrx
 80138d6:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80138da:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80138de:	1b80      	subs	r0, r0, r6
 80138e0:	41bc      	sbcs	r4, r7
 80138e2:	1800      	adds	r0, r0, r0
 80138e4:	4164      	adcs	r4, r4
 80138e6:	1a86      	subs	r6, r0, r2
 80138e8:	eb74 0705 	sbcs.w	r7, r4, r5
 80138ec:	ea4f 0838 	mov.w	r8, r8, rrx
 80138f0:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80138f4:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80138f8:	1b80      	subs	r0, r0, r6
 80138fa:	41bc      	sbcs	r4, r7
 80138fc:	1800      	adds	r0, r0, r0
 80138fe:	4164      	adcs	r4, r4
 8013900:	1a86      	subs	r6, r0, r2
 8013902:	eb74 0705 	sbcs.w	r7, r4, r5
 8013906:	ea4f 0838 	mov.w	r8, r8, rrx
 801390a:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 801390e:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013912:	1b80      	subs	r0, r0, r6
 8013914:	41bc      	sbcs	r4, r7
 8013916:	1800      	adds	r0, r0, r0
 8013918:	4164      	adcs	r4, r4
 801391a:	1a86      	subs	r6, r0, r2
 801391c:	eb74 0705 	sbcs.w	r7, r4, r5
 8013920:	ea4f 0838 	mov.w	r8, r8, rrx
 8013924:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013928:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 801392c:	1b80      	subs	r0, r0, r6
 801392e:	41bc      	sbcs	r4, r7
 8013930:	1800      	adds	r0, r0, r0
 8013932:	4164      	adcs	r4, r4
 8013934:	1a86      	subs	r6, r0, r2
 8013936:	eb74 0705 	sbcs.w	r7, r4, r5
 801393a:	ea4f 0838 	mov.w	r8, r8, rrx
 801393e:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013942:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013946:	1b80      	subs	r0, r0, r6
 8013948:	41bc      	sbcs	r4, r7
 801394a:	1800      	adds	r0, r0, r0
 801394c:	4164      	adcs	r4, r4
 801394e:	1a86      	subs	r6, r0, r2
 8013950:	eb74 0705 	sbcs.w	r7, r4, r5
 8013954:	ea4f 0838 	mov.w	r8, r8, rrx
 8013958:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 801395c:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013960:	1b80      	subs	r0, r0, r6
 8013962:	41bc      	sbcs	r4, r7
 8013964:	1800      	adds	r0, r0, r0
 8013966:	4164      	adcs	r4, r4
 8013968:	1a86      	subs	r6, r0, r2
 801396a:	eb74 0705 	sbcs.w	r7, r4, r5
 801396e:	ea4f 0838 	mov.w	r8, r8, rrx
 8013972:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013976:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 801397a:	1b80      	subs	r0, r0, r6
 801397c:	41bc      	sbcs	r4, r7
 801397e:	1800      	adds	r0, r0, r0
 8013980:	4164      	adcs	r4, r4
 8013982:	1a86      	subs	r6, r0, r2
 8013984:	eb74 0705 	sbcs.w	r7, r4, r5
 8013988:	ea4f 0838 	mov.w	r8, r8, rrx
 801398c:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013990:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013994:	1b80      	subs	r0, r0, r6
 8013996:	41bc      	sbcs	r4, r7
 8013998:	1800      	adds	r0, r0, r0
 801399a:	4164      	adcs	r4, r4
 801399c:	1a86      	subs	r6, r0, r2
 801399e:	eb74 0705 	sbcs.w	r7, r4, r5
 80139a2:	ea4f 0838 	mov.w	r8, r8, rrx
 80139a6:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80139aa:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80139ae:	1b80      	subs	r0, r0, r6
 80139b0:	41bc      	sbcs	r4, r7
 80139b2:	1800      	adds	r0, r0, r0
 80139b4:	4164      	adcs	r4, r4
 80139b6:	1a86      	subs	r6, r0, r2
 80139b8:	eb74 0705 	sbcs.w	r7, r4, r5
 80139bc:	ea4f 0838 	mov.w	r8, r8, rrx
 80139c0:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80139c4:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80139c8:	1b80      	subs	r0, r0, r6
 80139ca:	41bc      	sbcs	r4, r7
 80139cc:	1800      	adds	r0, r0, r0
 80139ce:	4164      	adcs	r4, r4
 80139d0:	1a86      	subs	r6, r0, r2
 80139d2:	eb74 0705 	sbcs.w	r7, r4, r5
 80139d6:	ea4f 0838 	mov.w	r8, r8, rrx
 80139da:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80139de:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80139e2:	1b80      	subs	r0, r0, r6
 80139e4:	41bc      	sbcs	r4, r7
 80139e6:	1800      	adds	r0, r0, r0
 80139e8:	4164      	adcs	r4, r4
 80139ea:	1a86      	subs	r6, r0, r2
 80139ec:	eb74 0705 	sbcs.w	r7, r4, r5
 80139f0:	ea4f 0838 	mov.w	r8, r8, rrx
 80139f4:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 80139f8:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 80139fc:	1b80      	subs	r0, r0, r6
 80139fe:	41bc      	sbcs	r4, r7
 8013a00:	1800      	adds	r0, r0, r0
 8013a02:	4164      	adcs	r4, r4
 8013a04:	1a86      	subs	r6, r0, r2
 8013a06:	eb74 0705 	sbcs.w	r7, r4, r5
 8013a0a:	ea4f 0838 	mov.w	r8, r8, rrx
 8013a0e:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013a12:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013a16:	1b80      	subs	r0, r0, r6
 8013a18:	41bc      	sbcs	r4, r7
 8013a1a:	1800      	adds	r0, r0, r0
 8013a1c:	4164      	adcs	r4, r4
 8013a1e:	1a86      	subs	r6, r0, r2
 8013a20:	eb74 0705 	sbcs.w	r7, r4, r5
 8013a24:	ea4f 0838 	mov.w	r8, r8, rrx
 8013a28:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013a2c:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013a30:	1b80      	subs	r0, r0, r6
 8013a32:	41bc      	sbcs	r4, r7
 8013a34:	1800      	adds	r0, r0, r0
 8013a36:	4164      	adcs	r4, r4
 8013a38:	1a86      	subs	r6, r0, r2
 8013a3a:	eb74 0705 	sbcs.w	r7, r4, r5
 8013a3e:	ea4f 0838 	mov.w	r8, r8, rrx
 8013a42:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013a46:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013a4a:	1b80      	subs	r0, r0, r6
 8013a4c:	41bc      	sbcs	r4, r7
 8013a4e:	1800      	adds	r0, r0, r0
 8013a50:	4164      	adcs	r4, r4
 8013a52:	1a86      	subs	r6, r0, r2
 8013a54:	eb74 0705 	sbcs.w	r7, r4, r5
 8013a58:	ea4f 0838 	mov.w	r8, r8, rrx
 8013a5c:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013a60:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013a64:	1b80      	subs	r0, r0, r6
 8013a66:	41bc      	sbcs	r4, r7
 8013a68:	1800      	adds	r0, r0, r0
 8013a6a:	4164      	adcs	r4, r4
 8013a6c:	1a86      	subs	r6, r0, r2
 8013a6e:	eb74 0705 	sbcs.w	r7, r4, r5
 8013a72:	ea4f 0838 	mov.w	r8, r8, rrx
 8013a76:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013a7a:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013a7e:	1b80      	subs	r0, r0, r6
 8013a80:	41bc      	sbcs	r4, r7
 8013a82:	1800      	adds	r0, r0, r0
 8013a84:	4164      	adcs	r4, r4
 8013a86:	1a86      	subs	r6, r0, r2
 8013a88:	eb74 0705 	sbcs.w	r7, r4, r5
 8013a8c:	ea4f 0838 	mov.w	r8, r8, rrx
 8013a90:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013a94:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013a98:	1b80      	subs	r0, r0, r6
 8013a9a:	41bc      	sbcs	r4, r7
 8013a9c:	1800      	adds	r0, r0, r0
 8013a9e:	4164      	adcs	r4, r4
 8013aa0:	1a86      	subs	r6, r0, r2
 8013aa2:	eb74 0705 	sbcs.w	r7, r4, r5
 8013aa6:	ea4f 0838 	mov.w	r8, r8, rrx
 8013aaa:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013aae:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013ab2:	1b80      	subs	r0, r0, r6
 8013ab4:	41bc      	sbcs	r4, r7
 8013ab6:	1800      	adds	r0, r0, r0
 8013ab8:	4164      	adcs	r4, r4
 8013aba:	1a86      	subs	r6, r0, r2
 8013abc:	eb74 0705 	sbcs.w	r7, r4, r5
 8013ac0:	ea4f 0838 	mov.w	r8, r8, rrx
 8013ac4:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013ac8:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013acc:	1b80      	subs	r0, r0, r6
 8013ace:	41bc      	sbcs	r4, r7
 8013ad0:	1800      	adds	r0, r0, r0
 8013ad2:	4164      	adcs	r4, r4
 8013ad4:	1a86      	subs	r6, r0, r2
 8013ad6:	eb74 0705 	sbcs.w	r7, r4, r5
 8013ada:	ea4f 0838 	mov.w	r8, r8, rrx
 8013ade:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013ae2:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013ae6:	1b80      	subs	r0, r0, r6
 8013ae8:	41bc      	sbcs	r4, r7
 8013aea:	1800      	adds	r0, r0, r0
 8013aec:	4164      	adcs	r4, r4
 8013aee:	1a86      	subs	r6, r0, r2
 8013af0:	eb74 0705 	sbcs.w	r7, r4, r5
 8013af4:	ea4f 0838 	mov.w	r8, r8, rrx
 8013af8:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013afc:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013b00:	1b80      	subs	r0, r0, r6
 8013b02:	41bc      	sbcs	r4, r7
 8013b04:	1800      	adds	r0, r0, r0
 8013b06:	4164      	adcs	r4, r4
 8013b08:	1a86      	subs	r6, r0, r2
 8013b0a:	eb74 0705 	sbcs.w	r7, r4, r5
 8013b0e:	ea4f 0838 	mov.w	r8, r8, rrx
 8013b12:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 8013b16:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 8013b1a:	1b80      	subs	r0, r0, r6
 8013b1c:	41bc      	sbcs	r4, r7
 8013b1e:	1800      	adds	r0, r0, r0
 8013b20:	4164      	adcs	r4, r4
 8013b22:	3801      	subs	r0, #1
 8013b24:	f174 0400 	sbcs.w	r4, r4, #0
 8013b28:	ea4f 0838 	mov.w	r8, r8, rrx
 8013b2c:	fa98 f8a8 	rbit	r8, r8
 8013b30:	f018 0401 	ands.w	r4, r8, #1
 8013b34:	ea5f 56da 	movs.w	r6, sl, lsr #23
 8013b38:	4276      	negs	r6, r6
 8013b3a:	ea54 0458 	orrs.w	r4, r4, r8, lsr #1
 8013b3e:	ea54 74ca 	orrs.w	r4, r4, sl, lsl #31
 8013b42:	ea5f 055a 	movs.w	r5, sl, lsr #1
 8013b46:	ea98 0804 	eors.w	r8, r8, r4
 8013b4a:	ea9a 0a05 	eors.w	sl, sl, r5
 8013b4e:	ea38 0806 	bics.w	r8, r8, r6
 8013b52:	ea3a 0a06 	bics.w	sl, sl, r6
 8013b56:	ea94 0408 	eors.w	r4, r4, r8
 8013b5a:	ea95 050a 	eors.w	r5, r5, sl
 8013b5e:	0048      	lsls	r0, r1, #1
 8013b60:	005a      	lsls	r2, r3, #1
 8013b62:	0d40      	lsrs	r0, r0, #21
 8013b64:	f200 77ff 	addw	r7, r0, #2047	; 0x7ff
 8013b68:	ebb0 5052 	subs.w	r0, r0, r2, lsr #21
 8013b6c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013b70:	1b80      	subs	r0, r0, r6
 8013b72:	43c2      	mvns	r2, r0
 8013b74:	ea12 5207 	ands.w	r2, r2, r7, lsl #20
 8013b78:	ea10 70e2 	ands.w	r0, r0, r2, asr #31
 8013b7c:	ea14 74e2 	ands.w	r4, r4, r2, asr #31
 8013b80:	ea15 75e2 	ands.w	r5, r5, r2, asr #31
 8013b84:	4059      	eors	r1, r3
 8013b86:	f36f 011e 	bfc	r1, #0, #31
 8013b8a:	f360 511e 	bfi	r1, r0, #20, #11
 8013b8e:	0026      	movs	r6, r4
 8013b90:	08a0      	lsrs	r0, r4, #2
 8013b92:	ea50 7085 	orrs.w	r0, r0, r5, lsl #30
 8013b96:	eb11 0195 	adds.w	r1, r1, r5, lsr #2
 8013b9a:	f016 0607 	ands.w	r6, r6, #7
 8013b9e:	23c8      	movs	r3, #200	; 0xc8
 8013ba0:	40f3      	lsrs	r3, r6
 8013ba2:	f013 0301 	ands.w	r3, r3, #1
 8013ba6:	18c0      	adds	r0, r0, r3
 8013ba8:	f151 0100 	adcs.w	r1, r1, #0
 8013bac:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
	"adds	r0, r3\n\t"
	"adcs	r1, #0\n\t"
	"\n\t"
	"pop	{ r4, r5, r6, r7, r8, r10, r11, pc }\n\t"
	);
}
 8013bb0:	bf00      	nop
 8013bb2:	4610      	mov	r0, r2
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	bf00      	nop
	...

08013bc0 <falcon_inner_fpr_sqrt>:

__attribute__((naked))
fpr
fpr_sqrt(fpr x __attribute__((unused)))
{
	__asm__ (
 8013bc0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8013bc4:	0d0a      	lsrs	r2, r1, #20
 8013bc6:	f36f 511f 	bfc	r1, #20, #12
 8013bca:	f202 73ff 	addw	r3, r2, #2047	; 0x7ff
 8013bce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013bd2:	0adb      	lsrs	r3, r3, #11
 8013bd4:	ea51 5103 	orrs.w	r1, r1, r3, lsl #20
 8013bd8:	f012 0301 	ands.w	r3, r2, #1
 8013bdc:	1ad2      	subs	r2, r2, r3
 8013bde:	425b      	negs	r3, r3
 8013be0:	ea11 0403 	ands.w	r4, r1, r3
 8013be4:	4003      	ands	r3, r0
 8013be6:	18c0      	adds	r0, r0, r3
 8013be8:	4161      	adcs	r1, r4
 8013bea:	0249      	lsls	r1, r1, #9
 8013bec:	ea51 51d0 	orrs.w	r1, r1, r0, lsr #23
 8013bf0:	0240      	lsls	r0, r0, #9
 8013bf2:	405b      	eors	r3, r3
 8013bf4:	406d      	eors	r5, r5
 8013bf6:	f055 5600 	orrs.w	r6, r5, #536870912	; 0x20000000
 8013bfa:	1b8f      	subs	r7, r1, r6
 8013bfc:	ea4f 0333 	mov.w	r3, r3, rrx
 8013c00:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013c04:	1b89      	subs	r1, r1, r6
 8013c06:	0fde      	lsrs	r6, r3, #31
 8013c08:	ea55 7586 	orrs.w	r5, r5, r6, lsl #30
 8013c0c:	1800      	adds	r0, r0, r0
 8013c0e:	4149      	adcs	r1, r1
 8013c10:	f055 5680 	orrs.w	r6, r5, #268435456	; 0x10000000
 8013c14:	1b8f      	subs	r7, r1, r6
 8013c16:	ea4f 0333 	mov.w	r3, r3, rrx
 8013c1a:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013c1e:	1b89      	subs	r1, r1, r6
 8013c20:	0fde      	lsrs	r6, r3, #31
 8013c22:	ea55 7546 	orrs.w	r5, r5, r6, lsl #29
 8013c26:	1800      	adds	r0, r0, r0
 8013c28:	4149      	adcs	r1, r1
 8013c2a:	f055 6600 	orrs.w	r6, r5, #134217728	; 0x8000000
 8013c2e:	1b8f      	subs	r7, r1, r6
 8013c30:	ea4f 0333 	mov.w	r3, r3, rrx
 8013c34:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013c38:	1b89      	subs	r1, r1, r6
 8013c3a:	0fde      	lsrs	r6, r3, #31
 8013c3c:	ea55 7506 	orrs.w	r5, r5, r6, lsl #28
 8013c40:	1800      	adds	r0, r0, r0
 8013c42:	4149      	adcs	r1, r1
 8013c44:	f055 6680 	orrs.w	r6, r5, #67108864	; 0x4000000
 8013c48:	1b8f      	subs	r7, r1, r6
 8013c4a:	ea4f 0333 	mov.w	r3, r3, rrx
 8013c4e:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013c52:	1b89      	subs	r1, r1, r6
 8013c54:	0fde      	lsrs	r6, r3, #31
 8013c56:	ea55 65c6 	orrs.w	r5, r5, r6, lsl #27
 8013c5a:	1800      	adds	r0, r0, r0
 8013c5c:	4149      	adcs	r1, r1
 8013c5e:	f055 7600 	orrs.w	r6, r5, #33554432	; 0x2000000
 8013c62:	1b8f      	subs	r7, r1, r6
 8013c64:	ea4f 0333 	mov.w	r3, r3, rrx
 8013c68:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013c6c:	1b89      	subs	r1, r1, r6
 8013c6e:	0fde      	lsrs	r6, r3, #31
 8013c70:	ea55 6586 	orrs.w	r5, r5, r6, lsl #26
 8013c74:	1800      	adds	r0, r0, r0
 8013c76:	4149      	adcs	r1, r1
 8013c78:	f055 7680 	orrs.w	r6, r5, #16777216	; 0x1000000
 8013c7c:	1b8f      	subs	r7, r1, r6
 8013c7e:	ea4f 0333 	mov.w	r3, r3, rrx
 8013c82:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013c86:	1b89      	subs	r1, r1, r6
 8013c88:	0fde      	lsrs	r6, r3, #31
 8013c8a:	ea55 6546 	orrs.w	r5, r5, r6, lsl #25
 8013c8e:	1800      	adds	r0, r0, r0
 8013c90:	4149      	adcs	r1, r1
 8013c92:	f455 0600 	orrs.w	r6, r5, #8388608	; 0x800000
 8013c96:	1b8f      	subs	r7, r1, r6
 8013c98:	ea4f 0333 	mov.w	r3, r3, rrx
 8013c9c:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013ca0:	1b89      	subs	r1, r1, r6
 8013ca2:	0fde      	lsrs	r6, r3, #31
 8013ca4:	ea55 6506 	orrs.w	r5, r5, r6, lsl #24
 8013ca8:	1800      	adds	r0, r0, r0
 8013caa:	4149      	adcs	r1, r1
 8013cac:	f455 0680 	orrs.w	r6, r5, #4194304	; 0x400000
 8013cb0:	1b8f      	subs	r7, r1, r6
 8013cb2:	ea4f 0333 	mov.w	r3, r3, rrx
 8013cb6:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013cba:	1b89      	subs	r1, r1, r6
 8013cbc:	0fde      	lsrs	r6, r3, #31
 8013cbe:	ea55 55c6 	orrs.w	r5, r5, r6, lsl #23
 8013cc2:	1800      	adds	r0, r0, r0
 8013cc4:	4149      	adcs	r1, r1
 8013cc6:	f455 1600 	orrs.w	r6, r5, #2097152	; 0x200000
 8013cca:	1b8f      	subs	r7, r1, r6
 8013ccc:	ea4f 0333 	mov.w	r3, r3, rrx
 8013cd0:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013cd4:	1b89      	subs	r1, r1, r6
 8013cd6:	0fde      	lsrs	r6, r3, #31
 8013cd8:	ea55 5586 	orrs.w	r5, r5, r6, lsl #22
 8013cdc:	1800      	adds	r0, r0, r0
 8013cde:	4149      	adcs	r1, r1
 8013ce0:	f455 1680 	orrs.w	r6, r5, #1048576	; 0x100000
 8013ce4:	1b8f      	subs	r7, r1, r6
 8013ce6:	ea4f 0333 	mov.w	r3, r3, rrx
 8013cea:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013cee:	1b89      	subs	r1, r1, r6
 8013cf0:	0fde      	lsrs	r6, r3, #31
 8013cf2:	ea55 5546 	orrs.w	r5, r5, r6, lsl #21
 8013cf6:	1800      	adds	r0, r0, r0
 8013cf8:	4149      	adcs	r1, r1
 8013cfa:	f455 2600 	orrs.w	r6, r5, #524288	; 0x80000
 8013cfe:	1b8f      	subs	r7, r1, r6
 8013d00:	ea4f 0333 	mov.w	r3, r3, rrx
 8013d04:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013d08:	1b89      	subs	r1, r1, r6
 8013d0a:	0fde      	lsrs	r6, r3, #31
 8013d0c:	ea55 5506 	orrs.w	r5, r5, r6, lsl #20
 8013d10:	1800      	adds	r0, r0, r0
 8013d12:	4149      	adcs	r1, r1
 8013d14:	f455 2680 	orrs.w	r6, r5, #262144	; 0x40000
 8013d18:	1b8f      	subs	r7, r1, r6
 8013d1a:	ea4f 0333 	mov.w	r3, r3, rrx
 8013d1e:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013d22:	1b89      	subs	r1, r1, r6
 8013d24:	0fde      	lsrs	r6, r3, #31
 8013d26:	ea55 45c6 	orrs.w	r5, r5, r6, lsl #19
 8013d2a:	1800      	adds	r0, r0, r0
 8013d2c:	4149      	adcs	r1, r1
 8013d2e:	f455 3600 	orrs.w	r6, r5, #131072	; 0x20000
 8013d32:	1b8f      	subs	r7, r1, r6
 8013d34:	ea4f 0333 	mov.w	r3, r3, rrx
 8013d38:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013d3c:	1b89      	subs	r1, r1, r6
 8013d3e:	0fde      	lsrs	r6, r3, #31
 8013d40:	ea55 4586 	orrs.w	r5, r5, r6, lsl #18
 8013d44:	1800      	adds	r0, r0, r0
 8013d46:	4149      	adcs	r1, r1
 8013d48:	f455 3680 	orrs.w	r6, r5, #65536	; 0x10000
 8013d4c:	1b8f      	subs	r7, r1, r6
 8013d4e:	ea4f 0333 	mov.w	r3, r3, rrx
 8013d52:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013d56:	1b89      	subs	r1, r1, r6
 8013d58:	0fde      	lsrs	r6, r3, #31
 8013d5a:	ea55 4546 	orrs.w	r5, r5, r6, lsl #17
 8013d5e:	1800      	adds	r0, r0, r0
 8013d60:	4149      	adcs	r1, r1
 8013d62:	f455 4600 	orrs.w	r6, r5, #32768	; 0x8000
 8013d66:	1b8f      	subs	r7, r1, r6
 8013d68:	ea4f 0333 	mov.w	r3, r3, rrx
 8013d6c:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013d70:	1b89      	subs	r1, r1, r6
 8013d72:	0fde      	lsrs	r6, r3, #31
 8013d74:	ea55 4506 	orrs.w	r5, r5, r6, lsl #16
 8013d78:	1800      	adds	r0, r0, r0
 8013d7a:	4149      	adcs	r1, r1
 8013d7c:	f455 4680 	orrs.w	r6, r5, #16384	; 0x4000
 8013d80:	1b8f      	subs	r7, r1, r6
 8013d82:	ea4f 0333 	mov.w	r3, r3, rrx
 8013d86:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013d8a:	1b89      	subs	r1, r1, r6
 8013d8c:	0fde      	lsrs	r6, r3, #31
 8013d8e:	ea55 35c6 	orrs.w	r5, r5, r6, lsl #15
 8013d92:	1800      	adds	r0, r0, r0
 8013d94:	4149      	adcs	r1, r1
 8013d96:	f455 5600 	orrs.w	r6, r5, #8192	; 0x2000
 8013d9a:	1b8f      	subs	r7, r1, r6
 8013d9c:	ea4f 0333 	mov.w	r3, r3, rrx
 8013da0:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013da4:	1b89      	subs	r1, r1, r6
 8013da6:	0fde      	lsrs	r6, r3, #31
 8013da8:	ea55 3586 	orrs.w	r5, r5, r6, lsl #14
 8013dac:	1800      	adds	r0, r0, r0
 8013dae:	4149      	adcs	r1, r1
 8013db0:	f455 5680 	orrs.w	r6, r5, #4096	; 0x1000
 8013db4:	1b8f      	subs	r7, r1, r6
 8013db6:	ea4f 0333 	mov.w	r3, r3, rrx
 8013dba:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013dbe:	1b89      	subs	r1, r1, r6
 8013dc0:	0fde      	lsrs	r6, r3, #31
 8013dc2:	ea55 3546 	orrs.w	r5, r5, r6, lsl #13
 8013dc6:	1800      	adds	r0, r0, r0
 8013dc8:	4149      	adcs	r1, r1
 8013dca:	f455 6600 	orrs.w	r6, r5, #2048	; 0x800
 8013dce:	1b8f      	subs	r7, r1, r6
 8013dd0:	ea4f 0333 	mov.w	r3, r3, rrx
 8013dd4:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013dd8:	1b89      	subs	r1, r1, r6
 8013dda:	0fde      	lsrs	r6, r3, #31
 8013ddc:	ea55 3506 	orrs.w	r5, r5, r6, lsl #12
 8013de0:	1800      	adds	r0, r0, r0
 8013de2:	4149      	adcs	r1, r1
 8013de4:	f455 6680 	orrs.w	r6, r5, #1024	; 0x400
 8013de8:	1b8f      	subs	r7, r1, r6
 8013dea:	ea4f 0333 	mov.w	r3, r3, rrx
 8013dee:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013df2:	1b89      	subs	r1, r1, r6
 8013df4:	0fde      	lsrs	r6, r3, #31
 8013df6:	ea55 25c6 	orrs.w	r5, r5, r6, lsl #11
 8013dfa:	1800      	adds	r0, r0, r0
 8013dfc:	4149      	adcs	r1, r1
 8013dfe:	f455 7600 	orrs.w	r6, r5, #512	; 0x200
 8013e02:	1b8f      	subs	r7, r1, r6
 8013e04:	ea4f 0333 	mov.w	r3, r3, rrx
 8013e08:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013e0c:	1b89      	subs	r1, r1, r6
 8013e0e:	0fde      	lsrs	r6, r3, #31
 8013e10:	ea55 2586 	orrs.w	r5, r5, r6, lsl #10
 8013e14:	1800      	adds	r0, r0, r0
 8013e16:	4149      	adcs	r1, r1
 8013e18:	f455 7680 	orrs.w	r6, r5, #256	; 0x100
 8013e1c:	1b8f      	subs	r7, r1, r6
 8013e1e:	ea4f 0333 	mov.w	r3, r3, rrx
 8013e22:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013e26:	1b89      	subs	r1, r1, r6
 8013e28:	0fde      	lsrs	r6, r3, #31
 8013e2a:	ea55 2546 	orrs.w	r5, r5, r6, lsl #9
 8013e2e:	1800      	adds	r0, r0, r0
 8013e30:	4149      	adcs	r1, r1
 8013e32:	f055 0680 	orrs.w	r6, r5, #128	; 0x80
 8013e36:	1b8f      	subs	r7, r1, r6
 8013e38:	ea4f 0333 	mov.w	r3, r3, rrx
 8013e3c:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013e40:	1b89      	subs	r1, r1, r6
 8013e42:	0fde      	lsrs	r6, r3, #31
 8013e44:	ea55 2506 	orrs.w	r5, r5, r6, lsl #8
 8013e48:	1800      	adds	r0, r0, r0
 8013e4a:	4149      	adcs	r1, r1
 8013e4c:	f055 0640 	orrs.w	r6, r5, #64	; 0x40
 8013e50:	1b8f      	subs	r7, r1, r6
 8013e52:	ea4f 0333 	mov.w	r3, r3, rrx
 8013e56:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013e5a:	1b89      	subs	r1, r1, r6
 8013e5c:	0fde      	lsrs	r6, r3, #31
 8013e5e:	ea55 15c6 	orrs.w	r5, r5, r6, lsl #7
 8013e62:	1800      	adds	r0, r0, r0
 8013e64:	4149      	adcs	r1, r1
 8013e66:	f055 0620 	orrs.w	r6, r5, #32
 8013e6a:	1b8f      	subs	r7, r1, r6
 8013e6c:	ea4f 0333 	mov.w	r3, r3, rrx
 8013e70:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013e74:	1b89      	subs	r1, r1, r6
 8013e76:	0fde      	lsrs	r6, r3, #31
 8013e78:	ea55 1586 	orrs.w	r5, r5, r6, lsl #6
 8013e7c:	1800      	adds	r0, r0, r0
 8013e7e:	4149      	adcs	r1, r1
 8013e80:	f055 0610 	orrs.w	r6, r5, #16
 8013e84:	1b8f      	subs	r7, r1, r6
 8013e86:	ea4f 0333 	mov.w	r3, r3, rrx
 8013e8a:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013e8e:	1b89      	subs	r1, r1, r6
 8013e90:	0fde      	lsrs	r6, r3, #31
 8013e92:	ea55 1546 	orrs.w	r5, r5, r6, lsl #5
 8013e96:	1800      	adds	r0, r0, r0
 8013e98:	4149      	adcs	r1, r1
 8013e9a:	f055 0608 	orrs.w	r6, r5, #8
 8013e9e:	1b8f      	subs	r7, r1, r6
 8013ea0:	ea4f 0333 	mov.w	r3, r3, rrx
 8013ea4:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013ea8:	1b89      	subs	r1, r1, r6
 8013eaa:	0fde      	lsrs	r6, r3, #31
 8013eac:	ea55 1506 	orrs.w	r5, r5, r6, lsl #4
 8013eb0:	1800      	adds	r0, r0, r0
 8013eb2:	4149      	adcs	r1, r1
 8013eb4:	f055 0604 	orrs.w	r6, r5, #4
 8013eb8:	1b8f      	subs	r7, r1, r6
 8013eba:	ea4f 0333 	mov.w	r3, r3, rrx
 8013ebe:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013ec2:	1b89      	subs	r1, r1, r6
 8013ec4:	0fde      	lsrs	r6, r3, #31
 8013ec6:	ea55 05c6 	orrs.w	r5, r5, r6, lsl #3
 8013eca:	1800      	adds	r0, r0, r0
 8013ecc:	4149      	adcs	r1, r1
 8013ece:	f055 0602 	orrs.w	r6, r5, #2
 8013ed2:	1b8f      	subs	r7, r1, r6
 8013ed4:	ea4f 0333 	mov.w	r3, r3, rrx
 8013ed8:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013edc:	1b89      	subs	r1, r1, r6
 8013ede:	0fde      	lsrs	r6, r3, #31
 8013ee0:	ea55 0586 	orrs.w	r5, r5, r6, lsl #2
 8013ee4:	1800      	adds	r0, r0, r0
 8013ee6:	4149      	adcs	r1, r1
 8013ee8:	f055 0601 	orrs.w	r6, r5, #1
 8013eec:	1b8f      	subs	r7, r1, r6
 8013eee:	ea4f 0333 	mov.w	r3, r3, rrx
 8013ef2:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 8013ef6:	1b89      	subs	r1, r1, r6
 8013ef8:	0fde      	lsrs	r6, r3, #31
 8013efa:	ea55 0546 	orrs.w	r5, r5, r6, lsl #1
 8013efe:	1800      	adds	r0, r0, r0
 8013f00:	4149      	adcs	r1, r1
 8013f02:	fa93 f3a3 	rbit	r3, r3
 8013f06:	4064      	eors	r4, r4
 8013f08:	4076      	eors	r6, r6
 8013f0a:	f056 4700 	orrs.w	r7, r6, #2147483648	; 0x80000000
 8013f0e:	ebb0 0807 	subs.w	r8, r0, r7
 8013f12:	eb71 0a05 	sbcs.w	sl, r1, r5
 8013f16:	ea4f 0434 	mov.w	r4, r4, rrx
 8013f1a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 8013f1e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 8013f22:	1bc0      	subs	r0, r0, r7
 8013f24:	eb71 0108 	sbcs.w	r1, r1, r8
 8013f28:	0fe7      	lsrs	r7, r4, #31
 8013f2a:	ea55 75d4 	orrs.w	r5, r5, r4, lsr #31
 8013f2e:	1800      	adds	r0, r0, r0
 8013f30:	4149      	adcs	r1, r1
 8013f32:	f056 4780 	orrs.w	r7, r6, #1073741824	; 0x40000000
 8013f36:	ebb0 0807 	subs.w	r8, r0, r7
 8013f3a:	eb71 0a05 	sbcs.w	sl, r1, r5
 8013f3e:	ea4f 0434 	mov.w	r4, r4, rrx
 8013f42:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 8013f46:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 8013f4a:	1bc0      	subs	r0, r0, r7
 8013f4c:	eb71 0108 	sbcs.w	r1, r1, r8
 8013f50:	0fe7      	lsrs	r7, r4, #31
 8013f52:	ea56 76c7 	orrs.w	r6, r6, r7, lsl #31
 8013f56:	1800      	adds	r0, r0, r0
 8013f58:	4149      	adcs	r1, r1
 8013f5a:	f056 5700 	orrs.w	r7, r6, #536870912	; 0x20000000
 8013f5e:	ebb0 0807 	subs.w	r8, r0, r7
 8013f62:	eb71 0a05 	sbcs.w	sl, r1, r5
 8013f66:	ea4f 0434 	mov.w	r4, r4, rrx
 8013f6a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 8013f6e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 8013f72:	1bc0      	subs	r0, r0, r7
 8013f74:	eb71 0108 	sbcs.w	r1, r1, r8
 8013f78:	0fe7      	lsrs	r7, r4, #31
 8013f7a:	ea56 7687 	orrs.w	r6, r6, r7, lsl #30
 8013f7e:	1800      	adds	r0, r0, r0
 8013f80:	4149      	adcs	r1, r1
 8013f82:	f056 5780 	orrs.w	r7, r6, #268435456	; 0x10000000
 8013f86:	ebb0 0807 	subs.w	r8, r0, r7
 8013f8a:	eb71 0a05 	sbcs.w	sl, r1, r5
 8013f8e:	ea4f 0434 	mov.w	r4, r4, rrx
 8013f92:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 8013f96:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 8013f9a:	1bc0      	subs	r0, r0, r7
 8013f9c:	eb71 0108 	sbcs.w	r1, r1, r8
 8013fa0:	0fe7      	lsrs	r7, r4, #31
 8013fa2:	ea56 7647 	orrs.w	r6, r6, r7, lsl #29
 8013fa6:	1800      	adds	r0, r0, r0
 8013fa8:	4149      	adcs	r1, r1
 8013faa:	f056 6700 	orrs.w	r7, r6, #134217728	; 0x8000000
 8013fae:	ebb0 0807 	subs.w	r8, r0, r7
 8013fb2:	eb71 0a05 	sbcs.w	sl, r1, r5
 8013fb6:	ea4f 0434 	mov.w	r4, r4, rrx
 8013fba:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 8013fbe:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 8013fc2:	1bc0      	subs	r0, r0, r7
 8013fc4:	eb71 0108 	sbcs.w	r1, r1, r8
 8013fc8:	0fe7      	lsrs	r7, r4, #31
 8013fca:	ea56 7607 	orrs.w	r6, r6, r7, lsl #28
 8013fce:	1800      	adds	r0, r0, r0
 8013fd0:	4149      	adcs	r1, r1
 8013fd2:	f056 6780 	orrs.w	r7, r6, #67108864	; 0x4000000
 8013fd6:	ebb0 0807 	subs.w	r8, r0, r7
 8013fda:	eb71 0a05 	sbcs.w	sl, r1, r5
 8013fde:	ea4f 0434 	mov.w	r4, r4, rrx
 8013fe2:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 8013fe6:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 8013fea:	1bc0      	subs	r0, r0, r7
 8013fec:	eb71 0108 	sbcs.w	r1, r1, r8
 8013ff0:	0fe7      	lsrs	r7, r4, #31
 8013ff2:	ea56 66c7 	orrs.w	r6, r6, r7, lsl #27
 8013ff6:	1800      	adds	r0, r0, r0
 8013ff8:	4149      	adcs	r1, r1
 8013ffa:	f056 7700 	orrs.w	r7, r6, #33554432	; 0x2000000
 8013ffe:	ebb0 0807 	subs.w	r8, r0, r7
 8014002:	eb71 0a05 	sbcs.w	sl, r1, r5
 8014006:	ea4f 0434 	mov.w	r4, r4, rrx
 801400a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 801400e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 8014012:	1bc0      	subs	r0, r0, r7
 8014014:	eb71 0108 	sbcs.w	r1, r1, r8
 8014018:	0fe7      	lsrs	r7, r4, #31
 801401a:	ea56 6687 	orrs.w	r6, r6, r7, lsl #26
 801401e:	1800      	adds	r0, r0, r0
 8014020:	4149      	adcs	r1, r1
 8014022:	f056 7780 	orrs.w	r7, r6, #16777216	; 0x1000000
 8014026:	ebb0 0807 	subs.w	r8, r0, r7
 801402a:	eb71 0a05 	sbcs.w	sl, r1, r5
 801402e:	ea4f 0434 	mov.w	r4, r4, rrx
 8014032:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 8014036:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 801403a:	1bc0      	subs	r0, r0, r7
 801403c:	eb71 0108 	sbcs.w	r1, r1, r8
 8014040:	0fe7      	lsrs	r7, r4, #31
 8014042:	ea56 6647 	orrs.w	r6, r6, r7, lsl #25
 8014046:	1800      	adds	r0, r0, r0
 8014048:	4149      	adcs	r1, r1
 801404a:	f456 0700 	orrs.w	r7, r6, #8388608	; 0x800000
 801404e:	ebb0 0807 	subs.w	r8, r0, r7
 8014052:	eb71 0a05 	sbcs.w	sl, r1, r5
 8014056:	ea4f 0434 	mov.w	r4, r4, rrx
 801405a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 801405e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 8014062:	1bc0      	subs	r0, r0, r7
 8014064:	eb71 0108 	sbcs.w	r1, r1, r8
 8014068:	0fe7      	lsrs	r7, r4, #31
 801406a:	ea56 6607 	orrs.w	r6, r6, r7, lsl #24
 801406e:	1800      	adds	r0, r0, r0
 8014070:	4149      	adcs	r1, r1
 8014072:	f456 0780 	orrs.w	r7, r6, #4194304	; 0x400000
 8014076:	ebb0 0807 	subs.w	r8, r0, r7
 801407a:	eb71 0a05 	sbcs.w	sl, r1, r5
 801407e:	ea4f 0434 	mov.w	r4, r4, rrx
 8014082:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 8014086:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 801408a:	1bc0      	subs	r0, r0, r7
 801408c:	eb71 0108 	sbcs.w	r1, r1, r8
 8014090:	0fe7      	lsrs	r7, r4, #31
 8014092:	ea56 56c7 	orrs.w	r6, r6, r7, lsl #23
 8014096:	1800      	adds	r0, r0, r0
 8014098:	4149      	adcs	r1, r1
 801409a:	f456 1700 	orrs.w	r7, r6, #2097152	; 0x200000
 801409e:	ebb0 0807 	subs.w	r8, r0, r7
 80140a2:	eb71 0a05 	sbcs.w	sl, r1, r5
 80140a6:	ea4f 0434 	mov.w	r4, r4, rrx
 80140aa:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 80140ae:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 80140b2:	1bc0      	subs	r0, r0, r7
 80140b4:	eb71 0108 	sbcs.w	r1, r1, r8
 80140b8:	0fe7      	lsrs	r7, r4, #31
 80140ba:	ea56 5687 	orrs.w	r6, r6, r7, lsl #22
 80140be:	1800      	adds	r0, r0, r0
 80140c0:	4149      	adcs	r1, r1
 80140c2:	f456 1780 	orrs.w	r7, r6, #1048576	; 0x100000
 80140c6:	ebb0 0807 	subs.w	r8, r0, r7
 80140ca:	eb71 0a05 	sbcs.w	sl, r1, r5
 80140ce:	ea4f 0434 	mov.w	r4, r4, rrx
 80140d2:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 80140d6:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 80140da:	1bc0      	subs	r0, r0, r7
 80140dc:	eb71 0108 	sbcs.w	r1, r1, r8
 80140e0:	0fe7      	lsrs	r7, r4, #31
 80140e2:	ea56 5647 	orrs.w	r6, r6, r7, lsl #21
 80140e6:	1800      	adds	r0, r0, r0
 80140e8:	4149      	adcs	r1, r1
 80140ea:	f456 2700 	orrs.w	r7, r6, #524288	; 0x80000
 80140ee:	ebb0 0807 	subs.w	r8, r0, r7
 80140f2:	eb71 0a05 	sbcs.w	sl, r1, r5
 80140f6:	ea4f 0434 	mov.w	r4, r4, rrx
 80140fa:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 80140fe:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 8014102:	1bc0      	subs	r0, r0, r7
 8014104:	eb71 0108 	sbcs.w	r1, r1, r8
 8014108:	0fe7      	lsrs	r7, r4, #31
 801410a:	ea56 5607 	orrs.w	r6, r6, r7, lsl #20
 801410e:	1800      	adds	r0, r0, r0
 8014110:	4149      	adcs	r1, r1
 8014112:	f456 2780 	orrs.w	r7, r6, #262144	; 0x40000
 8014116:	ebb0 0807 	subs.w	r8, r0, r7
 801411a:	eb71 0a05 	sbcs.w	sl, r1, r5
 801411e:	ea4f 0434 	mov.w	r4, r4, rrx
 8014122:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 8014126:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 801412a:	1bc0      	subs	r0, r0, r7
 801412c:	eb71 0108 	sbcs.w	r1, r1, r8
 8014130:	0fe7      	lsrs	r7, r4, #31
 8014132:	ea56 46c7 	orrs.w	r6, r6, r7, lsl #19
 8014136:	1800      	adds	r0, r0, r0
 8014138:	4149      	adcs	r1, r1
 801413a:	f456 3700 	orrs.w	r7, r6, #131072	; 0x20000
 801413e:	ebb0 0807 	subs.w	r8, r0, r7
 8014142:	eb71 0a05 	sbcs.w	sl, r1, r5
 8014146:	ea4f 0434 	mov.w	r4, r4, rrx
 801414a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 801414e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 8014152:	1bc0      	subs	r0, r0, r7
 8014154:	eb71 0108 	sbcs.w	r1, r1, r8
 8014158:	0fe7      	lsrs	r7, r4, #31
 801415a:	ea56 4687 	orrs.w	r6, r6, r7, lsl #18
 801415e:	1800      	adds	r0, r0, r0
 8014160:	4149      	adcs	r1, r1
 8014162:	f456 3780 	orrs.w	r7, r6, #65536	; 0x10000
 8014166:	ebb0 0807 	subs.w	r8, r0, r7
 801416a:	eb71 0a05 	sbcs.w	sl, r1, r5
 801416e:	ea4f 0434 	mov.w	r4, r4, rrx
 8014172:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 8014176:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 801417a:	1bc0      	subs	r0, r0, r7
 801417c:	eb71 0108 	sbcs.w	r1, r1, r8
 8014180:	0fe7      	lsrs	r7, r4, #31
 8014182:	ea56 4647 	orrs.w	r6, r6, r7, lsl #17
 8014186:	1800      	adds	r0, r0, r0
 8014188:	4149      	adcs	r1, r1
 801418a:	f456 4700 	orrs.w	r7, r6, #32768	; 0x8000
 801418e:	ebb0 0807 	subs.w	r8, r0, r7
 8014192:	eb71 0a05 	sbcs.w	sl, r1, r5
 8014196:	ea4f 0434 	mov.w	r4, r4, rrx
 801419a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 801419e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 80141a2:	1bc0      	subs	r0, r0, r7
 80141a4:	eb71 0108 	sbcs.w	r1, r1, r8
 80141a8:	0fe7      	lsrs	r7, r4, #31
 80141aa:	ea56 4607 	orrs.w	r6, r6, r7, lsl #16
 80141ae:	1800      	adds	r0, r0, r0
 80141b0:	4149      	adcs	r1, r1
 80141b2:	f456 4780 	orrs.w	r7, r6, #16384	; 0x4000
 80141b6:	ebb0 0807 	subs.w	r8, r0, r7
 80141ba:	eb71 0a05 	sbcs.w	sl, r1, r5
 80141be:	ea4f 0434 	mov.w	r4, r4, rrx
 80141c2:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 80141c6:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 80141ca:	1bc0      	subs	r0, r0, r7
 80141cc:	eb71 0108 	sbcs.w	r1, r1, r8
 80141d0:	0fe7      	lsrs	r7, r4, #31
 80141d2:	ea56 36c7 	orrs.w	r6, r6, r7, lsl #15
 80141d6:	1800      	adds	r0, r0, r0
 80141d8:	4149      	adcs	r1, r1
 80141da:	f456 5700 	orrs.w	r7, r6, #8192	; 0x2000
 80141de:	ebb0 0807 	subs.w	r8, r0, r7
 80141e2:	eb71 0a05 	sbcs.w	sl, r1, r5
 80141e6:	ea4f 0434 	mov.w	r4, r4, rrx
 80141ea:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 80141ee:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 80141f2:	1bc0      	subs	r0, r0, r7
 80141f4:	eb71 0108 	sbcs.w	r1, r1, r8
 80141f8:	0fe7      	lsrs	r7, r4, #31
 80141fa:	ea56 3687 	orrs.w	r6, r6, r7, lsl #14
 80141fe:	1800      	adds	r0, r0, r0
 8014200:	4149      	adcs	r1, r1
 8014202:	f456 5780 	orrs.w	r7, r6, #4096	; 0x1000
 8014206:	ebb0 0807 	subs.w	r8, r0, r7
 801420a:	eb71 0a05 	sbcs.w	sl, r1, r5
 801420e:	ea4f 0434 	mov.w	r4, r4, rrx
 8014212:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 8014216:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 801421a:	1bc0      	subs	r0, r0, r7
 801421c:	eb71 0108 	sbcs.w	r1, r1, r8
 8014220:	0fe7      	lsrs	r7, r4, #31
 8014222:	ea56 3647 	orrs.w	r6, r6, r7, lsl #13
 8014226:	1800      	adds	r0, r0, r0
 8014228:	4149      	adcs	r1, r1
 801422a:	f456 6700 	orrs.w	r7, r6, #2048	; 0x800
 801422e:	ebb0 0807 	subs.w	r8, r0, r7
 8014232:	eb71 0a05 	sbcs.w	sl, r1, r5
 8014236:	ea4f 0434 	mov.w	r4, r4, rrx
 801423a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 801423e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 8014242:	1bc0      	subs	r0, r0, r7
 8014244:	eb71 0108 	sbcs.w	r1, r1, r8
 8014248:	0fe7      	lsrs	r7, r4, #31
 801424a:	ea56 3607 	orrs.w	r6, r6, r7, lsl #12
 801424e:	1800      	adds	r0, r0, r0
 8014250:	4149      	adcs	r1, r1
 8014252:	f456 6780 	orrs.w	r7, r6, #1024	; 0x400
 8014256:	ebb0 0807 	subs.w	r8, r0, r7
 801425a:	eb71 0a05 	sbcs.w	sl, r1, r5
 801425e:	ea4f 0434 	mov.w	r4, r4, rrx
 8014262:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 8014266:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 801426a:	1bc0      	subs	r0, r0, r7
 801426c:	eb71 0108 	sbcs.w	r1, r1, r8
 8014270:	0fe7      	lsrs	r7, r4, #31
 8014272:	ea56 26c7 	orrs.w	r6, r6, r7, lsl #11
 8014276:	1800      	adds	r0, r0, r0
 8014278:	4149      	adcs	r1, r1
 801427a:	f456 7700 	orrs.w	r7, r6, #512	; 0x200
 801427e:	ebb0 0807 	subs.w	r8, r0, r7
 8014282:	eb71 0a05 	sbcs.w	sl, r1, r5
 8014286:	ea4f 0434 	mov.w	r4, r4, rrx
 801428a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 801428e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 8014292:	1bc0      	subs	r0, r0, r7
 8014294:	eb71 0108 	sbcs.w	r1, r1, r8
 8014298:	0fe7      	lsrs	r7, r4, #31
 801429a:	ea56 2687 	orrs.w	r6, r6, r7, lsl #10
 801429e:	1800      	adds	r0, r0, r0
 80142a0:	4149      	adcs	r1, r1
 80142a2:	f456 7780 	orrs.w	r7, r6, #256	; 0x100
 80142a6:	ebb0 0807 	subs.w	r8, r0, r7
 80142aa:	eb71 0a05 	sbcs.w	sl, r1, r5
 80142ae:	ea4f 0434 	mov.w	r4, r4, rrx
 80142b2:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 80142b6:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 80142ba:	1bc0      	subs	r0, r0, r7
 80142bc:	eb71 0108 	sbcs.w	r1, r1, r8
 80142c0:	0fe7      	lsrs	r7, r4, #31
 80142c2:	ea56 2647 	orrs.w	r6, r6, r7, lsl #9
 80142c6:	1800      	adds	r0, r0, r0
 80142c8:	4149      	adcs	r1, r1
 80142ca:	fa94 f4a4 	rbit	r4, r4
 80142ce:	4308      	orrs	r0, r1
 80142d0:	4241      	negs	r1, r0
 80142d2:	4308      	orrs	r0, r1
 80142d4:	0065      	lsls	r5, r4, #1
 80142d6:	ea55 75d0 	orrs.w	r5, r5, r0, lsr #31
 80142da:	f015 0507 	ands.w	r5, r5, #7
 80142de:	26c8      	movs	r6, #200	; 0xc8
 80142e0:	40ee      	lsrs	r6, r5
 80142e2:	f016 0601 	ands.w	r6, r6, #1
 80142e6:	0860      	lsrs	r0, r4, #1
 80142e8:	ea50 50c3 	orrs.w	r0, r0, r3, lsl #23
 80142ec:	0a59      	lsrs	r1, r3, #9
 80142ee:	0852      	lsrs	r2, r2, #1
 80142f0:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80142f4:	0d0d      	lsrs	r5, r1, #20
 80142f6:	426d      	negs	r5, r5
 80142f8:	402a      	ands	r2, r5
 80142fa:	f362 511e 	bfi	r1, r2, #20, #11
 80142fe:	1980      	adds	r0, r0, r6
 8014300:	f151 0100 	adcs.w	r1, r1, #0
 8014304:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
	"adds	r0, r0, r6\n\t"
	"adcs	r1, r1, #0\n\t"
	"\n\t"
	"pop	{ r4, r5, r6, r7, r8, r10, r11, pc }\n\t"
	);
}
 8014308:	bf00      	nop
 801430a:	4610      	mov	r0, r2
 801430c:	4619      	mov	r1, r3
 801430e:	bf00      	nop

08014310 <falcon_inner_fpr_expm_p63>:


uint64_t
fpr_expm_p63(fpr x, fpr ccs)
{
 8014310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014314:	b0df      	sub	sp, #380	; 0x17c
 8014316:	e9cd 014c 	strd	r0, r1, [sp, #304]	; 0x130
 801431a:	e9cd 234a 	strd	r2, r3, [sp, #296]	; 0x128
	uint64_t z, y;
	unsigned u;
	uint32_t z0, z1, y0, y1;
	uint64_t a, b;

	y = C[0];
 801431e:	4b0e      	ldr	r3, [pc, #56]	; (8014358 <falcon_inner_fpr_expm_p63+0x48>)
 8014320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014324:	e9cd 235c 	strd	r2, r3, [sp, #368]	; 0x170
	z = (uint64_t)fpr_trunc(fpr_mul(x, fpr_ptwo63)) << 1;
 8014328:	f04f 0200 	mov.w	r2, #0
 801432c:	4b0b      	ldr	r3, [pc, #44]	; (801435c <falcon_inner_fpr_expm_p63+0x4c>)
 801432e:	e9dd 014c 	ldrd	r0, r1, [sp, #304]	; 0x130
 8014332:	f7ff f8a5 	bl	8013480 <falcon_inner_fpr_mul>
 8014336:	4602      	mov	r2, r0
 8014338:	460b      	mov	r3, r1
 801433a:	4610      	mov	r0, r2
 801433c:	4619      	mov	r1, r3
 801433e:	f7fe ff2f 	bl	80131a0 <fpr_trunc.lto_priv.1>
 8014342:	4602      	mov	r2, r0
 8014344:	460b      	mov	r3, r1
 8014346:	1894      	adds	r4, r2, r2
 8014348:	eb43 0503 	adc.w	r5, r3, r3
 801434c:	e9cd 4558 	strd	r4, r5, [sp, #352]	; 0x160
	for (u = 1; u < (sizeof C) / sizeof(C[0]); u ++) {
 8014350:	2301      	movs	r3, #1
 8014352:	935b      	str	r3, [sp, #364]	; 0x16c
 8014354:	e101      	b.n	801455a <falcon_inner_fpr_expm_p63+0x24a>
 8014356:	bf00      	nop
 8014358:	08023358 	.word	0x08023358
 801435c:	43e00000 	.word	0x43e00000
		 * also have appropriate IEEE754 floating-point support,
		 * which is better.
		 */
		uint64_t c;

		z0 = (uint32_t)z;
 8014360:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8014362:	9357      	str	r3, [sp, #348]	; 0x15c
		z1 = (uint32_t)(z >> 32);
 8014364:	e9dd 2358 	ldrd	r2, r3, [sp, #352]	; 0x160
 8014368:	f04f 0000 	mov.w	r0, #0
 801436c:	f04f 0100 	mov.w	r1, #0
 8014370:	0018      	movs	r0, r3
 8014372:	2100      	movs	r1, #0
 8014374:	4603      	mov	r3, r0
 8014376:	9356      	str	r3, [sp, #344]	; 0x158
		y0 = (uint32_t)y;
 8014378:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 801437a:	9355      	str	r3, [sp, #340]	; 0x154
		y1 = (uint32_t)(y >> 32);
 801437c:	e9dd 235c 	ldrd	r2, r3, [sp, #368]	; 0x170
 8014380:	f04f 0000 	mov.w	r0, #0
 8014384:	f04f 0100 	mov.w	r1, #0
 8014388:	0018      	movs	r0, r3
 801438a:	2100      	movs	r1, #0
 801438c:	4603      	mov	r3, r0
 801438e:	9354      	str	r3, [sp, #336]	; 0x150
		a = ((uint64_t)z0 * (uint64_t)y1)
 8014390:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 8014392:	2200      	movs	r2, #0
 8014394:	930a      	str	r3, [sp, #40]	; 0x28
 8014396:	920b      	str	r2, [sp, #44]	; 0x2c
 8014398:	9b54      	ldr	r3, [sp, #336]	; 0x150
 801439a:	2200      	movs	r2, #0
 801439c:	930c      	str	r3, [sp, #48]	; 0x30
 801439e:	920d      	str	r2, [sp, #52]	; 0x34
 80143a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80143a4:	460b      	mov	r3, r1
 80143a6:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 80143aa:	4622      	mov	r2, r4
 80143ac:	fb02 f203 	mul.w	r2, r2, r3
 80143b0:	462b      	mov	r3, r5
 80143b2:	4684      	mov	ip, r0
 80143b4:	fb0c f303 	mul.w	r3, ip, r3
 80143b8:	4413      	add	r3, r2
 80143ba:	4602      	mov	r2, r0
 80143bc:	4621      	mov	r1, r4
 80143be:	fba2 ab01 	umull	sl, fp, r2, r1
 80143c2:	445b      	add	r3, fp
 80143c4:	469b      	mov	fp, r3
			+ (((uint64_t)z0 * (uint64_t)y0) >> 32);
 80143c6:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 80143c8:	2200      	movs	r2, #0
 80143ca:	930e      	str	r3, [sp, #56]	; 0x38
 80143cc:	920f      	str	r2, [sp, #60]	; 0x3c
 80143ce:	9b55      	ldr	r3, [sp, #340]	; 0x154
 80143d0:	2200      	movs	r2, #0
 80143d2:	9310      	str	r3, [sp, #64]	; 0x40
 80143d4:	9211      	str	r2, [sp, #68]	; 0x44
 80143d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80143da:	460b      	mov	r3, r1
 80143dc:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 80143e0:	4622      	mov	r2, r4
 80143e2:	fb02 f203 	mul.w	r2, r2, r3
 80143e6:	462b      	mov	r3, r5
 80143e8:	4684      	mov	ip, r0
 80143ea:	fb0c f303 	mul.w	r3, ip, r3
 80143ee:	4413      	add	r3, r2
 80143f0:	4602      	mov	r2, r0
 80143f2:	4621      	mov	r1, r4
 80143f4:	fba2 2101 	umull	r2, r1, r2, r1
 80143f8:	9101      	str	r1, [sp, #4]
 80143fa:	9200      	str	r2, [sp, #0]
 80143fc:	9a01      	ldr	r2, [sp, #4]
 80143fe:	4413      	add	r3, r2
 8014400:	9301      	str	r3, [sp, #4]
 8014402:	f04f 0200 	mov.w	r2, #0
 8014406:	f04f 0300 	mov.w	r3, #0
 801440a:	9901      	ldr	r1, [sp, #4]
 801440c:	000a      	movs	r2, r1
 801440e:	2300      	movs	r3, #0
		a = ((uint64_t)z0 * (uint64_t)y1)
 8014410:	eb1a 0102 	adds.w	r1, sl, r2
 8014414:	9136      	str	r1, [sp, #216]	; 0xd8
 8014416:	eb4b 0303 	adc.w	r3, fp, r3
 801441a:	9337      	str	r3, [sp, #220]	; 0xdc
 801441c:	e9dd 3436 	ldrd	r3, r4, [sp, #216]	; 0xd8
 8014420:	e9cd 3452 	strd	r3, r4, [sp, #328]	; 0x148
		b = ((uint64_t)z1 * (uint64_t)y0);
 8014424:	9b56      	ldr	r3, [sp, #344]	; 0x158
 8014426:	2200      	movs	r2, #0
 8014428:	9312      	str	r3, [sp, #72]	; 0x48
 801442a:	9213      	str	r2, [sp, #76]	; 0x4c
 801442c:	9b55      	ldr	r3, [sp, #340]	; 0x154
 801442e:	2200      	movs	r2, #0
 8014430:	9314      	str	r3, [sp, #80]	; 0x50
 8014432:	9215      	str	r2, [sp, #84]	; 0x54
 8014434:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8014438:	460b      	mov	r3, r1
 801443a:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 801443e:	4622      	mov	r2, r4
 8014440:	fb02 f203 	mul.w	r2, r2, r3
 8014444:	462b      	mov	r3, r5
 8014446:	4684      	mov	ip, r0
 8014448:	fb0c f303 	mul.w	r3, ip, r3
 801444c:	4413      	add	r3, r2
 801444e:	4602      	mov	r2, r0
 8014450:	4621      	mov	r1, r4
 8014452:	fba2 2101 	umull	r2, r1, r2, r1
 8014456:	9107      	str	r1, [sp, #28]
 8014458:	9206      	str	r2, [sp, #24]
 801445a:	9a07      	ldr	r2, [sp, #28]
 801445c:	4413      	add	r3, r2
 801445e:	9307      	str	r3, [sp, #28]
 8014460:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8014464:	e9cd 3450 	strd	r3, r4, [sp, #320]	; 0x140
 8014468:	e9cd 3450 	strd	r3, r4, [sp, #320]	; 0x140
		c = (a >> 32) + (b >> 32);
 801446c:	e9dd 2352 	ldrd	r2, r3, [sp, #328]	; 0x148
 8014470:	f04f 0400 	mov.w	r4, #0
 8014474:	f04f 0500 	mov.w	r5, #0
 8014478:	001c      	movs	r4, r3
 801447a:	2500      	movs	r5, #0
 801447c:	e9dd 2350 	ldrd	r2, r3, [sp, #320]	; 0x140
 8014480:	f04f 0000 	mov.w	r0, #0
 8014484:	f04f 0100 	mov.w	r1, #0
 8014488:	0018      	movs	r0, r3
 801448a:	2100      	movs	r1, #0
 801448c:	1823      	adds	r3, r4, r0
 801448e:	9338      	str	r3, [sp, #224]	; 0xe0
 8014490:	eb45 0301 	adc.w	r3, r5, r1
 8014494:	9339      	str	r3, [sp, #228]	; 0xe4
 8014496:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	; 0xe0
 801449a:	e9cd 344e 	strd	r3, r4, [sp, #312]	; 0x138
		c += (((uint64_t)(uint32_t)a + (uint64_t)(uint32_t)b) >> 32);
 801449e:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80144a0:	2200      	movs	r2, #0
 80144a2:	9316      	str	r3, [sp, #88]	; 0x58
 80144a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80144a6:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80144a8:	2200      	movs	r2, #0
 80144aa:	9318      	str	r3, [sp, #96]	; 0x60
 80144ac:	9219      	str	r2, [sp, #100]	; 0x64
 80144ae:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 80144b2:	4623      	mov	r3, r4
 80144b4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80144b8:	4602      	mov	r2, r0
 80144ba:	189b      	adds	r3, r3, r2
 80144bc:	931a      	str	r3, [sp, #104]	; 0x68
 80144be:	462b      	mov	r3, r5
 80144c0:	460a      	mov	r2, r1
 80144c2:	4153      	adcs	r3, r2
 80144c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80144c6:	f04f 0000 	mov.w	r0, #0
 80144ca:	f04f 0100 	mov.w	r1, #0
 80144ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144d0:	0018      	movs	r0, r3
 80144d2:	2100      	movs	r1, #0
 80144d4:	e9dd 234e 	ldrd	r2, r3, [sp, #312]	; 0x138
 80144d8:	1814      	adds	r4, r2, r0
 80144da:	943a      	str	r4, [sp, #232]	; 0xe8
 80144dc:	414b      	adcs	r3, r1
 80144de:	933b      	str	r3, [sp, #236]	; 0xec
 80144e0:	e9dd 343a 	ldrd	r3, r4, [sp, #232]	; 0xe8
 80144e4:	e9cd 344e 	strd	r3, r4, [sp, #312]	; 0x138
		c += (uint64_t)z1 * (uint64_t)y1;
 80144e8:	9b56      	ldr	r3, [sp, #344]	; 0x158
 80144ea:	2200      	movs	r2, #0
 80144ec:	931c      	str	r3, [sp, #112]	; 0x70
 80144ee:	921d      	str	r2, [sp, #116]	; 0x74
 80144f0:	9b54      	ldr	r3, [sp, #336]	; 0x150
 80144f2:	2200      	movs	r2, #0
 80144f4:	931e      	str	r3, [sp, #120]	; 0x78
 80144f6:	921f      	str	r2, [sp, #124]	; 0x7c
 80144f8:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80144fc:	460b      	mov	r3, r1
 80144fe:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 8014502:	4622      	mov	r2, r4
 8014504:	fb02 f203 	mul.w	r2, r2, r3
 8014508:	462b      	mov	r3, r5
 801450a:	4684      	mov	ip, r0
 801450c:	fb0c f303 	mul.w	r3, ip, r3
 8014510:	4413      	add	r3, r2
 8014512:	4602      	mov	r2, r0
 8014514:	4621      	mov	r1, r4
 8014516:	fba2 6701 	umull	r6, r7, r2, r1
 801451a:	443b      	add	r3, r7
 801451c:	461f      	mov	r7, r3
 801451e:	e9dd 234e 	ldrd	r2, r3, [sp, #312]	; 0x138
 8014522:	1991      	adds	r1, r2, r6
 8014524:	913c      	str	r1, [sp, #240]	; 0xf0
 8014526:	417b      	adcs	r3, r7
 8014528:	933d      	str	r3, [sp, #244]	; 0xf4
 801452a:	e9dd 343c 	ldrd	r3, r4, [sp, #240]	; 0xf0
 801452e:	e9cd 344e 	strd	r3, r4, [sp, #312]	; 0x138
		y = C[u] - c;
 8014532:	4a98      	ldr	r2, [pc, #608]	; (8014794 <falcon_inner_fpr_expm_p63+0x484>)
 8014534:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 8014536:	00db      	lsls	r3, r3, #3
 8014538:	4413      	add	r3, r2
 801453a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801453e:	e9dd 234e 	ldrd	r2, r3, [sp, #312]	; 0x138
 8014542:	1a84      	subs	r4, r0, r2
 8014544:	943e      	str	r4, [sp, #248]	; 0xf8
 8014546:	eb61 0303 	sbc.w	r3, r1, r3
 801454a:	933f      	str	r3, [sp, #252]	; 0xfc
 801454c:	e9dd 343e 	ldrd	r3, r4, [sp, #248]	; 0xf8
 8014550:	e9cd 345c 	strd	r3, r4, [sp, #368]	; 0x170
	for (u = 1; u < (sizeof C) / sizeof(C[0]); u ++) {
 8014554:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 8014556:	3301      	adds	r3, #1
 8014558:	935b      	str	r3, [sp, #364]	; 0x16c
 801455a:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 801455c:	2b0c      	cmp	r3, #12
 801455e:	f67f aeff 	bls.w	8014360 <falcon_inner_fpr_expm_p63+0x50>
	/*
	 * The scaling factor must be applied at the end. Since y is now
	 * in fixed-point notation, we have to convert the factor to the
	 * same format, and do an extra integer multiplication.
	 */
	z = (uint64_t)fpr_trunc(fpr_mul(ccs, fpr_ptwo63)) << 1;
 8014562:	f04f 0200 	mov.w	r2, #0
 8014566:	4b8c      	ldr	r3, [pc, #560]	; (8014798 <falcon_inner_fpr_expm_p63+0x488>)
 8014568:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801456c:	f7fe ff88 	bl	8013480 <falcon_inner_fpr_mul>
 8014570:	4602      	mov	r2, r0
 8014572:	460b      	mov	r3, r1
 8014574:	4610      	mov	r0, r2
 8014576:	4619      	mov	r1, r3
 8014578:	f7fe fe12 	bl	80131a0 <fpr_trunc.lto_priv.1>
 801457c:	4602      	mov	r2, r0
 801457e:	460b      	mov	r3, r1
 8014580:	1891      	adds	r1, r2, r2
 8014582:	9140      	str	r1, [sp, #256]	; 0x100
 8014584:	415b      	adcs	r3, r3
 8014586:	9341      	str	r3, [sp, #260]	; 0x104
 8014588:	e9dd 3440 	ldrd	r3, r4, [sp, #256]	; 0x100
 801458c:	e9cd 3458 	strd	r3, r4, [sp, #352]	; 0x160
	z0 = (uint32_t)z;
 8014590:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8014592:	9357      	str	r3, [sp, #348]	; 0x15c
	z1 = (uint32_t)(z >> 32);
 8014594:	e9dd 2358 	ldrd	r2, r3, [sp, #352]	; 0x160
 8014598:	f04f 0000 	mov.w	r0, #0
 801459c:	f04f 0100 	mov.w	r1, #0
 80145a0:	0018      	movs	r0, r3
 80145a2:	2100      	movs	r1, #0
 80145a4:	4603      	mov	r3, r0
 80145a6:	9356      	str	r3, [sp, #344]	; 0x158
	y0 = (uint32_t)y;
 80145a8:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 80145aa:	9355      	str	r3, [sp, #340]	; 0x154
	y1 = (uint32_t)(y >> 32);
 80145ac:	e9dd 235c 	ldrd	r2, r3, [sp, #368]	; 0x170
 80145b0:	f04f 0000 	mov.w	r0, #0
 80145b4:	f04f 0100 	mov.w	r1, #0
 80145b8:	0018      	movs	r0, r3
 80145ba:	2100      	movs	r1, #0
 80145bc:	4603      	mov	r3, r0
 80145be:	9354      	str	r3, [sp, #336]	; 0x150
	a = ((uint64_t)z0 * (uint64_t)y1)
 80145c0:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 80145c2:	2200      	movs	r2, #0
 80145c4:	9320      	str	r3, [sp, #128]	; 0x80
 80145c6:	9221      	str	r2, [sp, #132]	; 0x84
 80145c8:	9b54      	ldr	r3, [sp, #336]	; 0x150
 80145ca:	2200      	movs	r2, #0
 80145cc:	9322      	str	r3, [sp, #136]	; 0x88
 80145ce:	9223      	str	r2, [sp, #140]	; 0x8c
 80145d0:	e9dd 3420 	ldrd	r3, r4, [sp, #128]	; 0x80
 80145d4:	4622      	mov	r2, r4
 80145d6:	e9dd 5622 	ldrd	r5, r6, [sp, #136]	; 0x88
 80145da:	4629      	mov	r1, r5
 80145dc:	fb01 f202 	mul.w	r2, r1, r2
 80145e0:	4637      	mov	r7, r6
 80145e2:	4618      	mov	r0, r3
 80145e4:	4621      	mov	r1, r4
 80145e6:	4603      	mov	r3, r0
 80145e8:	fb03 f307 	mul.w	r3, r3, r7
 80145ec:	4413      	add	r3, r2
 80145ee:	4602      	mov	r2, r0
 80145f0:	4629      	mov	r1, r5
 80145f2:	fba2 8901 	umull	r8, r9, r2, r1
 80145f6:	444b      	add	r3, r9
 80145f8:	4699      	mov	r9, r3
		+ (((uint64_t)z0 * (uint64_t)y0) >> 32);
 80145fa:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 80145fc:	2200      	movs	r2, #0
 80145fe:	9324      	str	r3, [sp, #144]	; 0x90
 8014600:	9225      	str	r2, [sp, #148]	; 0x94
 8014602:	9b55      	ldr	r3, [sp, #340]	; 0x154
 8014604:	2200      	movs	r2, #0
 8014606:	9326      	str	r3, [sp, #152]	; 0x98
 8014608:	9227      	str	r2, [sp, #156]	; 0x9c
 801460a:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 801460e:	4622      	mov	r2, r4
 8014610:	e9dd 5626 	ldrd	r5, r6, [sp, #152]	; 0x98
 8014614:	4629      	mov	r1, r5
 8014616:	fb01 f202 	mul.w	r2, r1, r2
 801461a:	4637      	mov	r7, r6
 801461c:	4618      	mov	r0, r3
 801461e:	4621      	mov	r1, r4
 8014620:	4603      	mov	r3, r0
 8014622:	fb03 f307 	mul.w	r3, r3, r7
 8014626:	4413      	add	r3, r2
 8014628:	4602      	mov	r2, r0
 801462a:	4629      	mov	r1, r5
 801462c:	fba2 2101 	umull	r2, r1, r2, r1
 8014630:	9103      	str	r1, [sp, #12]
 8014632:	9202      	str	r2, [sp, #8]
 8014634:	9a03      	ldr	r2, [sp, #12]
 8014636:	4413      	add	r3, r2
 8014638:	9303      	str	r3, [sp, #12]
 801463a:	f04f 0200 	mov.w	r2, #0
 801463e:	f04f 0300 	mov.w	r3, #0
 8014642:	9903      	ldr	r1, [sp, #12]
 8014644:	000a      	movs	r2, r1
 8014646:	2300      	movs	r3, #0
	a = ((uint64_t)z0 * (uint64_t)y1)
 8014648:	eb18 0102 	adds.w	r1, r8, r2
 801464c:	9142      	str	r1, [sp, #264]	; 0x108
 801464e:	eb49 0303 	adc.w	r3, r9, r3
 8014652:	9343      	str	r3, [sp, #268]	; 0x10c
 8014654:	e9dd 3442 	ldrd	r3, r4, [sp, #264]	; 0x108
 8014658:	e9cd 3452 	strd	r3, r4, [sp, #328]	; 0x148
	b = ((uint64_t)z1 * (uint64_t)y0);
 801465c:	9b56      	ldr	r3, [sp, #344]	; 0x158
 801465e:	2200      	movs	r2, #0
 8014660:	9328      	str	r3, [sp, #160]	; 0xa0
 8014662:	9229      	str	r2, [sp, #164]	; 0xa4
 8014664:	9b55      	ldr	r3, [sp, #340]	; 0x154
 8014666:	2200      	movs	r2, #0
 8014668:	932a      	str	r3, [sp, #168]	; 0xa8
 801466a:	922b      	str	r2, [sp, #172]	; 0xac
 801466c:	e9dd 3428 	ldrd	r3, r4, [sp, #160]	; 0xa0
 8014670:	4622      	mov	r2, r4
 8014672:	e9dd 562a 	ldrd	r5, r6, [sp, #168]	; 0xa8
 8014676:	4629      	mov	r1, r5
 8014678:	fb01 f202 	mul.w	r2, r1, r2
 801467c:	4637      	mov	r7, r6
 801467e:	4618      	mov	r0, r3
 8014680:	4621      	mov	r1, r4
 8014682:	4603      	mov	r3, r0
 8014684:	fb03 f307 	mul.w	r3, r3, r7
 8014688:	4413      	add	r3, r2
 801468a:	4602      	mov	r2, r0
 801468c:	4629      	mov	r1, r5
 801468e:	fba2 2101 	umull	r2, r1, r2, r1
 8014692:	9109      	str	r1, [sp, #36]	; 0x24
 8014694:	9208      	str	r2, [sp, #32]
 8014696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014698:	4413      	add	r3, r2
 801469a:	9309      	str	r3, [sp, #36]	; 0x24
 801469c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80146a0:	e9cd 3450 	strd	r3, r4, [sp, #320]	; 0x140
 80146a4:	e9cd 3450 	strd	r3, r4, [sp, #320]	; 0x140
	y = (a >> 32) + (b >> 32);
 80146a8:	e9dd 2352 	ldrd	r2, r3, [sp, #328]	; 0x148
 80146ac:	f04f 0400 	mov.w	r4, #0
 80146b0:	f04f 0500 	mov.w	r5, #0
 80146b4:	001c      	movs	r4, r3
 80146b6:	2500      	movs	r5, #0
 80146b8:	e9dd 2350 	ldrd	r2, r3, [sp, #320]	; 0x140
 80146bc:	f04f 0000 	mov.w	r0, #0
 80146c0:	f04f 0100 	mov.w	r1, #0
 80146c4:	0018      	movs	r0, r3
 80146c6:	2100      	movs	r1, #0
 80146c8:	1823      	adds	r3, r4, r0
 80146ca:	9344      	str	r3, [sp, #272]	; 0x110
 80146cc:	eb45 0301 	adc.w	r3, r5, r1
 80146d0:	9345      	str	r3, [sp, #276]	; 0x114
 80146d2:	e9dd 3444 	ldrd	r3, r4, [sp, #272]	; 0x110
 80146d6:	e9cd 345c 	strd	r3, r4, [sp, #368]	; 0x170
	y += (((uint64_t)(uint32_t)a + (uint64_t)(uint32_t)b) >> 32);
 80146da:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80146dc:	2200      	movs	r2, #0
 80146de:	932c      	str	r3, [sp, #176]	; 0xb0
 80146e0:	922d      	str	r2, [sp, #180]	; 0xb4
 80146e2:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80146e4:	2200      	movs	r2, #0
 80146e6:	932e      	str	r3, [sp, #184]	; 0xb8
 80146e8:	922f      	str	r2, [sp, #188]	; 0xbc
 80146ea:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
 80146ee:	4623      	mov	r3, r4
 80146f0:	e9dd 012e 	ldrd	r0, r1, [sp, #184]	; 0xb8
 80146f4:	4602      	mov	r2, r0
 80146f6:	189b      	adds	r3, r3, r2
 80146f8:	9330      	str	r3, [sp, #192]	; 0xc0
 80146fa:	460b      	mov	r3, r1
 80146fc:	462a      	mov	r2, r5
 80146fe:	eb42 0303 	adc.w	r3, r2, r3
 8014702:	9331      	str	r3, [sp, #196]	; 0xc4
 8014704:	f04f 0200 	mov.w	r2, #0
 8014708:	f04f 0300 	mov.w	r3, #0
 801470c:	9931      	ldr	r1, [sp, #196]	; 0xc4
 801470e:	000a      	movs	r2, r1
 8014710:	2300      	movs	r3, #0
 8014712:	e9dd 015c 	ldrd	r0, r1, [sp, #368]	; 0x170
 8014716:	1884      	adds	r4, r0, r2
 8014718:	9446      	str	r4, [sp, #280]	; 0x118
 801471a:	eb41 0303 	adc.w	r3, r1, r3
 801471e:	9347      	str	r3, [sp, #284]	; 0x11c
 8014720:	e9dd 3446 	ldrd	r3, r4, [sp, #280]	; 0x118
 8014724:	e9cd 345c 	strd	r3, r4, [sp, #368]	; 0x170
	y += (uint64_t)z1 * (uint64_t)y1;
 8014728:	9b56      	ldr	r3, [sp, #344]	; 0x158
 801472a:	2200      	movs	r2, #0
 801472c:	9332      	str	r3, [sp, #200]	; 0xc8
 801472e:	9233      	str	r2, [sp, #204]	; 0xcc
 8014730:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8014732:	2200      	movs	r2, #0
 8014734:	9334      	str	r3, [sp, #208]	; 0xd0
 8014736:	9235      	str	r2, [sp, #212]	; 0xd4
 8014738:	e9dd 3432 	ldrd	r3, r4, [sp, #200]	; 0xc8
 801473c:	4622      	mov	r2, r4
 801473e:	e9dd 5634 	ldrd	r5, r6, [sp, #208]	; 0xd0
 8014742:	4629      	mov	r1, r5
 8014744:	fb01 f202 	mul.w	r2, r1, r2
 8014748:	4637      	mov	r7, r6
 801474a:	4618      	mov	r0, r3
 801474c:	4621      	mov	r1, r4
 801474e:	4603      	mov	r3, r0
 8014750:	fb03 f307 	mul.w	r3, r3, r7
 8014754:	4413      	add	r3, r2
 8014756:	4602      	mov	r2, r0
 8014758:	4629      	mov	r1, r5
 801475a:	fba2 2101 	umull	r2, r1, r2, r1
 801475e:	9105      	str	r1, [sp, #20]
 8014760:	9204      	str	r2, [sp, #16]
 8014762:	9a05      	ldr	r2, [sp, #20]
 8014764:	4413      	add	r3, r2
 8014766:	9305      	str	r3, [sp, #20]
 8014768:	e9dd 235c 	ldrd	r2, r3, [sp, #368]	; 0x170
 801476c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8014770:	4621      	mov	r1, r4
 8014772:	1851      	adds	r1, r2, r1
 8014774:	9148      	str	r1, [sp, #288]	; 0x120
 8014776:	4629      	mov	r1, r5
 8014778:	eb43 0101 	adc.w	r1, r3, r1
 801477c:	9149      	str	r1, [sp, #292]	; 0x124
 801477e:	e9dd 3448 	ldrd	r3, r4, [sp, #288]	; 0x120
 8014782:	e9cd 345c 	strd	r3, r4, [sp, #368]	; 0x170

	return y;
 8014786:	e9dd 235c 	ldrd	r2, r3, [sp, #368]	; 0x170
}
 801478a:	4610      	mov	r0, r2
 801478c:	4619      	mov	r1, r3
 801478e:	b05f      	add	sp, #380	; 0x17c
 8014790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014794:	08023358 	.word	0x08023358
 8014798:	43e00000 	.word	0x43e00000
 801479c:	00000000 	.word	0x00000000

080147a0 <fpr_ursh.lto_priv.2>:
{
 80147a0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80147a4:	b088      	sub	sp, #32
 80147a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80147aa:	9205      	str	r2, [sp, #20]
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 80147ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80147b0:	f04f 0000 	mov.w	r0, #0
 80147b4:	f04f 0100 	mov.w	r1, #0
 80147b8:	0018      	movs	r0, r3
 80147ba:	2100      	movs	r1, #0
 80147bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80147c0:	ea80 0a02 	eor.w	sl, r0, r2
 80147c4:	ea81 0b03 	eor.w	fp, r1, r3
 80147c8:	9b05      	ldr	r3, [sp, #20]
 80147ca:	115b      	asrs	r3, r3, #5
 80147cc:	17da      	asrs	r2, r3, #31
 80147ce:	9300      	str	r3, [sp, #0]
 80147d0:	9201      	str	r2, [sp, #4]
 80147d2:	2300      	movs	r3, #0
 80147d4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80147d8:	4608      	mov	r0, r1
 80147da:	f1d0 0800 	rsbs	r8, r0, #0
 80147de:	eb63 0902 	sbc.w	r9, r3, r2
 80147e2:	ea0a 0408 	and.w	r4, sl, r8
 80147e6:	ea0b 0509 	and.w	r5, fp, r9
 80147ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80147ee:	ea82 0104 	eor.w	r1, r2, r4
 80147f2:	9102      	str	r1, [sp, #8]
 80147f4:	406b      	eors	r3, r5
 80147f6:	9303      	str	r3, [sp, #12]
 80147f8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80147fc:	e9cd 3406 	strd	r3, r4, [sp, #24]
	return x >> (n & 31);
 8014800:	9b05      	ldr	r3, [sp, #20]
 8014802:	f003 011f 	and.w	r1, r3, #31
 8014806:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801480a:	f1c1 0420 	rsb	r4, r1, #32
 801480e:	f1a1 0020 	sub.w	r0, r1, #32
 8014812:	fa22 f601 	lsr.w	r6, r2, r1
 8014816:	fa03 f404 	lsl.w	r4, r3, r4
 801481a:	4326      	orrs	r6, r4
 801481c:	fa23 f000 	lsr.w	r0, r3, r0
 8014820:	4306      	orrs	r6, r0
 8014822:	fa23 f701 	lsr.w	r7, r3, r1
 8014826:	4632      	mov	r2, r6
 8014828:	463b      	mov	r3, r7
}
 801482a:	4610      	mov	r0, r2
 801482c:	4619      	mov	r1, r3
 801482e:	b008      	add	sp, #32
 8014830:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014834:	4770      	bx	lr
 8014836:	bf00      	nop
	...

08014840 <fpr_ulsh.lto_priv.1>:
{
 8014840:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014844:	b088      	sub	sp, #32
 8014846:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801484a:	9205      	str	r2, [sp, #20]
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 801484c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014850:	f04f 0000 	mov.w	r0, #0
 8014854:	f04f 0100 	mov.w	r1, #0
 8014858:	0011      	movs	r1, r2
 801485a:	2000      	movs	r0, #0
 801485c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014860:	ea80 0a02 	eor.w	sl, r0, r2
 8014864:	ea81 0b03 	eor.w	fp, r1, r3
 8014868:	9b05      	ldr	r3, [sp, #20]
 801486a:	115b      	asrs	r3, r3, #5
 801486c:	17da      	asrs	r2, r3, #31
 801486e:	9300      	str	r3, [sp, #0]
 8014870:	9201      	str	r2, [sp, #4]
 8014872:	2300      	movs	r3, #0
 8014874:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014878:	4608      	mov	r0, r1
 801487a:	f1d0 0800 	rsbs	r8, r0, #0
 801487e:	eb63 0902 	sbc.w	r9, r3, r2
 8014882:	ea0a 0408 	and.w	r4, sl, r8
 8014886:	ea0b 0509 	and.w	r5, fp, r9
 801488a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801488e:	ea82 0104 	eor.w	r1, r2, r4
 8014892:	9102      	str	r1, [sp, #8]
 8014894:	406b      	eors	r3, r5
 8014896:	9303      	str	r3, [sp, #12]
 8014898:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 801489c:	e9cd 3406 	strd	r3, r4, [sp, #24]
	return x << (n & 31);
 80148a0:	9b05      	ldr	r3, [sp, #20]
 80148a2:	f003 011f 	and.w	r1, r3, #31
 80148a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80148aa:	f1a1 0420 	sub.w	r4, r1, #32
 80148ae:	f1c1 0020 	rsb	r0, r1, #32
 80148b2:	fa03 f701 	lsl.w	r7, r3, r1
 80148b6:	fa02 f404 	lsl.w	r4, r2, r4
 80148ba:	4327      	orrs	r7, r4
 80148bc:	fa22 f000 	lsr.w	r0, r2, r0
 80148c0:	4307      	orrs	r7, r0
 80148c2:	fa02 f601 	lsl.w	r6, r2, r1
 80148c6:	4632      	mov	r2, r6
 80148c8:	463b      	mov	r3, r7
}
 80148ca:	4610      	mov	r0, r2
 80148cc:	4619      	mov	r1, r3
 80148ce:	b008      	add	sp, #32
 80148d0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80148d4:	4770      	bx	lr
 80148d6:	bf00      	nop
	...

080148e0 <fpr_of.lto_priv.1>:
{
 80148e0:	b500      	push	{lr}
 80148e2:	b083      	sub	sp, #12
 80148e4:	e9cd 0100 	strd	r0, r1, [sp]
	return fpr_scaled(i, 0);
 80148e8:	2200      	movs	r2, #0
 80148ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148ee:	f7fe fcd7 	bl	80132a0 <falcon_inner_fpr_scaled>
 80148f2:	4602      	mov	r2, r0
 80148f4:	460b      	mov	r3, r1
}
 80148f6:	4610      	mov	r0, r2
 80148f8:	4619      	mov	r1, r3
 80148fa:	b003      	add	sp, #12
 80148fc:	f85d fb04 	ldr.w	pc, [sp], #4

08014900 <fpr_rint.lto_priv.1>:
{
 8014900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014904:	b09f      	sub	sp, #124	; 0x7c
 8014906:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 801490a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801490e:	f04f 0000 	mov.w	r0, #0
 8014912:	f04f 0100 	mov.w	r1, #0
 8014916:	0299      	lsls	r1, r3, #10
 8014918:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801491c:	0290      	lsls	r0, r2, #10
 801491e:	4604      	mov	r4, r0
 8014920:	f021 4540 	bic.w	r5, r1, #3221225472	; 0xc0000000
 8014924:	46a0      	mov	r8, r4
 8014926:	f045 4980 	orr.w	r9, r5, #1073741824	; 0x40000000
 801492a:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
	e = 1085 - ((int)(x >> 52) & 0x7FF);
 801492e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014932:	f04f 0000 	mov.w	r0, #0
 8014936:	f04f 0100 	mov.w	r1, #0
 801493a:	0d18      	lsrs	r0, r3, #20
 801493c:	2100      	movs	r1, #0
 801493e:	4603      	mov	r3, r0
 8014940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014944:	f5c3 6387 	rsb	r3, r3, #1080	; 0x438
 8014948:	3305      	adds	r3, #5
 801494a:	931b      	str	r3, [sp, #108]	; 0x6c
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 801494c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801494e:	3b40      	subs	r3, #64	; 0x40
 8014950:	0fdb      	lsrs	r3, r3, #31
 8014952:	2200      	movs	r2, #0
 8014954:	469a      	mov	sl, r3
 8014956:	4693      	mov	fp, r2
 8014958:	2300      	movs	r3, #0
 801495a:	f1da 0600 	rsbs	r6, sl, #0
 801495e:	eb63 070b 	sbc.w	r7, r3, fp
 8014962:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8014966:	ea02 0106 	and.w	r1, r2, r6
 801496a:	910e      	str	r1, [sp, #56]	; 0x38
 801496c:	403b      	ands	r3, r7
 801496e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014970:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8014974:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
	e &= 63;
 8014978:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801497a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801497e:	931b      	str	r3, [sp, #108]	; 0x6c
	d = fpr_ulsh(m, 63 - e);
 8014980:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014982:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8014986:	461a      	mov	r2, r3
 8014988:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 801498c:	f7ff ff58 	bl	8014840 <fpr_ulsh.lto_priv.1>
 8014990:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 8014994:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8014996:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801499a:	f04f 0000 	mov.w	r0, #0
 801499e:	f04f 0100 	mov.w	r1, #0
 80149a2:	0018      	movs	r0, r3
 80149a4:	2100      	movs	r1, #0
 80149a6:	4603      	mov	r3, r0
 80149a8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80149ac:	4323      	orrs	r3, r4
 80149ae:	9317      	str	r3, [sp, #92]	; 0x5c
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 80149b0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80149b4:	f04f 0000 	mov.w	r0, #0
 80149b8:	f04f 0100 	mov.w	r1, #0
 80149bc:	0f58      	lsrs	r0, r3, #29
 80149be:	2100      	movs	r1, #0
 80149c0:	4601      	mov	r1, r0
 80149c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80149c4:	425a      	negs	r2, r3
 80149c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80149c8:	4313      	orrs	r3, r2
 80149ca:	0fdb      	lsrs	r3, r3, #31
 80149cc:	430b      	orrs	r3, r1
 80149ce:	9316      	str	r3, [sp, #88]	; 0x58
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 80149d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80149d2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80149d6:	f7ff fee3 	bl	80147a0 <fpr_ursh.lto_priv.2>
 80149da:	22c8      	movs	r2, #200	; 0xc8
 80149dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80149de:	fa22 f303 	lsr.w	r3, r2, r3
 80149e2:	2200      	movs	r2, #0
 80149e4:	9300      	str	r3, [sp, #0]
 80149e6:	9201      	str	r2, [sp, #4]
 80149e8:	9b00      	ldr	r3, [sp, #0]
 80149ea:	f003 0301 	and.w	r3, r3, #1
 80149ee:	9302      	str	r3, [sp, #8]
 80149f0:	2300      	movs	r3, #0
 80149f2:	9303      	str	r3, [sp, #12]
 80149f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80149f8:	4623      	mov	r3, r4
 80149fa:	18c3      	adds	r3, r0, r3
 80149fc:	9310      	str	r3, [sp, #64]	; 0x40
 80149fe:	462b      	mov	r3, r5
 8014a00:	eb41 0303 	adc.w	r3, r1, r3
 8014a04:	9311      	str	r3, [sp, #68]	; 0x44
 8014a06:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 8014a0a:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
	s = (uint32_t)(x >> 63);
 8014a0e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8014a12:	f04f 0200 	mov.w	r2, #0
 8014a16:	f04f 0300 	mov.w	r3, #0
 8014a1a:	0fca      	lsrs	r2, r1, #31
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	4613      	mov	r3, r2
 8014a20:	9315      	str	r3, [sp, #84]	; 0x54
	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 8014a22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a24:	2200      	movs	r2, #0
 8014a26:	9304      	str	r3, [sp, #16]
 8014a28:	9205      	str	r2, [sp, #20]
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014a30:	4602      	mov	r2, r0
 8014a32:	4252      	negs	r2, r2
 8014a34:	9206      	str	r2, [sp, #24]
 8014a36:	460a      	mov	r2, r1
 8014a38:	eb63 0302 	sbc.w	r3, r3, r2
 8014a3c:	9307      	str	r3, [sp, #28]
 8014a3e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8014a42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014a46:	4604      	mov	r4, r0
 8014a48:	4054      	eors	r4, r2
 8014a4a:	9408      	str	r4, [sp, #32]
 8014a4c:	4059      	eors	r1, r3
 8014a4e:	9109      	str	r1, [sp, #36]	; 0x24
 8014a50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a52:	2200      	movs	r2, #0
 8014a54:	930a      	str	r3, [sp, #40]	; 0x28
 8014a56:	920b      	str	r2, [sp, #44]	; 0x2c
 8014a58:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8014a5c:	4623      	mov	r3, r4
 8014a5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014a62:	4602      	mov	r2, r0
 8014a64:	189b      	adds	r3, r3, r2
 8014a66:	930c      	str	r3, [sp, #48]	; 0x30
 8014a68:	460b      	mov	r3, r1
 8014a6a:	462a      	mov	r2, r5
 8014a6c:	eb42 0303 	adc.w	r3, r2, r3
 8014a70:	930d      	str	r3, [sp, #52]	; 0x34
 8014a72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
}
 8014a76:	4610      	mov	r0, r2
 8014a78:	4619      	mov	r1, r3
 8014a7a:	b01f      	add	sp, #124	; 0x7c
 8014a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a80 <fpr_sqr.lto_priv.2>:
{
 8014a80:	b500      	push	{lr}
 8014a82:	b083      	sub	sp, #12
 8014a84:	e9cd 0100 	strd	r0, r1, [sp]
	return fpr_mul(x, x);
 8014a88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a90:	f7fe fcf6 	bl	8013480 <falcon_inner_fpr_mul>
 8014a94:	4602      	mov	r2, r0
 8014a96:	460b      	mov	r3, r1
}
 8014a98:	4610      	mov	r0, r2
 8014a9a:	4619      	mov	r1, r3
 8014a9c:	b003      	add	sp, #12
 8014a9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014aa2:	bf00      	nop
	...

08014ab0 <fpr_lt>:
#define fpr_sqrt   Zf(fpr_sqrt)
fpr fpr_sqrt(fpr x);

static inline int
fpr_lt(fpr x, fpr y)
{
 8014ab0:	b470      	push	{r4, r5, r6}
 8014ab2:	b087      	sub	sp, #28
 8014ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ab8:	e9cd 2300 	strd	r2, r3, [sp]
	 * We cannot simply invert the comparison result in that case
	 * because it would not handle the edge case x = y properly.
	 */
	int cc0, cc1;

	cc0 = *(int64_t *)&x < *(int64_t *)&y;
 8014abc:	ab02      	add	r3, sp, #8
 8014abe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014ac2:	466b      	mov	r3, sp
 8014ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac8:	4290      	cmp	r0, r2
 8014aca:	eb71 0303 	sbcs.w	r3, r1, r3
 8014ace:	bfb4      	ite	lt
 8014ad0:	2301      	movlt	r3, #1
 8014ad2:	2300      	movge	r3, #0
 8014ad4:	b2db      	uxtb	r3, r3
 8014ad6:	9305      	str	r3, [sp, #20]
	cc1 = *(int64_t *)&x > *(int64_t *)&y;
 8014ad8:	ab02      	add	r3, sp, #8
 8014ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ade:	4669      	mov	r1, sp
 8014ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ae4:	4290      	cmp	r0, r2
 8014ae6:	eb71 0303 	sbcs.w	r3, r1, r3
 8014aea:	bfb4      	ite	lt
 8014aec:	2301      	movlt	r3, #1
 8014aee:	2300      	movge	r3, #0
 8014af0:	b2db      	uxtb	r3, r3
 8014af2:	9304      	str	r3, [sp, #16]
	return cc0 ^ ((cc0 ^ cc1) & (int)((x & y) >> 63));
 8014af4:	9a05      	ldr	r2, [sp, #20]
 8014af6:	9b04      	ldr	r3, [sp, #16]
 8014af8:	ea82 0603 	eor.w	r6, r2, r3
 8014afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014b04:	ea00 0402 	and.w	r4, r0, r2
 8014b08:	ea01 0503 	and.w	r5, r1, r3
 8014b0c:	f04f 0200 	mov.w	r2, #0
 8014b10:	f04f 0300 	mov.w	r3, #0
 8014b14:	0fea      	lsrs	r2, r5, #31
 8014b16:	2300      	movs	r3, #0
 8014b18:	4613      	mov	r3, r2
 8014b1a:	ea06 0203 	and.w	r2, r6, r3
 8014b1e:	9b05      	ldr	r3, [sp, #20]
 8014b20:	4053      	eors	r3, r2
}
 8014b22:	4618      	mov	r0, r3
 8014b24:	b007      	add	sp, #28
 8014b26:	bc70      	pop	{r4, r5, r6}
 8014b28:	4770      	bx	lr
 8014b2a:	bf00      	nop
 8014b2c:	0000      	movs	r0, r0
	...

08014b30 <modp_set>:
 * Reduce a small signed integer modulo a small prime. The source
 * value x MUST be such that -p < x < p.
 */
static inline uint32_t
modp_set(int32_t x, uint32_t p)
{
 8014b30:	b084      	sub	sp, #16
 8014b32:	9001      	str	r0, [sp, #4]
 8014b34:	9100      	str	r1, [sp, #0]
	uint32_t w;

	w = (uint32_t)x;
 8014b36:	9b01      	ldr	r3, [sp, #4]
 8014b38:	9303      	str	r3, [sp, #12]
	w += p & -(w >> 31);
 8014b3a:	9b03      	ldr	r3, [sp, #12]
 8014b3c:	17db      	asrs	r3, r3, #31
 8014b3e:	461a      	mov	r2, r3
 8014b40:	9b00      	ldr	r3, [sp, #0]
 8014b42:	4013      	ands	r3, r2
 8014b44:	9a03      	ldr	r2, [sp, #12]
 8014b46:	4413      	add	r3, r2
 8014b48:	9303      	str	r3, [sp, #12]
	return w;
 8014b4a:	9b03      	ldr	r3, [sp, #12]
}
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	b004      	add	sp, #16
 8014b50:	4770      	bx	lr
 8014b52:	bf00      	nop
	...

08014b60 <modp_norm>:
/*
 * Normalize a modular integer around 0.
 */
static inline int32_t
modp_norm(uint32_t x, uint32_t p)
{
 8014b60:	b082      	sub	sp, #8
 8014b62:	9001      	str	r0, [sp, #4]
 8014b64:	9100      	str	r1, [sp, #0]
	return (int32_t)(x - (p & (((x - ((p + 1) >> 1)) >> 31) - 1)));
 8014b66:	9b00      	ldr	r3, [sp, #0]
 8014b68:	3301      	adds	r3, #1
 8014b6a:	085b      	lsrs	r3, r3, #1
 8014b6c:	9a01      	ldr	r2, [sp, #4]
 8014b6e:	1ad3      	subs	r3, r2, r3
 8014b70:	0fdb      	lsrs	r3, r3, #31
 8014b72:	1e5a      	subs	r2, r3, #1
 8014b74:	9b00      	ldr	r3, [sp, #0]
 8014b76:	4013      	ands	r3, r2
 8014b78:	9a01      	ldr	r2, [sp, #4]
 8014b7a:	1ad3      	subs	r3, r2, r3
}
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	b002      	add	sp, #8
 8014b80:	4770      	bx	lr
 8014b82:	bf00      	nop
	...

08014b90 <modp_ninv31>:
 * Compute -1/p mod 2^31. This works for all odd integers p that fit
 * on 31 bits.
 */
static uint32_t
modp_ninv31(uint32_t p)
{
 8014b90:	b084      	sub	sp, #16
 8014b92:	9001      	str	r0, [sp, #4]
	uint32_t y;

	y = 2 - p;
 8014b94:	9b01      	ldr	r3, [sp, #4]
 8014b96:	f1c3 0302 	rsb	r3, r3, #2
 8014b9a:	9303      	str	r3, [sp, #12]
	y *= 2 - p * y;
 8014b9c:	9b01      	ldr	r3, [sp, #4]
 8014b9e:	9a03      	ldr	r2, [sp, #12]
 8014ba0:	fb02 f303 	mul.w	r3, r2, r3
 8014ba4:	f1c3 0202 	rsb	r2, r3, #2
 8014ba8:	9b03      	ldr	r3, [sp, #12]
 8014baa:	fb02 f303 	mul.w	r3, r2, r3
 8014bae:	9303      	str	r3, [sp, #12]
	y *= 2 - p * y;
 8014bb0:	9b01      	ldr	r3, [sp, #4]
 8014bb2:	9a03      	ldr	r2, [sp, #12]
 8014bb4:	fb02 f303 	mul.w	r3, r2, r3
 8014bb8:	f1c3 0202 	rsb	r2, r3, #2
 8014bbc:	9b03      	ldr	r3, [sp, #12]
 8014bbe:	fb02 f303 	mul.w	r3, r2, r3
 8014bc2:	9303      	str	r3, [sp, #12]
	y *= 2 - p * y;
 8014bc4:	9b01      	ldr	r3, [sp, #4]
 8014bc6:	9a03      	ldr	r2, [sp, #12]
 8014bc8:	fb02 f303 	mul.w	r3, r2, r3
 8014bcc:	f1c3 0202 	rsb	r2, r3, #2
 8014bd0:	9b03      	ldr	r3, [sp, #12]
 8014bd2:	fb02 f303 	mul.w	r3, r2, r3
 8014bd6:	9303      	str	r3, [sp, #12]
	y *= 2 - p * y;
 8014bd8:	9b01      	ldr	r3, [sp, #4]
 8014bda:	9a03      	ldr	r2, [sp, #12]
 8014bdc:	fb02 f303 	mul.w	r3, r2, r3
 8014be0:	f1c3 0202 	rsb	r2, r3, #2
 8014be4:	9b03      	ldr	r3, [sp, #12]
 8014be6:	fb02 f303 	mul.w	r3, r2, r3
 8014bea:	9303      	str	r3, [sp, #12]
	return (uint32_t)0x7FFFFFFF & -y;
 8014bec:	9b03      	ldr	r3, [sp, #12]
 8014bee:	425b      	negs	r3, r3
 8014bf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	b004      	add	sp, #16
 8014bf8:	4770      	bx	lr
 8014bfa:	bf00      	nop
 8014bfc:	0000      	movs	r0, r0
	...

08014c00 <modp_R>:
/*
 * Compute R = 2^31 mod p.
 */
static inline uint32_t
modp_R(uint32_t p)
{
 8014c00:	b082      	sub	sp, #8
 8014c02:	9001      	str	r0, [sp, #4]
	/*
	 * Since 2^30 < p < 2^31, we know that 2^31 mod p is simply
	 * 2^31 - p.
	 */
	return ((uint32_t)1 << 31) - p;
 8014c04:	9b01      	ldr	r3, [sp, #4]
 8014c06:	f1c3 4300 	rsb	r3, r3, #2147483648	; 0x80000000
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	b002      	add	sp, #8
 8014c0e:	4770      	bx	lr

08014c10 <modp_add>:
/*
 * Addition modulo p.
 */
static inline uint32_t
modp_add(uint32_t a, uint32_t b, uint32_t p)
{
 8014c10:	b086      	sub	sp, #24
 8014c12:	9003      	str	r0, [sp, #12]
 8014c14:	9102      	str	r1, [sp, #8]
 8014c16:	9201      	str	r2, [sp, #4]
	uint32_t d;

	d = a + b - p;
 8014c18:	9a03      	ldr	r2, [sp, #12]
 8014c1a:	9b02      	ldr	r3, [sp, #8]
 8014c1c:	441a      	add	r2, r3
 8014c1e:	9b01      	ldr	r3, [sp, #4]
 8014c20:	1ad3      	subs	r3, r2, r3
 8014c22:	9305      	str	r3, [sp, #20]
	d += p & -(d >> 31);
 8014c24:	9b05      	ldr	r3, [sp, #20]
 8014c26:	17db      	asrs	r3, r3, #31
 8014c28:	461a      	mov	r2, r3
 8014c2a:	9b01      	ldr	r3, [sp, #4]
 8014c2c:	4013      	ands	r3, r2
 8014c2e:	9a05      	ldr	r2, [sp, #20]
 8014c30:	4413      	add	r3, r2
 8014c32:	9305      	str	r3, [sp, #20]
	return d;
 8014c34:	9b05      	ldr	r3, [sp, #20]
}
 8014c36:	4618      	mov	r0, r3
 8014c38:	b006      	add	sp, #24
 8014c3a:	4770      	bx	lr
 8014c3c:	0000      	movs	r0, r0
	...

08014c40 <modp_sub>:
/*
 * Subtraction modulo p.
 */
static inline uint32_t
modp_sub(uint32_t a, uint32_t b, uint32_t p)
{
 8014c40:	b086      	sub	sp, #24
 8014c42:	9003      	str	r0, [sp, #12]
 8014c44:	9102      	str	r1, [sp, #8]
 8014c46:	9201      	str	r2, [sp, #4]
	uint32_t d;

	d = a - b;
 8014c48:	9a03      	ldr	r2, [sp, #12]
 8014c4a:	9b02      	ldr	r3, [sp, #8]
 8014c4c:	1ad3      	subs	r3, r2, r3
 8014c4e:	9305      	str	r3, [sp, #20]
	d += p & -(d >> 31);
 8014c50:	9b05      	ldr	r3, [sp, #20]
 8014c52:	17db      	asrs	r3, r3, #31
 8014c54:	461a      	mov	r2, r3
 8014c56:	9b01      	ldr	r3, [sp, #4]
 8014c58:	4013      	ands	r3, r2
 8014c5a:	9a05      	ldr	r2, [sp, #20]
 8014c5c:	4413      	add	r3, r2
 8014c5e:	9305      	str	r3, [sp, #20]
	return d;
 8014c60:	9b05      	ldr	r3, [sp, #20]
}
 8014c62:	4618      	mov	r0, r3
 8014c64:	b006      	add	sp, #24
 8014c66:	4770      	bx	lr
	...

08014c70 <modp_montymul>:
 * Montgomery multiplication modulo p. The 'p0i' value is -1/p mod 2^31.
 * It is required that p is an odd integer.
 */
static inline uint32_t
modp_montymul(uint32_t a, uint32_t b, uint32_t p, uint32_t p0i)
{
 8014c70:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014c74:	b094      	sub	sp, #80	; 0x50
 8014c76:	900d      	str	r0, [sp, #52]	; 0x34
 8014c78:	910c      	str	r1, [sp, #48]	; 0x30
 8014c7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8014c7c:	930a      	str	r3, [sp, #40]	; 0x28
	uint64_t z, w;
	uint32_t d;

	z = (uint64_t)a * (uint64_t)b;
 8014c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c80:	2200      	movs	r2, #0
 8014c82:	9304      	str	r3, [sp, #16]
 8014c84:	9205      	str	r2, [sp, #20]
 8014c86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c88:	2200      	movs	r2, #0
 8014c8a:	9300      	str	r3, [sp, #0]
 8014c8c:	9201      	str	r2, [sp, #4]
 8014c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c92:	460b      	mov	r3, r1
 8014c94:	9a00      	ldr	r2, [sp, #0]
 8014c96:	fb02 f203 	mul.w	r2, r2, r3
 8014c9a:	9b01      	ldr	r3, [sp, #4]
 8014c9c:	4684      	mov	ip, r0
 8014c9e:	fb0c f303 	mul.w	r3, ip, r3
 8014ca2:	4413      	add	r3, r2
 8014ca4:	4602      	mov	r2, r0
 8014ca6:	9900      	ldr	r1, [sp, #0]
 8014ca8:	fba2 6701 	umull	r6, r7, r2, r1
 8014cac:	443b      	add	r3, r7
 8014cae:	461f      	mov	r7, r3
 8014cb0:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014cb4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8014cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cba:	2200      	movs	r2, #0
 8014cbc:	9306      	str	r3, [sp, #24]
 8014cbe:	9207      	str	r2, [sp, #28]
 8014cc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014cc2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8014cc6:	463a      	mov	r2, r7
 8014cc8:	fb02 f203 	mul.w	r2, r2, r3
 8014ccc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014cce:	4631      	mov	r1, r6
 8014cd0:	fb01 f303 	mul.w	r3, r1, r3
 8014cd4:	4413      	add	r3, r2
 8014cd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014cd8:	4631      	mov	r1, r6
 8014cda:	fba2 2101 	umull	r2, r1, r2, r1
 8014cde:	9103      	str	r1, [sp, #12]
 8014ce0:	9202      	str	r2, [sp, #8]
 8014ce2:	9a03      	ldr	r2, [sp, #12]
 8014ce4:	4413      	add	r3, r2
 8014ce6:	9303      	str	r3, [sp, #12]
 8014ce8:	9b02      	ldr	r3, [sp, #8]
 8014cea:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8014cee:	f04f 0b00 	mov.w	fp, #0
 8014cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	9308      	str	r3, [sp, #32]
 8014cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8014cfa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014cfe:	4603      	mov	r3, r0
 8014d00:	fb03 f20b 	mul.w	r2, r3, fp
 8014d04:	460b      	mov	r3, r1
 8014d06:	fb0a f303 	mul.w	r3, sl, r3
 8014d0a:	4413      	add	r3, r2
 8014d0c:	4602      	mov	r2, r0
 8014d0e:	fbaa 4502 	umull	r4, r5, sl, r2
 8014d12:	442b      	add	r3, r5
 8014d14:	461d      	mov	r5, r3
 8014d16:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8014d1a:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
	d = (uint32_t)((z + w) >> 31) - p;
 8014d1e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8014d22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014d26:	eb10 0802 	adds.w	r8, r0, r2
 8014d2a:	eb41 0903 	adc.w	r9, r1, r3
 8014d2e:	f04f 0200 	mov.w	r2, #0
 8014d32:	f04f 0300 	mov.w	r3, #0
 8014d36:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 8014d3a:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
 8014d3e:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8014d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d44:	1ad3      	subs	r3, r2, r3
 8014d46:	930f      	str	r3, [sp, #60]	; 0x3c
	d += p & -(d >> 31);
 8014d48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d4a:	17db      	asrs	r3, r3, #31
 8014d4c:	461a      	mov	r2, r3
 8014d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d50:	4013      	ands	r3, r2
 8014d52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014d54:	4413      	add	r3, r2
 8014d56:	930f      	str	r3, [sp, #60]	; 0x3c
	return d;
 8014d58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	b014      	add	sp, #80	; 0x50
 8014d5e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014d62:	4770      	bx	lr
	...

08014d70 <modp_R2>:
/*
 * Compute R2 = 2^62 mod p.
 */
static uint32_t
modp_R2(uint32_t p, uint32_t p0i)
{
 8014d70:	b500      	push	{lr}
 8014d72:	b085      	sub	sp, #20
 8014d74:	9001      	str	r0, [sp, #4]
 8014d76:	9100      	str	r1, [sp, #0]

	/*
	 * Compute z = 2^31 mod p (this is the value 1 in Montgomery
	 * representation), then double it with an addition.
	 */
	z = modp_R(p);
 8014d78:	9801      	ldr	r0, [sp, #4]
 8014d7a:	f7ff ff41 	bl	8014c00 <modp_R>
 8014d7e:	9003      	str	r0, [sp, #12]
	z = modp_add(z, z, p);
 8014d80:	9a01      	ldr	r2, [sp, #4]
 8014d82:	9903      	ldr	r1, [sp, #12]
 8014d84:	9803      	ldr	r0, [sp, #12]
 8014d86:	f7ff ff43 	bl	8014c10 <modp_add>
 8014d8a:	9003      	str	r0, [sp, #12]

	/*
	 * Square it five times to obtain 2^32 in Montgomery representation
	 * (i.e. 2^63 mod p).
	 */
	z = modp_montymul(z, z, p, p0i);
 8014d8c:	9b00      	ldr	r3, [sp, #0]
 8014d8e:	9a01      	ldr	r2, [sp, #4]
 8014d90:	9903      	ldr	r1, [sp, #12]
 8014d92:	9803      	ldr	r0, [sp, #12]
 8014d94:	f7ff ff6c 	bl	8014c70 <modp_montymul>
 8014d98:	9003      	str	r0, [sp, #12]
	z = modp_montymul(z, z, p, p0i);
 8014d9a:	9b00      	ldr	r3, [sp, #0]
 8014d9c:	9a01      	ldr	r2, [sp, #4]
 8014d9e:	9903      	ldr	r1, [sp, #12]
 8014da0:	9803      	ldr	r0, [sp, #12]
 8014da2:	f7ff ff65 	bl	8014c70 <modp_montymul>
 8014da6:	9003      	str	r0, [sp, #12]
	z = modp_montymul(z, z, p, p0i);
 8014da8:	9b00      	ldr	r3, [sp, #0]
 8014daa:	9a01      	ldr	r2, [sp, #4]
 8014dac:	9903      	ldr	r1, [sp, #12]
 8014dae:	9803      	ldr	r0, [sp, #12]
 8014db0:	f7ff ff5e 	bl	8014c70 <modp_montymul>
 8014db4:	9003      	str	r0, [sp, #12]
	z = modp_montymul(z, z, p, p0i);
 8014db6:	9b00      	ldr	r3, [sp, #0]
 8014db8:	9a01      	ldr	r2, [sp, #4]
 8014dba:	9903      	ldr	r1, [sp, #12]
 8014dbc:	9803      	ldr	r0, [sp, #12]
 8014dbe:	f7ff ff57 	bl	8014c70 <modp_montymul>
 8014dc2:	9003      	str	r0, [sp, #12]
	z = modp_montymul(z, z, p, p0i);
 8014dc4:	9b00      	ldr	r3, [sp, #0]
 8014dc6:	9a01      	ldr	r2, [sp, #4]
 8014dc8:	9903      	ldr	r1, [sp, #12]
 8014dca:	9803      	ldr	r0, [sp, #12]
 8014dcc:	f7ff ff50 	bl	8014c70 <modp_montymul>
 8014dd0:	9003      	str	r0, [sp, #12]

	/*
	 * Halve the value mod p to get 2^62.
	 */
	z = (z + (p & -(z & 1))) >> 1;
 8014dd2:	9b03      	ldr	r3, [sp, #12]
 8014dd4:	f003 0301 	and.w	r3, r3, #1
 8014dd8:	425a      	negs	r2, r3
 8014dda:	9b01      	ldr	r3, [sp, #4]
 8014ddc:	401a      	ands	r2, r3
 8014dde:	9b03      	ldr	r3, [sp, #12]
 8014de0:	4413      	add	r3, r2
 8014de2:	085b      	lsrs	r3, r3, #1
 8014de4:	9303      	str	r3, [sp, #12]
	return z;
 8014de6:	9b03      	ldr	r3, [sp, #12]
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	b005      	add	sp, #20
 8014dec:	f85d fb04 	ldr.w	pc, [sp], #4

08014df0 <modp_Rx>:
 * p must be prime such that 2^30 < p < 2^31; p0i must be equal to
 * -1/p mod 2^31; R2 must be equal to 2^62 mod p.
 */
static inline uint32_t
modp_Rx(unsigned x, uint32_t p, uint32_t p0i, uint32_t R2)
{
 8014df0:	b500      	push	{lr}
 8014df2:	b089      	sub	sp, #36	; 0x24
 8014df4:	9003      	str	r0, [sp, #12]
 8014df6:	9102      	str	r1, [sp, #8]
 8014df8:	9201      	str	r2, [sp, #4]
 8014dfa:	9300      	str	r3, [sp, #0]
	/*
	 * 2^(31*x) = (2^31)*(2^(31*(x-1))); i.e. we want the Montgomery
	 * representation of (2^31)^e mod p, where e = x-1.
	 * R2 is 2^31 in Montgomery representation.
	 */
	x --;
 8014dfc:	9b03      	ldr	r3, [sp, #12]
 8014dfe:	3b01      	subs	r3, #1
 8014e00:	9303      	str	r3, [sp, #12]
	r = R2;
 8014e02:	9b00      	ldr	r3, [sp, #0]
 8014e04:	9306      	str	r3, [sp, #24]
	z = modp_R(p);
 8014e06:	9802      	ldr	r0, [sp, #8]
 8014e08:	f7ff fefa 	bl	8014c00 <modp_R>
 8014e0c:	9005      	str	r0, [sp, #20]
	for (i = 0; (1U << i) <= x; i ++) {
 8014e0e:	2300      	movs	r3, #0
 8014e10:	9307      	str	r3, [sp, #28]
 8014e12:	e018      	b.n	8014e46 <modp_Rx+0x56>
		if ((x & (1U << i)) != 0) {
 8014e14:	9a03      	ldr	r2, [sp, #12]
 8014e16:	9b07      	ldr	r3, [sp, #28]
 8014e18:	fa22 f303 	lsr.w	r3, r2, r3
 8014e1c:	f003 0301 	and.w	r3, r3, #1
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d006      	beq.n	8014e32 <modp_Rx+0x42>
			z = modp_montymul(z, r, p, p0i);
 8014e24:	9b01      	ldr	r3, [sp, #4]
 8014e26:	9a02      	ldr	r2, [sp, #8]
 8014e28:	9906      	ldr	r1, [sp, #24]
 8014e2a:	9805      	ldr	r0, [sp, #20]
 8014e2c:	f7ff ff20 	bl	8014c70 <modp_montymul>
 8014e30:	9005      	str	r0, [sp, #20]
		}
		r = modp_montymul(r, r, p, p0i);
 8014e32:	9b01      	ldr	r3, [sp, #4]
 8014e34:	9a02      	ldr	r2, [sp, #8]
 8014e36:	9906      	ldr	r1, [sp, #24]
 8014e38:	9806      	ldr	r0, [sp, #24]
 8014e3a:	f7ff ff19 	bl	8014c70 <modp_montymul>
 8014e3e:	9006      	str	r0, [sp, #24]
	for (i = 0; (1U << i) <= x; i ++) {
 8014e40:	9b07      	ldr	r3, [sp, #28]
 8014e42:	3301      	adds	r3, #1
 8014e44:	9307      	str	r3, [sp, #28]
 8014e46:	2201      	movs	r2, #1
 8014e48:	9b07      	ldr	r3, [sp, #28]
 8014e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8014e4e:	9a03      	ldr	r2, [sp, #12]
 8014e50:	429a      	cmp	r2, r3
 8014e52:	d2df      	bcs.n	8014e14 <modp_Rx+0x24>
	}
	return z;
 8014e54:	9b05      	ldr	r3, [sp, #20]
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	b009      	add	sp, #36	; 0x24
 8014e5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8014e5e:	bf00      	nop

08014e60 <modp_div>:
 *   p0i   -1/p mod 2^31
 *   R     2^31 mod R
 */
static uint32_t
modp_div(uint32_t a, uint32_t b, uint32_t p, uint32_t p0i, uint32_t R)
{
 8014e60:	b500      	push	{lr}
 8014e62:	b089      	sub	sp, #36	; 0x24
 8014e64:	9003      	str	r0, [sp, #12]
 8014e66:	9102      	str	r1, [sp, #8]
 8014e68:	9201      	str	r2, [sp, #4]
 8014e6a:	9300      	str	r3, [sp, #0]
	uint32_t z, e;
	int i;

	e = p - 2;
 8014e6c:	9b01      	ldr	r3, [sp, #4]
 8014e6e:	3b02      	subs	r3, #2
 8014e70:	9305      	str	r3, [sp, #20]
	z = R;
 8014e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e74:	9307      	str	r3, [sp, #28]
	for (i = 30; i >= 0; i --) {
 8014e76:	231e      	movs	r3, #30
 8014e78:	9306      	str	r3, [sp, #24]
 8014e7a:	e01e      	b.n	8014eba <modp_div+0x5a>
		uint32_t z2;

		z = modp_montymul(z, z, p, p0i);
 8014e7c:	9b00      	ldr	r3, [sp, #0]
 8014e7e:	9a01      	ldr	r2, [sp, #4]
 8014e80:	9907      	ldr	r1, [sp, #28]
 8014e82:	9807      	ldr	r0, [sp, #28]
 8014e84:	f7ff fef4 	bl	8014c70 <modp_montymul>
 8014e88:	9007      	str	r0, [sp, #28]
		z2 = modp_montymul(z, b, p, p0i);
 8014e8a:	9b00      	ldr	r3, [sp, #0]
 8014e8c:	9a01      	ldr	r2, [sp, #4]
 8014e8e:	9902      	ldr	r1, [sp, #8]
 8014e90:	9807      	ldr	r0, [sp, #28]
 8014e92:	f7ff feed 	bl	8014c70 <modp_montymul>
 8014e96:	9004      	str	r0, [sp, #16]
		z ^= (z ^ z2) & -(uint32_t)((e >> i) & 1);
 8014e98:	9a07      	ldr	r2, [sp, #28]
 8014e9a:	9b04      	ldr	r3, [sp, #16]
 8014e9c:	405a      	eors	r2, r3
 8014e9e:	9905      	ldr	r1, [sp, #20]
 8014ea0:	9b06      	ldr	r3, [sp, #24]
 8014ea2:	fa21 f303 	lsr.w	r3, r1, r3
 8014ea6:	f003 0301 	and.w	r3, r3, #1
 8014eaa:	425b      	negs	r3, r3
 8014eac:	4013      	ands	r3, r2
 8014eae:	9a07      	ldr	r2, [sp, #28]
 8014eb0:	4053      	eors	r3, r2
 8014eb2:	9307      	str	r3, [sp, #28]
	for (i = 30; i >= 0; i --) {
 8014eb4:	9b06      	ldr	r3, [sp, #24]
 8014eb6:	3b01      	subs	r3, #1
 8014eb8:	9306      	str	r3, [sp, #24]
 8014eba:	9b06      	ldr	r3, [sp, #24]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	dadd      	bge.n	8014e7c <modp_div+0x1c>
	 *
	 * We want a/b, so we need one Montgomery multiplication with a,
	 * which also remove one of the R factors, and another such
	 * multiplication to remove the second R factor.
	 */
	z = modp_montymul(z, 1, p, p0i);
 8014ec0:	9b00      	ldr	r3, [sp, #0]
 8014ec2:	9a01      	ldr	r2, [sp, #4]
 8014ec4:	2101      	movs	r1, #1
 8014ec6:	9807      	ldr	r0, [sp, #28]
 8014ec8:	f7ff fed2 	bl	8014c70 <modp_montymul>
 8014ecc:	9007      	str	r0, [sp, #28]
	return modp_montymul(a, z, p, p0i);
 8014ece:	9b00      	ldr	r3, [sp, #0]
 8014ed0:	9a01      	ldr	r2, [sp, #4]
 8014ed2:	9907      	ldr	r1, [sp, #28]
 8014ed4:	9803      	ldr	r0, [sp, #12]
 8014ed6:	f7ff fecb 	bl	8014c70 <modp_montymul>
 8014eda:	4603      	mov	r3, r0
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	b009      	add	sp, #36	; 0x24
 8014ee0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08014ef0 <modp_mkgm2>:
 * p must be a prime such that p = 1 mod 2048.
 */
static void
modp_mkgm2(uint32_t *restrict gm, uint32_t *restrict igm, unsigned logn,
	uint32_t g, uint32_t p, uint32_t p0i)
{
 8014ef0:	b500      	push	{lr}
 8014ef2:	b08f      	sub	sp, #60	; 0x3c
 8014ef4:	9005      	str	r0, [sp, #20]
 8014ef6:	9104      	str	r1, [sp, #16]
 8014ef8:	9203      	str	r2, [sp, #12]
 8014efa:	9302      	str	r3, [sp, #8]
	size_t u, n;
	unsigned k;
	uint32_t ig, x1, x2, R2;

	n = (size_t)1 << logn;
 8014efc:	2201      	movs	r2, #1
 8014efe:	9b03      	ldr	r3, [sp, #12]
 8014f00:	fa02 f303 	lsl.w	r3, r2, r3
 8014f04:	9309      	str	r3, [sp, #36]	; 0x24

	/*
	 * We want g such that g^(2N) = 1 mod p, but the provided
	 * generator has order 2048. We must square it a few times.
	 */
	R2 = modp_R2(p, p0i);
 8014f06:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014f08:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014f0a:	f7ff ff31 	bl	8014d70 <modp_R2>
 8014f0e:	9008      	str	r0, [sp, #32]
	g = modp_montymul(g, R2, p, p0i);
 8014f10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014f14:	9908      	ldr	r1, [sp, #32]
 8014f16:	9802      	ldr	r0, [sp, #8]
 8014f18:	f7ff feaa 	bl	8014c70 <modp_montymul>
 8014f1c:	9002      	str	r0, [sp, #8]
	for (k = logn; k < 10; k ++) {
 8014f1e:	9b03      	ldr	r3, [sp, #12]
 8014f20:	930c      	str	r3, [sp, #48]	; 0x30
 8014f22:	e009      	b.n	8014f38 <modp_mkgm2+0x48>
		g = modp_montymul(g, g, p, p0i);
 8014f24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014f28:	9902      	ldr	r1, [sp, #8]
 8014f2a:	9802      	ldr	r0, [sp, #8]
 8014f2c:	f7ff fea0 	bl	8014c70 <modp_montymul>
 8014f30:	9002      	str	r0, [sp, #8]
	for (k = logn; k < 10; k ++) {
 8014f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f34:	3301      	adds	r3, #1
 8014f36:	930c      	str	r3, [sp, #48]	; 0x30
 8014f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f3a:	2b09      	cmp	r3, #9
 8014f3c:	d9f2      	bls.n	8014f24 <modp_mkgm2+0x34>
	}

	ig = modp_div(R2, g, p, p0i, modp_R(p));
 8014f3e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014f40:	f7ff fe5e 	bl	8014c00 <modp_R>
 8014f44:	4603      	mov	r3, r0
 8014f46:	9300      	str	r3, [sp, #0]
 8014f48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014f4c:	9902      	ldr	r1, [sp, #8]
 8014f4e:	9808      	ldr	r0, [sp, #32]
 8014f50:	f7ff ff86 	bl	8014e60 <modp_div>
 8014f54:	9007      	str	r0, [sp, #28]
	k = 10 - logn;
 8014f56:	9b03      	ldr	r3, [sp, #12]
 8014f58:	f1c3 030a 	rsb	r3, r3, #10
 8014f5c:	930c      	str	r3, [sp, #48]	; 0x30
	x1 = x2 = modp_R(p);
 8014f5e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014f60:	f7ff fe4e 	bl	8014c00 <modp_R>
 8014f64:	900a      	str	r0, [sp, #40]	; 0x28
 8014f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f68:	930b      	str	r3, [sp, #44]	; 0x2c
	for (u = 0; u < n; u ++) {
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	930d      	str	r3, [sp, #52]	; 0x34
 8014f6e:	e024      	b.n	8014fba <modp_mkgm2+0xca>
		size_t v;

		v = REV10[u << k];
 8014f70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f74:	fa02 f303 	lsl.w	r3, r2, r3
 8014f78:	4a14      	ldr	r2, [pc, #80]	; (8014fcc <modp_mkgm2+0xdc>)
 8014f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014f7e:	9306      	str	r3, [sp, #24]
		gm[v] = x1;
 8014f80:	9b06      	ldr	r3, [sp, #24]
 8014f82:	009b      	lsls	r3, r3, #2
 8014f84:	9a05      	ldr	r2, [sp, #20]
 8014f86:	4413      	add	r3, r2
 8014f88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014f8a:	601a      	str	r2, [r3, #0]
		igm[v] = x2;
 8014f8c:	9b06      	ldr	r3, [sp, #24]
 8014f8e:	009b      	lsls	r3, r3, #2
 8014f90:	9a04      	ldr	r2, [sp, #16]
 8014f92:	4413      	add	r3, r2
 8014f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f96:	601a      	str	r2, [r3, #0]
		x1 = modp_montymul(x1, g, p, p0i);
 8014f98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014f9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014f9c:	9902      	ldr	r1, [sp, #8]
 8014f9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014fa0:	f7ff fe66 	bl	8014c70 <modp_montymul>
 8014fa4:	900b      	str	r0, [sp, #44]	; 0x2c
		x2 = modp_montymul(x2, ig, p, p0i);
 8014fa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014fa8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014faa:	9907      	ldr	r1, [sp, #28]
 8014fac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014fae:	f7ff fe5f 	bl	8014c70 <modp_montymul>
 8014fb2:	900a      	str	r0, [sp, #40]	; 0x28
	for (u = 0; u < n; u ++) {
 8014fb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fb6:	3301      	adds	r3, #1
 8014fb8:	930d      	str	r3, [sp, #52]	; 0x34
 8014fba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fbe:	429a      	cmp	r2, r3
 8014fc0:	d3d6      	bcc.n	8014f70 <modp_mkgm2+0x80>
	}
}
 8014fc2:	bf00      	nop
 8014fc4:	bf00      	nop
 8014fc6:	b00f      	add	sp, #60	; 0x3c
 8014fc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8014fcc:	08024c38 	.word	0x08024c38

08014fd0 <modp_NTT2_ext>:
 * are a[0], a[stride], a[2 * stride]...
 */
static void
modp_NTT2_ext(uint32_t *a, size_t stride, const uint32_t *gm, unsigned logn,
	uint32_t p, uint32_t p0i)
{
 8014fd0:	b500      	push	{lr}
 8014fd2:	b091      	sub	sp, #68	; 0x44
 8014fd4:	9003      	str	r0, [sp, #12]
 8014fd6:	9102      	str	r1, [sp, #8]
 8014fd8:	9201      	str	r2, [sp, #4]
 8014fda:	9300      	str	r3, [sp, #0]
	size_t t, m, n;

	if (logn == 0) {
 8014fdc:	9b00      	ldr	r3, [sp, #0]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d06d      	beq.n	80150be <modp_NTT2_ext+0xee>
		return;
	}
	n = (size_t)1 << logn;
 8014fe2:	2201      	movs	r2, #1
 8014fe4:	9b00      	ldr	r3, [sp, #0]
 8014fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8014fea:	9308      	str	r3, [sp, #32]
	t = n;
 8014fec:	9b08      	ldr	r3, [sp, #32]
 8014fee:	930f      	str	r3, [sp, #60]	; 0x3c
	for (m = 1; m < n; m <<= 1) {
 8014ff0:	2301      	movs	r3, #1
 8014ff2:	930e      	str	r3, [sp, #56]	; 0x38
 8014ff4:	e05e      	b.n	80150b4 <modp_NTT2_ext+0xe4>
		size_t ht, u, v1;

		ht = t >> 1;
 8014ff6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ff8:	085b      	lsrs	r3, r3, #1
 8014ffa:	9307      	str	r3, [sp, #28]
		for (u = 0, v1 = 0; u < m; u ++, v1 += t) {
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	930d      	str	r3, [sp, #52]	; 0x34
 8015000:	2300      	movs	r3, #0
 8015002:	930c      	str	r3, [sp, #48]	; 0x30
 8015004:	e04d      	b.n	80150a2 <modp_NTT2_ext+0xd2>
			uint32_t s;
			size_t v;
			uint32_t *r1, *r2;

			s = gm[m + u];
 8015006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015008:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801500a:	4413      	add	r3, r2
 801500c:	009b      	lsls	r3, r3, #2
 801500e:	9a01      	ldr	r2, [sp, #4]
 8015010:	4413      	add	r3, r2
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	9306      	str	r3, [sp, #24]
			r1 = a + v1 * stride;
 8015016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015018:	9a02      	ldr	r2, [sp, #8]
 801501a:	fb02 f303 	mul.w	r3, r2, r3
 801501e:	009b      	lsls	r3, r3, #2
 8015020:	9a03      	ldr	r2, [sp, #12]
 8015022:	4413      	add	r3, r2
 8015024:	930a      	str	r3, [sp, #40]	; 0x28
			r2 = r1 + ht * stride;
 8015026:	9b07      	ldr	r3, [sp, #28]
 8015028:	9a02      	ldr	r2, [sp, #8]
 801502a:	fb02 f303 	mul.w	r3, r2, r3
 801502e:	009b      	lsls	r3, r3, #2
 8015030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015032:	4413      	add	r3, r2
 8015034:	9309      	str	r3, [sp, #36]	; 0x24
			for (v = 0; v < ht; v ++, r1 += stride, r2 += stride) {
 8015036:	2300      	movs	r3, #0
 8015038:	930b      	str	r3, [sp, #44]	; 0x2c
 801503a:	e027      	b.n	801508c <modp_NTT2_ext+0xbc>
				uint32_t x, y;

				x = *r1;
 801503c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	9305      	str	r3, [sp, #20]
				y = modp_montymul(*r2, s, p, p0i);
 8015042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015044:	6818      	ldr	r0, [r3, #0]
 8015046:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015048:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801504a:	9906      	ldr	r1, [sp, #24]
 801504c:	f7ff fe10 	bl	8014c70 <modp_montymul>
 8015050:	9004      	str	r0, [sp, #16]
				*r1 = modp_add(x, y, p);
 8015052:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015054:	9904      	ldr	r1, [sp, #16]
 8015056:	9805      	ldr	r0, [sp, #20]
 8015058:	f7ff fdda 	bl	8014c10 <modp_add>
 801505c:	4602      	mov	r2, r0
 801505e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015060:	601a      	str	r2, [r3, #0]
				*r2 = modp_sub(x, y, p);
 8015062:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015064:	9904      	ldr	r1, [sp, #16]
 8015066:	9805      	ldr	r0, [sp, #20]
 8015068:	f7ff fdea 	bl	8014c40 <modp_sub>
 801506c:	4602      	mov	r2, r0
 801506e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015070:	601a      	str	r2, [r3, #0]
			for (v = 0; v < ht; v ++, r1 += stride, r2 += stride) {
 8015072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015074:	3301      	adds	r3, #1
 8015076:	930b      	str	r3, [sp, #44]	; 0x2c
 8015078:	9b02      	ldr	r3, [sp, #8]
 801507a:	009b      	lsls	r3, r3, #2
 801507c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801507e:	4413      	add	r3, r2
 8015080:	930a      	str	r3, [sp, #40]	; 0x28
 8015082:	9b02      	ldr	r3, [sp, #8]
 8015084:	009b      	lsls	r3, r3, #2
 8015086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015088:	4413      	add	r3, r2
 801508a:	9309      	str	r3, [sp, #36]	; 0x24
 801508c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801508e:	9b07      	ldr	r3, [sp, #28]
 8015090:	429a      	cmp	r2, r3
 8015092:	d3d3      	bcc.n	801503c <modp_NTT2_ext+0x6c>
		for (u = 0, v1 = 0; u < m; u ++, v1 += t) {
 8015094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015096:	3301      	adds	r3, #1
 8015098:	930d      	str	r3, [sp, #52]	; 0x34
 801509a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801509c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801509e:	4413      	add	r3, r2
 80150a0:	930c      	str	r3, [sp, #48]	; 0x30
 80150a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80150a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150a6:	429a      	cmp	r2, r3
 80150a8:	d3ad      	bcc.n	8015006 <modp_NTT2_ext+0x36>
			}
		}
		t = ht;
 80150aa:	9b07      	ldr	r3, [sp, #28]
 80150ac:	930f      	str	r3, [sp, #60]	; 0x3c
	for (m = 1; m < n; m <<= 1) {
 80150ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150b0:	005b      	lsls	r3, r3, #1
 80150b2:	930e      	str	r3, [sp, #56]	; 0x38
 80150b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80150b6:	9b08      	ldr	r3, [sp, #32]
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d39c      	bcc.n	8014ff6 <modp_NTT2_ext+0x26>
 80150bc:	e000      	b.n	80150c0 <modp_NTT2_ext+0xf0>
		return;
 80150be:	bf00      	nop
	}
}
 80150c0:	b011      	add	sp, #68	; 0x44
 80150c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80150c6:	bf00      	nop
	...

080150d0 <modp_iNTT2_ext>:
 * Compute the inverse NTT over a polynomial (binary case).
 */
static void
modp_iNTT2_ext(uint32_t *a, size_t stride, const uint32_t *igm, unsigned logn,
	uint32_t p, uint32_t p0i)
{
 80150d0:	b500      	push	{lr}
 80150d2:	b095      	sub	sp, #84	; 0x54
 80150d4:	9003      	str	r0, [sp, #12]
 80150d6:	9102      	str	r1, [sp, #8]
 80150d8:	9201      	str	r2, [sp, #4]
 80150da:	9300      	str	r3, [sp, #0]
	size_t t, m, n, k;
	uint32_t ni;
	uint32_t *r;

	if (logn == 0) {
 80150dc:	9b00      	ldr	r3, [sp, #0]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	f000 8091 	beq.w	8015206 <modp_iNTT2_ext+0x136>
		return;
	}
	n = (size_t)1 << logn;
 80150e4:	2201      	movs	r2, #1
 80150e6:	9b00      	ldr	r3, [sp, #0]
 80150e8:	fa02 f303 	lsl.w	r3, r2, r3
 80150ec:	930a      	str	r3, [sp, #40]	; 0x28
	t = 1;
 80150ee:	2301      	movs	r3, #1
 80150f0:	9313      	str	r3, [sp, #76]	; 0x4c
	for (m = n; m > 1; m >>= 1) {
 80150f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150f4:	9312      	str	r3, [sp, #72]	; 0x48
 80150f6:	e061      	b.n	80151bc <modp_iNTT2_ext+0xec>
		size_t hm, dt, u, v1;

		hm = m >> 1;
 80150f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80150fa:	085b      	lsrs	r3, r3, #1
 80150fc:	9308      	str	r3, [sp, #32]
		dt = t << 1;
 80150fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015100:	005b      	lsls	r3, r3, #1
 8015102:	9307      	str	r3, [sp, #28]
		for (u = 0, v1 = 0; u < hm; u ++, v1 += dt) {
 8015104:	2300      	movs	r3, #0
 8015106:	930f      	str	r3, [sp, #60]	; 0x3c
 8015108:	2300      	movs	r3, #0
 801510a:	930e      	str	r3, [sp, #56]	; 0x38
 801510c:	e04d      	b.n	80151aa <modp_iNTT2_ext+0xda>
			uint32_t s;
			size_t v;
			uint32_t *r1, *r2;

			s = igm[hm + u];
 801510e:	9a08      	ldr	r2, [sp, #32]
 8015110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015112:	4413      	add	r3, r2
 8015114:	009b      	lsls	r3, r3, #2
 8015116:	9a01      	ldr	r2, [sp, #4]
 8015118:	4413      	add	r3, r2
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	9306      	str	r3, [sp, #24]
			r1 = a + v1 * stride;
 801511e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015120:	9a02      	ldr	r2, [sp, #8]
 8015122:	fb02 f303 	mul.w	r3, r2, r3
 8015126:	009b      	lsls	r3, r3, #2
 8015128:	9a03      	ldr	r2, [sp, #12]
 801512a:	4413      	add	r3, r2
 801512c:	930c      	str	r3, [sp, #48]	; 0x30
			r2 = r1 + t * stride;
 801512e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015130:	9a02      	ldr	r2, [sp, #8]
 8015132:	fb02 f303 	mul.w	r3, r2, r3
 8015136:	009b      	lsls	r3, r3, #2
 8015138:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801513a:	4413      	add	r3, r2
 801513c:	930b      	str	r3, [sp, #44]	; 0x2c
			for (v = 0; v < t; v ++, r1 += stride, r2 += stride) {
 801513e:	2300      	movs	r3, #0
 8015140:	930d      	str	r3, [sp, #52]	; 0x34
 8015142:	e027      	b.n	8015194 <modp_iNTT2_ext+0xc4>
				uint32_t x, y;

				x = *r1;
 8015144:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	9305      	str	r3, [sp, #20]
				y = *r2;
 801514a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	9304      	str	r3, [sp, #16]
				*r1 = modp_add(x, y, p);
 8015150:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015152:	9904      	ldr	r1, [sp, #16]
 8015154:	9805      	ldr	r0, [sp, #20]
 8015156:	f7ff fd5b 	bl	8014c10 <modp_add>
 801515a:	4602      	mov	r2, r0
 801515c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801515e:	601a      	str	r2, [r3, #0]
				*r2 = modp_montymul(
 8015160:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015162:	9904      	ldr	r1, [sp, #16]
 8015164:	9805      	ldr	r0, [sp, #20]
 8015166:	f7ff fd6b 	bl	8014c40 <modp_sub>
 801516a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801516c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801516e:	9906      	ldr	r1, [sp, #24]
 8015170:	f7ff fd7e 	bl	8014c70 <modp_montymul>
 8015174:	4602      	mov	r2, r0
 8015176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015178:	601a      	str	r2, [r3, #0]
			for (v = 0; v < t; v ++, r1 += stride, r2 += stride) {
 801517a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801517c:	3301      	adds	r3, #1
 801517e:	930d      	str	r3, [sp, #52]	; 0x34
 8015180:	9b02      	ldr	r3, [sp, #8]
 8015182:	009b      	lsls	r3, r3, #2
 8015184:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015186:	4413      	add	r3, r2
 8015188:	930c      	str	r3, [sp, #48]	; 0x30
 801518a:	9b02      	ldr	r3, [sp, #8]
 801518c:	009b      	lsls	r3, r3, #2
 801518e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015190:	4413      	add	r3, r2
 8015192:	930b      	str	r3, [sp, #44]	; 0x2c
 8015194:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015196:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015198:	429a      	cmp	r2, r3
 801519a:	d3d3      	bcc.n	8015144 <modp_iNTT2_ext+0x74>
		for (u = 0, v1 = 0; u < hm; u ++, v1 += dt) {
 801519c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801519e:	3301      	adds	r3, #1
 80151a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80151a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80151a4:	9b07      	ldr	r3, [sp, #28]
 80151a6:	4413      	add	r3, r2
 80151a8:	930e      	str	r3, [sp, #56]	; 0x38
 80151aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80151ac:	9b08      	ldr	r3, [sp, #32]
 80151ae:	429a      	cmp	r2, r3
 80151b0:	d3ad      	bcc.n	801510e <modp_iNTT2_ext+0x3e>
					modp_sub(x, y, p), s, p, p0i);;
			}
		}
		t = dt;
 80151b2:	9b07      	ldr	r3, [sp, #28]
 80151b4:	9313      	str	r3, [sp, #76]	; 0x4c
	for (m = n; m > 1; m >>= 1) {
 80151b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80151b8:	085b      	lsrs	r3, r3, #1
 80151ba:	9312      	str	r3, [sp, #72]	; 0x48
 80151bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80151be:	2b01      	cmp	r3, #1
 80151c0:	d89a      	bhi.n	80150f8 <modp_iNTT2_ext+0x28>
	/*
	 * We need 1/n in Montgomery representation, i.e. R/n. Since
	 * 1 <= logn <= 10, R/n is an integer; morever, R/n <= 2^30 < p,
	 * thus a simple shift will do.
	 */
	ni = (uint32_t)1 << (31 - logn);
 80151c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80151c6:	9b00      	ldr	r3, [sp, #0]
 80151c8:	fa22 f303 	lsr.w	r3, r2, r3
 80151cc:	9309      	str	r3, [sp, #36]	; 0x24
	for (k = 0, r = a; k < n; k ++, r += stride) {
 80151ce:	2300      	movs	r3, #0
 80151d0:	9311      	str	r3, [sp, #68]	; 0x44
 80151d2:	9b03      	ldr	r3, [sp, #12]
 80151d4:	9310      	str	r3, [sp, #64]	; 0x40
 80151d6:	e011      	b.n	80151fc <modp_iNTT2_ext+0x12c>
		*r = modp_montymul(*r, ni, p, p0i);
 80151d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80151da:	6818      	ldr	r0, [r3, #0]
 80151dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80151de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80151e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80151e2:	f7ff fd45 	bl	8014c70 <modp_montymul>
 80151e6:	4602      	mov	r2, r0
 80151e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80151ea:	601a      	str	r2, [r3, #0]
	for (k = 0, r = a; k < n; k ++, r += stride) {
 80151ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80151ee:	3301      	adds	r3, #1
 80151f0:	9311      	str	r3, [sp, #68]	; 0x44
 80151f2:	9b02      	ldr	r3, [sp, #8]
 80151f4:	009b      	lsls	r3, r3, #2
 80151f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80151f8:	4413      	add	r3, r2
 80151fa:	9310      	str	r3, [sp, #64]	; 0x40
 80151fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80151fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015200:	429a      	cmp	r2, r3
 8015202:	d3e9      	bcc.n	80151d8 <modp_iNTT2_ext+0x108>
 8015204:	e000      	b.n	8015208 <modp_iNTT2_ext+0x138>
		return;
 8015206:	bf00      	nop
	}
}
 8015208:	b015      	add	sp, #84	; 0x54
 801520a:	f85d fb04 	ldr.w	pc, [sp], #4
 801520e:	bf00      	nop

08015210 <modp_poly_rec_res>:
 * solve_NTRU_binary_depth1().
 */
static void
modp_poly_rec_res(uint32_t *f, unsigned logn,
	uint32_t p, uint32_t p0i, uint32_t R2)
{
 8015210:	b510      	push	{r4, lr}
 8015212:	b088      	sub	sp, #32
 8015214:	9003      	str	r0, [sp, #12]
 8015216:	9102      	str	r1, [sp, #8]
 8015218:	9201      	str	r2, [sp, #4]
 801521a:	9300      	str	r3, [sp, #0]
	size_t hn, u;

	hn = (size_t)1 << (logn - 1);
 801521c:	9b02      	ldr	r3, [sp, #8]
 801521e:	3b01      	subs	r3, #1
 8015220:	2201      	movs	r2, #1
 8015222:	fa02 f303 	lsl.w	r3, r2, r3
 8015226:	9306      	str	r3, [sp, #24]
	for (u = 0; u < hn; u ++) {
 8015228:	2300      	movs	r3, #0
 801522a:	9307      	str	r3, [sp, #28]
 801522c:	e020      	b.n	8015270 <modp_poly_rec_res+0x60>
		uint32_t w0, w1;

		w0 = f[(u << 1) + 0];
 801522e:	9b07      	ldr	r3, [sp, #28]
 8015230:	00db      	lsls	r3, r3, #3
 8015232:	9a03      	ldr	r2, [sp, #12]
 8015234:	4413      	add	r3, r2
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	9305      	str	r3, [sp, #20]
		w1 = f[(u << 1) + 1];
 801523a:	9b07      	ldr	r3, [sp, #28]
 801523c:	00db      	lsls	r3, r3, #3
 801523e:	3304      	adds	r3, #4
 8015240:	9a03      	ldr	r2, [sp, #12]
 8015242:	4413      	add	r3, r2
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	9304      	str	r3, [sp, #16]
		f[u] = modp_montymul(modp_montymul(w0, w1, p, p0i), R2, p, p0i);
 8015248:	9b00      	ldr	r3, [sp, #0]
 801524a:	9a01      	ldr	r2, [sp, #4]
 801524c:	9904      	ldr	r1, [sp, #16]
 801524e:	9805      	ldr	r0, [sp, #20]
 8015250:	f7ff fd0e 	bl	8014c70 <modp_montymul>
 8015254:	9b07      	ldr	r3, [sp, #28]
 8015256:	009b      	lsls	r3, r3, #2
 8015258:	9a03      	ldr	r2, [sp, #12]
 801525a:	18d4      	adds	r4, r2, r3
 801525c:	9b00      	ldr	r3, [sp, #0]
 801525e:	9a01      	ldr	r2, [sp, #4]
 8015260:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015262:	f7ff fd05 	bl	8014c70 <modp_montymul>
 8015266:	4603      	mov	r3, r0
 8015268:	6023      	str	r3, [r4, #0]
	for (u = 0; u < hn; u ++) {
 801526a:	9b07      	ldr	r3, [sp, #28]
 801526c:	3301      	adds	r3, #1
 801526e:	9307      	str	r3, [sp, #28]
 8015270:	9a07      	ldr	r2, [sp, #28]
 8015272:	9b06      	ldr	r3, [sp, #24]
 8015274:	429a      	cmp	r2, r3
 8015276:	d3da      	bcc.n	801522e <modp_poly_rec_res+0x1e>
	}
}
 8015278:	bf00      	nop
 801527a:	bf00      	nop
 801527c:	b008      	add	sp, #32
 801527e:	bd10      	pop	{r4, pc}

08015280 <zint_sub>:
 * still performed, and the carry is computed and returned.
 */
static uint32_t
zint_sub(uint32_t *restrict a, const uint32_t *restrict b, size_t len,
	uint32_t ctl)
{
 8015280:	b08a      	sub	sp, #40	; 0x28
 8015282:	9003      	str	r0, [sp, #12]
 8015284:	9102      	str	r1, [sp, #8]
 8015286:	9201      	str	r2, [sp, #4]
 8015288:	9300      	str	r3, [sp, #0]
	size_t u;
	uint32_t cc, m;

	cc = 0;
 801528a:	2300      	movs	r3, #0
 801528c:	9308      	str	r3, [sp, #32]
	m = -ctl;
 801528e:	9b00      	ldr	r3, [sp, #0]
 8015290:	425b      	negs	r3, r3
 8015292:	9307      	str	r3, [sp, #28]
	for (u = 0; u < len; u ++) {
 8015294:	2300      	movs	r3, #0
 8015296:	9309      	str	r3, [sp, #36]	; 0x24
 8015298:	e025      	b.n	80152e6 <zint_sub+0x66>
		uint32_t aw, w;

		aw = a[u];
 801529a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801529c:	009b      	lsls	r3, r3, #2
 801529e:	9a03      	ldr	r2, [sp, #12]
 80152a0:	4413      	add	r3, r2
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	9306      	str	r3, [sp, #24]
		w = aw - b[u] - cc;
 80152a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152a8:	009b      	lsls	r3, r3, #2
 80152aa:	9a02      	ldr	r2, [sp, #8]
 80152ac:	4413      	add	r3, r2
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	9a06      	ldr	r2, [sp, #24]
 80152b2:	1ad2      	subs	r2, r2, r3
 80152b4:	9b08      	ldr	r3, [sp, #32]
 80152b6:	1ad3      	subs	r3, r2, r3
 80152b8:	9305      	str	r3, [sp, #20]
		cc = w >> 31;
 80152ba:	9b05      	ldr	r3, [sp, #20]
 80152bc:	0fdb      	lsrs	r3, r3, #31
 80152be:	9308      	str	r3, [sp, #32]
		aw ^= ((w & 0x7FFFFFFF) ^ aw) & m;
 80152c0:	9b05      	ldr	r3, [sp, #20]
 80152c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80152c6:	9b06      	ldr	r3, [sp, #24]
 80152c8:	405a      	eors	r2, r3
 80152ca:	9b07      	ldr	r3, [sp, #28]
 80152cc:	4013      	ands	r3, r2
 80152ce:	9a06      	ldr	r2, [sp, #24]
 80152d0:	4053      	eors	r3, r2
 80152d2:	9306      	str	r3, [sp, #24]
		a[u] = aw;
 80152d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152d6:	009b      	lsls	r3, r3, #2
 80152d8:	9a03      	ldr	r2, [sp, #12]
 80152da:	4413      	add	r3, r2
 80152dc:	9a06      	ldr	r2, [sp, #24]
 80152de:	601a      	str	r2, [r3, #0]
	for (u = 0; u < len; u ++) {
 80152e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152e2:	3301      	adds	r3, #1
 80152e4:	9309      	str	r3, [sp, #36]	; 0x24
 80152e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80152e8:	9b01      	ldr	r3, [sp, #4]
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d3d5      	bcc.n	801529a <zint_sub+0x1a>
	}
	return cc;
 80152ee:	9b08      	ldr	r3, [sp, #32]
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	b00a      	add	sp, #40	; 0x28
 80152f4:	4770      	bx	lr
 80152f6:	bf00      	nop
	...

08015300 <zint_mul_small>:
 * Mutiply the provided big integer m with a small value x.
 * This function assumes that x < 2^31. The carry word is returned.
 */
static uint32_t
zint_mul_small(uint32_t *m, size_t mlen, uint32_t x)
{
 8015300:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015304:	b08a      	sub	sp, #40	; 0x28
 8015306:	9005      	str	r0, [sp, #20]
 8015308:	9104      	str	r1, [sp, #16]
 801530a:	9203      	str	r2, [sp, #12]
	size_t u;
	uint32_t cc;

	cc = 0;
 801530c:	2300      	movs	r3, #0
 801530e:	9308      	str	r3, [sp, #32]
	for (u = 0; u < mlen; u ++) {
 8015310:	2300      	movs	r3, #0
 8015312:	9309      	str	r3, [sp, #36]	; 0x24
 8015314:	e039      	b.n	801538a <zint_mul_small+0x8a>
		uint64_t z;

		z = (uint64_t)m[u] * (uint64_t)x + cc;
 8015316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015318:	009b      	lsls	r3, r3, #2
 801531a:	9a05      	ldr	r2, [sp, #20]
 801531c:	4413      	add	r3, r2
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	2200      	movs	r2, #0
 8015322:	461e      	mov	r6, r3
 8015324:	4617      	mov	r7, r2
 8015326:	9b03      	ldr	r3, [sp, #12]
 8015328:	2200      	movs	r2, #0
 801532a:	4698      	mov	r8, r3
 801532c:	4691      	mov	r9, r2
 801532e:	fb08 f207 	mul.w	r2, r8, r7
 8015332:	fb06 f309 	mul.w	r3, r6, r9
 8015336:	4413      	add	r3, r2
 8015338:	fba6 4508 	umull	r4, r5, r6, r8
 801533c:	442b      	add	r3, r5
 801533e:	461d      	mov	r5, r3
 8015340:	9b08      	ldr	r3, [sp, #32]
 8015342:	2200      	movs	r2, #0
 8015344:	469a      	mov	sl, r3
 8015346:	4693      	mov	fp, r2
 8015348:	eb14 030a 	adds.w	r3, r4, sl
 801534c:	9300      	str	r3, [sp, #0]
 801534e:	eb45 030b 	adc.w	r3, r5, fp
 8015352:	9301      	str	r3, [sp, #4]
 8015354:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015358:	e9cd 2306 	strd	r2, r3, [sp, #24]
		m[u] = (uint32_t)z & 0x7FFFFFFF;
 801535c:	9a06      	ldr	r2, [sp, #24]
 801535e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015360:	009b      	lsls	r3, r3, #2
 8015362:	9905      	ldr	r1, [sp, #20]
 8015364:	440b      	add	r3, r1
 8015366:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801536a:	601a      	str	r2, [r3, #0]
		cc = (uint32_t)(z >> 31);
 801536c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015370:	f04f 0200 	mov.w	r2, #0
 8015374:	f04f 0300 	mov.w	r3, #0
 8015378:	0fc2      	lsrs	r2, r0, #31
 801537a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801537e:	0fcb      	lsrs	r3, r1, #31
 8015380:	4613      	mov	r3, r2
 8015382:	9308      	str	r3, [sp, #32]
	for (u = 0; u < mlen; u ++) {
 8015384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015386:	3301      	adds	r3, #1
 8015388:	9309      	str	r3, [sp, #36]	; 0x24
 801538a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801538c:	9b04      	ldr	r3, [sp, #16]
 801538e:	429a      	cmp	r2, r3
 8015390:	d3c1      	bcc.n	8015316 <zint_mul_small+0x16>
	}
	return cc;
 8015392:	9b08      	ldr	r3, [sp, #32]
}
 8015394:	4618      	mov	r0, r3
 8015396:	b00a      	add	sp, #40	; 0x28
 8015398:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801539c:	4770      	bx	lr
 801539e:	bf00      	nop

080153a0 <zint_mod_small_unsigned>:
 *  R2 = 2^62 mod p
 */
static uint32_t
zint_mod_small_unsigned(const uint32_t *d, size_t dlen,
	uint32_t p, uint32_t p0i, uint32_t R2)
{
 80153a0:	b500      	push	{lr}
 80153a2:	b089      	sub	sp, #36	; 0x24
 80153a4:	9003      	str	r0, [sp, #12]
 80153a6:	9102      	str	r1, [sp, #8]
 80153a8:	9201      	str	r2, [sp, #4]
 80153aa:	9300      	str	r3, [sp, #0]
	 * Algorithm: we inject words one by one, starting with the high
	 * word. Each step is:
	 *  - multiply x by 2^31
	 *  - add new word
	 */
	x = 0;
 80153ac:	2300      	movs	r3, #0
 80153ae:	9307      	str	r3, [sp, #28]
	u = dlen;
 80153b0:	9b02      	ldr	r3, [sp, #8]
 80153b2:	9306      	str	r3, [sp, #24]
	while (u -- > 0) {
 80153b4:	e01c      	b.n	80153f0 <zint_mod_small_unsigned+0x50>
		uint32_t w;

		x = modp_montymul(x, R2, p, p0i);
 80153b6:	9b00      	ldr	r3, [sp, #0]
 80153b8:	9a01      	ldr	r2, [sp, #4]
 80153ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80153bc:	9807      	ldr	r0, [sp, #28]
 80153be:	f7ff fc57 	bl	8014c70 <modp_montymul>
 80153c2:	9007      	str	r0, [sp, #28]
		w = d[u] - p;
 80153c4:	9b06      	ldr	r3, [sp, #24]
 80153c6:	009b      	lsls	r3, r3, #2
 80153c8:	9a03      	ldr	r2, [sp, #12]
 80153ca:	4413      	add	r3, r2
 80153cc:	681a      	ldr	r2, [r3, #0]
 80153ce:	9b01      	ldr	r3, [sp, #4]
 80153d0:	1ad3      	subs	r3, r2, r3
 80153d2:	9305      	str	r3, [sp, #20]
		w += p & -(w >> 31);
 80153d4:	9b05      	ldr	r3, [sp, #20]
 80153d6:	17db      	asrs	r3, r3, #31
 80153d8:	461a      	mov	r2, r3
 80153da:	9b01      	ldr	r3, [sp, #4]
 80153dc:	4013      	ands	r3, r2
 80153de:	9a05      	ldr	r2, [sp, #20]
 80153e0:	4413      	add	r3, r2
 80153e2:	9305      	str	r3, [sp, #20]
		x = modp_add(x, w, p);
 80153e4:	9a01      	ldr	r2, [sp, #4]
 80153e6:	9905      	ldr	r1, [sp, #20]
 80153e8:	9807      	ldr	r0, [sp, #28]
 80153ea:	f7ff fc11 	bl	8014c10 <modp_add>
 80153ee:	9007      	str	r0, [sp, #28]
	while (u -- > 0) {
 80153f0:	9b06      	ldr	r3, [sp, #24]
 80153f2:	1e5a      	subs	r2, r3, #1
 80153f4:	9206      	str	r2, [sp, #24]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d1dd      	bne.n	80153b6 <zint_mod_small_unsigned+0x16>
	}
	return x;
 80153fa:	9b07      	ldr	r3, [sp, #28]
}
 80153fc:	4618      	mov	r0, r3
 80153fe:	b009      	add	sp, #36	; 0x24
 8015400:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015410 <zint_mod_small_signed>:
 * Extra parameter is Rx = 2^(31*dlen) mod p.
 */
static uint32_t
zint_mod_small_signed(const uint32_t *d, size_t dlen,
	uint32_t p, uint32_t p0i, uint32_t R2, uint32_t Rx)
{
 8015410:	b500      	push	{lr}
 8015412:	b089      	sub	sp, #36	; 0x24
 8015414:	9005      	str	r0, [sp, #20]
 8015416:	9104      	str	r1, [sp, #16]
 8015418:	9203      	str	r2, [sp, #12]
 801541a:	9302      	str	r3, [sp, #8]
	uint32_t z;

	if (dlen == 0) {
 801541c:	9b04      	ldr	r3, [sp, #16]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d101      	bne.n	8015426 <zint_mod_small_signed+0x16>
		return 0;
 8015422:	2300      	movs	r3, #0
 8015424:	e01b      	b.n	801545e <zint_mod_small_signed+0x4e>
	}
	z = zint_mod_small_unsigned(d, dlen, p, p0i, R2);
 8015426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015428:	9300      	str	r3, [sp, #0]
 801542a:	9b02      	ldr	r3, [sp, #8]
 801542c:	9a03      	ldr	r2, [sp, #12]
 801542e:	9904      	ldr	r1, [sp, #16]
 8015430:	9805      	ldr	r0, [sp, #20]
 8015432:	f7ff ffb5 	bl	80153a0 <zint_mod_small_unsigned>
 8015436:	9007      	str	r0, [sp, #28]
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 8015438:	9b04      	ldr	r3, [sp, #16]
 801543a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801543e:	3b01      	subs	r3, #1
 8015440:	009b      	lsls	r3, r3, #2
 8015442:	9a05      	ldr	r2, [sp, #20]
 8015444:	4413      	add	r3, r2
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	0f9b      	lsrs	r3, r3, #30
 801544a:	425a      	negs	r2, r3
 801544c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801544e:	4013      	ands	r3, r2
 8015450:	9a03      	ldr	r2, [sp, #12]
 8015452:	4619      	mov	r1, r3
 8015454:	9807      	ldr	r0, [sp, #28]
 8015456:	f7ff fbf3 	bl	8014c40 <modp_sub>
 801545a:	9007      	str	r0, [sp, #28]
	return z;
 801545c:	9b07      	ldr	r3, [sp, #28]
}
 801545e:	4618      	mov	r0, r3
 8015460:	b009      	add	sp, #36	; 0x24
 8015462:	f85d fb04 	ldr.w	pc, [sp], #4
 8015466:	bf00      	nop
	...

08015470 <zint_add_mul_small>:
 * not overlap.
 */
static void
zint_add_mul_small(uint32_t *restrict x,
	const uint32_t *restrict y, size_t len, uint32_t s)
{
 8015470:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015474:	b090      	sub	sp, #64	; 0x40
 8015476:	9009      	str	r0, [sp, #36]	; 0x24
 8015478:	9108      	str	r1, [sp, #32]
 801547a:	9207      	str	r2, [sp, #28]
 801547c:	9306      	str	r3, [sp, #24]
	size_t u;
	uint32_t cc;

	cc = 0;
 801547e:	2300      	movs	r3, #0
 8015480:	930e      	str	r3, [sp, #56]	; 0x38
	for (u = 0; u < len; u ++) {
 8015482:	2300      	movs	r3, #0
 8015484:	930f      	str	r3, [sp, #60]	; 0x3c
 8015486:	e04f      	b.n	8015528 <zint_add_mul_small+0xb8>
		uint32_t xw, yw;
		uint64_t z;

		xw = x[u];
 8015488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801548a:	009a      	lsls	r2, r3, #2
 801548c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801548e:	4413      	add	r3, r2
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	930d      	str	r3, [sp, #52]	; 0x34
		yw = y[u];
 8015494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015496:	009a      	lsls	r2, r3, #2
 8015498:	9b08      	ldr	r3, [sp, #32]
 801549a:	4413      	add	r3, r2
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	930c      	str	r3, [sp, #48]	; 0x30
		z = (uint64_t)yw * (uint64_t)s + (uint64_t)xw + (uint64_t)cc;
 80154a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154a2:	2200      	movs	r2, #0
 80154a4:	4698      	mov	r8, r3
 80154a6:	4691      	mov	r9, r2
 80154a8:	9b06      	ldr	r3, [sp, #24]
 80154aa:	2200      	movs	r2, #0
 80154ac:	469a      	mov	sl, r3
 80154ae:	4693      	mov	fp, r2
 80154b0:	fb0a f209 	mul.w	r2, sl, r9
 80154b4:	fb08 f30b 	mul.w	r3, r8, fp
 80154b8:	4413      	add	r3, r2
 80154ba:	fba8 450a 	umull	r4, r5, r8, sl
 80154be:	442b      	add	r3, r5
 80154c0:	461d      	mov	r5, r3
 80154c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154c4:	2200      	movs	r2, #0
 80154c6:	9300      	str	r3, [sp, #0]
 80154c8:	9201      	str	r2, [sp, #4]
 80154ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80154ce:	460b      	mov	r3, r1
 80154d0:	18e6      	adds	r6, r4, r3
 80154d2:	4613      	mov	r3, r2
 80154d4:	eb45 0703 	adc.w	r7, r5, r3
 80154d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154da:	2200      	movs	r2, #0
 80154dc:	9302      	str	r3, [sp, #8]
 80154de:	9203      	str	r2, [sp, #12]
 80154e0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80154e4:	460b      	mov	r3, r1
 80154e6:	18f3      	adds	r3, r6, r3
 80154e8:	9304      	str	r3, [sp, #16]
 80154ea:	4613      	mov	r3, r2
 80154ec:	eb47 0303 	adc.w	r3, r7, r3
 80154f0:	9305      	str	r3, [sp, #20]
 80154f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80154f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		x[u] = (uint32_t)z & 0x7FFFFFFF;
 80154fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80154fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154fe:	009a      	lsls	r2, r3, #2
 8015500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015502:	441a      	add	r2, r3
 8015504:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015508:	6013      	str	r3, [r2, #0]
		cc = (uint32_t)(z >> 31);
 801550a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801550e:	f04f 0000 	mov.w	r0, #0
 8015512:	f04f 0100 	mov.w	r1, #0
 8015516:	0fd0      	lsrs	r0, r2, #31
 8015518:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801551c:	0fd9      	lsrs	r1, r3, #31
 801551e:	4603      	mov	r3, r0
 8015520:	930e      	str	r3, [sp, #56]	; 0x38
	for (u = 0; u < len; u ++) {
 8015522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015524:	3301      	adds	r3, #1
 8015526:	930f      	str	r3, [sp, #60]	; 0x3c
 8015528:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801552a:	9b07      	ldr	r3, [sp, #28]
 801552c:	429a      	cmp	r2, r3
 801552e:	d3ab      	bcc.n	8015488 <zint_add_mul_small+0x18>
	}
	x[len] = cc;
 8015530:	9b07      	ldr	r3, [sp, #28]
 8015532:	009b      	lsls	r3, r3, #2
 8015534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015536:	4413      	add	r3, r2
 8015538:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801553a:	601a      	str	r2, [r3, #0]
}
 801553c:	bf00      	nop
 801553e:	b010      	add	sp, #64	; 0x40
 8015540:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015544:	4770      	bx	lr
 8015546:	bf00      	nop
	...

08015550 <zint_norm_zero>:
 * with x - p (signed encoding with two's complement); otherwise, x is
 * untouched. The two integers x and p are encoded over the same length.
 */
static void
zint_norm_zero(uint32_t *restrict x, const uint32_t *restrict p, size_t len)
{
 8015550:	b500      	push	{lr}
 8015552:	b08b      	sub	sp, #44	; 0x2c
 8015554:	9003      	str	r0, [sp, #12]
 8015556:	9102      	str	r1, [sp, #8]
 8015558:	9201      	str	r2, [sp, #4]
	/*
	 * Compare x with p/2. We use the shifted version of p, and p
	 * is odd, so we really compare with (p-1)/2; we want to perform
	 * the subtraction if and only if x > (p-1)/2.
	 */
	r = 0;
 801555a:	2300      	movs	r3, #0
 801555c:	9308      	str	r3, [sp, #32]
	bb = 0;
 801555e:	2300      	movs	r3, #0
 8015560:	9307      	str	r3, [sp, #28]
	u = len;
 8015562:	9b01      	ldr	r3, [sp, #4]
 8015564:	9309      	str	r3, [sp, #36]	; 0x24
	while (u -- > 0) {
 8015566:	e02b      	b.n	80155c0 <zint_norm_zero+0x70>

		/*
		 * Get the two words to compare in wx and wp (both over
		 * 31 bits exactly).
		 */
		wx = x[u];
 8015568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801556a:	009b      	lsls	r3, r3, #2
 801556c:	9a03      	ldr	r2, [sp, #12]
 801556e:	4413      	add	r3, r2
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	9306      	str	r3, [sp, #24]
		wp = (p[u] >> 1) | (bb << 30);
 8015574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015576:	009b      	lsls	r3, r3, #2
 8015578:	9a02      	ldr	r2, [sp, #8]
 801557a:	4413      	add	r3, r2
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	085a      	lsrs	r2, r3, #1
 8015580:	9b07      	ldr	r3, [sp, #28]
 8015582:	079b      	lsls	r3, r3, #30
 8015584:	4313      	orrs	r3, r2
 8015586:	9305      	str	r3, [sp, #20]
		bb = p[u] & 1;
 8015588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801558a:	009b      	lsls	r3, r3, #2
 801558c:	9a02      	ldr	r2, [sp, #8]
 801558e:	4413      	add	r3, r2
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	f003 0301 	and.w	r3, r3, #1
 8015596:	9307      	str	r3, [sp, #28]

		/*
		 * We set cc to -1, 0 or 1, depending on whether wp is
		 * lower than, equal to, or greater than wx.
		 */
		cc = wp - wx;
 8015598:	9a05      	ldr	r2, [sp, #20]
 801559a:	9b06      	ldr	r3, [sp, #24]
 801559c:	1ad3      	subs	r3, r2, r3
 801559e:	9304      	str	r3, [sp, #16]
		cc = ((-cc) >> 31) | -(cc >> 31);
 80155a0:	9b04      	ldr	r3, [sp, #16]
 80155a2:	425b      	negs	r3, r3
 80155a4:	0fdb      	lsrs	r3, r3, #31
 80155a6:	9a04      	ldr	r2, [sp, #16]
 80155a8:	17d2      	asrs	r2, r2, #31
 80155aa:	4313      	orrs	r3, r2
 80155ac:	9304      	str	r3, [sp, #16]

		/*
		 * If r != 0 then it is either 1 or -1, and we keep its
		 * value. Otherwise, if r = 0, then we replace it with cc.
		 */
		r |= cc & ((r & 1) - 1);
 80155ae:	9b08      	ldr	r3, [sp, #32]
 80155b0:	f003 0301 	and.w	r3, r3, #1
 80155b4:	1e5a      	subs	r2, r3, #1
 80155b6:	9b04      	ldr	r3, [sp, #16]
 80155b8:	4013      	ands	r3, r2
 80155ba:	9a08      	ldr	r2, [sp, #32]
 80155bc:	4313      	orrs	r3, r2
 80155be:	9308      	str	r3, [sp, #32]
	while (u -- > 0) {
 80155c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155c2:	1e5a      	subs	r2, r3, #1
 80155c4:	9209      	str	r2, [sp, #36]	; 0x24
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d1ce      	bne.n	8015568 <zint_norm_zero+0x18>
	/*
	 * At this point, r = -1, 0 or 1, depending on whether (p-1)/2
	 * is lower than, equal to, or greater than x. We thus want to
	 * do the subtraction only if r = -1.
	 */
	zint_sub(x, p, len, r >> 31);
 80155ca:	9b08      	ldr	r3, [sp, #32]
 80155cc:	0fdb      	lsrs	r3, r3, #31
 80155ce:	9a01      	ldr	r2, [sp, #4]
 80155d0:	9902      	ldr	r1, [sp, #8]
 80155d2:	9803      	ldr	r0, [sp, #12]
 80155d4:	f7ff fe54 	bl	8015280 <zint_sub>
}
 80155d8:	bf00      	nop
 80155da:	b00b      	add	sp, #44	; 0x2c
 80155dc:	f85d fb04 	ldr.w	pc, [sp], #4

080155e0 <zint_rebuild_CRT>:
 */
static void
zint_rebuild_CRT(uint32_t *restrict xx, size_t xlen, size_t xstride,
	size_t num, const small_prime *primes, int normalize_signed,
	uint32_t *restrict tmp)
{
 80155e0:	b510      	push	{r4, lr}
 80155e2:	b090      	sub	sp, #64	; 0x40
 80155e4:	9005      	str	r0, [sp, #20]
 80155e6:	9104      	str	r1, [sp, #16]
 80155e8:	9203      	str	r2, [sp, #12]
 80155ea:	9302      	str	r3, [sp, #8]
	size_t u;
	uint32_t *x;

	tmp[0] = primes[0].p;
 80155ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80155ee:	681a      	ldr	r2, [r3, #0]
 80155f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80155f2:	601a      	str	r2, [r3, #0]
	for (u = 1; u < xlen; u ++) {
 80155f4:	2301      	movs	r3, #1
 80155f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80155f8:	e05c      	b.n	80156b4 <zint_rebuild_CRT+0xd4>
		 * We call 'q' the product of all previous primes.
		 */
		uint32_t p, p0i, s, R2;
		size_t v;

		p = primes[u].p;
 80155fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80155fc:	4613      	mov	r3, r2
 80155fe:	005b      	lsls	r3, r3, #1
 8015600:	4413      	add	r3, r2
 8015602:	009b      	lsls	r3, r3, #2
 8015604:	461a      	mov	r2, r3
 8015606:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015608:	4413      	add	r3, r2
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	930c      	str	r3, [sp, #48]	; 0x30
		s = primes[u].s;
 801560e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015610:	4613      	mov	r3, r2
 8015612:	005b      	lsls	r3, r3, #1
 8015614:	4413      	add	r3, r2
 8015616:	009b      	lsls	r3, r3, #2
 8015618:	461a      	mov	r2, r3
 801561a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801561c:	4413      	add	r3, r2
 801561e:	689b      	ldr	r3, [r3, #8]
 8015620:	930b      	str	r3, [sp, #44]	; 0x2c
		p0i = modp_ninv31(p);
 8015622:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015624:	f7ff fab4 	bl	8014b90 <modp_ninv31>
 8015628:	900a      	str	r0, [sp, #40]	; 0x28
		R2 = modp_R2(p, p0i);
 801562a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801562c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801562e:	f7ff fb9f 	bl	8014d70 <modp_R2>
 8015632:	9009      	str	r0, [sp, #36]	; 0x24

		for (v = 0, x = xx; v < num; v ++, x += xstride) {
 8015634:	2300      	movs	r3, #0
 8015636:	930d      	str	r3, [sp, #52]	; 0x34
 8015638:	9b05      	ldr	r3, [sp, #20]
 801563a:	930e      	str	r3, [sp, #56]	; 0x38
 801563c:	e028      	b.n	8015690 <zint_rebuild_CRT+0xb0>
			/*
			 * xp = the integer x modulo the prime p for this
			 *      iteration
			 * xq = (x mod q) mod p
			 */
			xp = x[u];
 801563e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015640:	009b      	lsls	r3, r3, #2
 8015642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015644:	4413      	add	r3, r2
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	9308      	str	r3, [sp, #32]
			xq = zint_mod_small_unsigned(x, u, p, p0i, R2);
 801564a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801564c:	9300      	str	r3, [sp, #0]
 801564e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015652:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015654:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015656:	f7ff fea3 	bl	80153a0 <zint_mod_small_unsigned>
 801565a:	9007      	str	r0, [sp, #28]

			/*
			 * New value is (x mod q) + q * (s * (xp - xq) mod p)
			 */
			xr = modp_montymul(s, modp_sub(xp, xq, p), p, p0i);
 801565c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801565e:	9907      	ldr	r1, [sp, #28]
 8015660:	9808      	ldr	r0, [sp, #32]
 8015662:	f7ff faed 	bl	8014c40 <modp_sub>
 8015666:	4601      	mov	r1, r0
 8015668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801566a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801566c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801566e:	f7ff faff 	bl	8014c70 <modp_montymul>
 8015672:	9006      	str	r0, [sp, #24]
			zint_add_mul_small(x, tmp, u, xr);
 8015674:	9b06      	ldr	r3, [sp, #24]
 8015676:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015678:	9914      	ldr	r1, [sp, #80]	; 0x50
 801567a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801567c:	f7ff fef8 	bl	8015470 <zint_add_mul_small>
		for (v = 0, x = xx; v < num; v ++, x += xstride) {
 8015680:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015682:	3301      	adds	r3, #1
 8015684:	930d      	str	r3, [sp, #52]	; 0x34
 8015686:	9b03      	ldr	r3, [sp, #12]
 8015688:	009b      	lsls	r3, r3, #2
 801568a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801568c:	4413      	add	r3, r2
 801568e:	930e      	str	r3, [sp, #56]	; 0x38
 8015690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015692:	9b02      	ldr	r3, [sp, #8]
 8015694:	429a      	cmp	r2, r3
 8015696:	d3d2      	bcc.n	801563e <zint_rebuild_CRT+0x5e>
		}

		/*
		 * Update product of primes in tmp[].
		 */
		tmp[u] = zint_mul_small(tmp, u, p);
 8015698:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801569a:	009b      	lsls	r3, r3, #2
 801569c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801569e:	18d4      	adds	r4, r2, r3
 80156a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80156a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80156a4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80156a6:	f7ff fe2b 	bl	8015300 <zint_mul_small>
 80156aa:	4603      	mov	r3, r0
 80156ac:	6023      	str	r3, [r4, #0]
	for (u = 1; u < xlen; u ++) {
 80156ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156b0:	3301      	adds	r3, #1
 80156b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80156b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80156b6:	9b04      	ldr	r3, [sp, #16]
 80156b8:	429a      	cmp	r2, r3
 80156ba:	d39e      	bcc.n	80155fa <zint_rebuild_CRT+0x1a>
	}

	/*
	 * Normalize the reconstructed values around 0.
	 */
	if (normalize_signed) {
 80156bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d015      	beq.n	80156ee <zint_rebuild_CRT+0x10e>
		for (u = 0, x = xx; u < num; u ++, x += xstride) {
 80156c2:	2300      	movs	r3, #0
 80156c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80156c6:	9b05      	ldr	r3, [sp, #20]
 80156c8:	930e      	str	r3, [sp, #56]	; 0x38
 80156ca:	e00c      	b.n	80156e6 <zint_rebuild_CRT+0x106>
			zint_norm_zero(x, tmp, xlen);
 80156cc:	9a04      	ldr	r2, [sp, #16]
 80156ce:	9914      	ldr	r1, [sp, #80]	; 0x50
 80156d0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80156d2:	f7ff ff3d 	bl	8015550 <zint_norm_zero>
		for (u = 0, x = xx; u < num; u ++, x += xstride) {
 80156d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156d8:	3301      	adds	r3, #1
 80156da:	930f      	str	r3, [sp, #60]	; 0x3c
 80156dc:	9b03      	ldr	r3, [sp, #12]
 80156de:	009b      	lsls	r3, r3, #2
 80156e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80156e2:	4413      	add	r3, r2
 80156e4:	930e      	str	r3, [sp, #56]	; 0x38
 80156e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80156e8:	9b02      	ldr	r3, [sp, #8]
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d3ee      	bcc.n	80156cc <zint_rebuild_CRT+0xec>
		}
	}
}
 80156ee:	bf00      	nop
 80156f0:	b010      	add	sp, #64	; 0x40
 80156f2:	bd10      	pop	{r4, pc}
	...

08015700 <zint_negate>:
 * Negate a big integer conditionally: value a is replaced with -a if
 * and only if ctl = 1. Control value ctl must be 0 or 1.
 */
static void
zint_negate(uint32_t *a, size_t len, uint32_t ctl)
{
 8015700:	b088      	sub	sp, #32
 8015702:	9003      	str	r0, [sp, #12]
 8015704:	9102      	str	r1, [sp, #8]
 8015706:	9201      	str	r2, [sp, #4]
	/*
	 * If ctl = 1 then we flip the bits of a by XORing with
	 * 0x7FFFFFFF, and we add 1 to the value. If ctl = 0 then we XOR
	 * with 0 and add 0, which leaves the value unchanged.
	 */
	cc = ctl;
 8015708:	9b01      	ldr	r3, [sp, #4]
 801570a:	9306      	str	r3, [sp, #24]
	m = -ctl >> 1;
 801570c:	9b01      	ldr	r3, [sp, #4]
 801570e:	425b      	negs	r3, r3
 8015710:	085b      	lsrs	r3, r3, #1
 8015712:	9305      	str	r3, [sp, #20]
	for (u = 0; u < len; u ++) {
 8015714:	2300      	movs	r3, #0
 8015716:	9307      	str	r3, [sp, #28]
 8015718:	e019      	b.n	801574e <zint_negate+0x4e>
		uint32_t aw;

		aw = a[u];
 801571a:	9b07      	ldr	r3, [sp, #28]
 801571c:	009b      	lsls	r3, r3, #2
 801571e:	9a03      	ldr	r2, [sp, #12]
 8015720:	4413      	add	r3, r2
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	9304      	str	r3, [sp, #16]
		aw = (aw ^ m) + cc;
 8015726:	9a04      	ldr	r2, [sp, #16]
 8015728:	9b05      	ldr	r3, [sp, #20]
 801572a:	4053      	eors	r3, r2
 801572c:	9a06      	ldr	r2, [sp, #24]
 801572e:	4413      	add	r3, r2
 8015730:	9304      	str	r3, [sp, #16]
		a[u] = aw & 0x7FFFFFFF;
 8015732:	9b07      	ldr	r3, [sp, #28]
 8015734:	009b      	lsls	r3, r3, #2
 8015736:	9a03      	ldr	r2, [sp, #12]
 8015738:	4413      	add	r3, r2
 801573a:	9a04      	ldr	r2, [sp, #16]
 801573c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8015740:	601a      	str	r2, [r3, #0]
		cc = aw >> 31;
 8015742:	9b04      	ldr	r3, [sp, #16]
 8015744:	0fdb      	lsrs	r3, r3, #31
 8015746:	9306      	str	r3, [sp, #24]
	for (u = 0; u < len; u ++) {
 8015748:	9b07      	ldr	r3, [sp, #28]
 801574a:	3301      	adds	r3, #1
 801574c:	9307      	str	r3, [sp, #28]
 801574e:	9a07      	ldr	r2, [sp, #28]
 8015750:	9b02      	ldr	r3, [sp, #8]
 8015752:	429a      	cmp	r2, r3
 8015754:	d3e1      	bcc.n	801571a <zint_negate+0x1a>
	}
}
 8015756:	bf00      	nop
 8015758:	bf00      	nop
 801575a:	b008      	add	sp, #32
 801575c:	4770      	bx	lr
 801575e:	bf00      	nop

08015760 <zint_co_reduce>:
 * Coefficients xa, xb, ya and yb may use the full signed 32-bit range.
 */
static uint32_t
zint_co_reduce(uint32_t *a, uint32_t *b, size_t len,
	int64_t xa, int64_t xb, int64_t ya, int64_t yb)
{
 8015760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015764:	b0a3      	sub	sp, #140	; 0x8c
 8015766:	9013      	str	r0, [sp, #76]	; 0x4c
 8015768:	9112      	str	r1, [sp, #72]	; 0x48
 801576a:	9211      	str	r2, [sp, #68]	; 0x44
	size_t u;
	int64_t cca, ccb;
	uint32_t nega, negb;

	cca = 0;
 801576c:	f04f 0200 	mov.w	r2, #0
 8015770:	f04f 0300 	mov.w	r3, #0
 8015774:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
	ccb = 0;
 8015778:	f04f 0200 	mov.w	r2, #0
 801577c:	f04f 0300 	mov.w	r3, #0
 8015780:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	for (u = 0; u < len; u ++) {
 8015784:	2300      	movs	r3, #0
 8015786:	9321      	str	r3, [sp, #132]	; 0x84
 8015788:	e0b7      	b.n	80158fa <zint_co_reduce+0x19a>
		uint32_t wa, wb;
		uint64_t za, zb;

		wa = a[u];
 801578a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801578c:	009a      	lsls	r2, r3, #2
 801578e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015790:	4413      	add	r3, r2
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	9319      	str	r3, [sp, #100]	; 0x64
		wb = b[u];
 8015796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015798:	009a      	lsls	r2, r3, #2
 801579a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801579c:	4413      	add	r3, r2
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	9318      	str	r3, [sp, #96]	; 0x60
		za = wa * (uint64_t)xa + wb * (uint64_t)xb + (uint64_t)cca;
 80157a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80157a4:	2200      	movs	r2, #0
 80157a6:	9300      	str	r3, [sp, #0]
 80157a8:	9201      	str	r2, [sp, #4]
 80157aa:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 80157ae:	9901      	ldr	r1, [sp, #4]
 80157b0:	fb02 f001 	mul.w	r0, r2, r1
 80157b4:	9900      	ldr	r1, [sp, #0]
 80157b6:	fb01 f103 	mul.w	r1, r1, r3
 80157ba:	4401      	add	r1, r0
 80157bc:	9800      	ldr	r0, [sp, #0]
 80157be:	fba0 8902 	umull	r8, r9, r0, r2
 80157c2:	eb01 0309 	add.w	r3, r1, r9
 80157c6:	4699      	mov	r9, r3
 80157c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80157ca:	2200      	movs	r2, #0
 80157cc:	9302      	str	r3, [sp, #8]
 80157ce:	9203      	str	r2, [sp, #12]
 80157d0:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
 80157d4:	9903      	ldr	r1, [sp, #12]
 80157d6:	fb02 f001 	mul.w	r0, r2, r1
 80157da:	9902      	ldr	r1, [sp, #8]
 80157dc:	fb01 f103 	mul.w	r1, r1, r3
 80157e0:	4401      	add	r1, r0
 80157e2:	9802      	ldr	r0, [sp, #8]
 80157e4:	fba0 3202 	umull	r3, r2, r0, r2
 80157e8:	9205      	str	r2, [sp, #20]
 80157ea:	9304      	str	r3, [sp, #16]
 80157ec:	9b05      	ldr	r3, [sp, #20]
 80157ee:	18cb      	adds	r3, r1, r3
 80157f0:	9305      	str	r3, [sp, #20]
 80157f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80157f6:	4611      	mov	r1, r2
 80157f8:	eb18 0101 	adds.w	r1, r8, r1
 80157fc:	910a      	str	r1, [sp, #40]	; 0x28
 80157fe:	eb49 0303 	adc.w	r3, r9, r3
 8015802:	930b      	str	r3, [sp, #44]	; 0x2c
 8015804:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8015808:	990a      	ldr	r1, [sp, #40]	; 0x28
 801580a:	1889      	adds	r1, r1, r2
 801580c:	910c      	str	r1, [sp, #48]	; 0x30
 801580e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015810:	eb41 0303 	adc.w	r3, r1, r3
 8015814:	930d      	str	r3, [sp, #52]	; 0x34
 8015816:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801581a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		zb = wa * (uint64_t)ya + wb * (uint64_t)yb + (uint64_t)ccb;
 801581e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015820:	2200      	movs	r2, #0
 8015822:	9306      	str	r3, [sp, #24]
 8015824:	9207      	str	r2, [sp, #28]
 8015826:	e9dd 2330 	ldrd	r2, r3, [sp, #192]	; 0xc0
 801582a:	9907      	ldr	r1, [sp, #28]
 801582c:	fb02 f001 	mul.w	r0, r2, r1
 8015830:	9906      	ldr	r1, [sp, #24]
 8015832:	fb01 f103 	mul.w	r1, r1, r3
 8015836:	4401      	add	r1, r0
 8015838:	9806      	ldr	r0, [sp, #24]
 801583a:	fba0 4502 	umull	r4, r5, r0, r2
 801583e:	194b      	adds	r3, r1, r5
 8015840:	461d      	mov	r5, r3
 8015842:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015844:	2200      	movs	r2, #0
 8015846:	9308      	str	r3, [sp, #32]
 8015848:	9209      	str	r2, [sp, #36]	; 0x24
 801584a:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 801584e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015850:	fb02 f001 	mul.w	r0, r2, r1
 8015854:	9908      	ldr	r1, [sp, #32]
 8015856:	fb01 f103 	mul.w	r1, r1, r3
 801585a:	4401      	add	r1, r0
 801585c:	9808      	ldr	r0, [sp, #32]
 801585e:	fba0 6702 	umull	r6, r7, r0, r2
 8015862:	19cb      	adds	r3, r1, r7
 8015864:	461f      	mov	r7, r3
 8015866:	eb14 0a06 	adds.w	sl, r4, r6
 801586a:	eb45 0b07 	adc.w	fp, r5, r7
 801586e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8015872:	eb1a 0102 	adds.w	r1, sl, r2
 8015876:	910e      	str	r1, [sp, #56]	; 0x38
 8015878:	eb4b 0303 	adc.w	r3, fp, r3
 801587c:	930f      	str	r3, [sp, #60]	; 0x3c
 801587e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8015882:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		if (u > 0) {
 8015886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015888:	2b00      	cmp	r3, #0
 801588a:	d019      	beq.n	80158c0 <zint_co_reduce+0x160>
			a[u - 1] = (uint32_t)za & 0x7FFFFFFF;
 801588c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8015890:	4611      	mov	r1, r2
 8015892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015894:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015898:	3b01      	subs	r3, #1
 801589a:	009a      	lsls	r2, r3, #2
 801589c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801589e:	441a      	add	r2, r3
 80158a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80158a4:	6013      	str	r3, [r2, #0]
			b[u - 1] = (uint32_t)zb & 0x7FFFFFFF;
 80158a6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80158aa:	4611      	mov	r1, r2
 80158ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80158b2:	3b01      	subs	r3, #1
 80158b4:	009a      	lsls	r2, r3, #2
 80158b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80158b8:	441a      	add	r2, r3
 80158ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80158be:	6013      	str	r3, [r2, #0]
		}
		cca = *(int64_t *)&za >> 31;
 80158c0:	ab16      	add	r3, sp, #88	; 0x58
 80158c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c6:	f04f 0000 	mov.w	r0, #0
 80158ca:	f04f 0100 	mov.w	r1, #0
 80158ce:	0fd0      	lsrs	r0, r2, #31
 80158d0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80158d4:	17d9      	asrs	r1, r3, #31
 80158d6:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
		ccb = *(int64_t *)&zb >> 31;
 80158da:	ab14      	add	r3, sp, #80	; 0x50
 80158dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158e0:	f04f 0000 	mov.w	r0, #0
 80158e4:	f04f 0100 	mov.w	r1, #0
 80158e8:	0fd0      	lsrs	r0, r2, #31
 80158ea:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80158ee:	17d9      	asrs	r1, r3, #31
 80158f0:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
	for (u = 0; u < len; u ++) {
 80158f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158f6:	3301      	adds	r3, #1
 80158f8:	9321      	str	r3, [sp, #132]	; 0x84
 80158fa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80158fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80158fe:	429a      	cmp	r2, r3
 8015900:	f4ff af43 	bcc.w	801578a <zint_co_reduce+0x2a>
	}
	a[len - 1] = (uint32_t)cca;
 8015904:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015906:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801590a:	3b01      	subs	r3, #1
 801590c:	009b      	lsls	r3, r3, #2
 801590e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015910:	4413      	add	r3, r2
 8015912:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015914:	601a      	str	r2, [r3, #0]
	b[len - 1] = (uint32_t)ccb;
 8015916:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801591c:	3b01      	subs	r3, #1
 801591e:	009b      	lsls	r3, r3, #2
 8015920:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015922:	4413      	add	r3, r2
 8015924:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015926:	601a      	str	r2, [r3, #0]

	nega = (uint32_t)((uint64_t)cca >> 63);
 8015928:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 801592c:	f04f 0200 	mov.w	r2, #0
 8015930:	f04f 0300 	mov.w	r3, #0
 8015934:	0fca      	lsrs	r2, r1, #31
 8015936:	2300      	movs	r3, #0
 8015938:	4613      	mov	r3, r2
 801593a:	931b      	str	r3, [sp, #108]	; 0x6c
	negb = (uint32_t)((uint64_t)ccb >> 63);
 801593c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8015940:	f04f 0200 	mov.w	r2, #0
 8015944:	f04f 0300 	mov.w	r3, #0
 8015948:	0fca      	lsrs	r2, r1, #31
 801594a:	2300      	movs	r3, #0
 801594c:	4613      	mov	r3, r2
 801594e:	931a      	str	r3, [sp, #104]	; 0x68
	zint_negate(a, len, nega);
 8015950:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015952:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015954:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015956:	f7ff fed3 	bl	8015700 <zint_negate>
	zint_negate(b, len, negb);
 801595a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801595c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801595e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015960:	f7ff fece 	bl	8015700 <zint_negate>
	return nega | (negb << 1);
 8015964:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015966:	005a      	lsls	r2, r3, #1
 8015968:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801596a:	4313      	orrs	r3, r2
}
 801596c:	4618      	mov	r0, r3
 801596e:	b023      	add	sp, #140	; 0x8c
 8015970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015980 <zint_finish_mod>:
 *
 * Modulus m must be odd.
 */
static void
zint_finish_mod(uint32_t *a, size_t len, const uint32_t *m, uint32_t neg)
{
 8015980:	b08a      	sub	sp, #40	; 0x28
 8015982:	9003      	str	r0, [sp, #12]
 8015984:	9102      	str	r1, [sp, #8]
 8015986:	9201      	str	r2, [sp, #4]
 8015988:	9300      	str	r3, [sp, #0]
	/*
	 * First pass: compare a (assumed nonnegative) with m. Note that
	 * if the top word uses 32 bits, subtracting m must yield a
	 * value less than 2^31 since a < 2*m.
	 */
	cc = 0;
 801598a:	2300      	movs	r3, #0
 801598c:	9308      	str	r3, [sp, #32]
	for (u = 0; u < len; u ++) {
 801598e:	2300      	movs	r3, #0
 8015990:	9309      	str	r3, [sp, #36]	; 0x24
 8015992:	e011      	b.n	80159b8 <zint_finish_mod+0x38>
		cc = (a[u] - m[u] - cc) >> 31;
 8015994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015996:	009b      	lsls	r3, r3, #2
 8015998:	9a03      	ldr	r2, [sp, #12]
 801599a:	4413      	add	r3, r2
 801599c:	681a      	ldr	r2, [r3, #0]
 801599e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159a0:	009b      	lsls	r3, r3, #2
 80159a2:	9901      	ldr	r1, [sp, #4]
 80159a4:	440b      	add	r3, r1
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	1ad2      	subs	r2, r2, r3
 80159aa:	9b08      	ldr	r3, [sp, #32]
 80159ac:	1ad3      	subs	r3, r2, r3
 80159ae:	0fdb      	lsrs	r3, r3, #31
 80159b0:	9308      	str	r3, [sp, #32]
	for (u = 0; u < len; u ++) {
 80159b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159b4:	3301      	adds	r3, #1
 80159b6:	9309      	str	r3, [sp, #36]	; 0x24
 80159b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159ba:	9b02      	ldr	r3, [sp, #8]
 80159bc:	429a      	cmp	r2, r3
 80159be:	d3e9      	bcc.n	8015994 <zint_finish_mod+0x14>
	 *
	 * In the loop below, we conditionally subtract either m or -m
	 * from a. Word xm is a word of m (if neg = 0) or -m (if neg = 1);
	 * but if neg = 0 and cc = 1, then ym = 0 and it forces mw to 0.
	 */
	xm = -neg >> 1;
 80159c0:	9b00      	ldr	r3, [sp, #0]
 80159c2:	425b      	negs	r3, r3
 80159c4:	085b      	lsrs	r3, r3, #1
 80159c6:	9307      	str	r3, [sp, #28]
	ym = -(neg | (1 - cc));
 80159c8:	9b08      	ldr	r3, [sp, #32]
 80159ca:	f1c3 0201 	rsb	r2, r3, #1
 80159ce:	9b00      	ldr	r3, [sp, #0]
 80159d0:	4313      	orrs	r3, r2
 80159d2:	425b      	negs	r3, r3
 80159d4:	9306      	str	r3, [sp, #24]
	cc = neg;
 80159d6:	9b00      	ldr	r3, [sp, #0]
 80159d8:	9308      	str	r3, [sp, #32]
	for (u = 0; u < len; u ++) {
 80159da:	2300      	movs	r3, #0
 80159dc:	9309      	str	r3, [sp, #36]	; 0x24
 80159de:	e023      	b.n	8015a28 <zint_finish_mod+0xa8>
		uint32_t aw, mw;

		aw = a[u];
 80159e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159e2:	009b      	lsls	r3, r3, #2
 80159e4:	9a03      	ldr	r2, [sp, #12]
 80159e6:	4413      	add	r3, r2
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	9305      	str	r3, [sp, #20]
		mw = (m[u] ^ xm) & ym;
 80159ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159ee:	009b      	lsls	r3, r3, #2
 80159f0:	9a01      	ldr	r2, [sp, #4]
 80159f2:	4413      	add	r3, r2
 80159f4:	681a      	ldr	r2, [r3, #0]
 80159f6:	9b07      	ldr	r3, [sp, #28]
 80159f8:	4053      	eors	r3, r2
 80159fa:	9a06      	ldr	r2, [sp, #24]
 80159fc:	4013      	ands	r3, r2
 80159fe:	9304      	str	r3, [sp, #16]
		aw = aw - mw - cc;
 8015a00:	9a05      	ldr	r2, [sp, #20]
 8015a02:	9b04      	ldr	r3, [sp, #16]
 8015a04:	1ad2      	subs	r2, r2, r3
 8015a06:	9b08      	ldr	r3, [sp, #32]
 8015a08:	1ad3      	subs	r3, r2, r3
 8015a0a:	9305      	str	r3, [sp, #20]
		a[u] = aw & 0x7FFFFFFF;
 8015a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a0e:	009b      	lsls	r3, r3, #2
 8015a10:	9a03      	ldr	r2, [sp, #12]
 8015a12:	4413      	add	r3, r2
 8015a14:	9a05      	ldr	r2, [sp, #20]
 8015a16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8015a1a:	601a      	str	r2, [r3, #0]
		cc = aw >> 31;
 8015a1c:	9b05      	ldr	r3, [sp, #20]
 8015a1e:	0fdb      	lsrs	r3, r3, #31
 8015a20:	9308      	str	r3, [sp, #32]
	for (u = 0; u < len; u ++) {
 8015a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a24:	3301      	adds	r3, #1
 8015a26:	9309      	str	r3, [sp, #36]	; 0x24
 8015a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a2a:	9b02      	ldr	r3, [sp, #8]
 8015a2c:	429a      	cmp	r2, r3
 8015a2e:	d3d7      	bcc.n	80159e0 <zint_finish_mod+0x60>
	}
}
 8015a30:	bf00      	nop
 8015a32:	bf00      	nop
 8015a34:	b00a      	add	sp, #40	; 0x28
 8015a36:	4770      	bx	lr
	...

08015a40 <zint_co_reduce_mod>:
 * (a*ya+b*yb)/(2^31) mod m. Modulus m must be odd; m0i = -1/m[0] mod 2^31.
 */
static void
zint_co_reduce_mod(uint32_t *a, uint32_t *b, const uint32_t *m, size_t len,
	uint32_t m0i, int64_t xa, int64_t xb, int64_t ya, int64_t yb)
{
 8015a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a44:	b0b3      	sub	sp, #204	; 0xcc
 8015a46:	9023      	str	r0, [sp, #140]	; 0x8c
 8015a48:	9122      	str	r1, [sp, #136]	; 0x88
 8015a4a:	9221      	str	r2, [sp, #132]	; 0x84
 8015a4c:	9320      	str	r3, [sp, #128]	; 0x80
	uint32_t fa, fb;

	/*
	 * These are actually four combined Montgomery multiplications.
	 */
	cca = 0;
 8015a4e:	f04f 0200 	mov.w	r2, #0
 8015a52:	f04f 0300 	mov.w	r3, #0
 8015a56:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
	ccb = 0;
 8015a5a:	f04f 0200 	mov.w	r2, #0
 8015a5e:	f04f 0300 	mov.w	r3, #0
 8015a62:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	fa = ((a[0] * (uint32_t)xa + b[0] * (uint32_t)xb) * m0i) & 0x7FFFFFFF;
 8015a66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015a68:	681a      	ldr	r2, [r3, #0]
 8015a6a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8015a6c:	fb03 f102 	mul.w	r1, r3, r2
 8015a70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015a72:	681a      	ldr	r2, [r3, #0]
 8015a74:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8015a76:	fb02 f303 	mul.w	r3, r2, r3
 8015a7a:	18ca      	adds	r2, r1, r3
 8015a7c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8015a7e:	fb02 f303 	mul.w	r3, r2, r3
 8015a82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015a86:	932b      	str	r3, [sp, #172]	; 0xac
	fb = ((a[0] * (uint32_t)ya + b[0] * (uint32_t)yb) * m0i) & 0x7FFFFFFF;
 8015a88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015a8a:	681a      	ldr	r2, [r3, #0]
 8015a8c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8015a8e:	fb03 f102 	mul.w	r1, r3, r2
 8015a92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015a94:	681a      	ldr	r2, [r3, #0]
 8015a96:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8015a98:	fb02 f303 	mul.w	r3, r2, r3
 8015a9c:	18ca      	adds	r2, r1, r3
 8015a9e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8015aa0:	fb02 f303 	mul.w	r3, r2, r3
 8015aa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015aa8:	932a      	str	r3, [sp, #168]	; 0xa8
	for (u = 0; u < len; u ++) {
 8015aaa:	2300      	movs	r3, #0
 8015aac:	9331      	str	r3, [sp, #196]	; 0xc4
 8015aae:	e10a      	b.n	8015cc6 <zint_co_reduce_mod+0x286>
		uint32_t wa, wb;
		uint64_t za, zb;

		wa = a[u];
 8015ab0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015ab2:	009a      	lsls	r2, r3, #2
 8015ab4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015ab6:	4413      	add	r3, r2
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	9329      	str	r3, [sp, #164]	; 0xa4
		wb = b[u];
 8015abc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015abe:	009a      	lsls	r2, r3, #2
 8015ac0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015ac2:	4413      	add	r3, r2
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	9328      	str	r3, [sp, #160]	; 0xa0
		za = wa * (uint64_t)xa + wb * (uint64_t)xb
 8015ac8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015aca:	2200      	movs	r2, #0
 8015acc:	9300      	str	r3, [sp, #0]
 8015ace:	9201      	str	r2, [sp, #4]
 8015ad0:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 8015ad4:	9901      	ldr	r1, [sp, #4]
 8015ad6:	fb02 f001 	mul.w	r0, r2, r1
 8015ada:	9900      	ldr	r1, [sp, #0]
 8015adc:	fb01 f103 	mul.w	r1, r1, r3
 8015ae0:	4401      	add	r1, r0
 8015ae2:	9800      	ldr	r0, [sp, #0]
 8015ae4:	fba0 ab02 	umull	sl, fp, r0, r2
 8015ae8:	eb01 030b 	add.w	r3, r1, fp
 8015aec:	469b      	mov	fp, r3
 8015aee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015af0:	2200      	movs	r2, #0
 8015af2:	9302      	str	r3, [sp, #8]
 8015af4:	9203      	str	r2, [sp, #12]
 8015af6:	e9dd 2340 	ldrd	r2, r3, [sp, #256]	; 0x100
 8015afa:	9903      	ldr	r1, [sp, #12]
 8015afc:	fb02 f001 	mul.w	r0, r2, r1
 8015b00:	9902      	ldr	r1, [sp, #8]
 8015b02:	fb01 f103 	mul.w	r1, r1, r3
 8015b06:	4401      	add	r1, r0
 8015b08:	9802      	ldr	r0, [sp, #8]
 8015b0a:	fba0 3202 	umull	r3, r2, r0, r2
 8015b0e:	9205      	str	r2, [sp, #20]
 8015b10:	9304      	str	r3, [sp, #16]
 8015b12:	9b05      	ldr	r3, [sp, #20]
 8015b14:	18cb      	adds	r3, r1, r3
 8015b16:	9305      	str	r3, [sp, #20]
 8015b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015b1c:	4611      	mov	r1, r2
 8015b1e:	eb1a 0101 	adds.w	r1, sl, r1
 8015b22:	9110      	str	r1, [sp, #64]	; 0x40
 8015b24:	eb4b 0303 	adc.w	r3, fp, r3
 8015b28:	9311      	str	r3, [sp, #68]	; 0x44
			+ m[u] * (uint64_t)fa + (uint64_t)cca;
 8015b2a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015b2c:	009a      	lsls	r2, r3, #2
 8015b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b30:	4413      	add	r3, r2
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	2200      	movs	r2, #0
 8015b36:	9316      	str	r3, [sp, #88]	; 0x58
 8015b38:	9217      	str	r2, [sp, #92]	; 0x5c
 8015b3a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	9306      	str	r3, [sp, #24]
 8015b40:	9207      	str	r2, [sp, #28]
 8015b42:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8015b46:	460b      	mov	r3, r1
 8015b48:	9a06      	ldr	r2, [sp, #24]
 8015b4a:	fb02 f203 	mul.w	r2, r2, r3
 8015b4e:	9b07      	ldr	r3, [sp, #28]
 8015b50:	4684      	mov	ip, r0
 8015b52:	fb0c f303 	mul.w	r3, ip, r3
 8015b56:	4413      	add	r3, r2
 8015b58:	4602      	mov	r2, r0
 8015b5a:	9906      	ldr	r1, [sp, #24]
 8015b5c:	fba2 2101 	umull	r2, r1, r2, r1
 8015b60:	9109      	str	r1, [sp, #36]	; 0x24
 8015b62:	9208      	str	r2, [sp, #32]
 8015b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b66:	4413      	add	r3, r2
 8015b68:	9309      	str	r3, [sp, #36]	; 0x24
 8015b6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015b70:	4602      	mov	r2, r0
 8015b72:	189b      	adds	r3, r3, r2
 8015b74:	9312      	str	r3, [sp, #72]	; 0x48
 8015b76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015b78:	460a      	mov	r2, r1
 8015b7a:	4153      	adcs	r3, r2
 8015b7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8015b7e:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
 8015b82:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015b84:	1889      	adds	r1, r1, r2
 8015b86:	9118      	str	r1, [sp, #96]	; 0x60
 8015b88:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015b8a:	eb41 0303 	adc.w	r3, r1, r3
 8015b8e:	9319      	str	r3, [sp, #100]	; 0x64
		za = wa * (uint64_t)xa + wb * (uint64_t)xb
 8015b90:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8015b94:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
		zb = wa * (uint64_t)ya + wb * (uint64_t)yb
 8015b98:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8015b9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8015ba0:	e9dd 2342 	ldrd	r2, r3, [sp, #264]	; 0x108
 8015ba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ba6:	fb02 f001 	mul.w	r0, r2, r1
 8015baa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015bac:	fb01 f103 	mul.w	r1, r1, r3
 8015bb0:	4401      	add	r1, r0
 8015bb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015bb4:	fba0 4502 	umull	r4, r5, r0, r2
 8015bb8:	194b      	adds	r3, r1, r5
 8015bba:	461d      	mov	r5, r3
 8015bbc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	930c      	str	r3, [sp, #48]	; 0x30
 8015bc2:	920d      	str	r2, [sp, #52]	; 0x34
 8015bc4:	e9dd 2344 	ldrd	r2, r3, [sp, #272]	; 0x110
 8015bc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015bca:	fb02 f001 	mul.w	r0, r2, r1
 8015bce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015bd0:	fb01 f103 	mul.w	r1, r1, r3
 8015bd4:	4401      	add	r1, r0
 8015bd6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015bd8:	fba0 8902 	umull	r8, r9, r0, r2
 8015bdc:	eb01 0309 	add.w	r3, r1, r9
 8015be0:	4699      	mov	r9, r3
 8015be2:	eb14 0308 	adds.w	r3, r4, r8
 8015be6:	931a      	str	r3, [sp, #104]	; 0x68
 8015be8:	eb45 0309 	adc.w	r3, r5, r9
 8015bec:	931b      	str	r3, [sp, #108]	; 0x6c
			+ m[u] * (uint64_t)fb + (uint64_t)ccb;
 8015bee:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015bf0:	009a      	lsls	r2, r3, #2
 8015bf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015bf4:	4413      	add	r3, r2
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	2200      	movs	r2, #0
 8015bfa:	931c      	str	r3, [sp, #112]	; 0x70
 8015bfc:	921d      	str	r2, [sp, #116]	; 0x74
 8015bfe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015c00:	2200      	movs	r2, #0
 8015c02:	930e      	str	r3, [sp, #56]	; 0x38
 8015c04:	920f      	str	r2, [sp, #60]	; 0x3c
 8015c06:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8015c0a:	460b      	mov	r3, r1
 8015c0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c0e:	fb02 f203 	mul.w	r2, r2, r3
 8015c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c14:	4684      	mov	ip, r0
 8015c16:	fb0c f303 	mul.w	r3, ip, r3
 8015c1a:	4413      	add	r3, r2
 8015c1c:	4602      	mov	r2, r0
 8015c1e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015c20:	fba2 6701 	umull	r6, r7, r2, r1
 8015c24:	443b      	add	r3, r7
 8015c26:	461f      	mov	r7, r3
 8015c28:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 8015c2c:	460b      	mov	r3, r1
 8015c2e:	199b      	adds	r3, r3, r6
 8015c30:	9314      	str	r3, [sp, #80]	; 0x50
 8015c32:	4613      	mov	r3, r2
 8015c34:	417b      	adcs	r3, r7
 8015c36:	9315      	str	r3, [sp, #84]	; 0x54
 8015c38:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 8015c3c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015c3e:	1889      	adds	r1, r1, r2
 8015c40:	911e      	str	r1, [sp, #120]	; 0x78
 8015c42:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015c44:	eb41 0303 	adc.w	r3, r1, r3
 8015c48:	931f      	str	r3, [sp, #124]	; 0x7c
		zb = wa * (uint64_t)ya + wb * (uint64_t)yb
 8015c4a:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8015c4e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
		if (u > 0) {
 8015c52:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d019      	beq.n	8015c8c <zint_co_reduce_mod+0x24c>
			a[u - 1] = (uint32_t)za & 0x7FFFFFFF;
 8015c58:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8015c5c:	4611      	mov	r1, r2
 8015c5e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015c60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015c64:	3b01      	subs	r3, #1
 8015c66:	009a      	lsls	r2, r3, #2
 8015c68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015c6a:	441a      	add	r2, r3
 8015c6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015c70:	6013      	str	r3, [r2, #0]
			b[u - 1] = (uint32_t)zb & 0x7FFFFFFF;
 8015c72:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8015c76:	4611      	mov	r1, r2
 8015c78:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015c7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015c7e:	3b01      	subs	r3, #1
 8015c80:	009a      	lsls	r2, r3, #2
 8015c82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015c84:	441a      	add	r2, r3
 8015c86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015c8a:	6013      	str	r3, [r2, #0]
		}
		cca = *(int64_t *)&za >> 31;
 8015c8c:	ab26      	add	r3, sp, #152	; 0x98
 8015c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c92:	f04f 0000 	mov.w	r0, #0
 8015c96:	f04f 0100 	mov.w	r1, #0
 8015c9a:	0fd0      	lsrs	r0, r2, #31
 8015c9c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015ca0:	17d9      	asrs	r1, r3, #31
 8015ca2:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
		ccb = *(int64_t *)&zb >> 31;
 8015ca6:	ab24      	add	r3, sp, #144	; 0x90
 8015ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cac:	f04f 0000 	mov.w	r0, #0
 8015cb0:	f04f 0100 	mov.w	r1, #0
 8015cb4:	0fd0      	lsrs	r0, r2, #31
 8015cb6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015cba:	17d9      	asrs	r1, r3, #31
 8015cbc:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
	for (u = 0; u < len; u ++) {
 8015cc0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	9331      	str	r3, [sp, #196]	; 0xc4
 8015cc6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8015cc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	f4ff aef0 	bcc.w	8015ab0 <zint_co_reduce_mod+0x70>
	}
	a[len - 1] = (uint32_t)cca;
 8015cd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015cd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015cd6:	3b01      	subs	r3, #1
 8015cd8:	009b      	lsls	r3, r3, #2
 8015cda:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8015cdc:	4413      	add	r3, r2
 8015cde:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015ce0:	601a      	str	r2, [r3, #0]
	b[len - 1] = (uint32_t)ccb;
 8015ce2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015ce4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015ce8:	3b01      	subs	r3, #1
 8015cea:	009b      	lsls	r3, r3, #2
 8015cec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015cee:	4413      	add	r3, r2
 8015cf0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8015cf2:	601a      	str	r2, [r3, #0]
	 *   -m <= b < 2*m
	 * (this is a case of Montgomery reduction)
	 * The top words of 'a' and 'b' may have a 32-th bit set.
	 * We want to add or subtract the modulus, as required.
	 */
	zint_finish_mod(a, len, m, (uint32_t)((uint64_t)cca >> 63));
 8015cf4:	e9dd 012e 	ldrd	r0, r1, [sp, #184]	; 0xb8
 8015cf8:	f04f 0200 	mov.w	r2, #0
 8015cfc:	f04f 0300 	mov.w	r3, #0
 8015d00:	0fca      	lsrs	r2, r1, #31
 8015d02:	2300      	movs	r3, #0
 8015d04:	4613      	mov	r3, r2
 8015d06:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015d08:	9920      	ldr	r1, [sp, #128]	; 0x80
 8015d0a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8015d0c:	f7ff fe38 	bl	8015980 <zint_finish_mod>
	zint_finish_mod(b, len, m, (uint32_t)((uint64_t)ccb >> 63));
 8015d10:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 8015d14:	f04f 0200 	mov.w	r2, #0
 8015d18:	f04f 0300 	mov.w	r3, #0
 8015d1c:	0fca      	lsrs	r2, r1, #31
 8015d1e:	2300      	movs	r3, #0
 8015d20:	4613      	mov	r3, r2
 8015d22:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015d24:	9920      	ldr	r1, [sp, #128]	; 0x80
 8015d26:	9822      	ldr	r0, [sp, #136]	; 0x88
 8015d28:	f7ff fe2a 	bl	8015980 <zint_finish_mod>
}
 8015d2c:	bf00      	nop
 8015d2e:	b033      	add	sp, #204	; 0xcc
 8015d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015d40 <zint_bezout>:
 */
static int
zint_bezout(uint32_t *restrict u, uint32_t *restrict v,
	const uint32_t *restrict x, const uint32_t *restrict y,
	size_t len, uint32_t *restrict tmp)
{
 8015d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d44:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 8015d48:	90af      	str	r0, [sp, #700]	; 0x2bc
 8015d4a:	91ae      	str	r1, [sp, #696]	; 0x2b8
 8015d4c:	92ad      	str	r2, [sp, #692]	; 0x2b4
 8015d4e:	93ac      	str	r3, [sp, #688]	; 0x2b0
	uint32_t *u0, *u1, *v0, *v1, *a, *b;
	uint32_t x0i, y0i;
	uint32_t num, rc;
	size_t j;

	if (len == 0) {
 8015d50:	9be6      	ldr	r3, [sp, #920]	; 0x398
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d102      	bne.n	8015d5c <zint_bezout+0x1c>
		return 0;
 8015d56:	2300      	movs	r3, #0
 8015d58:	f000 bcc7 	b.w	80166ea <zint_bezout+0x9aa>

	/*
	 * u0 and v0 are the u and v result buffers; the four other
	 * values (u1, v1, a and b) are taken from tmp[].
	 */
	u0 = u;
 8015d5c:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 8015d5e:	93c2      	str	r3, [sp, #776]	; 0x308
	v0 = v;
 8015d60:	9bae      	ldr	r3, [sp, #696]	; 0x2b8
 8015d62:	93c1      	str	r3, [sp, #772]	; 0x304
	u1 = tmp;
 8015d64:	9be7      	ldr	r3, [sp, #924]	; 0x39c
 8015d66:	93c0      	str	r3, [sp, #768]	; 0x300
	v1 = u1 + len;
 8015d68:	9be6      	ldr	r3, [sp, #920]	; 0x398
 8015d6a:	009a      	lsls	r2, r3, #2
 8015d6c:	9bc0      	ldr	r3, [sp, #768]	; 0x300
 8015d6e:	4413      	add	r3, r2
 8015d70:	93bf      	str	r3, [sp, #764]	; 0x2fc
	a = v1 + len;
 8015d72:	9be6      	ldr	r3, [sp, #920]	; 0x398
 8015d74:	009a      	lsls	r2, r3, #2
 8015d76:	9bbf      	ldr	r3, [sp, #764]	; 0x2fc
 8015d78:	4413      	add	r3, r2
 8015d7a:	93be      	str	r3, [sp, #760]	; 0x2f8
	b = a + len;
 8015d7c:	9be6      	ldr	r3, [sp, #920]	; 0x398
 8015d7e:	009a      	lsls	r2, r3, #2
 8015d80:	9bbe      	ldr	r3, [sp, #760]	; 0x2f8
 8015d82:	4413      	add	r3, r2
 8015d84:	93bd      	str	r3, [sp, #756]	; 0x2f4

	/*
	 * We'll need the Montgomery reduction coefficients.
	 */
	x0i = modp_ninv31(x[0]);
 8015d86:	9bad      	ldr	r3, [sp, #692]	; 0x2b4
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f7fe ff00 	bl	8014b90 <modp_ninv31>
 8015d90:	90bc      	str	r0, [sp, #752]	; 0x2f0
	y0i = modp_ninv31(y[0]);
 8015d92:	9bac      	ldr	r3, [sp, #688]	; 0x2b0
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7fe fefa 	bl	8014b90 <modp_ninv31>
 8015d9c:	90bb      	str	r0, [sp, #748]	; 0x2ec
	 * Initialize a, b, u0, u1, v0 and v1.
	 *  a = x   u0 = 1   v0 = 0
	 *  b = y   u1 = y   v1 = x-1
	 * Note that x is odd, so computing x-1 is easy.
	 */
	memcpy(a, x, len * sizeof *x);
 8015d9e:	9be6      	ldr	r3, [sp, #920]	; 0x398
 8015da0:	009b      	lsls	r3, r3, #2
 8015da2:	461a      	mov	r2, r3
 8015da4:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
 8015da6:	98be      	ldr	r0, [sp, #760]	; 0x2f8
 8015da8:	f006 fc46 	bl	801c638 <memcpy>
	memcpy(b, y, len * sizeof *y);
 8015dac:	9be6      	ldr	r3, [sp, #920]	; 0x398
 8015dae:	009b      	lsls	r3, r3, #2
 8015db0:	461a      	mov	r2, r3
 8015db2:	99ac      	ldr	r1, [sp, #688]	; 0x2b0
 8015db4:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
 8015db6:	f006 fc3f 	bl	801c638 <memcpy>
	u0[0] = 1;
 8015dba:	9ac2      	ldr	r2, [sp, #776]	; 0x308
 8015dbc:	2301      	movs	r3, #1
 8015dbe:	6013      	str	r3, [r2, #0]
	memset(u0 + 1, 0, (len - 1) * sizeof *u0);
 8015dc0:	9bc2      	ldr	r3, [sp, #776]	; 0x308
 8015dc2:	1d18      	adds	r0, r3, #4
 8015dc4:	9be6      	ldr	r3, [sp, #920]	; 0x398
 8015dc6:	3b01      	subs	r3, #1
 8015dc8:	009b      	lsls	r3, r3, #2
 8015dca:	461a      	mov	r2, r3
 8015dcc:	2100      	movs	r1, #0
 8015dce:	f006 fbe7 	bl	801c5a0 <memset>
	memset(v0, 0, len * sizeof *v0);
 8015dd2:	9be6      	ldr	r3, [sp, #920]	; 0x398
 8015dd4:	009b      	lsls	r3, r3, #2
 8015dd6:	461a      	mov	r2, r3
 8015dd8:	2100      	movs	r1, #0
 8015dda:	98c1      	ldr	r0, [sp, #772]	; 0x304
 8015ddc:	f006 fbe0 	bl	801c5a0 <memset>
	memcpy(u1, y, len * sizeof *u1);
 8015de0:	9be6      	ldr	r3, [sp, #920]	; 0x398
 8015de2:	009b      	lsls	r3, r3, #2
 8015de4:	461a      	mov	r2, r3
 8015de6:	99ac      	ldr	r1, [sp, #688]	; 0x2b0
 8015de8:	98c0      	ldr	r0, [sp, #768]	; 0x300
 8015dea:	f006 fc25 	bl	801c638 <memcpy>
	memcpy(v1, x, len * sizeof *v1);
 8015dee:	9be6      	ldr	r3, [sp, #920]	; 0x398
 8015df0:	009b      	lsls	r3, r3, #2
 8015df2:	461a      	mov	r2, r3
 8015df4:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
 8015df6:	98bf      	ldr	r0, [sp, #764]	; 0x2fc
 8015df8:	f006 fc1e 	bl	801c638 <memcpy>
	v1[0] --;
 8015dfc:	9bbf      	ldr	r3, [sp, #764]	; 0x2fc
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	1e5a      	subs	r2, r3, #1
 8015e02:	9bbf      	ldr	r3, [sp, #764]	; 0x2fc
 8015e04:	601a      	str	r2, [r3, #0]

	/*
	 * Each input operand may be as large as 31*len bits, and we
	 * reduce the total length by at least 30 bits at each iteration.
	 */
	for (num = 62 * (uint32_t)len + 30; num >= 30; num -= 30) {
 8015e06:	9ae6      	ldr	r2, [sp, #920]	; 0x398
 8015e08:	4613      	mov	r3, r2
 8015e0a:	015b      	lsls	r3, r3, #5
 8015e0c:	1a9b      	subs	r3, r3, r2
 8015e0e:	005b      	lsls	r3, r3, #1
 8015e10:	331e      	adds	r3, #30
 8015e12:	93db      	str	r3, [sp, #876]	; 0x36c
 8015e14:	f000 bc42 	b.w	801669c <zint_bezout+0x95c>
		 * index >= 1 such that a[j] != 0 or b[j] != 0, then we
		 * want (a[j] << 31) + a[j-1] and (b[j] << 31) + b[j-1].
		 * If a and b are down to one word each, then we use
		 * a[0] and b[0].
		 */
		c0 = (uint32_t)-1;
 8015e18:	f04f 33ff 	mov.w	r3, #4294967295
 8015e1c:	93d8      	str	r3, [sp, #864]	; 0x360
		c1 = (uint32_t)-1;
 8015e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8015e22:	93d7      	str	r3, [sp, #860]	; 0x35c
		a0 = 0;
 8015e24:	2300      	movs	r3, #0
 8015e26:	93d6      	str	r3, [sp, #856]	; 0x358
		a1 = 0;
 8015e28:	2300      	movs	r3, #0
 8015e2a:	93d5      	str	r3, [sp, #852]	; 0x354
		b0 = 0;
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	93d4      	str	r3, [sp, #848]	; 0x350
		b1 = 0;
 8015e30:	2300      	movs	r3, #0
 8015e32:	93d3      	str	r3, [sp, #844]	; 0x34c
		j = len;
 8015e34:	9be6      	ldr	r3, [sp, #920]	; 0x398
 8015e36:	93d9      	str	r3, [sp, #868]	; 0x364
		while (j -- > 0) {
 8015e38:	e038      	b.n	8015eac <zint_bezout+0x16c>
			uint32_t aw, bw;

			aw = a[j];
 8015e3a:	9bd9      	ldr	r3, [sp, #868]	; 0x364
 8015e3c:	009a      	lsls	r2, r3, #2
 8015e3e:	9bbe      	ldr	r3, [sp, #760]	; 0x2f8
 8015e40:	4413      	add	r3, r2
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	93b1      	str	r3, [sp, #708]	; 0x2c4
			bw = b[j];
 8015e46:	9bd9      	ldr	r3, [sp, #868]	; 0x364
 8015e48:	009a      	lsls	r2, r3, #2
 8015e4a:	9bbd      	ldr	r3, [sp, #756]	; 0x2f4
 8015e4c:	4413      	add	r3, r2
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	93b0      	str	r3, [sp, #704]	; 0x2c0
			a0 ^= (a0 ^ aw) & c0;
 8015e52:	9ad6      	ldr	r2, [sp, #856]	; 0x358
 8015e54:	9bb1      	ldr	r3, [sp, #708]	; 0x2c4
 8015e56:	405a      	eors	r2, r3
 8015e58:	9bd8      	ldr	r3, [sp, #864]	; 0x360
 8015e5a:	401a      	ands	r2, r3
 8015e5c:	9bd6      	ldr	r3, [sp, #856]	; 0x358
 8015e5e:	4053      	eors	r3, r2
 8015e60:	93d6      	str	r3, [sp, #856]	; 0x358
			a1 ^= (a1 ^ aw) & c1;
 8015e62:	9ad5      	ldr	r2, [sp, #852]	; 0x354
 8015e64:	9bb1      	ldr	r3, [sp, #708]	; 0x2c4
 8015e66:	405a      	eors	r2, r3
 8015e68:	9bd7      	ldr	r3, [sp, #860]	; 0x35c
 8015e6a:	401a      	ands	r2, r3
 8015e6c:	9bd5      	ldr	r3, [sp, #852]	; 0x354
 8015e6e:	4053      	eors	r3, r2
 8015e70:	93d5      	str	r3, [sp, #852]	; 0x354
			b0 ^= (b0 ^ bw) & c0;
 8015e72:	9ad4      	ldr	r2, [sp, #848]	; 0x350
 8015e74:	9bb0      	ldr	r3, [sp, #704]	; 0x2c0
 8015e76:	405a      	eors	r2, r3
 8015e78:	9bd8      	ldr	r3, [sp, #864]	; 0x360
 8015e7a:	401a      	ands	r2, r3
 8015e7c:	9bd4      	ldr	r3, [sp, #848]	; 0x350
 8015e7e:	4053      	eors	r3, r2
 8015e80:	93d4      	str	r3, [sp, #848]	; 0x350
			b1 ^= (b1 ^ bw) & c1;
 8015e82:	9ad3      	ldr	r2, [sp, #844]	; 0x34c
 8015e84:	9bb0      	ldr	r3, [sp, #704]	; 0x2c0
 8015e86:	405a      	eors	r2, r3
 8015e88:	9bd7      	ldr	r3, [sp, #860]	; 0x35c
 8015e8a:	401a      	ands	r2, r3
 8015e8c:	9bd3      	ldr	r3, [sp, #844]	; 0x34c
 8015e8e:	4053      	eors	r3, r2
 8015e90:	93d3      	str	r3, [sp, #844]	; 0x34c
			c1 = c0;
 8015e92:	9bd8      	ldr	r3, [sp, #864]	; 0x360
 8015e94:	93d7      	str	r3, [sp, #860]	; 0x35c
			c0 &= (((aw | bw) + 0x7FFFFFFF) >> 31) - (uint32_t)1;
 8015e96:	9ab1      	ldr	r2, [sp, #708]	; 0x2c4
 8015e98:	9bb0      	ldr	r3, [sp, #704]	; 0x2c0
 8015e9a:	4313      	orrs	r3, r2
 8015e9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015ea0:	3b01      	subs	r3, #1
 8015ea2:	0fdb      	lsrs	r3, r3, #31
 8015ea4:	1e5a      	subs	r2, r3, #1
 8015ea6:	9bd8      	ldr	r3, [sp, #864]	; 0x360
 8015ea8:	4013      	ands	r3, r2
 8015eaa:	93d8      	str	r3, [sp, #864]	; 0x360
		while (j -- > 0) {
 8015eac:	9ad9      	ldr	r2, [sp, #868]	; 0x364
 8015eae:	1e53      	subs	r3, r2, #1
 8015eb0:	93d9      	str	r3, [sp, #868]	; 0x364
 8015eb2:	2a00      	cmp	r2, #0
 8015eb4:	d1c1      	bne.n	8015e3a <zint_bezout+0xfa>
		 * If c1 = 0, then we grabbed two words for a and b.
		 * If c1 != 0 but c0 = 0, then we grabbed one word. It
		 * is not possible that c1 != 0 and c0 != 0, because that
		 * would mean that both integers are zero.
		 */
		a1 |= a0 & c1;
 8015eb6:	9ad6      	ldr	r2, [sp, #856]	; 0x358
 8015eb8:	9bd7      	ldr	r3, [sp, #860]	; 0x35c
 8015eba:	401a      	ands	r2, r3
 8015ebc:	9bd5      	ldr	r3, [sp, #852]	; 0x354
 8015ebe:	4313      	orrs	r3, r2
 8015ec0:	93d5      	str	r3, [sp, #852]	; 0x354
		a0 &= ~c1;
 8015ec2:	9bd7      	ldr	r3, [sp, #860]	; 0x35c
 8015ec4:	43da      	mvns	r2, r3
 8015ec6:	9bd6      	ldr	r3, [sp, #856]	; 0x358
 8015ec8:	4013      	ands	r3, r2
 8015eca:	93d6      	str	r3, [sp, #856]	; 0x358
		b1 |= b0 & c1;
 8015ecc:	9ad4      	ldr	r2, [sp, #848]	; 0x350
 8015ece:	9bd7      	ldr	r3, [sp, #860]	; 0x35c
 8015ed0:	401a      	ands	r2, r3
 8015ed2:	9bd3      	ldr	r3, [sp, #844]	; 0x34c
 8015ed4:	4313      	orrs	r3, r2
 8015ed6:	93d3      	str	r3, [sp, #844]	; 0x34c
		b0 &= ~c1;
 8015ed8:	9bd7      	ldr	r3, [sp, #860]	; 0x35c
 8015eda:	43da      	mvns	r2, r3
 8015edc:	9bd4      	ldr	r3, [sp, #848]	; 0x350
 8015ede:	4013      	ands	r3, r2
 8015ee0:	93d4      	str	r3, [sp, #848]	; 0x350
		a_hi = ((uint64_t)a0 << 31) + a1;
 8015ee2:	9bd6      	ldr	r3, [sp, #856]	; 0x358
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	931c      	str	r3, [sp, #112]	; 0x70
 8015ee8:	921d      	str	r2, [sp, #116]	; 0x74
 8015eea:	e9dd 121c 	ldrd	r1, r2, [sp, #112]	; 0x70
 8015eee:	460b      	mov	r3, r1
 8015ef0:	085b      	lsrs	r3, r3, #1
 8015ef2:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ef4:	460b      	mov	r3, r1
 8015ef6:	07db      	lsls	r3, r3, #31
 8015ef8:	930a      	str	r3, [sp, #40]	; 0x28
 8015efa:	9bd5      	ldr	r3, [sp, #852]	; 0x354
 8015efc:	2200      	movs	r2, #0
 8015efe:	931e      	str	r3, [sp, #120]	; 0x78
 8015f00:	921f      	str	r2, [sp, #124]	; 0x7c
 8015f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f04:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8015f08:	4602      	mov	r2, r0
 8015f0a:	189b      	adds	r3, r3, r2
 8015f0c:	937e      	str	r3, [sp, #504]	; 0x1f8
 8015f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f10:	460a      	mov	r2, r1
 8015f12:	4153      	adcs	r3, r2
 8015f14:	937f      	str	r3, [sp, #508]	; 0x1fc
 8015f16:	e9dd 237e 	ldrd	r2, r3, [sp, #504]	; 0x1f8
 8015f1a:	e9cd 23d0 	strd	r2, r3, [sp, #832]	; 0x340
		b_hi = ((uint64_t)b0 << 31) + b1;
 8015f1e:	9bd4      	ldr	r3, [sp, #848]	; 0x350
 8015f20:	2200      	movs	r2, #0
 8015f22:	9320      	str	r3, [sp, #128]	; 0x80
 8015f24:	9221      	str	r2, [sp, #132]	; 0x84
 8015f26:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8015f2a:	4611      	mov	r1, r2
 8015f2c:	ea4f 0b51 	mov.w	fp, r1, lsr #1
 8015f30:	4613      	mov	r3, r2
 8015f32:	ea4f 7ac3 	mov.w	sl, r3, lsl #31
 8015f36:	9bd3      	ldr	r3, [sp, #844]	; 0x34c
 8015f38:	2200      	movs	r2, #0
 8015f3a:	9322      	str	r3, [sp, #136]	; 0x88
 8015f3c:	9223      	str	r2, [sp, #140]	; 0x8c
 8015f3e:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8015f42:	4611      	mov	r1, r2
 8015f44:	eb1a 0101 	adds.w	r1, sl, r1
 8015f48:	9180      	str	r1, [sp, #512]	; 0x200
 8015f4a:	eb4b 0303 	adc.w	r3, fp, r3
 8015f4e:	9381      	str	r3, [sp, #516]	; 0x204
 8015f50:	e9dd 2380 	ldrd	r2, r3, [sp, #512]	; 0x200
 8015f54:	e9cd 23ce 	strd	r2, r3, [sp, #824]	; 0x338
		a_lo = a[0];
 8015f58:	9bbe      	ldr	r3, [sp, #760]	; 0x2f8
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	93cd      	str	r3, [sp, #820]	; 0x334
		b_lo = b[0];
 8015f5e:	9bbd      	ldr	r3, [sp, #756]	; 0x2f4
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	93cc      	str	r3, [sp, #816]	; 0x330
		 *   b' = a*qa + b*qb
		 *
		 * such that a' and b' are both multiple of 2^31, but are
		 * only marginally larger than a and b.
		 */
		pa = 1;
 8015f64:	f04f 0201 	mov.w	r2, #1
 8015f68:	f04f 0300 	mov.w	r3, #0
 8015f6c:	e9cd 23ca 	strd	r2, r3, [sp, #808]	; 0x328
		pb = 0;
 8015f70:	f04f 0200 	mov.w	r2, #0
 8015f74:	f04f 0300 	mov.w	r3, #0
 8015f78:	e9cd 23c8 	strd	r2, r3, [sp, #800]	; 0x320
		qa = 0;
 8015f7c:	f04f 0200 	mov.w	r2, #0
 8015f80:	f04f 0300 	mov.w	r3, #0
 8015f84:	e9cd 23c6 	strd	r2, r3, [sp, #792]	; 0x318
		qb = 1;
 8015f88:	f04f 0201 	mov.w	r2, #1
 8015f8c:	f04f 0300 	mov.w	r3, #0
 8015f90:	e9cd 23c4 	strd	r2, r3, [sp, #784]	; 0x310
		for (i = 0; i < 31; i ++) {
 8015f94:	2300      	movs	r3, #0
 8015f96:	93c3      	str	r3, [sp, #780]	; 0x30c
 8015f98:	e26f      	b.n	801647a <zint_bezout+0x73a>
			uint64_t rz;

			/*
			 * rt = 1 if a_hi > b_hi, 0 otherwise.
			 */
			rz = b_hi - a_hi;
 8015f9a:	e9dd 01ce 	ldrd	r0, r1, [sp, #824]	; 0x338
 8015f9e:	e9dd 23d0 	ldrd	r2, r3, [sp, #832]	; 0x340
 8015fa2:	ebb0 0c02 	subs.w	ip, r0, r2
 8015fa6:	f8cd c208 	str.w	ip, [sp, #520]	; 0x208
 8015faa:	eb61 0303 	sbc.w	r3, r1, r3
 8015fae:	9383      	str	r3, [sp, #524]	; 0x20c
 8015fb0:	e9dd 2382 	ldrd	r2, r3, [sp, #520]	; 0x208
 8015fb4:	e9cd 23b8 	strd	r2, r3, [sp, #736]	; 0x2e0
			rt = (uint32_t)((rz ^ ((a_hi ^ b_hi)
 8015fb8:	e9dd 01d0 	ldrd	r0, r1, [sp, #832]	; 0x340
 8015fbc:	e9dd 23ce 	ldrd	r2, r3, [sp, #824]	; 0x338
 8015fc0:	ea80 0c02 	eor.w	ip, r0, r2
 8015fc4:	f8cd c090 	str.w	ip, [sp, #144]	; 0x90
 8015fc8:	404b      	eors	r3, r1
 8015fca:	9325      	str	r3, [sp, #148]	; 0x94
				& (a_hi ^ rz))) >> 63);
 8015fcc:	e9dd 01d0 	ldrd	r0, r1, [sp, #832]	; 0x340
 8015fd0:	e9dd 23b8 	ldrd	r2, r3, [sp, #736]	; 0x2e0
 8015fd4:	ea80 0c02 	eor.w	ip, r0, r2
 8015fd8:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 8015fdc:	404b      	eors	r3, r1
 8015fde:	9327      	str	r3, [sp, #156]	; 0x9c
 8015fe0:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8015fe4:	4684      	mov	ip, r0
 8015fe6:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8015fea:	4696      	mov	lr, r2
 8015fec:	ea0c 0c0e 	and.w	ip, ip, lr
 8015ff0:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
 8015ff4:	400b      	ands	r3, r1
 8015ff6:	9329      	str	r3, [sp, #164]	; 0xa4
			rt = (uint32_t)((rz ^ ((a_hi ^ b_hi)
 8015ff8:	e9dd 23b8 	ldrd	r2, r3, [sp, #736]	; 0x2e0
 8015ffc:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 8016000:	4684      	mov	ip, r0
 8016002:	ea8c 0c02 	eor.w	ip, ip, r2
 8016006:	f8cd c0a8 	str.w	ip, [sp, #168]	; 0xa8
 801600a:	404b      	eors	r3, r1
 801600c:	932b      	str	r3, [sp, #172]	; 0xac
				& (a_hi ^ rz))) >> 63);
 801600e:	f04f 0200 	mov.w	r2, #0
 8016012:	f04f 0300 	mov.w	r3, #0
 8016016:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016018:	0fca      	lsrs	r2, r1, #31
 801601a:	2300      	movs	r3, #0
			rt = (uint32_t)((rz ^ ((a_hi ^ b_hi)
 801601c:	4613      	mov	r3, r2
 801601e:	93b7      	str	r3, [sp, #732]	; 0x2dc
			 * Rules:
			 *
			 *   cAB and cBA cannot both be 1.
			 *   If a is not divided by 2, b is.
			 */
			oa = (a_lo >> i) & 1;
 8016020:	9acd      	ldr	r2, [sp, #820]	; 0x334
 8016022:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
 8016024:	fa22 f303 	lsr.w	r3, r2, r3
 8016028:	f003 0301 	and.w	r3, r3, #1
 801602c:	93b6      	str	r3, [sp, #728]	; 0x2d8
			ob = (b_lo >> i) & 1;
 801602e:	9acc      	ldr	r2, [sp, #816]	; 0x330
 8016030:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
 8016032:	fa22 f303 	lsr.w	r3, r2, r3
 8016036:	f003 0301 	and.w	r3, r3, #1
 801603a:	93b5      	str	r3, [sp, #724]	; 0x2d4
			cAB = oa & ob & rt;
 801603c:	9ab6      	ldr	r2, [sp, #728]	; 0x2d8
 801603e:	9bb5      	ldr	r3, [sp, #724]	; 0x2d4
 8016040:	401a      	ands	r2, r3
 8016042:	9bb7      	ldr	r3, [sp, #732]	; 0x2dc
 8016044:	4013      	ands	r3, r2
 8016046:	93b4      	str	r3, [sp, #720]	; 0x2d0
			cBA = oa & ob & ~rt;
 8016048:	9ab6      	ldr	r2, [sp, #728]	; 0x2d8
 801604a:	9bb5      	ldr	r3, [sp, #724]	; 0x2d4
 801604c:	401a      	ands	r2, r3
 801604e:	9bb7      	ldr	r3, [sp, #732]	; 0x2dc
 8016050:	43db      	mvns	r3, r3
 8016052:	4013      	ands	r3, r2
 8016054:	93b3      	str	r3, [sp, #716]	; 0x2cc
			cA = cAB | (oa ^ 1);
 8016056:	9bb6      	ldr	r3, [sp, #728]	; 0x2d8
 8016058:	f083 0201 	eor.w	r2, r3, #1
 801605c:	9bb4      	ldr	r3, [sp, #720]	; 0x2d0
 801605e:	4313      	orrs	r3, r2
 8016060:	93b2      	str	r3, [sp, #712]	; 0x2c8

			/*
			 * Conditional subtractions.
			 */
			a_lo -= b_lo & -cAB;
 8016062:	9bb4      	ldr	r3, [sp, #720]	; 0x2d0
 8016064:	425a      	negs	r2, r3
 8016066:	9bcc      	ldr	r3, [sp, #816]	; 0x330
 8016068:	401a      	ands	r2, r3
 801606a:	9bcd      	ldr	r3, [sp, #820]	; 0x334
 801606c:	1a9b      	subs	r3, r3, r2
 801606e:	93cd      	str	r3, [sp, #820]	; 0x334
			a_hi -= b_hi & -(uint64_t)cAB;
 8016070:	9bb4      	ldr	r3, [sp, #720]	; 0x2d0
 8016072:	2200      	movs	r2, #0
 8016074:	932c      	str	r3, [sp, #176]	; 0xb0
 8016076:	922d      	str	r2, [sp, #180]	; 0xb4
 8016078:	2300      	movs	r3, #0
 801607a:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 801607e:	4602      	mov	r2, r0
 8016080:	4252      	negs	r2, r2
 8016082:	922e      	str	r2, [sp, #184]	; 0xb8
 8016084:	460a      	mov	r2, r1
 8016086:	eb63 0302 	sbc.w	r3, r3, r2
 801608a:	932f      	str	r3, [sp, #188]	; 0xbc
 801608c:	e9dd 23ce 	ldrd	r2, r3, [sp, #824]	; 0x338
 8016090:	e9dd 012e 	ldrd	r0, r1, [sp, #184]	; 0xb8
 8016094:	4684      	mov	ip, r0
 8016096:	ea0c 0c02 	and.w	ip, ip, r2
 801609a:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 801609e:	400b      	ands	r3, r1
 80160a0:	9331      	str	r3, [sp, #196]	; 0xc4
 80160a2:	e9dd 23d0 	ldrd	r2, r3, [sp, #832]	; 0x340
 80160a6:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
 80160aa:	4684      	mov	ip, r0
 80160ac:	ebb2 0c0c 	subs.w	ip, r2, ip
 80160b0:	f8cd c210 	str.w	ip, [sp, #528]	; 0x210
 80160b4:	eb63 0301 	sbc.w	r3, r3, r1
 80160b8:	9385      	str	r3, [sp, #532]	; 0x214
 80160ba:	e9dd 2384 	ldrd	r2, r3, [sp, #528]	; 0x210
 80160be:	e9cd 23d0 	strd	r2, r3, [sp, #832]	; 0x340
			pa -= qa & -(int64_t)cAB;
 80160c2:	9bb4      	ldr	r3, [sp, #720]	; 0x2d0
 80160c4:	2200      	movs	r2, #0
 80160c6:	9332      	str	r3, [sp, #200]	; 0xc8
 80160c8:	9233      	str	r2, [sp, #204]	; 0xcc
 80160ca:	2300      	movs	r3, #0
 80160cc:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 80160d0:	4602      	mov	r2, r0
 80160d2:	4252      	negs	r2, r2
 80160d4:	9234      	str	r2, [sp, #208]	; 0xd0
 80160d6:	460a      	mov	r2, r1
 80160d8:	eb63 0302 	sbc.w	r3, r3, r2
 80160dc:	9335      	str	r3, [sp, #212]	; 0xd4
 80160de:	e9dd 23c6 	ldrd	r2, r3, [sp, #792]	; 0x318
 80160e2:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 80160e6:	4684      	mov	ip, r0
 80160e8:	ea0c 0c02 	and.w	ip, ip, r2
 80160ec:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
 80160f0:	400b      	ands	r3, r1
 80160f2:	9337      	str	r3, [sp, #220]	; 0xdc
 80160f4:	e9dd 23ca 	ldrd	r2, r3, [sp, #808]	; 0x328
 80160f8:	e9dd 0136 	ldrd	r0, r1, [sp, #216]	; 0xd8
 80160fc:	4684      	mov	ip, r0
 80160fe:	ebb2 0c0c 	subs.w	ip, r2, ip
 8016102:	f8cd c218 	str.w	ip, [sp, #536]	; 0x218
 8016106:	eb63 0301 	sbc.w	r3, r3, r1
 801610a:	9387      	str	r3, [sp, #540]	; 0x21c
 801610c:	e9dd 2386 	ldrd	r2, r3, [sp, #536]	; 0x218
 8016110:	e9cd 23ca 	strd	r2, r3, [sp, #808]	; 0x328
			pb -= qb & -(int64_t)cAB;
 8016114:	9bb4      	ldr	r3, [sp, #720]	; 0x2d0
 8016116:	2200      	movs	r2, #0
 8016118:	9338      	str	r3, [sp, #224]	; 0xe0
 801611a:	9239      	str	r2, [sp, #228]	; 0xe4
 801611c:	2300      	movs	r3, #0
 801611e:	e9dd 0138 	ldrd	r0, r1, [sp, #224]	; 0xe0
 8016122:	4602      	mov	r2, r0
 8016124:	4252      	negs	r2, r2
 8016126:	923a      	str	r2, [sp, #232]	; 0xe8
 8016128:	460a      	mov	r2, r1
 801612a:	eb63 0302 	sbc.w	r3, r3, r2
 801612e:	933b      	str	r3, [sp, #236]	; 0xec
 8016130:	e9dd 23c4 	ldrd	r2, r3, [sp, #784]	; 0x310
 8016134:	e9dd 013a 	ldrd	r0, r1, [sp, #232]	; 0xe8
 8016138:	4684      	mov	ip, r0
 801613a:	ea0c 0c02 	and.w	ip, ip, r2
 801613e:	f8cd c0f0 	str.w	ip, [sp, #240]	; 0xf0
 8016142:	400b      	ands	r3, r1
 8016144:	933d      	str	r3, [sp, #244]	; 0xf4
 8016146:	e9dd 23c8 	ldrd	r2, r3, [sp, #800]	; 0x320
 801614a:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 801614e:	4684      	mov	ip, r0
 8016150:	ebb2 0c0c 	subs.w	ip, r2, ip
 8016154:	f8cd c220 	str.w	ip, [sp, #544]	; 0x220
 8016158:	eb63 0301 	sbc.w	r3, r3, r1
 801615c:	9389      	str	r3, [sp, #548]	; 0x224
 801615e:	e9dd 2388 	ldrd	r2, r3, [sp, #544]	; 0x220
 8016162:	e9cd 23c8 	strd	r2, r3, [sp, #800]	; 0x320
			b_lo -= a_lo & -cBA;
 8016166:	9bb3      	ldr	r3, [sp, #716]	; 0x2cc
 8016168:	425a      	negs	r2, r3
 801616a:	9bcd      	ldr	r3, [sp, #820]	; 0x334
 801616c:	401a      	ands	r2, r3
 801616e:	9bcc      	ldr	r3, [sp, #816]	; 0x330
 8016170:	1a9b      	subs	r3, r3, r2
 8016172:	93cc      	str	r3, [sp, #816]	; 0x330
			b_hi -= a_hi & -(uint64_t)cBA;
 8016174:	9bb3      	ldr	r3, [sp, #716]	; 0x2cc
 8016176:	2200      	movs	r2, #0
 8016178:	933e      	str	r3, [sp, #248]	; 0xf8
 801617a:	923f      	str	r2, [sp, #252]	; 0xfc
 801617c:	2300      	movs	r3, #0
 801617e:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 8016182:	4602      	mov	r2, r0
 8016184:	4252      	negs	r2, r2
 8016186:	9240      	str	r2, [sp, #256]	; 0x100
 8016188:	460a      	mov	r2, r1
 801618a:	eb63 0302 	sbc.w	r3, r3, r2
 801618e:	9341      	str	r3, [sp, #260]	; 0x104
 8016190:	e9dd 23d0 	ldrd	r2, r3, [sp, #832]	; 0x340
 8016194:	e9dd 0140 	ldrd	r0, r1, [sp, #256]	; 0x100
 8016198:	4684      	mov	ip, r0
 801619a:	ea0c 0c02 	and.w	ip, ip, r2
 801619e:	f8cd c108 	str.w	ip, [sp, #264]	; 0x108
 80161a2:	400b      	ands	r3, r1
 80161a4:	9343      	str	r3, [sp, #268]	; 0x10c
 80161a6:	e9dd 23ce 	ldrd	r2, r3, [sp, #824]	; 0x338
 80161aa:	e9dd 0142 	ldrd	r0, r1, [sp, #264]	; 0x108
 80161ae:	4684      	mov	ip, r0
 80161b0:	ebb2 0c0c 	subs.w	ip, r2, ip
 80161b4:	f8cd c228 	str.w	ip, [sp, #552]	; 0x228
 80161b8:	eb63 0301 	sbc.w	r3, r3, r1
 80161bc:	938b      	str	r3, [sp, #556]	; 0x22c
 80161be:	e9dd 238a 	ldrd	r2, r3, [sp, #552]	; 0x228
 80161c2:	e9cd 23ce 	strd	r2, r3, [sp, #824]	; 0x338
			qa -= pa & -(int64_t)cBA;
 80161c6:	9bb3      	ldr	r3, [sp, #716]	; 0x2cc
 80161c8:	2200      	movs	r2, #0
 80161ca:	9344      	str	r3, [sp, #272]	; 0x110
 80161cc:	9245      	str	r2, [sp, #276]	; 0x114
 80161ce:	2300      	movs	r3, #0
 80161d0:	e9dd 0144 	ldrd	r0, r1, [sp, #272]	; 0x110
 80161d4:	4602      	mov	r2, r0
 80161d6:	4252      	negs	r2, r2
 80161d8:	9246      	str	r2, [sp, #280]	; 0x118
 80161da:	460a      	mov	r2, r1
 80161dc:	eb63 0302 	sbc.w	r3, r3, r2
 80161e0:	9347      	str	r3, [sp, #284]	; 0x11c
 80161e2:	e9dd 23ca 	ldrd	r2, r3, [sp, #808]	; 0x328
 80161e6:	e9dd 0146 	ldrd	r0, r1, [sp, #280]	; 0x118
 80161ea:	4684      	mov	ip, r0
 80161ec:	ea0c 0c02 	and.w	ip, ip, r2
 80161f0:	f8cd c120 	str.w	ip, [sp, #288]	; 0x120
 80161f4:	400b      	ands	r3, r1
 80161f6:	9349      	str	r3, [sp, #292]	; 0x124
 80161f8:	e9dd 23c6 	ldrd	r2, r3, [sp, #792]	; 0x318
 80161fc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8016200:	4684      	mov	ip, r0
 8016202:	ebb2 0c0c 	subs.w	ip, r2, ip
 8016206:	f8cd c230 	str.w	ip, [sp, #560]	; 0x230
 801620a:	eb63 0301 	sbc.w	r3, r3, r1
 801620e:	938d      	str	r3, [sp, #564]	; 0x234
 8016210:	e9dd 238c 	ldrd	r2, r3, [sp, #560]	; 0x230
 8016214:	e9cd 23c6 	strd	r2, r3, [sp, #792]	; 0x318
			qb -= pb & -(int64_t)cBA;
 8016218:	9bb3      	ldr	r3, [sp, #716]	; 0x2cc
 801621a:	2200      	movs	r2, #0
 801621c:	934a      	str	r3, [sp, #296]	; 0x128
 801621e:	924b      	str	r2, [sp, #300]	; 0x12c
 8016220:	2300      	movs	r3, #0
 8016222:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8016226:	4602      	mov	r2, r0
 8016228:	4252      	negs	r2, r2
 801622a:	924c      	str	r2, [sp, #304]	; 0x130
 801622c:	460a      	mov	r2, r1
 801622e:	eb63 0302 	sbc.w	r3, r3, r2
 8016232:	934d      	str	r3, [sp, #308]	; 0x134
 8016234:	e9dd 23c8 	ldrd	r2, r3, [sp, #800]	; 0x320
 8016238:	e9dd 014c 	ldrd	r0, r1, [sp, #304]	; 0x130
 801623c:	4684      	mov	ip, r0
 801623e:	ea0c 0c02 	and.w	ip, ip, r2
 8016242:	f8cd c138 	str.w	ip, [sp, #312]	; 0x138
 8016246:	400b      	ands	r3, r1
 8016248:	934f      	str	r3, [sp, #316]	; 0x13c
 801624a:	e9dd 23c4 	ldrd	r2, r3, [sp, #784]	; 0x310
 801624e:	e9dd 014e 	ldrd	r0, r1, [sp, #312]	; 0x138
 8016252:	4684      	mov	ip, r0
 8016254:	ebb2 0c0c 	subs.w	ip, r2, ip
 8016258:	f8cd c238 	str.w	ip, [sp, #568]	; 0x238
 801625c:	eb63 0301 	sbc.w	r3, r3, r1
 8016260:	938f      	str	r3, [sp, #572]	; 0x23c
 8016262:	e9dd 238e 	ldrd	r2, r3, [sp, #568]	; 0x238
 8016266:	e9cd 23c4 	strd	r2, r3, [sp, #784]	; 0x310

			/*
			 * Shifting.
			 */
			a_lo += a_lo & (cA - 1);
 801626a:	9bb2      	ldr	r3, [sp, #712]	; 0x2c8
 801626c:	1e5a      	subs	r2, r3, #1
 801626e:	9bcd      	ldr	r3, [sp, #820]	; 0x334
 8016270:	401a      	ands	r2, r3
 8016272:	9bcd      	ldr	r3, [sp, #820]	; 0x334
 8016274:	4413      	add	r3, r2
 8016276:	93cd      	str	r3, [sp, #820]	; 0x334
			pa += pa & ((int64_t)cA - 1);
 8016278:	9bb2      	ldr	r3, [sp, #712]	; 0x2c8
 801627a:	2200      	movs	r2, #0
 801627c:	9350      	str	r3, [sp, #320]	; 0x140
 801627e:	9251      	str	r2, [sp, #324]	; 0x144
 8016280:	e9dd 1250 	ldrd	r1, r2, [sp, #320]	; 0x140
 8016284:	460b      	mov	r3, r1
 8016286:	3b01      	subs	r3, #1
 8016288:	9352      	str	r3, [sp, #328]	; 0x148
 801628a:	4613      	mov	r3, r2
 801628c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8016290:	9353      	str	r3, [sp, #332]	; 0x14c
 8016292:	e9dd 23ca 	ldrd	r2, r3, [sp, #808]	; 0x328
 8016296:	e9dd 0152 	ldrd	r0, r1, [sp, #328]	; 0x148
 801629a:	4684      	mov	ip, r0
 801629c:	ea0c 0c02 	and.w	ip, ip, r2
 80162a0:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80162a4:	400b      	ands	r3, r1
 80162a6:	930d      	str	r3, [sp, #52]	; 0x34
 80162a8:	e9dd 23ca 	ldrd	r2, r3, [sp, #808]	; 0x328
 80162ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80162ae:	1851      	adds	r1, r2, r1
 80162b0:	9190      	str	r1, [sp, #576]	; 0x240
 80162b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80162b4:	414b      	adcs	r3, r1
 80162b6:	9391      	str	r3, [sp, #580]	; 0x244
 80162b8:	e9dd 2390 	ldrd	r2, r3, [sp, #576]	; 0x240
 80162bc:	e9cd 23ca 	strd	r2, r3, [sp, #808]	; 0x328
			pb += pb & ((int64_t)cA - 1);
 80162c0:	9bb2      	ldr	r3, [sp, #712]	; 0x2c8
 80162c2:	2200      	movs	r2, #0
 80162c4:	9354      	str	r3, [sp, #336]	; 0x150
 80162c6:	9255      	str	r2, [sp, #340]	; 0x154
 80162c8:	e9dd 1254 	ldrd	r1, r2, [sp, #336]	; 0x150
 80162cc:	460b      	mov	r3, r1
 80162ce:	3b01      	subs	r3, #1
 80162d0:	9356      	str	r3, [sp, #344]	; 0x158
 80162d2:	4613      	mov	r3, r2
 80162d4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80162d8:	9357      	str	r3, [sp, #348]	; 0x15c
 80162da:	e9dd 23c8 	ldrd	r2, r3, [sp, #800]	; 0x320
 80162de:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 80162e2:	4684      	mov	ip, r0
 80162e4:	ea0c 0c02 	and.w	ip, ip, r2
 80162e8:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 80162ec:	400b      	ands	r3, r1
 80162ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80162f0:	e9dd 23c8 	ldrd	r2, r3, [sp, #800]	; 0x320
 80162f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80162f6:	1851      	adds	r1, r2, r1
 80162f8:	9192      	str	r1, [sp, #584]	; 0x248
 80162fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80162fc:	414b      	adcs	r3, r1
 80162fe:	9393      	str	r3, [sp, #588]	; 0x24c
 8016300:	e9dd 2392 	ldrd	r2, r3, [sp, #584]	; 0x248
 8016304:	e9cd 23c8 	strd	r2, r3, [sp, #800]	; 0x320
			a_hi ^= (a_hi ^ (a_hi >> 1)) & -(uint64_t)cA;
 8016308:	e9dd 23d0 	ldrd	r2, r3, [sp, #832]	; 0x340
 801630c:	f04f 0000 	mov.w	r0, #0
 8016310:	f04f 0100 	mov.w	r1, #0
 8016314:	0850      	lsrs	r0, r2, #1
 8016316:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 801631a:	0859      	lsrs	r1, r3, #1
 801631c:	e9dd 23d0 	ldrd	r2, r3, [sp, #832]	; 0x340
 8016320:	ea80 0c02 	eor.w	ip, r0, r2
 8016324:	f8cd c160 	str.w	ip, [sp, #352]	; 0x160
 8016328:	404b      	eors	r3, r1
 801632a:	9359      	str	r3, [sp, #356]	; 0x164
 801632c:	9bb2      	ldr	r3, [sp, #712]	; 0x2c8
 801632e:	2200      	movs	r2, #0
 8016330:	935a      	str	r3, [sp, #360]	; 0x168
 8016332:	925b      	str	r2, [sp, #364]	; 0x16c
 8016334:	2300      	movs	r3, #0
 8016336:	e9dd 015a 	ldrd	r0, r1, [sp, #360]	; 0x168
 801633a:	4602      	mov	r2, r0
 801633c:	4252      	negs	r2, r2
 801633e:	925c      	str	r2, [sp, #368]	; 0x170
 8016340:	460a      	mov	r2, r1
 8016342:	eb63 0302 	sbc.w	r3, r3, r2
 8016346:	935d      	str	r3, [sp, #372]	; 0x174
 8016348:	e9dd 0158 	ldrd	r0, r1, [sp, #352]	; 0x160
 801634c:	4684      	mov	ip, r0
 801634e:	e9dd 235c 	ldrd	r2, r3, [sp, #368]	; 0x170
 8016352:	4696      	mov	lr, r2
 8016354:	ea0c 0c0e 	and.w	ip, ip, lr
 8016358:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
 801635c:	400b      	ands	r3, r1
 801635e:	935f      	str	r3, [sp, #380]	; 0x17c
 8016360:	e9dd 23d0 	ldrd	r2, r3, [sp, #832]	; 0x340
 8016364:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 8016368:	4684      	mov	ip, r0
 801636a:	ea82 0c0c 	eor.w	ip, r2, ip
 801636e:	f8cd c250 	str.w	ip, [sp, #592]	; 0x250
 8016372:	404b      	eors	r3, r1
 8016374:	9395      	str	r3, [sp, #596]	; 0x254
 8016376:	e9dd 2394 	ldrd	r2, r3, [sp, #592]	; 0x250
 801637a:	e9cd 23d0 	strd	r2, r3, [sp, #832]	; 0x340
			b_lo += b_lo & -cA;
 801637e:	9bb2      	ldr	r3, [sp, #712]	; 0x2c8
 8016380:	425a      	negs	r2, r3
 8016382:	9bcc      	ldr	r3, [sp, #816]	; 0x330
 8016384:	401a      	ands	r2, r3
 8016386:	9bcc      	ldr	r3, [sp, #816]	; 0x330
 8016388:	4413      	add	r3, r2
 801638a:	93cc      	str	r3, [sp, #816]	; 0x330
			qa += qa & -(int64_t)cA;
 801638c:	9bb2      	ldr	r3, [sp, #712]	; 0x2c8
 801638e:	2200      	movs	r2, #0
 8016390:	9360      	str	r3, [sp, #384]	; 0x180
 8016392:	9261      	str	r2, [sp, #388]	; 0x184
 8016394:	2300      	movs	r3, #0
 8016396:	e9dd 0160 	ldrd	r0, r1, [sp, #384]	; 0x180
 801639a:	4602      	mov	r2, r0
 801639c:	4252      	negs	r2, r2
 801639e:	9262      	str	r2, [sp, #392]	; 0x188
 80163a0:	460a      	mov	r2, r1
 80163a2:	eb63 0302 	sbc.w	r3, r3, r2
 80163a6:	9363      	str	r3, [sp, #396]	; 0x18c
 80163a8:	e9dd 23c6 	ldrd	r2, r3, [sp, #792]	; 0x318
 80163ac:	e9dd 0162 	ldrd	r0, r1, [sp, #392]	; 0x188
 80163b0:	4684      	mov	ip, r0
 80163b2:	ea0c 0c02 	and.w	ip, ip, r2
 80163b6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80163ba:	400b      	ands	r3, r1
 80163bc:	9311      	str	r3, [sp, #68]	; 0x44
 80163be:	e9dd 23c6 	ldrd	r2, r3, [sp, #792]	; 0x318
 80163c2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80163c4:	1851      	adds	r1, r2, r1
 80163c6:	9196      	str	r1, [sp, #600]	; 0x258
 80163c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80163ca:	414b      	adcs	r3, r1
 80163cc:	9397      	str	r3, [sp, #604]	; 0x25c
 80163ce:	e9dd 2396 	ldrd	r2, r3, [sp, #600]	; 0x258
 80163d2:	e9cd 23c6 	strd	r2, r3, [sp, #792]	; 0x318
			qb += qb & -(int64_t)cA;
 80163d6:	9bb2      	ldr	r3, [sp, #712]	; 0x2c8
 80163d8:	2200      	movs	r2, #0
 80163da:	9364      	str	r3, [sp, #400]	; 0x190
 80163dc:	9265      	str	r2, [sp, #404]	; 0x194
 80163de:	2300      	movs	r3, #0
 80163e0:	e9dd 0164 	ldrd	r0, r1, [sp, #400]	; 0x190
 80163e4:	4602      	mov	r2, r0
 80163e6:	4252      	negs	r2, r2
 80163e8:	9266      	str	r2, [sp, #408]	; 0x198
 80163ea:	460a      	mov	r2, r1
 80163ec:	eb63 0302 	sbc.w	r3, r3, r2
 80163f0:	9367      	str	r3, [sp, #412]	; 0x19c
 80163f2:	e9dd 23c4 	ldrd	r2, r3, [sp, #784]	; 0x310
 80163f6:	e9dd 0166 	ldrd	r0, r1, [sp, #408]	; 0x198
 80163fa:	4684      	mov	ip, r0
 80163fc:	ea0c 0c02 	and.w	ip, ip, r2
 8016400:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8016404:	400b      	ands	r3, r1
 8016406:	9313      	str	r3, [sp, #76]	; 0x4c
 8016408:	e9dd 23c4 	ldrd	r2, r3, [sp, #784]	; 0x310
 801640c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801640e:	1851      	adds	r1, r2, r1
 8016410:	9198      	str	r1, [sp, #608]	; 0x260
 8016412:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016414:	414b      	adcs	r3, r1
 8016416:	9399      	str	r3, [sp, #612]	; 0x264
 8016418:	e9dd 2398 	ldrd	r2, r3, [sp, #608]	; 0x260
 801641c:	e9cd 23c4 	strd	r2, r3, [sp, #784]	; 0x310
			b_hi ^= (b_hi ^ (b_hi >> 1)) & ((uint64_t)cA - 1);
 8016420:	e9dd 23ce 	ldrd	r2, r3, [sp, #824]	; 0x338
 8016424:	f04f 0000 	mov.w	r0, #0
 8016428:	f04f 0100 	mov.w	r1, #0
 801642c:	0850      	lsrs	r0, r2, #1
 801642e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8016432:	0859      	lsrs	r1, r3, #1
 8016434:	e9dd 23ce 	ldrd	r2, r3, [sp, #824]	; 0x338
 8016438:	ea80 0802 	eor.w	r8, r0, r2
 801643c:	ea81 0903 	eor.w	r9, r1, r3
 8016440:	9bb2      	ldr	r3, [sp, #712]	; 0x2c8
 8016442:	2200      	movs	r2, #0
 8016444:	9368      	str	r3, [sp, #416]	; 0x1a0
 8016446:	9269      	str	r2, [sp, #420]	; 0x1a4
 8016448:	e9dd 1268 	ldrd	r1, r2, [sp, #416]	; 0x1a0
 801644c:	460b      	mov	r3, r1
 801644e:	1e5e      	subs	r6, r3, #1
 8016450:	4613      	mov	r3, r2
 8016452:	f143 37ff 	adc.w	r7, r3, #4294967295
 8016456:	ea08 0406 	and.w	r4, r8, r6
 801645a:	ea09 0507 	and.w	r5, r9, r7
 801645e:	e9dd 23ce 	ldrd	r2, r3, [sp, #824]	; 0x338
 8016462:	ea82 0104 	eor.w	r1, r2, r4
 8016466:	919a      	str	r1, [sp, #616]	; 0x268
 8016468:	406b      	eors	r3, r5
 801646a:	939b      	str	r3, [sp, #620]	; 0x26c
 801646c:	e9dd 239a 	ldrd	r2, r3, [sp, #616]	; 0x268
 8016470:	e9cd 23ce 	strd	r2, r3, [sp, #824]	; 0x338
		for (i = 0; i < 31; i ++) {
 8016474:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
 8016476:	3301      	adds	r3, #1
 8016478:	93c3      	str	r3, [sp, #780]	; 0x30c
 801647a:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
 801647c:	2b1e      	cmp	r3, #30
 801647e:	f77f ad8c 	ble.w	8015f9a <zint_bezout+0x25a>
		 * Apply the computed parameters to our values. We
		 * may have to correct pa and pb depending on the
		 * returned value of zint_co_reduce() (when a and/or b
		 * had to be negated).
		 */
		r = zint_co_reduce(a, b, len, pa, pb, qa, qb);
 8016482:	e9dd 23c4 	ldrd	r2, r3, [sp, #784]	; 0x310
 8016486:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801648a:	e9dd 23c6 	ldrd	r2, r3, [sp, #792]	; 0x318
 801648e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016492:	e9dd 23c8 	ldrd	r2, r3, [sp, #800]	; 0x320
 8016496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801649a:	e9dd 23ca 	ldrd	r2, r3, [sp, #808]	; 0x328
 801649e:	e9cd 2300 	strd	r2, r3, [sp]
 80164a2:	9ae6      	ldr	r2, [sp, #920]	; 0x398
 80164a4:	99bd      	ldr	r1, [sp, #756]	; 0x2f4
 80164a6:	98be      	ldr	r0, [sp, #760]	; 0x2f8
 80164a8:	f7ff f95a 	bl	8015760 <zint_co_reduce>
 80164ac:	90ba      	str	r0, [sp, #744]	; 0x2e8
		pa -= (pa + pa) & -(int64_t)(r & 1);
 80164ae:	e9dd 23ca 	ldrd	r2, r3, [sp, #808]	; 0x328
 80164b2:	1891      	adds	r1, r2, r2
 80164b4:	919c      	str	r1, [sp, #624]	; 0x270
 80164b6:	415b      	adcs	r3, r3
 80164b8:	939d      	str	r3, [sp, #628]	; 0x274
 80164ba:	e9dd 019c 	ldrd	r0, r1, [sp, #624]	; 0x270
 80164be:	9bba      	ldr	r3, [sp, #744]	; 0x2e8
 80164c0:	2200      	movs	r2, #0
 80164c2:	936a      	str	r3, [sp, #424]	; 0x1a8
 80164c4:	926b      	str	r2, [sp, #428]	; 0x1ac
 80164c6:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 80164c8:	f003 0301 	and.w	r3, r3, #1
 80164cc:	9314      	str	r3, [sp, #80]	; 0x50
 80164ce:	f04f 0c00 	mov.w	ip, #0
 80164d2:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 80164d6:	2300      	movs	r3, #0
 80164d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80164da:	4252      	negs	r2, r2
 80164dc:	926c      	str	r2, [sp, #432]	; 0x1b0
 80164de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80164e0:	eb63 0302 	sbc.w	r3, r3, r2
 80164e4:	936d      	str	r3, [sp, #436]	; 0x1b4
 80164e6:	e9dd 236c 	ldrd	r2, r3, [sp, #432]	; 0x1b0
 80164ea:	4696      	mov	lr, r2
 80164ec:	ea00 0e0e 	and.w	lr, r0, lr
 80164f0:	f8cd e1b8 	str.w	lr, [sp, #440]	; 0x1b8
 80164f4:	400b      	ands	r3, r1
 80164f6:	936f      	str	r3, [sp, #444]	; 0x1bc
 80164f8:	e9dd 23ca 	ldrd	r2, r3, [sp, #808]	; 0x328
 80164fc:	e9dd 016e 	ldrd	r0, r1, [sp, #440]	; 0x1b8
 8016500:	4686      	mov	lr, r0
 8016502:	ebb2 0e0e 	subs.w	lr, r2, lr
 8016506:	f8cd e278 	str.w	lr, [sp, #632]	; 0x278
 801650a:	eb63 0301 	sbc.w	r3, r3, r1
 801650e:	939f      	str	r3, [sp, #636]	; 0x27c
 8016510:	e9dd 239e 	ldrd	r2, r3, [sp, #632]	; 0x278
 8016514:	e9cd 23ca 	strd	r2, r3, [sp, #808]	; 0x328
		pb -= (pb + pb) & -(int64_t)(r & 1);
 8016518:	e9dd 23c8 	ldrd	r2, r3, [sp, #800]	; 0x320
 801651c:	1891      	adds	r1, r2, r2
 801651e:	91a0      	str	r1, [sp, #640]	; 0x280
 8016520:	415b      	adcs	r3, r3
 8016522:	93a1      	str	r3, [sp, #644]	; 0x284
 8016524:	e9dd 01a0 	ldrd	r0, r1, [sp, #640]	; 0x280
 8016528:	9bba      	ldr	r3, [sp, #744]	; 0x2e8
 801652a:	2200      	movs	r2, #0
 801652c:	9370      	str	r3, [sp, #448]	; 0x1c0
 801652e:	9271      	str	r2, [sp, #452]	; 0x1c4
 8016530:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8016532:	f003 0301 	and.w	r3, r3, #1
 8016536:	9316      	str	r3, [sp, #88]	; 0x58
 8016538:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 801653c:	2300      	movs	r3, #0
 801653e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016540:	4252      	negs	r2, r2
 8016542:	9272      	str	r2, [sp, #456]	; 0x1c8
 8016544:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016546:	eb63 0302 	sbc.w	r3, r3, r2
 801654a:	9373      	str	r3, [sp, #460]	; 0x1cc
 801654c:	e9dd 2372 	ldrd	r2, r3, [sp, #456]	; 0x1c8
 8016550:	4694      	mov	ip, r2
 8016552:	ea00 0c0c 	and.w	ip, r0, ip
 8016556:	f8cd c1d0 	str.w	ip, [sp, #464]	; 0x1d0
 801655a:	400b      	ands	r3, r1
 801655c:	9375      	str	r3, [sp, #468]	; 0x1d4
 801655e:	e9dd 23c8 	ldrd	r2, r3, [sp, #800]	; 0x320
 8016562:	e9dd 0174 	ldrd	r0, r1, [sp, #464]	; 0x1d0
 8016566:	4684      	mov	ip, r0
 8016568:	ebb2 0c0c 	subs.w	ip, r2, ip
 801656c:	f8cd c288 	str.w	ip, [sp, #648]	; 0x288
 8016570:	eb63 0301 	sbc.w	r3, r3, r1
 8016574:	93a3      	str	r3, [sp, #652]	; 0x28c
 8016576:	e9dd 23a2 	ldrd	r2, r3, [sp, #648]	; 0x288
 801657a:	e9cd 23c8 	strd	r2, r3, [sp, #800]	; 0x320
		qa -= (qa + qa) & -(int64_t)(r >> 1);
 801657e:	e9dd 23c6 	ldrd	r2, r3, [sp, #792]	; 0x318
 8016582:	1891      	adds	r1, r2, r2
 8016584:	91a4      	str	r1, [sp, #656]	; 0x290
 8016586:	415b      	adcs	r3, r3
 8016588:	93a5      	str	r3, [sp, #660]	; 0x294
 801658a:	e9dd 01a4 	ldrd	r0, r1, [sp, #656]	; 0x290
 801658e:	9bba      	ldr	r3, [sp, #744]	; 0x2e8
 8016590:	085b      	lsrs	r3, r3, #1
 8016592:	2200      	movs	r2, #0
 8016594:	9318      	str	r3, [sp, #96]	; 0x60
 8016596:	9219      	str	r2, [sp, #100]	; 0x64
 8016598:	2300      	movs	r3, #0
 801659a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801659c:	4252      	negs	r2, r2
 801659e:	9276      	str	r2, [sp, #472]	; 0x1d8
 80165a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80165a2:	eb63 0302 	sbc.w	r3, r3, r2
 80165a6:	9377      	str	r3, [sp, #476]	; 0x1dc
 80165a8:	e9dd 2376 	ldrd	r2, r3, [sp, #472]	; 0x1d8
 80165ac:	4694      	mov	ip, r2
 80165ae:	ea00 0c0c 	and.w	ip, r0, ip
 80165b2:	f8cd c1e0 	str.w	ip, [sp, #480]	; 0x1e0
 80165b6:	400b      	ands	r3, r1
 80165b8:	9379      	str	r3, [sp, #484]	; 0x1e4
 80165ba:	e9dd 23c6 	ldrd	r2, r3, [sp, #792]	; 0x318
 80165be:	e9dd 0178 	ldrd	r0, r1, [sp, #480]	; 0x1e0
 80165c2:	4684      	mov	ip, r0
 80165c4:	ebb2 0c0c 	subs.w	ip, r2, ip
 80165c8:	f8cd c298 	str.w	ip, [sp, #664]	; 0x298
 80165cc:	eb63 0301 	sbc.w	r3, r3, r1
 80165d0:	93a7      	str	r3, [sp, #668]	; 0x29c
 80165d2:	e9dd 23a6 	ldrd	r2, r3, [sp, #664]	; 0x298
 80165d6:	e9cd 23c6 	strd	r2, r3, [sp, #792]	; 0x318
		qb -= (qb + qb) & -(int64_t)(r >> 1);
 80165da:	e9dd 23c4 	ldrd	r2, r3, [sp, #784]	; 0x310
 80165de:	1891      	adds	r1, r2, r2
 80165e0:	91a8      	str	r1, [sp, #672]	; 0x2a0
 80165e2:	415b      	adcs	r3, r3
 80165e4:	93a9      	str	r3, [sp, #676]	; 0x2a4
 80165e6:	e9dd 01a8 	ldrd	r0, r1, [sp, #672]	; 0x2a0
 80165ea:	9bba      	ldr	r3, [sp, #744]	; 0x2e8
 80165ec:	085b      	lsrs	r3, r3, #1
 80165ee:	2200      	movs	r2, #0
 80165f0:	931a      	str	r3, [sp, #104]	; 0x68
 80165f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80165f4:	2300      	movs	r3, #0
 80165f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80165f8:	4252      	negs	r2, r2
 80165fa:	927a      	str	r2, [sp, #488]	; 0x1e8
 80165fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80165fe:	eb63 0302 	sbc.w	r3, r3, r2
 8016602:	937b      	str	r3, [sp, #492]	; 0x1ec
 8016604:	e9dd 237a 	ldrd	r2, r3, [sp, #488]	; 0x1e8
 8016608:	4694      	mov	ip, r2
 801660a:	ea00 0c0c 	and.w	ip, r0, ip
 801660e:	f8cd c1f0 	str.w	ip, [sp, #496]	; 0x1f0
 8016612:	400b      	ands	r3, r1
 8016614:	937d      	str	r3, [sp, #500]	; 0x1f4
 8016616:	e9dd 23c4 	ldrd	r2, r3, [sp, #784]	; 0x310
 801661a:	e9dd 017c 	ldrd	r0, r1, [sp, #496]	; 0x1f0
 801661e:	4684      	mov	ip, r0
 8016620:	ebb2 0c0c 	subs.w	ip, r2, ip
 8016624:	f8cd c2a8 	str.w	ip, [sp, #680]	; 0x2a8
 8016628:	eb63 0301 	sbc.w	r3, r3, r1
 801662c:	93ab      	str	r3, [sp, #684]	; 0x2ac
 801662e:	e9dd 23aa 	ldrd	r2, r3, [sp, #680]	; 0x2a8
 8016632:	e9cd 23c4 	strd	r2, r3, [sp, #784]	; 0x310
		zint_co_reduce_mod(u0, u1, y, len, y0i, pa, pb, qa, qb);
 8016636:	e9dd 23c4 	ldrd	r2, r3, [sp, #784]	; 0x310
 801663a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801663e:	e9dd 23c6 	ldrd	r2, r3, [sp, #792]	; 0x318
 8016642:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016646:	e9dd 23c8 	ldrd	r2, r3, [sp, #800]	; 0x320
 801664a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801664e:	e9dd 23ca 	ldrd	r2, r3, [sp, #808]	; 0x328
 8016652:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016656:	9bbb      	ldr	r3, [sp, #748]	; 0x2ec
 8016658:	9300      	str	r3, [sp, #0]
 801665a:	9be6      	ldr	r3, [sp, #920]	; 0x398
 801665c:	9aac      	ldr	r2, [sp, #688]	; 0x2b0
 801665e:	99c0      	ldr	r1, [sp, #768]	; 0x300
 8016660:	98c2      	ldr	r0, [sp, #776]	; 0x308
 8016662:	f7ff f9ed 	bl	8015a40 <zint_co_reduce_mod>
		zint_co_reduce_mod(v0, v1, x, len, x0i, pa, pb, qa, qb);
 8016666:	e9dd 23c4 	ldrd	r2, r3, [sp, #784]	; 0x310
 801666a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801666e:	e9dd 23c6 	ldrd	r2, r3, [sp, #792]	; 0x318
 8016672:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016676:	e9dd 23c8 	ldrd	r2, r3, [sp, #800]	; 0x320
 801667a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801667e:	e9dd 23ca 	ldrd	r2, r3, [sp, #808]	; 0x328
 8016682:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016686:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 8016688:	9300      	str	r3, [sp, #0]
 801668a:	9be6      	ldr	r3, [sp, #920]	; 0x398
 801668c:	9aad      	ldr	r2, [sp, #692]	; 0x2b4
 801668e:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
 8016690:	98c1      	ldr	r0, [sp, #772]	; 0x304
 8016692:	f7ff f9d5 	bl	8015a40 <zint_co_reduce_mod>
	for (num = 62 * (uint32_t)len + 30; num >= 30; num -= 30) {
 8016696:	9bdb      	ldr	r3, [sp, #876]	; 0x36c
 8016698:	3b1e      	subs	r3, #30
 801669a:	93db      	str	r3, [sp, #876]	; 0x36c
 801669c:	9bdb      	ldr	r3, [sp, #876]	; 0x36c
 801669e:	2b1d      	cmp	r3, #29
 80166a0:	f63f abba 	bhi.w	8015e18 <zint_bezout+0xd8>
	 * At that point, array a[] should contain the GCD, and the
	 * results (u,v) should already be set. We check that the GCD
	 * is indeed 1. We also check that the two operands x and y
	 * are odd.
	 */
	rc = a[0] ^ 1;
 80166a4:	9bbe      	ldr	r3, [sp, #760]	; 0x2f8
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	f083 0301 	eor.w	r3, r3, #1
 80166ac:	93da      	str	r3, [sp, #872]	; 0x368
	for (j = 1; j < len; j ++) {
 80166ae:	2301      	movs	r3, #1
 80166b0:	93d9      	str	r3, [sp, #868]	; 0x364
 80166b2:	e00a      	b.n	80166ca <zint_bezout+0x98a>
		rc |= a[j];
 80166b4:	9bd9      	ldr	r3, [sp, #868]	; 0x364
 80166b6:	009b      	lsls	r3, r3, #2
 80166b8:	9abe      	ldr	r2, [sp, #760]	; 0x2f8
 80166ba:	4413      	add	r3, r2
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	9ada      	ldr	r2, [sp, #872]	; 0x368
 80166c0:	4313      	orrs	r3, r2
 80166c2:	93da      	str	r3, [sp, #872]	; 0x368
	for (j = 1; j < len; j ++) {
 80166c4:	9bd9      	ldr	r3, [sp, #868]	; 0x364
 80166c6:	3301      	adds	r3, #1
 80166c8:	93d9      	str	r3, [sp, #868]	; 0x364
 80166ca:	9ad9      	ldr	r2, [sp, #868]	; 0x364
 80166cc:	9be6      	ldr	r3, [sp, #920]	; 0x398
 80166ce:	429a      	cmp	r2, r3
 80166d0:	d3f0      	bcc.n	80166b4 <zint_bezout+0x974>
	}
	return (int)((1 - ((rc | -rc) >> 31)) & x[0] & y[0]);
 80166d2:	9bda      	ldr	r3, [sp, #872]	; 0x368
 80166d4:	425a      	negs	r2, r3
 80166d6:	9bda      	ldr	r3, [sp, #872]	; 0x368
 80166d8:	4313      	orrs	r3, r2
 80166da:	17db      	asrs	r3, r3, #31
 80166dc:	1c5a      	adds	r2, r3, #1
 80166de:	9bad      	ldr	r3, [sp, #692]	; 0x2b4
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	401a      	ands	r2, r3
 80166e4:	9bac      	ldr	r3, [sp, #688]	; 0x2b0
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	4013      	ands	r3, r2
}
 80166ea:	4618      	mov	r0, r3
 80166ec:	f50d 7d5d 	add.w	sp, sp, #884	; 0x374
 80166f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016700 <zint_add_scaled_mul_small>:
 */
static void
zint_add_scaled_mul_small(uint32_t *restrict x, size_t xlen,
	const uint32_t *restrict y, size_t ylen, int32_t k,
	uint32_t sch, uint32_t scl)
{
 8016700:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8016704:	b096      	sub	sp, #88	; 0x58
 8016706:	9009      	str	r0, [sp, #36]	; 0x24
 8016708:	9108      	str	r1, [sp, #32]
 801670a:	9207      	str	r2, [sp, #28]
 801670c:	9306      	str	r3, [sp, #24]
	size_t u;
	uint32_t ysign, tw;
	int32_t cc;

	if (ylen == 0) {
 801670e:	9b06      	ldr	r3, [sp, #24]
 8016710:	2b00      	cmp	r3, #0
 8016712:	f000 8082 	beq.w	801681a <zint_add_scaled_mul_small+0x11a>
		return;
	}

	ysign = -(y[ylen - 1] >> 30) >> 1;
 8016716:	9b06      	ldr	r3, [sp, #24]
 8016718:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801671c:	3b01      	subs	r3, #1
 801671e:	009a      	lsls	r2, r3, #2
 8016720:	9b07      	ldr	r3, [sp, #28]
 8016722:	4413      	add	r3, r2
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	0f9b      	lsrs	r3, r3, #30
 8016728:	425b      	negs	r3, r3
 801672a:	085b      	lsrs	r3, r3, #1
 801672c:	9312      	str	r3, [sp, #72]	; 0x48
	tw = 0;
 801672e:	2300      	movs	r3, #0
 8016730:	9314      	str	r3, [sp, #80]	; 0x50
	cc = 0;
 8016732:	2300      	movs	r3, #0
 8016734:	9313      	str	r3, [sp, #76]	; 0x4c
	for (u = sch; u < xlen; u ++) {
 8016736:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016738:	9315      	str	r3, [sp, #84]	; 0x54
 801673a:	e069      	b.n	8016810 <zint_add_scaled_mul_small+0x110>
		uint64_t z;

		/*
		 * Get the next word of y (scaled).
		 */
		v = u - sch;
 801673c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801673e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016740:	1ad3      	subs	r3, r2, r3
 8016742:	9311      	str	r3, [sp, #68]	; 0x44
		wy = v < ylen ? y[v] : ysign;
 8016744:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016746:	9b06      	ldr	r3, [sp, #24]
 8016748:	429a      	cmp	r2, r3
 801674a:	d205      	bcs.n	8016758 <zint_add_scaled_mul_small+0x58>
 801674c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801674e:	009a      	lsls	r2, r3, #2
 8016750:	9b07      	ldr	r3, [sp, #28]
 8016752:	4413      	add	r3, r2
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	e000      	b.n	801675a <zint_add_scaled_mul_small+0x5a>
 8016758:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801675a:	9310      	str	r3, [sp, #64]	; 0x40
		wys = ((wy << scl) & 0x7FFFFFFF) | tw;
 801675c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801675e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016760:	fa02 f303 	lsl.w	r3, r2, r3
 8016764:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016768:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801676a:	4313      	orrs	r3, r2
 801676c:	930f      	str	r3, [sp, #60]	; 0x3c
		tw = wy >> (31 - scl);
 801676e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016770:	f1c3 021f 	rsb	r2, r3, #31
 8016774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016776:	40d3      	lsrs	r3, r2
 8016778:	9314      	str	r3, [sp, #80]	; 0x50

		/*
		 * The expression below does not overflow.
		 */
		z = (uint64_t)((int64_t)wys * (int64_t)k + (int64_t)x[u] + cc);
 801677a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801677c:	2200      	movs	r2, #0
 801677e:	4698      	mov	r8, r3
 8016780:	4691      	mov	r9, r2
 8016782:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016784:	17da      	asrs	r2, r3, #31
 8016786:	469a      	mov	sl, r3
 8016788:	4693      	mov	fp, r2
 801678a:	fb0a f209 	mul.w	r2, sl, r9
 801678e:	fb08 f30b 	mul.w	r3, r8, fp
 8016792:	4413      	add	r3, r2
 8016794:	fba8 450a 	umull	r4, r5, r8, sl
 8016798:	442b      	add	r3, r5
 801679a:	461d      	mov	r5, r3
 801679c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801679e:	009a      	lsls	r2, r3, #2
 80167a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167a2:	4413      	add	r3, r2
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	2200      	movs	r2, #0
 80167a8:	9300      	str	r3, [sp, #0]
 80167aa:	9201      	str	r2, [sp, #4]
 80167ac:	e9dd 1200 	ldrd	r1, r2, [sp]
 80167b0:	460b      	mov	r3, r1
 80167b2:	18e6      	adds	r6, r4, r3
 80167b4:	4613      	mov	r3, r2
 80167b6:	eb45 0703 	adc.w	r7, r5, r3
 80167ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80167bc:	17da      	asrs	r2, r3, #31
 80167be:	9302      	str	r3, [sp, #8]
 80167c0:	9203      	str	r2, [sp, #12]
 80167c2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80167c6:	460b      	mov	r3, r1
 80167c8:	18f3      	adds	r3, r6, r3
 80167ca:	9304      	str	r3, [sp, #16]
 80167cc:	4613      	mov	r3, r2
 80167ce:	eb47 0303 	adc.w	r3, r7, r3
 80167d2:	9305      	str	r3, [sp, #20]
 80167d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80167d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		x[u] = (uint32_t)z & 0x7FFFFFFF;
 80167dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80167de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167e0:	009a      	lsls	r2, r3, #2
 80167e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167e4:	441a      	add	r2, r3
 80167e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80167ea:	6013      	str	r3, [r2, #0]
		 * then convert it back to signed by using the guaranteed
		 * fact that 'int32_t' uses two's complement with no
		 * trap representation or padding bit, and with a layout
		 * compatible with that of 'uint32_t'.
		 */
		ccu = (uint32_t)(z >> 31);
 80167ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80167f0:	f04f 0000 	mov.w	r0, #0
 80167f4:	f04f 0100 	mov.w	r1, #0
 80167f8:	0fd0      	lsrs	r0, r2, #31
 80167fa:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80167fe:	0fd9      	lsrs	r1, r3, #31
 8016800:	4603      	mov	r3, r0
 8016802:	930b      	str	r3, [sp, #44]	; 0x2c
		cc = *(int32_t *)&ccu;
 8016804:	ab0b      	add	r3, sp, #44	; 0x2c
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	9313      	str	r3, [sp, #76]	; 0x4c
	for (u = sch; u < xlen; u ++) {
 801680a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801680c:	3301      	adds	r3, #1
 801680e:	9315      	str	r3, [sp, #84]	; 0x54
 8016810:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016812:	9b08      	ldr	r3, [sp, #32]
 8016814:	429a      	cmp	r2, r3
 8016816:	d391      	bcc.n	801673c <zint_add_scaled_mul_small+0x3c>
 8016818:	e000      	b.n	801681c <zint_add_scaled_mul_small+0x11c>
		return;
 801681a:	bf00      	nop
	}
}
 801681c:	b016      	add	sp, #88	; 0x58
 801681e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8016822:	4770      	bx	lr
	...

08016830 <zint_sub_scaled>:
 * negative values.
 */
static void
zint_sub_scaled(uint32_t *restrict x, size_t xlen,
	const uint32_t *restrict y, size_t ylen, uint32_t sch, uint32_t scl)
{
 8016830:	b08c      	sub	sp, #48	; 0x30
 8016832:	9003      	str	r0, [sp, #12]
 8016834:	9102      	str	r1, [sp, #8]
 8016836:	9201      	str	r2, [sp, #4]
 8016838:	9300      	str	r3, [sp, #0]
	size_t u;
	uint32_t ysign, tw;
	uint32_t cc;

	if (ylen == 0) {
 801683a:	9b00      	ldr	r3, [sp, #0]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d04f      	beq.n	80168e0 <zint_sub_scaled+0xb0>
		return;
	}

	ysign = -(y[ylen - 1] >> 30) >> 1;
 8016840:	9b00      	ldr	r3, [sp, #0]
 8016842:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016846:	3b01      	subs	r3, #1
 8016848:	009b      	lsls	r3, r3, #2
 801684a:	9a01      	ldr	r2, [sp, #4]
 801684c:	4413      	add	r3, r2
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	0f9b      	lsrs	r3, r3, #30
 8016852:	425b      	negs	r3, r3
 8016854:	085b      	lsrs	r3, r3, #1
 8016856:	9308      	str	r3, [sp, #32]
	tw = 0;
 8016858:	2300      	movs	r3, #0
 801685a:	930a      	str	r3, [sp, #40]	; 0x28
	cc = 0;
 801685c:	2300      	movs	r3, #0
 801685e:	9309      	str	r3, [sp, #36]	; 0x24
	for (u = sch; u < xlen; u ++) {
 8016860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016862:	930b      	str	r3, [sp, #44]	; 0x2c
 8016864:	e037      	b.n	80168d6 <zint_sub_scaled+0xa6>
		uint32_t w, wy, wys;

		/*
		 * Get the next word of y (scaled).
		 */
		v = u - sch;
 8016866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801686a:	1ad3      	subs	r3, r2, r3
 801686c:	9307      	str	r3, [sp, #28]
		wy = v < ylen ? y[v] : ysign;
 801686e:	9a07      	ldr	r2, [sp, #28]
 8016870:	9b00      	ldr	r3, [sp, #0]
 8016872:	429a      	cmp	r2, r3
 8016874:	d205      	bcs.n	8016882 <zint_sub_scaled+0x52>
 8016876:	9b07      	ldr	r3, [sp, #28]
 8016878:	009b      	lsls	r3, r3, #2
 801687a:	9a01      	ldr	r2, [sp, #4]
 801687c:	4413      	add	r3, r2
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	e000      	b.n	8016884 <zint_sub_scaled+0x54>
 8016882:	9b08      	ldr	r3, [sp, #32]
 8016884:	9306      	str	r3, [sp, #24]
		wys = ((wy << scl) & 0x7FFFFFFF) | tw;
 8016886:	9a06      	ldr	r2, [sp, #24]
 8016888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801688a:	fa02 f303 	lsl.w	r3, r2, r3
 801688e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016894:	4313      	orrs	r3, r2
 8016896:	9305      	str	r3, [sp, #20]
		tw = wy >> (31 - scl);
 8016898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801689a:	f1c3 031f 	rsb	r3, r3, #31
 801689e:	9a06      	ldr	r2, [sp, #24]
 80168a0:	fa22 f303 	lsr.w	r3, r2, r3
 80168a4:	930a      	str	r3, [sp, #40]	; 0x28

		w = x[u] - wys - cc;
 80168a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168a8:	009b      	lsls	r3, r3, #2
 80168aa:	9a03      	ldr	r2, [sp, #12]
 80168ac:	4413      	add	r3, r2
 80168ae:	681a      	ldr	r2, [r3, #0]
 80168b0:	9b05      	ldr	r3, [sp, #20]
 80168b2:	1ad2      	subs	r2, r2, r3
 80168b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168b6:	1ad3      	subs	r3, r2, r3
 80168b8:	9304      	str	r3, [sp, #16]
		x[u] = w & 0x7FFFFFFF;
 80168ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168bc:	009b      	lsls	r3, r3, #2
 80168be:	9a03      	ldr	r2, [sp, #12]
 80168c0:	4413      	add	r3, r2
 80168c2:	9a04      	ldr	r2, [sp, #16]
 80168c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80168c8:	601a      	str	r2, [r3, #0]
		cc = w >> 31;
 80168ca:	9b04      	ldr	r3, [sp, #16]
 80168cc:	0fdb      	lsrs	r3, r3, #31
 80168ce:	9309      	str	r3, [sp, #36]	; 0x24
	for (u = sch; u < xlen; u ++) {
 80168d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168d2:	3301      	adds	r3, #1
 80168d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80168d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80168d8:	9b02      	ldr	r3, [sp, #8]
 80168da:	429a      	cmp	r2, r3
 80168dc:	d3c3      	bcc.n	8016866 <zint_sub_scaled+0x36>
 80168de:	e000      	b.n	80168e2 <zint_sub_scaled+0xb2>
		return;
 80168e0:	bf00      	nop
	}
}
 80168e2:	b00c      	add	sp, #48	; 0x30
 80168e4:	4770      	bx	lr
 80168e6:	bf00      	nop
	...

080168f0 <zint_one_to_plain>:
/*
 * Convert a one-word signed big integer into a signed value.
 */
static inline int32_t
zint_one_to_plain(const uint32_t *x)
{
 80168f0:	b084      	sub	sp, #16
 80168f2:	9001      	str	r0, [sp, #4]
	uint32_t w;

	w = x[0];
 80168f4:	9b01      	ldr	r3, [sp, #4]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	9303      	str	r3, [sp, #12]
	w |= (w & 0x40000000) << 1;
 80168fa:	9b03      	ldr	r3, [sp, #12]
 80168fc:	005b      	lsls	r3, r3, #1
 80168fe:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8016902:	9b03      	ldr	r3, [sp, #12]
 8016904:	4313      	orrs	r3, r2
 8016906:	9303      	str	r3, [sp, #12]
	return *(int32_t *)&w;
 8016908:	ab03      	add	r3, sp, #12
 801690a:	681b      	ldr	r3, [r3, #0]
}
 801690c:	4618      	mov	r0, r3
 801690e:	b004      	add	sp, #16
 8016910:	4770      	bx	lr
 8016912:	bf00      	nop
	...

08016920 <poly_big_to_fp>:
 * but upper.
 */
static void
poly_big_to_fp(fpr *d, const uint32_t *f, size_t flen, size_t fstride,
	unsigned logn)
{
 8016920:	b530      	push	{r4, r5, lr}
 8016922:	b091      	sub	sp, #68	; 0x44
 8016924:	9003      	str	r0, [sp, #12]
 8016926:	9102      	str	r1, [sp, #8]
 8016928:	9201      	str	r2, [sp, #4]
 801692a:	9300      	str	r3, [sp, #0]
	size_t n, u;

	n = MKN(logn);
 801692c:	2201      	movs	r2, #1
 801692e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016930:	fa02 f303 	lsl.w	r3, r2, r3
 8016934:	9307      	str	r3, [sp, #28]
	if (flen == 0) {
 8016936:	9b01      	ldr	r3, [sp, #4]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d114      	bne.n	8016966 <poly_big_to_fp+0x46>
		for (u = 0; u < n; u ++) {
 801693c:	2300      	movs	r3, #0
 801693e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016940:	e00c      	b.n	801695c <poly_big_to_fp+0x3c>
			d[u] = fpr_zero;
 8016942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016944:	00db      	lsls	r3, r3, #3
 8016946:	9a03      	ldr	r2, [sp, #12]
 8016948:	18d1      	adds	r1, r2, r3
 801694a:	f04f 0200 	mov.w	r2, #0
 801694e:	f04f 0300 	mov.w	r3, #0
 8016952:	e9c1 2300 	strd	r2, r3, [r1]
		for (u = 0; u < n; u ++) {
 8016956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016958:	3301      	adds	r3, #1
 801695a:	930f      	str	r3, [sp, #60]	; 0x3c
 801695c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801695e:	9b07      	ldr	r3, [sp, #28]
 8016960:	429a      	cmp	r2, r3
 8016962:	d3ee      	bcc.n	8016942 <poly_big_to_fp+0x22>
		}
		return;
 8016964:	e073      	b.n	8016a4e <poly_big_to_fp+0x12e>
	}
	for (u = 0; u < n; u ++, f += fstride) {
 8016966:	2300      	movs	r3, #0
 8016968:	930f      	str	r3, [sp, #60]	; 0x3c
 801696a:	e06c      	b.n	8016a46 <poly_big_to_fp+0x126>
		/*
		 * Get sign of the integer; if it is negative, then we
		 * will load its absolute value instead, and negate the
		 * result.
		 */
		neg = -(f[flen - 1] >> 30);
 801696c:	9b01      	ldr	r3, [sp, #4]
 801696e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016972:	3b01      	subs	r3, #1
 8016974:	009b      	lsls	r3, r3, #2
 8016976:	9a02      	ldr	r2, [sp, #8]
 8016978:	4413      	add	r3, r2
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	0f9b      	lsrs	r3, r3, #30
 801697e:	425b      	negs	r3, r3
 8016980:	9306      	str	r3, [sp, #24]
		xm = neg >> 1;
 8016982:	9b06      	ldr	r3, [sp, #24]
 8016984:	085b      	lsrs	r3, r3, #1
 8016986:	9305      	str	r3, [sp, #20]
		cc = neg & 1;
 8016988:	9b06      	ldr	r3, [sp, #24]
 801698a:	f003 0301 	and.w	r3, r3, #1
 801698e:	930d      	str	r3, [sp, #52]	; 0x34
		x = fpr_zero;
 8016990:	f04f 0200 	mov.w	r2, #0
 8016994:	f04f 0300 	mov.w	r3, #0
 8016998:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		fsc = fpr_one;
 801699c:	f04f 0200 	mov.w	r2, #0
 80169a0:	4b2c      	ldr	r3, [pc, #176]	; (8016a54 <poly_big_to_fp+0x134>)
 80169a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
		for (v = 0; v < flen; v ++, fsc = fpr_mul(fsc, fpr_ptwo31)) {
 80169a6:	2300      	movs	r3, #0
 80169a8:	930e      	str	r3, [sp, #56]	; 0x38
 80169aa:	e038      	b.n	8016a1e <poly_big_to_fp+0xfe>
			uint32_t w;

			w = (f[v] ^ xm) + cc;
 80169ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80169ae:	009b      	lsls	r3, r3, #2
 80169b0:	9a02      	ldr	r2, [sp, #8]
 80169b2:	4413      	add	r3, r2
 80169b4:	681a      	ldr	r2, [r3, #0]
 80169b6:	9b05      	ldr	r3, [sp, #20]
 80169b8:	405a      	eors	r2, r3
 80169ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169bc:	4413      	add	r3, r2
 80169be:	9304      	str	r3, [sp, #16]
			cc = w >> 31;
 80169c0:	9b04      	ldr	r3, [sp, #16]
 80169c2:	0fdb      	lsrs	r3, r3, #31
 80169c4:	930d      	str	r3, [sp, #52]	; 0x34
			w &= 0x7FFFFFFF;
 80169c6:	9b04      	ldr	r3, [sp, #16]
 80169c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80169cc:	9304      	str	r3, [sp, #16]
			w -= (w << 1) & neg;
 80169ce:	9a04      	ldr	r2, [sp, #16]
 80169d0:	9b04      	ldr	r3, [sp, #16]
 80169d2:	0059      	lsls	r1, r3, #1
 80169d4:	9b06      	ldr	r3, [sp, #24]
 80169d6:	400b      	ands	r3, r1
 80169d8:	1ad3      	subs	r3, r2, r3
 80169da:	9304      	str	r3, [sp, #16]
			x = fpr_add(x, fpr_mul(fpr_of(*(int32_t *)&w), fsc));
 80169dc:	ab04      	add	r3, sp, #16
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	17da      	asrs	r2, r3, #31
 80169e2:	461c      	mov	r4, r3
 80169e4:	4615      	mov	r5, r2
 80169e6:	4620      	mov	r0, r4
 80169e8:	4629      	mov	r1, r5
 80169ea:	f7fd ff79 	bl	80148e0 <fpr_of.lto_priv.1>
 80169ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80169f2:	f7fc fd45 	bl	8013480 <falcon_inner_fpr_mul>
 80169f6:	4602      	mov	r2, r0
 80169f8:	460b      	mov	r3, r1
 80169fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80169fe:	f7fc fc97 	bl	8013330 <falcon_inner_fpr_add>
 8016a02:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		for (v = 0; v < flen; v ++, fsc = fpr_mul(fsc, fpr_ptwo31)) {
 8016a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a08:	3301      	adds	r3, #1
 8016a0a:	930e      	str	r3, [sp, #56]	; 0x38
 8016a0c:	f04f 0200 	mov.w	r2, #0
 8016a10:	4b11      	ldr	r3, [pc, #68]	; (8016a58 <poly_big_to_fp+0x138>)
 8016a12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016a16:	f7fc fd33 	bl	8013480 <falcon_inner_fpr_mul>
 8016a1a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016a1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a20:	9b01      	ldr	r3, [sp, #4]
 8016a22:	429a      	cmp	r2, r3
 8016a24:	d3c2      	bcc.n	80169ac <poly_big_to_fp+0x8c>
		}
		d[u] = x;
 8016a26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a28:	00db      	lsls	r3, r3, #3
 8016a2a:	9a03      	ldr	r2, [sp, #12]
 8016a2c:	18d1      	adds	r1, r2, r3
 8016a2e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016a32:	e9c1 2300 	strd	r2, r3, [r1]
	for (u = 0; u < n; u ++, f += fstride) {
 8016a36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a38:	3301      	adds	r3, #1
 8016a3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a3c:	9b00      	ldr	r3, [sp, #0]
 8016a3e:	009b      	lsls	r3, r3, #2
 8016a40:	9a02      	ldr	r2, [sp, #8]
 8016a42:	4413      	add	r3, r2
 8016a44:	9302      	str	r3, [sp, #8]
 8016a46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a48:	9b07      	ldr	r3, [sp, #28]
 8016a4a:	429a      	cmp	r2, r3
 8016a4c:	d38e      	bcc.n	801696c <poly_big_to_fp+0x4c>
	}
}
 8016a4e:	b011      	add	sp, #68	; 0x44
 8016a50:	bd30      	pop	{r4, r5, pc}
 8016a52:	bf00      	nop
 8016a54:	3ff00000 	.word	0x3ff00000
 8016a58:	41e00000 	.word	0x41e00000
 8016a5c:	00000000 	.word	0x00000000

08016a60 <poly_big_to_small>:
 * any failure, the NTRU-solving process will be deemed to have failed
 * and the (f,g) polynomials will be discarded.
 */
static int
poly_big_to_small(int8_t *d, const uint32_t *s, int lim, unsigned logn)
{
 8016a60:	b500      	push	{lr}
 8016a62:	b089      	sub	sp, #36	; 0x24
 8016a64:	9003      	str	r0, [sp, #12]
 8016a66:	9102      	str	r1, [sp, #8]
 8016a68:	9201      	str	r2, [sp, #4]
 8016a6a:	9300      	str	r3, [sp, #0]
	size_t n, u;

	n = MKN(logn);
 8016a6c:	2201      	movs	r2, #1
 8016a6e:	9b00      	ldr	r3, [sp, #0]
 8016a70:	fa02 f303 	lsl.w	r3, r2, r3
 8016a74:	9306      	str	r3, [sp, #24]
	for (u = 0; u < n; u ++) {
 8016a76:	2300      	movs	r3, #0
 8016a78:	9307      	str	r3, [sp, #28]
 8016a7a:	e01b      	b.n	8016ab4 <poly_big_to_small+0x54>
		int32_t z;

		z = zint_one_to_plain(s + u);
 8016a7c:	9b07      	ldr	r3, [sp, #28]
 8016a7e:	009b      	lsls	r3, r3, #2
 8016a80:	9a02      	ldr	r2, [sp, #8]
 8016a82:	4413      	add	r3, r2
 8016a84:	4618      	mov	r0, r3
 8016a86:	f7ff ff33 	bl	80168f0 <zint_one_to_plain>
 8016a8a:	9005      	str	r0, [sp, #20]
		if (z < -lim || z > lim) {
 8016a8c:	9b01      	ldr	r3, [sp, #4]
 8016a8e:	425b      	negs	r3, r3
 8016a90:	9a05      	ldr	r2, [sp, #20]
 8016a92:	429a      	cmp	r2, r3
 8016a94:	db03      	blt.n	8016a9e <poly_big_to_small+0x3e>
 8016a96:	9a05      	ldr	r2, [sp, #20]
 8016a98:	9b01      	ldr	r3, [sp, #4]
 8016a9a:	429a      	cmp	r2, r3
 8016a9c:	dd01      	ble.n	8016aa2 <poly_big_to_small+0x42>
			return 0;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	e00d      	b.n	8016abe <poly_big_to_small+0x5e>
		}
		d[u] = (int8_t)z;
 8016aa2:	9a03      	ldr	r2, [sp, #12]
 8016aa4:	9b07      	ldr	r3, [sp, #28]
 8016aa6:	4413      	add	r3, r2
 8016aa8:	9a05      	ldr	r2, [sp, #20]
 8016aaa:	b252      	sxtb	r2, r2
 8016aac:	701a      	strb	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 8016aae:	9b07      	ldr	r3, [sp, #28]
 8016ab0:	3301      	adds	r3, #1
 8016ab2:	9307      	str	r3, [sp, #28]
 8016ab4:	9a07      	ldr	r2, [sp, #28]
 8016ab6:	9b06      	ldr	r3, [sp, #24]
 8016ab8:	429a      	cmp	r2, r3
 8016aba:	d3df      	bcc.n	8016a7c <poly_big_to_small+0x1c>
	}
	return 1;
 8016abc:	2301      	movs	r3, #1
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	b009      	add	sp, #36	; 0x24
 8016ac2:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ac6:	bf00      	nop
	...

08016ad0 <poly_sub_scaled>:
 */
static void
poly_sub_scaled(uint32_t *restrict F, size_t Flen, size_t Fstride,
	const uint32_t *restrict f, size_t flen, size_t fstride,
	const int32_t *restrict k, uint32_t sch, uint32_t scl, unsigned logn)
{
 8016ad0:	b500      	push	{lr}
 8016ad2:	b08f      	sub	sp, #60	; 0x3c
 8016ad4:	9007      	str	r0, [sp, #28]
 8016ad6:	9106      	str	r1, [sp, #24]
 8016ad8:	9205      	str	r2, [sp, #20]
 8016ada:	9304      	str	r3, [sp, #16]
	size_t n, u;

	n = MKN(logn);
 8016adc:	2201      	movs	r2, #1
 8016ade:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8016ae4:	9308      	str	r3, [sp, #32]
	for (u = 0; u < n; u ++) {
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	930d      	str	r3, [sp, #52]	; 0x34
 8016aea:	e040      	b.n	8016b6e <poly_sub_scaled+0x9e>
		int32_t kf;
		size_t v;
		uint32_t *x;
		const uint32_t *y;

		kf = -k[u];
 8016aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016aee:	009b      	lsls	r3, r3, #2
 8016af0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016af2:	4413      	add	r3, r2
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	425b      	negs	r3, r3
 8016af8:	930c      	str	r3, [sp, #48]	; 0x30
		x = F + u * Fstride;
 8016afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016afc:	9a05      	ldr	r2, [sp, #20]
 8016afe:	fb02 f303 	mul.w	r3, r2, r3
 8016b02:	009b      	lsls	r3, r3, #2
 8016b04:	9a07      	ldr	r2, [sp, #28]
 8016b06:	4413      	add	r3, r2
 8016b08:	930a      	str	r3, [sp, #40]	; 0x28
		y = f;
 8016b0a:	9b04      	ldr	r3, [sp, #16]
 8016b0c:	9309      	str	r3, [sp, #36]	; 0x24
		for (v = 0; v < n; v ++) {
 8016b0e:	2300      	movs	r3, #0
 8016b10:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b12:	e025      	b.n	8016b60 <poly_sub_scaled+0x90>
			zint_add_scaled_mul_small(
 8016b14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016b16:	9302      	str	r3, [sp, #8]
 8016b18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b1a:	9301      	str	r3, [sp, #4]
 8016b1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b1e:	9300      	str	r3, [sp, #0]
 8016b20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b24:	9906      	ldr	r1, [sp, #24]
 8016b26:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b28:	f7ff fdea 	bl	8016700 <zint_add_scaled_mul_small>
				x, Flen, y, flen, kf, sch, scl);
			if (u + v == n - 1) {
 8016b2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b30:	441a      	add	r2, r3
 8016b32:	9b08      	ldr	r3, [sp, #32]
 8016b34:	3b01      	subs	r3, #1
 8016b36:	429a      	cmp	r2, r3
 8016b38:	d105      	bne.n	8016b46 <poly_sub_scaled+0x76>
				x = F;
 8016b3a:	9b07      	ldr	r3, [sp, #28]
 8016b3c:	930a      	str	r3, [sp, #40]	; 0x28
				kf = -kf;
 8016b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b40:	425b      	negs	r3, r3
 8016b42:	930c      	str	r3, [sp, #48]	; 0x30
 8016b44:	e004      	b.n	8016b50 <poly_sub_scaled+0x80>
			} else {
				x += Fstride;
 8016b46:	9b05      	ldr	r3, [sp, #20]
 8016b48:	009b      	lsls	r3, r3, #2
 8016b4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b4c:	4413      	add	r3, r2
 8016b4e:	930a      	str	r3, [sp, #40]	; 0x28
			}
			y += fstride;
 8016b50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b52:	009b      	lsls	r3, r3, #2
 8016b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b56:	4413      	add	r3, r2
 8016b58:	9309      	str	r3, [sp, #36]	; 0x24
		for (v = 0; v < n; v ++) {
 8016b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b5c:	3301      	adds	r3, #1
 8016b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b62:	9b08      	ldr	r3, [sp, #32]
 8016b64:	429a      	cmp	r2, r3
 8016b66:	d3d5      	bcc.n	8016b14 <poly_sub_scaled+0x44>
	for (u = 0; u < n; u ++) {
 8016b68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b6a:	3301      	adds	r3, #1
 8016b6c:	930d      	str	r3, [sp, #52]	; 0x34
 8016b6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016b70:	9b08      	ldr	r3, [sp, #32]
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d3ba      	bcc.n	8016aec <poly_sub_scaled+0x1c>
		}
	}
}
 8016b76:	bf00      	nop
 8016b78:	bf00      	nop
 8016b7a:	b00f      	add	sp, #60	; 0x3c
 8016b7c:	f85d fb04 	ldr.w	pc, [sp], #4

08016b80 <poly_sub_scaled_ntt>:
static void
poly_sub_scaled_ntt(uint32_t *restrict F, size_t Flen, size_t Fstride,
	const uint32_t *restrict f, size_t flen, size_t fstride,
	const int32_t *restrict k, uint32_t sch, uint32_t scl, unsigned logn,
	uint32_t *restrict tmp)
{
 8016b80:	b510      	push	{r4, lr}
 8016b82:	b098      	sub	sp, #96	; 0x60
 8016b84:	9007      	str	r0, [sp, #28]
 8016b86:	9106      	str	r1, [sp, #24]
 8016b88:	9205      	str	r2, [sp, #20]
 8016b8a:	9304      	str	r3, [sp, #16]
	uint32_t *gm, *igm, *fk, *t1, *x;
	const uint32_t *y;
	size_t n, u, tlen;
	const small_prime *primes;

	n = MKN(logn);
 8016b8c:	2201      	movs	r2, #1
 8016b8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016b90:	fa02 f303 	lsl.w	r3, r2, r3
 8016b94:	9313      	str	r3, [sp, #76]	; 0x4c
	tlen = flen + 1;
 8016b96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016b98:	3301      	adds	r3, #1
 8016b9a:	9312      	str	r3, [sp, #72]	; 0x48
	gm = tmp;
 8016b9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016b9e:	9311      	str	r3, [sp, #68]	; 0x44
	igm = gm + MKN(logn);
 8016ba0:	2204      	movs	r2, #4
 8016ba2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8016ba8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016baa:	4413      	add	r3, r2
 8016bac:	9310      	str	r3, [sp, #64]	; 0x40
	fk = igm + MKN(logn);
 8016bae:	2204      	movs	r2, #4
 8016bb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8016bb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016bb8:	4413      	add	r3, r2
 8016bba:	930f      	str	r3, [sp, #60]	; 0x3c
	t1 = fk + n * tlen;
 8016bbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016bbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016bc0:	fb02 f303 	mul.w	r3, r2, r3
 8016bc4:	009b      	lsls	r3, r3, #2
 8016bc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016bc8:	4413      	add	r3, r2
 8016bca:	930e      	str	r3, [sp, #56]	; 0x38

	primes = PRIMES;
 8016bcc:	4b7b      	ldr	r3, [pc, #492]	; (8016dbc <poly_sub_scaled_ntt+0x23c>)
 8016bce:	930d      	str	r3, [sp, #52]	; 0x34

	/*
	 * Compute k*f in fk[], in RNS notation.
	 */
	for (u = 0; u < tlen; u ++) {
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	9315      	str	r3, [sp, #84]	; 0x54
 8016bd4:	e0ba      	b.n	8016d4c <poly_sub_scaled_ntt+0x1cc>
		uint32_t p, p0i, R2, Rx;
		size_t v;

		p = primes[u].p;
 8016bd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016bd8:	4613      	mov	r3, r2
 8016bda:	005b      	lsls	r3, r3, #1
 8016bdc:	4413      	add	r3, r2
 8016bde:	009b      	lsls	r3, r3, #2
 8016be0:	461a      	mov	r2, r3
 8016be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016be4:	4413      	add	r3, r2
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	930c      	str	r3, [sp, #48]	; 0x30
		p0i = modp_ninv31(p);
 8016bea:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016bec:	f7fd ffd0 	bl	8014b90 <modp_ninv31>
 8016bf0:	900b      	str	r0, [sp, #44]	; 0x2c
		R2 = modp_R2(p, p0i);
 8016bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016bf4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016bf6:	f7fe f8bb 	bl	8014d70 <modp_R2>
 8016bfa:	900a      	str	r0, [sp, #40]	; 0x28
		Rx = modp_Rx((unsigned)flen, p, p0i, R2);
 8016bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016bfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016c00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016c02:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016c04:	f7fe f8f4 	bl	8014df0 <modp_Rx>
 8016c08:	9009      	str	r0, [sp, #36]	; 0x24
		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 8016c0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016c0c:	4613      	mov	r3, r2
 8016c0e:	005b      	lsls	r3, r3, #1
 8016c10:	4413      	add	r3, r2
 8016c12:	009b      	lsls	r3, r3, #2
 8016c14:	461a      	mov	r2, r3
 8016c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c18:	4413      	add	r3, r2
 8016c1a:	685a      	ldr	r2, [r3, #4]
 8016c1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c1e:	9301      	str	r3, [sp, #4]
 8016c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c22:	9300      	str	r3, [sp, #0]
 8016c24:	4613      	mov	r3, r2
 8016c26:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016c28:	9910      	ldr	r1, [sp, #64]	; 0x40
 8016c2a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016c2c:	f7fe f960 	bl	8014ef0 <modp_mkgm2>

		for (v = 0; v < n; v ++) {
 8016c30:	2300      	movs	r3, #0
 8016c32:	9314      	str	r3, [sp, #80]	; 0x50
 8016c34:	e010      	b.n	8016c58 <poly_sub_scaled_ntt+0xd8>
			t1[v] = modp_set(k[v], p);
 8016c36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c38:	009b      	lsls	r3, r3, #2
 8016c3a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016c3c:	4413      	add	r3, r2
 8016c3e:	6818      	ldr	r0, [r3, #0]
 8016c40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c42:	009b      	lsls	r3, r3, #2
 8016c44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016c46:	18d4      	adds	r4, r2, r3
 8016c48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016c4a:	f7fd ff71 	bl	8014b30 <modp_set>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	6023      	str	r3, [r4, #0]
		for (v = 0; v < n; v ++) {
 8016c52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c54:	3301      	adds	r3, #1
 8016c56:	9314      	str	r3, [sp, #80]	; 0x50
 8016c58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016c5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016c5c:	429a      	cmp	r2, r3
 8016c5e:	d3ea      	bcc.n	8016c36 <poly_sub_scaled_ntt+0xb6>
		}
		modp_NTT2(t1, gm, logn, p, p0i);
 8016c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c62:	9301      	str	r3, [sp, #4]
 8016c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c66:	9300      	str	r3, [sp, #0]
 8016c68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016c6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016c6c:	2101      	movs	r1, #1
 8016c6e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016c70:	f7fe f9ae 	bl	8014fd0 <modp_NTT2_ext>
		for (v = 0, y = f, x = fk + u;
 8016c74:	2300      	movs	r3, #0
 8016c76:	9314      	str	r3, [sp, #80]	; 0x50
 8016c78:	9b04      	ldr	r3, [sp, #16]
 8016c7a:	9316      	str	r3, [sp, #88]	; 0x58
 8016c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016c7e:	009b      	lsls	r3, r3, #2
 8016c80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c82:	4413      	add	r3, r2
 8016c84:	9317      	str	r3, [sp, #92]	; 0x5c
 8016c86:	e019      	b.n	8016cbc <poly_sub_scaled_ntt+0x13c>
			v < n; v ++, y += fstride, x += tlen)
		{
			*x = zint_mod_small_signed(y, flen, p, p0i, R2, Rx);
 8016c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c8a:	9301      	str	r3, [sp, #4]
 8016c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c8e:	9300      	str	r3, [sp, #0]
 8016c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016c94:	991a      	ldr	r1, [sp, #104]	; 0x68
 8016c96:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016c98:	f7fe fbba 	bl	8015410 <zint_mod_small_signed>
 8016c9c:	4602      	mov	r2, r0
 8016c9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016ca0:	601a      	str	r2, [r3, #0]
			v < n; v ++, y += fstride, x += tlen)
 8016ca2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016ca4:	3301      	adds	r3, #1
 8016ca6:	9314      	str	r3, [sp, #80]	; 0x50
 8016ca8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016caa:	009b      	lsls	r3, r3, #2
 8016cac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016cae:	4413      	add	r3, r2
 8016cb0:	9316      	str	r3, [sp, #88]	; 0x58
 8016cb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016cb4:	009b      	lsls	r3, r3, #2
 8016cb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016cb8:	4413      	add	r3, r2
 8016cba:	9317      	str	r3, [sp, #92]	; 0x5c
 8016cbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016cbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016cc0:	429a      	cmp	r2, r3
 8016cc2:	d3e1      	bcc.n	8016c88 <poly_sub_scaled_ntt+0x108>
		}
		modp_NTT2_ext(fk + u, tlen, gm, logn, p, p0i);
 8016cc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016cc6:	009b      	lsls	r3, r3, #2
 8016cc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016cca:	18d0      	adds	r0, r2, r3
 8016ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016cce:	9301      	str	r3, [sp, #4]
 8016cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cd2:	9300      	str	r3, [sp, #0]
 8016cd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016cd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016cd8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016cda:	f7fe f979 	bl	8014fd0 <modp_NTT2_ext>
		for (v = 0, x = fk + u; v < n; v ++, x += tlen) {
 8016cde:	2300      	movs	r3, #0
 8016ce0:	9314      	str	r3, [sp, #80]	; 0x50
 8016ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ce4:	009b      	lsls	r3, r3, #2
 8016ce6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016ce8:	4413      	add	r3, r2
 8016cea:	9317      	str	r3, [sp, #92]	; 0x5c
 8016cec:	e01a      	b.n	8016d24 <poly_sub_scaled_ntt+0x1a4>
			*x = modp_montymul(
				modp_montymul(t1[v], *x, p, p0i), R2, p, p0i);
 8016cee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016cf0:	009b      	lsls	r3, r3, #2
 8016cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016cf4:	4413      	add	r3, r2
			*x = modp_montymul(
 8016cf6:	6818      	ldr	r0, [r3, #0]
 8016cf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016cfa:	6819      	ldr	r1, [r3, #0]
 8016cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016d00:	f7fd ffb6 	bl	8014c70 <modp_montymul>
 8016d04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016d08:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016d0a:	f7fd ffb1 	bl	8014c70 <modp_montymul>
 8016d0e:	4602      	mov	r2, r0
 8016d10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d12:	601a      	str	r2, [r3, #0]
		for (v = 0, x = fk + u; v < n; v ++, x += tlen) {
 8016d14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016d16:	3301      	adds	r3, #1
 8016d18:	9314      	str	r3, [sp, #80]	; 0x50
 8016d1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016d1c:	009b      	lsls	r3, r3, #2
 8016d1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016d20:	4413      	add	r3, r2
 8016d22:	9317      	str	r3, [sp, #92]	; 0x5c
 8016d24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016d26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016d28:	429a      	cmp	r2, r3
 8016d2a:	d3e0      	bcc.n	8016cee <poly_sub_scaled_ntt+0x16e>
		}
		modp_iNTT2_ext(fk + u, tlen, igm, logn, p, p0i);
 8016d2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d2e:	009b      	lsls	r3, r3, #2
 8016d30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016d32:	18d0      	adds	r0, r2, r3
 8016d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d36:	9301      	str	r3, [sp, #4]
 8016d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d3a:	9300      	str	r3, [sp, #0]
 8016d3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016d3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016d40:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016d42:	f7fe f9c5 	bl	80150d0 <modp_iNTT2_ext>
	for (u = 0; u < tlen; u ++) {
 8016d46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d48:	3301      	adds	r3, #1
 8016d4a:	9315      	str	r3, [sp, #84]	; 0x54
 8016d4c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016d4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016d50:	429a      	cmp	r2, r3
 8016d52:	f4ff af40 	bcc.w	8016bd6 <poly_sub_scaled_ntt+0x56>
	}

	/*
	 * Rebuild k*f.
	 */
	zint_rebuild_CRT(fk, tlen, tlen, n, primes, 1, t1);
 8016d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d58:	9302      	str	r3, [sp, #8]
 8016d5a:	2301      	movs	r3, #1
 8016d5c:	9301      	str	r3, [sp, #4]
 8016d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d60:	9300      	str	r3, [sp, #0]
 8016d62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016d64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016d66:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016d68:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016d6a:	f7fe fc39 	bl	80155e0 <zint_rebuild_CRT>

	/*
	 * Subtract k*f, scaled, from F.
	 */
	for (u = 0, x = F, y = fk; u < n; u ++, x += Fstride, y += tlen) {
 8016d6e:	2300      	movs	r3, #0
 8016d70:	9315      	str	r3, [sp, #84]	; 0x54
 8016d72:	9b07      	ldr	r3, [sp, #28]
 8016d74:	9317      	str	r3, [sp, #92]	; 0x5c
 8016d76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d78:	9316      	str	r3, [sp, #88]	; 0x58
 8016d7a:	e016      	b.n	8016daa <poly_sub_scaled_ntt+0x22a>
		zint_sub_scaled(x, Flen, y, tlen, sch, scl);
 8016d7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016d7e:	9301      	str	r3, [sp, #4]
 8016d80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016d82:	9300      	str	r3, [sp, #0]
 8016d84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016d86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016d88:	9906      	ldr	r1, [sp, #24]
 8016d8a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016d8c:	f7ff fd50 	bl	8016830 <zint_sub_scaled>
	for (u = 0, x = F, y = fk; u < n; u ++, x += Fstride, y += tlen) {
 8016d90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d92:	3301      	adds	r3, #1
 8016d94:	9315      	str	r3, [sp, #84]	; 0x54
 8016d96:	9b05      	ldr	r3, [sp, #20]
 8016d98:	009b      	lsls	r3, r3, #2
 8016d9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016d9c:	4413      	add	r3, r2
 8016d9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016da2:	009b      	lsls	r3, r3, #2
 8016da4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016da6:	4413      	add	r3, r2
 8016da8:	9316      	str	r3, [sp, #88]	; 0x58
 8016daa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016dac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d3e4      	bcc.n	8016d7c <poly_sub_scaled_ntt+0x1fc>
	}
}
 8016db2:	bf00      	nop
 8016db4:	bf00      	nop
 8016db6:	b018      	add	sp, #96	; 0x60
 8016db8:	bd10      	pop	{r4, pc}
 8016dba:	bf00      	nop
 8016dbc:	080233c0 	.word	0x080233c0

08016dc0 <get_rng_u64>:
 * the same values will be obtained over different platforms, in case
 * a known seed is used.
 */
static inline uint64_t
get_rng_u64(inner_shake256_context *rng)
{
 8016dc0:	b500      	push	{lr}
 8016dc2:	b085      	sub	sp, #20
 8016dc4:	9001      	str	r0, [sp, #4]
	 * 'uint64_t' are guaranteed to have no padding and no trap
	 * representation).
	 */
	uint64_t r;

	inner_shake256_extract(rng, (uint8_t *)&r, sizeof r);
 8016dc6:	ab02      	add	r3, sp, #8
 8016dc8:	2208      	movs	r2, #8
 8016dca:	4619      	mov	r1, r3
 8016dcc:	9801      	ldr	r0, [sp, #4]
 8016dce:	f003 fdef 	bl	801a9b0 <falcon_inner_i_shake256_extract>
	return r;
 8016dd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
}
 8016dd6:	4610      	mov	r0, r2
 8016dd8:	4619      	mov	r1, r3
 8016dda:	b005      	add	sp, #20
 8016ddc:	f85d fb04 	ldr.w	pc, [sp], #4

08016de0 <mkgauss>:
 * sigma*sqrt(2), then we can just generate more values and add them
 * together for lower dimensions.
 */
static int
mkgauss(RNG_CONTEXT *rng, unsigned logn)
{
 8016de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016de4:	b08f      	sub	sp, #60	; 0x3c
 8016de6:	9001      	str	r0, [sp, #4]
 8016de8:	9100      	str	r1, [sp, #0]
	unsigned u, g;
	int val;

	g = 1U << (10 - logn);
 8016dea:	9b00      	ldr	r3, [sp, #0]
 8016dec:	f1c3 030a 	rsb	r3, r3, #10
 8016df0:	2201      	movs	r2, #1
 8016df2:	fa02 f303 	lsl.w	r3, r2, r3
 8016df6:	9309      	str	r3, [sp, #36]	; 0x24
	val = 0;
 8016df8:	2300      	movs	r3, #0
 8016dfa:	930c      	str	r3, [sp, #48]	; 0x30
	for (u = 0; u < g; u ++) {
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	930d      	str	r3, [sp, #52]	; 0x34
 8016e00:	e06f      	b.n	8016ee2 <mkgauss+0x102>
		 * First value:
		 *  - flag 'neg' is randomly selected to be 0 or 1.
		 *  - flag 'f' is set to 1 if the generated value is zero,
		 *    or set to 0 otherwise.
		 */
		r = get_rng_u64(rng);
 8016e02:	9801      	ldr	r0, [sp, #4]
 8016e04:	f7ff ffdc 	bl	8016dc0 <get_rng_u64>
 8016e08:	e9cd 0106 	strd	r0, r1, [sp, #24]
		neg = (uint32_t)(r >> 63);
 8016e0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016e10:	f04f 0200 	mov.w	r2, #0
 8016e14:	f04f 0300 	mov.w	r3, #0
 8016e18:	0fca      	lsrs	r2, r1, #31
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	4613      	mov	r3, r2
 8016e1e:	9305      	str	r3, [sp, #20]
		r &= ~((uint64_t)1 << 63);
 8016e20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016e24:	4690      	mov	r8, r2
 8016e26:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8016e2a:	e9cd 8906 	strd	r8, r9, [sp, #24]
		f = (uint32_t)((r - gauss_1024_12289[0]) >> 63);
 8016e2e:	a133      	add	r1, pc, #204	; (adr r1, 8016efc <mkgauss+0x11c>)
 8016e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016e38:	1a14      	subs	r4, r2, r0
 8016e3a:	eb63 0501 	sbc.w	r5, r3, r1
 8016e3e:	f04f 0200 	mov.w	r2, #0
 8016e42:	f04f 0300 	mov.w	r3, #0
 8016e46:	0fea      	lsrs	r2, r5, #31
 8016e48:	2300      	movs	r3, #0
 8016e4a:	4613      	mov	r3, r2
 8016e4c:	930b      	str	r3, [sp, #44]	; 0x2c
		 * We produce a new random 63-bit integer r, and go over
		 * the array, starting at index 1. We store in v the
		 * index of the first array element which is not greater
		 * than r, unless the flag f was already 1.
		 */
		v = 0;
 8016e4e:	2300      	movs	r3, #0
 8016e50:	9303      	str	r3, [sp, #12]
		r = get_rng_u64(rng);
 8016e52:	9801      	ldr	r0, [sp, #4]
 8016e54:	f7ff ffb4 	bl	8016dc0 <get_rng_u64>
 8016e58:	e9cd 0106 	strd	r0, r1, [sp, #24]
		r &= ~((uint64_t)1 << 63);
 8016e5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016e60:	4692      	mov	sl, r2
 8016e62:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8016e66:	e9cd ab06 	strd	sl, fp, [sp, #24]
		for (k = 1; k < (sizeof gauss_1024_12289)
 8016e6a:	2301      	movs	r3, #1
 8016e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8016e6e:	e026      	b.n	8016ebe <mkgauss+0xde>
			/ (sizeof gauss_1024_12289[0]); k ++)
		{
			uint32_t t;

			t = (uint32_t)((r - gauss_1024_12289[k]) >> 63) ^ 1;
 8016e70:	4a21      	ldr	r2, [pc, #132]	; (8016ef8 <mkgauss+0x118>)
 8016e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e74:	00db      	lsls	r3, r3, #3
 8016e76:	4413      	add	r3, r2
 8016e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016e80:	1a86      	subs	r6, r0, r2
 8016e82:	eb61 0703 	sbc.w	r7, r1, r3
 8016e86:	f04f 0200 	mov.w	r2, #0
 8016e8a:	f04f 0300 	mov.w	r3, #0
 8016e8e:	0ffa      	lsrs	r2, r7, #31
 8016e90:	2300      	movs	r3, #0
 8016e92:	4613      	mov	r3, r2
 8016e94:	f083 0301 	eor.w	r3, r3, #1
 8016e98:	9304      	str	r3, [sp, #16]
			v |= k & -(t & (f ^ 1));
 8016e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e9c:	f083 0201 	eor.w	r2, r3, #1
 8016ea0:	9b04      	ldr	r3, [sp, #16]
 8016ea2:	4013      	ands	r3, r2
 8016ea4:	425a      	negs	r2, r3
 8016ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ea8:	401a      	ands	r2, r3
 8016eaa:	9b03      	ldr	r3, [sp, #12]
 8016eac:	4313      	orrs	r3, r2
 8016eae:	9303      	str	r3, [sp, #12]
			f |= t;
 8016eb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016eb2:	9b04      	ldr	r3, [sp, #16]
 8016eb4:	4313      	orrs	r3, r2
 8016eb6:	930b      	str	r3, [sp, #44]	; 0x2c
			/ (sizeof gauss_1024_12289[0]); k ++)
 8016eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016eba:	3301      	adds	r3, #1
 8016ebc:	930a      	str	r3, [sp, #40]	; 0x28
		for (k = 1; k < (sizeof gauss_1024_12289)
 8016ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ec0:	2b1a      	cmp	r3, #26
 8016ec2:	d9d5      	bls.n	8016e70 <mkgauss+0x90>

		/*
		 * We apply the sign ('neg' flag). If the value is zero,
		 * the sign has no effect.
		 */
		v = (v ^ -neg) + neg;
 8016ec4:	9b05      	ldr	r3, [sp, #20]
 8016ec6:	425a      	negs	r2, r3
 8016ec8:	9b03      	ldr	r3, [sp, #12]
 8016eca:	405a      	eors	r2, r3
 8016ecc:	9b05      	ldr	r3, [sp, #20]
 8016ece:	4413      	add	r3, r2
 8016ed0:	9303      	str	r3, [sp, #12]

		/*
		 * Generated value is added to val.
		 */
		val += *(int32_t *)&v;
 8016ed2:	ab03      	add	r3, sp, #12
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016ed8:	4413      	add	r3, r2
 8016eda:	930c      	str	r3, [sp, #48]	; 0x30
	for (u = 0; u < g; u ++) {
 8016edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ede:	3301      	adds	r3, #1
 8016ee0:	930d      	str	r3, [sp, #52]	; 0x34
 8016ee2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ee6:	429a      	cmp	r2, r3
 8016ee8:	d38b      	bcc.n	8016e02 <mkgauss+0x22>
	}
	return val;
 8016eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
}
 8016eec:	4618      	mov	r0, r3
 8016eee:	b00f      	add	sp, #60	; 0x3c
 8016ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ef4:	f3af 8000 	nop.w
 8016ef8:	08025438 	.word	0x08025438
 8016efc:	2df2ab58 	.word	0x2df2ab58
 8016f00:	11d137d8 	.word	0x11d137d8
	...

08016f10 <poly_small_sqnorm>:
 * Compute squared norm of a short vector. Returned value is saturated to
 * 2^32-1 if it is not lower than 2^31.
 */
static uint32_t
poly_small_sqnorm(const int8_t *f, unsigned logn)
{
 8016f10:	b088      	sub	sp, #32
 8016f12:	9001      	str	r0, [sp, #4]
 8016f14:	9100      	str	r1, [sp, #0]
	size_t n, u;
	uint32_t s, ng;

	n = MKN(logn);
 8016f16:	2201      	movs	r2, #1
 8016f18:	9b00      	ldr	r3, [sp, #0]
 8016f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8016f1e:	9304      	str	r3, [sp, #16]
	s = 0;
 8016f20:	2300      	movs	r3, #0
 8016f22:	9306      	str	r3, [sp, #24]
	ng = 0;
 8016f24:	2300      	movs	r3, #0
 8016f26:	9305      	str	r3, [sp, #20]
	for (u = 0; u < n; u ++) {
 8016f28:	2300      	movs	r3, #0
 8016f2a:	9307      	str	r3, [sp, #28]
 8016f2c:	e013      	b.n	8016f56 <poly_small_sqnorm+0x46>
		int32_t z;

		z = f[u];
 8016f2e:	9a01      	ldr	r2, [sp, #4]
 8016f30:	9b07      	ldr	r3, [sp, #28]
 8016f32:	4413      	add	r3, r2
 8016f34:	f993 3000 	ldrsb.w	r3, [r3]
 8016f38:	9303      	str	r3, [sp, #12]
		s += (uint32_t)(z * z);
 8016f3a:	9b03      	ldr	r3, [sp, #12]
 8016f3c:	fb03 f303 	mul.w	r3, r3, r3
 8016f40:	461a      	mov	r2, r3
 8016f42:	9b06      	ldr	r3, [sp, #24]
 8016f44:	4413      	add	r3, r2
 8016f46:	9306      	str	r3, [sp, #24]
		ng |= s;
 8016f48:	9a05      	ldr	r2, [sp, #20]
 8016f4a:	9b06      	ldr	r3, [sp, #24]
 8016f4c:	4313      	orrs	r3, r2
 8016f4e:	9305      	str	r3, [sp, #20]
	for (u = 0; u < n; u ++) {
 8016f50:	9b07      	ldr	r3, [sp, #28]
 8016f52:	3301      	adds	r3, #1
 8016f54:	9307      	str	r3, [sp, #28]
 8016f56:	9a07      	ldr	r2, [sp, #28]
 8016f58:	9b04      	ldr	r3, [sp, #16]
 8016f5a:	429a      	cmp	r2, r3
 8016f5c:	d3e7      	bcc.n	8016f2e <poly_small_sqnorm+0x1e>
	}
	return s | -(ng >> 31);
 8016f5e:	9b05      	ldr	r3, [sp, #20]
 8016f60:	17db      	asrs	r3, r3, #31
 8016f62:	461a      	mov	r2, r3
 8016f64:	9b06      	ldr	r3, [sp, #24]
 8016f66:	4313      	orrs	r3, r2
}
 8016f68:	4618      	mov	r0, r3
 8016f6a:	b008      	add	sp, #32
 8016f6c:	4770      	bx	lr
 8016f6e:	bf00      	nop

08016f70 <align_fpr>:
 * Align (upwards) the provided 'data' pointer with regards to 'base'
 * so that the offset is a multiple of the size of 'fpr'.
 */
static fpr *
align_fpr(void *base, void *data)
{
 8016f70:	b086      	sub	sp, #24
 8016f72:	9001      	str	r0, [sp, #4]
 8016f74:	9100      	str	r1, [sp, #0]
	uint8_t *cb, *cd;
	size_t k, km;

	cb = base;
 8016f76:	9b01      	ldr	r3, [sp, #4]
 8016f78:	9304      	str	r3, [sp, #16]
	cd = data;
 8016f7a:	9b00      	ldr	r3, [sp, #0]
 8016f7c:	9303      	str	r3, [sp, #12]
	k = (size_t)(cd - cb);
 8016f7e:	9a03      	ldr	r2, [sp, #12]
 8016f80:	9b04      	ldr	r3, [sp, #16]
 8016f82:	1ad3      	subs	r3, r2, r3
 8016f84:	9305      	str	r3, [sp, #20]
	km = k % sizeof(fpr);
 8016f86:	9b05      	ldr	r3, [sp, #20]
 8016f88:	f003 0307 	and.w	r3, r3, #7
 8016f8c:	9302      	str	r3, [sp, #8]
	if (km) {
 8016f8e:	9b02      	ldr	r3, [sp, #8]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d004      	beq.n	8016f9e <align_fpr+0x2e>
		k += (sizeof(fpr)) - km;
 8016f94:	9a05      	ldr	r2, [sp, #20]
 8016f96:	9b02      	ldr	r3, [sp, #8]
 8016f98:	1ad3      	subs	r3, r2, r3
 8016f9a:	3308      	adds	r3, #8
 8016f9c:	9305      	str	r3, [sp, #20]
	}
	return (fpr *)(cb + k);
 8016f9e:	9a04      	ldr	r2, [sp, #16]
 8016fa0:	9b05      	ldr	r3, [sp, #20]
 8016fa2:	4413      	add	r3, r2
}
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	b006      	add	sp, #24
 8016fa8:	4770      	bx	lr
 8016faa:	bf00      	nop
 8016fac:	0000      	movs	r0, r0
	...

08016fb0 <align_u32>:
 * Align (upwards) the provided 'data' pointer with regards to 'base'
 * so that the offset is a multiple of the size of 'uint32_t'.
 */
static uint32_t *
align_u32(void *base, void *data)
{
 8016fb0:	b086      	sub	sp, #24
 8016fb2:	9001      	str	r0, [sp, #4]
 8016fb4:	9100      	str	r1, [sp, #0]
	uint8_t *cb, *cd;
	size_t k, km;

	cb = base;
 8016fb6:	9b01      	ldr	r3, [sp, #4]
 8016fb8:	9304      	str	r3, [sp, #16]
	cd = data;
 8016fba:	9b00      	ldr	r3, [sp, #0]
 8016fbc:	9303      	str	r3, [sp, #12]
	k = (size_t)(cd - cb);
 8016fbe:	9a03      	ldr	r2, [sp, #12]
 8016fc0:	9b04      	ldr	r3, [sp, #16]
 8016fc2:	1ad3      	subs	r3, r2, r3
 8016fc4:	9305      	str	r3, [sp, #20]
	km = k % sizeof(uint32_t);
 8016fc6:	9b05      	ldr	r3, [sp, #20]
 8016fc8:	f003 0303 	and.w	r3, r3, #3
 8016fcc:	9302      	str	r3, [sp, #8]
	if (km) {
 8016fce:	9b02      	ldr	r3, [sp, #8]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d004      	beq.n	8016fde <align_u32+0x2e>
		k += (sizeof(uint32_t)) - km;
 8016fd4:	9a05      	ldr	r2, [sp, #20]
 8016fd6:	9b02      	ldr	r3, [sp, #8]
 8016fd8:	1ad3      	subs	r3, r2, r3
 8016fda:	3304      	adds	r3, #4
 8016fdc:	9305      	str	r3, [sp, #20]
	}
	return (uint32_t *)(cb + k);
 8016fde:	9a04      	ldr	r2, [sp, #16]
 8016fe0:	9b05      	ldr	r3, [sp, #20]
 8016fe2:	4413      	add	r3, r2
}
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	b006      	add	sp, #24
 8016fe8:	4770      	bx	lr
 8016fea:	bf00      	nop
 8016fec:	0000      	movs	r0, r0
	...

08016ff0 <poly_small_to_fp>:
/*
 * Convert a small vector to floating point.
 */
static void
poly_small_to_fp(fpr *x, const int8_t *f, unsigned logn)
{
 8016ff0:	b570      	push	{r4, r5, r6, lr}
 8016ff2:	b086      	sub	sp, #24
 8016ff4:	9003      	str	r0, [sp, #12]
 8016ff6:	9102      	str	r1, [sp, #8]
 8016ff8:	9201      	str	r2, [sp, #4]
	size_t n, u;

	n = MKN(logn);
 8016ffa:	2201      	movs	r2, #1
 8016ffc:	9b01      	ldr	r3, [sp, #4]
 8016ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8017002:	9304      	str	r3, [sp, #16]
	for (u = 0; u < n; u ++) {
 8017004:	2300      	movs	r3, #0
 8017006:	9305      	str	r3, [sp, #20]
 8017008:	e017      	b.n	801703a <poly_small_to_fp+0x4a>
		x[u] = fpr_of(f[u]);
 801700a:	9a02      	ldr	r2, [sp, #8]
 801700c:	9b05      	ldr	r3, [sp, #20]
 801700e:	4413      	add	r3, r2
 8017010:	f993 3000 	ldrsb.w	r3, [r3]
 8017014:	b25b      	sxtb	r3, r3
 8017016:	17da      	asrs	r2, r3, #31
 8017018:	461c      	mov	r4, r3
 801701a:	4615      	mov	r5, r2
 801701c:	9b05      	ldr	r3, [sp, #20]
 801701e:	00db      	lsls	r3, r3, #3
 8017020:	9a03      	ldr	r2, [sp, #12]
 8017022:	18d6      	adds	r6, r2, r3
 8017024:	4620      	mov	r0, r4
 8017026:	4629      	mov	r1, r5
 8017028:	f7fd fc5a 	bl	80148e0 <fpr_of.lto_priv.1>
 801702c:	4602      	mov	r2, r0
 801702e:	460b      	mov	r3, r1
 8017030:	e9c6 2300 	strd	r2, r3, [r6]
	for (u = 0; u < n; u ++) {
 8017034:	9b05      	ldr	r3, [sp, #20]
 8017036:	3301      	adds	r3, #1
 8017038:	9305      	str	r3, [sp, #20]
 801703a:	9a05      	ldr	r2, [sp, #20]
 801703c:	9b04      	ldr	r3, [sp, #16]
 801703e:	429a      	cmp	r2, r3
 8017040:	d3e3      	bcc.n	801700a <poly_small_to_fp+0x1a>
	}
}
 8017042:	bf00      	nop
 8017044:	bf00      	nop
 8017046:	b006      	add	sp, #24
 8017048:	bd70      	pop	{r4, r5, r6, pc}
 801704a:	bf00      	nop
 801704c:	0000      	movs	r0, r0
	...

08017050 <make_fg_step>:
 * Values are in RNS; input and/or output may also be in NTT.
 */
static void
make_fg_step(uint32_t *data, unsigned logn, unsigned depth,
	int in_ntt, int out_ntt)
{
 8017050:	b510      	push	{r4, lr}
 8017052:	b0a8      	sub	sp, #160	; 0xa0
 8017054:	9007      	str	r0, [sp, #28]
 8017056:	9106      	str	r1, [sp, #24]
 8017058:	9205      	str	r2, [sp, #20]
 801705a:	9304      	str	r3, [sp, #16]
	size_t n, hn, u;
	size_t slen, tlen;
	uint32_t *fd, *gd, *fs, *gs, *gm, *igm, *t1;
	const small_prime *primes;

	n = (size_t)1 << logn;
 801705c:	2201      	movs	r2, #1
 801705e:	9b06      	ldr	r3, [sp, #24]
 8017060:	fa02 f303 	lsl.w	r3, r2, r3
 8017064:	9322      	str	r3, [sp, #136]	; 0x88
	hn = n >> 1;
 8017066:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017068:	085b      	lsrs	r3, r3, #1
 801706a:	9321      	str	r3, [sp, #132]	; 0x84
	slen = MAX_BL_SMALL[depth];
 801706c:	4a81      	ldr	r2, [pc, #516]	; (8017274 <make_fg_step+0x224>)
 801706e:	9b05      	ldr	r3, [sp, #20]
 8017070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017074:	9320      	str	r3, [sp, #128]	; 0x80
	tlen = MAX_BL_SMALL[depth + 1];
 8017076:	9b05      	ldr	r3, [sp, #20]
 8017078:	3301      	adds	r3, #1
 801707a:	4a7e      	ldr	r2, [pc, #504]	; (8017274 <make_fg_step+0x224>)
 801707c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017080:	931f      	str	r3, [sp, #124]	; 0x7c
	primes = PRIMES;
 8017082:	4b7d      	ldr	r3, [pc, #500]	; (8017278 <make_fg_step+0x228>)
 8017084:	931e      	str	r3, [sp, #120]	; 0x78

	/*
	 * Prepare room for the result.
	 */
	fd = data;
 8017086:	9b07      	ldr	r3, [sp, #28]
 8017088:	931d      	str	r3, [sp, #116]	; 0x74
	gd = fd + hn * tlen;
 801708a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801708c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801708e:	fb02 f303 	mul.w	r3, r2, r3
 8017092:	009b      	lsls	r3, r3, #2
 8017094:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017096:	4413      	add	r3, r2
 8017098:	931c      	str	r3, [sp, #112]	; 0x70
	fs = gd + hn * tlen;
 801709a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801709c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801709e:	fb02 f303 	mul.w	r3, r2, r3
 80170a2:	009b      	lsls	r3, r3, #2
 80170a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80170a6:	4413      	add	r3, r2
 80170a8:	931b      	str	r3, [sp, #108]	; 0x6c
	gs = fs + n * slen;
 80170aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80170ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80170ae:	fb02 f303 	mul.w	r3, r2, r3
 80170b2:	009b      	lsls	r3, r3, #2
 80170b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80170b6:	4413      	add	r3, r2
 80170b8:	931a      	str	r3, [sp, #104]	; 0x68
	gm = gs + n * slen;
 80170ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80170bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80170be:	fb02 f303 	mul.w	r3, r2, r3
 80170c2:	009b      	lsls	r3, r3, #2
 80170c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80170c6:	4413      	add	r3, r2
 80170c8:	9319      	str	r3, [sp, #100]	; 0x64
	igm = gm + n;
 80170ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80170cc:	009b      	lsls	r3, r3, #2
 80170ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80170d0:	4413      	add	r3, r2
 80170d2:	9318      	str	r3, [sp, #96]	; 0x60
	t1 = igm + n;
 80170d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80170d6:	009b      	lsls	r3, r3, #2
 80170d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80170da:	4413      	add	r3, r2
 80170dc:	9317      	str	r3, [sp, #92]	; 0x5c
	memmove(fs, data, 2 * n * slen * sizeof *data);
 80170de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80170e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80170e2:	fb02 f303 	mul.w	r3, r2, r3
 80170e6:	00db      	lsls	r3, r3, #3
 80170e8:	461a      	mov	r2, r3
 80170ea:	9907      	ldr	r1, [sp, #28]
 80170ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80170ee:	f005 fa3d 	bl	801c56c <memmove>

	/*
	 * First slen words: we use the input values directly, and apply
	 * inverse NTT as we go.
	 */
	for (u = 0; u < slen; u ++) {
 80170f2:	2300      	movs	r3, #0
 80170f4:	9327      	str	r3, [sp, #156]	; 0x9c
 80170f6:	e11c      	b.n	8017332 <make_fg_step+0x2e2>
		uint32_t p, p0i, R2;
		size_t v;
		uint32_t *x;

		p = primes[u].p;
 80170f8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80170fa:	4613      	mov	r3, r2
 80170fc:	005b      	lsls	r3, r3, #1
 80170fe:	4413      	add	r3, r2
 8017100:	009b      	lsls	r3, r3, #2
 8017102:	461a      	mov	r2, r3
 8017104:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017106:	4413      	add	r3, r2
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	930e      	str	r3, [sp, #56]	; 0x38
		p0i = modp_ninv31(p);
 801710c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801710e:	f7fd fd3f 	bl	8014b90 <modp_ninv31>
 8017112:	900d      	str	r0, [sp, #52]	; 0x34
		R2 = modp_R2(p, p0i);
 8017114:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017116:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017118:	f7fd fe2a 	bl	8014d70 <modp_R2>
 801711c:	900c      	str	r0, [sp, #48]	; 0x30
		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 801711e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017120:	4613      	mov	r3, r2
 8017122:	005b      	lsls	r3, r3, #1
 8017124:	4413      	add	r3, r2
 8017126:	009b      	lsls	r3, r3, #2
 8017128:	461a      	mov	r2, r3
 801712a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801712c:	4413      	add	r3, r2
 801712e:	685a      	ldr	r2, [r3, #4]
 8017130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017132:	9301      	str	r3, [sp, #4]
 8017134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017136:	9300      	str	r3, [sp, #0]
 8017138:	4613      	mov	r3, r2
 801713a:	9a06      	ldr	r2, [sp, #24]
 801713c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801713e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017140:	f7fd fed6 	bl	8014ef0 <modp_mkgm2>

		for (v = 0, x = fs + u; v < n; v ++, x += slen) {
 8017144:	2300      	movs	r3, #0
 8017146:	9326      	str	r3, [sp, #152]	; 0x98
 8017148:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801714a:	009b      	lsls	r3, r3, #2
 801714c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801714e:	4413      	add	r3, r2
 8017150:	9325      	str	r3, [sp, #148]	; 0x94
 8017152:	e00e      	b.n	8017172 <make_fg_step+0x122>
			t1[v] = *x;
 8017154:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017156:	009b      	lsls	r3, r3, #2
 8017158:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801715a:	4413      	add	r3, r2
 801715c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801715e:	6812      	ldr	r2, [r2, #0]
 8017160:	601a      	str	r2, [r3, #0]
		for (v = 0, x = fs + u; v < n; v ++, x += slen) {
 8017162:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017164:	3301      	adds	r3, #1
 8017166:	9326      	str	r3, [sp, #152]	; 0x98
 8017168:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801716a:	009b      	lsls	r3, r3, #2
 801716c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801716e:	4413      	add	r3, r2
 8017170:	9325      	str	r3, [sp, #148]	; 0x94
 8017172:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017174:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017176:	429a      	cmp	r2, r3
 8017178:	d3ec      	bcc.n	8017154 <make_fg_step+0x104>
		}
		if (!in_ntt) {
 801717a:	9b04      	ldr	r3, [sp, #16]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d109      	bne.n	8017194 <make_fg_step+0x144>
			modp_NTT2(t1, gm, logn, p, p0i);
 8017180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017182:	9301      	str	r3, [sp, #4]
 8017184:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017186:	9300      	str	r3, [sp, #0]
 8017188:	9b06      	ldr	r3, [sp, #24]
 801718a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801718c:	2101      	movs	r1, #1
 801718e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017190:	f7fd ff1e 	bl	8014fd0 <modp_NTT2_ext>
		}
		for (v = 0, x = fd + u; v < hn; v ++, x += tlen) {
 8017194:	2300      	movs	r3, #0
 8017196:	9326      	str	r3, [sp, #152]	; 0x98
 8017198:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801719a:	009b      	lsls	r3, r3, #2
 801719c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801719e:	4413      	add	r3, r2
 80171a0:	9325      	str	r3, [sp, #148]	; 0x94
 80171a2:	e022      	b.n	80171ea <make_fg_step+0x19a>
			uint32_t w0, w1;

			w0 = t1[(v << 1) + 0];
 80171a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80171a6:	00db      	lsls	r3, r3, #3
 80171a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80171aa:	4413      	add	r3, r2
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	9309      	str	r3, [sp, #36]	; 0x24
			w1 = t1[(v << 1) + 1];
 80171b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80171b2:	00db      	lsls	r3, r3, #3
 80171b4:	3304      	adds	r3, #4
 80171b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80171b8:	4413      	add	r3, r2
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	9308      	str	r3, [sp, #32]
			*x = modp_montymul(
 80171be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80171c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80171c2:	9908      	ldr	r1, [sp, #32]
 80171c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171c6:	f7fd fd53 	bl	8014c70 <modp_montymul>
 80171ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80171cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80171ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80171d0:	f7fd fd4e 	bl	8014c70 <modp_montymul>
 80171d4:	4602      	mov	r2, r0
 80171d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80171d8:	601a      	str	r2, [r3, #0]
		for (v = 0, x = fd + u; v < hn; v ++, x += tlen) {
 80171da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80171dc:	3301      	adds	r3, #1
 80171de:	9326      	str	r3, [sp, #152]	; 0x98
 80171e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80171e2:	009b      	lsls	r3, r3, #2
 80171e4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80171e6:	4413      	add	r3, r2
 80171e8:	9325      	str	r3, [sp, #148]	; 0x94
 80171ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80171ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d3d8      	bcc.n	80171a4 <make_fg_step+0x154>
				modp_montymul(w0, w1, p, p0i), R2, p, p0i);
		}
		if (in_ntt) {
 80171f2:	9b04      	ldr	r3, [sp, #16]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d00c      	beq.n	8017212 <make_fg_step+0x1c2>
			modp_iNTT2_ext(fs + u, slen, igm, logn, p, p0i);
 80171f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80171fa:	009b      	lsls	r3, r3, #2
 80171fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80171fe:	18d0      	adds	r0, r2, r3
 8017200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017202:	9301      	str	r3, [sp, #4]
 8017204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017206:	9300      	str	r3, [sp, #0]
 8017208:	9b06      	ldr	r3, [sp, #24]
 801720a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801720c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801720e:	f7fd ff5f 	bl	80150d0 <modp_iNTT2_ext>
		}

		for (v = 0, x = gs + u; v < n; v ++, x += slen) {
 8017212:	2300      	movs	r3, #0
 8017214:	9326      	str	r3, [sp, #152]	; 0x98
 8017216:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017218:	009b      	lsls	r3, r3, #2
 801721a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801721c:	4413      	add	r3, r2
 801721e:	9325      	str	r3, [sp, #148]	; 0x94
 8017220:	e00e      	b.n	8017240 <make_fg_step+0x1f0>
			t1[v] = *x;
 8017222:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017224:	009b      	lsls	r3, r3, #2
 8017226:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017228:	4413      	add	r3, r2
 801722a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801722c:	6812      	ldr	r2, [r2, #0]
 801722e:	601a      	str	r2, [r3, #0]
		for (v = 0, x = gs + u; v < n; v ++, x += slen) {
 8017230:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017232:	3301      	adds	r3, #1
 8017234:	9326      	str	r3, [sp, #152]	; 0x98
 8017236:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017238:	009b      	lsls	r3, r3, #2
 801723a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801723c:	4413      	add	r3, r2
 801723e:	9325      	str	r3, [sp, #148]	; 0x94
 8017240:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017242:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017244:	429a      	cmp	r2, r3
 8017246:	d3ec      	bcc.n	8017222 <make_fg_step+0x1d2>
		}
		if (!in_ntt) {
 8017248:	9b04      	ldr	r3, [sp, #16]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d109      	bne.n	8017262 <make_fg_step+0x212>
			modp_NTT2(t1, gm, logn, p, p0i);
 801724e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017250:	9301      	str	r3, [sp, #4]
 8017252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017254:	9300      	str	r3, [sp, #0]
 8017256:	9b06      	ldr	r3, [sp, #24]
 8017258:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801725a:	2101      	movs	r1, #1
 801725c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801725e:	f7fd feb7 	bl	8014fd0 <modp_NTT2_ext>
		}
		for (v = 0, x = gd + u; v < hn; v ++, x += tlen) {
 8017262:	2300      	movs	r3, #0
 8017264:	9326      	str	r3, [sp, #152]	; 0x98
 8017266:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017268:	009b      	lsls	r3, r3, #2
 801726a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801726c:	4413      	add	r3, r2
 801726e:	9325      	str	r3, [sp, #148]	; 0x94
 8017270:	e027      	b.n	80172c2 <make_fg_step+0x272>
 8017272:	bf00      	nop
 8017274:	08025510 	.word	0x08025510
 8017278:	080233c0 	.word	0x080233c0
			uint32_t w0, w1;

			w0 = t1[(v << 1) + 0];
 801727c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801727e:	00db      	lsls	r3, r3, #3
 8017280:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017282:	4413      	add	r3, r2
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	930b      	str	r3, [sp, #44]	; 0x2c
			w1 = t1[(v << 1) + 1];
 8017288:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801728a:	00db      	lsls	r3, r3, #3
 801728c:	3304      	adds	r3, #4
 801728e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017290:	4413      	add	r3, r2
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	930a      	str	r3, [sp, #40]	; 0x28
			*x = modp_montymul(
 8017296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801729a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801729c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801729e:	f7fd fce7 	bl	8014c70 <modp_montymul>
 80172a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80172a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80172a8:	f7fd fce2 	bl	8014c70 <modp_montymul>
 80172ac:	4602      	mov	r2, r0
 80172ae:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80172b0:	601a      	str	r2, [r3, #0]
		for (v = 0, x = gd + u; v < hn; v ++, x += tlen) {
 80172b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80172b4:	3301      	adds	r3, #1
 80172b6:	9326      	str	r3, [sp, #152]	; 0x98
 80172b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80172ba:	009b      	lsls	r3, r3, #2
 80172bc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80172be:	4413      	add	r3, r2
 80172c0:	9325      	str	r3, [sp, #148]	; 0x94
 80172c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80172c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80172c6:	429a      	cmp	r2, r3
 80172c8:	d3d8      	bcc.n	801727c <make_fg_step+0x22c>
				modp_montymul(w0, w1, p, p0i), R2, p, p0i);
		}
		if (in_ntt) {
 80172ca:	9b04      	ldr	r3, [sp, #16]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d00c      	beq.n	80172ea <make_fg_step+0x29a>
			modp_iNTT2_ext(gs + u, slen, igm, logn, p, p0i);
 80172d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80172d2:	009b      	lsls	r3, r3, #2
 80172d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80172d6:	18d0      	adds	r0, r2, r3
 80172d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172da:	9301      	str	r3, [sp, #4]
 80172dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172de:	9300      	str	r3, [sp, #0]
 80172e0:	9b06      	ldr	r3, [sp, #24]
 80172e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80172e4:	9920      	ldr	r1, [sp, #128]	; 0x80
 80172e6:	f7fd fef3 	bl	80150d0 <modp_iNTT2_ext>
		}

		if (!out_ntt) {
 80172ea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d11d      	bne.n	801732c <make_fg_step+0x2dc>
			modp_iNTT2_ext(fd + u, tlen, igm, logn - 1, p, p0i);
 80172f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80172f2:	009b      	lsls	r3, r3, #2
 80172f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80172f6:	18d0      	adds	r0, r2, r3
 80172f8:	9b06      	ldr	r3, [sp, #24]
 80172fa:	1e5a      	subs	r2, r3, #1
 80172fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172fe:	9301      	str	r3, [sp, #4]
 8017300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017302:	9300      	str	r3, [sp, #0]
 8017304:	4613      	mov	r3, r2
 8017306:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017308:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801730a:	f7fd fee1 	bl	80150d0 <modp_iNTT2_ext>
			modp_iNTT2_ext(gd + u, tlen, igm, logn - 1, p, p0i);
 801730e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017310:	009b      	lsls	r3, r3, #2
 8017312:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017314:	18d0      	adds	r0, r2, r3
 8017316:	9b06      	ldr	r3, [sp, #24]
 8017318:	1e5a      	subs	r2, r3, #1
 801731a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801731c:	9301      	str	r3, [sp, #4]
 801731e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017320:	9300      	str	r3, [sp, #0]
 8017322:	4613      	mov	r3, r2
 8017324:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017326:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8017328:	f7fd fed2 	bl	80150d0 <modp_iNTT2_ext>
	for (u = 0; u < slen; u ++) {
 801732c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801732e:	3301      	adds	r3, #1
 8017330:	9327      	str	r3, [sp, #156]	; 0x9c
 8017332:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017334:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017336:	429a      	cmp	r2, r3
 8017338:	f4ff aede 	bcc.w	80170f8 <make_fg_step+0xa8>

	/*
	 * Since the fs and gs words have been de-NTTized, we can use the
	 * CRT to rebuild the values.
	 */
	zint_rebuild_CRT(fs, slen, slen, n, primes, 1, gm);
 801733c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801733e:	9302      	str	r3, [sp, #8]
 8017340:	2301      	movs	r3, #1
 8017342:	9301      	str	r3, [sp, #4]
 8017344:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017346:	9300      	str	r3, [sp, #0]
 8017348:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801734a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801734c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801734e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8017350:	f7fe f946 	bl	80155e0 <zint_rebuild_CRT>
	zint_rebuild_CRT(gs, slen, slen, n, primes, 1, gm);
 8017354:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017356:	9302      	str	r3, [sp, #8]
 8017358:	2301      	movs	r3, #1
 801735a:	9301      	str	r3, [sp, #4]
 801735c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801735e:	9300      	str	r3, [sp, #0]
 8017360:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017362:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017364:	9920      	ldr	r1, [sp, #128]	; 0x80
 8017366:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017368:	f7fe f93a 	bl	80155e0 <zint_rebuild_CRT>

	/*
	 * Remaining words: use modular reductions to extract the values.
	 */
	for (u = slen; u < tlen; u ++) {
 801736c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801736e:	9327      	str	r3, [sp, #156]	; 0x9c
 8017370:	e104      	b.n	801757c <make_fg_step+0x52c>
		uint32_t p, p0i, R2, Rx;
		size_t v;
		uint32_t *x;

		p = primes[u].p;
 8017372:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017374:	4613      	mov	r3, r2
 8017376:	005b      	lsls	r3, r3, #1
 8017378:	4413      	add	r3, r2
 801737a:	009b      	lsls	r3, r3, #2
 801737c:	461a      	mov	r2, r3
 801737e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017380:	4413      	add	r3, r2
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	9316      	str	r3, [sp, #88]	; 0x58
		p0i = modp_ninv31(p);
 8017386:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017388:	f7fd fc02 	bl	8014b90 <modp_ninv31>
 801738c:	9015      	str	r0, [sp, #84]	; 0x54
		R2 = modp_R2(p, p0i);
 801738e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8017390:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017392:	f7fd fced 	bl	8014d70 <modp_R2>
 8017396:	9014      	str	r0, [sp, #80]	; 0x50
		Rx = modp_Rx((unsigned)slen, p, p0i, R2);
 8017398:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801739a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801739c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801739e:	9820      	ldr	r0, [sp, #128]	; 0x80
 80173a0:	f7fd fd26 	bl	8014df0 <modp_Rx>
 80173a4:	9013      	str	r0, [sp, #76]	; 0x4c
		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 80173a6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80173a8:	4613      	mov	r3, r2
 80173aa:	005b      	lsls	r3, r3, #1
 80173ac:	4413      	add	r3, r2
 80173ae:	009b      	lsls	r3, r3, #2
 80173b0:	461a      	mov	r2, r3
 80173b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80173b4:	4413      	add	r3, r2
 80173b6:	685a      	ldr	r2, [r3, #4]
 80173b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80173ba:	9301      	str	r3, [sp, #4]
 80173bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80173be:	9300      	str	r3, [sp, #0]
 80173c0:	4613      	mov	r3, r2
 80173c2:	9a06      	ldr	r2, [sp, #24]
 80173c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80173c6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80173c8:	f7fd fd92 	bl	8014ef0 <modp_mkgm2>
		for (v = 0, x = fs; v < n; v ++, x += slen) {
 80173cc:	2300      	movs	r3, #0
 80173ce:	9324      	str	r3, [sp, #144]	; 0x90
 80173d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80173d2:	9323      	str	r3, [sp, #140]	; 0x8c
 80173d4:	e017      	b.n	8017406 <make_fg_step+0x3b6>
			t1[v] = zint_mod_small_signed(x, slen, p, p0i, R2, Rx);
 80173d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80173d8:	009b      	lsls	r3, r3, #2
 80173da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80173dc:	18d4      	adds	r4, r2, r3
 80173de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80173e0:	9301      	str	r3, [sp, #4]
 80173e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80173e4:	9300      	str	r3, [sp, #0]
 80173e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80173e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80173ea:	9920      	ldr	r1, [sp, #128]	; 0x80
 80173ec:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80173ee:	f7fe f80f 	bl	8015410 <zint_mod_small_signed>
 80173f2:	4603      	mov	r3, r0
 80173f4:	6023      	str	r3, [r4, #0]
		for (v = 0, x = fs; v < n; v ++, x += slen) {
 80173f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80173f8:	3301      	adds	r3, #1
 80173fa:	9324      	str	r3, [sp, #144]	; 0x90
 80173fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80173fe:	009b      	lsls	r3, r3, #2
 8017400:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8017402:	4413      	add	r3, r2
 8017404:	9323      	str	r3, [sp, #140]	; 0x8c
 8017406:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017408:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801740a:	429a      	cmp	r2, r3
 801740c:	d3e3      	bcc.n	80173d6 <make_fg_step+0x386>
		}
		modp_NTT2(t1, gm, logn, p, p0i);
 801740e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017410:	9301      	str	r3, [sp, #4]
 8017412:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017414:	9300      	str	r3, [sp, #0]
 8017416:	9b06      	ldr	r3, [sp, #24]
 8017418:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801741a:	2101      	movs	r1, #1
 801741c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801741e:	f7fd fdd7 	bl	8014fd0 <modp_NTT2_ext>
		for (v = 0, x = fd + u; v < hn; v ++, x += tlen) {
 8017422:	2300      	movs	r3, #0
 8017424:	9324      	str	r3, [sp, #144]	; 0x90
 8017426:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017428:	009b      	lsls	r3, r3, #2
 801742a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801742c:	4413      	add	r3, r2
 801742e:	9323      	str	r3, [sp, #140]	; 0x8c
 8017430:	e022      	b.n	8017478 <make_fg_step+0x428>
			uint32_t w0, w1;

			w0 = t1[(v << 1) + 0];
 8017432:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017434:	00db      	lsls	r3, r3, #3
 8017436:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017438:	4413      	add	r3, r2
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	9310      	str	r3, [sp, #64]	; 0x40
			w1 = t1[(v << 1) + 1];
 801743e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017440:	00db      	lsls	r3, r3, #3
 8017442:	3304      	adds	r3, #4
 8017444:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017446:	4413      	add	r3, r2
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	930f      	str	r3, [sp, #60]	; 0x3c
			*x = modp_montymul(
 801744c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801744e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017450:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017452:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017454:	f7fd fc0c 	bl	8014c70 <modp_montymul>
 8017458:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801745a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801745c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801745e:	f7fd fc07 	bl	8014c70 <modp_montymul>
 8017462:	4602      	mov	r2, r0
 8017464:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017466:	601a      	str	r2, [r3, #0]
		for (v = 0, x = fd + u; v < hn; v ++, x += tlen) {
 8017468:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801746a:	3301      	adds	r3, #1
 801746c:	9324      	str	r3, [sp, #144]	; 0x90
 801746e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017470:	009b      	lsls	r3, r3, #2
 8017472:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8017474:	4413      	add	r3, r2
 8017476:	9323      	str	r3, [sp, #140]	; 0x8c
 8017478:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801747a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801747c:	429a      	cmp	r2, r3
 801747e:	d3d8      	bcc.n	8017432 <make_fg_step+0x3e2>
				modp_montymul(w0, w1, p, p0i), R2, p, p0i);
		}
		for (v = 0, x = gs; v < n; v ++, x += slen) {
 8017480:	2300      	movs	r3, #0
 8017482:	9324      	str	r3, [sp, #144]	; 0x90
 8017484:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017486:	9323      	str	r3, [sp, #140]	; 0x8c
 8017488:	e017      	b.n	80174ba <make_fg_step+0x46a>
			t1[v] = zint_mod_small_signed(x, slen, p, p0i, R2, Rx);
 801748a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801748c:	009b      	lsls	r3, r3, #2
 801748e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017490:	18d4      	adds	r4, r2, r3
 8017492:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017494:	9301      	str	r3, [sp, #4]
 8017496:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017498:	9300      	str	r3, [sp, #0]
 801749a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801749c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801749e:	9920      	ldr	r1, [sp, #128]	; 0x80
 80174a0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80174a2:	f7fd ffb5 	bl	8015410 <zint_mod_small_signed>
 80174a6:	4603      	mov	r3, r0
 80174a8:	6023      	str	r3, [r4, #0]
		for (v = 0, x = gs; v < n; v ++, x += slen) {
 80174aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80174ac:	3301      	adds	r3, #1
 80174ae:	9324      	str	r3, [sp, #144]	; 0x90
 80174b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80174b2:	009b      	lsls	r3, r3, #2
 80174b4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80174b6:	4413      	add	r3, r2
 80174b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80174ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80174bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80174be:	429a      	cmp	r2, r3
 80174c0:	d3e3      	bcc.n	801748a <make_fg_step+0x43a>
		}
		modp_NTT2(t1, gm, logn, p, p0i);
 80174c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80174c4:	9301      	str	r3, [sp, #4]
 80174c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80174c8:	9300      	str	r3, [sp, #0]
 80174ca:	9b06      	ldr	r3, [sp, #24]
 80174cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80174ce:	2101      	movs	r1, #1
 80174d0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80174d2:	f7fd fd7d 	bl	8014fd0 <modp_NTT2_ext>
		for (v = 0, x = gd + u; v < hn; v ++, x += tlen) {
 80174d6:	2300      	movs	r3, #0
 80174d8:	9324      	str	r3, [sp, #144]	; 0x90
 80174da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80174dc:	009b      	lsls	r3, r3, #2
 80174de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80174e0:	4413      	add	r3, r2
 80174e2:	9323      	str	r3, [sp, #140]	; 0x8c
 80174e4:	e022      	b.n	801752c <make_fg_step+0x4dc>
			uint32_t w0, w1;

			w0 = t1[(v << 1) + 0];
 80174e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80174e8:	00db      	lsls	r3, r3, #3
 80174ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80174ec:	4413      	add	r3, r2
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	9312      	str	r3, [sp, #72]	; 0x48
			w1 = t1[(v << 1) + 1];
 80174f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80174f4:	00db      	lsls	r3, r3, #3
 80174f6:	3304      	adds	r3, #4
 80174f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80174fa:	4413      	add	r3, r2
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	9311      	str	r3, [sp, #68]	; 0x44
			*x = modp_montymul(
 8017500:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017502:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017504:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017506:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017508:	f7fd fbb2 	bl	8014c70 <modp_montymul>
 801750c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801750e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017510:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017512:	f7fd fbad 	bl	8014c70 <modp_montymul>
 8017516:	4602      	mov	r2, r0
 8017518:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801751a:	601a      	str	r2, [r3, #0]
		for (v = 0, x = gd + u; v < hn; v ++, x += tlen) {
 801751c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801751e:	3301      	adds	r3, #1
 8017520:	9324      	str	r3, [sp, #144]	; 0x90
 8017522:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017524:	009b      	lsls	r3, r3, #2
 8017526:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8017528:	4413      	add	r3, r2
 801752a:	9323      	str	r3, [sp, #140]	; 0x8c
 801752c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801752e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017530:	429a      	cmp	r2, r3
 8017532:	d3d8      	bcc.n	80174e6 <make_fg_step+0x496>
				modp_montymul(w0, w1, p, p0i), R2, p, p0i);
		}

		if (!out_ntt) {
 8017534:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017536:	2b00      	cmp	r3, #0
 8017538:	d11d      	bne.n	8017576 <make_fg_step+0x526>
			modp_iNTT2_ext(fd + u, tlen, igm, logn - 1, p, p0i);
 801753a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801753c:	009b      	lsls	r3, r3, #2
 801753e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017540:	18d0      	adds	r0, r2, r3
 8017542:	9b06      	ldr	r3, [sp, #24]
 8017544:	1e5a      	subs	r2, r3, #1
 8017546:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017548:	9301      	str	r3, [sp, #4]
 801754a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801754c:	9300      	str	r3, [sp, #0]
 801754e:	4613      	mov	r3, r2
 8017550:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017552:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8017554:	f7fd fdbc 	bl	80150d0 <modp_iNTT2_ext>
			modp_iNTT2_ext(gd + u, tlen, igm, logn - 1, p, p0i);
 8017558:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801755a:	009b      	lsls	r3, r3, #2
 801755c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801755e:	18d0      	adds	r0, r2, r3
 8017560:	9b06      	ldr	r3, [sp, #24]
 8017562:	1e5a      	subs	r2, r3, #1
 8017564:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017566:	9301      	str	r3, [sp, #4]
 8017568:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801756a:	9300      	str	r3, [sp, #0]
 801756c:	4613      	mov	r3, r2
 801756e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017570:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8017572:	f7fd fdad 	bl	80150d0 <modp_iNTT2_ext>
	for (u = slen; u < tlen; u ++) {
 8017576:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017578:	3301      	adds	r3, #1
 801757a:	9327      	str	r3, [sp, #156]	; 0x9c
 801757c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801757e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017580:	429a      	cmp	r2, r3
 8017582:	f4ff aef6 	bcc.w	8017372 <make_fg_step+0x322>
		}
	}
}
 8017586:	bf00      	nop
 8017588:	bf00      	nop
 801758a:	b028      	add	sp, #160	; 0xa0
 801758c:	bd10      	pop	{r4, pc}
 801758e:	bf00      	nop

08017590 <make_fg>:
 * f and g).
 */
static void
make_fg(uint32_t *data, const int8_t *f, const int8_t *g,
	unsigned logn, unsigned depth, int out_ntt)
{
 8017590:	b510      	push	{r4, lr}
 8017592:	b092      	sub	sp, #72	; 0x48
 8017594:	9005      	str	r0, [sp, #20]
 8017596:	9104      	str	r1, [sp, #16]
 8017598:	9203      	str	r2, [sp, #12]
 801759a:	9302      	str	r3, [sp, #8]
	size_t n, u;
	uint32_t *ft, *gt, p0;
	unsigned d;
	const small_prime *primes;

	n = MKN(logn);
 801759c:	2201      	movs	r2, #1
 801759e:	9b02      	ldr	r3, [sp, #8]
 80175a0:	fa02 f303 	lsl.w	r3, r2, r3
 80175a4:	930f      	str	r3, [sp, #60]	; 0x3c
	ft = data;
 80175a6:	9b05      	ldr	r3, [sp, #20]
 80175a8:	930e      	str	r3, [sp, #56]	; 0x38
	gt = ft + n;
 80175aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175ac:	009b      	lsls	r3, r3, #2
 80175ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80175b0:	4413      	add	r3, r2
 80175b2:	930d      	str	r3, [sp, #52]	; 0x34
	primes = PRIMES;
 80175b4:	4b46      	ldr	r3, [pc, #280]	; (80176d0 <make_fg+0x140>)
 80175b6:	930c      	str	r3, [sp, #48]	; 0x30
	p0 = primes[0].p;
 80175b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	930b      	str	r3, [sp, #44]	; 0x2c
	for (u = 0; u < n; u ++) {
 80175be:	2300      	movs	r3, #0
 80175c0:	9311      	str	r3, [sp, #68]	; 0x44
 80175c2:	e020      	b.n	8017606 <make_fg+0x76>
		ft[u] = modp_set(f[u], p0);
 80175c4:	9a04      	ldr	r2, [sp, #16]
 80175c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175c8:	4413      	add	r3, r2
 80175ca:	f993 3000 	ldrsb.w	r3, [r3]
 80175ce:	4618      	mov	r0, r3
 80175d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175d2:	009b      	lsls	r3, r3, #2
 80175d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80175d6:	18d4      	adds	r4, r2, r3
 80175d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80175da:	f7fd faa9 	bl	8014b30 <modp_set>
 80175de:	4603      	mov	r3, r0
 80175e0:	6023      	str	r3, [r4, #0]
		gt[u] = modp_set(g[u], p0);
 80175e2:	9a03      	ldr	r2, [sp, #12]
 80175e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175e6:	4413      	add	r3, r2
 80175e8:	f993 3000 	ldrsb.w	r3, [r3]
 80175ec:	4618      	mov	r0, r3
 80175ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175f0:	009b      	lsls	r3, r3, #2
 80175f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80175f4:	18d4      	adds	r4, r2, r3
 80175f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80175f8:	f7fd fa9a 	bl	8014b30 <modp_set>
 80175fc:	4603      	mov	r3, r0
 80175fe:	6023      	str	r3, [r4, #0]
	for (u = 0; u < n; u ++) {
 8017600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017602:	3301      	adds	r3, #1
 8017604:	9311      	str	r3, [sp, #68]	; 0x44
 8017606:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801760a:	429a      	cmp	r2, r3
 801760c:	d3da      	bcc.n	80175c4 <make_fg+0x34>
	}

	if (depth == 0 && out_ntt) {
 801760e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017610:	2b00      	cmp	r3, #0
 8017612:	d136      	bne.n	8017682 <make_fg+0xf2>
 8017614:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017616:	2b00      	cmp	r3, #0
 8017618:	d033      	beq.n	8017682 <make_fg+0xf2>
		uint32_t *gm, *igm;
		uint32_t p, p0i;

		p = primes[0].p;
 801761a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	930a      	str	r3, [sp, #40]	; 0x28
		p0i = modp_ninv31(p);
 8017620:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017622:	f7fd fab5 	bl	8014b90 <modp_ninv31>
 8017626:	9009      	str	r0, [sp, #36]	; 0x24
		gm = gt + n;
 8017628:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801762a:	009b      	lsls	r3, r3, #2
 801762c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801762e:	4413      	add	r3, r2
 8017630:	9308      	str	r3, [sp, #32]
		igm = gm + MKN(logn);
 8017632:	2204      	movs	r2, #4
 8017634:	9b02      	ldr	r3, [sp, #8]
 8017636:	fa02 f303 	lsl.w	r3, r2, r3
 801763a:	9a08      	ldr	r2, [sp, #32]
 801763c:	4413      	add	r3, r2
 801763e:	9307      	str	r3, [sp, #28]
		modp_mkgm2(gm, igm, logn, primes[0].g, p, p0i);
 8017640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017642:	685a      	ldr	r2, [r3, #4]
 8017644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017646:	9301      	str	r3, [sp, #4]
 8017648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801764a:	9300      	str	r3, [sp, #0]
 801764c:	4613      	mov	r3, r2
 801764e:	9a02      	ldr	r2, [sp, #8]
 8017650:	9907      	ldr	r1, [sp, #28]
 8017652:	9808      	ldr	r0, [sp, #32]
 8017654:	f7fd fc4c 	bl	8014ef0 <modp_mkgm2>
		modp_NTT2(ft, gm, logn, p, p0i);
 8017658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801765a:	9301      	str	r3, [sp, #4]
 801765c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801765e:	9300      	str	r3, [sp, #0]
 8017660:	9b02      	ldr	r3, [sp, #8]
 8017662:	9a08      	ldr	r2, [sp, #32]
 8017664:	2101      	movs	r1, #1
 8017666:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017668:	f7fd fcb2 	bl	8014fd0 <modp_NTT2_ext>
		modp_NTT2(gt, gm, logn, p, p0i);
 801766c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801766e:	9301      	str	r3, [sp, #4]
 8017670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017672:	9300      	str	r3, [sp, #0]
 8017674:	9b02      	ldr	r3, [sp, #8]
 8017676:	9a08      	ldr	r2, [sp, #32]
 8017678:	2101      	movs	r1, #1
 801767a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801767c:	f7fd fca8 	bl	8014fd0 <modp_NTT2_ext>
		return;
 8017680:	e024      	b.n	80176cc <make_fg+0x13c>
	}

	for (d = 0; d < depth; d ++) {
 8017682:	2300      	movs	r3, #0
 8017684:	9310      	str	r3, [sp, #64]	; 0x40
 8017686:	e01d      	b.n	80176c4 <make_fg+0x134>
		make_fg_step(data, logn - d, d,
 8017688:	9a02      	ldr	r2, [sp, #8]
 801768a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801768c:	1ad1      	subs	r1, r2, r3
 801768e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017690:	2b00      	cmp	r3, #0
 8017692:	bf14      	ite	ne
 8017694:	2301      	movne	r3, #1
 8017696:	2300      	moveq	r3, #0
 8017698:	b2db      	uxtb	r3, r3
 801769a:	4618      	mov	r0, r3
			d != 0, (d + 1) < depth || out_ntt);
 801769c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801769e:	3301      	adds	r3, #1
		make_fg_step(data, logn - d, d,
 80176a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80176a2:	429a      	cmp	r2, r3
 80176a4:	d802      	bhi.n	80176ac <make_fg+0x11c>
 80176a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d001      	beq.n	80176b0 <make_fg+0x120>
 80176ac:	2301      	movs	r3, #1
 80176ae:	e000      	b.n	80176b2 <make_fg+0x122>
 80176b0:	2300      	movs	r3, #0
 80176b2:	9300      	str	r3, [sp, #0]
 80176b4:	4603      	mov	r3, r0
 80176b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80176b8:	9805      	ldr	r0, [sp, #20]
 80176ba:	f7ff fcc9 	bl	8017050 <make_fg_step>
	for (d = 0; d < depth; d ++) {
 80176be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80176c0:	3301      	adds	r3, #1
 80176c2:	9310      	str	r3, [sp, #64]	; 0x40
 80176c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80176c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80176c8:	429a      	cmp	r2, r3
 80176ca:	d3dd      	bcc.n	8017688 <make_fg+0xf8>
	}
}
 80176cc:	b012      	add	sp, #72	; 0x48
 80176ce:	bd10      	pop	{r4, pc}
 80176d0:	080233c0 	.word	0x080233c0
	...

080176e0 <solve_NTRU_deepest>:
 * Returned value: 1 on success, 0 on error.
 */
static int
solve_NTRU_deepest(unsigned logn_top,
	const int8_t *f, const int8_t *g, uint32_t *tmp)
{
 80176e0:	b500      	push	{lr}
 80176e2:	b091      	sub	sp, #68	; 0x44
 80176e4:	9007      	str	r0, [sp, #28]
 80176e6:	9106      	str	r1, [sp, #24]
 80176e8:	9205      	str	r2, [sp, #20]
 80176ea:	9304      	str	r3, [sp, #16]
	size_t len;
	uint32_t *Fp, *Gp, *fp, *gp, *t1, q;
	const small_prime *primes;

	len = MAX_BL_SMALL[logn_top];
 80176ec:	4a2d      	ldr	r2, [pc, #180]	; (80177a4 <solve_NTRU_deepest+0xc4>)
 80176ee:	9b07      	ldr	r3, [sp, #28]
 80176f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80176f4:	930f      	str	r3, [sp, #60]	; 0x3c
	primes = PRIMES;
 80176f6:	4b2c      	ldr	r3, [pc, #176]	; (80177a8 <solve_NTRU_deepest+0xc8>)
 80176f8:	930e      	str	r3, [sp, #56]	; 0x38

	Fp = tmp;
 80176fa:	9b04      	ldr	r3, [sp, #16]
 80176fc:	930d      	str	r3, [sp, #52]	; 0x34
	Gp = Fp + len;
 80176fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017700:	009b      	lsls	r3, r3, #2
 8017702:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017704:	4413      	add	r3, r2
 8017706:	930c      	str	r3, [sp, #48]	; 0x30
	fp = Gp + len;
 8017708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801770a:	009b      	lsls	r3, r3, #2
 801770c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801770e:	4413      	add	r3, r2
 8017710:	930b      	str	r3, [sp, #44]	; 0x2c
	gp = fp + len;
 8017712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017714:	009b      	lsls	r3, r3, #2
 8017716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017718:	4413      	add	r3, r2
 801771a:	930a      	str	r3, [sp, #40]	; 0x28
	t1 = gp + len;
 801771c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801771e:	009b      	lsls	r3, r3, #2
 8017720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017722:	4413      	add	r3, r2
 8017724:	9309      	str	r3, [sp, #36]	; 0x24

	make_fg(fp, f, g, logn_top, logn_top, 0);
 8017726:	2300      	movs	r3, #0
 8017728:	9301      	str	r3, [sp, #4]
 801772a:	9b07      	ldr	r3, [sp, #28]
 801772c:	9300      	str	r3, [sp, #0]
 801772e:	9b07      	ldr	r3, [sp, #28]
 8017730:	9a05      	ldr	r2, [sp, #20]
 8017732:	9906      	ldr	r1, [sp, #24]
 8017734:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017736:	f7ff ff2b 	bl	8017590 <make_fg>
	/*
	 * We use the CRT to rebuild the resultants as big integers.
	 * There are two such big integers. The resultants are always
	 * nonnegative.
	 */
	zint_rebuild_CRT(fp, len, len, 2, primes, 0, t1);
 801773a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801773c:	9302      	str	r3, [sp, #8]
 801773e:	2300      	movs	r3, #0
 8017740:	9301      	str	r3, [sp, #4]
 8017742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017744:	9300      	str	r3, [sp, #0]
 8017746:	2302      	movs	r3, #2
 8017748:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801774a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801774c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801774e:	f7fd ff47 	bl	80155e0 <zint_rebuild_CRT>
	 *
	 * We can test on the result and return 0 because that would
	 * imply failure of the NTRU solving equation, and the (f,g)
	 * values will be abandoned in that case.
	 */
	if (!zint_bezout(Gp, Fp, fp, gp, len, t1)) {
 8017752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017754:	9301      	str	r3, [sp, #4]
 8017756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017758:	9300      	str	r3, [sp, #0]
 801775a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801775c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801775e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017760:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017762:	f7fe faed 	bl	8015d40 <zint_bezout>
 8017766:	4603      	mov	r3, r0
 8017768:	2b00      	cmp	r3, #0
 801776a:	d101      	bne.n	8017770 <solve_NTRU_deepest+0x90>
		return 0;
 801776c:	2300      	movs	r3, #0
 801776e:	e015      	b.n	801779c <solve_NTRU_deepest+0xbc>
	 * fit in the destination arrays.
	 * We can again test on the returned words: a non-zero output
	 * of zint_mul_small() means that we exceeded our array
	 * capacity, and that implies failure and rejection of (f,g).
	 */
	q = 12289;
 8017770:	f243 0301 	movw	r3, #12289	; 0x3001
 8017774:	9308      	str	r3, [sp, #32]
	if (zint_mul_small(Fp, len, q) != 0
 8017776:	9a08      	ldr	r2, [sp, #32]
 8017778:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801777a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801777c:	f7fd fdc0 	bl	8015300 <zint_mul_small>
 8017780:	4603      	mov	r3, r0
 8017782:	2b00      	cmp	r3, #0
 8017784:	d107      	bne.n	8017796 <solve_NTRU_deepest+0xb6>
		|| zint_mul_small(Gp, len, q) != 0)
 8017786:	9a08      	ldr	r2, [sp, #32]
 8017788:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801778a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801778c:	f7fd fdb8 	bl	8015300 <zint_mul_small>
 8017790:	4603      	mov	r3, r0
 8017792:	2b00      	cmp	r3, #0
 8017794:	d001      	beq.n	801779a <solve_NTRU_deepest+0xba>
	{
		return 0;
 8017796:	2300      	movs	r3, #0
 8017798:	e000      	b.n	801779c <solve_NTRU_deepest+0xbc>
	}

	return 1;
 801779a:	2301      	movs	r3, #1
}
 801779c:	4618      	mov	r0, r3
 801779e:	b011      	add	sp, #68	; 0x44
 80177a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80177a4:	08025510 	.word	0x08025510
 80177a8:	080233c0 	.word	0x080233c0
 80177ac:	00000000 	.word	0x00000000

080177b0 <solve_NTRU_intermediate>:
 * Returned value: 1 on success, 0 on error.
 */
static int
solve_NTRU_intermediate(unsigned logn_top,
	const int8_t *f, const int8_t *g, unsigned depth, uint32_t *tmp)
{
 80177b0:	b510      	push	{r4, lr}
 80177b2:	b0d2      	sub	sp, #328	; 0x148
 80177b4:	ac52      	add	r4, sp, #328	; 0x148
 80177b6:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80177ba:	6020      	str	r0, [r4, #0]
 80177bc:	a852      	add	r0, sp, #328	; 0x148
 80177be:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 80177c2:	6001      	str	r1, [r0, #0]
 80177c4:	a952      	add	r1, sp, #328	; 0x148
 80177c6:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 80177ca:	600a      	str	r2, [r1, #0]
 80177cc:	aa52      	add	r2, sp, #328	; 0x148
 80177ce:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 80177d2:	6013      	str	r3, [r2, #0]
	int scale_fg, minbl_fg, maxbl_fg, maxbl_FG, scale_k;
	uint32_t *x, *y;
	int32_t *k;
	const small_prime *primes;

	logn = logn_top - depth;
 80177d4:	ab52      	add	r3, sp, #328	; 0x148
 80177d6:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80177da:	ab52      	add	r3, sp, #328	; 0x148
 80177dc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80177e0:	6812      	ldr	r2, [r2, #0]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	1ad3      	subs	r3, r2, r3
 80177e6:	933c      	str	r3, [sp, #240]	; 0xf0
	n = (size_t)1 << logn;
 80177e8:	2201      	movs	r2, #1
 80177ea:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80177ec:	fa02 f303 	lsl.w	r3, r2, r3
 80177f0:	933b      	str	r3, [sp, #236]	; 0xec
	hn = n >> 1;
 80177f2:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80177f4:	085b      	lsrs	r3, r3, #1
 80177f6:	933a      	str	r3, [sp, #232]	; 0xe8
	 * llen = size for intermediary F and G before reduction (degree N)
	 *
	 * We build our non-reduced F and G as two independent halves each,
	 * of degree N/2 (F = F0 + X*F1, G = G0 + X*G1).
	 */
	slen = MAX_BL_SMALL[depth];
 80177f8:	4a94      	ldr	r2, [pc, #592]	; (8017a4c <solve_NTRU_intermediate+0x29c>)
 80177fa:	ab52      	add	r3, sp, #328	; 0x148
 80177fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017806:	9339      	str	r3, [sp, #228]	; 0xe4
	dlen = MAX_BL_SMALL[depth + 1];
 8017808:	ab52      	add	r3, sp, #328	; 0x148
 801780a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	3301      	adds	r3, #1
 8017812:	4a8e      	ldr	r2, [pc, #568]	; (8017a4c <solve_NTRU_intermediate+0x29c>)
 8017814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017818:	9338      	str	r3, [sp, #224]	; 0xe0
	llen = MAX_BL_LARGE[depth];
 801781a:	4a8d      	ldr	r2, [pc, #564]	; (8017a50 <solve_NTRU_intermediate+0x2a0>)
 801781c:	ab52      	add	r3, sp, #328	; 0x148
 801781e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8017822:	681b      	ldr	r3, [r3, #0]
 8017824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017828:	9337      	str	r3, [sp, #220]	; 0xdc
	primes = PRIMES;
 801782a:	4b8a      	ldr	r3, [pc, #552]	; (8017a54 <solve_NTRU_intermediate+0x2a4>)
 801782c:	9336      	str	r3, [sp, #216]	; 0xd8

	/*
	 * Fd and Gd are the F and G from the deeper level.
	 */
	Fd = tmp;
 801782e:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8017830:	9335      	str	r3, [sp, #212]	; 0xd4
	Gd = Fd + dlen * hn;
 8017832:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8017834:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8017836:	fb02 f303 	mul.w	r3, r2, r3
 801783a:	009b      	lsls	r3, r3, #2
 801783c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801783e:	4413      	add	r3, r2
 8017840:	9334      	str	r3, [sp, #208]	; 0xd0

	/*
	 * Compute the input f and g for this level. Note that we get f
	 * and g in RNS + NTT representation.
	 */
	ft = Gd + dlen * hn;
 8017842:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8017844:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8017846:	fb02 f303 	mul.w	r3, r2, r3
 801784a:	009b      	lsls	r3, r3, #2
 801784c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801784e:	4413      	add	r3, r2
 8017850:	9333      	str	r3, [sp, #204]	; 0xcc
	make_fg(ft, f, g, logn_top, depth, 1);
 8017852:	ab52      	add	r3, sp, #328	; 0x148
 8017854:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8017858:	aa52      	add	r2, sp, #328	; 0x148
 801785a:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 801785e:	a952      	add	r1, sp, #328	; 0x148
 8017860:	f5a1 7190 	sub.w	r1, r1, #288	; 0x120
 8017864:	2001      	movs	r0, #1
 8017866:	9001      	str	r0, [sp, #4]
 8017868:	a852      	add	r0, sp, #328	; 0x148
 801786a:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 801786e:	6800      	ldr	r0, [r0, #0]
 8017870:	9000      	str	r0, [sp, #0]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	6812      	ldr	r2, [r2, #0]
 8017876:	6809      	ldr	r1, [r1, #0]
 8017878:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801787a:	f7ff fe89 	bl	8017590 <make_fg>

	/*
	 * Move the newly computed f and g to make room for our candidate
	 * F and G (unreduced).
	 */
	Ft = tmp;
 801787e:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8017880:	934f      	str	r3, [sp, #316]	; 0x13c
	Gt = Ft + n * llen;
 8017882:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017884:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8017886:	fb02 f303 	mul.w	r3, r2, r3
 801788a:	009b      	lsls	r3, r3, #2
 801788c:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 801788e:	4413      	add	r3, r2
 8017890:	934e      	str	r3, [sp, #312]	; 0x138
	t1 = Gt + n * llen;
 8017892:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017894:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8017896:	fb02 f303 	mul.w	r3, r2, r3
 801789a:	009b      	lsls	r3, r3, #2
 801789c:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 801789e:	4413      	add	r3, r2
 80178a0:	9332      	str	r3, [sp, #200]	; 0xc8
	memmove(t1, ft, 2 * n * slen * sizeof *ft);
 80178a2:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80178a4:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 80178a6:	fb02 f303 	mul.w	r3, r2, r3
 80178aa:	00db      	lsls	r3, r3, #3
 80178ac:	461a      	mov	r2, r3
 80178ae:	9933      	ldr	r1, [sp, #204]	; 0xcc
 80178b0:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80178b2:	f004 fe5b 	bl	801c56c <memmove>
	ft = t1;
 80178b6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80178b8:	9333      	str	r3, [sp, #204]	; 0xcc
	gt = ft + slen * n;
 80178ba:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80178bc:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 80178be:	fb02 f303 	mul.w	r3, r2, r3
 80178c2:	009b      	lsls	r3, r3, #2
 80178c4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80178c6:	4413      	add	r3, r2
 80178c8:	9331      	str	r3, [sp, #196]	; 0xc4
	t1 = gt + slen * n;
 80178ca:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80178cc:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 80178ce:	fb02 f303 	mul.w	r3, r2, r3
 80178d2:	009b      	lsls	r3, r3, #2
 80178d4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80178d6:	4413      	add	r3, r2
 80178d8:	9332      	str	r3, [sp, #200]	; 0xc8

	/*
	 * Move Fd and Gd _after_ f and g.
	 */
	memmove(t1, Fd, 2 * hn * dlen * sizeof *Fd);
 80178da:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80178dc:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80178de:	fb02 f303 	mul.w	r3, r2, r3
 80178e2:	00db      	lsls	r3, r3, #3
 80178e4:	461a      	mov	r2, r3
 80178e6:	9935      	ldr	r1, [sp, #212]	; 0xd4
 80178e8:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80178ea:	f004 fe3f 	bl	801c56c <memmove>
	Fd = t1;
 80178ee:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80178f0:	9335      	str	r3, [sp, #212]	; 0xd4
	Gd = Fd + hn * dlen;
 80178f2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80178f4:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80178f6:	fb02 f303 	mul.w	r3, r2, r3
 80178fa:	009b      	lsls	r3, r3, #2
 80178fc:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80178fe:	4413      	add	r3, r2
 8017900:	9334      	str	r3, [sp, #208]	; 0xd0

	/*
	 * We reduce Fd and Gd modulo all the small primes we will need,
	 * and store the values in Ft and Gt (only n/2 values in each).
	 */
	for (u = 0; u < llen; u ++) {
 8017902:	2300      	movs	r3, #0
 8017904:	9350      	str	r3, [sp, #320]	; 0x140
 8017906:	e098      	b.n	8017a3a <solve_NTRU_intermediate+0x28a>
		uint32_t p, p0i, R2, Rx;
		size_t v;
		uint32_t *xs, *ys, *xd, *yd;

		p = primes[u].p;
 8017908:	9a50      	ldr	r2, [sp, #320]	; 0x140
 801790a:	4613      	mov	r3, r2
 801790c:	005b      	lsls	r3, r3, #1
 801790e:	4413      	add	r3, r2
 8017910:	009b      	lsls	r3, r3, #2
 8017912:	461a      	mov	r2, r3
 8017914:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017916:	441a      	add	r2, r3
 8017918:	ab52      	add	r3, sp, #328	; 0x148
 801791a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801791e:	6812      	ldr	r2, [r2, #0]
 8017920:	601a      	str	r2, [r3, #0]
		p0i = modp_ninv31(p);
 8017922:	ab52      	add	r3, sp, #328	; 0x148
 8017924:	f5a3 7488 	sub.w	r4, r3, #272	; 0x110
 8017928:	ab52      	add	r3, sp, #328	; 0x148
 801792a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801792e:	6818      	ldr	r0, [r3, #0]
 8017930:	f7fd f92e 	bl	8014b90 <modp_ninv31>
 8017934:	6020      	str	r0, [r4, #0]
		R2 = modp_R2(p, p0i);
 8017936:	ab52      	add	r3, sp, #328	; 0x148
 8017938:	f5a3 748a 	sub.w	r4, r3, #276	; 0x114
 801793c:	ab52      	add	r3, sp, #328	; 0x148
 801793e:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8017942:	ab52      	add	r3, sp, #328	; 0x148
 8017944:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8017948:	6811      	ldr	r1, [r2, #0]
 801794a:	6818      	ldr	r0, [r3, #0]
 801794c:	f7fd fa10 	bl	8014d70 <modp_R2>
 8017950:	6020      	str	r0, [r4, #0]
		Rx = modp_Rx((unsigned)dlen, p, p0i, R2);
 8017952:	ab52      	add	r3, sp, #328	; 0x148
 8017954:	f5a3 748c 	sub.w	r4, r3, #280	; 0x118
 8017958:	ab52      	add	r3, sp, #328	; 0x148
 801795a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801795e:	aa52      	add	r2, sp, #328	; 0x148
 8017960:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8017964:	a952      	add	r1, sp, #328	; 0x148
 8017966:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	6812      	ldr	r2, [r2, #0]
 801796e:	6809      	ldr	r1, [r1, #0]
 8017970:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8017972:	f7fd fa3d 	bl	8014df0 <modp_Rx>
 8017976:	6020      	str	r0, [r4, #0]
		for (v = 0, xs = Fd, ys = Gd, xd = Ft + u, yd = Gt + u;
 8017978:	2300      	movs	r3, #0
 801797a:	9348      	str	r3, [sp, #288]	; 0x120
 801797c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801797e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017980:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8017982:	9346      	str	r3, [sp, #280]	; 0x118
 8017984:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017986:	009b      	lsls	r3, r3, #2
 8017988:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 801798a:	4413      	add	r3, r2
 801798c:	9345      	str	r3, [sp, #276]	; 0x114
 801798e:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017990:	009b      	lsls	r3, r3, #2
 8017992:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8017994:	4413      	add	r3, r2
 8017996:	9344      	str	r3, [sp, #272]	; 0x110
 8017998:	e048      	b.n	8017a2c <solve_NTRU_intermediate+0x27c>
			v < hn;
			v ++, xs += dlen, ys += dlen, xd += llen, yd += llen)
		{
			*xd = zint_mod_small_signed(xs, dlen, p, p0i, R2, Rx);
 801799a:	ab52      	add	r3, sp, #328	; 0x148
 801799c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80179a0:	aa52      	add	r2, sp, #328	; 0x148
 80179a2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80179a6:	a952      	add	r1, sp, #328	; 0x148
 80179a8:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 80179ac:	6809      	ldr	r1, [r1, #0]
 80179ae:	9101      	str	r1, [sp, #4]
 80179b0:	a952      	add	r1, sp, #328	; 0x148
 80179b2:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 80179b6:	6809      	ldr	r1, [r1, #0]
 80179b8:	9100      	str	r1, [sp, #0]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	6812      	ldr	r2, [r2, #0]
 80179be:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80179c0:	9847      	ldr	r0, [sp, #284]	; 0x11c
 80179c2:	f7fd fd25 	bl	8015410 <zint_mod_small_signed>
 80179c6:	4602      	mov	r2, r0
 80179c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80179ca:	601a      	str	r2, [r3, #0]
			*yd = zint_mod_small_signed(ys, dlen, p, p0i, R2, Rx);
 80179cc:	ab52      	add	r3, sp, #328	; 0x148
 80179ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80179d2:	aa52      	add	r2, sp, #328	; 0x148
 80179d4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80179d8:	a952      	add	r1, sp, #328	; 0x148
 80179da:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 80179de:	6809      	ldr	r1, [r1, #0]
 80179e0:	9101      	str	r1, [sp, #4]
 80179e2:	a952      	add	r1, sp, #328	; 0x148
 80179e4:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 80179e8:	6809      	ldr	r1, [r1, #0]
 80179ea:	9100      	str	r1, [sp, #0]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	6812      	ldr	r2, [r2, #0]
 80179f0:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80179f2:	9846      	ldr	r0, [sp, #280]	; 0x118
 80179f4:	f7fd fd0c 	bl	8015410 <zint_mod_small_signed>
 80179f8:	4602      	mov	r2, r0
 80179fa:	9b44      	ldr	r3, [sp, #272]	; 0x110
 80179fc:	601a      	str	r2, [r3, #0]
			v ++, xs += dlen, ys += dlen, xd += llen, yd += llen)
 80179fe:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8017a00:	3301      	adds	r3, #1
 8017a02:	9348      	str	r3, [sp, #288]	; 0x120
 8017a04:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8017a06:	009b      	lsls	r3, r3, #2
 8017a08:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8017a0a:	4413      	add	r3, r2
 8017a0c:	9347      	str	r3, [sp, #284]	; 0x11c
 8017a0e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8017a10:	009b      	lsls	r3, r3, #2
 8017a12:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8017a14:	4413      	add	r3, r2
 8017a16:	9346      	str	r3, [sp, #280]	; 0x118
 8017a18:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8017a1a:	009b      	lsls	r3, r3, #2
 8017a1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017a1e:	4413      	add	r3, r2
 8017a20:	9345      	str	r3, [sp, #276]	; 0x114
 8017a22:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8017a24:	009b      	lsls	r3, r3, #2
 8017a26:	9a44      	ldr	r2, [sp, #272]	; 0x110
 8017a28:	4413      	add	r3, r2
 8017a2a:	9344      	str	r3, [sp, #272]	; 0x110
			v < hn;
 8017a2c:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8017a2e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8017a30:	429a      	cmp	r2, r3
 8017a32:	d3b2      	bcc.n	801799a <solve_NTRU_intermediate+0x1ea>
	for (u = 0; u < llen; u ++) {
 8017a34:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017a36:	3301      	adds	r3, #1
 8017a38:	9350      	str	r3, [sp, #320]	; 0x140
 8017a3a:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8017a3c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8017a3e:	429a      	cmp	r2, r3
 8017a40:	f4ff af62 	bcc.w	8017908 <solve_NTRU_intermediate+0x158>
	 */

	/*
	 * Compute our F and G modulo sufficiently many small primes.
	 */
	for (u = 0; u < llen; u ++) {
 8017a44:	2300      	movs	r3, #0
 8017a46:	9350      	str	r3, [sp, #320]	; 0x140
 8017a48:	e1f3      	b.n	8017e32 <solve_NTRU_intermediate+0x682>
 8017a4a:	bf00      	nop
 8017a4c:	08025510 	.word	0x08025510
 8017a50:	0802553c 	.word	0x0802553c
 8017a54:	080233c0 	.word	0x080233c0
		size_t v;

		/*
		 * All computations are done modulo p.
		 */
		p = primes[u].p;
 8017a58:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8017a5a:	4613      	mov	r3, r2
 8017a5c:	005b      	lsls	r3, r3, #1
 8017a5e:	4413      	add	r3, r2
 8017a60:	009b      	lsls	r3, r3, #2
 8017a62:	461a      	mov	r2, r3
 8017a64:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017a66:	4413      	add	r3, r2
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	931f      	str	r3, [sp, #124]	; 0x7c
		p0i = modp_ninv31(p);
 8017a6c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8017a6e:	f7fd f88f 	bl	8014b90 <modp_ninv31>
 8017a72:	901e      	str	r0, [sp, #120]	; 0x78
		R2 = modp_R2(p, p0i);
 8017a74:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017a76:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8017a78:	f7fd f97a 	bl	8014d70 <modp_R2>
 8017a7c:	901d      	str	r0, [sp, #116]	; 0x74

		/*
		 * If we processed slen words, then f and g have been
		 * de-NTTized, and are in RNS; we can rebuild them.
		 */
		if (u == slen) {
 8017a7e:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8017a80:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8017a82:	429a      	cmp	r2, r3
 8017a84:	d117      	bne.n	8017ab6 <solve_NTRU_intermediate+0x306>
			zint_rebuild_CRT(ft, slen, slen, n, primes, 1, t1);
 8017a86:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017a88:	9302      	str	r3, [sp, #8]
 8017a8a:	2301      	movs	r3, #1
 8017a8c:	9301      	str	r3, [sp, #4]
 8017a8e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017a90:	9300      	str	r3, [sp, #0]
 8017a92:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017a94:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8017a96:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8017a98:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8017a9a:	f7fd fda1 	bl	80155e0 <zint_rebuild_CRT>
			zint_rebuild_CRT(gt, slen, slen, n, primes, 1, t1);
 8017a9e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017aa0:	9302      	str	r3, [sp, #8]
 8017aa2:	2301      	movs	r3, #1
 8017aa4:	9301      	str	r3, [sp, #4]
 8017aa6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017aa8:	9300      	str	r3, [sp, #0]
 8017aaa:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017aac:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8017aae:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8017ab0:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8017ab2:	f7fd fd95 	bl	80155e0 <zint_rebuild_CRT>
		}

		gm = t1;
 8017ab6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017ab8:	931c      	str	r3, [sp, #112]	; 0x70
		igm = gm + n;
 8017aba:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017abc:	009b      	lsls	r3, r3, #2
 8017abe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017ac0:	4413      	add	r3, r2
 8017ac2:	931b      	str	r3, [sp, #108]	; 0x6c
		fx = igm + n;
 8017ac4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017ac6:	009b      	lsls	r3, r3, #2
 8017ac8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017aca:	4413      	add	r3, r2
 8017acc:	931a      	str	r3, [sp, #104]	; 0x68
		gx = fx + n;
 8017ace:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017ad0:	009b      	lsls	r3, r3, #2
 8017ad2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017ad4:	4413      	add	r3, r2
 8017ad6:	9319      	str	r3, [sp, #100]	; 0x64

		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 8017ad8:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8017ada:	4613      	mov	r3, r2
 8017adc:	005b      	lsls	r3, r3, #1
 8017ade:	4413      	add	r3, r2
 8017ae0:	009b      	lsls	r3, r3, #2
 8017ae2:	461a      	mov	r2, r3
 8017ae4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017ae6:	4413      	add	r3, r2
 8017ae8:	685a      	ldr	r2, [r3, #4]
 8017aea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017aec:	9301      	str	r3, [sp, #4]
 8017aee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017af0:	9300      	str	r3, [sp, #0]
 8017af2:	4613      	mov	r3, r2
 8017af4:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8017af6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017af8:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017afa:	f7fd f9f9 	bl	8014ef0 <modp_mkgm2>

		if (u < slen) {
 8017afe:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8017b00:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8017b02:	429a      	cmp	r2, r3
 8017b04:	d246      	bcs.n	8017b94 <solve_NTRU_intermediate+0x3e4>
			for (v = 0, x = ft + u, y = gt + u;
 8017b06:	2300      	movs	r3, #0
 8017b08:	9343      	str	r3, [sp, #268]	; 0x10c
 8017b0a:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017b0c:	009b      	lsls	r3, r3, #2
 8017b0e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8017b10:	4413      	add	r3, r2
 8017b12:	934a      	str	r3, [sp, #296]	; 0x128
 8017b14:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017b16:	009b      	lsls	r3, r3, #2
 8017b18:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8017b1a:	4413      	add	r3, r2
 8017b1c:	9349      	str	r3, [sp, #292]	; 0x124
 8017b1e:	e01a      	b.n	8017b56 <solve_NTRU_intermediate+0x3a6>
				v < n; v ++, x += slen, y += slen)
			{
				fx[v] = *x;
 8017b20:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017b22:	009b      	lsls	r3, r3, #2
 8017b24:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017b26:	4413      	add	r3, r2
 8017b28:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8017b2a:	6812      	ldr	r2, [r2, #0]
 8017b2c:	601a      	str	r2, [r3, #0]
				gx[v] = *y;
 8017b2e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017b30:	009b      	lsls	r3, r3, #2
 8017b32:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017b34:	4413      	add	r3, r2
 8017b36:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8017b38:	6812      	ldr	r2, [r2, #0]
 8017b3a:	601a      	str	r2, [r3, #0]
				v < n; v ++, x += slen, y += slen)
 8017b3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017b3e:	3301      	adds	r3, #1
 8017b40:	9343      	str	r3, [sp, #268]	; 0x10c
 8017b42:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8017b44:	009b      	lsls	r3, r3, #2
 8017b46:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8017b48:	4413      	add	r3, r2
 8017b4a:	934a      	str	r3, [sp, #296]	; 0x128
 8017b4c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8017b4e:	009b      	lsls	r3, r3, #2
 8017b50:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8017b52:	4413      	add	r3, r2
 8017b54:	9349      	str	r3, [sp, #292]	; 0x124
 8017b56:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8017b58:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017b5a:	429a      	cmp	r2, r3
 8017b5c:	d3e0      	bcc.n	8017b20 <solve_NTRU_intermediate+0x370>
			}
			modp_iNTT2_ext(ft + u, slen, igm, logn, p, p0i);
 8017b5e:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017b60:	009b      	lsls	r3, r3, #2
 8017b62:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8017b64:	18d0      	adds	r0, r2, r3
 8017b66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017b68:	9301      	str	r3, [sp, #4]
 8017b6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017b6c:	9300      	str	r3, [sp, #0]
 8017b6e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8017b70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017b72:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8017b74:	f7fd faac 	bl	80150d0 <modp_iNTT2_ext>
			modp_iNTT2_ext(gt + u, slen, igm, logn, p, p0i);
 8017b78:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017b7a:	009b      	lsls	r3, r3, #2
 8017b7c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8017b7e:	18d0      	adds	r0, r2, r3
 8017b80:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017b82:	9301      	str	r3, [sp, #4]
 8017b84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017b86:	9300      	str	r3, [sp, #0]
 8017b88:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8017b8a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017b8c:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8017b8e:	f7fd fa9f 	bl	80150d0 <modp_iNTT2_ext>
 8017b92:	e052      	b.n	8017c3a <solve_NTRU_intermediate+0x48a>
		} else {
			uint32_t Rx;

			Rx = modp_Rx((unsigned)slen, p, p0i, R2);
 8017b94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017b96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017b98:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8017b9a:	9839      	ldr	r0, [sp, #228]	; 0xe4
 8017b9c:	f7fd f928 	bl	8014df0 <modp_Rx>
 8017ba0:	9018      	str	r0, [sp, #96]	; 0x60
			for (v = 0, x = ft, y = gt;
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	9343      	str	r3, [sp, #268]	; 0x10c
 8017ba6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8017ba8:	934a      	str	r3, [sp, #296]	; 0x128
 8017baa:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017bac:	9349      	str	r3, [sp, #292]	; 0x124
 8017bae:	e02c      	b.n	8017c0a <solve_NTRU_intermediate+0x45a>
				v < n; v ++, x += slen, y += slen)
			{
				fx[v] = zint_mod_small_signed(x, slen,
 8017bb0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017bb2:	009b      	lsls	r3, r3, #2
 8017bb4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017bb6:	18d4      	adds	r4, r2, r3
 8017bb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017bba:	9301      	str	r3, [sp, #4]
 8017bbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017bbe:	9300      	str	r3, [sp, #0]
 8017bc0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017bc2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017bc4:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8017bc6:	984a      	ldr	r0, [sp, #296]	; 0x128
 8017bc8:	f7fd fc22 	bl	8015410 <zint_mod_small_signed>
 8017bcc:	4603      	mov	r3, r0
 8017bce:	6023      	str	r3, [r4, #0]
					p, p0i, R2, Rx);
				gx[v] = zint_mod_small_signed(y, slen,
 8017bd0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017bd2:	009b      	lsls	r3, r3, #2
 8017bd4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017bd6:	18d4      	adds	r4, r2, r3
 8017bd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017bda:	9301      	str	r3, [sp, #4]
 8017bdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017bde:	9300      	str	r3, [sp, #0]
 8017be0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017be2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017be4:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8017be6:	9849      	ldr	r0, [sp, #292]	; 0x124
 8017be8:	f7fd fc12 	bl	8015410 <zint_mod_small_signed>
 8017bec:	4603      	mov	r3, r0
 8017bee:	6023      	str	r3, [r4, #0]
				v < n; v ++, x += slen, y += slen)
 8017bf0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017bf2:	3301      	adds	r3, #1
 8017bf4:	9343      	str	r3, [sp, #268]	; 0x10c
 8017bf6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8017bf8:	009b      	lsls	r3, r3, #2
 8017bfa:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8017bfc:	4413      	add	r3, r2
 8017bfe:	934a      	str	r3, [sp, #296]	; 0x128
 8017c00:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8017c02:	009b      	lsls	r3, r3, #2
 8017c04:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8017c06:	4413      	add	r3, r2
 8017c08:	9349      	str	r3, [sp, #292]	; 0x124
 8017c0a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8017c0c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017c0e:	429a      	cmp	r2, r3
 8017c10:	d3ce      	bcc.n	8017bb0 <solve_NTRU_intermediate+0x400>
					p, p0i, R2, Rx);
			}
			modp_NTT2(fx, gm, logn, p, p0i);
 8017c12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017c14:	9301      	str	r3, [sp, #4]
 8017c16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017c18:	9300      	str	r3, [sp, #0]
 8017c1a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8017c1c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017c1e:	2101      	movs	r1, #1
 8017c20:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017c22:	f7fd f9d5 	bl	8014fd0 <modp_NTT2_ext>
			modp_NTT2(gx, gm, logn, p, p0i);
 8017c26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017c28:	9301      	str	r3, [sp, #4]
 8017c2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017c2c:	9300      	str	r3, [sp, #0]
 8017c2e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8017c30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017c32:	2101      	movs	r1, #1
 8017c34:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017c36:	f7fd f9cb 	bl	8014fd0 <modp_NTT2_ext>
		/*
		 * Get F' and G' modulo p and in NTT representation
		 * (they have degree n/2). These values were computed in
		 * a previous step, and stored in Ft and Gt.
		 */
		Fp = gx + n;
 8017c3a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017c3c:	009b      	lsls	r3, r3, #2
 8017c3e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017c40:	4413      	add	r3, r2
 8017c42:	9317      	str	r3, [sp, #92]	; 0x5c
		Gp = Fp + hn;
 8017c44:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8017c46:	009b      	lsls	r3, r3, #2
 8017c48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017c4a:	4413      	add	r3, r2
 8017c4c:	9316      	str	r3, [sp, #88]	; 0x58
		for (v = 0, x = Ft + u, y = Gt + u;
 8017c4e:	2300      	movs	r3, #0
 8017c50:	9343      	str	r3, [sp, #268]	; 0x10c
 8017c52:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017c54:	009b      	lsls	r3, r3, #2
 8017c56:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8017c58:	4413      	add	r3, r2
 8017c5a:	934a      	str	r3, [sp, #296]	; 0x128
 8017c5c:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017c5e:	009b      	lsls	r3, r3, #2
 8017c60:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8017c62:	4413      	add	r3, r2
 8017c64:	9349      	str	r3, [sp, #292]	; 0x124
 8017c66:	e01a      	b.n	8017c9e <solve_NTRU_intermediate+0x4ee>
			v < hn; v ++, x += llen, y += llen)
		{
			Fp[v] = *x;
 8017c68:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017c6a:	009b      	lsls	r3, r3, #2
 8017c6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017c6e:	4413      	add	r3, r2
 8017c70:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8017c72:	6812      	ldr	r2, [r2, #0]
 8017c74:	601a      	str	r2, [r3, #0]
			Gp[v] = *y;
 8017c76:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017c78:	009b      	lsls	r3, r3, #2
 8017c7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017c7c:	4413      	add	r3, r2
 8017c7e:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8017c80:	6812      	ldr	r2, [r2, #0]
 8017c82:	601a      	str	r2, [r3, #0]
			v < hn; v ++, x += llen, y += llen)
 8017c84:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017c86:	3301      	adds	r3, #1
 8017c88:	9343      	str	r3, [sp, #268]	; 0x10c
 8017c8a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8017c8c:	009b      	lsls	r3, r3, #2
 8017c8e:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8017c90:	4413      	add	r3, r2
 8017c92:	934a      	str	r3, [sp, #296]	; 0x128
 8017c94:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8017c96:	009b      	lsls	r3, r3, #2
 8017c98:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8017c9a:	4413      	add	r3, r2
 8017c9c:	9349      	str	r3, [sp, #292]	; 0x124
 8017c9e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8017ca0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8017ca2:	429a      	cmp	r2, r3
 8017ca4:	d3e0      	bcc.n	8017c68 <solve_NTRU_intermediate+0x4b8>
		}
		modp_NTT2(Fp, gm, logn - 1, p, p0i);
 8017ca6:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8017ca8:	1e5a      	subs	r2, r3, #1
 8017caa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017cac:	9301      	str	r3, [sp, #4]
 8017cae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017cb0:	9300      	str	r3, [sp, #0]
 8017cb2:	4613      	mov	r3, r2
 8017cb4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017cb6:	2101      	movs	r1, #1
 8017cb8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017cba:	f7fd f989 	bl	8014fd0 <modp_NTT2_ext>
		modp_NTT2(Gp, gm, logn - 1, p, p0i);
 8017cbe:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8017cc0:	1e5a      	subs	r2, r3, #1
 8017cc2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017cc4:	9301      	str	r3, [sp, #4]
 8017cc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017cc8:	9300      	str	r3, [sp, #0]
 8017cca:	4613      	mov	r3, r2
 8017ccc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017cce:	2101      	movs	r1, #1
 8017cd0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017cd2:	f7fd f97d 	bl	8014fd0 <modp_NTT2_ext>
		 * In all cases, we can thus compute F and G in NTT
		 * representation by a few simple multiplications.
		 * Moreover, in our chosen NTT representation, roots
		 * from the same group are consecutive in RAM.
		 */
		for (v = 0, x = Ft + u, y = Gt + u; v < hn;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	9343      	str	r3, [sp, #268]	; 0x10c
 8017cda:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017cdc:	009b      	lsls	r3, r3, #2
 8017cde:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8017ce0:	4413      	add	r3, r2
 8017ce2:	934a      	str	r3, [sp, #296]	; 0x128
 8017ce4:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017ce6:	009b      	lsls	r3, r3, #2
 8017ce8:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8017cea:	4413      	add	r3, r2
 8017cec:	9349      	str	r3, [sp, #292]	; 0x124
 8017cee:	e07e      	b.n	8017dee <solve_NTRU_intermediate+0x63e>
			v ++, x += (llen << 1), y += (llen << 1))
		{
			uint32_t ftA, ftB, gtA, gtB;
			uint32_t mFp, mGp;

			ftA = fx[(v << 1) + 0];
 8017cf0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017cf2:	00db      	lsls	r3, r3, #3
 8017cf4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017cf6:	4413      	add	r3, r2
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	9315      	str	r3, [sp, #84]	; 0x54
			ftB = fx[(v << 1) + 1];
 8017cfc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017cfe:	00db      	lsls	r3, r3, #3
 8017d00:	3304      	adds	r3, #4
 8017d02:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017d04:	4413      	add	r3, r2
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	9314      	str	r3, [sp, #80]	; 0x50
			gtA = gx[(v << 1) + 0];
 8017d0a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017d0c:	00db      	lsls	r3, r3, #3
 8017d0e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017d10:	4413      	add	r3, r2
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	9313      	str	r3, [sp, #76]	; 0x4c
			gtB = gx[(v << 1) + 1];
 8017d16:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017d18:	00db      	lsls	r3, r3, #3
 8017d1a:	3304      	adds	r3, #4
 8017d1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017d1e:	441a      	add	r2, r3
 8017d20:	ab52      	add	r3, sp, #328	; 0x148
 8017d22:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8017d26:	6812      	ldr	r2, [r2, #0]
 8017d28:	601a      	str	r2, [r3, #0]
			mFp = modp_montymul(Fp[v], R2, p, p0i);
 8017d2a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017d2c:	009b      	lsls	r3, r3, #2
 8017d2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017d30:	4413      	add	r3, r2
 8017d32:	6818      	ldr	r0, [r3, #0]
 8017d34:	ab52      	add	r3, sp, #328	; 0x148
 8017d36:	f5a3 7482 	sub.w	r4, r3, #260	; 0x104
 8017d3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017d3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017d3e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8017d40:	f7fc ff96 	bl	8014c70 <modp_montymul>
 8017d44:	6020      	str	r0, [r4, #0]
			mGp = modp_montymul(Gp[v], R2, p, p0i);
 8017d46:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017d48:	009b      	lsls	r3, r3, #2
 8017d4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017d4c:	4413      	add	r3, r2
 8017d4e:	6818      	ldr	r0, [r3, #0]
 8017d50:	ab52      	add	r3, sp, #328	; 0x148
 8017d52:	f5a3 7484 	sub.w	r4, r3, #264	; 0x108
 8017d56:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017d58:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017d5a:	991d      	ldr	r1, [sp, #116]	; 0x74
 8017d5c:	f7fc ff88 	bl	8014c70 <modp_montymul>
 8017d60:	6020      	str	r0, [r4, #0]
			x[0] = modp_montymul(gtB, mFp, p, p0i);
 8017d62:	ab52      	add	r3, sp, #328	; 0x148
 8017d64:	f5a3 7182 	sub.w	r1, r3, #260	; 0x104
 8017d68:	ab52      	add	r3, sp, #328	; 0x148
 8017d6a:	f5a3 7080 	sub.w	r0, r3, #256	; 0x100
 8017d6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017d70:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017d72:	6809      	ldr	r1, [r1, #0]
 8017d74:	6800      	ldr	r0, [r0, #0]
 8017d76:	f7fc ff7b 	bl	8014c70 <modp_montymul>
 8017d7a:	4602      	mov	r2, r0
 8017d7c:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8017d7e:	601a      	str	r2, [r3, #0]
			x[llen] = modp_montymul(gtA, mFp, p, p0i);
 8017d80:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8017d82:	009b      	lsls	r3, r3, #2
 8017d84:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8017d86:	18d4      	adds	r4, r2, r3
 8017d88:	ab52      	add	r3, sp, #328	; 0x148
 8017d8a:	f5a3 7182 	sub.w	r1, r3, #260	; 0x104
 8017d8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017d90:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017d92:	6809      	ldr	r1, [r1, #0]
 8017d94:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017d96:	f7fc ff6b 	bl	8014c70 <modp_montymul>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	6023      	str	r3, [r4, #0]
			y[0] = modp_montymul(ftB, mGp, p, p0i);
 8017d9e:	ab52      	add	r3, sp, #328	; 0x148
 8017da0:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8017da4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017da6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017da8:	6809      	ldr	r1, [r1, #0]
 8017daa:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017dac:	f7fc ff60 	bl	8014c70 <modp_montymul>
 8017db0:	4602      	mov	r2, r0
 8017db2:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8017db4:	601a      	str	r2, [r3, #0]
			y[llen] = modp_montymul(ftA, mGp, p, p0i);
 8017db6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8017db8:	009b      	lsls	r3, r3, #2
 8017dba:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8017dbc:	18d4      	adds	r4, r2, r3
 8017dbe:	ab52      	add	r3, sp, #328	; 0x148
 8017dc0:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8017dc4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017dc6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017dc8:	6809      	ldr	r1, [r1, #0]
 8017dca:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017dcc:	f7fc ff50 	bl	8014c70 <modp_montymul>
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	6023      	str	r3, [r4, #0]
			v ++, x += (llen << 1), y += (llen << 1))
 8017dd4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017dd6:	3301      	adds	r3, #1
 8017dd8:	9343      	str	r3, [sp, #268]	; 0x10c
 8017dda:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8017ddc:	00db      	lsls	r3, r3, #3
 8017dde:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8017de0:	4413      	add	r3, r2
 8017de2:	934a      	str	r3, [sp, #296]	; 0x128
 8017de4:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8017de6:	00db      	lsls	r3, r3, #3
 8017de8:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8017dea:	4413      	add	r3, r2
 8017dec:	9349      	str	r3, [sp, #292]	; 0x124
		for (v = 0, x = Ft + u, y = Gt + u; v < hn;
 8017dee:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8017df0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8017df2:	429a      	cmp	r2, r3
 8017df4:	f4ff af7c 	bcc.w	8017cf0 <solve_NTRU_intermediate+0x540>
		}
		modp_iNTT2_ext(Ft + u, llen, igm, logn, p, p0i);
 8017df8:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017dfa:	009b      	lsls	r3, r3, #2
 8017dfc:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8017dfe:	18d0      	adds	r0, r2, r3
 8017e00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017e02:	9301      	str	r3, [sp, #4]
 8017e04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017e06:	9300      	str	r3, [sp, #0]
 8017e08:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8017e0a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017e0c:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8017e0e:	f7fd f95f 	bl	80150d0 <modp_iNTT2_ext>
		modp_iNTT2_ext(Gt + u, llen, igm, logn, p, p0i);
 8017e12:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017e14:	009b      	lsls	r3, r3, #2
 8017e16:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8017e18:	18d0      	adds	r0, r2, r3
 8017e1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017e1c:	9301      	str	r3, [sp, #4]
 8017e1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017e20:	9300      	str	r3, [sp, #0]
 8017e22:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8017e24:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017e26:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8017e28:	f7fd f952 	bl	80150d0 <modp_iNTT2_ext>
	for (u = 0; u < llen; u ++) {
 8017e2c:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017e2e:	3301      	adds	r3, #1
 8017e30:	9350      	str	r3, [sp, #320]	; 0x140
 8017e32:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8017e34:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8017e36:	429a      	cmp	r2, r3
 8017e38:	f4ff ae0e 	bcc.w	8017a58 <solve_NTRU_intermediate+0x2a8>
	}

	/*
	 * Rebuild F and G with the CRT.
	 */
	zint_rebuild_CRT(Ft, llen, llen, n, primes, 1, t1);
 8017e3c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017e3e:	9302      	str	r3, [sp, #8]
 8017e40:	2301      	movs	r3, #1
 8017e42:	9301      	str	r3, [sp, #4]
 8017e44:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017e46:	9300      	str	r3, [sp, #0]
 8017e48:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017e4a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8017e4c:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8017e4e:	984f      	ldr	r0, [sp, #316]	; 0x13c
 8017e50:	f7fd fbc6 	bl	80155e0 <zint_rebuild_CRT>
	zint_rebuild_CRT(Gt, llen, llen, n, primes, 1, t1);
 8017e54:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017e56:	9302      	str	r3, [sp, #8]
 8017e58:	2301      	movs	r3, #1
 8017e5a:	9301      	str	r3, [sp, #4]
 8017e5c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017e5e:	9300      	str	r3, [sp, #0]
 8017e60:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017e62:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8017e64:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8017e66:	984e      	ldr	r0, [sp, #312]	; 0x138
 8017e68:	f7fd fbba 	bl	80155e0 <zint_rebuild_CRT>
	 * Arrays of 'fpr' are obtained from the temporary array itself.
	 * We ensure that the base is at a properly aligned offset (the
	 * source array tmp[] is supposed to be already aligned).
	 */

	rt3 = align_fpr(tmp, t1);
 8017e6c:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8017e6e:	9854      	ldr	r0, [sp, #336]	; 0x150
 8017e70:	f7ff f87e 	bl	8016f70 <align_fpr>
 8017e74:	9030      	str	r0, [sp, #192]	; 0xc0
	rt4 = rt3 + n;
 8017e76:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017e78:	00db      	lsls	r3, r3, #3
 8017e7a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8017e7c:	4413      	add	r3, r2
 8017e7e:	932f      	str	r3, [sp, #188]	; 0xbc
	rt5 = rt4 + n;
 8017e80:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017e82:	00db      	lsls	r3, r3, #3
 8017e84:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017e86:	4413      	add	r3, r2
 8017e88:	932e      	str	r3, [sp, #184]	; 0xb8
	rt1 = rt5 + (n >> 1);
 8017e8a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017e8c:	085b      	lsrs	r3, r3, #1
 8017e8e:	00db      	lsls	r3, r3, #3
 8017e90:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017e92:	4413      	add	r3, r2
 8017e94:	932d      	str	r3, [sp, #180]	; 0xb4
	k = (int32_t *)align_u32(tmp, rt1);
 8017e96:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8017e98:	9854      	ldr	r0, [sp, #336]	; 0x150
 8017e9a:	f7ff f889 	bl	8016fb0 <align_u32>
 8017e9e:	902c      	str	r0, [sp, #176]	; 0xb0
	rt2 = align_fpr(tmp, k + n);
 8017ea0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017ea2:	009b      	lsls	r3, r3, #2
 8017ea4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8017ea6:	4413      	add	r3, r2
 8017ea8:	4619      	mov	r1, r3
 8017eaa:	9854      	ldr	r0, [sp, #336]	; 0x150
 8017eac:	f7ff f860 	bl	8016f70 <align_fpr>
 8017eb0:	904d      	str	r0, [sp, #308]	; 0x134
	if (rt2 < (rt1 + n)) {
 8017eb2:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017eb4:	00db      	lsls	r3, r3, #3
 8017eb6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017eb8:	4413      	add	r3, r2
 8017eba:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 8017ebc:	429a      	cmp	r2, r3
 8017ebe:	d204      	bcs.n	8017eca <solve_NTRU_intermediate+0x71a>
		rt2 = rt1 + n;
 8017ec0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017ec2:	00db      	lsls	r3, r3, #3
 8017ec4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017ec6:	4413      	add	r3, r2
 8017ec8:	934d      	str	r3, [sp, #308]	; 0x134
	}
	t1 = (uint32_t *)k + n;
 8017eca:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8017ecc:	009b      	lsls	r3, r3, #2
 8017ece:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8017ed0:	4413      	add	r3, r2
 8017ed2:	9332      	str	r3, [sp, #200]	; 0xc8
	 * below 2^310 or so. Thus, when values are larger than 10 words,
	 * we consider only the top 10 words. Array lengths have been
	 * computed so that average maximum length will fall in the
	 * middle or the upper half of these top 10 words.
	 */
	rlen = (slen > 10) ? 10 : slen;
 8017ed4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8017ed6:	2b0a      	cmp	r3, #10
 8017ed8:	bf28      	it	cs
 8017eda:	230a      	movcs	r3, #10
 8017edc:	932b      	str	r3, [sp, #172]	; 0xac
	poly_big_to_fp(rt3, ft + slen - rlen, rlen, slen, logn);
 8017ede:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8017ee0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017ee2:	1ad3      	subs	r3, r2, r3
 8017ee4:	009b      	lsls	r3, r3, #2
 8017ee6:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8017ee8:	18d1      	adds	r1, r2, r3
 8017eea:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8017eec:	9300      	str	r3, [sp, #0]
 8017eee:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8017ef0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017ef2:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8017ef4:	f7fe fd14 	bl	8016920 <poly_big_to_fp>
	poly_big_to_fp(rt4, gt + slen - rlen, rlen, slen, logn);
 8017ef8:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8017efa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017efc:	1ad3      	subs	r3, r2, r3
 8017efe:	009b      	lsls	r3, r3, #2
 8017f00:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8017f02:	18d1      	adds	r1, r2, r3
 8017f04:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8017f06:	9300      	str	r3, [sp, #0]
 8017f08:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8017f0a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017f0c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8017f0e:	f7fe fd07 	bl	8016920 <poly_big_to_fp>

	/*
	 * Values in rt3 and rt4 are downscaled by 2^(scale_fg).
	 */
	scale_fg = 31 * (int)(slen - rlen);
 8017f12:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8017f14:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017f16:	1ad3      	subs	r3, r2, r3
 8017f18:	461a      	mov	r2, r3
 8017f1a:	4613      	mov	r3, r2
 8017f1c:	015b      	lsls	r3, r3, #5
 8017f1e:	1a9b      	subs	r3, r3, r2
 8017f20:	932a      	str	r3, [sp, #168]	; 0xa8
	 * Estimated boundaries for the maximum size (in bits) of the
	 * coefficients of (f,g). We use the measured average, and
	 * allow for a deviation of at most six times the standard
	 * deviation.
	 */
	minbl_fg = BITLENGTH[depth].avg - 6 * BITLENGTH[depth].std;
 8017f22:	4a7b      	ldr	r2, [pc, #492]	; (8018110 <solve_NTRU_intermediate+0x960>)
 8017f24:	ab52      	add	r3, sp, #328	; 0x148
 8017f26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8017f30:	4a77      	ldr	r2, [pc, #476]	; (8018110 <solve_NTRU_intermediate+0x960>)
 8017f32:	ab52      	add	r3, sp, #328	; 0x148
 8017f34:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	00db      	lsls	r3, r3, #3
 8017f3c:	4413      	add	r3, r2
 8017f3e:	685a      	ldr	r2, [r3, #4]
 8017f40:	4613      	mov	r3, r2
 8017f42:	0092      	lsls	r2, r2, #2
 8017f44:	1a9b      	subs	r3, r3, r2
 8017f46:	005b      	lsls	r3, r3, #1
 8017f48:	440b      	add	r3, r1
 8017f4a:	9329      	str	r3, [sp, #164]	; 0xa4
	maxbl_fg = BITLENGTH[depth].avg + 6 * BITLENGTH[depth].std;
 8017f4c:	4a70      	ldr	r2, [pc, #448]	; (8018110 <solve_NTRU_intermediate+0x960>)
 8017f4e:	ab52      	add	r3, sp, #328	; 0x148
 8017f50:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8017f5a:	4a6d      	ldr	r2, [pc, #436]	; (8018110 <solve_NTRU_intermediate+0x960>)
 8017f5c:	ab52      	add	r3, sp, #328	; 0x148
 8017f5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	00db      	lsls	r3, r3, #3
 8017f66:	4413      	add	r3, r2
 8017f68:	685a      	ldr	r2, [r3, #4]
 8017f6a:	4613      	mov	r3, r2
 8017f6c:	005b      	lsls	r3, r3, #1
 8017f6e:	4413      	add	r3, r2
 8017f70:	005b      	lsls	r3, r3, #1
 8017f72:	440b      	add	r3, r1
 8017f74:	9328      	str	r3, [sp, #160]	; 0xa0

	/*
	 * Compute 1/(f*adj(f)+g*adj(g)) in rt5. We also keep adj(f)
	 * and adj(g) in rt3 and rt4, respectively.
	 */
	Zf(FFT)(rt3, logn);
 8017f76:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8017f78:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8017f7a:	f7f9 fe81 	bl	8011c80 <falcon_inner_FFT>
	Zf(FFT)(rt4, logn);
 8017f7e:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8017f80:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8017f82:	f7f9 fe7d 	bl	8011c80 <falcon_inner_FFT>
	Zf(poly_invnorm2_fft)(rt5, rt3, rt4, logn);
 8017f86:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8017f88:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017f8a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8017f8c:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8017f8e:	f7fa fb3f 	bl	8012610 <falcon_inner_poly_invnorm2_fft>
	Zf(poly_adj_fft)(rt3, logn);
 8017f92:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8017f94:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8017f96:	f7fa f963 	bl	8012260 <falcon_inner_poly_adj_fft>
	Zf(poly_adj_fft)(rt4, logn);
 8017f9a:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8017f9c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8017f9e:	f7fa f95f 	bl	8012260 <falcon_inner_poly_adj_fft>
	 *
	 * The expected maximum bit length of coefficients of F and G
	 * is kept in maxbl_FG, with the corresponding word length in
	 * FGlen.
	 */
	FGlen = llen;
 8017fa2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8017fa4:	9351      	str	r3, [sp, #324]	; 0x144
	maxbl_FG = 31 * (int)llen;
 8017fa6:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8017fa8:	4613      	mov	r3, r2
 8017faa:	015b      	lsls	r3, r3, #5
 8017fac:	1a9b      	subs	r3, r3, r2
 8017fae:	934c      	str	r3, [sp, #304]	; 0x130
	 * bits).
	 *
	 * The size of (f,g) is not known exactly, but maxbl_fg is an
	 * upper bound.
	 */
	scale_k = maxbl_FG - minbl_fg;
 8017fb0:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 8017fb2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017fb4:	1ad3      	subs	r3, r2, r3
 8017fb6:	934b      	str	r3, [sp, #300]	; 0x12c

		/*
		 * Convert current F and G into floating-point. We apply
		 * scaling if the current length is more than 10 words.
		 */
		rlen = (FGlen > 10) ? 10 : FGlen;
 8017fb8:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8017fba:	2b0a      	cmp	r3, #10
 8017fbc:	bf28      	it	cs
 8017fbe:	230a      	movcs	r3, #10
 8017fc0:	932b      	str	r3, [sp, #172]	; 0xac
		scale_FG = 31 * (int)(FGlen - rlen);
 8017fc2:	9a51      	ldr	r2, [sp, #324]	; 0x144
 8017fc4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017fc6:	1ad3      	subs	r3, r2, r3
 8017fc8:	461a      	mov	r2, r3
 8017fca:	4613      	mov	r3, r2
 8017fcc:	015b      	lsls	r3, r3, #5
 8017fce:	1a9b      	subs	r3, r3, r2
 8017fd0:	9327      	str	r3, [sp, #156]	; 0x9c
		poly_big_to_fp(rt1, Ft + FGlen - rlen, rlen, llen, logn);
 8017fd2:	9a51      	ldr	r2, [sp, #324]	; 0x144
 8017fd4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017fd6:	1ad3      	subs	r3, r2, r3
 8017fd8:	009b      	lsls	r3, r3, #2
 8017fda:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8017fdc:	18d1      	adds	r1, r2, r3
 8017fde:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8017fe0:	9300      	str	r3, [sp, #0]
 8017fe2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8017fe4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017fe6:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8017fe8:	f7fe fc9a 	bl	8016920 <poly_big_to_fp>
		poly_big_to_fp(rt2, Gt + FGlen - rlen, rlen, llen, logn);
 8017fec:	9a51      	ldr	r2, [sp, #324]	; 0x144
 8017fee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017ff0:	1ad3      	subs	r3, r2, r3
 8017ff2:	009b      	lsls	r3, r3, #2
 8017ff4:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8017ff6:	18d1      	adds	r1, r2, r3
 8017ff8:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8017ffa:	9300      	str	r3, [sp, #0]
 8017ffc:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8017ffe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018000:	984d      	ldr	r0, [sp, #308]	; 0x134
 8018002:	f7fe fc8d 	bl	8016920 <poly_big_to_fp>

		/*
		 * Compute (F*adj(f)+G*adj(g))/(f*adj(f)+g*adj(g)) in rt2.
		 */
		Zf(FFT)(rt1, logn);
 8018006:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8018008:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801800a:	f7f9 fe39 	bl	8011c80 <falcon_inner_FFT>
		Zf(FFT)(rt2, logn);
 801800e:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8018010:	984d      	ldr	r0, [sp, #308]	; 0x134
 8018012:	f7f9 fe35 	bl	8011c80 <falcon_inner_FFT>
		Zf(poly_mul_fft)(rt1, rt3, logn);
 8018016:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8018018:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801801a:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801801c:	f7fa f950 	bl	80122c0 <falcon_inner_poly_mul_fft>
		Zf(poly_mul_fft)(rt2, rt4, logn);
 8018020:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8018022:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8018024:	984d      	ldr	r0, [sp, #308]	; 0x134
 8018026:	f7fa f94b 	bl	80122c0 <falcon_inner_poly_mul_fft>
		Zf(poly_add)(rt2, rt1, logn);
 801802a:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 801802c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801802e:	984d      	ldr	r0, [sp, #308]	; 0x134
 8018030:	f7fa f886 	bl	8012140 <falcon_inner_poly_add>
		Zf(poly_mul_autoadj_fft)(rt2, rt5, logn);
 8018034:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8018036:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8018038:	984d      	ldr	r0, [sp, #308]	; 0x134
 801803a:	f7fa fc71 	bl	8012920 <falcon_inner_poly_mul_autoadj_fft>
		Zf(iFFT)(rt2, logn);
 801803e:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8018040:	984d      	ldr	r0, [sp, #308]	; 0x134
 8018042:	f7f9 ff35 	bl	8011eb0 <falcon_inner_iFFT>
		 *
		 * We want that value to be scaled by 'scale_k', hence we
		 * apply a corrective scaling. After scaling, the values
		 * should fit in -2^31-1..+2^31-1.
		 */
		dc = scale_k - scale_FG + scale_fg;
 8018046:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 8018048:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801804a:	1ad3      	subs	r3, r2, r3
 801804c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801804e:	4413      	add	r3, r2
 8018050:	9342      	str	r3, [sp, #264]	; 0x108
		 * non-constant-time process.
		 * (We could use ldexp(), but we prefer to avoid any
		 * dependency on libm. When using FP emulation, we could
		 * use our fpr_ldexp(), which is constant-time.)
		 */
		if (dc < 0) {
 8018052:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8018054:	2b00      	cmp	r3, #0
 8018056:	da09      	bge.n	801806c <solve_NTRU_intermediate+0x8bc>
			dc = -dc;
 8018058:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801805a:	425b      	negs	r3, r3
 801805c:	9342      	str	r3, [sp, #264]	; 0x108
			pt = fpr_two;
 801805e:	f04f 0200 	mov.w	r2, #0
 8018062:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018066:	e9cd 233e 	strd	r2, r3, [sp, #248]	; 0xf8
 801806a:	e004      	b.n	8018076 <solve_NTRU_intermediate+0x8c6>
		} else {
			pt = fpr_onehalf;
 801806c:	f04f 0200 	mov.w	r2, #0
 8018070:	4b28      	ldr	r3, [pc, #160]	; (8018114 <solve_NTRU_intermediate+0x964>)
 8018072:	e9cd 233e 	strd	r2, r3, [sp, #248]	; 0xf8
		}
		pdc = fpr_one;
 8018076:	f04f 0200 	mov.w	r2, #0
 801807a:	4b27      	ldr	r3, [pc, #156]	; (8018118 <solve_NTRU_intermediate+0x968>)
 801807c:	e9cd 2340 	strd	r2, r3, [sp, #256]	; 0x100
		while (dc != 0) {
 8018080:	e015      	b.n	80180ae <solve_NTRU_intermediate+0x8fe>
			if ((dc & 1) != 0) {
 8018082:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8018084:	f003 0301 	and.w	r3, r3, #1
 8018088:	2b00      	cmp	r3, #0
 801808a:	d007      	beq.n	801809c <solve_NTRU_intermediate+0x8ec>
				pdc = fpr_mul(pdc, pt);
 801808c:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 8018090:	e9dd 0140 	ldrd	r0, r1, [sp, #256]	; 0x100
 8018094:	f7fb f9f4 	bl	8013480 <falcon_inner_fpr_mul>
 8018098:	e9cd 0140 	strd	r0, r1, [sp, #256]	; 0x100
			}
			dc >>= 1;
 801809c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 801809e:	105b      	asrs	r3, r3, #1
 80180a0:	9342      	str	r3, [sp, #264]	; 0x108
			pt = fpr_sqr(pt);
 80180a2:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 80180a6:	f7fc fceb 	bl	8014a80 <fpr_sqr.lto_priv.2>
 80180aa:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
		while (dc != 0) {
 80180ae:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d1e6      	bne.n	8018082 <solve_NTRU_intermediate+0x8d2>
		}

		for (u = 0; u < n; u ++) {
 80180b4:	2300      	movs	r3, #0
 80180b6:	9350      	str	r3, [sp, #320]	; 0x140
 80180b8:	e03d      	b.n	8018136 <solve_NTRU_intermediate+0x986>
			fpr xv;

			xv = fpr_mul(rt2[u], pdc);
 80180ba:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80180bc:	00db      	lsls	r3, r3, #3
 80180be:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 80180c0:	4413      	add	r3, r2
 80180c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80180c6:	e9dd 2340 	ldrd	r2, r3, [sp, #256]	; 0x100
 80180ca:	f7fb f9d9 	bl	8013480 <falcon_inner_fpr_mul>
 80180ce:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
			 * is not in-bounds. Note that the test does not
			 * break constant-time discipline, since any
			 * failure here implies that we discard the current
			 * secret key (f,g).
			 */
			if (!fpr_lt(fpr_mtwo31m1, xv)
 80180d2:	a10b      	add	r1, pc, #44	; (adr r1, 8018100 <solve_NTRU_intermediate+0x950>)
 80180d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80180d8:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 80180dc:	f7fc fce8 	bl	8014ab0 <fpr_lt>
 80180e0:	4603      	mov	r3, r0
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d009      	beq.n	80180fa <solve_NTRU_intermediate+0x94a>
				|| !fpr_lt(xv, fpr_ptwo31m1))
 80180e6:	a308      	add	r3, pc, #32	; (adr r3, 8018108 <solve_NTRU_intermediate+0x958>)
 80180e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ec:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 80180f0:	f7fc fcde 	bl	8014ab0 <fpr_lt>
 80180f4:	4603      	mov	r3, r0
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d110      	bne.n	801811c <solve_NTRU_intermediate+0x96c>
			{
				return 0;
 80180fa:	2300      	movs	r3, #0
 80180fc:	e11e      	b.n	801833c <solve_NTRU_intermediate+0xb8c>
 80180fe:	bf00      	nop
 8018100:	ffc00000 	.word	0xffc00000
 8018104:	c1dfffff 	.word	0xc1dfffff
 8018108:	ffc00000 	.word	0xffc00000
 801810c:	41dfffff 	.word	0x41dfffff
 8018110:	08025564 	.word	0x08025564
 8018114:	3fe00000 	.word	0x3fe00000
 8018118:	3ff00000 	.word	0x3ff00000
			}
			k[u] = (int32_t)fpr_rint(xv);
 801811c:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8018120:	f7fc fbee 	bl	8014900 <fpr_rint.lto_priv.1>
 8018124:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8018126:	009b      	lsls	r3, r3, #2
 8018128:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801812a:	4413      	add	r3, r2
 801812c:	4602      	mov	r2, r0
 801812e:	601a      	str	r2, [r3, #0]
		for (u = 0; u < n; u ++) {
 8018130:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8018132:	3301      	adds	r3, #1
 8018134:	9350      	str	r3, [sp, #320]	; 0x140
 8018136:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8018138:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 801813a:	429a      	cmp	r2, r3
 801813c:	d3bd      	bcc.n	80180ba <solve_NTRU_intermediate+0x90a>
		 * down by maxbl_FG - minbl_fg bits.
		 *
		 * If we are at low depth, then we use the NTT to
		 * compute k*f and k*g.
		 */
		sch = (uint32_t)(scale_k / 31);
 801813e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8018140:	4a80      	ldr	r2, [pc, #512]	; (8018344 <solve_NTRU_intermediate+0xb94>)
 8018142:	fb82 1203 	smull	r1, r2, r2, r3
 8018146:	441a      	add	r2, r3
 8018148:	1112      	asrs	r2, r2, #4
 801814a:	17db      	asrs	r3, r3, #31
 801814c:	1ad3      	subs	r3, r2, r3
 801814e:	9326      	str	r3, [sp, #152]	; 0x98
		scl = (uint32_t)(scale_k % 31);
 8018150:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 8018152:	4b7c      	ldr	r3, [pc, #496]	; (8018344 <solve_NTRU_intermediate+0xb94>)
 8018154:	fb83 1302 	smull	r1, r3, r3, r2
 8018158:	4413      	add	r3, r2
 801815a:	1119      	asrs	r1, r3, #4
 801815c:	17d3      	asrs	r3, r2, #31
 801815e:	1ac9      	subs	r1, r1, r3
 8018160:	460b      	mov	r3, r1
 8018162:	015b      	lsls	r3, r3, #5
 8018164:	1a5b      	subs	r3, r3, r1
 8018166:	1ad1      	subs	r1, r2, r3
 8018168:	9125      	str	r1, [sp, #148]	; 0x94
		if (depth <= DEPTH_INT_FG) {
 801816a:	ab52      	add	r3, sp, #328	; 0x148
 801816c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	2b04      	cmp	r3, #4
 8018174:	d828      	bhi.n	80181c8 <solve_NTRU_intermediate+0xa18>
			poly_sub_scaled_ntt(Ft, FGlen, llen, ft, slen, slen,
 8018176:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8018178:	9306      	str	r3, [sp, #24]
 801817a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 801817c:	9305      	str	r3, [sp, #20]
 801817e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018180:	9304      	str	r3, [sp, #16]
 8018182:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018184:	9303      	str	r3, [sp, #12]
 8018186:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018188:	9302      	str	r3, [sp, #8]
 801818a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801818c:	9301      	str	r3, [sp, #4]
 801818e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8018190:	9300      	str	r3, [sp, #0]
 8018192:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8018194:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8018196:	9951      	ldr	r1, [sp, #324]	; 0x144
 8018198:	984f      	ldr	r0, [sp, #316]	; 0x13c
 801819a:	f7fe fcf1 	bl	8016b80 <poly_sub_scaled_ntt>
				k, sch, scl, logn, t1);
			poly_sub_scaled_ntt(Gt, FGlen, llen, gt, slen, slen,
 801819e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80181a0:	9306      	str	r3, [sp, #24]
 80181a2:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80181a4:	9305      	str	r3, [sp, #20]
 80181a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80181a8:	9304      	str	r3, [sp, #16]
 80181aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80181ac:	9303      	str	r3, [sp, #12]
 80181ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80181b0:	9302      	str	r3, [sp, #8]
 80181b2:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80181b4:	9301      	str	r3, [sp, #4]
 80181b6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80181b8:	9300      	str	r3, [sp, #0]
 80181ba:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80181bc:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80181be:	9951      	ldr	r1, [sp, #324]	; 0x144
 80181c0:	984e      	ldr	r0, [sp, #312]	; 0x138
 80181c2:	f7fe fcdd 	bl	8016b80 <poly_sub_scaled_ntt>
 80181c6:	e023      	b.n	8018210 <solve_NTRU_intermediate+0xa60>
				k, sch, scl, logn, t1);
		} else {
			poly_sub_scaled(Ft, FGlen, llen, ft, slen, slen,
 80181c8:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80181ca:	9305      	str	r3, [sp, #20]
 80181cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80181ce:	9304      	str	r3, [sp, #16]
 80181d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80181d2:	9303      	str	r3, [sp, #12]
 80181d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80181d6:	9302      	str	r3, [sp, #8]
 80181d8:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80181da:	9301      	str	r3, [sp, #4]
 80181dc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80181de:	9300      	str	r3, [sp, #0]
 80181e0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80181e2:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80181e4:	9951      	ldr	r1, [sp, #324]	; 0x144
 80181e6:	984f      	ldr	r0, [sp, #316]	; 0x13c
 80181e8:	f7fe fc72 	bl	8016ad0 <poly_sub_scaled>
				k, sch, scl, logn);
			poly_sub_scaled(Gt, FGlen, llen, gt, slen, slen,
 80181ec:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80181ee:	9305      	str	r3, [sp, #20]
 80181f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80181f2:	9304      	str	r3, [sp, #16]
 80181f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80181f6:	9303      	str	r3, [sp, #12]
 80181f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80181fa:	9302      	str	r3, [sp, #8]
 80181fc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80181fe:	9301      	str	r3, [sp, #4]
 8018200:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8018202:	9300      	str	r3, [sp, #0]
 8018204:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018206:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8018208:	9951      	ldr	r1, [sp, #324]	; 0x144
 801820a:	984e      	ldr	r0, [sp, #312]	; 0x138
 801820c:	f7fe fc60 	bl	8016ad0 <poly_sub_scaled>
		 * We compute the new maximum size of (F,G), assuming that
		 * (f,g) has _maximal_ length (i.e. that reduction is
		 * "late" instead of "early". We also adjust FGlen
		 * accordingly.
		 */
		new_maxbl_FG = scale_k + maxbl_fg + 10;
 8018210:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 8018212:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018214:	4413      	add	r3, r2
 8018216:	330a      	adds	r3, #10
 8018218:	9324      	str	r3, [sp, #144]	; 0x90
		if (new_maxbl_FG < maxbl_FG) {
 801821a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801821c:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 801821e:	429a      	cmp	r2, r3
 8018220:	da0d      	bge.n	801823e <solve_NTRU_intermediate+0xa8e>
			maxbl_FG = new_maxbl_FG;
 8018222:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018224:	934c      	str	r3, [sp, #304]	; 0x130
			if ((int)FGlen * 31 >= maxbl_FG + 31) {
 8018226:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8018228:	f103 011e 	add.w	r1, r3, #30
 801822c:	9a51      	ldr	r2, [sp, #324]	; 0x144
 801822e:	4613      	mov	r3, r2
 8018230:	015b      	lsls	r3, r3, #5
 8018232:	1a9b      	subs	r3, r3, r2
 8018234:	4299      	cmp	r1, r3
 8018236:	da02      	bge.n	801823e <solve_NTRU_intermediate+0xa8e>
				FGlen --;
 8018238:	9b51      	ldr	r3, [sp, #324]	; 0x144
 801823a:	3b01      	subs	r3, #1
 801823c:	9351      	str	r3, [sp, #324]	; 0x144
		/*
		 * We suppose that scaling down achieves a reduction by
		 * at least 25 bits per iteration. We stop when we have
		 * done the loop with an unscaled k.
		 */
		if (scale_k <= 0) {
 801823e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8018240:	2b00      	cmp	r3, #0
 8018242:	dd09      	ble.n	8018258 <solve_NTRU_intermediate+0xaa8>
			break;
		}
		scale_k -= 25;
 8018244:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8018246:	3b19      	subs	r3, #25
 8018248:	934b      	str	r3, [sp, #300]	; 0x12c
		if (scale_k < 0) {
 801824a:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 801824c:	2b00      	cmp	r3, #0
 801824e:	f6bf aeb3 	bge.w	8017fb8 <solve_NTRU_intermediate+0x808>
			scale_k = 0;
 8018252:	2300      	movs	r3, #0
 8018254:	934b      	str	r3, [sp, #300]	; 0x12c
	for (;;) {
 8018256:	e6af      	b.n	8017fb8 <solve_NTRU_intermediate+0x808>
			break;
 8018258:	bf00      	nop

	/*
	 * If (F,G) length was lowered below 'slen', then we must take
	 * care to re-extend the sign.
	 */
	if (FGlen < slen) {
 801825a:	9a51      	ldr	r2, [sp, #324]	; 0x144
 801825c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801825e:	429a      	cmp	r2, r3
 8018260:	d24b      	bcs.n	80182fa <solve_NTRU_intermediate+0xb4a>
		for (u = 0; u < n; u ++, Ft += llen, Gt += llen) {
 8018262:	2300      	movs	r3, #0
 8018264:	9350      	str	r3, [sp, #320]	; 0x140
 8018266:	e044      	b.n	80182f2 <solve_NTRU_intermediate+0xb42>
			size_t v;
			uint32_t sw;

			sw = -(Ft[FGlen - 1] >> 30) >> 1;
 8018268:	9b51      	ldr	r3, [sp, #324]	; 0x144
 801826a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801826e:	3b01      	subs	r3, #1
 8018270:	009b      	lsls	r3, r3, #2
 8018272:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8018274:	4413      	add	r3, r2
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	0f9b      	lsrs	r3, r3, #30
 801827a:	425b      	negs	r3, r3
 801827c:	085b      	lsrs	r3, r3, #1
 801827e:	9323      	str	r3, [sp, #140]	; 0x8c
			for (v = FGlen; v < slen; v ++) {
 8018280:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8018282:	933d      	str	r3, [sp, #244]	; 0xf4
 8018284:	e008      	b.n	8018298 <solve_NTRU_intermediate+0xae8>
				Ft[v] = sw;
 8018286:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8018288:	009b      	lsls	r3, r3, #2
 801828a:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 801828c:	4413      	add	r3, r2
 801828e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018290:	601a      	str	r2, [r3, #0]
			for (v = FGlen; v < slen; v ++) {
 8018292:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8018294:	3301      	adds	r3, #1
 8018296:	933d      	str	r3, [sp, #244]	; 0xf4
 8018298:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 801829a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801829c:	429a      	cmp	r2, r3
 801829e:	d3f2      	bcc.n	8018286 <solve_NTRU_intermediate+0xad6>
			}
			sw = -(Gt[FGlen - 1] >> 30) >> 1;
 80182a0:	9b51      	ldr	r3, [sp, #324]	; 0x144
 80182a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80182a6:	3b01      	subs	r3, #1
 80182a8:	009b      	lsls	r3, r3, #2
 80182aa:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 80182ac:	4413      	add	r3, r2
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	0f9b      	lsrs	r3, r3, #30
 80182b2:	425b      	negs	r3, r3
 80182b4:	085b      	lsrs	r3, r3, #1
 80182b6:	9323      	str	r3, [sp, #140]	; 0x8c
			for (v = FGlen; v < slen; v ++) {
 80182b8:	9b51      	ldr	r3, [sp, #324]	; 0x144
 80182ba:	933d      	str	r3, [sp, #244]	; 0xf4
 80182bc:	e008      	b.n	80182d0 <solve_NTRU_intermediate+0xb20>
				Gt[v] = sw;
 80182be:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 80182c0:	009b      	lsls	r3, r3, #2
 80182c2:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 80182c4:	4413      	add	r3, r2
 80182c6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80182c8:	601a      	str	r2, [r3, #0]
			for (v = FGlen; v < slen; v ++) {
 80182ca:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 80182cc:	3301      	adds	r3, #1
 80182ce:	933d      	str	r3, [sp, #244]	; 0xf4
 80182d0:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 80182d2:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80182d4:	429a      	cmp	r2, r3
 80182d6:	d3f2      	bcc.n	80182be <solve_NTRU_intermediate+0xb0e>
		for (u = 0; u < n; u ++, Ft += llen, Gt += llen) {
 80182d8:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80182da:	3301      	adds	r3, #1
 80182dc:	9350      	str	r3, [sp, #320]	; 0x140
 80182de:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80182e0:	009b      	lsls	r3, r3, #2
 80182e2:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 80182e4:	4413      	add	r3, r2
 80182e6:	934f      	str	r3, [sp, #316]	; 0x13c
 80182e8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80182ea:	009b      	lsls	r3, r3, #2
 80182ec:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 80182ee:	4413      	add	r3, r2
 80182f0:	934e      	str	r3, [sp, #312]	; 0x138
 80182f2:	9a50      	ldr	r2, [sp, #320]	; 0x140
 80182f4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80182f6:	429a      	cmp	r2, r3
 80182f8:	d3b6      	bcc.n	8018268 <solve_NTRU_intermediate+0xab8>

	/*
	 * Compress encoding of all values to 'slen' words (this is the
	 * expected output format).
	 */
	for (u = 0, x = tmp, y = tmp;
 80182fa:	2300      	movs	r3, #0
 80182fc:	9350      	str	r3, [sp, #320]	; 0x140
 80182fe:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8018300:	934a      	str	r3, [sp, #296]	; 0x128
 8018302:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8018304:	9349      	str	r3, [sp, #292]	; 0x124
 8018306:	e013      	b.n	8018330 <solve_NTRU_intermediate+0xb80>
		u < (n << 1); u ++, x += slen, y += llen)
	{
		memmove(x, y, slen * sizeof *y);
 8018308:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801830a:	009b      	lsls	r3, r3, #2
 801830c:	461a      	mov	r2, r3
 801830e:	9949      	ldr	r1, [sp, #292]	; 0x124
 8018310:	984a      	ldr	r0, [sp, #296]	; 0x128
 8018312:	f004 f92b 	bl	801c56c <memmove>
		u < (n << 1); u ++, x += slen, y += llen)
 8018316:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8018318:	3301      	adds	r3, #1
 801831a:	9350      	str	r3, [sp, #320]	; 0x140
 801831c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801831e:	009b      	lsls	r3, r3, #2
 8018320:	9a4a      	ldr	r2, [sp, #296]	; 0x128
 8018322:	4413      	add	r3, r2
 8018324:	934a      	str	r3, [sp, #296]	; 0x128
 8018326:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8018328:	009b      	lsls	r3, r3, #2
 801832a:	9a49      	ldr	r2, [sp, #292]	; 0x124
 801832c:	4413      	add	r3, r2
 801832e:	9349      	str	r3, [sp, #292]	; 0x124
 8018330:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8018332:	005b      	lsls	r3, r3, #1
 8018334:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8018336:	429a      	cmp	r2, r3
 8018338:	d3e6      	bcc.n	8018308 <solve_NTRU_intermediate+0xb58>
	}
	return 1;
 801833a:	2301      	movs	r3, #1
}
 801833c:	4618      	mov	r0, r3
 801833e:	b052      	add	sp, #328	; 0x148
 8018340:	bd10      	pop	{r4, pc}
 8018342:	bf00      	nop
 8018344:	84210843 	.word	0x84210843
	...

08018350 <solve_NTRU_binary_depth1>:
 * Returned value: 1 on success, 0 on error.
 */
static int
solve_NTRU_binary_depth1(unsigned logn_top,
	const int8_t *f, const int8_t *g, uint32_t *tmp)
{
 8018350:	b510      	push	{r4, lr}
 8018352:	b0bc      	sub	sp, #240	; 0xf0
 8018354:	9007      	str	r0, [sp, #28]
 8018356:	9106      	str	r1, [sp, #24]
 8018358:	9205      	str	r2, [sp, #20]
 801835a:	9304      	str	r3, [sp, #16]
	size_t n_top, n, hn, slen, dlen, llen, u;
	uint32_t *Fd, *Gd, *Ft, *Gt, *ft, *gt, *t1;
	fpr *rt1, *rt2, *rt3, *rt4, *rt5, *rt6;
	uint32_t *x, *y;

	depth = 1;
 801835c:	2301      	movs	r3, #1
 801835e:	932e      	str	r3, [sp, #184]	; 0xb8
	n_top = (size_t)1 << logn_top;
 8018360:	2201      	movs	r2, #1
 8018362:	9b07      	ldr	r3, [sp, #28]
 8018364:	fa02 f303 	lsl.w	r3, r2, r3
 8018368:	932d      	str	r3, [sp, #180]	; 0xb4
	logn = logn_top - depth;
 801836a:	9a07      	ldr	r2, [sp, #28]
 801836c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801836e:	1ad3      	subs	r3, r2, r3
 8018370:	932c      	str	r3, [sp, #176]	; 0xb0
	n = (size_t)1 << logn;
 8018372:	2201      	movs	r2, #1
 8018374:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018376:	fa02 f303 	lsl.w	r3, r2, r3
 801837a:	932b      	str	r3, [sp, #172]	; 0xac
	hn = n >> 1;
 801837c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801837e:	085b      	lsrs	r3, r3, #1
 8018380:	932a      	str	r3, [sp, #168]	; 0xa8
	 * llen = size for intermediary F and G before reduction (degree N)
	 *
	 * We build our non-reduced F and G as two independent halves each,
	 * of degree N/2 (F = F0 + X*F1, G = G0 + X*G1).
	 */
	slen = MAX_BL_SMALL[depth];
 8018382:	4a85      	ldr	r2, [pc, #532]	; (8018598 <solve_NTRU_binary_depth1+0x248>)
 8018384:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801838a:	9329      	str	r3, [sp, #164]	; 0xa4
	dlen = MAX_BL_SMALL[depth + 1];
 801838c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801838e:	3301      	adds	r3, #1
 8018390:	4a81      	ldr	r2, [pc, #516]	; (8018598 <solve_NTRU_binary_depth1+0x248>)
 8018392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018396:	9328      	str	r3, [sp, #160]	; 0xa0
	llen = MAX_BL_LARGE[depth];
 8018398:	4a80      	ldr	r2, [pc, #512]	; (801859c <solve_NTRU_binary_depth1+0x24c>)
 801839a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801839c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80183a0:	9327      	str	r3, [sp, #156]	; 0x9c

	/*
	 * Fd and Gd are the F and G from the deeper level. Ft and Gt
	 * are the destination arrays for the unreduced F and G.
	 */
	Fd = tmp;
 80183a2:	9b04      	ldr	r3, [sp, #16]
 80183a4:	9326      	str	r3, [sp, #152]	; 0x98
	Gd = Fd + dlen * hn;
 80183a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80183a8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80183aa:	fb02 f303 	mul.w	r3, r2, r3
 80183ae:	009b      	lsls	r3, r3, #2
 80183b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80183b2:	4413      	add	r3, r2
 80183b4:	9325      	str	r3, [sp, #148]	; 0x94
	Ft = Gd + dlen * hn;
 80183b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80183b8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80183ba:	fb02 f303 	mul.w	r3, r2, r3
 80183be:	009b      	lsls	r3, r3, #2
 80183c0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80183c2:	4413      	add	r3, r2
 80183c4:	9324      	str	r3, [sp, #144]	; 0x90
	Gt = Ft + llen * n;
 80183c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80183c8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80183ca:	fb02 f303 	mul.w	r3, r2, r3
 80183ce:	009b      	lsls	r3, r3, #2
 80183d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80183d2:	4413      	add	r3, r2
 80183d4:	9323      	str	r3, [sp, #140]	; 0x8c

	/*
	 * We reduce Fd and Gd modulo all the small primes we will need,
	 * and store the values in Ft and Gt.
	 */
	for (u = 0; u < llen; u ++) {
 80183d6:	2300      	movs	r3, #0
 80183d8:	933b      	str	r3, [sp, #236]	; 0xec
 80183da:	e061      	b.n	80184a0 <solve_NTRU_binary_depth1+0x150>
		uint32_t p, p0i, R2, Rx;
		size_t v;
		uint32_t *xs, *ys, *xd, *yd;

		p = PRIMES[u].p;
 80183dc:	4970      	ldr	r1, [pc, #448]	; (80185a0 <solve_NTRU_binary_depth1+0x250>)
 80183de:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 80183e0:	4613      	mov	r3, r2
 80183e2:	005b      	lsls	r3, r3, #1
 80183e4:	4413      	add	r3, r2
 80183e6:	009b      	lsls	r3, r3, #2
 80183e8:	440b      	add	r3, r1
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	930b      	str	r3, [sp, #44]	; 0x2c
		p0i = modp_ninv31(p);
 80183ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80183f0:	f7fc fbce 	bl	8014b90 <modp_ninv31>
 80183f4:	900a      	str	r0, [sp, #40]	; 0x28
		R2 = modp_R2(p, p0i);
 80183f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80183f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80183fa:	f7fc fcb9 	bl	8014d70 <modp_R2>
 80183fe:	9009      	str	r0, [sp, #36]	; 0x24
		Rx = modp_Rx((unsigned)dlen, p, p0i, R2);
 8018400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018404:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018406:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8018408:	f7fc fcf2 	bl	8014df0 <modp_Rx>
 801840c:	9008      	str	r0, [sp, #32]
		for (v = 0, xs = Fd, ys = Gd, xd = Ft + u, yd = Gt + u;
 801840e:	2300      	movs	r3, #0
 8018410:	9338      	str	r3, [sp, #224]	; 0xe0
 8018412:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018414:	9337      	str	r3, [sp, #220]	; 0xdc
 8018416:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018418:	9336      	str	r3, [sp, #216]	; 0xd8
 801841a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 801841c:	009b      	lsls	r3, r3, #2
 801841e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018420:	4413      	add	r3, r2
 8018422:	9335      	str	r3, [sp, #212]	; 0xd4
 8018424:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8018426:	009b      	lsls	r3, r3, #2
 8018428:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801842a:	4413      	add	r3, r2
 801842c:	9334      	str	r3, [sp, #208]	; 0xd0
 801842e:	e030      	b.n	8018492 <solve_NTRU_binary_depth1+0x142>
			v < hn;
			v ++, xs += dlen, ys += dlen, xd += llen, yd += llen)
		{
			*xd = zint_mod_small_signed(xs, dlen, p, p0i, R2, Rx);
 8018430:	9b08      	ldr	r3, [sp, #32]
 8018432:	9301      	str	r3, [sp, #4]
 8018434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018436:	9300      	str	r3, [sp, #0]
 8018438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801843a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801843c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801843e:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8018440:	f7fc ffe6 	bl	8015410 <zint_mod_small_signed>
 8018444:	4602      	mov	r2, r0
 8018446:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8018448:	601a      	str	r2, [r3, #0]
			*yd = zint_mod_small_signed(ys, dlen, p, p0i, R2, Rx);
 801844a:	9b08      	ldr	r3, [sp, #32]
 801844c:	9301      	str	r3, [sp, #4]
 801844e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018450:	9300      	str	r3, [sp, #0]
 8018452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018454:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018456:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8018458:	9836      	ldr	r0, [sp, #216]	; 0xd8
 801845a:	f7fc ffd9 	bl	8015410 <zint_mod_small_signed>
 801845e:	4602      	mov	r2, r0
 8018460:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8018462:	601a      	str	r2, [r3, #0]
			v ++, xs += dlen, ys += dlen, xd += llen, yd += llen)
 8018464:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8018466:	3301      	adds	r3, #1
 8018468:	9338      	str	r3, [sp, #224]	; 0xe0
 801846a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801846c:	009b      	lsls	r3, r3, #2
 801846e:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8018470:	4413      	add	r3, r2
 8018472:	9337      	str	r3, [sp, #220]	; 0xdc
 8018474:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018476:	009b      	lsls	r3, r3, #2
 8018478:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801847a:	4413      	add	r3, r2
 801847c:	9336      	str	r3, [sp, #216]	; 0xd8
 801847e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018480:	009b      	lsls	r3, r3, #2
 8018482:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8018484:	4413      	add	r3, r2
 8018486:	9335      	str	r3, [sp, #212]	; 0xd4
 8018488:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801848a:	009b      	lsls	r3, r3, #2
 801848c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801848e:	4413      	add	r3, r2
 8018490:	9334      	str	r3, [sp, #208]	; 0xd0
			v < hn;
 8018492:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8018494:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018496:	429a      	cmp	r2, r3
 8018498:	d3ca      	bcc.n	8018430 <solve_NTRU_binary_depth1+0xe0>
	for (u = 0; u < llen; u ++) {
 801849a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 801849c:	3301      	adds	r3, #1
 801849e:	933b      	str	r3, [sp, #236]	; 0xec
 80184a0:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 80184a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80184a4:	429a      	cmp	r2, r3
 80184a6:	d399      	bcc.n	80183dc <solve_NTRU_binary_depth1+0x8c>
	}

	/*
	 * Now Fd and Gd are not needed anymore; we can squeeze them out.
	 */
	memmove(tmp, Ft, llen * n * sizeof(uint32_t));
 80184a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80184aa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80184ac:	fb02 f303 	mul.w	r3, r2, r3
 80184b0:	009b      	lsls	r3, r3, #2
 80184b2:	461a      	mov	r2, r3
 80184b4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80184b6:	9804      	ldr	r0, [sp, #16]
 80184b8:	f004 f858 	bl	801c56c <memmove>
	Ft = tmp;
 80184bc:	9b04      	ldr	r3, [sp, #16]
 80184be:	9324      	str	r3, [sp, #144]	; 0x90
	memmove(Ft + llen * n, Gt, llen * n * sizeof(uint32_t));
 80184c0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80184c2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80184c4:	fb02 f303 	mul.w	r3, r2, r3
 80184c8:	009b      	lsls	r3, r3, #2
 80184ca:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80184cc:	18d0      	adds	r0, r2, r3
 80184ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80184d0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80184d2:	fb02 f303 	mul.w	r3, r2, r3
 80184d6:	009b      	lsls	r3, r3, #2
 80184d8:	461a      	mov	r2, r3
 80184da:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80184dc:	f004 f846 	bl	801c56c <memmove>
	Gt = Ft + llen * n;
 80184e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80184e2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80184e4:	fb02 f303 	mul.w	r3, r2, r3
 80184e8:	009b      	lsls	r3, r3, #2
 80184ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80184ec:	4413      	add	r3, r2
 80184ee:	9323      	str	r3, [sp, #140]	; 0x8c
	ft = Gt + llen * n;
 80184f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80184f2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80184f4:	fb02 f303 	mul.w	r3, r2, r3
 80184f8:	009b      	lsls	r3, r3, #2
 80184fa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80184fc:	4413      	add	r3, r2
 80184fe:	9322      	str	r3, [sp, #136]	; 0x88
	gt = ft + slen * n;
 8018500:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018502:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018504:	fb02 f303 	mul.w	r3, r2, r3
 8018508:	009b      	lsls	r3, r3, #2
 801850a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801850c:	4413      	add	r3, r2
 801850e:	9321      	str	r3, [sp, #132]	; 0x84

	t1 = gt + slen * n;
 8018510:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018512:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018514:	fb02 f303 	mul.w	r3, r2, r3
 8018518:	009b      	lsls	r3, r3, #2
 801851a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801851c:	4413      	add	r3, r2
 801851e:	9320      	str	r3, [sp, #128]	; 0x80

	/*
	 * Compute our F and G modulo sufficiently many small primes.
	 */
	for (u = 0; u < llen; u ++) {
 8018520:	2300      	movs	r3, #0
 8018522:	933b      	str	r3, [sp, #236]	; 0xec
 8018524:	e1e8      	b.n	80188f8 <solve_NTRU_binary_depth1+0x5a8>
		size_t v;

		/*
		 * All computations are done modulo p.
		 */
		p = PRIMES[u].p;
 8018526:	491e      	ldr	r1, [pc, #120]	; (80185a0 <solve_NTRU_binary_depth1+0x250>)
 8018528:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 801852a:	4613      	mov	r3, r2
 801852c:	005b      	lsls	r3, r3, #1
 801852e:	4413      	add	r3, r2
 8018530:	009b      	lsls	r3, r3, #2
 8018532:	440b      	add	r3, r1
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	9317      	str	r3, [sp, #92]	; 0x5c
		p0i = modp_ninv31(p);
 8018538:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801853a:	f7fc fb29 	bl	8014b90 <modp_ninv31>
 801853e:	9016      	str	r0, [sp, #88]	; 0x58
		R2 = modp_R2(p, p0i);
 8018540:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018542:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018544:	f7fc fc14 	bl	8014d70 <modp_R2>
 8018548:	9015      	str	r0, [sp, #84]	; 0x54
		 * of the inverse NTT table (igm); the call to modp_mkgm()
		 * below will fill n_top elements in igm[] (thus overflowing
		 * into fx[]) but later code will overwrite these extra
		 * elements.
		 */
		gm = t1;
 801854a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801854c:	9314      	str	r3, [sp, #80]	; 0x50
		igm = gm + n_top;
 801854e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018550:	009b      	lsls	r3, r3, #2
 8018552:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018554:	4413      	add	r3, r2
 8018556:	9333      	str	r3, [sp, #204]	; 0xcc
		fx = igm + n;
 8018558:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801855a:	009b      	lsls	r3, r3, #2
 801855c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801855e:	4413      	add	r3, r2
 8018560:	9332      	str	r3, [sp, #200]	; 0xc8
		gx = fx + n_top;
 8018562:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018564:	009b      	lsls	r3, r3, #2
 8018566:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8018568:	4413      	add	r3, r2
 801856a:	9331      	str	r3, [sp, #196]	; 0xc4
		modp_mkgm2(gm, igm, logn_top, PRIMES[u].g, p, p0i);
 801856c:	490c      	ldr	r1, [pc, #48]	; (80185a0 <solve_NTRU_binary_depth1+0x250>)
 801856e:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8018570:	4613      	mov	r3, r2
 8018572:	005b      	lsls	r3, r3, #1
 8018574:	4413      	add	r3, r2
 8018576:	009b      	lsls	r3, r3, #2
 8018578:	440b      	add	r3, r1
 801857a:	3304      	adds	r3, #4
 801857c:	681a      	ldr	r2, [r3, #0]
 801857e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018580:	9301      	str	r3, [sp, #4]
 8018582:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018584:	9300      	str	r3, [sp, #0]
 8018586:	4613      	mov	r3, r2
 8018588:	9a07      	ldr	r2, [sp, #28]
 801858a:	9933      	ldr	r1, [sp, #204]	; 0xcc
 801858c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801858e:	f7fc fcaf 	bl	8014ef0 <modp_mkgm2>

		/*
		 * Set ft and gt to f and g modulo p, respectively.
		 */
		for (v = 0; v < n_top; v ++) {
 8018592:	2300      	movs	r3, #0
 8018594:	932f      	str	r3, [sp, #188]	; 0xbc
 8018596:	e026      	b.n	80185e6 <solve_NTRU_binary_depth1+0x296>
 8018598:	08025510 	.word	0x08025510
 801859c:	0802553c 	.word	0x0802553c
 80185a0:	080233c0 	.word	0x080233c0
			fx[v] = modp_set(f[v], p);
 80185a4:	9a06      	ldr	r2, [sp, #24]
 80185a6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80185a8:	4413      	add	r3, r2
 80185aa:	f993 3000 	ldrsb.w	r3, [r3]
 80185ae:	4618      	mov	r0, r3
 80185b0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80185b2:	009b      	lsls	r3, r3, #2
 80185b4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80185b6:	18d4      	adds	r4, r2, r3
 80185b8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80185ba:	f7fc fab9 	bl	8014b30 <modp_set>
 80185be:	4603      	mov	r3, r0
 80185c0:	6023      	str	r3, [r4, #0]
			gx[v] = modp_set(g[v], p);
 80185c2:	9a05      	ldr	r2, [sp, #20]
 80185c4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80185c6:	4413      	add	r3, r2
 80185c8:	f993 3000 	ldrsb.w	r3, [r3]
 80185cc:	4618      	mov	r0, r3
 80185ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80185d0:	009b      	lsls	r3, r3, #2
 80185d2:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80185d4:	18d4      	adds	r4, r2, r3
 80185d6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80185d8:	f7fc faaa 	bl	8014b30 <modp_set>
 80185dc:	4603      	mov	r3, r0
 80185de:	6023      	str	r3, [r4, #0]
		for (v = 0; v < n_top; v ++) {
 80185e0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80185e2:	3301      	adds	r3, #1
 80185e4:	932f      	str	r3, [sp, #188]	; 0xbc
 80185e6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80185e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80185ea:	429a      	cmp	r2, r3
 80185ec:	d3da      	bcc.n	80185a4 <solve_NTRU_binary_depth1+0x254>
		}

		/*
		 * Convert to NTT and compute our f and g.
		 */
		modp_NTT2(fx, gm, logn_top, p, p0i);
 80185ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80185f0:	9301      	str	r3, [sp, #4]
 80185f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80185f4:	9300      	str	r3, [sp, #0]
 80185f6:	9b07      	ldr	r3, [sp, #28]
 80185f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80185fa:	2101      	movs	r1, #1
 80185fc:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80185fe:	f7fc fce7 	bl	8014fd0 <modp_NTT2_ext>
		modp_NTT2(gx, gm, logn_top, p, p0i);
 8018602:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018604:	9301      	str	r3, [sp, #4]
 8018606:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018608:	9300      	str	r3, [sp, #0]
 801860a:	9b07      	ldr	r3, [sp, #28]
 801860c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801860e:	2101      	movs	r1, #1
 8018610:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8018612:	f7fc fcdd 	bl	8014fd0 <modp_NTT2_ext>
		for (e = logn_top; e > logn; e --) {
 8018616:	9b07      	ldr	r3, [sp, #28]
 8018618:	9330      	str	r3, [sp, #192]	; 0xc0
 801861a:	e012      	b.n	8018642 <solve_NTRU_binary_depth1+0x2f2>
			modp_poly_rec_res(fx, e, p, p0i, R2);
 801861c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801861e:	9300      	str	r3, [sp, #0]
 8018620:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018622:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018624:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8018626:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8018628:	f7fc fdf2 	bl	8015210 <modp_poly_rec_res>
			modp_poly_rec_res(gx, e, p, p0i, R2);
 801862c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801862e:	9300      	str	r3, [sp, #0]
 8018630:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018632:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018634:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8018636:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8018638:	f7fc fdea 	bl	8015210 <modp_poly_rec_res>
		for (e = logn_top; e > logn; e --) {
 801863c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801863e:	3b01      	subs	r3, #1
 8018640:	9330      	str	r3, [sp, #192]	; 0xc0
 8018642:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8018644:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018646:	429a      	cmp	r2, r3
 8018648:	d8e8      	bhi.n	801861c <solve_NTRU_binary_depth1+0x2cc>

		/*
		 * From that point onward, we only need tables for
		 * degree n, so we can save some space.
		 */
		if (depth > 0) { /* always true */
 801864a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801864c:	2b00      	cmp	r3, #0
 801864e:	d02c      	beq.n	80186aa <solve_NTRU_binary_depth1+0x35a>
			memmove(gm + n, igm, n * sizeof *igm);
 8018650:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018652:	009b      	lsls	r3, r3, #2
 8018654:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018656:	18d0      	adds	r0, r2, r3
 8018658:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801865a:	009b      	lsls	r3, r3, #2
 801865c:	461a      	mov	r2, r3
 801865e:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8018660:	f003 ff84 	bl	801c56c <memmove>
			igm = gm + n;
 8018664:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018666:	009b      	lsls	r3, r3, #2
 8018668:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801866a:	4413      	add	r3, r2
 801866c:	9333      	str	r3, [sp, #204]	; 0xcc
			memmove(igm + n, fx, n * sizeof *ft);
 801866e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018670:	009b      	lsls	r3, r3, #2
 8018672:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8018674:	18d0      	adds	r0, r2, r3
 8018676:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018678:	009b      	lsls	r3, r3, #2
 801867a:	461a      	mov	r2, r3
 801867c:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801867e:	f003 ff75 	bl	801c56c <memmove>
			fx = igm + n;
 8018682:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018684:	009b      	lsls	r3, r3, #2
 8018686:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8018688:	4413      	add	r3, r2
 801868a:	9332      	str	r3, [sp, #200]	; 0xc8
			memmove(fx + n, gx, n * sizeof *gt);
 801868c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801868e:	009b      	lsls	r3, r3, #2
 8018690:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8018692:	18d0      	adds	r0, r2, r3
 8018694:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018696:	009b      	lsls	r3, r3, #2
 8018698:	461a      	mov	r2, r3
 801869a:	9931      	ldr	r1, [sp, #196]	; 0xc4
 801869c:	f003 ff66 	bl	801c56c <memmove>
			gx = fx + n;
 80186a0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80186a2:	009b      	lsls	r3, r3, #2
 80186a4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80186a6:	4413      	add	r3, r2
 80186a8:	9331      	str	r3, [sp, #196]	; 0xc4
		/*
		 * Get F' and G' modulo p and in NTT representation
		 * (they have degree n/2). These values were computed
		 * in a previous step, and stored in Ft and Gt.
		 */
		Fp = gx + n;
 80186aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80186ac:	009b      	lsls	r3, r3, #2
 80186ae:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80186b0:	4413      	add	r3, r2
 80186b2:	9313      	str	r3, [sp, #76]	; 0x4c
		Gp = Fp + hn;
 80186b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80186b6:	009b      	lsls	r3, r3, #2
 80186b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80186ba:	4413      	add	r3, r2
 80186bc:	9312      	str	r3, [sp, #72]	; 0x48
		for (v = 0, x = Ft + u, y = Gt + u;
 80186be:	2300      	movs	r3, #0
 80186c0:	932f      	str	r3, [sp, #188]	; 0xbc
 80186c2:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80186c4:	009b      	lsls	r3, r3, #2
 80186c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80186c8:	4413      	add	r3, r2
 80186ca:	933a      	str	r3, [sp, #232]	; 0xe8
 80186cc:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80186ce:	009b      	lsls	r3, r3, #2
 80186d0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80186d2:	4413      	add	r3, r2
 80186d4:	9339      	str	r3, [sp, #228]	; 0xe4
 80186d6:	e01a      	b.n	801870e <solve_NTRU_binary_depth1+0x3be>
			v < hn; v ++, x += llen, y += llen)
		{
			Fp[v] = *x;
 80186d8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80186da:	009b      	lsls	r3, r3, #2
 80186dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80186de:	4413      	add	r3, r2
 80186e0:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80186e2:	6812      	ldr	r2, [r2, #0]
 80186e4:	601a      	str	r2, [r3, #0]
			Gp[v] = *y;
 80186e6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80186e8:	009b      	lsls	r3, r3, #2
 80186ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80186ec:	4413      	add	r3, r2
 80186ee:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 80186f0:	6812      	ldr	r2, [r2, #0]
 80186f2:	601a      	str	r2, [r3, #0]
			v < hn; v ++, x += llen, y += llen)
 80186f4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80186f6:	3301      	adds	r3, #1
 80186f8:	932f      	str	r3, [sp, #188]	; 0xbc
 80186fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80186fc:	009b      	lsls	r3, r3, #2
 80186fe:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8018700:	4413      	add	r3, r2
 8018702:	933a      	str	r3, [sp, #232]	; 0xe8
 8018704:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018706:	009b      	lsls	r3, r3, #2
 8018708:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 801870a:	4413      	add	r3, r2
 801870c:	9339      	str	r3, [sp, #228]	; 0xe4
 801870e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018710:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018712:	429a      	cmp	r2, r3
 8018714:	d3e0      	bcc.n	80186d8 <solve_NTRU_binary_depth1+0x388>
		}
		modp_NTT2(Fp, gm, logn - 1, p, p0i);
 8018716:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018718:	1e5a      	subs	r2, r3, #1
 801871a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801871c:	9301      	str	r3, [sp, #4]
 801871e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018720:	9300      	str	r3, [sp, #0]
 8018722:	4613      	mov	r3, r2
 8018724:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018726:	2101      	movs	r1, #1
 8018728:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801872a:	f7fc fc51 	bl	8014fd0 <modp_NTT2_ext>
		modp_NTT2(Gp, gm, logn - 1, p, p0i);
 801872e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018730:	1e5a      	subs	r2, r3, #1
 8018732:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018734:	9301      	str	r3, [sp, #4]
 8018736:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018738:	9300      	str	r3, [sp, #0]
 801873a:	4613      	mov	r3, r2
 801873c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801873e:	2101      	movs	r1, #1
 8018740:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018742:	f7fc fc45 	bl	8014fd0 <modp_NTT2_ext>
		 * In all case, we can thus compute F and G in NTT
		 * representation by a few simple multiplications.
		 * Moreover, the two roots for each pair are consecutive
		 * in our bit-reversal encoding.
		 */
		for (v = 0, x = Ft + u, y = Gt + u;
 8018746:	2300      	movs	r3, #0
 8018748:	932f      	str	r3, [sp, #188]	; 0xbc
 801874a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 801874c:	009b      	lsls	r3, r3, #2
 801874e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018750:	4413      	add	r3, r2
 8018752:	933a      	str	r3, [sp, #232]	; 0xe8
 8018754:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8018756:	009b      	lsls	r3, r3, #2
 8018758:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801875a:	4413      	add	r3, r2
 801875c:	9339      	str	r3, [sp, #228]	; 0xe4
 801875e:	e066      	b.n	801882e <solve_NTRU_binary_depth1+0x4de>
			v < hn; v ++, x += (llen << 1), y += (llen << 1))
		{
			uint32_t ftA, ftB, gtA, gtB;
			uint32_t mFp, mGp;

			ftA = fx[(v << 1) + 0];
 8018760:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018762:	00db      	lsls	r3, r3, #3
 8018764:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8018766:	4413      	add	r3, r2
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	9311      	str	r3, [sp, #68]	; 0x44
			ftB = fx[(v << 1) + 1];
 801876c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801876e:	00db      	lsls	r3, r3, #3
 8018770:	3304      	adds	r3, #4
 8018772:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8018774:	4413      	add	r3, r2
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	9310      	str	r3, [sp, #64]	; 0x40
			gtA = gx[(v << 1) + 0];
 801877a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801877c:	00db      	lsls	r3, r3, #3
 801877e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8018780:	4413      	add	r3, r2
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	930f      	str	r3, [sp, #60]	; 0x3c
			gtB = gx[(v << 1) + 1];
 8018786:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018788:	00db      	lsls	r3, r3, #3
 801878a:	3304      	adds	r3, #4
 801878c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801878e:	4413      	add	r3, r2
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	930e      	str	r3, [sp, #56]	; 0x38
			mFp = modp_montymul(Fp[v], R2, p, p0i);
 8018794:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018796:	009b      	lsls	r3, r3, #2
 8018798:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801879a:	4413      	add	r3, r2
 801879c:	6818      	ldr	r0, [r3, #0]
 801879e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80187a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80187a2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80187a4:	f7fc fa64 	bl	8014c70 <modp_montymul>
 80187a8:	900d      	str	r0, [sp, #52]	; 0x34
			mGp = modp_montymul(Gp[v], R2, p, p0i);
 80187aa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80187ac:	009b      	lsls	r3, r3, #2
 80187ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80187b0:	4413      	add	r3, r2
 80187b2:	6818      	ldr	r0, [r3, #0]
 80187b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80187b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80187b8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80187ba:	f7fc fa59 	bl	8014c70 <modp_montymul>
 80187be:	900c      	str	r0, [sp, #48]	; 0x30
			x[0] = modp_montymul(gtB, mFp, p, p0i);
 80187c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80187c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80187c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80187c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80187c8:	f7fc fa52 	bl	8014c70 <modp_montymul>
 80187cc:	4602      	mov	r2, r0
 80187ce:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80187d0:	601a      	str	r2, [r3, #0]
			x[llen] = modp_montymul(gtA, mFp, p, p0i);
 80187d2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80187d4:	009b      	lsls	r3, r3, #2
 80187d6:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80187d8:	18d4      	adds	r4, r2, r3
 80187da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80187dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80187de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80187e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80187e2:	f7fc fa45 	bl	8014c70 <modp_montymul>
 80187e6:	4603      	mov	r3, r0
 80187e8:	6023      	str	r3, [r4, #0]
			y[0] = modp_montymul(ftB, mGp, p, p0i);
 80187ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80187ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80187ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80187f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80187f2:	f7fc fa3d 	bl	8014c70 <modp_montymul>
 80187f6:	4602      	mov	r2, r0
 80187f8:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80187fa:	601a      	str	r2, [r3, #0]
			y[llen] = modp_montymul(ftA, mGp, p, p0i);
 80187fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80187fe:	009b      	lsls	r3, r3, #2
 8018800:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8018802:	18d4      	adds	r4, r2, r3
 8018804:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018806:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018808:	990c      	ldr	r1, [sp, #48]	; 0x30
 801880a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801880c:	f7fc fa30 	bl	8014c70 <modp_montymul>
 8018810:	4603      	mov	r3, r0
 8018812:	6023      	str	r3, [r4, #0]
			v < hn; v ++, x += (llen << 1), y += (llen << 1))
 8018814:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8018816:	3301      	adds	r3, #1
 8018818:	932f      	str	r3, [sp, #188]	; 0xbc
 801881a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801881c:	00db      	lsls	r3, r3, #3
 801881e:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8018820:	4413      	add	r3, r2
 8018822:	933a      	str	r3, [sp, #232]	; 0xe8
 8018824:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018826:	00db      	lsls	r3, r3, #3
 8018828:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 801882a:	4413      	add	r3, r2
 801882c:	9339      	str	r3, [sp, #228]	; 0xe4
 801882e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018830:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018832:	429a      	cmp	r2, r3
 8018834:	d394      	bcc.n	8018760 <solve_NTRU_binary_depth1+0x410>
		}
		modp_iNTT2_ext(Ft + u, llen, igm, logn, p, p0i);
 8018836:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8018838:	009b      	lsls	r3, r3, #2
 801883a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801883c:	18d0      	adds	r0, r2, r3
 801883e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018840:	9301      	str	r3, [sp, #4]
 8018842:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018844:	9300      	str	r3, [sp, #0]
 8018846:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018848:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801884a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801884c:	f7fc fc40 	bl	80150d0 <modp_iNTT2_ext>
		modp_iNTT2_ext(Gt + u, llen, igm, logn, p, p0i);
 8018850:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8018852:	009b      	lsls	r3, r3, #2
 8018854:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018856:	18d0      	adds	r0, r2, r3
 8018858:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801885a:	9301      	str	r3, [sp, #4]
 801885c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801885e:	9300      	str	r3, [sp, #0]
 8018860:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018862:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8018864:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018866:	f7fc fc33 	bl	80150d0 <modp_iNTT2_ext>

		/*
		 * Also save ft and gt (only up to size slen).
		 */
		if (u < slen) {
 801886a:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 801886c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801886e:	429a      	cmp	r2, r3
 8018870:	d23f      	bcs.n	80188f2 <solve_NTRU_binary_depth1+0x5a2>
			modp_iNTT2(fx, igm, logn, p, p0i);
 8018872:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018874:	9301      	str	r3, [sp, #4]
 8018876:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018878:	9300      	str	r3, [sp, #0]
 801887a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801887c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801887e:	2101      	movs	r1, #1
 8018880:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8018882:	f7fc fc25 	bl	80150d0 <modp_iNTT2_ext>
			modp_iNTT2(gx, igm, logn, p, p0i);
 8018886:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018888:	9301      	str	r3, [sp, #4]
 801888a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801888c:	9300      	str	r3, [sp, #0]
 801888e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018890:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8018892:	2101      	movs	r1, #1
 8018894:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8018896:	f7fc fc1b 	bl	80150d0 <modp_iNTT2_ext>
			for (v = 0, x = ft + u, y = gt + u;
 801889a:	2300      	movs	r3, #0
 801889c:	932f      	str	r3, [sp, #188]	; 0xbc
 801889e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80188a0:	009b      	lsls	r3, r3, #2
 80188a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80188a4:	4413      	add	r3, r2
 80188a6:	933a      	str	r3, [sp, #232]	; 0xe8
 80188a8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80188aa:	009b      	lsls	r3, r3, #2
 80188ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80188ae:	4413      	add	r3, r2
 80188b0:	9339      	str	r3, [sp, #228]	; 0xe4
 80188b2:	e01a      	b.n	80188ea <solve_NTRU_binary_depth1+0x59a>
				v < n; v ++, x += slen, y += slen)
			{
				*x = fx[v];
 80188b4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80188b6:	009b      	lsls	r3, r3, #2
 80188b8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80188ba:	4413      	add	r3, r2
 80188bc:	681a      	ldr	r2, [r3, #0]
 80188be:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80188c0:	601a      	str	r2, [r3, #0]
				*y = gx[v];
 80188c2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80188c4:	009b      	lsls	r3, r3, #2
 80188c6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80188c8:	4413      	add	r3, r2
 80188ca:	681a      	ldr	r2, [r3, #0]
 80188cc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80188ce:	601a      	str	r2, [r3, #0]
				v < n; v ++, x += slen, y += slen)
 80188d0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80188d2:	3301      	adds	r3, #1
 80188d4:	932f      	str	r3, [sp, #188]	; 0xbc
 80188d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80188d8:	009b      	lsls	r3, r3, #2
 80188da:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80188dc:	4413      	add	r3, r2
 80188de:	933a      	str	r3, [sp, #232]	; 0xe8
 80188e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80188e2:	009b      	lsls	r3, r3, #2
 80188e4:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 80188e6:	4413      	add	r3, r2
 80188e8:	9339      	str	r3, [sp, #228]	; 0xe4
 80188ea:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80188ec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80188ee:	429a      	cmp	r2, r3
 80188f0:	d3e0      	bcc.n	80188b4 <solve_NTRU_binary_depth1+0x564>
	for (u = 0; u < llen; u ++) {
 80188f2:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80188f4:	3301      	adds	r3, #1
 80188f6:	933b      	str	r3, [sp, #236]	; 0xec
 80188f8:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 80188fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80188fc:	429a      	cmp	r2, r3
 80188fe:	f4ff ae12 	bcc.w	8018526 <solve_NTRU_binary_depth1+0x1d6>
	/*
	 * Rebuild f, g, F and G with the CRT. Note that the elements of F
	 * and G are consecutive, and thus can be rebuilt in a single
	 * loop; similarly, the elements of f and g are consecutive.
	 */
	zint_rebuild_CRT(Ft, llen, llen, n << 1, PRIMES, 1, t1);
 8018902:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018904:	005a      	lsls	r2, r3, #1
 8018906:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018908:	9302      	str	r3, [sp, #8]
 801890a:	2301      	movs	r3, #1
 801890c:	9301      	str	r3, [sp, #4]
 801890e:	4b75      	ldr	r3, [pc, #468]	; (8018ae4 <solve_NTRU_binary_depth1+0x794>)
 8018910:	9300      	str	r3, [sp, #0]
 8018912:	4613      	mov	r3, r2
 8018914:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018916:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018918:	9824      	ldr	r0, [sp, #144]	; 0x90
 801891a:	f7fc fe61 	bl	80155e0 <zint_rebuild_CRT>
	zint_rebuild_CRT(ft, slen, slen, n << 1, PRIMES, 1, t1);
 801891e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018920:	005a      	lsls	r2, r3, #1
 8018922:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018924:	9302      	str	r3, [sp, #8]
 8018926:	2301      	movs	r3, #1
 8018928:	9301      	str	r3, [sp, #4]
 801892a:	4b6e      	ldr	r3, [pc, #440]	; (8018ae4 <solve_NTRU_binary_depth1+0x794>)
 801892c:	9300      	str	r3, [sp, #0]
 801892e:	4613      	mov	r3, r2
 8018930:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018932:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018934:	9822      	ldr	r0, [sp, #136]	; 0x88
 8018936:	f7fc fe53 	bl	80155e0 <zint_rebuild_CRT>
	 */

	/*
	 * Convert F and G into floating point (rt1 and rt2).
	 */
	rt1 = align_fpr(tmp, gt + slen * n);
 801893a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801893c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801893e:	fb02 f303 	mul.w	r3, r2, r3
 8018942:	009b      	lsls	r3, r3, #2
 8018944:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018946:	4413      	add	r3, r2
 8018948:	4619      	mov	r1, r3
 801894a:	9804      	ldr	r0, [sp, #16]
 801894c:	f7fe fb10 	bl	8016f70 <align_fpr>
 8018950:	901f      	str	r0, [sp, #124]	; 0x7c
	rt2 = rt1 + n;
 8018952:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018954:	00db      	lsls	r3, r3, #3
 8018956:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018958:	4413      	add	r3, r2
 801895a:	931e      	str	r3, [sp, #120]	; 0x78
	poly_big_to_fp(rt1, Ft, llen, llen, logn);
 801895c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801895e:	9300      	str	r3, [sp, #0]
 8018960:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018962:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018964:	9924      	ldr	r1, [sp, #144]	; 0x90
 8018966:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8018968:	f7fd ffda 	bl	8016920 <poly_big_to_fp>
	poly_big_to_fp(rt2, Gt, llen, llen, logn);
 801896c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801896e:	9300      	str	r3, [sp, #0]
 8018970:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018972:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018974:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8018976:	981e      	ldr	r0, [sp, #120]	; 0x78
 8018978:	f7fd ffd2 	bl	8016920 <poly_big_to_fp>

	/*
	 * Integer representation of F and G is no longer needed, we
	 * can remove it.
	 */
	memmove(tmp, ft, 2 * slen * n * sizeof *ft);
 801897c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801897e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018980:	fb02 f303 	mul.w	r3, r2, r3
 8018984:	00db      	lsls	r3, r3, #3
 8018986:	461a      	mov	r2, r3
 8018988:	9922      	ldr	r1, [sp, #136]	; 0x88
 801898a:	9804      	ldr	r0, [sp, #16]
 801898c:	f003 fdee 	bl	801c56c <memmove>
	ft = tmp;
 8018990:	9b04      	ldr	r3, [sp, #16]
 8018992:	9322      	str	r3, [sp, #136]	; 0x88
	gt = ft + slen * n;
 8018994:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018996:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018998:	fb02 f303 	mul.w	r3, r2, r3
 801899c:	009b      	lsls	r3, r3, #2
 801899e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80189a0:	4413      	add	r3, r2
 80189a2:	9321      	str	r3, [sp, #132]	; 0x84
	rt3 = align_fpr(tmp, gt + slen * n);
 80189a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80189a6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80189a8:	fb02 f303 	mul.w	r3, r2, r3
 80189ac:	009b      	lsls	r3, r3, #2
 80189ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80189b0:	4413      	add	r3, r2
 80189b2:	4619      	mov	r1, r3
 80189b4:	9804      	ldr	r0, [sp, #16]
 80189b6:	f7fe fadb 	bl	8016f70 <align_fpr>
 80189ba:	901d      	str	r0, [sp, #116]	; 0x74
	memmove(rt3, rt1, 2 * n * sizeof *rt1);
 80189bc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80189be:	011b      	lsls	r3, r3, #4
 80189c0:	461a      	mov	r2, r3
 80189c2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80189c4:	981d      	ldr	r0, [sp, #116]	; 0x74
 80189c6:	f003 fdd1 	bl	801c56c <memmove>
	rt1 = rt3;
 80189ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80189cc:	931f      	str	r3, [sp, #124]	; 0x7c
	rt2 = rt1 + n;
 80189ce:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80189d0:	00db      	lsls	r3, r3, #3
 80189d2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80189d4:	4413      	add	r3, r2
 80189d6:	931e      	str	r3, [sp, #120]	; 0x78
	rt3 = rt2 + n;
 80189d8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80189da:	00db      	lsls	r3, r3, #3
 80189dc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80189de:	4413      	add	r3, r2
 80189e0:	931d      	str	r3, [sp, #116]	; 0x74
	rt4 = rt3 + n;
 80189e2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80189e4:	00db      	lsls	r3, r3, #3
 80189e6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80189e8:	4413      	add	r3, r2
 80189ea:	931c      	str	r3, [sp, #112]	; 0x70

	/*
	 * Convert f and g into floating point (rt3 and rt4).
	 */
	poly_big_to_fp(rt3, ft, slen, slen, logn);
 80189ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80189ee:	9300      	str	r3, [sp, #0]
 80189f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80189f2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80189f4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80189f6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80189f8:	f7fd ff92 	bl	8016920 <poly_big_to_fp>
	poly_big_to_fp(rt4, gt, slen, slen, logn);
 80189fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80189fe:	9300      	str	r3, [sp, #0]
 8018a00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018a02:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018a04:	9921      	ldr	r1, [sp, #132]	; 0x84
 8018a06:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018a08:	f7fd ff8a 	bl	8016920 <poly_big_to_fp>

	/*
	 * Remove unneeded ft and gt.
	 */
	memmove(tmp, rt1, 4 * n * sizeof *rt1);
 8018a0c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018a0e:	015b      	lsls	r3, r3, #5
 8018a10:	461a      	mov	r2, r3
 8018a12:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8018a14:	9804      	ldr	r0, [sp, #16]
 8018a16:	f003 fda9 	bl	801c56c <memmove>
	rt1 = (fpr *)tmp;
 8018a1a:	9b04      	ldr	r3, [sp, #16]
 8018a1c:	931f      	str	r3, [sp, #124]	; 0x7c
	rt2 = rt1 + n;
 8018a1e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018a20:	00db      	lsls	r3, r3, #3
 8018a22:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018a24:	4413      	add	r3, r2
 8018a26:	931e      	str	r3, [sp, #120]	; 0x78
	rt3 = rt2 + n;
 8018a28:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018a2a:	00db      	lsls	r3, r3, #3
 8018a2c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018a2e:	4413      	add	r3, r2
 8018a30:	931d      	str	r3, [sp, #116]	; 0x74
	rt4 = rt3 + n;
 8018a32:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018a34:	00db      	lsls	r3, r3, #3
 8018a36:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018a38:	4413      	add	r3, r2
 8018a3a:	931c      	str	r3, [sp, #112]	; 0x70
	 *   rt2 = G
	 *   rt3 = f
	 *   rt4 = g
	 * in that order in RAM. We convert all of them to FFT.
	 */
	Zf(FFT)(rt1, logn);
 8018a3c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8018a3e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8018a40:	f7f9 f91e 	bl	8011c80 <falcon_inner_FFT>
	Zf(FFT)(rt2, logn);
 8018a44:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8018a46:	981e      	ldr	r0, [sp, #120]	; 0x78
 8018a48:	f7f9 f91a 	bl	8011c80 <falcon_inner_FFT>
	Zf(FFT)(rt3, logn);
 8018a4c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8018a4e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018a50:	f7f9 f916 	bl	8011c80 <falcon_inner_FFT>
	Zf(FFT)(rt4, logn);
 8018a54:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8018a56:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018a58:	f7f9 f912 	bl	8011c80 <falcon_inner_FFT>
	 * Compute:
	 *   rt5 = F*adj(f) + G*adj(g)
	 *   rt6 = 1 / (f*adj(f) + g*adj(g))
	 * (Note that rt6 is half-length.)
	 */
	rt5 = rt4 + n;
 8018a5c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018a5e:	00db      	lsls	r3, r3, #3
 8018a60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018a62:	4413      	add	r3, r2
 8018a64:	931b      	str	r3, [sp, #108]	; 0x6c
	rt6 = rt5 + n;
 8018a66:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018a68:	00db      	lsls	r3, r3, #3
 8018a6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018a6c:	4413      	add	r3, r2
 8018a6e:	931a      	str	r3, [sp, #104]	; 0x68
	Zf(poly_add_muladj_fft)(rt5, rt1, rt2, rt3, rt4, logn);
 8018a70:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018a72:	9301      	str	r3, [sp, #4]
 8018a74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018a76:	9300      	str	r3, [sp, #0]
 8018a78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018a7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018a7c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8018a7e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8018a80:	f7f9 fe3e 	bl	8012700 <falcon_inner_poly_add_muladj_fft>
	Zf(poly_invnorm2_fft)(rt6, rt3, rt4, logn);
 8018a84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018a86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018a88:	991d      	ldr	r1, [sp, #116]	; 0x74
 8018a8a:	981a      	ldr	r0, [sp, #104]	; 0x68
 8018a8c:	f7f9 fdc0 	bl	8012610 <falcon_inner_poly_invnorm2_fft>

	/*
	 * Compute:
	 *   rt5 = (F*adj(f)+G*adj(g)) / (f*adj(f)+g*adj(g))
	 */
	Zf(poly_mul_autoadj_fft)(rt5, rt6, logn);
 8018a90:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8018a92:	991a      	ldr	r1, [sp, #104]	; 0x68
 8018a94:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8018a96:	f7f9 ff43 	bl	8012920 <falcon_inner_poly_mul_autoadj_fft>
	 * the values is larger than 2^63-1 (in absolute value)
	 * because that would make the fpr_rint() do something undefined;
	 * note that any out-of-bounds value here implies a failure and
	 * (f,g) will be discarded, so we can make a simple test.
	 */
	Zf(iFFT)(rt5, logn);
 8018a9a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8018a9c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8018a9e:	f7f9 fa07 	bl	8011eb0 <falcon_inner_iFFT>
	for (u = 0; u < n; u ++) {
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	933b      	str	r3, [sp, #236]	; 0xec
 8018aa6:	e038      	b.n	8018b1a <solve_NTRU_binary_depth1+0x7ca>
		fpr z;

		z = rt5[u];
 8018aa8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8018aaa:	00db      	lsls	r3, r3, #3
 8018aac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018aae:	4413      	add	r3, r2
 8018ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ab4:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
		if (!fpr_lt(z, fpr_ptwo63m1) || !fpr_lt(fpr_mtwo63m1, z)) {
 8018ab8:	f04f 0200 	mov.w	r2, #0
 8018abc:	4b0a      	ldr	r3, [pc, #40]	; (8018ae8 <solve_NTRU_binary_depth1+0x798>)
 8018abe:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8018ac2:	f7fb fff5 	bl	8014ab0 <fpr_lt>
 8018ac6:	4603      	mov	r3, r0
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d009      	beq.n	8018ae0 <solve_NTRU_binary_depth1+0x790>
 8018acc:	f04f 0000 	mov.w	r0, #0
 8018ad0:	4906      	ldr	r1, [pc, #24]	; (8018aec <solve_NTRU_binary_depth1+0x79c>)
 8018ad2:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8018ad6:	f7fb ffeb 	bl	8014ab0 <fpr_lt>
 8018ada:	4603      	mov	r3, r0
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d107      	bne.n	8018af0 <solve_NTRU_binary_depth1+0x7a0>
			return 0;
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	e087      	b.n	8018bf4 <solve_NTRU_binary_depth1+0x8a4>
 8018ae4:	080233c0 	.word	0x080233c0
 8018ae8:	43e00000 	.word	0x43e00000
 8018aec:	c3e00000 	.word	0xc3e00000
		}
		rt5[u] = fpr_of(fpr_rint(z));
 8018af0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8018af4:	f7fb ff04 	bl	8014900 <fpr_rint.lto_priv.1>
 8018af8:	4602      	mov	r2, r0
 8018afa:	460b      	mov	r3, r1
 8018afc:	993b      	ldr	r1, [sp, #236]	; 0xec
 8018afe:	00c9      	lsls	r1, r1, #3
 8018b00:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8018b02:	1844      	adds	r4, r0, r1
 8018b04:	4610      	mov	r0, r2
 8018b06:	4619      	mov	r1, r3
 8018b08:	f7fb feea 	bl	80148e0 <fpr_of.lto_priv.1>
 8018b0c:	4602      	mov	r2, r0
 8018b0e:	460b      	mov	r3, r1
 8018b10:	e9c4 2300 	strd	r2, r3, [r4]
	for (u = 0; u < n; u ++) {
 8018b14:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8018b16:	3301      	adds	r3, #1
 8018b18:	933b      	str	r3, [sp, #236]	; 0xec
 8018b1a:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8018b1c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018b1e:	429a      	cmp	r2, r3
 8018b20:	d3c2      	bcc.n	8018aa8 <solve_NTRU_binary_depth1+0x758>
	}
	Zf(FFT)(rt5, logn);
 8018b22:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8018b24:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8018b26:	f7f9 f8ab 	bl	8011c80 <falcon_inner_FFT>

	/*
	 * Subtract k*f from F, and k*g from G.
	 */
	Zf(poly_mul_fft)(rt3, rt5, logn);
 8018b2a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8018b2c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018b2e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018b30:	f7f9 fbc6 	bl	80122c0 <falcon_inner_poly_mul_fft>
	Zf(poly_mul_fft)(rt4, rt5, logn);
 8018b34:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8018b36:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018b38:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018b3a:	f7f9 fbc1 	bl	80122c0 <falcon_inner_poly_mul_fft>
	Zf(poly_sub)(rt1, rt3, logn);
 8018b3e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8018b40:	991d      	ldr	r1, [sp, #116]	; 0x74
 8018b42:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8018b44:	f7f9 fb2c 	bl	80121a0 <falcon_inner_poly_sub>
	Zf(poly_sub)(rt2, rt4, logn);
 8018b48:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8018b4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018b4c:	981e      	ldr	r0, [sp, #120]	; 0x78
 8018b4e:	f7f9 fb27 	bl	80121a0 <falcon_inner_poly_sub>
	Zf(iFFT)(rt1, logn);
 8018b52:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8018b54:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8018b56:	f7f9 f9ab 	bl	8011eb0 <falcon_inner_iFFT>
	Zf(iFFT)(rt2, logn);
 8018b5a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8018b5c:	981e      	ldr	r0, [sp, #120]	; 0x78
 8018b5e:	f7f9 f9a7 	bl	8011eb0 <falcon_inner_iFFT>

	/*
	 * Convert back F and G to integers, and return.
	 */
	Ft = tmp;
 8018b62:	9b04      	ldr	r3, [sp, #16]
 8018b64:	9324      	str	r3, [sp, #144]	; 0x90
	Gt = Ft + n;
 8018b66:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018b68:	009b      	lsls	r3, r3, #2
 8018b6a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018b6c:	4413      	add	r3, r2
 8018b6e:	9323      	str	r3, [sp, #140]	; 0x8c
	rt3 = align_fpr(tmp, Gt + n);
 8018b70:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018b72:	009b      	lsls	r3, r3, #2
 8018b74:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018b76:	4413      	add	r3, r2
 8018b78:	4619      	mov	r1, r3
 8018b7a:	9804      	ldr	r0, [sp, #16]
 8018b7c:	f7fe f9f8 	bl	8016f70 <align_fpr>
 8018b80:	901d      	str	r0, [sp, #116]	; 0x74
	memmove(rt3, rt1, 2 * n * sizeof *rt1);
 8018b82:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018b84:	011b      	lsls	r3, r3, #4
 8018b86:	461a      	mov	r2, r3
 8018b88:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8018b8a:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018b8c:	f003 fcee 	bl	801c56c <memmove>
	rt1 = rt3;
 8018b90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018b92:	931f      	str	r3, [sp, #124]	; 0x7c
	rt2 = rt1 + n;
 8018b94:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018b96:	00db      	lsls	r3, r3, #3
 8018b98:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018b9a:	4413      	add	r3, r2
 8018b9c:	931e      	str	r3, [sp, #120]	; 0x78
	for (u = 0; u < n; u ++) {
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	933b      	str	r3, [sp, #236]	; 0xec
 8018ba2:	e022      	b.n	8018bea <solve_NTRU_binary_depth1+0x89a>
		Ft[u] = (uint32_t)fpr_rint(rt1[u]);
 8018ba4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8018ba6:	00db      	lsls	r3, r3, #3
 8018ba8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018baa:	4413      	add	r3, r2
 8018bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bb0:	4610      	mov	r0, r2
 8018bb2:	4619      	mov	r1, r3
 8018bb4:	f7fb fea4 	bl	8014900 <fpr_rint.lto_priv.1>
 8018bb8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8018bba:	009b      	lsls	r3, r3, #2
 8018bbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018bbe:	4413      	add	r3, r2
 8018bc0:	4602      	mov	r2, r0
 8018bc2:	601a      	str	r2, [r3, #0]
		Gt[u] = (uint32_t)fpr_rint(rt2[u]);
 8018bc4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8018bc6:	00db      	lsls	r3, r3, #3
 8018bc8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018bca:	4413      	add	r3, r2
 8018bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bd0:	4610      	mov	r0, r2
 8018bd2:	4619      	mov	r1, r3
 8018bd4:	f7fb fe94 	bl	8014900 <fpr_rint.lto_priv.1>
 8018bd8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8018bda:	009b      	lsls	r3, r3, #2
 8018bdc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018bde:	4413      	add	r3, r2
 8018be0:	4602      	mov	r2, r0
 8018be2:	601a      	str	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 8018be4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8018be6:	3301      	adds	r3, #1
 8018be8:	933b      	str	r3, [sp, #236]	; 0xec
 8018bea:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8018bec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018bee:	429a      	cmp	r2, r3
 8018bf0:	d3d8      	bcc.n	8018ba4 <solve_NTRU_binary_depth1+0x854>
	}

	return 1;
 8018bf2:	2301      	movs	r3, #1
}
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	b03c      	add	sp, #240	; 0xf0
 8018bf8:	bd10      	pop	{r4, pc}
 8018bfa:	bf00      	nop
 8018bfc:	0000      	movs	r0, r0
	...

08018c00 <solve_NTRU_binary_depth0>:
 * Returned value: 1 on success, 0 on error.
 */
static int
solve_NTRU_binary_depth0(unsigned logn,
	const int8_t *f, const int8_t *g, uint32_t *tmp)
{
 8018c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c04:	b0a4      	sub	sp, #144	; 0x90
 8018c06:	9007      	str	r0, [sp, #28]
 8018c08:	9106      	str	r1, [sp, #24]
 8018c0a:	9205      	str	r2, [sp, #20]
 8018c0c:	9304      	str	r3, [sp, #16]
	uint32_t p, p0i, R2;
	uint32_t *Fp, *Gp, *t1, *t2, *t3, *t4, *t5;
	uint32_t *gm, *igm, *ft, *gt;
	fpr *rt2, *rt3;

	n = (size_t)1 << logn;
 8018c0e:	2201      	movs	r2, #1
 8018c10:	9b07      	ldr	r3, [sp, #28]
 8018c12:	fa02 f303 	lsl.w	r3, r2, r3
 8018c16:	9322      	str	r3, [sp, #136]	; 0x88
	hn = n >> 1;
 8018c18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018c1a:	085b      	lsrs	r3, r3, #1
 8018c1c:	9321      	str	r3, [sp, #132]	; 0x84
	 * degree N/2 (their odd-indexed coefficients are all zero).
	 *
	 * Everything should fit in 31-bit integers, hence we can just use
	 * the first small prime p = 2147473409.
	 */
	p = PRIMES[0].p;
 8018c1e:	4b5d      	ldr	r3, [pc, #372]	; (8018d94 <solve_NTRU_binary_depth0+0x194>)
 8018c20:	9320      	str	r3, [sp, #128]	; 0x80
	p0i = modp_ninv31(p);
 8018c22:	9820      	ldr	r0, [sp, #128]	; 0x80
 8018c24:	f7fb ffb4 	bl	8014b90 <modp_ninv31>
 8018c28:	901f      	str	r0, [sp, #124]	; 0x7c
	R2 = modp_R2(p, p0i);
 8018c2a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8018c2c:	9820      	ldr	r0, [sp, #128]	; 0x80
 8018c2e:	f7fc f89f 	bl	8014d70 <modp_R2>
 8018c32:	901e      	str	r0, [sp, #120]	; 0x78

	Fp = tmp;
 8018c34:	9b04      	ldr	r3, [sp, #16]
 8018c36:	931d      	str	r3, [sp, #116]	; 0x74
	Gp = Fp + hn;
 8018c38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018c3a:	009b      	lsls	r3, r3, #2
 8018c3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018c3e:	4413      	add	r3, r2
 8018c40:	931c      	str	r3, [sp, #112]	; 0x70
	ft = Gp + hn;
 8018c42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018c44:	009b      	lsls	r3, r3, #2
 8018c46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018c48:	4413      	add	r3, r2
 8018c4a:	931b      	str	r3, [sp, #108]	; 0x6c
	gt = ft + n;
 8018c4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018c4e:	009b      	lsls	r3, r3, #2
 8018c50:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018c52:	4413      	add	r3, r2
 8018c54:	931a      	str	r3, [sp, #104]	; 0x68
	gm = gt + n;
 8018c56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018c58:	009b      	lsls	r3, r3, #2
 8018c5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018c5c:	4413      	add	r3, r2
 8018c5e:	9319      	str	r3, [sp, #100]	; 0x64
	igm = gm + n;
 8018c60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018c62:	009b      	lsls	r3, r3, #2
 8018c64:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018c66:	4413      	add	r3, r2
 8018c68:	9318      	str	r3, [sp, #96]	; 0x60

	modp_mkgm2(gm, igm, logn, PRIMES[0].g, p, p0i);
 8018c6a:	4a4b      	ldr	r2, [pc, #300]	; (8018d98 <solve_NTRU_binary_depth0+0x198>)
 8018c6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018c6e:	9301      	str	r3, [sp, #4]
 8018c70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018c72:	9300      	str	r3, [sp, #0]
 8018c74:	4613      	mov	r3, r2
 8018c76:	9a07      	ldr	r2, [sp, #28]
 8018c78:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018c7a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018c7c:	f7fc f938 	bl	8014ef0 <modp_mkgm2>

	/*
	 * Convert F' anf G' in NTT representation.
	 */
	for (u = 0; u < hn; u ++) {
 8018c80:	2300      	movs	r3, #0
 8018c82:	9323      	str	r3, [sp, #140]	; 0x8c
 8018c84:	e026      	b.n	8018cd4 <solve_NTRU_binary_depth0+0xd4>
		Fp[u] = modp_set(zint_one_to_plain(Fp + u), p);
 8018c86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018c88:	009b      	lsls	r3, r3, #2
 8018c8a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018c8c:	4413      	add	r3, r2
 8018c8e:	4618      	mov	r0, r3
 8018c90:	f7fd fe2e 	bl	80168f0 <zint_one_to_plain>
 8018c94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018c96:	009b      	lsls	r3, r3, #2
 8018c98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018c9a:	eb02 0803 	add.w	r8, r2, r3
 8018c9e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8018ca0:	f7fb ff46 	bl	8014b30 <modp_set>
 8018ca4:	4603      	mov	r3, r0
 8018ca6:	f8c8 3000 	str.w	r3, [r8]
		Gp[u] = modp_set(zint_one_to_plain(Gp + u), p);
 8018caa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018cac:	009b      	lsls	r3, r3, #2
 8018cae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018cb0:	4413      	add	r3, r2
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	f7fd fe1c 	bl	80168f0 <zint_one_to_plain>
 8018cb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018cba:	009b      	lsls	r3, r3, #2
 8018cbc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018cbe:	eb02 0803 	add.w	r8, r2, r3
 8018cc2:	9920      	ldr	r1, [sp, #128]	; 0x80
 8018cc4:	f7fb ff34 	bl	8014b30 <modp_set>
 8018cc8:	4603      	mov	r3, r0
 8018cca:	f8c8 3000 	str.w	r3, [r8]
	for (u = 0; u < hn; u ++) {
 8018cce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018cd0:	3301      	adds	r3, #1
 8018cd2:	9323      	str	r3, [sp, #140]	; 0x8c
 8018cd4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018cd8:	429a      	cmp	r2, r3
 8018cda:	d3d4      	bcc.n	8018c86 <solve_NTRU_binary_depth0+0x86>
	}
	modp_NTT2(Fp, gm, logn - 1, p, p0i);
 8018cdc:	9b07      	ldr	r3, [sp, #28]
 8018cde:	1e5a      	subs	r2, r3, #1
 8018ce0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018ce2:	9301      	str	r3, [sp, #4]
 8018ce4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018ce6:	9300      	str	r3, [sp, #0]
 8018ce8:	4613      	mov	r3, r2
 8018cea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018cec:	2101      	movs	r1, #1
 8018cee:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018cf0:	f7fc f96e 	bl	8014fd0 <modp_NTT2_ext>
	modp_NTT2(Gp, gm, logn - 1, p, p0i);
 8018cf4:	9b07      	ldr	r3, [sp, #28]
 8018cf6:	1e5a      	subs	r2, r3, #1
 8018cf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018cfa:	9301      	str	r3, [sp, #4]
 8018cfc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018cfe:	9300      	str	r3, [sp, #0]
 8018d00:	4613      	mov	r3, r2
 8018d02:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018d04:	2101      	movs	r1, #1
 8018d06:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018d08:	f7fc f962 	bl	8014fd0 <modp_NTT2_ext>

	/*
	 * Load f and g and convert them to NTT representation.
	 */
	for (u = 0; u < n; u ++) {
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	9323      	str	r3, [sp, #140]	; 0x8c
 8018d10:	e024      	b.n	8018d5c <solve_NTRU_binary_depth0+0x15c>
		ft[u] = modp_set(f[u], p);
 8018d12:	9a06      	ldr	r2, [sp, #24]
 8018d14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018d16:	4413      	add	r3, r2
 8018d18:	f993 3000 	ldrsb.w	r3, [r3]
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018d20:	009b      	lsls	r3, r3, #2
 8018d22:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018d24:	eb02 0803 	add.w	r8, r2, r3
 8018d28:	9920      	ldr	r1, [sp, #128]	; 0x80
 8018d2a:	f7fb ff01 	bl	8014b30 <modp_set>
 8018d2e:	4603      	mov	r3, r0
 8018d30:	f8c8 3000 	str.w	r3, [r8]
		gt[u] = modp_set(g[u], p);
 8018d34:	9a05      	ldr	r2, [sp, #20]
 8018d36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018d38:	4413      	add	r3, r2
 8018d3a:	f993 3000 	ldrsb.w	r3, [r3]
 8018d3e:	4618      	mov	r0, r3
 8018d40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018d42:	009b      	lsls	r3, r3, #2
 8018d44:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018d46:	eb02 0803 	add.w	r8, r2, r3
 8018d4a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8018d4c:	f7fb fef0 	bl	8014b30 <modp_set>
 8018d50:	4603      	mov	r3, r0
 8018d52:	f8c8 3000 	str.w	r3, [r8]
	for (u = 0; u < n; u ++) {
 8018d56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018d58:	3301      	adds	r3, #1
 8018d5a:	9323      	str	r3, [sp, #140]	; 0x8c
 8018d5c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018d5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018d60:	429a      	cmp	r2, r3
 8018d62:	d3d6      	bcc.n	8018d12 <solve_NTRU_binary_depth0+0x112>
	}
	modp_NTT2(ft, gm, logn, p, p0i);
 8018d64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018d66:	9301      	str	r3, [sp, #4]
 8018d68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018d6a:	9300      	str	r3, [sp, #0]
 8018d6c:	9b07      	ldr	r3, [sp, #28]
 8018d6e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018d70:	2101      	movs	r1, #1
 8018d72:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8018d74:	f7fc f92c 	bl	8014fd0 <modp_NTT2_ext>
	modp_NTT2(gt, gm, logn, p, p0i);
 8018d78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018d7a:	9301      	str	r3, [sp, #4]
 8018d7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018d7e:	9300      	str	r3, [sp, #0]
 8018d80:	9b07      	ldr	r3, [sp, #28]
 8018d82:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018d84:	2101      	movs	r1, #1
 8018d86:	981a      	ldr	r0, [sp, #104]	; 0x68
 8018d88:	f7fc f922 	bl	8014fd0 <modp_NTT2_ext>

	/*
	 * Build the unreduced F,G in ft and gt.
	 */
	for (u = 0; u < n; u += 2) {
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	9323      	str	r3, [sp, #140]	; 0x8c
 8018d90:	e073      	b.n	8018e7a <solve_NTRU_binary_depth0+0x27a>
 8018d92:	bf00      	nop
 8018d94:	7fffd801 	.word	0x7fffd801
 8018d98:	16d6ad45 	.word	0x16d6ad45
		uint32_t ftA, ftB, gtA, gtB;
		uint32_t mFp, mGp;

		ftA = ft[u + 0];
 8018d9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018d9e:	009b      	lsls	r3, r3, #2
 8018da0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018da2:	4413      	add	r3, r2
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	930d      	str	r3, [sp, #52]	; 0x34
		ftB = ft[u + 1];
 8018da8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018daa:	3301      	adds	r3, #1
 8018dac:	009b      	lsls	r3, r3, #2
 8018dae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018db0:	4413      	add	r3, r2
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	930c      	str	r3, [sp, #48]	; 0x30
		gtA = gt[u + 0];
 8018db6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018db8:	009b      	lsls	r3, r3, #2
 8018dba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018dbc:	4413      	add	r3, r2
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	930b      	str	r3, [sp, #44]	; 0x2c
		gtB = gt[u + 1];
 8018dc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018dc4:	3301      	adds	r3, #1
 8018dc6:	009b      	lsls	r3, r3, #2
 8018dc8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018dca:	4413      	add	r3, r2
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	930a      	str	r3, [sp, #40]	; 0x28
		mFp = modp_montymul(Fp[u >> 1], R2, p, p0i);
 8018dd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018dd2:	085b      	lsrs	r3, r3, #1
 8018dd4:	009b      	lsls	r3, r3, #2
 8018dd6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018dd8:	4413      	add	r3, r2
 8018dda:	6818      	ldr	r0, [r3, #0]
 8018ddc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018dde:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018de0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018de2:	f7fb ff45 	bl	8014c70 <modp_montymul>
 8018de6:	9009      	str	r0, [sp, #36]	; 0x24
		mGp = modp_montymul(Gp[u >> 1], R2, p, p0i);
 8018de8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018dea:	085b      	lsrs	r3, r3, #1
 8018dec:	009b      	lsls	r3, r3, #2
 8018dee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018df0:	4413      	add	r3, r2
 8018df2:	6818      	ldr	r0, [r3, #0]
 8018df4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018df6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018df8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018dfa:	f7fb ff39 	bl	8014c70 <modp_montymul>
 8018dfe:	9008      	str	r0, [sp, #32]
		ft[u + 0] = modp_montymul(gtB, mFp, p, p0i);
 8018e00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018e02:	009b      	lsls	r3, r3, #2
 8018e04:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018e06:	eb02 0803 	add.w	r8, r2, r3
 8018e0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018e0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018e0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018e10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018e12:	f7fb ff2d 	bl	8014c70 <modp_montymul>
 8018e16:	4603      	mov	r3, r0
 8018e18:	f8c8 3000 	str.w	r3, [r8]
		ft[u + 1] = modp_montymul(gtA, mFp, p, p0i);
 8018e1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018e1e:	3301      	adds	r3, #1
 8018e20:	009b      	lsls	r3, r3, #2
 8018e22:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018e24:	eb02 0803 	add.w	r8, r2, r3
 8018e28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018e2a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018e2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018e2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018e30:	f7fb ff1e 	bl	8014c70 <modp_montymul>
 8018e34:	4603      	mov	r3, r0
 8018e36:	f8c8 3000 	str.w	r3, [r8]
		gt[u + 0] = modp_montymul(ftB, mGp, p, p0i);
 8018e3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018e3c:	009b      	lsls	r3, r3, #2
 8018e3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018e40:	eb02 0803 	add.w	r8, r2, r3
 8018e44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018e46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018e48:	9908      	ldr	r1, [sp, #32]
 8018e4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018e4c:	f7fb ff10 	bl	8014c70 <modp_montymul>
 8018e50:	4603      	mov	r3, r0
 8018e52:	f8c8 3000 	str.w	r3, [r8]
		gt[u + 1] = modp_montymul(ftA, mGp, p, p0i);
 8018e56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018e58:	3301      	adds	r3, #1
 8018e5a:	009b      	lsls	r3, r3, #2
 8018e5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018e5e:	eb02 0803 	add.w	r8, r2, r3
 8018e62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018e64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018e66:	9908      	ldr	r1, [sp, #32]
 8018e68:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018e6a:	f7fb ff01 	bl	8014c70 <modp_montymul>
 8018e6e:	4603      	mov	r3, r0
 8018e70:	f8c8 3000 	str.w	r3, [r8]
	for (u = 0; u < n; u += 2) {
 8018e74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018e76:	3302      	adds	r3, #2
 8018e78:	9323      	str	r3, [sp, #140]	; 0x8c
 8018e7a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018e7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018e7e:	429a      	cmp	r2, r3
 8018e80:	d38c      	bcc.n	8018d9c <solve_NTRU_binary_depth0+0x19c>
	}
	modp_iNTT2(ft, igm, logn, p, p0i);
 8018e82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018e84:	9301      	str	r3, [sp, #4]
 8018e86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018e88:	9300      	str	r3, [sp, #0]
 8018e8a:	9b07      	ldr	r3, [sp, #28]
 8018e8c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018e8e:	2101      	movs	r1, #1
 8018e90:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8018e92:	f7fc f91d 	bl	80150d0 <modp_iNTT2_ext>
	modp_iNTT2(gt, igm, logn, p, p0i);
 8018e96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018e98:	9301      	str	r3, [sp, #4]
 8018e9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018e9c:	9300      	str	r3, [sp, #0]
 8018e9e:	9b07      	ldr	r3, [sp, #28]
 8018ea0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018ea2:	2101      	movs	r1, #1
 8018ea4:	981a      	ldr	r0, [sp, #104]	; 0x68
 8018ea6:	f7fc f913 	bl	80150d0 <modp_iNTT2_ext>

	Gp = Fp + n;
 8018eaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018eac:	009b      	lsls	r3, r3, #2
 8018eae:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018eb0:	4413      	add	r3, r2
 8018eb2:	931c      	str	r3, [sp, #112]	; 0x70
	t1 = Gp + n;
 8018eb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018eb6:	009b      	lsls	r3, r3, #2
 8018eb8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018eba:	4413      	add	r3, r2
 8018ebc:	9317      	str	r3, [sp, #92]	; 0x5c
	memmove(Fp, ft, 2 * n * sizeof *ft);
 8018ebe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018ec0:	00db      	lsls	r3, r3, #3
 8018ec2:	461a      	mov	r2, r3
 8018ec4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018ec6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018ec8:	f003 fb50 	bl	801c56c <memmove>
	 *
	 * We can compute F*adj(f)+G*adj(g) and f*adj(f)+g*adj(g)
	 * modulo p, using the NTT. We still move memory around in
	 * order to save RAM.
	 */
	t2 = t1 + n;
 8018ecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018ece:	009b      	lsls	r3, r3, #2
 8018ed0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018ed2:	4413      	add	r3, r2
 8018ed4:	9316      	str	r3, [sp, #88]	; 0x58
	t3 = t2 + n;
 8018ed6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018ed8:	009b      	lsls	r3, r3, #2
 8018eda:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018edc:	4413      	add	r3, r2
 8018ede:	9315      	str	r3, [sp, #84]	; 0x54
	t4 = t3 + n;
 8018ee0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018ee2:	009b      	lsls	r3, r3, #2
 8018ee4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018ee6:	4413      	add	r3, r2
 8018ee8:	9314      	str	r3, [sp, #80]	; 0x50
	t5 = t4 + n;
 8018eea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018eec:	009b      	lsls	r3, r3, #2
 8018eee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018ef0:	4413      	add	r3, r2
 8018ef2:	9313      	str	r3, [sp, #76]	; 0x4c

	/*
	 * Compute the NTT tables in t1 and t2. We do not keep t2
	 * (we'll recompute it later on).
	 */
	modp_mkgm2(t1, t2, logn, PRIMES[0].g, p, p0i);
 8018ef4:	4a7d      	ldr	r2, [pc, #500]	; (80190ec <solve_NTRU_binary_depth0+0x4ec>)
 8018ef6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018ef8:	9301      	str	r3, [sp, #4]
 8018efa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018efc:	9300      	str	r3, [sp, #0]
 8018efe:	4613      	mov	r3, r2
 8018f00:	9a07      	ldr	r2, [sp, #28]
 8018f02:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018f04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018f06:	f7fb fff3 	bl	8014ef0 <modp_mkgm2>

	/*
	 * Convert F and G to NTT.
	 */
	modp_NTT2(Fp, t1, logn, p, p0i);
 8018f0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018f0c:	9301      	str	r3, [sp, #4]
 8018f0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018f10:	9300      	str	r3, [sp, #0]
 8018f12:	9b07      	ldr	r3, [sp, #28]
 8018f14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018f16:	2101      	movs	r1, #1
 8018f18:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018f1a:	f7fc f859 	bl	8014fd0 <modp_NTT2_ext>
	modp_NTT2(Gp, t1, logn, p, p0i);
 8018f1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018f20:	9301      	str	r3, [sp, #4]
 8018f22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018f24:	9300      	str	r3, [sp, #0]
 8018f26:	9b07      	ldr	r3, [sp, #28]
 8018f28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018f2a:	2101      	movs	r1, #1
 8018f2c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018f2e:	f7fc f84f 	bl	8014fd0 <modp_NTT2_ext>

	/*
	 * Load f and adj(f) in t4 and t5, and convert them to NTT
	 * representation.
	 */
	t4[0] = t5[0] = modp_set(f[0], p);
 8018f32:	9b06      	ldr	r3, [sp, #24]
 8018f34:	f993 3000 	ldrsb.w	r3, [r3]
 8018f38:	9920      	ldr	r1, [sp, #128]	; 0x80
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	f7fb fdf8 	bl	8014b30 <modp_set>
 8018f40:	4602      	mov	r2, r0
 8018f42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018f44:	601a      	str	r2, [r3, #0]
 8018f46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018f48:	681a      	ldr	r2, [r3, #0]
 8018f4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018f4c:	601a      	str	r2, [r3, #0]
	for (u = 1; u < n; u ++) {
 8018f4e:	2301      	movs	r3, #1
 8018f50:	9323      	str	r3, [sp, #140]	; 0x8c
 8018f52:	e026      	b.n	8018fa2 <solve_NTRU_binary_depth0+0x3a2>
		t4[u] = modp_set(f[u], p);
 8018f54:	9a06      	ldr	r2, [sp, #24]
 8018f56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018f58:	4413      	add	r3, r2
 8018f5a:	f993 3000 	ldrsb.w	r3, [r3]
 8018f5e:	4618      	mov	r0, r3
 8018f60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018f62:	009b      	lsls	r3, r3, #2
 8018f64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018f66:	eb02 0803 	add.w	r8, r2, r3
 8018f6a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8018f6c:	f7fb fde0 	bl	8014b30 <modp_set>
 8018f70:	4603      	mov	r3, r0
 8018f72:	f8c8 3000 	str.w	r3, [r8]
		t5[n - u] = modp_set(-f[u], p);
 8018f76:	9a06      	ldr	r2, [sp, #24]
 8018f78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018f7a:	4413      	add	r3, r2
 8018f7c:	f993 3000 	ldrsb.w	r3, [r3]
 8018f80:	4258      	negs	r0, r3
 8018f82:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018f84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018f86:	1ad3      	subs	r3, r2, r3
 8018f88:	009b      	lsls	r3, r3, #2
 8018f8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018f8c:	eb02 0803 	add.w	r8, r2, r3
 8018f90:	9920      	ldr	r1, [sp, #128]	; 0x80
 8018f92:	f7fb fdcd 	bl	8014b30 <modp_set>
 8018f96:	4603      	mov	r3, r0
 8018f98:	f8c8 3000 	str.w	r3, [r8]
	for (u = 1; u < n; u ++) {
 8018f9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018f9e:	3301      	adds	r3, #1
 8018fa0:	9323      	str	r3, [sp, #140]	; 0x8c
 8018fa2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018fa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018fa6:	429a      	cmp	r2, r3
 8018fa8:	d3d4      	bcc.n	8018f54 <solve_NTRU_binary_depth0+0x354>
	}
	modp_NTT2(t4, t1, logn, p, p0i);
 8018faa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018fac:	9301      	str	r3, [sp, #4]
 8018fae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018fb0:	9300      	str	r3, [sp, #0]
 8018fb2:	9b07      	ldr	r3, [sp, #28]
 8018fb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018fb6:	2101      	movs	r1, #1
 8018fb8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018fba:	f7fc f809 	bl	8014fd0 <modp_NTT2_ext>
	modp_NTT2(t5, t1, logn, p, p0i);
 8018fbe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018fc0:	9301      	str	r3, [sp, #4]
 8018fc2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018fc4:	9300      	str	r3, [sp, #0]
 8018fc6:	9b07      	ldr	r3, [sp, #28]
 8018fc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018fca:	2101      	movs	r1, #1
 8018fcc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018fce:	f7fb ffff 	bl	8014fd0 <modp_NTT2_ext>

	/*
	 * Compute F*adj(f) in t2, and f*adj(f) in t3.
	 */
	for (u = 0; u < n; u ++) {
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	9323      	str	r3, [sp, #140]	; 0x8c
 8018fd6:	e031      	b.n	801903c <solve_NTRU_binary_depth0+0x43c>
		uint32_t w;

		w = modp_montymul(t5[u], R2, p, p0i);
 8018fd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018fda:	009b      	lsls	r3, r3, #2
 8018fdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018fde:	4413      	add	r3, r2
 8018fe0:	6818      	ldr	r0, [r3, #0]
 8018fe2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018fe4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018fe6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018fe8:	f7fb fe42 	bl	8014c70 <modp_montymul>
 8018fec:	900e      	str	r0, [sp, #56]	; 0x38
		t2[u] = modp_montymul(w, Fp[u], p, p0i);
 8018fee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018ff0:	009b      	lsls	r3, r3, #2
 8018ff2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018ff4:	4413      	add	r3, r2
 8018ff6:	6819      	ldr	r1, [r3, #0]
 8018ff8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018ffa:	009b      	lsls	r3, r3, #2
 8018ffc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018ffe:	eb02 0803 	add.w	r8, r2, r3
 8019002:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019004:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019006:	980e      	ldr	r0, [sp, #56]	; 0x38
 8019008:	f7fb fe32 	bl	8014c70 <modp_montymul>
 801900c:	4603      	mov	r3, r0
 801900e:	f8c8 3000 	str.w	r3, [r8]
		t3[u] = modp_montymul(w, t4[u], p, p0i);
 8019012:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019014:	009b      	lsls	r3, r3, #2
 8019016:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019018:	4413      	add	r3, r2
 801901a:	6819      	ldr	r1, [r3, #0]
 801901c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801901e:	009b      	lsls	r3, r3, #2
 8019020:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019022:	eb02 0803 	add.w	r8, r2, r3
 8019026:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019028:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801902a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801902c:	f7fb fe20 	bl	8014c70 <modp_montymul>
 8019030:	4603      	mov	r3, r0
 8019032:	f8c8 3000 	str.w	r3, [r8]
	for (u = 0; u < n; u ++) {
 8019036:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019038:	3301      	adds	r3, #1
 801903a:	9323      	str	r3, [sp, #140]	; 0x8c
 801903c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801903e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019040:	429a      	cmp	r2, r3
 8019042:	d3c9      	bcc.n	8018fd8 <solve_NTRU_binary_depth0+0x3d8>

	/*
	 * Load g and adj(g) in t4 and t5, and convert them to NTT
	 * representation.
	 */
	t4[0] = t5[0] = modp_set(g[0], p);
 8019044:	9b05      	ldr	r3, [sp, #20]
 8019046:	f993 3000 	ldrsb.w	r3, [r3]
 801904a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801904c:	4618      	mov	r0, r3
 801904e:	f7fb fd6f 	bl	8014b30 <modp_set>
 8019052:	4602      	mov	r2, r0
 8019054:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019056:	601a      	str	r2, [r3, #0]
 8019058:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801905a:	681a      	ldr	r2, [r3, #0]
 801905c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801905e:	601a      	str	r2, [r3, #0]
	for (u = 1; u < n; u ++) {
 8019060:	2301      	movs	r3, #1
 8019062:	9323      	str	r3, [sp, #140]	; 0x8c
 8019064:	e026      	b.n	80190b4 <solve_NTRU_binary_depth0+0x4b4>
		t4[u] = modp_set(g[u], p);
 8019066:	9a05      	ldr	r2, [sp, #20]
 8019068:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801906a:	4413      	add	r3, r2
 801906c:	f993 3000 	ldrsb.w	r3, [r3]
 8019070:	4618      	mov	r0, r3
 8019072:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019074:	009b      	lsls	r3, r3, #2
 8019076:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019078:	eb02 0803 	add.w	r8, r2, r3
 801907c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801907e:	f7fb fd57 	bl	8014b30 <modp_set>
 8019082:	4603      	mov	r3, r0
 8019084:	f8c8 3000 	str.w	r3, [r8]
		t5[n - u] = modp_set(-g[u], p);
 8019088:	9a05      	ldr	r2, [sp, #20]
 801908a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801908c:	4413      	add	r3, r2
 801908e:	f993 3000 	ldrsb.w	r3, [r3]
 8019092:	4258      	negs	r0, r3
 8019094:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8019096:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019098:	1ad3      	subs	r3, r2, r3
 801909a:	009b      	lsls	r3, r3, #2
 801909c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801909e:	eb02 0803 	add.w	r8, r2, r3
 80190a2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80190a4:	f7fb fd44 	bl	8014b30 <modp_set>
 80190a8:	4603      	mov	r3, r0
 80190aa:	f8c8 3000 	str.w	r3, [r8]
	for (u = 1; u < n; u ++) {
 80190ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80190b0:	3301      	adds	r3, #1
 80190b2:	9323      	str	r3, [sp, #140]	; 0x8c
 80190b4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80190b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80190b8:	429a      	cmp	r2, r3
 80190ba:	d3d4      	bcc.n	8019066 <solve_NTRU_binary_depth0+0x466>
	}
	modp_NTT2(t4, t1, logn, p, p0i);
 80190bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80190be:	9301      	str	r3, [sp, #4]
 80190c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80190c2:	9300      	str	r3, [sp, #0]
 80190c4:	9b07      	ldr	r3, [sp, #28]
 80190c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80190c8:	2101      	movs	r1, #1
 80190ca:	9814      	ldr	r0, [sp, #80]	; 0x50
 80190cc:	f7fb ff80 	bl	8014fd0 <modp_NTT2_ext>
	modp_NTT2(t5, t1, logn, p, p0i);
 80190d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80190d2:	9301      	str	r3, [sp, #4]
 80190d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80190d6:	9300      	str	r3, [sp, #0]
 80190d8:	9b07      	ldr	r3, [sp, #28]
 80190da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80190dc:	2101      	movs	r1, #1
 80190de:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80190e0:	f7fb ff76 	bl	8014fd0 <modp_NTT2_ext>

	/*
	 * Add G*adj(g) to t2, and g*adj(g) to t3.
	 */
	for (u = 0; u < n; u ++) {
 80190e4:	2300      	movs	r3, #0
 80190e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80190e8:	e04a      	b.n	8019180 <solve_NTRU_binary_depth0+0x580>
 80190ea:	bf00      	nop
 80190ec:	16d6ad45 	.word	0x16d6ad45
		uint32_t w;

		w = modp_montymul(t5[u], R2, p, p0i);
 80190f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80190f2:	009b      	lsls	r3, r3, #2
 80190f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80190f6:	4413      	add	r3, r2
 80190f8:	6818      	ldr	r0, [r3, #0]
 80190fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80190fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80190fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8019100:	f7fb fdb6 	bl	8014c70 <modp_montymul>
 8019104:	900f      	str	r0, [sp, #60]	; 0x3c
		t2[u] = modp_add(t2[u],
 8019106:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019108:	009b      	lsls	r3, r3, #2
 801910a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801910c:	4413      	add	r3, r2
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	9303      	str	r3, [sp, #12]
			modp_montymul(w, Gp[u], p, p0i), p);
 8019112:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019114:	009b      	lsls	r3, r3, #2
 8019116:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019118:	4413      	add	r3, r2
		t2[u] = modp_add(t2[u],
 801911a:	6819      	ldr	r1, [r3, #0]
 801911c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801911e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019120:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019122:	f7fb fda5 	bl	8014c70 <modp_montymul>
 8019126:	4601      	mov	r1, r0
 8019128:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801912a:	009b      	lsls	r3, r3, #2
 801912c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801912e:	eb02 0803 	add.w	r8, r2, r3
 8019132:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019134:	9803      	ldr	r0, [sp, #12]
 8019136:	f7fb fd6b 	bl	8014c10 <modp_add>
 801913a:	4603      	mov	r3, r0
 801913c:	f8c8 3000 	str.w	r3, [r8]
		t3[u] = modp_add(t3[u],
 8019140:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019142:	009b      	lsls	r3, r3, #2
 8019144:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019146:	4413      	add	r3, r2
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	9303      	str	r3, [sp, #12]
			modp_montymul(w, t4[u], p, p0i), p);
 801914c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801914e:	009b      	lsls	r3, r3, #2
 8019150:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019152:	4413      	add	r3, r2
		t3[u] = modp_add(t3[u],
 8019154:	6819      	ldr	r1, [r3, #0]
 8019156:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019158:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801915a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801915c:	f7fb fd88 	bl	8014c70 <modp_montymul>
 8019160:	4601      	mov	r1, r0
 8019162:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019164:	009b      	lsls	r3, r3, #2
 8019166:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019168:	eb02 0803 	add.w	r8, r2, r3
 801916c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801916e:	9803      	ldr	r0, [sp, #12]
 8019170:	f7fb fd4e 	bl	8014c10 <modp_add>
 8019174:	4603      	mov	r3, r0
 8019176:	f8c8 3000 	str.w	r3, [r8]
	for (u = 0; u < n; u ++) {
 801917a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801917c:	3301      	adds	r3, #1
 801917e:	9323      	str	r3, [sp, #140]	; 0x8c
 8019180:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8019182:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019184:	429a      	cmp	r2, r3
 8019186:	d3b3      	bcc.n	80190f0 <solve_NTRU_binary_depth0+0x4f0>
	 * Convert back t2 and t3 to normal representation (normalized
	 * around 0), and then
	 * move them to t1 and t2. We first need to recompute the
	 * inverse table for NTT.
	 */
	modp_mkgm2(t1, t4, logn, PRIMES[0].g, p, p0i);
 8019188:	4a9a      	ldr	r2, [pc, #616]	; (80193f4 <solve_NTRU_binary_depth0+0x7f4>)
 801918a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801918c:	9301      	str	r3, [sp, #4]
 801918e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019190:	9300      	str	r3, [sp, #0]
 8019192:	4613      	mov	r3, r2
 8019194:	9a07      	ldr	r2, [sp, #28]
 8019196:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019198:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801919a:	f7fb fea9 	bl	8014ef0 <modp_mkgm2>
	modp_iNTT2(t2, t4, logn, p, p0i);
 801919e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80191a0:	9301      	str	r3, [sp, #4]
 80191a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80191a4:	9300      	str	r3, [sp, #0]
 80191a6:	9b07      	ldr	r3, [sp, #28]
 80191a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80191aa:	2101      	movs	r1, #1
 80191ac:	9816      	ldr	r0, [sp, #88]	; 0x58
 80191ae:	f7fb ff8f 	bl	80150d0 <modp_iNTT2_ext>
	modp_iNTT2(t3, t4, logn, p, p0i);
 80191b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80191b4:	9301      	str	r3, [sp, #4]
 80191b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80191b8:	9300      	str	r3, [sp, #0]
 80191ba:	9b07      	ldr	r3, [sp, #28]
 80191bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80191be:	2101      	movs	r1, #1
 80191c0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80191c2:	f7fb ff85 	bl	80150d0 <modp_iNTT2_ext>
	for (u = 0; u < n; u ++) {
 80191c6:	2300      	movs	r3, #0
 80191c8:	9323      	str	r3, [sp, #140]	; 0x8c
 80191ca:	e022      	b.n	8019212 <solve_NTRU_binary_depth0+0x612>
		t1[u] = (uint32_t)modp_norm(t2[u], p);
 80191cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80191ce:	009b      	lsls	r3, r3, #2
 80191d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80191d2:	4413      	add	r3, r2
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80191d8:	4618      	mov	r0, r3
 80191da:	f7fb fcc1 	bl	8014b60 <modp_norm>
 80191de:	4601      	mov	r1, r0
 80191e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80191e2:	009b      	lsls	r3, r3, #2
 80191e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80191e6:	4413      	add	r3, r2
 80191e8:	460a      	mov	r2, r1
 80191ea:	601a      	str	r2, [r3, #0]
		t2[u] = (uint32_t)modp_norm(t3[u], p);
 80191ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80191ee:	009b      	lsls	r3, r3, #2
 80191f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80191f2:	4413      	add	r3, r2
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80191f8:	4618      	mov	r0, r3
 80191fa:	f7fb fcb1 	bl	8014b60 <modp_norm>
 80191fe:	4601      	mov	r1, r0
 8019200:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019202:	009b      	lsls	r3, r3, #2
 8019204:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019206:	4413      	add	r3, r2
 8019208:	460a      	mov	r2, r1
 801920a:	601a      	str	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 801920c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801920e:	3301      	adds	r3, #1
 8019210:	9323      	str	r3, [sp, #140]	; 0x8c
 8019212:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8019214:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019216:	429a      	cmp	r2, r3
 8019218:	d3d8      	bcc.n	80191cc <solve_NTRU_binary_depth0+0x5cc>
	 * Get f*adj(f)+g*adj(g) in FFT representation. Since this
	 * polynomial is auto-adjoint, all its coordinates in FFT
	 * representation are actually real, so we can truncate off
	 * the imaginary parts.
	 */
	rt3 = align_fpr(tmp, t3);
 801921a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801921c:	9804      	ldr	r0, [sp, #16]
 801921e:	f7fd fea7 	bl	8016f70 <align_fpr>
 8019222:	9012      	str	r0, [sp, #72]	; 0x48
	for (u = 0; u < n; u ++) {
 8019224:	2300      	movs	r3, #0
 8019226:	9323      	str	r3, [sp, #140]	; 0x8c
 8019228:	e017      	b.n	801925a <solve_NTRU_binary_depth0+0x65a>
		rt3[u] = fpr_of(((int32_t *)t2)[u]);
 801922a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801922c:	009b      	lsls	r3, r3, #2
 801922e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019230:	4413      	add	r3, r2
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	17da      	asrs	r2, r3, #31
 8019236:	461e      	mov	r6, r3
 8019238:	4617      	mov	r7, r2
 801923a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801923c:	00db      	lsls	r3, r3, #3
 801923e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019240:	eb02 0803 	add.w	r8, r2, r3
 8019244:	4630      	mov	r0, r6
 8019246:	4639      	mov	r1, r7
 8019248:	f7fb fb4a 	bl	80148e0 <fpr_of.lto_priv.1>
 801924c:	4602      	mov	r2, r0
 801924e:	460b      	mov	r3, r1
 8019250:	e9c8 2300 	strd	r2, r3, [r8]
	for (u = 0; u < n; u ++) {
 8019254:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019256:	3301      	adds	r3, #1
 8019258:	9323      	str	r3, [sp, #140]	; 0x8c
 801925a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801925c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801925e:	429a      	cmp	r2, r3
 8019260:	d3e3      	bcc.n	801922a <solve_NTRU_binary_depth0+0x62a>
	}
	Zf(FFT)(rt3, logn);
 8019262:	9907      	ldr	r1, [sp, #28]
 8019264:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019266:	f7f8 fd0b 	bl	8011c80 <falcon_inner_FFT>
	rt2 = align_fpr(tmp, t2);
 801926a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801926c:	9804      	ldr	r0, [sp, #16]
 801926e:	f7fd fe7f 	bl	8016f70 <align_fpr>
 8019272:	9011      	str	r0, [sp, #68]	; 0x44
	memmove(rt2, rt3, hn * sizeof *rt3);
 8019274:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019276:	00db      	lsls	r3, r3, #3
 8019278:	461a      	mov	r2, r3
 801927a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801927c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801927e:	f003 f975 	bl	801c56c <memmove>

	/*
	 * Convert F*adj(f)+G*adj(g) in FFT representation.
	 */
	rt3 = rt2 + hn;
 8019282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019284:	00db      	lsls	r3, r3, #3
 8019286:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019288:	4413      	add	r3, r2
 801928a:	9312      	str	r3, [sp, #72]	; 0x48
	for (u = 0; u < n; u ++) {
 801928c:	2300      	movs	r3, #0
 801928e:	9323      	str	r3, [sp, #140]	; 0x8c
 8019290:	e016      	b.n	80192c0 <solve_NTRU_binary_depth0+0x6c0>
		rt3[u] = fpr_of(((int32_t *)t1)[u]);
 8019292:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019294:	009b      	lsls	r3, r3, #2
 8019296:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019298:	4413      	add	r3, r2
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	17da      	asrs	r2, r3, #31
 801929e:	461c      	mov	r4, r3
 80192a0:	4615      	mov	r5, r2
 80192a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80192a4:	00db      	lsls	r3, r3, #3
 80192a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80192a8:	18d6      	adds	r6, r2, r3
 80192aa:	4620      	mov	r0, r4
 80192ac:	4629      	mov	r1, r5
 80192ae:	f7fb fb17 	bl	80148e0 <fpr_of.lto_priv.1>
 80192b2:	4602      	mov	r2, r0
 80192b4:	460b      	mov	r3, r1
 80192b6:	e9c6 2300 	strd	r2, r3, [r6]
	for (u = 0; u < n; u ++) {
 80192ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80192bc:	3301      	adds	r3, #1
 80192be:	9323      	str	r3, [sp, #140]	; 0x8c
 80192c0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80192c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80192c4:	429a      	cmp	r2, r3
 80192c6:	d3e4      	bcc.n	8019292 <solve_NTRU_binary_depth0+0x692>
	}
	Zf(FFT)(rt3, logn);
 80192c8:	9907      	ldr	r1, [sp, #28]
 80192ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80192cc:	f7f8 fcd8 	bl	8011c80 <falcon_inner_FFT>

	/*
	 * Compute (F*adj(f)+G*adj(g))/(f*adj(f)+g*adj(g)) and get
	 * its rounded normal representation in t1.
	 */
	Zf(poly_div_autoadj_fft)(rt3, rt2, logn);
 80192d0:	9a07      	ldr	r2, [sp, #28]
 80192d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80192d4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80192d6:	f7f9 fb73 	bl	80129c0 <falcon_inner_poly_div_autoadj_fft>
	Zf(iFFT)(rt3, logn);
 80192da:	9907      	ldr	r1, [sp, #28]
 80192dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80192de:	f7f8 fde7 	bl	8011eb0 <falcon_inner_iFFT>
	for (u = 0; u < n; u ++) {
 80192e2:	2300      	movs	r3, #0
 80192e4:	9323      	str	r3, [sp, #140]	; 0x8c
 80192e6:	e018      	b.n	801931a <solve_NTRU_binary_depth0+0x71a>
		t1[u] = modp_set((int32_t)fpr_rint(rt3[u]), p);
 80192e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80192ea:	00db      	lsls	r3, r3, #3
 80192ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80192ee:	4413      	add	r3, r2
 80192f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192f4:	4610      	mov	r0, r2
 80192f6:	4619      	mov	r1, r3
 80192f8:	f7fb fb02 	bl	8014900 <fpr_rint.lto_priv.1>
 80192fc:	4602      	mov	r2, r0
 80192fe:	460b      	mov	r3, r1
 8019300:	4610      	mov	r0, r2
 8019302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019304:	009b      	lsls	r3, r3, #2
 8019306:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019308:	18d4      	adds	r4, r2, r3
 801930a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801930c:	f7fb fc10 	bl	8014b30 <modp_set>
 8019310:	4603      	mov	r3, r0
 8019312:	6023      	str	r3, [r4, #0]
	for (u = 0; u < n; u ++) {
 8019314:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019316:	3301      	adds	r3, #1
 8019318:	9323      	str	r3, [sp, #140]	; 0x8c
 801931a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801931c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801931e:	429a      	cmp	r2, r3
 8019320:	d3e2      	bcc.n	80192e8 <solve_NTRU_binary_depth0+0x6e8>
	 *   G (NTT representation) (Gp)
	 *   k (t1)
	 *
	 * We want to compute F-k*f, and G-k*g.
	 */
	t2 = t1 + n;
 8019322:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019324:	009b      	lsls	r3, r3, #2
 8019326:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019328:	4413      	add	r3, r2
 801932a:	9316      	str	r3, [sp, #88]	; 0x58
	t3 = t2 + n;
 801932c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801932e:	009b      	lsls	r3, r3, #2
 8019330:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019332:	4413      	add	r3, r2
 8019334:	9315      	str	r3, [sp, #84]	; 0x54
	t4 = t3 + n;
 8019336:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019338:	009b      	lsls	r3, r3, #2
 801933a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801933c:	4413      	add	r3, r2
 801933e:	9314      	str	r3, [sp, #80]	; 0x50
	t5 = t4 + n;
 8019340:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019342:	009b      	lsls	r3, r3, #2
 8019344:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019346:	4413      	add	r3, r2
 8019348:	9313      	str	r3, [sp, #76]	; 0x4c
	modp_mkgm2(t2, t3, logn, PRIMES[0].g, p, p0i);
 801934a:	4a2a      	ldr	r2, [pc, #168]	; (80193f4 <solve_NTRU_binary_depth0+0x7f4>)
 801934c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801934e:	9301      	str	r3, [sp, #4]
 8019350:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019352:	9300      	str	r3, [sp, #0]
 8019354:	4613      	mov	r3, r2
 8019356:	9a07      	ldr	r2, [sp, #28]
 8019358:	9915      	ldr	r1, [sp, #84]	; 0x54
 801935a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801935c:	f7fb fdc8 	bl	8014ef0 <modp_mkgm2>
	for (u = 0; u < n; u ++) {
 8019360:	2300      	movs	r3, #0
 8019362:	9323      	str	r3, [sp, #140]	; 0x8c
 8019364:	e020      	b.n	80193a8 <solve_NTRU_binary_depth0+0x7a8>
		t4[u] = modp_set(f[u], p);
 8019366:	9a06      	ldr	r2, [sp, #24]
 8019368:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801936a:	4413      	add	r3, r2
 801936c:	f993 3000 	ldrsb.w	r3, [r3]
 8019370:	4618      	mov	r0, r3
 8019372:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019374:	009b      	lsls	r3, r3, #2
 8019376:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019378:	18d4      	adds	r4, r2, r3
 801937a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801937c:	f7fb fbd8 	bl	8014b30 <modp_set>
 8019380:	4603      	mov	r3, r0
 8019382:	6023      	str	r3, [r4, #0]
		t5[u] = modp_set(g[u], p);
 8019384:	9a05      	ldr	r2, [sp, #20]
 8019386:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019388:	4413      	add	r3, r2
 801938a:	f993 3000 	ldrsb.w	r3, [r3]
 801938e:	4618      	mov	r0, r3
 8019390:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019392:	009b      	lsls	r3, r3, #2
 8019394:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019396:	18d4      	adds	r4, r2, r3
 8019398:	9920      	ldr	r1, [sp, #128]	; 0x80
 801939a:	f7fb fbc9 	bl	8014b30 <modp_set>
 801939e:	4603      	mov	r3, r0
 80193a0:	6023      	str	r3, [r4, #0]
	for (u = 0; u < n; u ++) {
 80193a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80193a4:	3301      	adds	r3, #1
 80193a6:	9323      	str	r3, [sp, #140]	; 0x8c
 80193a8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80193aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80193ac:	429a      	cmp	r2, r3
 80193ae:	d3da      	bcc.n	8019366 <solve_NTRU_binary_depth0+0x766>
	}
	modp_NTT2(t1, t2, logn, p, p0i);
 80193b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80193b2:	9301      	str	r3, [sp, #4]
 80193b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80193b6:	9300      	str	r3, [sp, #0]
 80193b8:	9b07      	ldr	r3, [sp, #28]
 80193ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80193bc:	2101      	movs	r1, #1
 80193be:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80193c0:	f7fb fe06 	bl	8014fd0 <modp_NTT2_ext>
	modp_NTT2(t4, t2, logn, p, p0i);
 80193c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80193c6:	9301      	str	r3, [sp, #4]
 80193c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80193ca:	9300      	str	r3, [sp, #0]
 80193cc:	9b07      	ldr	r3, [sp, #28]
 80193ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80193d0:	2101      	movs	r1, #1
 80193d2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80193d4:	f7fb fdfc 	bl	8014fd0 <modp_NTT2_ext>
	modp_NTT2(t5, t2, logn, p, p0i);
 80193d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80193da:	9301      	str	r3, [sp, #4]
 80193dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80193de:	9300      	str	r3, [sp, #0]
 80193e0:	9b07      	ldr	r3, [sp, #28]
 80193e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80193e4:	2101      	movs	r1, #1
 80193e6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80193e8:	f7fb fdf2 	bl	8014fd0 <modp_NTT2_ext>
	for (u = 0; u < n; u ++) {
 80193ec:	2300      	movs	r3, #0
 80193ee:	9323      	str	r3, [sp, #140]	; 0x8c
 80193f0:	e044      	b.n	801947c <solve_NTRU_binary_depth0+0x87c>
 80193f2:	bf00      	nop
 80193f4:	16d6ad45 	.word	0x16d6ad45
		uint32_t kw;

		kw = modp_montymul(t1[u], R2, p, p0i);
 80193f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80193fa:	009b      	lsls	r3, r3, #2
 80193fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80193fe:	4413      	add	r3, r2
 8019400:	6818      	ldr	r0, [r3, #0]
 8019402:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019404:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019406:	991e      	ldr	r1, [sp, #120]	; 0x78
 8019408:	f7fb fc32 	bl	8014c70 <modp_montymul>
 801940c:	9010      	str	r0, [sp, #64]	; 0x40
		Fp[u] = modp_sub(Fp[u],
 801940e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019410:	009b      	lsls	r3, r3, #2
 8019412:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019414:	4413      	add	r3, r2
 8019416:	681d      	ldr	r5, [r3, #0]
			modp_montymul(kw, t4[u], p, p0i), p);
 8019418:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801941a:	009b      	lsls	r3, r3, #2
 801941c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801941e:	4413      	add	r3, r2
		Fp[u] = modp_sub(Fp[u],
 8019420:	6819      	ldr	r1, [r3, #0]
 8019422:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019424:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019426:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019428:	f7fb fc22 	bl	8014c70 <modp_montymul>
 801942c:	4601      	mov	r1, r0
 801942e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019430:	009b      	lsls	r3, r3, #2
 8019432:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019434:	18d4      	adds	r4, r2, r3
 8019436:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019438:	4628      	mov	r0, r5
 801943a:	f7fb fc01 	bl	8014c40 <modp_sub>
 801943e:	4603      	mov	r3, r0
 8019440:	6023      	str	r3, [r4, #0]
		Gp[u] = modp_sub(Gp[u],
 8019442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019444:	009b      	lsls	r3, r3, #2
 8019446:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019448:	4413      	add	r3, r2
 801944a:	681d      	ldr	r5, [r3, #0]
			modp_montymul(kw, t5[u], p, p0i), p);
 801944c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801944e:	009b      	lsls	r3, r3, #2
 8019450:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019452:	4413      	add	r3, r2
		Gp[u] = modp_sub(Gp[u],
 8019454:	6819      	ldr	r1, [r3, #0]
 8019456:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019458:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801945a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801945c:	f7fb fc08 	bl	8014c70 <modp_montymul>
 8019460:	4601      	mov	r1, r0
 8019462:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019464:	009b      	lsls	r3, r3, #2
 8019466:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019468:	18d4      	adds	r4, r2, r3
 801946a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801946c:	4628      	mov	r0, r5
 801946e:	f7fb fbe7 	bl	8014c40 <modp_sub>
 8019472:	4603      	mov	r3, r0
 8019474:	6023      	str	r3, [r4, #0]
	for (u = 0; u < n; u ++) {
 8019476:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019478:	3301      	adds	r3, #1
 801947a:	9323      	str	r3, [sp, #140]	; 0x8c
 801947c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801947e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019480:	429a      	cmp	r2, r3
 8019482:	d3b9      	bcc.n	80193f8 <solve_NTRU_binary_depth0+0x7f8>
	}
	modp_iNTT2(Fp, t3, logn, p, p0i);
 8019484:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019486:	9301      	str	r3, [sp, #4]
 8019488:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801948a:	9300      	str	r3, [sp, #0]
 801948c:	9b07      	ldr	r3, [sp, #28]
 801948e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019490:	2101      	movs	r1, #1
 8019492:	981d      	ldr	r0, [sp, #116]	; 0x74
 8019494:	f7fb fe1c 	bl	80150d0 <modp_iNTT2_ext>
	modp_iNTT2(Gp, t3, logn, p, p0i);
 8019498:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801949a:	9301      	str	r3, [sp, #4]
 801949c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801949e:	9300      	str	r3, [sp, #0]
 80194a0:	9b07      	ldr	r3, [sp, #28]
 80194a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80194a4:	2101      	movs	r1, #1
 80194a6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80194a8:	f7fb fe12 	bl	80150d0 <modp_iNTT2_ext>
	for (u = 0; u < n; u ++) {
 80194ac:	2300      	movs	r3, #0
 80194ae:	9323      	str	r3, [sp, #140]	; 0x8c
 80194b0:	e022      	b.n	80194f8 <solve_NTRU_binary_depth0+0x8f8>
		Fp[u] = (uint32_t)modp_norm(Fp[u], p);
 80194b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80194b4:	009b      	lsls	r3, r3, #2
 80194b6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80194b8:	4413      	add	r3, r2
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80194be:	4618      	mov	r0, r3
 80194c0:	f7fb fb4e 	bl	8014b60 <modp_norm>
 80194c4:	4601      	mov	r1, r0
 80194c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80194c8:	009b      	lsls	r3, r3, #2
 80194ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80194cc:	4413      	add	r3, r2
 80194ce:	460a      	mov	r2, r1
 80194d0:	601a      	str	r2, [r3, #0]
		Gp[u] = (uint32_t)modp_norm(Gp[u], p);
 80194d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80194d4:	009b      	lsls	r3, r3, #2
 80194d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80194d8:	4413      	add	r3, r2
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80194de:	4618      	mov	r0, r3
 80194e0:	f7fb fb3e 	bl	8014b60 <modp_norm>
 80194e4:	4601      	mov	r1, r0
 80194e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80194e8:	009b      	lsls	r3, r3, #2
 80194ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80194ec:	4413      	add	r3, r2
 80194ee:	460a      	mov	r2, r1
 80194f0:	601a      	str	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 80194f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80194f4:	3301      	adds	r3, #1
 80194f6:	9323      	str	r3, [sp, #140]	; 0x8c
 80194f8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80194fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80194fc:	429a      	cmp	r2, r3
 80194fe:	d3d8      	bcc.n	80194b2 <solve_NTRU_binary_depth0+0x8b2>
	}

	return 1;
 8019500:	2301      	movs	r3, #1
}
 8019502:	4618      	mov	r0, r3
 8019504:	b024      	add	sp, #144	; 0x90
 8019506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801950a:	bf00      	nop
 801950c:	0000      	movs	r0, r0
	...

08019510 <solve_NTRU>:
 * then 0 is returned.
 */
static int
solve_NTRU(unsigned logn, int8_t *F, int8_t *G,
	const int8_t *f, const int8_t *g, int lim, uint32_t *tmp)
{
 8019510:	b510      	push	{r4, lr}
 8019512:	b094      	sub	sp, #80	; 0x50
 8019514:	9005      	str	r0, [sp, #20]
 8019516:	9104      	str	r1, [sp, #16]
 8019518:	9203      	str	r2, [sp, #12]
 801951a:	9302      	str	r3, [sp, #8]
	size_t n, u;
	uint32_t *ft, *gt, *Ft, *Gt, *gm;
	uint32_t p, p0i, r;
	const small_prime *primes;

	n = MKN(logn);
 801951c:	2201      	movs	r2, #1
 801951e:	9b05      	ldr	r3, [sp, #20]
 8019520:	fa02 f303 	lsl.w	r3, r2, r3
 8019524:	9310      	str	r3, [sp, #64]	; 0x40

	if (!solve_NTRU_deepest(logn, f, g, tmp)) {
 8019526:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019528:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801952a:	9902      	ldr	r1, [sp, #8]
 801952c:	9805      	ldr	r0, [sp, #20]
 801952e:	f7fe f8d7 	bl	80176e0 <solve_NTRU_deepest>
 8019532:	4603      	mov	r3, r0
 8019534:	2b00      	cmp	r3, #0
 8019536:	d101      	bne.n	801953c <solve_NTRU+0x2c>
		return 0;
 8019538:	2300      	movs	r3, #0
 801953a:	e142      	b.n	80197c2 <solve_NTRU+0x2b2>
	/*
	 * For logn <= 2, we need to use solve_NTRU_intermediate()
	 * directly, because coefficients are a bit too large and
	 * do not fit the hypotheses in solve_NTRU_binary_depth0().
	 */
	if (logn <= 2) {
 801953c:	9b05      	ldr	r3, [sp, #20]
 801953e:	2b02      	cmp	r3, #2
 8019540:	d815      	bhi.n	801956e <solve_NTRU+0x5e>
		unsigned depth;

		depth = logn;
 8019542:	9b05      	ldr	r3, [sp, #20]
 8019544:	9312      	str	r3, [sp, #72]	; 0x48
		while (depth -- > 0) {
 8019546:	e00c      	b.n	8019562 <solve_NTRU+0x52>
			if (!solve_NTRU_intermediate(logn, f, g, depth, tmp)) {
 8019548:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801954a:	9300      	str	r3, [sp, #0]
 801954c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801954e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019550:	9902      	ldr	r1, [sp, #8]
 8019552:	9805      	ldr	r0, [sp, #20]
 8019554:	f7fe f92c 	bl	80177b0 <solve_NTRU_intermediate>
 8019558:	4603      	mov	r3, r0
 801955a:	2b00      	cmp	r3, #0
 801955c:	d101      	bne.n	8019562 <solve_NTRU+0x52>
				return 0;
 801955e:	2300      	movs	r3, #0
 8019560:	e12f      	b.n	80197c2 <solve_NTRU+0x2b2>
		while (depth -- > 0) {
 8019562:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019564:	1e5a      	subs	r2, r3, #1
 8019566:	9212      	str	r2, [sp, #72]	; 0x48
 8019568:	2b00      	cmp	r3, #0
 801956a:	d1ed      	bne.n	8019548 <solve_NTRU+0x38>
 801956c:	e02a      	b.n	80195c4 <solve_NTRU+0xb4>
			}
		}
	} else {
		unsigned depth;

		depth = logn;
 801956e:	9b05      	ldr	r3, [sp, #20]
 8019570:	9311      	str	r3, [sp, #68]	; 0x44
		while (depth -- > 2) {
 8019572:	e00c      	b.n	801958e <solve_NTRU+0x7e>
			if (!solve_NTRU_intermediate(logn, f, g, depth, tmp)) {
 8019574:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019576:	9300      	str	r3, [sp, #0]
 8019578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801957a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801957c:	9902      	ldr	r1, [sp, #8]
 801957e:	9805      	ldr	r0, [sp, #20]
 8019580:	f7fe f916 	bl	80177b0 <solve_NTRU_intermediate>
 8019584:	4603      	mov	r3, r0
 8019586:	2b00      	cmp	r3, #0
 8019588:	d101      	bne.n	801958e <solve_NTRU+0x7e>
				return 0;
 801958a:	2300      	movs	r3, #0
 801958c:	e119      	b.n	80197c2 <solve_NTRU+0x2b2>
		while (depth -- > 2) {
 801958e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019590:	1e5a      	subs	r2, r3, #1
 8019592:	9211      	str	r2, [sp, #68]	; 0x44
 8019594:	2b02      	cmp	r3, #2
 8019596:	d8ed      	bhi.n	8019574 <solve_NTRU+0x64>
			}
		}
		if (!solve_NTRU_binary_depth1(logn, f, g, tmp)) {
 8019598:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801959a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801959c:	9902      	ldr	r1, [sp, #8]
 801959e:	9805      	ldr	r0, [sp, #20]
 80195a0:	f7fe fed6 	bl	8018350 <solve_NTRU_binary_depth1>
 80195a4:	4603      	mov	r3, r0
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d101      	bne.n	80195ae <solve_NTRU+0x9e>
			return 0;
 80195aa:	2300      	movs	r3, #0
 80195ac:	e109      	b.n	80197c2 <solve_NTRU+0x2b2>
		}
		if (!solve_NTRU_binary_depth0(logn, f, g, tmp)) {
 80195ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80195b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80195b2:	9902      	ldr	r1, [sp, #8]
 80195b4:	9805      	ldr	r0, [sp, #20]
 80195b6:	f7ff fb23 	bl	8018c00 <solve_NTRU_binary_depth0>
 80195ba:	4603      	mov	r3, r0
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d101      	bne.n	80195c4 <solve_NTRU+0xb4>
			return 0;
 80195c0:	2300      	movs	r3, #0
 80195c2:	e0fe      	b.n	80197c2 <solve_NTRU+0x2b2>
	}

	/*
	 * If no buffer has been provided for G, use a temporary one.
	 */
	if (G == NULL) {
 80195c4:	9b03      	ldr	r3, [sp, #12]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d104      	bne.n	80195d4 <solve_NTRU+0xc4>
		G = (int8_t *)(tmp + 2 * n);
 80195ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80195cc:	00db      	lsls	r3, r3, #3
 80195ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80195d0:	4413      	add	r3, r2
 80195d2:	9303      	str	r3, [sp, #12]

	/*
	 * Final F and G are in fk->tmp, one word per coefficient
	 * (signed value over 31 bits).
	 */
	if (!poly_big_to_small(F, tmp, lim, logn)
 80195d4:	9b05      	ldr	r3, [sp, #20]
 80195d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80195d8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80195da:	9804      	ldr	r0, [sp, #16]
 80195dc:	f7fd fa40 	bl	8016a60 <poly_big_to_small>
 80195e0:	4603      	mov	r3, r0
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d00b      	beq.n	80195fe <solve_NTRU+0xee>
		|| !poly_big_to_small(G, tmp + n, lim, logn))
 80195e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80195e8:	009b      	lsls	r3, r3, #2
 80195ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80195ec:	18d1      	adds	r1, r2, r3
 80195ee:	9b05      	ldr	r3, [sp, #20]
 80195f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80195f2:	9803      	ldr	r0, [sp, #12]
 80195f4:	f7fd fa34 	bl	8016a60 <poly_big_to_small>
 80195f8:	4603      	mov	r3, r0
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d101      	bne.n	8019602 <solve_NTRU+0xf2>
	{
		return 0;
 80195fe:	2300      	movs	r3, #0
 8019600:	e0df      	b.n	80197c2 <solve_NTRU+0x2b2>
	 * allows using the NTT.
	 *
	 * We put Gt[] first in tmp[], and process it first, so that it does
	 * not overlap with G[] in case we allocated it ourselves.
	 */
	Gt = tmp;
 8019602:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019604:	930f      	str	r3, [sp, #60]	; 0x3c
	ft = Gt + n;
 8019606:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019608:	009b      	lsls	r3, r3, #2
 801960a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801960c:	4413      	add	r3, r2
 801960e:	930e      	str	r3, [sp, #56]	; 0x38
	gt = ft + n;
 8019610:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019612:	009b      	lsls	r3, r3, #2
 8019614:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019616:	4413      	add	r3, r2
 8019618:	930d      	str	r3, [sp, #52]	; 0x34
	Ft = gt + n;
 801961a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801961c:	009b      	lsls	r3, r3, #2
 801961e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019620:	4413      	add	r3, r2
 8019622:	930c      	str	r3, [sp, #48]	; 0x30
	gm = Ft + n;
 8019624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019626:	009b      	lsls	r3, r3, #2
 8019628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801962a:	4413      	add	r3, r2
 801962c:	930b      	str	r3, [sp, #44]	; 0x2c

	primes = PRIMES;
 801962e:	4b66      	ldr	r3, [pc, #408]	; (80197c8 <solve_NTRU+0x2b8>)
 8019630:	930a      	str	r3, [sp, #40]	; 0x28
	p = primes[0].p;
 8019632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	9309      	str	r3, [sp, #36]	; 0x24
	p0i = modp_ninv31(p);
 8019638:	9809      	ldr	r0, [sp, #36]	; 0x24
 801963a:	f7fb faa9 	bl	8014b90 <modp_ninv31>
 801963e:	9008      	str	r0, [sp, #32]
	modp_mkgm2(gm, tmp, logn, primes[0].g, p, p0i);
 8019640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019642:	685a      	ldr	r2, [r3, #4]
 8019644:	9b08      	ldr	r3, [sp, #32]
 8019646:	9301      	str	r3, [sp, #4]
 8019648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801964a:	9300      	str	r3, [sp, #0]
 801964c:	4613      	mov	r3, r2
 801964e:	9a05      	ldr	r2, [sp, #20]
 8019650:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019652:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019654:	f7fb fc4c 	bl	8014ef0 <modp_mkgm2>
	for (u = 0; u < n; u ++) {
 8019658:	2300      	movs	r3, #0
 801965a:	9313      	str	r3, [sp, #76]	; 0x4c
 801965c:	e011      	b.n	8019682 <solve_NTRU+0x172>
		Gt[u] = modp_set(G[u], p);
 801965e:	9a03      	ldr	r2, [sp, #12]
 8019660:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019662:	4413      	add	r3, r2
 8019664:	f993 3000 	ldrsb.w	r3, [r3]
 8019668:	4618      	mov	r0, r3
 801966a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801966c:	009b      	lsls	r3, r3, #2
 801966e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019670:	18d4      	adds	r4, r2, r3
 8019672:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019674:	f7fb fa5c 	bl	8014b30 <modp_set>
 8019678:	4603      	mov	r3, r0
 801967a:	6023      	str	r3, [r4, #0]
	for (u = 0; u < n; u ++) {
 801967c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801967e:	3301      	adds	r3, #1
 8019680:	9313      	str	r3, [sp, #76]	; 0x4c
 8019682:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019686:	429a      	cmp	r2, r3
 8019688:	d3e9      	bcc.n	801965e <solve_NTRU+0x14e>
	}
	for (u = 0; u < n; u ++) {
 801968a:	2300      	movs	r3, #0
 801968c:	9313      	str	r3, [sp, #76]	; 0x4c
 801968e:	e02f      	b.n	80196f0 <solve_NTRU+0x1e0>
		ft[u] = modp_set(f[u], p);
 8019690:	9a02      	ldr	r2, [sp, #8]
 8019692:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019694:	4413      	add	r3, r2
 8019696:	f993 3000 	ldrsb.w	r3, [r3]
 801969a:	4618      	mov	r0, r3
 801969c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801969e:	009b      	lsls	r3, r3, #2
 80196a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80196a2:	18d4      	adds	r4, r2, r3
 80196a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80196a6:	f7fb fa43 	bl	8014b30 <modp_set>
 80196aa:	4603      	mov	r3, r0
 80196ac:	6023      	str	r3, [r4, #0]
		gt[u] = modp_set(g[u], p);
 80196ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80196b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80196b2:	4413      	add	r3, r2
 80196b4:	f993 3000 	ldrsb.w	r3, [r3]
 80196b8:	4618      	mov	r0, r3
 80196ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80196bc:	009b      	lsls	r3, r3, #2
 80196be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80196c0:	18d4      	adds	r4, r2, r3
 80196c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80196c4:	f7fb fa34 	bl	8014b30 <modp_set>
 80196c8:	4603      	mov	r3, r0
 80196ca:	6023      	str	r3, [r4, #0]
		Ft[u] = modp_set(F[u], p);
 80196cc:	9a04      	ldr	r2, [sp, #16]
 80196ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80196d0:	4413      	add	r3, r2
 80196d2:	f993 3000 	ldrsb.w	r3, [r3]
 80196d6:	4618      	mov	r0, r3
 80196d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80196da:	009b      	lsls	r3, r3, #2
 80196dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80196de:	18d4      	adds	r4, r2, r3
 80196e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80196e2:	f7fb fa25 	bl	8014b30 <modp_set>
 80196e6:	4603      	mov	r3, r0
 80196e8:	6023      	str	r3, [r4, #0]
	for (u = 0; u < n; u ++) {
 80196ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80196ec:	3301      	adds	r3, #1
 80196ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80196f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80196f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80196f4:	429a      	cmp	r2, r3
 80196f6:	d3cb      	bcc.n	8019690 <solve_NTRU+0x180>
	}
	modp_NTT2(ft, gm, logn, p, p0i);
 80196f8:	9b08      	ldr	r3, [sp, #32]
 80196fa:	9301      	str	r3, [sp, #4]
 80196fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196fe:	9300      	str	r3, [sp, #0]
 8019700:	9b05      	ldr	r3, [sp, #20]
 8019702:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019704:	2101      	movs	r1, #1
 8019706:	980e      	ldr	r0, [sp, #56]	; 0x38
 8019708:	f7fb fc62 	bl	8014fd0 <modp_NTT2_ext>
	modp_NTT2(gt, gm, logn, p, p0i);
 801970c:	9b08      	ldr	r3, [sp, #32]
 801970e:	9301      	str	r3, [sp, #4]
 8019710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019712:	9300      	str	r3, [sp, #0]
 8019714:	9b05      	ldr	r3, [sp, #20]
 8019716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019718:	2101      	movs	r1, #1
 801971a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801971c:	f7fb fc58 	bl	8014fd0 <modp_NTT2_ext>
	modp_NTT2(Ft, gm, logn, p, p0i);
 8019720:	9b08      	ldr	r3, [sp, #32]
 8019722:	9301      	str	r3, [sp, #4]
 8019724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019726:	9300      	str	r3, [sp, #0]
 8019728:	9b05      	ldr	r3, [sp, #20]
 801972a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801972c:	2101      	movs	r1, #1
 801972e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019730:	f7fb fc4e 	bl	8014fd0 <modp_NTT2_ext>
	modp_NTT2(Gt, gm, logn, p, p0i);
 8019734:	9b08      	ldr	r3, [sp, #32]
 8019736:	9301      	str	r3, [sp, #4]
 8019738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801973a:	9300      	str	r3, [sp, #0]
 801973c:	9b05      	ldr	r3, [sp, #20]
 801973e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019740:	2101      	movs	r1, #1
 8019742:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019744:	f7fb fc44 	bl	8014fd0 <modp_NTT2_ext>
	r = modp_montymul(12289, 1, p, p0i);
 8019748:	9b08      	ldr	r3, [sp, #32]
 801974a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801974c:	2101      	movs	r1, #1
 801974e:	f243 0001 	movw	r0, #12289	; 0x3001
 8019752:	f7fb fa8d 	bl	8014c70 <modp_montymul>
 8019756:	9007      	str	r0, [sp, #28]
	for (u = 0; u < n; u ++) {
 8019758:	2300      	movs	r3, #0
 801975a:	9313      	str	r3, [sp, #76]	; 0x4c
 801975c:	e02c      	b.n	80197b8 <solve_NTRU+0x2a8>
		uint32_t z;

		z = modp_sub(modp_montymul(ft[u], Gt[u], p, p0i),
 801975e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019760:	009b      	lsls	r3, r3, #2
 8019762:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019764:	4413      	add	r3, r2
 8019766:	6818      	ldr	r0, [r3, #0]
 8019768:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801976a:	009b      	lsls	r3, r3, #2
 801976c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801976e:	4413      	add	r3, r2
 8019770:	6819      	ldr	r1, [r3, #0]
 8019772:	9b08      	ldr	r3, [sp, #32]
 8019774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019776:	f7fb fa7b 	bl	8014c70 <modp_montymul>
 801977a:	4604      	mov	r4, r0
			modp_montymul(gt[u], Ft[u], p, p0i), p);
 801977c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801977e:	009b      	lsls	r3, r3, #2
 8019780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019782:	4413      	add	r3, r2
		z = modp_sub(modp_montymul(ft[u], Gt[u], p, p0i),
 8019784:	6818      	ldr	r0, [r3, #0]
			modp_montymul(gt[u], Ft[u], p, p0i), p);
 8019786:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019788:	009b      	lsls	r3, r3, #2
 801978a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801978c:	4413      	add	r3, r2
		z = modp_sub(modp_montymul(ft[u], Gt[u], p, p0i),
 801978e:	6819      	ldr	r1, [r3, #0]
 8019790:	9b08      	ldr	r3, [sp, #32]
 8019792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019794:	f7fb fa6c 	bl	8014c70 <modp_montymul>
 8019798:	4603      	mov	r3, r0
 801979a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801979c:	4619      	mov	r1, r3
 801979e:	4620      	mov	r0, r4
 80197a0:	f7fb fa4e 	bl	8014c40 <modp_sub>
 80197a4:	9006      	str	r0, [sp, #24]
		if (z != r) {
 80197a6:	9a06      	ldr	r2, [sp, #24]
 80197a8:	9b07      	ldr	r3, [sp, #28]
 80197aa:	429a      	cmp	r2, r3
 80197ac:	d001      	beq.n	80197b2 <solve_NTRU+0x2a2>
			return 0;
 80197ae:	2300      	movs	r3, #0
 80197b0:	e007      	b.n	80197c2 <solve_NTRU+0x2b2>
	for (u = 0; u < n; u ++) {
 80197b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80197b4:	3301      	adds	r3, #1
 80197b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80197b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80197ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80197bc:	429a      	cmp	r2, r3
 80197be:	d3ce      	bcc.n	801975e <solve_NTRU+0x24e>
		}
	}

	return 1;
 80197c0:	2301      	movs	r3, #1
}
 80197c2:	4618      	mov	r0, r3
 80197c4:	b014      	add	sp, #80	; 0x50
 80197c6:	bd10      	pop	{r4, pc}
 80197c8:	080233c0 	.word	0x080233c0
 80197cc:	00000000 	.word	0x00000000

080197d0 <poly_small_mkgauss>:
 * Generate a random polynomial with a Gaussian distribution. This function
 * also makes sure that the resultant of the polynomial with phi is odd.
 */
static void
poly_small_mkgauss(RNG_CONTEXT *rng, int8_t *f, unsigned logn)
{
 80197d0:	b500      	push	{lr}
 80197d2:	b089      	sub	sp, #36	; 0x24
 80197d4:	9003      	str	r0, [sp, #12]
 80197d6:	9102      	str	r1, [sp, #8]
 80197d8:	9201      	str	r2, [sp, #4]
	size_t n, u;
	unsigned mod2;

	n = MKN(logn);
 80197da:	2201      	movs	r2, #1
 80197dc:	9b01      	ldr	r3, [sp, #4]
 80197de:	fa02 f303 	lsl.w	r3, r2, r3
 80197e2:	9305      	str	r3, [sp, #20]
	mod2 = 0;
 80197e4:	2300      	movs	r3, #0
 80197e6:	9306      	str	r3, [sp, #24]
	for (u = 0; u < n; u ++) {
 80197e8:	2300      	movs	r3, #0
 80197ea:	9307      	str	r3, [sp, #28]
 80197ec:	e029      	b.n	8019842 <poly_small_mkgauss+0x72>
		 * realistically, this is always the case except for
		 * the very low degrees (N = 2 or 4), for which there
		 * is no real security anyway.
		 */
		if (s < -127 || s > 127) {
			goto restart;
 80197ee:	bf00      	nop
 80197f0:	e000      	b.n	80197f4 <poly_small_mkgauss+0x24>
	restart:
 80197f2:	bf00      	nop
		s = mkgauss(rng, logn);
 80197f4:	9901      	ldr	r1, [sp, #4]
 80197f6:	9803      	ldr	r0, [sp, #12]
 80197f8:	f7fd faf2 	bl	8016de0 <mkgauss>
 80197fc:	9004      	str	r0, [sp, #16]
		if (s < -127 || s > 127) {
 80197fe:	9b04      	ldr	r3, [sp, #16]
 8019800:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8019804:	dbf3      	blt.n	80197ee <poly_small_mkgauss+0x1e>
 8019806:	9b04      	ldr	r3, [sp, #16]
 8019808:	2b7f      	cmp	r3, #127	; 0x7f
 801980a:	dcf0      	bgt.n	80197ee <poly_small_mkgauss+0x1e>
		/*
		 * We need the sum of all coefficients to be 1; otherwise,
		 * the resultant of the polynomial with X^N+1 will be even,
		 * and the binary GCD will fail.
		 */
		if (u == n - 1) {
 801980c:	9b05      	ldr	r3, [sp, #20]
 801980e:	3b01      	subs	r3, #1
 8019810:	9a07      	ldr	r2, [sp, #28]
 8019812:	429a      	cmp	r2, r3
 8019814:	d106      	bne.n	8019824 <poly_small_mkgauss+0x54>
			if ((mod2 ^ (unsigned)(s & 1)) == 0) {
 8019816:	9b04      	ldr	r3, [sp, #16]
 8019818:	f003 0301 	and.w	r3, r3, #1
 801981c:	9a06      	ldr	r2, [sp, #24]
 801981e:	429a      	cmp	r2, r3
 8019820:	d106      	bne.n	8019830 <poly_small_mkgauss+0x60>
				goto restart;
 8019822:	e7e7      	b.n	80197f4 <poly_small_mkgauss+0x24>
			}
		} else {
			mod2 ^= (unsigned)(s & 1);
 8019824:	9b04      	ldr	r3, [sp, #16]
 8019826:	f003 0301 	and.w	r3, r3, #1
 801982a:	9a06      	ldr	r2, [sp, #24]
 801982c:	4053      	eors	r3, r2
 801982e:	9306      	str	r3, [sp, #24]
		}
		f[u] = (int8_t)s;
 8019830:	9a02      	ldr	r2, [sp, #8]
 8019832:	9b07      	ldr	r3, [sp, #28]
 8019834:	4413      	add	r3, r2
 8019836:	9a04      	ldr	r2, [sp, #16]
 8019838:	b252      	sxtb	r2, r2
 801983a:	701a      	strb	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 801983c:	9b07      	ldr	r3, [sp, #28]
 801983e:	3301      	adds	r3, #1
 8019840:	9307      	str	r3, [sp, #28]
 8019842:	9a07      	ldr	r2, [sp, #28]
 8019844:	9b05      	ldr	r3, [sp, #20]
 8019846:	429a      	cmp	r2, r3
 8019848:	d3d3      	bcc.n	80197f2 <poly_small_mkgauss+0x22>
	}
}
 801984a:	bf00      	nop
 801984c:	bf00      	nop
 801984e:	b009      	add	sp, #36	; 0x24
 8019850:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08019860 <falcon_inner_keygen>:
/* see falcon.h */
void
Zf(keygen)(inner_shake256_context *rng,
	int8_t *f, int8_t *g, int8_t *F, int8_t *G, uint16_t *h,
	unsigned logn, uint8_t *tmp)
{
 8019860:	b500      	push	{lr}
 8019862:	b099      	sub	sp, #100	; 0x64
 8019864:	9007      	str	r0, [sp, #28]
 8019866:	9106      	str	r1, [sp, #24]
 8019868:	9205      	str	r2, [sp, #20]
 801986a:	9304      	str	r3, [sp, #16]
	 */
	size_t n, u;
	uint16_t *h2, *tmp2;
	RNG_CONTEXT *rc;

	n = MKN(logn);
 801986c:	2201      	movs	r2, #1
 801986e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019870:	fa02 f303 	lsl.w	r3, r2, r3
 8019874:	9310      	str	r3, [sp, #64]	; 0x40
	rc = rng;
 8019876:	9b07      	ldr	r3, [sp, #28]
 8019878:	930f      	str	r3, [sp, #60]	; 0x3c
		 * The poly_small_mkgauss() function makes sure
		 * that the sum of coefficients is 1 modulo 2
		 * (i.e. the resultant of the polynomial with phi
		 * will be odd).
		 */
		poly_small_mkgauss(rc, f, logn);
 801987a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801987c:	9906      	ldr	r1, [sp, #24]
 801987e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019880:	f7ff ffa6 	bl	80197d0 <poly_small_mkgauss>
		poly_small_mkgauss(rc, g, logn);
 8019884:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019886:	9905      	ldr	r1, [sp, #20]
 8019888:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801988a:	f7ff ffa1 	bl	80197d0 <poly_small_mkgauss>
		 * Verify that all coefficients are within the bounds
		 * defined in max_fg_bits. This is the case with
		 * overwhelming probability; this guarantees that the
		 * key will be encodable with FALCON_COMP_TRIM.
		 */
		lim = 1 << (Zf(max_fg_bits)[logn] - 1);
 801988e:	4a98      	ldr	r2, [pc, #608]	; (8019af0 <falcon_inner_keygen+0x290>)
 8019890:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019892:	4413      	add	r3, r2
 8019894:	781b      	ldrb	r3, [r3, #0]
 8019896:	3b01      	subs	r3, #1
 8019898:	2201      	movs	r2, #1
 801989a:	fa02 f303 	lsl.w	r3, r2, r3
 801989e:	9311      	str	r3, [sp, #68]	; 0x44
		for (u = 0; u < n; u ++) {
 80198a0:	2300      	movs	r3, #0
 80198a2:	9317      	str	r3, [sp, #92]	; 0x5c
 80198a4:	e02c      	b.n	8019900 <falcon_inner_keygen+0xa0>
			/*
			 * We can use non-CT tests since on any failure
			 * we will discard f and g.
			 */
			if (f[u] >= lim || f[u] <= -lim
 80198a6:	9a06      	ldr	r2, [sp, #24]
 80198a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80198aa:	4413      	add	r3, r2
 80198ac:	f993 3000 	ldrsb.w	r3, [r3]
 80198b0:	461a      	mov	r2, r3
 80198b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80198b4:	4293      	cmp	r3, r2
 80198b6:	dd1c      	ble.n	80198f2 <falcon_inner_keygen+0x92>
 80198b8:	9a06      	ldr	r2, [sp, #24]
 80198ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80198bc:	4413      	add	r3, r2
 80198be:	f993 3000 	ldrsb.w	r3, [r3]
 80198c2:	461a      	mov	r2, r3
 80198c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80198c6:	425b      	negs	r3, r3
 80198c8:	429a      	cmp	r2, r3
 80198ca:	dd12      	ble.n	80198f2 <falcon_inner_keygen+0x92>
				|| g[u] >= lim || g[u] <= -lim)
 80198cc:	9a05      	ldr	r2, [sp, #20]
 80198ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80198d0:	4413      	add	r3, r2
 80198d2:	f993 3000 	ldrsb.w	r3, [r3]
 80198d6:	461a      	mov	r2, r3
 80198d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80198da:	4293      	cmp	r3, r2
 80198dc:	dd09      	ble.n	80198f2 <falcon_inner_keygen+0x92>
 80198de:	9a05      	ldr	r2, [sp, #20]
 80198e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80198e2:	4413      	add	r3, r2
 80198e4:	f993 3000 	ldrsb.w	r3, [r3]
 80198e8:	461a      	mov	r2, r3
 80198ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80198ec:	425b      	negs	r3, r3
 80198ee:	429a      	cmp	r2, r3
 80198f0:	dc03      	bgt.n	80198fa <falcon_inner_keygen+0x9a>
			{
				lim = -1;
 80198f2:	f04f 33ff 	mov.w	r3, #4294967295
 80198f6:	9311      	str	r3, [sp, #68]	; 0x44
				break;
 80198f8:	e006      	b.n	8019908 <falcon_inner_keygen+0xa8>
		for (u = 0; u < n; u ++) {
 80198fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80198fc:	3301      	adds	r3, #1
 80198fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8019900:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019902:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019904:	429a      	cmp	r2, r3
 8019906:	d3ce      	bcc.n	80198a6 <falcon_inner_keygen+0x46>
			}
		}
		if (lim < 0) {
 8019908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801990a:	2b00      	cmp	r3, #0
 801990c:	f2c0 80d9 	blt.w	8019ac2 <falcon_inner_keygen+0x262>
		 * norms. With q = 12289, the squared bound is:
		 *   (1.17^2)* 12289 = 16822.4121
		 * Since f and g are integral, the squared norm
		 * of (g,-f) is an integer.
		 */
		normf = poly_small_sqnorm(f, logn);
 8019910:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019912:	9806      	ldr	r0, [sp, #24]
 8019914:	f7fd fafc 	bl	8016f10 <poly_small_sqnorm>
 8019918:	900e      	str	r0, [sp, #56]	; 0x38
		normg = poly_small_sqnorm(g, logn);
 801991a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801991c:	9805      	ldr	r0, [sp, #20]
 801991e:	f7fd faf7 	bl	8016f10 <poly_small_sqnorm>
 8019922:	900d      	str	r0, [sp, #52]	; 0x34
		norm = (normf + normg) | -((normf | normg) >> 31);
 8019924:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019928:	4413      	add	r3, r2
 801992a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801992c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801992e:	430a      	orrs	r2, r1
 8019930:	17d2      	asrs	r2, r2, #31
 8019932:	4313      	orrs	r3, r2
 8019934:	930c      	str	r3, [sp, #48]	; 0x30
		if (norm >= 16823) {
 8019936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019938:	f244 12b6 	movw	r2, #16822	; 0x41b6
 801993c:	4293      	cmp	r3, r2
 801993e:	f200 80c2 	bhi.w	8019ac6 <falcon_inner_keygen+0x266>
		}

		/*
		 * We compute the orthogonalized vector norm.
		 */
		rt1 = (fpr *)tmp;
 8019942:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019944:	930b      	str	r3, [sp, #44]	; 0x2c
		rt2 = rt1 + n;
 8019946:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019948:	00db      	lsls	r3, r3, #3
 801994a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801994c:	4413      	add	r3, r2
 801994e:	930a      	str	r3, [sp, #40]	; 0x28
		rt3 = rt2 + n;
 8019950:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019952:	00db      	lsls	r3, r3, #3
 8019954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019956:	4413      	add	r3, r2
 8019958:	9309      	str	r3, [sp, #36]	; 0x24
		poly_small_to_fp(rt1, f, logn);
 801995a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801995c:	9906      	ldr	r1, [sp, #24]
 801995e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019960:	f7fd fb46 	bl	8016ff0 <poly_small_to_fp>
		poly_small_to_fp(rt2, g, logn);
 8019964:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019966:	9905      	ldr	r1, [sp, #20]
 8019968:	980a      	ldr	r0, [sp, #40]	; 0x28
 801996a:	f7fd fb41 	bl	8016ff0 <poly_small_to_fp>
		Zf(FFT)(rt1, logn);
 801996e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019970:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019972:	f7f8 f985 	bl	8011c80 <falcon_inner_FFT>
		Zf(FFT)(rt2, logn);
 8019976:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019978:	980a      	ldr	r0, [sp, #40]	; 0x28
 801997a:	f7f8 f981 	bl	8011c80 <falcon_inner_FFT>
		Zf(poly_invnorm2_fft)(rt3, rt1, rt2, logn);
 801997e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019982:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019984:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019986:	f7f8 fe43 	bl	8012610 <falcon_inner_poly_invnorm2_fft>
		Zf(poly_adj_fft)(rt1, logn);
 801998a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801998c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801998e:	f7f8 fc67 	bl	8012260 <falcon_inner_poly_adj_fft>
		Zf(poly_adj_fft)(rt2, logn);
 8019992:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019994:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019996:	f7f8 fc63 	bl	8012260 <falcon_inner_poly_adj_fft>
		Zf(poly_mulconst)(rt1, fpr_q, logn);
 801999a:	a351      	add	r3, pc, #324	; (adr r3, 8019ae0 <falcon_inner_keygen+0x280>)
 801999c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80199a2:	9100      	str	r1, [sp, #0]
 80199a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80199a6:	f7f8 fe03 	bl	80125b0 <falcon_inner_poly_mulconst>
		Zf(poly_mulconst)(rt2, fpr_q, logn);
 80199aa:	a34d      	add	r3, pc, #308	; (adr r3, 8019ae0 <falcon_inner_keygen+0x280>)
 80199ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80199b2:	9100      	str	r1, [sp, #0]
 80199b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80199b6:	f7f8 fdfb 	bl	80125b0 <falcon_inner_poly_mulconst>
		Zf(poly_mul_autoadj_fft)(rt1, rt3, logn);
 80199ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80199bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80199be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80199c0:	f7f8 ffae 	bl	8012920 <falcon_inner_poly_mul_autoadj_fft>
		Zf(poly_mul_autoadj_fft)(rt2, rt3, logn);
 80199c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80199c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80199c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80199ca:	f7f8 ffa9 	bl	8012920 <falcon_inner_poly_mul_autoadj_fft>
		Zf(iFFT)(rt1, logn);
 80199ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80199d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80199d2:	f7f8 fa6d 	bl	8011eb0 <falcon_inner_iFFT>
		Zf(iFFT)(rt2, logn);
 80199d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80199d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80199da:	f7f8 fa69 	bl	8011eb0 <falcon_inner_iFFT>
		bnorm = fpr_zero;
 80199de:	f04f 0200 	mov.w	r2, #0
 80199e2:	f04f 0300 	mov.w	r3, #0
 80199e6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		for (u = 0; u < n; u ++) {
 80199ea:	2300      	movs	r3, #0
 80199ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80199ee:	e026      	b.n	8019a3e <falcon_inner_keygen+0x1de>
			bnorm = fpr_add(bnorm, fpr_sqr(rt1[u]));
 80199f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80199f2:	00db      	lsls	r3, r3, #3
 80199f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80199f6:	4413      	add	r3, r2
 80199f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199fc:	4610      	mov	r0, r2
 80199fe:	4619      	mov	r1, r3
 8019a00:	f7fb f83e 	bl	8014a80 <fpr_sqr.lto_priv.2>
 8019a04:	4602      	mov	r2, r0
 8019a06:	460b      	mov	r3, r1
 8019a08:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8019a0c:	f7f9 fc90 	bl	8013330 <falcon_inner_fpr_add>
 8019a10:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
			bnorm = fpr_add(bnorm, fpr_sqr(rt2[u]));
 8019a14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019a16:	00db      	lsls	r3, r3, #3
 8019a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019a1a:	4413      	add	r3, r2
 8019a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a20:	4610      	mov	r0, r2
 8019a22:	4619      	mov	r1, r3
 8019a24:	f7fb f82c 	bl	8014a80 <fpr_sqr.lto_priv.2>
 8019a28:	4602      	mov	r2, r0
 8019a2a:	460b      	mov	r3, r1
 8019a2c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8019a30:	f7f9 fc7e 	bl	8013330 <falcon_inner_fpr_add>
 8019a34:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
		for (u = 0; u < n; u ++) {
 8019a38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019a3a:	3301      	adds	r3, #1
 8019a3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8019a3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019a40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a42:	429a      	cmp	r2, r3
 8019a44:	d3d4      	bcc.n	80199f0 <falcon_inner_keygen+0x190>
		}
		if (!fpr_lt(bnorm, fpr_bnorm_max)) {
 8019a46:	a328      	add	r3, pc, #160	; (adr r3, 8019ae8 <falcon_inner_keygen+0x288>)
 8019a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a4c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8019a50:	f7fb f82e 	bl	8014ab0 <fpr_lt>
 8019a54:	4603      	mov	r3, r0
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d037      	beq.n	8019aca <falcon_inner_keygen+0x26a>

		/*
		 * Compute public key h = g/f mod X^N+1 mod q. If this
		 * fails, we must restart.
		 */
		if (h == NULL) {
 8019a5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d107      	bne.n	8019a70 <falcon_inner_keygen+0x210>
			h2 = (uint16_t *)tmp;
 8019a60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019a62:	9316      	str	r3, [sp, #88]	; 0x58
			tmp2 = h2 + n;
 8019a64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a66:	005b      	lsls	r3, r3, #1
 8019a68:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019a6a:	4413      	add	r3, r2
 8019a6c:	9315      	str	r3, [sp, #84]	; 0x54
 8019a6e:	e003      	b.n	8019a78 <falcon_inner_keygen+0x218>
		} else {
			h2 = h;
 8019a70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019a72:	9316      	str	r3, [sp, #88]	; 0x58
			tmp2 = (uint16_t *)tmp;
 8019a74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019a76:	9315      	str	r3, [sp, #84]	; 0x54
		}
		if (!Zf(compute_public)(h2, f, g, logn, (uint8_t *)tmp2)) {
 8019a78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019a7a:	9300      	str	r3, [sp, #0]
 8019a7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019a7e:	9a05      	ldr	r2, [sp, #20]
 8019a80:	9906      	ldr	r1, [sp, #24]
 8019a82:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019a84:	f001 fafc 	bl	801b080 <falcon_inner_compute_public>
 8019a88:	4603      	mov	r3, r0
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d01f      	beq.n	8019ace <falcon_inner_keygen+0x26e>
		}

		/*
		 * Solve the NTRU equation to get F and G.
		 */
		lim = (1 << (Zf(max_FG_bits)[logn] - 1)) - 1;
 8019a8e:	4a19      	ldr	r2, [pc, #100]	; (8019af4 <falcon_inner_keygen+0x294>)
 8019a90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019a92:	4413      	add	r3, r2
 8019a94:	781b      	ldrb	r3, [r3, #0]
 8019a96:	3b01      	subs	r3, #1
 8019a98:	2201      	movs	r2, #1
 8019a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8019a9e:	3b01      	subs	r3, #1
 8019aa0:	9311      	str	r3, [sp, #68]	; 0x44
		if (!solve_NTRU(logn, F, G, f, g, lim, (uint32_t *)tmp)) {
 8019aa2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019aa4:	9302      	str	r3, [sp, #8]
 8019aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019aa8:	9301      	str	r3, [sp, #4]
 8019aaa:	9b05      	ldr	r3, [sp, #20]
 8019aac:	9300      	str	r3, [sp, #0]
 8019aae:	9b06      	ldr	r3, [sp, #24]
 8019ab0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019ab2:	9904      	ldr	r1, [sp, #16]
 8019ab4:	981c      	ldr	r0, [sp, #112]	; 0x70
 8019ab6:	f7ff fd2b 	bl	8019510 <solve_NTRU>
 8019aba:	4603      	mov	r3, r0
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d108      	bne.n	8019ad2 <falcon_inner_keygen+0x272>
			continue;
 8019ac0:	e006      	b.n	8019ad0 <falcon_inner_keygen+0x270>
			continue;
 8019ac2:	bf00      	nop
 8019ac4:	e6d9      	b.n	801987a <falcon_inner_keygen+0x1a>
			continue;
 8019ac6:	bf00      	nop
 8019ac8:	e6d7      	b.n	801987a <falcon_inner_keygen+0x1a>
			continue;
 8019aca:	bf00      	nop
 8019acc:	e6d5      	b.n	801987a <falcon_inner_keygen+0x1a>
			continue;
 8019ace:	bf00      	nop
	for (;;) {
 8019ad0:	e6d3      	b.n	801987a <falcon_inner_keygen+0x1a>
		}

		/*
		 * Key pair is generated.
		 */
		break;
 8019ad2:	bf00      	nop
	}
}
 8019ad4:	bf00      	nop
 8019ad6:	b019      	add	sp, #100	; 0x64
 8019ad8:	f85d fb04 	ldr.w	pc, [sp], #4
 8019adc:	f3af 8000 	nop.w
 8019ae0:	00000000 	.word	0x00000000
 8019ae4:	40c80080 	.word	0x40c80080
 8019ae8:	5fd8adac 	.word	0x5fd8adac
 8019aec:	40d06d9a 	.word	0x40d06d9a
 8019af0:	0801f2b8 	.word	0x0801f2b8
 8019af4:	0801f2c4 	.word	0x0801f2c4
	...

08019b00 <falcon_inner_prng_init>:


/* see inner.h */
void
Zf(prng_init)(prng *p, inner_shake256_context *src)
{
 8019b00:	b500      	push	{lr}
 8019b02:	b083      	sub	sp, #12
 8019b04:	9001      	str	r0, [sp, #4]
 8019b06:	9100      	str	r1, [sp, #0]
	inner_shake256_extract(src, p->state.d, 56);
 8019b08:	9b01      	ldr	r3, [sp, #4]
 8019b0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019b0e:	2238      	movs	r2, #56	; 0x38
 8019b10:	4619      	mov	r1, r3
 8019b12:	9800      	ldr	r0, [sp, #0]
 8019b14:	f000 ff4c 	bl	801a9b0 <falcon_inner_i_shake256_extract>
	Zf(prng_refill)(p);
 8019b18:	9801      	ldr	r0, [sp, #4]
 8019b1a:	f000 f809 	bl	8019b30 <falcon_inner_prng_refill>
}
 8019b1e:	bf00      	nop
 8019b20:	b003      	add	sp, #12
 8019b22:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b26:	bf00      	nop
	...

08019b30 <falcon_inner_prng_refill>:
 *
 * The block counter is XORed into the first 8 bytes of the IV.
 */
void
Zf(prng_refill)(prng *p)
{
 8019b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b32:	b099      	sub	sp, #100	; 0x64
 8019b34:	9001      	str	r0, [sp, #4]

	/*
	 * State uses local endianness. Only the output bytes must be
	 * converted to little endian (if used on a big-endian machine).
	 */
	cc = *(uint64_t *)(p->state.d + 48);
 8019b36:	9b01      	ldr	r3, [sp, #4]
 8019b38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019b3c:	3330      	adds	r3, #48	; 0x30
 8019b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b42:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	for (u = 0; u < 8; u ++) {
 8019b46:	2300      	movs	r3, #0
 8019b48:	9315      	str	r3, [sp, #84]	; 0x54
 8019b4a:	e221      	b.n	8019f90 <falcon_inner_prng_refill+0x460>
		uint32_t state[16];
		size_t v;
		int i;

		memcpy(&state[0], CW, sizeof CW);
 8019b4c:	4b10      	ldr	r3, [pc, #64]	; (8019b90 <falcon_inner_prng_refill+0x60>)
 8019b4e:	ae03      	add	r6, sp, #12
 8019b50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019b52:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		memcpy(&state[4], p->state.d, 48);
 8019b56:	9b01      	ldr	r3, [sp, #4]
 8019b58:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8019b5c:	ab03      	add	r3, sp, #12
 8019b5e:	3310      	adds	r3, #16
 8019b60:	2230      	movs	r2, #48	; 0x30
 8019b62:	4618      	mov	r0, r3
 8019b64:	f002 fd68 	bl	801c638 <memcpy>
		state[14] ^= (uint32_t)cc;
 8019b68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019b6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019b6c:	4053      	eors	r3, r2
 8019b6e:	9311      	str	r3, [sp, #68]	; 0x44
		state[15] ^= (uint32_t)(cc >> 32);
 8019b70:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019b72:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8019b76:	f04f 0200 	mov.w	r2, #0
 8019b7a:	f04f 0300 	mov.w	r3, #0
 8019b7e:	000a      	movs	r2, r1
 8019b80:	2300      	movs	r3, #0
 8019b82:	4613      	mov	r3, r2
 8019b84:	4073      	eors	r3, r6
 8019b86:	9312      	str	r3, [sp, #72]	; 0x48
		for (i = 0; i < 10; i ++) {
 8019b88:	2300      	movs	r3, #0
 8019b8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8019b8c:	e185      	b.n	8019e9a <falcon_inner_prng_refill+0x36a>
 8019b8e:	bf00      	nop
 8019b90:	080255bc 	.word	0x080255bc
		state[c] += state[d]; \
		state[b] ^= state[c]; \
		state[b] = (state[b] <<  7) | (state[b] >> 25); \
	} while (0)

			QROUND( 0,  4,  8, 12);
 8019b94:	9a03      	ldr	r2, [sp, #12]
 8019b96:	9b07      	ldr	r3, [sp, #28]
 8019b98:	4413      	add	r3, r2
 8019b9a:	9303      	str	r3, [sp, #12]
 8019b9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019b9e:	9b03      	ldr	r3, [sp, #12]
 8019ba0:	4053      	eors	r3, r2
 8019ba2:	930f      	str	r3, [sp, #60]	; 0x3c
 8019ba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019ba6:	ea4f 4333 	mov.w	r3, r3, ror #16
 8019baa:	930f      	str	r3, [sp, #60]	; 0x3c
 8019bac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019bae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019bb0:	4413      	add	r3, r2
 8019bb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8019bb4:	9a07      	ldr	r2, [sp, #28]
 8019bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019bb8:	4053      	eors	r3, r2
 8019bba:	9307      	str	r3, [sp, #28]
 8019bbc:	9b07      	ldr	r3, [sp, #28]
 8019bbe:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019bc2:	9307      	str	r3, [sp, #28]
 8019bc4:	9a03      	ldr	r2, [sp, #12]
 8019bc6:	9b07      	ldr	r3, [sp, #28]
 8019bc8:	4413      	add	r3, r2
 8019bca:	9303      	str	r3, [sp, #12]
 8019bcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019bce:	9b03      	ldr	r3, [sp, #12]
 8019bd0:	4053      	eors	r3, r2
 8019bd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8019bd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019bd6:	ea4f 6333 	mov.w	r3, r3, ror #24
 8019bda:	930f      	str	r3, [sp, #60]	; 0x3c
 8019bdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019be0:	4413      	add	r3, r2
 8019be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8019be4:	9a07      	ldr	r2, [sp, #28]
 8019be6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019be8:	4053      	eors	r3, r2
 8019bea:	9307      	str	r3, [sp, #28]
 8019bec:	9b07      	ldr	r3, [sp, #28]
 8019bee:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019bf2:	9307      	str	r3, [sp, #28]
			QROUND( 1,  5,  9, 13);
 8019bf4:	9a04      	ldr	r2, [sp, #16]
 8019bf6:	9b08      	ldr	r3, [sp, #32]
 8019bf8:	4413      	add	r3, r2
 8019bfa:	9304      	str	r3, [sp, #16]
 8019bfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019bfe:	9b04      	ldr	r3, [sp, #16]
 8019c00:	4053      	eors	r3, r2
 8019c02:	9310      	str	r3, [sp, #64]	; 0x40
 8019c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019c06:	ea4f 4333 	mov.w	r3, r3, ror #16
 8019c0a:	9310      	str	r3, [sp, #64]	; 0x40
 8019c0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019c0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019c10:	4413      	add	r3, r2
 8019c12:	930c      	str	r3, [sp, #48]	; 0x30
 8019c14:	9a08      	ldr	r2, [sp, #32]
 8019c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019c18:	4053      	eors	r3, r2
 8019c1a:	9308      	str	r3, [sp, #32]
 8019c1c:	9b08      	ldr	r3, [sp, #32]
 8019c1e:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019c22:	9308      	str	r3, [sp, #32]
 8019c24:	9a04      	ldr	r2, [sp, #16]
 8019c26:	9b08      	ldr	r3, [sp, #32]
 8019c28:	4413      	add	r3, r2
 8019c2a:	9304      	str	r3, [sp, #16]
 8019c2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019c2e:	9b04      	ldr	r3, [sp, #16]
 8019c30:	4053      	eors	r3, r2
 8019c32:	9310      	str	r3, [sp, #64]	; 0x40
 8019c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019c36:	ea4f 6333 	mov.w	r3, r3, ror #24
 8019c3a:	9310      	str	r3, [sp, #64]	; 0x40
 8019c3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019c3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019c40:	4413      	add	r3, r2
 8019c42:	930c      	str	r3, [sp, #48]	; 0x30
 8019c44:	9a08      	ldr	r2, [sp, #32]
 8019c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019c48:	4053      	eors	r3, r2
 8019c4a:	9308      	str	r3, [sp, #32]
 8019c4c:	9b08      	ldr	r3, [sp, #32]
 8019c4e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019c52:	9308      	str	r3, [sp, #32]
			QROUND( 2,  6, 10, 14);
 8019c54:	9a05      	ldr	r2, [sp, #20]
 8019c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c58:	4413      	add	r3, r2
 8019c5a:	9305      	str	r3, [sp, #20]
 8019c5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019c5e:	9b05      	ldr	r3, [sp, #20]
 8019c60:	4053      	eors	r3, r2
 8019c62:	9311      	str	r3, [sp, #68]	; 0x44
 8019c64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019c66:	ea4f 4333 	mov.w	r3, r3, ror #16
 8019c6a:	9311      	str	r3, [sp, #68]	; 0x44
 8019c6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019c6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019c70:	4413      	add	r3, r2
 8019c72:	930d      	str	r3, [sp, #52]	; 0x34
 8019c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c78:	4053      	eors	r3, r2
 8019c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8019c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c7e:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019c82:	9309      	str	r3, [sp, #36]	; 0x24
 8019c84:	9a05      	ldr	r2, [sp, #20]
 8019c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c88:	4413      	add	r3, r2
 8019c8a:	9305      	str	r3, [sp, #20]
 8019c8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019c8e:	9b05      	ldr	r3, [sp, #20]
 8019c90:	4053      	eors	r3, r2
 8019c92:	9311      	str	r3, [sp, #68]	; 0x44
 8019c94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019c96:	ea4f 6333 	mov.w	r3, r3, ror #24
 8019c9a:	9311      	str	r3, [sp, #68]	; 0x44
 8019c9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019c9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019ca0:	4413      	add	r3, r2
 8019ca2:	930d      	str	r3, [sp, #52]	; 0x34
 8019ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019ca8:	4053      	eors	r3, r2
 8019caa:	9309      	str	r3, [sp, #36]	; 0x24
 8019cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cae:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019cb2:	9309      	str	r3, [sp, #36]	; 0x24
			QROUND( 3,  7, 11, 15);
 8019cb4:	9a06      	ldr	r2, [sp, #24]
 8019cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cb8:	4413      	add	r3, r2
 8019cba:	9306      	str	r3, [sp, #24]
 8019cbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019cbe:	9b06      	ldr	r3, [sp, #24]
 8019cc0:	4053      	eors	r3, r2
 8019cc2:	9312      	str	r3, [sp, #72]	; 0x48
 8019cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019cc6:	ea4f 4333 	mov.w	r3, r3, ror #16
 8019cca:	9312      	str	r3, [sp, #72]	; 0x48
 8019ccc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019cce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019cd0:	4413      	add	r3, r2
 8019cd2:	930e      	str	r3, [sp, #56]	; 0x38
 8019cd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019cd8:	4053      	eors	r3, r2
 8019cda:	930a      	str	r3, [sp, #40]	; 0x28
 8019cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cde:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8019ce4:	9a06      	ldr	r2, [sp, #24]
 8019ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ce8:	4413      	add	r3, r2
 8019cea:	9306      	str	r3, [sp, #24]
 8019cec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019cee:	9b06      	ldr	r3, [sp, #24]
 8019cf0:	4053      	eors	r3, r2
 8019cf2:	9312      	str	r3, [sp, #72]	; 0x48
 8019cf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019cf6:	ea4f 6333 	mov.w	r3, r3, ror #24
 8019cfa:	9312      	str	r3, [sp, #72]	; 0x48
 8019cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019cfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019d00:	4413      	add	r3, r2
 8019d02:	930e      	str	r3, [sp, #56]	; 0x38
 8019d04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d08:	4053      	eors	r3, r2
 8019d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8019d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d0e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019d12:	930a      	str	r3, [sp, #40]	; 0x28
			QROUND( 0,  5, 10, 15);
 8019d14:	9a03      	ldr	r2, [sp, #12]
 8019d16:	9b08      	ldr	r3, [sp, #32]
 8019d18:	4413      	add	r3, r2
 8019d1a:	9303      	str	r3, [sp, #12]
 8019d1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019d1e:	9b03      	ldr	r3, [sp, #12]
 8019d20:	4053      	eors	r3, r2
 8019d22:	9312      	str	r3, [sp, #72]	; 0x48
 8019d24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019d26:	ea4f 4333 	mov.w	r3, r3, ror #16
 8019d2a:	9312      	str	r3, [sp, #72]	; 0x48
 8019d2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019d2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019d30:	4413      	add	r3, r2
 8019d32:	930d      	str	r3, [sp, #52]	; 0x34
 8019d34:	9a08      	ldr	r2, [sp, #32]
 8019d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019d38:	4053      	eors	r3, r2
 8019d3a:	9308      	str	r3, [sp, #32]
 8019d3c:	9b08      	ldr	r3, [sp, #32]
 8019d3e:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019d42:	9308      	str	r3, [sp, #32]
 8019d44:	9a03      	ldr	r2, [sp, #12]
 8019d46:	9b08      	ldr	r3, [sp, #32]
 8019d48:	4413      	add	r3, r2
 8019d4a:	9303      	str	r3, [sp, #12]
 8019d4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019d4e:	9b03      	ldr	r3, [sp, #12]
 8019d50:	4053      	eors	r3, r2
 8019d52:	9312      	str	r3, [sp, #72]	; 0x48
 8019d54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019d56:	ea4f 6333 	mov.w	r3, r3, ror #24
 8019d5a:	9312      	str	r3, [sp, #72]	; 0x48
 8019d5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019d5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019d60:	4413      	add	r3, r2
 8019d62:	930d      	str	r3, [sp, #52]	; 0x34
 8019d64:	9a08      	ldr	r2, [sp, #32]
 8019d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019d68:	4053      	eors	r3, r2
 8019d6a:	9308      	str	r3, [sp, #32]
 8019d6c:	9b08      	ldr	r3, [sp, #32]
 8019d6e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019d72:	9308      	str	r3, [sp, #32]
			QROUND( 1,  6, 11, 12);
 8019d74:	9a04      	ldr	r2, [sp, #16]
 8019d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d78:	4413      	add	r3, r2
 8019d7a:	9304      	str	r3, [sp, #16]
 8019d7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019d7e:	9b04      	ldr	r3, [sp, #16]
 8019d80:	4053      	eors	r3, r2
 8019d82:	930f      	str	r3, [sp, #60]	; 0x3c
 8019d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019d86:	ea4f 4333 	mov.w	r3, r3, ror #16
 8019d8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8019d8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019d8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019d90:	4413      	add	r3, r2
 8019d92:	930e      	str	r3, [sp, #56]	; 0x38
 8019d94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d98:	4053      	eors	r3, r2
 8019d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8019d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d9e:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019da2:	9309      	str	r3, [sp, #36]	; 0x24
 8019da4:	9a04      	ldr	r2, [sp, #16]
 8019da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019da8:	4413      	add	r3, r2
 8019daa:	9304      	str	r3, [sp, #16]
 8019dac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019dae:	9b04      	ldr	r3, [sp, #16]
 8019db0:	4053      	eors	r3, r2
 8019db2:	930f      	str	r3, [sp, #60]	; 0x3c
 8019db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019db6:	ea4f 6333 	mov.w	r3, r3, ror #24
 8019dba:	930f      	str	r3, [sp, #60]	; 0x3c
 8019dbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019dc0:	4413      	add	r3, r2
 8019dc2:	930e      	str	r3, [sp, #56]	; 0x38
 8019dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019dc8:	4053      	eors	r3, r2
 8019dca:	9309      	str	r3, [sp, #36]	; 0x24
 8019dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019dce:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019dd2:	9309      	str	r3, [sp, #36]	; 0x24
			QROUND( 2,  7,  8, 13);
 8019dd4:	9a05      	ldr	r2, [sp, #20]
 8019dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019dd8:	4413      	add	r3, r2
 8019dda:	9305      	str	r3, [sp, #20]
 8019ddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019dde:	9b05      	ldr	r3, [sp, #20]
 8019de0:	4053      	eors	r3, r2
 8019de2:	9310      	str	r3, [sp, #64]	; 0x40
 8019de4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019de6:	ea4f 4333 	mov.w	r3, r3, ror #16
 8019dea:	9310      	str	r3, [sp, #64]	; 0x40
 8019dec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019dee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019df0:	4413      	add	r3, r2
 8019df2:	930b      	str	r3, [sp, #44]	; 0x2c
 8019df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019df8:	4053      	eors	r3, r2
 8019dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8019dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019dfe:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019e02:	930a      	str	r3, [sp, #40]	; 0x28
 8019e04:	9a05      	ldr	r2, [sp, #20]
 8019e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e08:	4413      	add	r3, r2
 8019e0a:	9305      	str	r3, [sp, #20]
 8019e0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019e0e:	9b05      	ldr	r3, [sp, #20]
 8019e10:	4053      	eors	r3, r2
 8019e12:	9310      	str	r3, [sp, #64]	; 0x40
 8019e14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e16:	ea4f 6333 	mov.w	r3, r3, ror #24
 8019e1a:	9310      	str	r3, [sp, #64]	; 0x40
 8019e1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019e1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e20:	4413      	add	r3, r2
 8019e22:	930b      	str	r3, [sp, #44]	; 0x2c
 8019e24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019e28:	4053      	eors	r3, r2
 8019e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8019e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e2e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019e32:	930a      	str	r3, [sp, #40]	; 0x28
			QROUND( 3,  4,  9, 14);
 8019e34:	9a06      	ldr	r2, [sp, #24]
 8019e36:	9b07      	ldr	r3, [sp, #28]
 8019e38:	4413      	add	r3, r2
 8019e3a:	9306      	str	r3, [sp, #24]
 8019e3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019e3e:	9b06      	ldr	r3, [sp, #24]
 8019e40:	4053      	eors	r3, r2
 8019e42:	9311      	str	r3, [sp, #68]	; 0x44
 8019e44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019e46:	ea4f 4333 	mov.w	r3, r3, ror #16
 8019e4a:	9311      	str	r3, [sp, #68]	; 0x44
 8019e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019e4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019e50:	4413      	add	r3, r2
 8019e52:	930c      	str	r3, [sp, #48]	; 0x30
 8019e54:	9a07      	ldr	r2, [sp, #28]
 8019e56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019e58:	4053      	eors	r3, r2
 8019e5a:	9307      	str	r3, [sp, #28]
 8019e5c:	9b07      	ldr	r3, [sp, #28]
 8019e5e:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019e62:	9307      	str	r3, [sp, #28]
 8019e64:	9a06      	ldr	r2, [sp, #24]
 8019e66:	9b07      	ldr	r3, [sp, #28]
 8019e68:	4413      	add	r3, r2
 8019e6a:	9306      	str	r3, [sp, #24]
 8019e6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019e6e:	9b06      	ldr	r3, [sp, #24]
 8019e70:	4053      	eors	r3, r2
 8019e72:	9311      	str	r3, [sp, #68]	; 0x44
 8019e74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019e76:	ea4f 6333 	mov.w	r3, r3, ror #24
 8019e7a:	9311      	str	r3, [sp, #68]	; 0x44
 8019e7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019e80:	4413      	add	r3, r2
 8019e82:	930c      	str	r3, [sp, #48]	; 0x30
 8019e84:	9a07      	ldr	r2, [sp, #28]
 8019e86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019e88:	4053      	eors	r3, r2
 8019e8a:	9307      	str	r3, [sp, #28]
 8019e8c:	9b07      	ldr	r3, [sp, #28]
 8019e8e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019e92:	9307      	str	r3, [sp, #28]
		for (i = 0; i < 10; i ++) {
 8019e94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019e96:	3301      	adds	r3, #1
 8019e98:	9313      	str	r3, [sp, #76]	; 0x4c
 8019e9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019e9c:	2b09      	cmp	r3, #9
 8019e9e:	f77f ae79 	ble.w	8019b94 <falcon_inner_prng_refill+0x64>

#undef QROUND

		}

		for (v = 0; v < 4; v ++) {
 8019ea2:	2300      	movs	r3, #0
 8019ea4:	9314      	str	r3, [sp, #80]	; 0x50
 8019ea6:	e013      	b.n	8019ed0 <falcon_inner_prng_refill+0x3a0>
			state[v] += CW[v];
 8019ea8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019eaa:	009b      	lsls	r3, r3, #2
 8019eac:	3360      	adds	r3, #96	; 0x60
 8019eae:	446b      	add	r3, sp
 8019eb0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8019eb4:	4940      	ldr	r1, [pc, #256]	; (8019fb8 <falcon_inner_prng_refill+0x488>)
 8019eb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019eb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8019ebc:	441a      	add	r2, r3
 8019ebe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ec0:	009b      	lsls	r3, r3, #2
 8019ec2:	3360      	adds	r3, #96	; 0x60
 8019ec4:	446b      	add	r3, sp
 8019ec6:	f843 2c54 	str.w	r2, [r3, #-84]
		for (v = 0; v < 4; v ++) {
 8019eca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ecc:	3301      	adds	r3, #1
 8019ece:	9314      	str	r3, [sp, #80]	; 0x50
 8019ed0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ed2:	2b03      	cmp	r3, #3
 8019ed4:	d9e8      	bls.n	8019ea8 <falcon_inner_prng_refill+0x378>
		}
		for (v = 4; v < 14; v ++) {
 8019ed6:	2304      	movs	r3, #4
 8019ed8:	9314      	str	r3, [sp, #80]	; 0x50
 8019eda:	e019      	b.n	8019f10 <falcon_inner_prng_refill+0x3e0>
			state[v] += ((uint32_t *)p->state.d)[v - 4];
 8019edc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ede:	009b      	lsls	r3, r3, #2
 8019ee0:	3360      	adds	r3, #96	; 0x60
 8019ee2:	446b      	add	r3, sp
 8019ee4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8019ee8:	9b01      	ldr	r3, [sp, #4]
 8019eea:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8019eee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ef0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019ef4:	3b04      	subs	r3, #4
 8019ef6:	009b      	lsls	r3, r3, #2
 8019ef8:	440b      	add	r3, r1
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	441a      	add	r2, r3
 8019efe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019f00:	009b      	lsls	r3, r3, #2
 8019f02:	3360      	adds	r3, #96	; 0x60
 8019f04:	446b      	add	r3, sp
 8019f06:	f843 2c54 	str.w	r2, [r3, #-84]
		for (v = 4; v < 14; v ++) {
 8019f0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019f0c:	3301      	adds	r3, #1
 8019f0e:	9314      	str	r3, [sp, #80]	; 0x50
 8019f10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019f12:	2b0d      	cmp	r3, #13
 8019f14:	d9e2      	bls.n	8019edc <falcon_inner_prng_refill+0x3ac>
		}
		state[14] += ((uint32_t *)p->state.d)[10]
 8019f16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019f18:	9b01      	ldr	r3, [sp, #4]
 8019f1a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019f1e:	3328      	adds	r3, #40	; 0x28
 8019f20:	6819      	ldr	r1, [r3, #0]
			^ (uint32_t)cc;
 8019f22:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019f24:	404b      	eors	r3, r1
		state[14] += ((uint32_t *)p->state.d)[10]
 8019f26:	4413      	add	r3, r2
 8019f28:	9311      	str	r3, [sp, #68]	; 0x44
		state[15] += ((uint32_t *)p->state.d)[11]
 8019f2a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019f2c:	9b01      	ldr	r3, [sp, #4]
 8019f2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019f32:	332c      	adds	r3, #44	; 0x2c
 8019f34:	681f      	ldr	r7, [r3, #0]
			^ (uint32_t)(cc >> 32);
 8019f36:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8019f3a:	f04f 0200 	mov.w	r2, #0
 8019f3e:	f04f 0300 	mov.w	r3, #0
 8019f42:	000a      	movs	r2, r1
 8019f44:	2300      	movs	r3, #0
 8019f46:	4613      	mov	r3, r2
 8019f48:	407b      	eors	r3, r7
		state[15] += ((uint32_t *)p->state.d)[11]
 8019f4a:	4433      	add	r3, r6
 8019f4c:	9312      	str	r3, [sp, #72]	; 0x48
		cc ++;
 8019f4e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8019f52:	1c54      	adds	r4, r2, #1
 8019f54:	f143 0500 	adc.w	r5, r3, #0
 8019f58:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58

		/*
		 * We mimic the interleaving that is used in the AVX2
		 * implementation.
		 */
		for (v = 0; v < 16; v ++) {
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	9314      	str	r3, [sp, #80]	; 0x50
 8019f60:	e010      	b.n	8019f84 <falcon_inner_prng_refill+0x454>
			((uint32_t *)p->buf.d)[u + (v << 3)] = state[v];
 8019f62:	9a01      	ldr	r2, [sp, #4]
 8019f64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019f66:	00d9      	lsls	r1, r3, #3
 8019f68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f6a:	440b      	add	r3, r1
 8019f6c:	009b      	lsls	r3, r3, #2
 8019f6e:	441a      	add	r2, r3
 8019f70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019f72:	009b      	lsls	r3, r3, #2
 8019f74:	3360      	adds	r3, #96	; 0x60
 8019f76:	446b      	add	r3, sp
 8019f78:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8019f7c:	6013      	str	r3, [r2, #0]
		for (v = 0; v < 16; v ++) {
 8019f7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019f80:	3301      	adds	r3, #1
 8019f82:	9314      	str	r3, [sp, #80]	; 0x50
 8019f84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019f86:	2b0f      	cmp	r3, #15
 8019f88:	d9eb      	bls.n	8019f62 <falcon_inner_prng_refill+0x432>
	for (u = 0; u < 8; u ++) {
 8019f8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f8c:	3301      	adds	r3, #1
 8019f8e:	9315      	str	r3, [sp, #84]	; 0x54
 8019f90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f92:	2b07      	cmp	r3, #7
 8019f94:	f67f adda 	bls.w	8019b4c <falcon_inner_prng_refill+0x1c>
		}
	}
	*(uint64_t *)(p->state.d + 48) = cc;
 8019f98:	9b01      	ldr	r3, [sp, #4]
 8019f9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019f9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019fa2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8019fa6:	e9c1 2300 	strd	r2, r3, [r1]


	p->ptr = 0;
 8019faa:	9b01      	ldr	r3, [sp, #4]
 8019fac:	2200      	movs	r2, #0
 8019fae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8019fb2:	bf00      	nop
 8019fb4:	b019      	add	sp, #100	; 0x64
 8019fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fb8:	080255bc 	.word	0x080255bc
 8019fbc:	00000000 	.word	0x00000000

08019fc0 <process_block>:

__attribute__((naked))
static void
process_block(uint64_t *A __attribute__((unused)))
{
	__asm__ (
 8019fc0:	e92d 5dfe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 8019fc4:	b0ba      	sub	sp, #232	; 0xe8
 8019fc6:	f110 0108 	adds.w	r1, r0, #8
 8019fca:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
 8019fce:	43d2      	mvns	r2, r2
 8019fd0:	43db      	mvns	r3, r3
 8019fd2:	43e4      	mvns	r4, r4
 8019fd4:	43ed      	mvns	r5, r5
 8019fd6:	c13c      	stmia	r1!, {r2, r3, r4, r5}
 8019fd8:	f110 0140 	adds.w	r1, r0, #64	; 0x40
 8019fdc:	e891 000c 	ldmia.w	r1, {r2, r3}
 8019fe0:	43d2      	mvns	r2, r2
 8019fe2:	43db      	mvns	r3, r3
 8019fe4:	c10c      	stmia	r1!, {r2, r3}
 8019fe6:	f110 0160 	adds.w	r1, r0, #96	; 0x60
 8019fea:	e891 000c 	ldmia.w	r1, {r2, r3}
 8019fee:	43d2      	mvns	r2, r2
 8019ff0:	43db      	mvns	r3, r3
 8019ff2:	c10c      	stmia	r1!, {r2, r3}
 8019ff4:	f110 0188 	adds.w	r1, r0, #136	; 0x88
 8019ff8:	e891 000c 	ldmia.w	r1, {r2, r3}
 8019ffc:	43d2      	mvns	r2, r2
 8019ffe:	43db      	mvns	r3, r3
 801a000:	c10c      	stmia	r1!, {r2, r3}
 801a002:	f110 01a0 	adds.w	r1, r0, #160	; 0xa0
 801a006:	e891 000c 	ldmia.w	r1, {r2, r3}
 801a00a:	43d2      	mvns	r2, r2
 801a00c:	43db      	mvns	r3, r3
 801a00e:	c10c      	stmia	r1!, {r2, r3}
 801a010:	4049      	eors	r1, r1
 801a012:	9100      	str	r1, [sp, #0]

0801a014 <.process_block_loop>:
 801a014:	e8b0 01fe 	ldmia.w	r0!, {r1, r2, r3, r4, r5, r6, r7, r8}
 801a018:	3008      	adds	r0, #8
 801a01a:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 801a01e:	ea91 010a 	eors.w	r1, r1, sl
 801a022:	ea92 020b 	eors.w	r2, r2, fp
 801a026:	ea93 030c 	eors.w	r3, r3, ip
 801a02a:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 801a02e:	ea94 040a 	eors.w	r4, r4, sl
 801a032:	ea95 050b 	eors.w	r5, r5, fp
 801a036:	ea96 060c 	eors.w	r6, r6, ip
 801a03a:	e8b0 0c00 	ldmia.w	r0!, {sl, fp}
 801a03e:	ea97 070a 	eors.w	r7, r7, sl
 801a042:	ea98 080b 	eors.w	r8, r8, fp
 801a046:	3008      	adds	r0, #8
 801a048:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 801a04c:	ea91 010a 	eors.w	r1, r1, sl
 801a050:	ea92 020b 	eors.w	r2, r2, fp
 801a054:	ea93 030c 	eors.w	r3, r3, ip
 801a058:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 801a05c:	ea94 040a 	eors.w	r4, r4, sl
 801a060:	ea95 050b 	eors.w	r5, r5, fp
 801a064:	ea96 060c 	eors.w	r6, r6, ip
 801a068:	e8b0 0c00 	ldmia.w	r0!, {sl, fp}
 801a06c:	ea97 070a 	eors.w	r7, r7, sl
 801a070:	ea98 080b 	eors.w	r8, r8, fp
 801a074:	3008      	adds	r0, #8
 801a076:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 801a07a:	ea91 010a 	eors.w	r1, r1, sl
 801a07e:	ea92 020b 	eors.w	r2, r2, fp
 801a082:	ea93 030c 	eors.w	r3, r3, ip
 801a086:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 801a08a:	ea94 040a 	eors.w	r4, r4, sl
 801a08e:	ea95 050b 	eors.w	r5, r5, fp
 801a092:	ea96 060c 	eors.w	r6, r6, ip
 801a096:	e8b0 0c00 	ldmia.w	r0!, {sl, fp}
 801a09a:	ea97 070a 	eors.w	r7, r7, sl
 801a09e:	ea98 080b 	eors.w	r8, r8, fp
 801a0a2:	3008      	adds	r0, #8
 801a0a4:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 801a0a8:	ea91 010a 	eors.w	r1, r1, sl
 801a0ac:	ea92 020b 	eors.w	r2, r2, fp
 801a0b0:	ea93 030c 	eors.w	r3, r3, ip
 801a0b4:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 801a0b8:	ea94 040a 	eors.w	r4, r4, sl
 801a0bc:	ea95 050b 	eors.w	r5, r5, fp
 801a0c0:	ea96 060c 	eors.w	r6, r6, ip
 801a0c4:	e8b0 0c00 	ldmia.w	r0!, {sl, fp}
 801a0c8:	ea97 070a 	eors.w	r7, r7, sl
 801a0cc:	ea98 080b 	eors.w	r8, r8, fp
 801a0d0:	e8b0 0c00 	ldmia.w	r0!, {sl, fp}
 801a0d4:	38c8      	subs	r0, #200	; 0xc8
 801a0d6:	f8d0 c020 	ldr.w	ip, [r0, #32]
 801a0da:	ea9a 0a0c 	eors.w	sl, sl, ip
 801a0de:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 801a0e2:	ea9b 0b0c 	eors.w	fp, fp, ip
 801a0e6:	f8d0 c048 	ldr.w	ip, [r0, #72]	; 0x48
 801a0ea:	ea9a 0a0c 	eors.w	sl, sl, ip
 801a0ee:	f8d0 c04c 	ldr.w	ip, [r0, #76]	; 0x4c
 801a0f2:	ea9b 0b0c 	eors.w	fp, fp, ip
 801a0f6:	f8d0 c070 	ldr.w	ip, [r0, #112]	; 0x70
 801a0fa:	ea9a 0a0c 	eors.w	sl, sl, ip
 801a0fe:	f8d0 c074 	ldr.w	ip, [r0, #116]	; 0x74
 801a102:	ea9b 0b0c 	eors.w	fp, fp, ip
 801a106:	f8d0 c098 	ldr.w	ip, [r0, #152]	; 0x98
 801a10a:	ea9a 0a0c 	eors.w	sl, sl, ip
 801a10e:	f8d0 c09c 	ldr.w	ip, [r0, #156]	; 0x9c
 801a112:	ea9b 0b0c 	eors.w	fp, fp, ip
 801a116:	f8cd b004 	str.w	fp, [sp, #4]
 801a11a:	46d4      	mov	ip, sl
 801a11c:	ea9a 0a43 	eors.w	sl, sl, r3, lsl #1
 801a120:	ea9a 7ad4 	eors.w	sl, sl, r4, lsr #31
 801a124:	ea9b 0b44 	eors.w	fp, fp, r4, lsl #1
 801a128:	ea9b 7bd3 	eors.w	fp, fp, r3, lsr #31
 801a12c:	ea93 0347 	eors.w	r3, r3, r7, lsl #1
 801a130:	ea93 73d8 	eors.w	r3, r3, r8, lsr #31
 801a134:	ea94 0448 	eors.w	r4, r4, r8, lsl #1
 801a138:	ea94 74d7 	eors.w	r4, r4, r7, lsr #31
 801a13c:	ea97 0741 	eors.w	r7, r7, r1, lsl #1
 801a140:	ea97 77d2 	eors.w	r7, r7, r2, lsr #31
 801a144:	ea98 0842 	eors.w	r8, r8, r2, lsl #1
 801a148:	ea98 78d1 	eors.w	r8, r8, r1, lsr #31
 801a14c:	ea91 0145 	eors.w	r1, r1, r5, lsl #1
 801a150:	ea91 71d6 	eors.w	r1, r1, r6, lsr #31
 801a154:	ea92 0246 	eors.w	r2, r2, r6, lsl #1
 801a158:	ea92 72d5 	eors.w	r2, r2, r5, lsr #31
 801a15c:	ea95 054c 	eors.w	r5, r5, ip, lsl #1
 801a160:	ea96 76dc 	eors.w	r6, r6, ip, lsr #31
 801a164:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a168:	ea95 75dc 	eors.w	r5, r5, ip, lsr #31
 801a16c:	ea96 064c 	eors.w	r6, r6, ip, lsl #1
 801a170:	f20d 0c04 	addw	ip, sp, #4
 801a174:	e88c 01f8 	stmia.w	ip, {r3, r4, r5, r6, r7, r8}
 801a178:	f20d 0c20 	addw	ip, sp, #32
 801a17c:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 801a180:	ea95 050a 	eors.w	r5, r5, sl
 801a184:	ea96 060b 	eors.w	r6, r6, fp
 801a188:	ea97 0301 	eors.w	r3, r7, r1
 801a18c:	ea98 0402 	eors.w	r4, r8, r2
 801a190:	ea4f 0743 	mov.w	r7, r3, lsl #1
 801a194:	ea47 77d4 	orr.w	r7, r7, r4, lsr #31
 801a198:	ea4f 0844 	mov.w	r8, r4, lsl #1
 801a19c:	ea48 78d3 	orr.w	r8, r8, r3, lsr #31
 801a1a0:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 801a1a4:	3018      	adds	r0, #24
 801a1a6:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 801a1aa:	ea95 030a 	eors.w	r3, r5, sl
 801a1ae:	ea96 040b 	eors.w	r4, r6, fp
 801a1b2:	ea4f 1504 	mov.w	r5, r4, lsl #4
 801a1b6:	ea45 7513 	orr.w	r5, r5, r3, lsr #28
 801a1ba:	ea4f 1603 	mov.w	r6, r3, lsl #4
 801a1be:	ea46 7614 	orr.w	r6, r6, r4, lsr #28
 801a1c2:	ea97 0301 	eors.w	r3, r7, r1
 801a1c6:	ea98 0402 	eors.w	r4, r8, r2
 801a1ca:	ea4f 3704 	mov.w	r7, r4, lsl #12
 801a1ce:	ea47 5713 	orr.w	r7, r7, r3, lsr #20
 801a1d2:	ea4f 3803 	mov.w	r8, r3, lsl #12
 801a1d6:	ea48 5814 	orr.w	r8, r8, r4, lsr #20
 801a1da:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 801a1de:	3018      	adds	r0, #24
 801a1e0:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 801a1e4:	ea95 030a 	eors.w	r3, r5, sl
 801a1e8:	ea96 040b 	eors.w	r4, r6, fp
 801a1ec:	ea4f 05c3 	mov.w	r5, r3, lsl #3
 801a1f0:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 801a1f4:	ea4f 06c4 	mov.w	r6, r4, lsl #3
 801a1f8:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 801a1fc:	ea97 0301 	eors.w	r3, r7, r1
 801a200:	ea98 0402 	eors.w	r4, r8, r2
 801a204:	ea4f 2783 	mov.w	r7, r3, lsl #10
 801a208:	ea47 5794 	orr.w	r7, r7, r4, lsr #22
 801a20c:	ea4f 2884 	mov.w	r8, r4, lsl #10
 801a210:	ea48 5893 	orr.w	r8, r8, r3, lsr #22
 801a214:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 801a218:	3018      	adds	r0, #24
 801a21a:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 801a21e:	ea95 030a 	eors.w	r3, r5, sl
 801a222:	ea96 040b 	eors.w	r4, r6, fp
 801a226:	ea4f 2544 	mov.w	r5, r4, lsl #9
 801a22a:	ea45 55d3 	orr.w	r5, r5, r3, lsr #23
 801a22e:	ea4f 2643 	mov.w	r6, r3, lsl #9
 801a232:	ea46 56d4 	orr.w	r6, r6, r4, lsr #23
 801a236:	ea97 0301 	eors.w	r3, r7, r1
 801a23a:	ea98 0402 	eors.w	r4, r8, r2
 801a23e:	ea4f 3744 	mov.w	r7, r4, lsl #13
 801a242:	ea47 47d3 	orr.w	r7, r7, r3, lsr #19
 801a246:	ea4f 3843 	mov.w	r8, r3, lsl #13
 801a24a:	ea48 48d4 	orr.w	r8, r8, r4, lsr #19
 801a24e:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 801a252:	3018      	adds	r0, #24
 801a254:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 801a258:	ea95 030a 	eors.w	r3, r5, sl
 801a25c:	ea96 040b 	eors.w	r4, r6, fp
 801a260:	ea4f 4583 	mov.w	r5, r3, lsl #18
 801a264:	ea45 3594 	orr.w	r5, r5, r4, lsr #14
 801a268:	ea4f 4684 	mov.w	r6, r4, lsl #18
 801a26c:	ea46 3693 	orr.w	r6, r6, r3, lsr #14
 801a270:	ea97 0301 	eors.w	r3, r7, r1
 801a274:	ea98 0402 	eors.w	r4, r8, r2
 801a278:	ea4f 0783 	mov.w	r7, r3, lsl #2
 801a27c:	ea47 7794 	orr.w	r7, r7, r4, lsr #30
 801a280:	ea4f 0884 	mov.w	r8, r4, lsl #2
 801a284:	ea48 7893 	orr.w	r8, r8, r3, lsr #30
 801a288:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 801a28c:	f20d 0504 	addw	r5, sp, #4
 801a290:	cd1e      	ldmia	r5!, {r1, r2, r3, r4}
 801a292:	38a0      	subs	r0, #160	; 0xa0
 801a294:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 801a298:	ea95 0a01 	eors.w	sl, r5, r1
 801a29c:	ea96 0b02 	eors.w	fp, r6, r2
 801a2a0:	ea4f 758b 	mov.w	r5, fp, lsl #30
 801a2a4:	ea45 059a 	orr.w	r5, r5, sl, lsr #2
 801a2a8:	ea4f 768a 	mov.w	r6, sl, lsl #30
 801a2ac:	ea46 069b 	orr.w	r6, r6, fp, lsr #2
 801a2b0:	ea97 0a03 	eors.w	sl, r7, r3
 801a2b4:	ea98 0b04 	eors.w	fp, r8, r4
 801a2b8:	ea4f 770a 	mov.w	r7, sl, lsl #28
 801a2bc:	ea47 171b 	orr.w	r7, r7, fp, lsr #4
 801a2c0:	ea4f 780b 	mov.w	r8, fp, lsl #28
 801a2c4:	ea48 181a 	orr.w	r8, r8, sl, lsr #4
 801a2c8:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 801a2cc:	3018      	adds	r0, #24
 801a2ce:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 801a2d2:	ea95 0a01 	eors.w	sl, r5, r1
 801a2d6:	ea96 0b02 	eors.w	fp, r6, r2
 801a2da:	ea4f 158a 	mov.w	r5, sl, lsl #6
 801a2de:	ea45 659b 	orr.w	r5, r5, fp, lsr #26
 801a2e2:	ea4f 168b 	mov.w	r6, fp, lsl #6
 801a2e6:	ea46 669a 	orr.w	r6, r6, sl, lsr #26
 801a2ea:	ea97 0a03 	eors.w	sl, r7, r3
 801a2ee:	ea98 0b04 	eors.w	fp, r8, r4
 801a2f2:	ea4f 57cb 	mov.w	r7, fp, lsl #23
 801a2f6:	ea47 275a 	orr.w	r7, r7, sl, lsr #9
 801a2fa:	ea4f 58ca 	mov.w	r8, sl, lsl #23
 801a2fe:	ea48 285b 	orr.w	r8, r8, fp, lsr #9
 801a302:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 801a306:	3018      	adds	r0, #24
 801a308:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 801a30c:	ea95 0a01 	eors.w	sl, r5, r1
 801a310:	ea96 0b02 	eors.w	fp, r6, r2
 801a314:	ea4f 25cb 	mov.w	r5, fp, lsl #11
 801a318:	ea45 555a 	orr.w	r5, r5, sl, lsr #21
 801a31c:	ea4f 26ca 	mov.w	r6, sl, lsl #11
 801a320:	ea46 565b 	orr.w	r6, r6, fp, lsr #21
 801a324:	ea97 0a03 	eors.w	sl, r7, r3
 801a328:	ea98 0b04 	eors.w	fp, r8, r4
 801a32c:	ea4f 674a 	mov.w	r7, sl, lsl #25
 801a330:	ea47 17db 	orr.w	r7, r7, fp, lsr #7
 801a334:	ea4f 684b 	mov.w	r8, fp, lsl #25
 801a338:	ea48 18da 	orr.w	r8, r8, sl, lsr #7
 801a33c:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 801a340:	3018      	adds	r0, #24
 801a342:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 801a346:	ea95 0a01 	eors.w	sl, r5, r1
 801a34a:	ea96 0b02 	eors.w	fp, r6, r2
 801a34e:	ea4f 35ca 	mov.w	r5, sl, lsl #15
 801a352:	ea45 455b 	orr.w	r5, r5, fp, lsr #17
 801a356:	ea4f 36cb 	mov.w	r6, fp, lsl #15
 801a35a:	ea46 465a 	orr.w	r6, r6, sl, lsr #17
 801a35e:	ea97 0a03 	eors.w	sl, r7, r3
 801a362:	ea98 0b04 	eors.w	fp, r8, r4
 801a366:	ea4f 574a 	mov.w	r7, sl, lsl #21
 801a36a:	ea47 27db 	orr.w	r7, r7, fp, lsr #11
 801a36e:	ea4f 584b 	mov.w	r8, fp, lsl #21
 801a372:	ea48 28da 	orr.w	r8, r8, sl, lsr #11
 801a376:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 801a37a:	3018      	adds	r0, #24
 801a37c:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 801a380:	ea95 0a01 	eors.w	sl, r5, r1
 801a384:	ea96 0b02 	eors.w	fp, r6, r2
 801a388:	ea4f 754b 	mov.w	r5, fp, lsl #29
 801a38c:	ea45 05da 	orr.w	r5, r5, sl, lsr #3
 801a390:	ea4f 764a 	mov.w	r6, sl, lsl #29
 801a394:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801a398:	ea97 0a03 	eors.w	sl, r7, r3
 801a39c:	ea98 0b04 	eors.w	fp, r8, r4
 801a3a0:	ea4f 670b 	mov.w	r7, fp, lsl #24
 801a3a4:	ea47 271a 	orr.w	r7, r7, sl, lsr #8
 801a3a8:	ea4f 680a 	mov.w	r8, sl, lsl #24
 801a3ac:	ea48 281b 	orr.w	r8, r8, fp, lsr #8
 801a3b0:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 801a3b4:	9905      	ldr	r1, [sp, #20]
 801a3b6:	9a06      	ldr	r2, [sp, #24]
 801a3b8:	38a0      	subs	r0, #160	; 0xa0
 801a3ba:	c860      	ldmia	r0!, {r5, r6}
 801a3bc:	ea95 0301 	eors.w	r3, r5, r1
 801a3c0:	ea96 0402 	eors.w	r4, r6, r2
 801a3c4:	ea4f 65c3 	mov.w	r5, r3, lsl #27
 801a3c8:	ea45 1554 	orr.w	r5, r5, r4, lsr #5
 801a3cc:	ea4f 66c4 	mov.w	r6, r4, lsl #27
 801a3d0:	ea46 1653 	orr.w	r6, r6, r3, lsr #5
 801a3d4:	e8ac 0060 	stmia.w	ip!, {r5, r6}
 801a3d8:	3020      	adds	r0, #32
 801a3da:	c860      	ldmia	r0!, {r5, r6}
 801a3dc:	ea95 0301 	eors.w	r3, r5, r1
 801a3e0:	ea96 0402 	eors.w	r4, r6, r2
 801a3e4:	ea4f 5503 	mov.w	r5, r3, lsl #20
 801a3e8:	ea45 3514 	orr.w	r5, r5, r4, lsr #12
 801a3ec:	ea4f 5604 	mov.w	r6, r4, lsl #20
 801a3f0:	ea46 3613 	orr.w	r6, r6, r3, lsr #12
 801a3f4:	e8ac 0060 	stmia.w	ip!, {r5, r6}
 801a3f8:	3020      	adds	r0, #32
 801a3fa:	c860      	ldmia	r0!, {r5, r6}
 801a3fc:	ea95 0301 	eors.w	r3, r5, r1
 801a400:	ea96 0402 	eors.w	r4, r6, r2
 801a404:	ea4f 15c4 	mov.w	r5, r4, lsl #7
 801a408:	ea45 6553 	orr.w	r5, r5, r3, lsr #25
 801a40c:	ea4f 16c3 	mov.w	r6, r3, lsl #7
 801a410:	ea46 6654 	orr.w	r6, r6, r4, lsr #25
 801a414:	e8ac 0060 	stmia.w	ip!, {r5, r6}
 801a418:	3020      	adds	r0, #32
 801a41a:	c860      	ldmia	r0!, {r5, r6}
 801a41c:	ea95 0301 	eors.w	r3, r5, r1
 801a420:	ea96 0402 	eors.w	r4, r6, r2
 801a424:	ea4f 2503 	mov.w	r5, r3, lsl #8
 801a428:	ea45 6514 	orr.w	r5, r5, r4, lsr #24
 801a42c:	ea4f 2604 	mov.w	r6, r4, lsl #8
 801a430:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 801a434:	e8ac 0060 	stmia.w	ip!, {r5, r6}
 801a438:	3020      	adds	r0, #32
 801a43a:	c860      	ldmia	r0!, {r5, r6}
 801a43c:	ea95 0301 	eors.w	r3, r5, r1
 801a440:	ea96 0402 	eors.w	r4, r6, r2
 801a444:	ea4f 3583 	mov.w	r5, r3, lsl #14
 801a448:	ea45 4594 	orr.w	r5, r5, r4, lsr #18
 801a44c:	ea4f 3684 	mov.w	r6, r4, lsl #14
 801a450:	ea46 4693 	orr.w	r6, r6, r3, lsr #18
 801a454:	e8ac 0060 	stmia.w	ip!, {r5, r6}
 801a458:	38c8      	subs	r0, #200	; 0xc8
 801a45a:	9908      	ldr	r1, [sp, #32]
 801a45c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a45e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a460:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a462:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801a464:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801a466:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 801a468:	f8dd 80ac 	ldr.w	r8, [sp, #172]	; 0xac
 801a46c:	f8dd a0e0 	ldr.w	sl, [sp, #224]	; 0xe0
 801a470:	f8dd b0e4 	ldr.w	fp, [sp, #228]	; 0xe4
 801a474:	ea53 0c05 	orrs.w	ip, r3, r5
 801a478:	ea9c 0c01 	eors.w	ip, ip, r1
 801a47c:	f8c0 c000 	str.w	ip, [r0]
 801a480:	ea54 0c06 	orrs.w	ip, r4, r6
 801a484:	ea9c 0c02 	eors.w	ip, ip, r2
 801a488:	f8c0 c004 	str.w	ip, [r0, #4]
 801a48c:	ea77 0c05 	orns	ip, r7, r5
 801a490:	ea9c 0c03 	eors.w	ip, ip, r3
 801a494:	f8c0 c008 	str.w	ip, [r0, #8]
 801a498:	ea78 0c06 	orns	ip, r8, r6
 801a49c:	ea9c 0c04 	eors.w	ip, ip, r4
 801a4a0:	f8c0 c00c 	str.w	ip, [r0, #12]
 801a4a4:	ea17 0c0a 	ands.w	ip, r7, sl
 801a4a8:	ea9c 0c05 	eors.w	ip, ip, r5
 801a4ac:	f8c0 c010 	str.w	ip, [r0, #16]
 801a4b0:	ea18 0c0b 	ands.w	ip, r8, fp
 801a4b4:	ea9c 0c06 	eors.w	ip, ip, r6
 801a4b8:	f8c0 c014 	str.w	ip, [r0, #20]
 801a4bc:	ea51 0c0a 	orrs.w	ip, r1, sl
 801a4c0:	ea9c 0c07 	eors.w	ip, ip, r7
 801a4c4:	f8c0 c018 	str.w	ip, [r0, #24]
 801a4c8:	ea52 0c0b 	orrs.w	ip, r2, fp
 801a4cc:	ea9c 0c08 	eors.w	ip, ip, r8
 801a4d0:	f8c0 c01c 	str.w	ip, [r0, #28]
 801a4d4:	ea11 0c03 	ands.w	ip, r1, r3
 801a4d8:	ea9c 0c0a 	eors.w	ip, ip, sl
 801a4dc:	f8c0 c020 	str.w	ip, [r0, #32]
 801a4e0:	ea12 0c04 	ands.w	ip, r2, r4
 801a4e4:	ea9c 0c0b 	eors.w	ip, ip, fp
 801a4e8:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 801a4ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a4ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a4f0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801a4f2:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 801a4f4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801a4f6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a4f8:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801a4fa:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a4fe:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
 801a502:	f8dd b0b4 	ldr.w	fp, [sp, #180]	; 0xb4
 801a506:	ea53 0c05 	orrs.w	ip, r3, r5
 801a50a:	ea9c 0c01 	eors.w	ip, ip, r1
 801a50e:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
 801a512:	ea54 0c06 	orrs.w	ip, r4, r6
 801a516:	ea9c 0c02 	eors.w	ip, ip, r2
 801a51a:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
 801a51e:	ea17 0c05 	ands.w	ip, r7, r5
 801a522:	ea9c 0c03 	eors.w	ip, ip, r3
 801a526:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
 801a52a:	ea18 0c06 	ands.w	ip, r8, r6
 801a52e:	ea9c 0c04 	eors.w	ip, ip, r4
 801a532:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
 801a536:	ea77 0c0a 	orns	ip, r7, sl
 801a53a:	ea9c 0c05 	eors.w	ip, ip, r5
 801a53e:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
 801a542:	ea78 0c0b 	orns	ip, r8, fp
 801a546:	ea9c 0c06 	eors.w	ip, ip, r6
 801a54a:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
 801a54e:	ea51 0c0a 	orrs.w	ip, r1, sl
 801a552:	ea9c 0c07 	eors.w	ip, ip, r7
 801a556:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
 801a55a:	ea52 0c0b 	orrs.w	ip, r2, fp
 801a55e:	ea9c 0c08 	eors.w	ip, ip, r8
 801a562:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
 801a566:	ea11 0c03 	ands.w	ip, r1, r3
 801a56a:	ea9c 0c0a 	eors.w	ip, ip, sl
 801a56e:	f8c0 c048 	str.w	ip, [r0, #72]	; 0x48
 801a572:	ea12 0c04 	ands.w	ip, r2, r4
 801a576:	ea9c 0c0b 	eors.w	ip, ip, fp
 801a57a:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
 801a57e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a582:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a584:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801a586:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801a588:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801a58a:	9f36      	ldr	r7, [sp, #216]	; 0xd8
 801a58c:	f8dd 80dc 	ldr.w	r8, [sp, #220]	; 0xdc
 801a590:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801a594:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 801a598:	ea53 0c05 	orrs.w	ip, r3, r5
 801a59c:	ea9c 0c01 	eors.w	ip, ip, r1
 801a5a0:	f8c0 c050 	str.w	ip, [r0, #80]	; 0x50
 801a5a4:	ea54 0c06 	orrs.w	ip, r4, r6
 801a5a8:	ea9c 0c02 	eors.w	ip, ip, r2
 801a5ac:	f8c0 c054 	str.w	ip, [r0, #84]	; 0x54
 801a5b0:	ea17 0c05 	ands.w	ip, r7, r5
 801a5b4:	ea9c 0c03 	eors.w	ip, ip, r3
 801a5b8:	f8c0 c058 	str.w	ip, [r0, #88]	; 0x58
 801a5bc:	ea18 0c06 	ands.w	ip, r8, r6
 801a5c0:	ea9c 0c04 	eors.w	ip, ip, r4
 801a5c4:	f8c0 c05c 	str.w	ip, [r0, #92]	; 0x5c
 801a5c8:	ea3a 0c07 	bics.w	ip, sl, r7
 801a5cc:	ea9c 0c05 	eors.w	ip, ip, r5
 801a5d0:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
 801a5d4:	ea3b 0c08 	bics.w	ip, fp, r8
 801a5d8:	ea9c 0c06 	eors.w	ip, ip, r6
 801a5dc:	f8c0 c064 	str.w	ip, [r0, #100]	; 0x64
 801a5e0:	43ff      	mvns	r7, r7
 801a5e2:	ea7f 0808 	mvns.w	r8, r8
 801a5e6:	ea51 0c0a 	orrs.w	ip, r1, sl
 801a5ea:	ea9c 0c07 	eors.w	ip, ip, r7
 801a5ee:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
 801a5f2:	ea52 0c0b 	orrs.w	ip, r2, fp
 801a5f6:	ea9c 0c08 	eors.w	ip, ip, r8
 801a5fa:	f8c0 c06c 	str.w	ip, [r0, #108]	; 0x6c
 801a5fe:	ea11 0c03 	ands.w	ip, r1, r3
 801a602:	ea9c 0c0a 	eors.w	ip, ip, sl
 801a606:	f8c0 c070 	str.w	ip, [r0, #112]	; 0x70
 801a60a:	ea12 0c04 	ands.w	ip, r2, r4
 801a60e:	ea9c 0c0b 	eors.w	ip, ip, fp
 801a612:	f8c0 c074 	str.w	ip, [r0, #116]	; 0x74
 801a616:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801a618:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801a61a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a61c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a61e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a620:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a622:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 801a624:	f8dd 80a4 	ldr.w	r8, [sp, #164]	; 0xa4
 801a628:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 801a62c:	f8dd b0bc 	ldr.w	fp, [sp, #188]	; 0xbc
 801a630:	ea13 0c05 	ands.w	ip, r3, r5
 801a634:	ea9c 0c01 	eors.w	ip, ip, r1
 801a638:	f8c0 c078 	str.w	ip, [r0, #120]	; 0x78
 801a63c:	ea14 0c06 	ands.w	ip, r4, r6
 801a640:	ea9c 0c02 	eors.w	ip, ip, r2
 801a644:	f8c0 c07c 	str.w	ip, [r0, #124]	; 0x7c
 801a648:	ea57 0c05 	orrs.w	ip, r7, r5
 801a64c:	ea9c 0c03 	eors.w	ip, ip, r3
 801a650:	f8c0 c080 	str.w	ip, [r0, #128]	; 0x80
 801a654:	ea58 0c06 	orrs.w	ip, r8, r6
 801a658:	ea9c 0c04 	eors.w	ip, ip, r4
 801a65c:	f8c0 c084 	str.w	ip, [r0, #132]	; 0x84
 801a660:	ea7a 0c07 	orns	ip, sl, r7
 801a664:	ea9c 0c05 	eors.w	ip, ip, r5
 801a668:	f8c0 c088 	str.w	ip, [r0, #136]	; 0x88
 801a66c:	ea7b 0c08 	orns	ip, fp, r8
 801a670:	ea9c 0c06 	eors.w	ip, ip, r6
 801a674:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
 801a678:	43ff      	mvns	r7, r7
 801a67a:	ea7f 0808 	mvns.w	r8, r8
 801a67e:	ea11 0c0a 	ands.w	ip, r1, sl
 801a682:	ea9c 0c07 	eors.w	ip, ip, r7
 801a686:	f8c0 c090 	str.w	ip, [r0, #144]	; 0x90
 801a68a:	ea12 0c0b 	ands.w	ip, r2, fp
 801a68e:	ea9c 0c08 	eors.w	ip, ip, r8
 801a692:	f8c0 c094 	str.w	ip, [r0, #148]	; 0x94
 801a696:	ea51 0c03 	orrs.w	ip, r1, r3
 801a69a:	ea9c 0c0a 	eors.w	ip, ip, sl
 801a69e:	f8c0 c098 	str.w	ip, [r0, #152]	; 0x98
 801a6a2:	ea52 0c04 	orrs.w	ip, r2, r4
 801a6a6:	ea9c 0c0b 	eors.w	ip, ip, fp
 801a6aa:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
 801a6ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a6b0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a6b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a6b4:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 801a6b6:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 801a6b8:	9e35      	ldr	r6, [sp, #212]	; 0xd4
 801a6ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801a6bc:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 801a6c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801a6c4:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 801a6c8:	ea35 0c03 	bics.w	ip, r5, r3
 801a6cc:	ea9c 0c01 	eors.w	ip, ip, r1
 801a6d0:	f8c0 c0a0 	str.w	ip, [r0, #160]	; 0xa0
 801a6d4:	ea36 0c04 	bics.w	ip, r6, r4
 801a6d8:	ea9c 0c02 	eors.w	ip, ip, r2
 801a6dc:	f8c0 c0a4 	str.w	ip, [r0, #164]	; 0xa4
 801a6e0:	ea11 0c03 	ands.w	ip, r1, r3
 801a6e4:	ea9c 0c0a 	eors.w	ip, ip, sl
 801a6e8:	f8c0 c0c0 	str.w	ip, [r0, #192]	; 0xc0
 801a6ec:	ea12 0c04 	ands.w	ip, r2, r4
 801a6f0:	ea9c 0c0b 	eors.w	ip, ip, fp
 801a6f4:	f8c0 c0c4 	str.w	ip, [r0, #196]	; 0xc4
 801a6f8:	43db      	mvns	r3, r3
 801a6fa:	43e4      	mvns	r4, r4
 801a6fc:	ea57 0c05 	orrs.w	ip, r7, r5
 801a700:	ea9c 0c03 	eors.w	ip, ip, r3
 801a704:	f8c0 c0a8 	str.w	ip, [r0, #168]	; 0xa8
 801a708:	ea58 0c06 	orrs.w	ip, r8, r6
 801a70c:	ea9c 0c04 	eors.w	ip, ip, r4
 801a710:	f8c0 c0ac 	str.w	ip, [r0, #172]	; 0xac
 801a714:	ea17 0c0a 	ands.w	ip, r7, sl
 801a718:	ea9c 0c05 	eors.w	ip, ip, r5
 801a71c:	f8c0 c0b0 	str.w	ip, [r0, #176]	; 0xb0
 801a720:	ea18 0c0b 	ands.w	ip, r8, fp
 801a724:	ea9c 0c06 	eors.w	ip, ip, r6
 801a728:	f8c0 c0b4 	str.w	ip, [r0, #180]	; 0xb4
 801a72c:	ea51 0c0a 	orrs.w	ip, r1, sl
 801a730:	ea9c 0c07 	eors.w	ip, ip, r7
 801a734:	f8c0 c0b8 	str.w	ip, [r0, #184]	; 0xb8
 801a738:	ea52 0c0b 	orrs.w	ip, r2, fp
 801a73c:	ea9c 0c08 	eors.w	ip, ip, r8
 801a740:	f8c0 c0bc 	str.w	ip, [r0, #188]	; 0xbc
 801a744:	9900      	ldr	r1, [sp, #0]
 801a746:	a21b      	add	r2, pc, #108	; (adr r2, 801a7b4 <.process_block_RC>)
 801a748:	1852      	adds	r2, r2, r1
 801a74a:	e892 0018 	ldmia.w	r2, {r3, r4}
 801a74e:	e890 0060 	ldmia.w	r0, {r5, r6}
 801a752:	405d      	eors	r5, r3
 801a754:	4066      	eors	r6, r4
 801a756:	e880 0060 	stmia.w	r0, {r5, r6}
 801a75a:	3108      	adds	r1, #8
 801a75c:	9100      	str	r1, [sp, #0]
 801a75e:	29c0      	cmp	r1, #192	; 0xc0
 801a760:	f4ff ac58 	bcc.w	801a014 <.process_block_loop>
 801a764:	f110 0108 	adds.w	r1, r0, #8
 801a768:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
 801a76c:	43d2      	mvns	r2, r2
 801a76e:	43db      	mvns	r3, r3
 801a770:	43e4      	mvns	r4, r4
 801a772:	43ed      	mvns	r5, r5
 801a774:	c13c      	stmia	r1!, {r2, r3, r4, r5}
 801a776:	f110 0140 	adds.w	r1, r0, #64	; 0x40
 801a77a:	e891 000c 	ldmia.w	r1, {r2, r3}
 801a77e:	43d2      	mvns	r2, r2
 801a780:	43db      	mvns	r3, r3
 801a782:	c10c      	stmia	r1!, {r2, r3}
 801a784:	f110 0160 	adds.w	r1, r0, #96	; 0x60
 801a788:	e891 000c 	ldmia.w	r1, {r2, r3}
 801a78c:	43d2      	mvns	r2, r2
 801a78e:	43db      	mvns	r3, r3
 801a790:	c10c      	stmia	r1!, {r2, r3}
 801a792:	f110 0188 	adds.w	r1, r0, #136	; 0x88
 801a796:	e891 000c 	ldmia.w	r1, {r2, r3}
 801a79a:	43d2      	mvns	r2, r2
 801a79c:	43db      	mvns	r3, r3
 801a79e:	c10c      	stmia	r1!, {r2, r3}
 801a7a0:	f110 01a0 	adds.w	r1, r0, #160	; 0xa0
 801a7a4:	e891 000c 	ldmia.w	r1, {r2, r3}
 801a7a8:	43d2      	mvns	r2, r2
 801a7aa:	43db      	mvns	r3, r3
 801a7ac:	c10c      	stmia	r1!, {r2, r3}
 801a7ae:	b03a      	add	sp, #232	; 0xe8
 801a7b0:	e8bd 9dfe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, pc}

0801a7b4 <.process_block_RC>:
 801a7b4:	00000001 	.word	0x00000001
 801a7b8:	00000000 	.word	0x00000000
 801a7bc:	00008082 	.word	0x00008082
 801a7c0:	00000000 	.word	0x00000000
 801a7c4:	0000808a 	.word	0x0000808a
 801a7c8:	80000000 	.word	0x80000000
 801a7cc:	80008000 	.word	0x80008000
 801a7d0:	80000000 	.word	0x80000000
 801a7d4:	0000808b 	.word	0x0000808b
 801a7d8:	00000000 	.word	0x00000000
 801a7dc:	80000001 	.word	0x80000001
 801a7e0:	00000000 	.word	0x00000000
 801a7e4:	80008081 	.word	0x80008081
 801a7e8:	80000000 	.word	0x80000000
 801a7ec:	00008009 	.word	0x00008009
 801a7f0:	80000000 	.word	0x80000000
 801a7f4:	0000008a 	.word	0x0000008a
 801a7f8:	00000000 	.word	0x00000000
 801a7fc:	00000088 	.word	0x00000088
 801a800:	00000000 	.word	0x00000000
 801a804:	80008009 	.word	0x80008009
 801a808:	00000000 	.word	0x00000000
 801a80c:	8000000a 	.word	0x8000000a
 801a810:	00000000 	.word	0x00000000
 801a814:	8000808b 	.word	0x8000808b
 801a818:	00000000 	.word	0x00000000
 801a81c:	0000008b 	.word	0x0000008b
 801a820:	80000000 	.word	0x80000000
 801a824:	00008089 	.word	0x00008089
 801a828:	80000000 	.word	0x80000000
 801a82c:	00008003 	.word	0x00008003
 801a830:	80000000 	.word	0x80000000
 801a834:	00008002 	.word	0x00008002
 801a838:	80000000 	.word	0x80000000
 801a83c:	00000080 	.word	0x00000080
 801a840:	80000000 	.word	0x80000000
 801a844:	0000800a 	.word	0x0000800a
 801a848:	00000000 	.word	0x00000000
 801a84c:	8000000a 	.word	0x8000000a
 801a850:	80000000 	.word	0x80000000
 801a854:	80008081 	.word	0x80008081
 801a858:	80000000 	.word	0x80000000
 801a85c:	00008080 	.word	0x00008080
 801a860:	80000000 	.word	0x80000000
 801a864:	80000001 	.word	0x80000001
 801a868:	00000000 	.word	0x00000000
 801a86c:	80008008 	.word	0x80008008
 801a870:	80000000 	.word	0x80000000
#undef INVERT_WORDS
#undef KHI_LOAD
#undef KHI_STEP

	);
}
 801a874:	bf00      	nop
 801a876:	bf00      	nop
	...

0801a880 <falcon_inner_i_shake256_init>:


/* see inner.h */
void
Zf(i_shake256_init)(inner_shake256_context *sc)
{
 801a880:	b500      	push	{lr}
 801a882:	b083      	sub	sp, #12
 801a884:	9001      	str	r0, [sp, #4]
	sc->dptr = 0;
 801a886:	9901      	ldr	r1, [sp, #4]
 801a888:	f04f 0200 	mov.w	r2, #0
 801a88c:	f04f 0300 	mov.w	r3, #0
 801a890:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8

	/*
	 * Representation of an all-ones uint64_t is the same regardless
	 * of local endianness.
	 */
	memset(sc->st.A, 0, sizeof sc->st.A);
 801a894:	9b01      	ldr	r3, [sp, #4]
 801a896:	22c8      	movs	r2, #200	; 0xc8
 801a898:	2100      	movs	r1, #0
 801a89a:	4618      	mov	r0, r3
 801a89c:	f001 fe80 	bl	801c5a0 <memset>
}
 801a8a0:	bf00      	nop
 801a8a2:	b003      	add	sp, #12
 801a8a4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801a8b0 <falcon_inner_i_shake256_inject>:

/* see inner.h */
void
Zf(i_shake256_inject)(inner_shake256_context *sc, const uint8_t *in, size_t len)
{
 801a8b0:	b530      	push	{r4, r5, lr}
 801a8b2:	b089      	sub	sp, #36	; 0x24
 801a8b4:	9003      	str	r0, [sp, #12]
 801a8b6:	9102      	str	r1, [sp, #8]
 801a8b8:	9201      	str	r2, [sp, #4]
	size_t dptr;

	dptr = (size_t)sc->dptr;
 801a8ba:	9b03      	ldr	r3, [sp, #12]
 801a8bc:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 801a8c0:	4613      	mov	r3, r2
 801a8c2:	9307      	str	r3, [sp, #28]
	while (len > 0) {
 801a8c4:	e038      	b.n	801a938 <falcon_inner_i_shake256_inject+0x88>
		size_t clen, u;

		clen = 136 - dptr;
 801a8c6:	9b07      	ldr	r3, [sp, #28]
 801a8c8:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 801a8cc:	9306      	str	r3, [sp, #24]
		if (clen > len) {
 801a8ce:	9a06      	ldr	r2, [sp, #24]
 801a8d0:	9b01      	ldr	r3, [sp, #4]
 801a8d2:	429a      	cmp	r2, r3
 801a8d4:	d901      	bls.n	801a8da <falcon_inner_i_shake256_inject+0x2a>
			clen = len;
 801a8d6:	9b01      	ldr	r3, [sp, #4]
 801a8d8:	9306      	str	r3, [sp, #24]
		}
		for (u = 0; u < clen; u ++) {
 801a8da:	2300      	movs	r3, #0
 801a8dc:	9305      	str	r3, [sp, #20]
 801a8de:	e012      	b.n	801a906 <falcon_inner_i_shake256_inject+0x56>
			sc->st.dbuf[dptr + u] ^= in[u];
 801a8e0:	9a07      	ldr	r2, [sp, #28]
 801a8e2:	9b05      	ldr	r3, [sp, #20]
 801a8e4:	4413      	add	r3, r2
 801a8e6:	9a03      	ldr	r2, [sp, #12]
 801a8e8:	5cd1      	ldrb	r1, [r2, r3]
 801a8ea:	9a02      	ldr	r2, [sp, #8]
 801a8ec:	9b05      	ldr	r3, [sp, #20]
 801a8ee:	4413      	add	r3, r2
 801a8f0:	781a      	ldrb	r2, [r3, #0]
 801a8f2:	9807      	ldr	r0, [sp, #28]
 801a8f4:	9b05      	ldr	r3, [sp, #20]
 801a8f6:	4403      	add	r3, r0
 801a8f8:	404a      	eors	r2, r1
 801a8fa:	b2d1      	uxtb	r1, r2
 801a8fc:	9a03      	ldr	r2, [sp, #12]
 801a8fe:	54d1      	strb	r1, [r2, r3]
		for (u = 0; u < clen; u ++) {
 801a900:	9b05      	ldr	r3, [sp, #20]
 801a902:	3301      	adds	r3, #1
 801a904:	9305      	str	r3, [sp, #20]
 801a906:	9a05      	ldr	r2, [sp, #20]
 801a908:	9b06      	ldr	r3, [sp, #24]
 801a90a:	429a      	cmp	r2, r3
 801a90c:	d3e8      	bcc.n	801a8e0 <falcon_inner_i_shake256_inject+0x30>
		}
		dptr += clen;
 801a90e:	9a07      	ldr	r2, [sp, #28]
 801a910:	9b06      	ldr	r3, [sp, #24]
 801a912:	4413      	add	r3, r2
 801a914:	9307      	str	r3, [sp, #28]
		in += clen;
 801a916:	9a02      	ldr	r2, [sp, #8]
 801a918:	9b06      	ldr	r3, [sp, #24]
 801a91a:	4413      	add	r3, r2
 801a91c:	9302      	str	r3, [sp, #8]
		len -= clen;
 801a91e:	9a01      	ldr	r2, [sp, #4]
 801a920:	9b06      	ldr	r3, [sp, #24]
 801a922:	1ad3      	subs	r3, r2, r3
 801a924:	9301      	str	r3, [sp, #4]
		if (dptr == 136) {
 801a926:	9b07      	ldr	r3, [sp, #28]
 801a928:	2b88      	cmp	r3, #136	; 0x88
 801a92a:	d105      	bne.n	801a938 <falcon_inner_i_shake256_inject+0x88>
			process_block(sc->st.A);
 801a92c:	9b03      	ldr	r3, [sp, #12]
 801a92e:	4618      	mov	r0, r3
 801a930:	f7ff fb46 	bl	8019fc0 <process_block>
			dptr = 0;
 801a934:	2300      	movs	r3, #0
 801a936:	9307      	str	r3, [sp, #28]
	while (len > 0) {
 801a938:	9b01      	ldr	r3, [sp, #4]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d1c3      	bne.n	801a8c6 <falcon_inner_i_shake256_inject+0x16>
		}
	}
	sc->dptr = dptr;
 801a93e:	9b07      	ldr	r3, [sp, #28]
 801a940:	2200      	movs	r2, #0
 801a942:	461c      	mov	r4, r3
 801a944:	4615      	mov	r5, r2
 801a946:	9b03      	ldr	r3, [sp, #12]
 801a948:	e9c3 4532 	strd	r4, r5, [r3, #200]	; 0xc8
}
 801a94c:	bf00      	nop
 801a94e:	b009      	add	sp, #36	; 0x24
 801a950:	bd30      	pop	{r4, r5, pc}
 801a952:	bf00      	nop
	...

0801a960 <falcon_inner_i_shake256_flip>:

/* see falcon.h */
void
Zf(i_shake256_flip)(inner_shake256_context *sc)
{
 801a960:	b082      	sub	sp, #8
 801a962:	9001      	str	r0, [sp, #4]
	/*
	 * We apply padding and pre-XOR the value into the state. We
	 * set dptr to the end of the buffer, so that first call to
	 * shake_extract() will process the block.
	 */
	sc->st.dbuf[sc->dptr] ^= 0x1F;
 801a964:	9b01      	ldr	r3, [sp, #4]
 801a966:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 801a96a:	9901      	ldr	r1, [sp, #4]
 801a96c:	188b      	adds	r3, r1, r2
 801a96e:	7819      	ldrb	r1, [r3, #0]
 801a970:	9b01      	ldr	r3, [sp, #4]
 801a972:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 801a976:	f081 011f 	eor.w	r1, r1, #31
 801a97a:	b2c8      	uxtb	r0, r1
 801a97c:	9901      	ldr	r1, [sp, #4]
 801a97e:	188b      	adds	r3, r1, r2
 801a980:	4602      	mov	r2, r0
 801a982:	701a      	strb	r2, [r3, #0]
	sc->st.dbuf[135] ^= 0x80;
 801a984:	9b01      	ldr	r3, [sp, #4]
 801a986:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 801a98a:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 801a98e:	43db      	mvns	r3, r3
 801a990:	b2da      	uxtb	r2, r3
 801a992:	9b01      	ldr	r3, [sp, #4]
 801a994:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	sc->dptr = 136;
 801a998:	9901      	ldr	r1, [sp, #4]
 801a99a:	f04f 0288 	mov.w	r2, #136	; 0x88
 801a99e:	f04f 0300 	mov.w	r3, #0
 801a9a2:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
}
 801a9a6:	bf00      	nop
 801a9a8:	b002      	add	sp, #8
 801a9aa:	4770      	bx	lr
 801a9ac:	0000      	movs	r0, r0
	...

0801a9b0 <falcon_inner_i_shake256_extract>:

/* see falcon.h */
void
Zf(i_shake256_extract)(inner_shake256_context *sc, uint8_t *out, size_t len)
{
 801a9b0:	b530      	push	{r4, r5, lr}
 801a9b2:	b087      	sub	sp, #28
 801a9b4:	9003      	str	r0, [sp, #12]
 801a9b6:	9102      	str	r1, [sp, #8]
 801a9b8:	9201      	str	r2, [sp, #4]
	size_t dptr;

	dptr = (size_t)sc->dptr;
 801a9ba:	9b03      	ldr	r3, [sp, #12]
 801a9bc:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 801a9c0:	4613      	mov	r3, r2
 801a9c2:	9305      	str	r3, [sp, #20]
	while (len > 0) {
 801a9c4:	e026      	b.n	801aa14 <falcon_inner_i_shake256_extract+0x64>
		size_t clen;

		if (dptr == 136) {
 801a9c6:	9b05      	ldr	r3, [sp, #20]
 801a9c8:	2b88      	cmp	r3, #136	; 0x88
 801a9ca:	d105      	bne.n	801a9d8 <falcon_inner_i_shake256_extract+0x28>
			process_block(sc->st.A);
 801a9cc:	9b03      	ldr	r3, [sp, #12]
 801a9ce:	4618      	mov	r0, r3
 801a9d0:	f7ff faf6 	bl	8019fc0 <process_block>
			dptr = 0;
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	9305      	str	r3, [sp, #20]
		}
		clen = 136 - dptr;
 801a9d8:	9b05      	ldr	r3, [sp, #20]
 801a9da:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 801a9de:	9304      	str	r3, [sp, #16]
		if (clen > len) {
 801a9e0:	9a04      	ldr	r2, [sp, #16]
 801a9e2:	9b01      	ldr	r3, [sp, #4]
 801a9e4:	429a      	cmp	r2, r3
 801a9e6:	d901      	bls.n	801a9ec <falcon_inner_i_shake256_extract+0x3c>
			clen = len;
 801a9e8:	9b01      	ldr	r3, [sp, #4]
 801a9ea:	9304      	str	r3, [sp, #16]
		}
		len -= clen;
 801a9ec:	9a01      	ldr	r2, [sp, #4]
 801a9ee:	9b04      	ldr	r3, [sp, #16]
 801a9f0:	1ad3      	subs	r3, r2, r3
 801a9f2:	9301      	str	r3, [sp, #4]
		memcpy(out, sc->st.dbuf + dptr, clen);
 801a9f4:	9a03      	ldr	r2, [sp, #12]
 801a9f6:	9b05      	ldr	r3, [sp, #20]
 801a9f8:	4413      	add	r3, r2
 801a9fa:	9a04      	ldr	r2, [sp, #16]
 801a9fc:	4619      	mov	r1, r3
 801a9fe:	9802      	ldr	r0, [sp, #8]
 801aa00:	f001 fe1a 	bl	801c638 <memcpy>
		dptr += clen;
 801aa04:	9a05      	ldr	r2, [sp, #20]
 801aa06:	9b04      	ldr	r3, [sp, #16]
 801aa08:	4413      	add	r3, r2
 801aa0a:	9305      	str	r3, [sp, #20]
		out += clen;
 801aa0c:	9a02      	ldr	r2, [sp, #8]
 801aa0e:	9b04      	ldr	r3, [sp, #16]
 801aa10:	4413      	add	r3, r2
 801aa12:	9302      	str	r3, [sp, #8]
	while (len > 0) {
 801aa14:	9b01      	ldr	r3, [sp, #4]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d1d5      	bne.n	801a9c6 <falcon_inner_i_shake256_extract+0x16>
	}
	sc->dptr = dptr;
 801aa1a:	9b05      	ldr	r3, [sp, #20]
 801aa1c:	2200      	movs	r2, #0
 801aa1e:	461c      	mov	r4, r3
 801aa20:	4615      	mov	r5, r2
 801aa22:	9b03      	ldr	r3, [sp, #12]
 801aa24:	e9c3 4532 	strd	r4, r5, [r3, #200]	; 0xc8
}
 801aa28:	bf00      	nop
 801aa2a:	b007      	add	sp, #28
 801aa2c:	bd30      	pop	{r4, r5, pc}
 801aa2e:	bf00      	nop

0801aa30 <mq_conv_small>:
 * Reduce a small signed integer modulo q. The source integer MUST
 * be between -q/2 and +q/2.
 */
static inline uint32_t
mq_conv_small(int x)
{
 801aa30:	b084      	sub	sp, #16
 801aa32:	9001      	str	r0, [sp, #4]
	/*
	 * If x < 0, the cast to uint32_t will set the high bit to 1.
	 */
	uint32_t y;

	y = (uint32_t)x;
 801aa34:	9b01      	ldr	r3, [sp, #4]
 801aa36:	9303      	str	r3, [sp, #12]
	y += Q & -(y >> 31);
 801aa38:	9b03      	ldr	r3, [sp, #12]
 801aa3a:	17db      	asrs	r3, r3, #31
 801aa3c:	461a      	mov	r2, r3
 801aa3e:	f243 0301 	movw	r3, #12289	; 0x3001
 801aa42:	4013      	ands	r3, r2
 801aa44:	9a03      	ldr	r2, [sp, #12]
 801aa46:	4413      	add	r3, r2
 801aa48:	9303      	str	r3, [sp, #12]
	return y;
 801aa4a:	9b03      	ldr	r3, [sp, #12]
}
 801aa4c:	4618      	mov	r0, r3
 801aa4e:	b004      	add	sp, #16
 801aa50:	4770      	bx	lr
 801aa52:	bf00      	nop
	...

0801aa60 <mq_add>:
/*
 * Addition modulo q. Operands must be in the 0..q-1 range.
 */
static inline uint32_t
mq_add(uint32_t x, uint32_t y)
{
 801aa60:	b084      	sub	sp, #16
 801aa62:	9001      	str	r0, [sp, #4]
 801aa64:	9100      	str	r1, [sp, #0]
	 * it will be an all-zero pattern. In other words, this
	 * implements a conditional addition of q.
	 */
	uint32_t d;

	d = x + y - Q;
 801aa66:	9a01      	ldr	r2, [sp, #4]
 801aa68:	9b00      	ldr	r3, [sp, #0]
 801aa6a:	4413      	add	r3, r2
 801aa6c:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 801aa70:	3b01      	subs	r3, #1
 801aa72:	9303      	str	r3, [sp, #12]
	d += Q & -(d >> 31);
 801aa74:	9b03      	ldr	r3, [sp, #12]
 801aa76:	17db      	asrs	r3, r3, #31
 801aa78:	461a      	mov	r2, r3
 801aa7a:	f243 0301 	movw	r3, #12289	; 0x3001
 801aa7e:	4013      	ands	r3, r2
 801aa80:	9a03      	ldr	r2, [sp, #12]
 801aa82:	4413      	add	r3, r2
 801aa84:	9303      	str	r3, [sp, #12]
	return d;
 801aa86:	9b03      	ldr	r3, [sp, #12]
}
 801aa88:	4618      	mov	r0, r3
 801aa8a:	b004      	add	sp, #16
 801aa8c:	4770      	bx	lr
 801aa8e:	bf00      	nop

0801aa90 <mq_sub>:
/*
 * Subtraction modulo q. Operands must be in the 0..q-1 range.
 */
static inline uint32_t
mq_sub(uint32_t x, uint32_t y)
{
 801aa90:	b084      	sub	sp, #16
 801aa92:	9001      	str	r0, [sp, #4]
 801aa94:	9100      	str	r1, [sp, #0]
	 * As in mq_add(), we use a conditional addition to ensure the
	 * result is in the 0..q-1 range.
	 */
	uint32_t d;

	d = x - y;
 801aa96:	9a01      	ldr	r2, [sp, #4]
 801aa98:	9b00      	ldr	r3, [sp, #0]
 801aa9a:	1ad3      	subs	r3, r2, r3
 801aa9c:	9303      	str	r3, [sp, #12]
	d += Q & -(d >> 31);
 801aa9e:	9b03      	ldr	r3, [sp, #12]
 801aaa0:	17db      	asrs	r3, r3, #31
 801aaa2:	461a      	mov	r2, r3
 801aaa4:	f243 0301 	movw	r3, #12289	; 0x3001
 801aaa8:	4013      	ands	r3, r2
 801aaaa:	9a03      	ldr	r2, [sp, #12]
 801aaac:	4413      	add	r3, r2
 801aaae:	9303      	str	r3, [sp, #12]
	return d;
 801aab0:	9b03      	ldr	r3, [sp, #12]
}
 801aab2:	4618      	mov	r0, r3
 801aab4:	b004      	add	sp, #16
 801aab6:	4770      	bx	lr
	...

0801aac0 <mq_rshift1>:
/*
 * Division by 2 modulo q. Operand must be in the 0..q-1 range.
 */
static inline uint32_t
mq_rshift1(uint32_t x)
{
 801aac0:	b082      	sub	sp, #8
 801aac2:	9001      	str	r0, [sp, #4]
	x += Q & -(x & 1);
 801aac4:	9b01      	ldr	r3, [sp, #4]
 801aac6:	f003 0301 	and.w	r3, r3, #1
 801aaca:	425a      	negs	r2, r3
 801aacc:	f243 0301 	movw	r3, #12289	; 0x3001
 801aad0:	4013      	ands	r3, r2
 801aad2:	9a01      	ldr	r2, [sp, #4]
 801aad4:	4413      	add	r3, r2
 801aad6:	9301      	str	r3, [sp, #4]
	return (x >> 1);
 801aad8:	9b01      	ldr	r3, [sp, #4]
 801aada:	085b      	lsrs	r3, r3, #1
}
 801aadc:	4618      	mov	r0, r3
 801aade:	b002      	add	sp, #8
 801aae0:	4770      	bx	lr
 801aae2:	bf00      	nop
	...

0801aaf0 <mq_montymul>:
 * this function computes: x * y / R mod q
 * Operands must be in the 0..q-1 range.
 */
static inline uint32_t
mq_montymul(uint32_t x, uint32_t y)
{
 801aaf0:	b084      	sub	sp, #16
 801aaf2:	9001      	str	r0, [sp, #4]
 801aaf4:	9100      	str	r1, [sp, #0]
	 * low bits of the result are 0. We can then shift the value.
	 * After the shift, result may still be larger than q, but it
	 * will be lower than 2*q, so a conditional subtraction works.
	 */

	z = x * y;
 801aaf6:	9b01      	ldr	r3, [sp, #4]
 801aaf8:	9a00      	ldr	r2, [sp, #0]
 801aafa:	fb02 f303 	mul.w	r3, r2, r3
 801aafe:	9303      	str	r3, [sp, #12]
	w = ((z * Q0I) & 0xFFFF) * Q;
 801ab00:	9a03      	ldr	r2, [sp, #12]
 801ab02:	4613      	mov	r3, r2
 801ab04:	005b      	lsls	r3, r3, #1
 801ab06:	4413      	add	r3, r2
 801ab08:	031b      	lsls	r3, r3, #12
 801ab0a:	1a9b      	subs	r3, r3, r2
 801ab0c:	b29a      	uxth	r2, r3
 801ab0e:	4613      	mov	r3, r2
 801ab10:	005b      	lsls	r3, r3, #1
 801ab12:	4413      	add	r3, r2
 801ab14:	031b      	lsls	r3, r3, #12
 801ab16:	4413      	add	r3, r2
 801ab18:	9302      	str	r3, [sp, #8]
	 * When adding z and w, the result will have its low 16 bits
	 * equal to 0. Since x, y and z are lower than q, the sum will
	 * be no more than (2^15 - 1) * q + (q - 1)^2, which will
	 * fit on 29 bits.
	 */
	z = (z + w) >> 16;
 801ab1a:	9a03      	ldr	r2, [sp, #12]
 801ab1c:	9b02      	ldr	r3, [sp, #8]
 801ab1e:	4413      	add	r3, r2
 801ab20:	0c1b      	lsrs	r3, r3, #16
 801ab22:	9303      	str	r3, [sp, #12]
	/*
	 * After the shift, analysis shows that the value will be less
	 * than 2q. We do a subtraction then conditional subtraction to
	 * ensure the result is in the expected range.
	 */
	z -= Q;
 801ab24:	9b03      	ldr	r3, [sp, #12]
 801ab26:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 801ab2a:	3b01      	subs	r3, #1
 801ab2c:	9303      	str	r3, [sp, #12]
	z += Q & -(z >> 31);
 801ab2e:	9b03      	ldr	r3, [sp, #12]
 801ab30:	17db      	asrs	r3, r3, #31
 801ab32:	461a      	mov	r2, r3
 801ab34:	f243 0301 	movw	r3, #12289	; 0x3001
 801ab38:	4013      	ands	r3, r2
 801ab3a:	9a03      	ldr	r2, [sp, #12]
 801ab3c:	4413      	add	r3, r2
 801ab3e:	9303      	str	r3, [sp, #12]
	return z;
 801ab40:	9b03      	ldr	r3, [sp, #12]
}
 801ab42:	4618      	mov	r0, r3
 801ab44:	b004      	add	sp, #16
 801ab46:	4770      	bx	lr
	...

0801ab50 <mq_montysqr>:
/*
 * Montgomery squaring (computes (x^2)/R).
 */
static inline uint32_t
mq_montysqr(uint32_t x)
{
 801ab50:	b500      	push	{lr}
 801ab52:	b083      	sub	sp, #12
 801ab54:	9001      	str	r0, [sp, #4]
	return mq_montymul(x, x);
 801ab56:	9901      	ldr	r1, [sp, #4]
 801ab58:	9801      	ldr	r0, [sp, #4]
 801ab5a:	f7ff ffc9 	bl	801aaf0 <mq_montymul>
 801ab5e:	4603      	mov	r3, r0
}
 801ab60:	4618      	mov	r0, r3
 801ab62:	b003      	add	sp, #12
 801ab64:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801ab70 <mq_div_12289>:
/*
 * Divide x by y modulo q = 12289.
 */
static inline uint32_t
mq_div_12289(uint32_t x, uint32_t y)
{
 801ab70:	b500      	push	{lr}
 801ab72:	b097      	sub	sp, #92	; 0x5c
 801ab74:	9001      	str	r0, [sp, #4]
 801ab76:	9100      	str	r1, [sp, #0]
	 * must be kept around.
	 */
	uint32_t y0, y1, y2, y3, y4, y5, y6, y7, y8, y9;
	uint32_t y10, y11, y12, y13, y14, y15, y16, y17, y18;

	y0 = mq_montymul(y, R2);
 801ab78:	f642 21c8 	movw	r1, #10952	; 0x2ac8
 801ab7c:	9800      	ldr	r0, [sp, #0]
 801ab7e:	f7ff ffb7 	bl	801aaf0 <mq_montymul>
 801ab82:	9015      	str	r0, [sp, #84]	; 0x54
	y1 = mq_montysqr(y0);
 801ab84:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ab86:	f7ff ffe3 	bl	801ab50 <mq_montysqr>
 801ab8a:	9014      	str	r0, [sp, #80]	; 0x50
	y2 = mq_montymul(y1, y0);
 801ab8c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ab8e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ab90:	f7ff ffae 	bl	801aaf0 <mq_montymul>
 801ab94:	9013      	str	r0, [sp, #76]	; 0x4c
	y3 = mq_montymul(y2, y1);
 801ab96:	9914      	ldr	r1, [sp, #80]	; 0x50
 801ab98:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ab9a:	f7ff ffa9 	bl	801aaf0 <mq_montymul>
 801ab9e:	9012      	str	r0, [sp, #72]	; 0x48
	y4 = mq_montysqr(y3);
 801aba0:	9812      	ldr	r0, [sp, #72]	; 0x48
 801aba2:	f7ff ffd5 	bl	801ab50 <mq_montysqr>
 801aba6:	9011      	str	r0, [sp, #68]	; 0x44
	y5 = mq_montysqr(y4);
 801aba8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801abaa:	f7ff ffd1 	bl	801ab50 <mq_montysqr>
 801abae:	9010      	str	r0, [sp, #64]	; 0x40
	y6 = mq_montysqr(y5);
 801abb0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801abb2:	f7ff ffcd 	bl	801ab50 <mq_montysqr>
 801abb6:	900f      	str	r0, [sp, #60]	; 0x3c
	y7 = mq_montysqr(y6);
 801abb8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801abba:	f7ff ffc9 	bl	801ab50 <mq_montysqr>
 801abbe:	900e      	str	r0, [sp, #56]	; 0x38
	y8 = mq_montysqr(y7);
 801abc0:	980e      	ldr	r0, [sp, #56]	; 0x38
 801abc2:	f7ff ffc5 	bl	801ab50 <mq_montysqr>
 801abc6:	900d      	str	r0, [sp, #52]	; 0x34
	y9 = mq_montymul(y8, y2);
 801abc8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801abca:	980d      	ldr	r0, [sp, #52]	; 0x34
 801abcc:	f7ff ff90 	bl	801aaf0 <mq_montymul>
 801abd0:	900c      	str	r0, [sp, #48]	; 0x30
	y10 = mq_montymul(y9, y8);
 801abd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 801abd4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801abd6:	f7ff ff8b 	bl	801aaf0 <mq_montymul>
 801abda:	900b      	str	r0, [sp, #44]	; 0x2c
	y11 = mq_montysqr(y10);
 801abdc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801abde:	f7ff ffb7 	bl	801ab50 <mq_montysqr>
 801abe2:	900a      	str	r0, [sp, #40]	; 0x28
	y12 = mq_montysqr(y11);
 801abe4:	980a      	ldr	r0, [sp, #40]	; 0x28
 801abe6:	f7ff ffb3 	bl	801ab50 <mq_montysqr>
 801abea:	9009      	str	r0, [sp, #36]	; 0x24
	y13 = mq_montymul(y12, y9);
 801abec:	990c      	ldr	r1, [sp, #48]	; 0x30
 801abee:	9809      	ldr	r0, [sp, #36]	; 0x24
 801abf0:	f7ff ff7e 	bl	801aaf0 <mq_montymul>
 801abf4:	9008      	str	r0, [sp, #32]
	y14 = mq_montysqr(y13);
 801abf6:	9808      	ldr	r0, [sp, #32]
 801abf8:	f7ff ffaa 	bl	801ab50 <mq_montysqr>
 801abfc:	9007      	str	r0, [sp, #28]
	y15 = mq_montysqr(y14);
 801abfe:	9807      	ldr	r0, [sp, #28]
 801ac00:	f7ff ffa6 	bl	801ab50 <mq_montysqr>
 801ac04:	9006      	str	r0, [sp, #24]
	y16 = mq_montymul(y15, y10);
 801ac06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ac08:	9806      	ldr	r0, [sp, #24]
 801ac0a:	f7ff ff71 	bl	801aaf0 <mq_montymul>
 801ac0e:	9005      	str	r0, [sp, #20]
	y17 = mq_montysqr(y16);
 801ac10:	9805      	ldr	r0, [sp, #20]
 801ac12:	f7ff ff9d 	bl	801ab50 <mq_montysqr>
 801ac16:	9004      	str	r0, [sp, #16]
	y18 = mq_montymul(y17, y0);
 801ac18:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ac1a:	9804      	ldr	r0, [sp, #16]
 801ac1c:	f7ff ff68 	bl	801aaf0 <mq_montymul>
 801ac20:	9003      	str	r0, [sp, #12]

	/*
	 * Final multiplication with x, which is not in Montgomery
	 * representation, computes the correct division result.
	 */
	return mq_montymul(y18, x);
 801ac22:	9901      	ldr	r1, [sp, #4]
 801ac24:	9803      	ldr	r0, [sp, #12]
 801ac26:	f7ff ff63 	bl	801aaf0 <mq_montymul>
 801ac2a:	4603      	mov	r3, r0
}
 801ac2c:	4618      	mov	r0, r3
 801ac2e:	b017      	add	sp, #92	; 0x5c
 801ac30:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801ac40 <mq_NTT>:
/*
 * Compute NTT on a ring element.
 */
static void
mq_NTT(uint16_t *a, unsigned logn)
{
 801ac40:	b500      	push	{lr}
 801ac42:	b08f      	sub	sp, #60	; 0x3c
 801ac44:	9001      	str	r0, [sp, #4]
 801ac46:	9100      	str	r1, [sp, #0]
	size_t n, t, m;

	n = (size_t)1 << logn;
 801ac48:	2201      	movs	r2, #1
 801ac4a:	9b00      	ldr	r3, [sp, #0]
 801ac4c:	fa02 f303 	lsl.w	r3, r2, r3
 801ac50:	9308      	str	r3, [sp, #32]
	t = n;
 801ac52:	9b08      	ldr	r3, [sp, #32]
 801ac54:	930d      	str	r3, [sp, #52]	; 0x34
	for (m = 1; m < n; m <<= 1) {
 801ac56:	2301      	movs	r3, #1
 801ac58:	930c      	str	r3, [sp, #48]	; 0x30
 801ac5a:	e056      	b.n	801ad0a <mq_NTT+0xca>
		size_t ht, i, j1;

		ht = t >> 1;
 801ac5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac5e:	085b      	lsrs	r3, r3, #1
 801ac60:	9307      	str	r3, [sp, #28]
		for (i = 0, j1 = 0; i < m; i ++, j1 += t) {
 801ac62:	2300      	movs	r3, #0
 801ac64:	930b      	str	r3, [sp, #44]	; 0x2c
 801ac66:	2300      	movs	r3, #0
 801ac68:	930a      	str	r3, [sp, #40]	; 0x28
 801ac6a:	e045      	b.n	801acf8 <mq_NTT+0xb8>
			size_t j, j2;
			uint32_t s;

			s = GMb[m + i];
 801ac6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ac6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac70:	4413      	add	r3, r2
 801ac72:	4a2a      	ldr	r2, [pc, #168]	; (801ad1c <mq_NTT+0xdc>)
 801ac74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ac78:	9306      	str	r3, [sp, #24]
			j2 = j1 + ht;
 801ac7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ac7c:	9b07      	ldr	r3, [sp, #28]
 801ac7e:	4413      	add	r3, r2
 801ac80:	9305      	str	r3, [sp, #20]
			for (j = j1; j < j2; j ++) {
 801ac82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac84:	9309      	str	r3, [sp, #36]	; 0x24
 801ac86:	e02c      	b.n	801ace2 <mq_NTT+0xa2>
				uint32_t u, v;

				u = a[j];
 801ac88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac8a:	005b      	lsls	r3, r3, #1
 801ac8c:	9a01      	ldr	r2, [sp, #4]
 801ac8e:	4413      	add	r3, r2
 801ac90:	881b      	ldrh	r3, [r3, #0]
 801ac92:	9304      	str	r3, [sp, #16]
				v = mq_montymul(a[j + ht], s);
 801ac94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac96:	9b07      	ldr	r3, [sp, #28]
 801ac98:	4413      	add	r3, r2
 801ac9a:	005b      	lsls	r3, r3, #1
 801ac9c:	9a01      	ldr	r2, [sp, #4]
 801ac9e:	4413      	add	r3, r2
 801aca0:	881b      	ldrh	r3, [r3, #0]
 801aca2:	9906      	ldr	r1, [sp, #24]
 801aca4:	4618      	mov	r0, r3
 801aca6:	f7ff ff23 	bl	801aaf0 <mq_montymul>
 801acaa:	9003      	str	r0, [sp, #12]
				a[j] = (uint16_t)mq_add(u, v);
 801acac:	9903      	ldr	r1, [sp, #12]
 801acae:	9804      	ldr	r0, [sp, #16]
 801acb0:	f7ff fed6 	bl	801aa60 <mq_add>
 801acb4:	4601      	mov	r1, r0
 801acb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acb8:	005b      	lsls	r3, r3, #1
 801acba:	9a01      	ldr	r2, [sp, #4]
 801acbc:	4413      	add	r3, r2
 801acbe:	b28a      	uxth	r2, r1
 801acc0:	801a      	strh	r2, [r3, #0]
				a[j + ht] = (uint16_t)mq_sub(u, v);
 801acc2:	9903      	ldr	r1, [sp, #12]
 801acc4:	9804      	ldr	r0, [sp, #16]
 801acc6:	f7ff fee3 	bl	801aa90 <mq_sub>
 801acca:	4601      	mov	r1, r0
 801accc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801acce:	9b07      	ldr	r3, [sp, #28]
 801acd0:	4413      	add	r3, r2
 801acd2:	005b      	lsls	r3, r3, #1
 801acd4:	9a01      	ldr	r2, [sp, #4]
 801acd6:	4413      	add	r3, r2
 801acd8:	b28a      	uxth	r2, r1
 801acda:	801a      	strh	r2, [r3, #0]
			for (j = j1; j < j2; j ++) {
 801acdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acde:	3301      	adds	r3, #1
 801ace0:	9309      	str	r3, [sp, #36]	; 0x24
 801ace2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ace4:	9b05      	ldr	r3, [sp, #20]
 801ace6:	429a      	cmp	r2, r3
 801ace8:	d3ce      	bcc.n	801ac88 <mq_NTT+0x48>
		for (i = 0, j1 = 0; i < m; i ++, j1 += t) {
 801acea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801acec:	3301      	adds	r3, #1
 801acee:	930b      	str	r3, [sp, #44]	; 0x2c
 801acf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801acf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801acf4:	4413      	add	r3, r2
 801acf6:	930a      	str	r3, [sp, #40]	; 0x28
 801acf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801acfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801acfc:	429a      	cmp	r2, r3
 801acfe:	d3b5      	bcc.n	801ac6c <mq_NTT+0x2c>
			}
		}
		t = ht;
 801ad00:	9b07      	ldr	r3, [sp, #28]
 801ad02:	930d      	str	r3, [sp, #52]	; 0x34
	for (m = 1; m < n; m <<= 1) {
 801ad04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ad06:	005b      	lsls	r3, r3, #1
 801ad08:	930c      	str	r3, [sp, #48]	; 0x30
 801ad0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ad0c:	9b08      	ldr	r3, [sp, #32]
 801ad0e:	429a      	cmp	r2, r3
 801ad10:	d3a4      	bcc.n	801ac5c <mq_NTT+0x1c>
	}
}
 801ad12:	bf00      	nop
 801ad14:	bf00      	nop
 801ad16:	b00f      	add	sp, #60	; 0x3c
 801ad18:	f85d fb04 	ldr.w	pc, [sp], #4
 801ad1c:	080255cc 	.word	0x080255cc

0801ad20 <mq_iNTT>:
/*
 * Compute the inverse NTT on a ring element, binary case.
 */
static void
mq_iNTT(uint16_t *a, unsigned logn)
{
 801ad20:	b500      	push	{lr}
 801ad22:	b091      	sub	sp, #68	; 0x44
 801ad24:	9001      	str	r0, [sp, #4]
 801ad26:	9100      	str	r1, [sp, #0]
	size_t n, t, m;
	uint32_t ni;

	n = (size_t)1 << logn;
 801ad28:	2201      	movs	r2, #1
 801ad2a:	9b00      	ldr	r3, [sp, #0]
 801ad2c:	fa02 f303 	lsl.w	r3, r2, r3
 801ad30:	9309      	str	r3, [sp, #36]	; 0x24
	t = 1;
 801ad32:	2301      	movs	r3, #1
 801ad34:	930f      	str	r3, [sp, #60]	; 0x3c
	m = n;
 801ad36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad38:	930e      	str	r3, [sp, #56]	; 0x38
	while (m > 1) {
 801ad3a:	e059      	b.n	801adf0 <mq_iNTT+0xd0>
		size_t hm, dt, i, j1;

		hm = m >> 1;
 801ad3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad3e:	085b      	lsrs	r3, r3, #1
 801ad40:	9308      	str	r3, [sp, #32]
		dt = t << 1;
 801ad42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad44:	005b      	lsls	r3, r3, #1
 801ad46:	9307      	str	r3, [sp, #28]
		for (i = 0, j1 = 0; i < hm; i ++, j1 += dt) {
 801ad48:	2300      	movs	r3, #0
 801ad4a:	930c      	str	r3, [sp, #48]	; 0x30
 801ad4c:	2300      	movs	r3, #0
 801ad4e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ad50:	e046      	b.n	801ade0 <mq_iNTT+0xc0>
			size_t j, j2;
			uint32_t s;

			j2 = j1 + t;
 801ad52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ad54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad56:	4413      	add	r3, r2
 801ad58:	9306      	str	r3, [sp, #24]
			s = iGMb[hm + i];
 801ad5a:	9a08      	ldr	r2, [sp, #32]
 801ad5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ad5e:	4413      	add	r3, r2
 801ad60:	4a3c      	ldr	r2, [pc, #240]	; (801ae54 <mq_iNTT+0x134>)
 801ad62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ad66:	9305      	str	r3, [sp, #20]
			for (j = j1; j < j2; j ++) {
 801ad68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad6a:	930a      	str	r3, [sp, #40]	; 0x28
 801ad6c:	e02d      	b.n	801adca <mq_iNTT+0xaa>
				uint32_t u, v, w;

				u = a[j];
 801ad6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad70:	005b      	lsls	r3, r3, #1
 801ad72:	9a01      	ldr	r2, [sp, #4]
 801ad74:	4413      	add	r3, r2
 801ad76:	881b      	ldrh	r3, [r3, #0]
 801ad78:	9304      	str	r3, [sp, #16]
				v = a[j + t];
 801ad7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad7e:	4413      	add	r3, r2
 801ad80:	005b      	lsls	r3, r3, #1
 801ad82:	9a01      	ldr	r2, [sp, #4]
 801ad84:	4413      	add	r3, r2
 801ad86:	881b      	ldrh	r3, [r3, #0]
 801ad88:	9303      	str	r3, [sp, #12]
				a[j] = (uint16_t)mq_add(u, v);
 801ad8a:	9903      	ldr	r1, [sp, #12]
 801ad8c:	9804      	ldr	r0, [sp, #16]
 801ad8e:	f7ff fe67 	bl	801aa60 <mq_add>
 801ad92:	4601      	mov	r1, r0
 801ad94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad96:	005b      	lsls	r3, r3, #1
 801ad98:	9a01      	ldr	r2, [sp, #4]
 801ad9a:	4413      	add	r3, r2
 801ad9c:	b28a      	uxth	r2, r1
 801ad9e:	801a      	strh	r2, [r3, #0]
				w = mq_sub(u, v);
 801ada0:	9903      	ldr	r1, [sp, #12]
 801ada2:	9804      	ldr	r0, [sp, #16]
 801ada4:	f7ff fe74 	bl	801aa90 <mq_sub>
 801ada8:	9002      	str	r0, [sp, #8]
				a[j + t] = (uint16_t)
					mq_montymul(w, s);
 801adaa:	9905      	ldr	r1, [sp, #20]
 801adac:	9802      	ldr	r0, [sp, #8]
 801adae:	f7ff fe9f 	bl	801aaf0 <mq_montymul>
 801adb2:	4601      	mov	r1, r0
				a[j + t] = (uint16_t)
 801adb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801adb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801adb8:	4413      	add	r3, r2
 801adba:	005b      	lsls	r3, r3, #1
 801adbc:	9a01      	ldr	r2, [sp, #4]
 801adbe:	4413      	add	r3, r2
 801adc0:	b28a      	uxth	r2, r1
 801adc2:	801a      	strh	r2, [r3, #0]
			for (j = j1; j < j2; j ++) {
 801adc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801adc6:	3301      	adds	r3, #1
 801adc8:	930a      	str	r3, [sp, #40]	; 0x28
 801adca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801adcc:	9b06      	ldr	r3, [sp, #24]
 801adce:	429a      	cmp	r2, r3
 801add0:	d3cd      	bcc.n	801ad6e <mq_iNTT+0x4e>
		for (i = 0, j1 = 0; i < hm; i ++, j1 += dt) {
 801add2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801add4:	3301      	adds	r3, #1
 801add6:	930c      	str	r3, [sp, #48]	; 0x30
 801add8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801adda:	9b07      	ldr	r3, [sp, #28]
 801addc:	4413      	add	r3, r2
 801adde:	930b      	str	r3, [sp, #44]	; 0x2c
 801ade0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ade2:	9b08      	ldr	r3, [sp, #32]
 801ade4:	429a      	cmp	r2, r3
 801ade6:	d3b4      	bcc.n	801ad52 <mq_iNTT+0x32>
			}
		}
		t = dt;
 801ade8:	9b07      	ldr	r3, [sp, #28]
 801adea:	930f      	str	r3, [sp, #60]	; 0x3c
		m = hm;
 801adec:	9b08      	ldr	r3, [sp, #32]
 801adee:	930e      	str	r3, [sp, #56]	; 0x38
	while (m > 1) {
 801adf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801adf2:	2b01      	cmp	r3, #1
 801adf4:	d8a2      	bhi.n	801ad3c <mq_iNTT+0x1c>
	 * Montgomery representation, i.e. we also want to multiply it
	 * by R = 2^16. In the common case, this should be a simple right
	 * shift. The loop below is generic and works also in corner cases;
	 * its computation time is negligible.
	 */
	ni = R;
 801adf6:	f640 73fb 	movw	r3, #4091	; 0xffb
 801adfa:	930d      	str	r3, [sp, #52]	; 0x34
	for (m = n; m > 1; m >>= 1) {
 801adfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adfe:	930e      	str	r3, [sp, #56]	; 0x38
 801ae00:	e006      	b.n	801ae10 <mq_iNTT+0xf0>
		ni = mq_rshift1(ni);
 801ae02:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ae04:	f7ff fe5c 	bl	801aac0 <mq_rshift1>
 801ae08:	900d      	str	r0, [sp, #52]	; 0x34
	for (m = n; m > 1; m >>= 1) {
 801ae0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae0c:	085b      	lsrs	r3, r3, #1
 801ae0e:	930e      	str	r3, [sp, #56]	; 0x38
 801ae10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae12:	2b01      	cmp	r3, #1
 801ae14:	d8f5      	bhi.n	801ae02 <mq_iNTT+0xe2>
	}
	for (m = 0; m < n; m ++) {
 801ae16:	2300      	movs	r3, #0
 801ae18:	930e      	str	r3, [sp, #56]	; 0x38
 801ae1a:	e012      	b.n	801ae42 <mq_iNTT+0x122>
		a[m] = (uint16_t)mq_montymul(a[m], ni);
 801ae1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae1e:	005b      	lsls	r3, r3, #1
 801ae20:	9a01      	ldr	r2, [sp, #4]
 801ae22:	4413      	add	r3, r2
 801ae24:	881b      	ldrh	r3, [r3, #0]
 801ae26:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ae28:	4618      	mov	r0, r3
 801ae2a:	f7ff fe61 	bl	801aaf0 <mq_montymul>
 801ae2e:	4601      	mov	r1, r0
 801ae30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae32:	005b      	lsls	r3, r3, #1
 801ae34:	9a01      	ldr	r2, [sp, #4]
 801ae36:	4413      	add	r3, r2
 801ae38:	b28a      	uxth	r2, r1
 801ae3a:	801a      	strh	r2, [r3, #0]
	for (m = 0; m < n; m ++) {
 801ae3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae3e:	3301      	adds	r3, #1
 801ae40:	930e      	str	r3, [sp, #56]	; 0x38
 801ae42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ae44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae46:	429a      	cmp	r2, r3
 801ae48:	d3e8      	bcc.n	801ae1c <mq_iNTT+0xfc>
	}
}
 801ae4a:	bf00      	nop
 801ae4c:	bf00      	nop
 801ae4e:	b011      	add	sp, #68	; 0x44
 801ae50:	f85d fb04 	ldr.w	pc, [sp], #4
 801ae54:	08025dcc 	.word	0x08025dcc
	...

0801ae60 <mq_poly_tomonty>:
/*
 * Convert a polynomial (mod q) to Montgomery representation.
 */
static void
mq_poly_tomonty(uint16_t *f, unsigned logn)
{
 801ae60:	b500      	push	{lr}
 801ae62:	b085      	sub	sp, #20
 801ae64:	9001      	str	r0, [sp, #4]
 801ae66:	9100      	str	r1, [sp, #0]
	size_t u, n;

	n = (size_t)1 << logn;
 801ae68:	2201      	movs	r2, #1
 801ae6a:	9b00      	ldr	r3, [sp, #0]
 801ae6c:	fa02 f303 	lsl.w	r3, r2, r3
 801ae70:	9302      	str	r3, [sp, #8]
	for (u = 0; u < n; u ++) {
 801ae72:	2300      	movs	r3, #0
 801ae74:	9303      	str	r3, [sp, #12]
 801ae76:	e013      	b.n	801aea0 <mq_poly_tomonty+0x40>
		f[u] = (uint16_t)mq_montymul(f[u], R2);
 801ae78:	9b03      	ldr	r3, [sp, #12]
 801ae7a:	005b      	lsls	r3, r3, #1
 801ae7c:	9a01      	ldr	r2, [sp, #4]
 801ae7e:	4413      	add	r3, r2
 801ae80:	881b      	ldrh	r3, [r3, #0]
 801ae82:	f642 21c8 	movw	r1, #10952	; 0x2ac8
 801ae86:	4618      	mov	r0, r3
 801ae88:	f7ff fe32 	bl	801aaf0 <mq_montymul>
 801ae8c:	4601      	mov	r1, r0
 801ae8e:	9b03      	ldr	r3, [sp, #12]
 801ae90:	005b      	lsls	r3, r3, #1
 801ae92:	9a01      	ldr	r2, [sp, #4]
 801ae94:	4413      	add	r3, r2
 801ae96:	b28a      	uxth	r2, r1
 801ae98:	801a      	strh	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 801ae9a:	9b03      	ldr	r3, [sp, #12]
 801ae9c:	3301      	adds	r3, #1
 801ae9e:	9303      	str	r3, [sp, #12]
 801aea0:	9a03      	ldr	r2, [sp, #12]
 801aea2:	9b02      	ldr	r3, [sp, #8]
 801aea4:	429a      	cmp	r2, r3
 801aea6:	d3e7      	bcc.n	801ae78 <mq_poly_tomonty+0x18>
	}
}
 801aea8:	bf00      	nop
 801aeaa:	bf00      	nop
 801aeac:	b005      	add	sp, #20
 801aeae:	f85d fb04 	ldr.w	pc, [sp], #4
 801aeb2:	bf00      	nop
	...

0801aec0 <mq_poly_montymul_ntt>:
 * Multiply two polynomials together (NTT representation, and using
 * a Montgomery multiplication). Result f*g is written over f.
 */
static void
mq_poly_montymul_ntt(uint16_t *f, const uint16_t *g, unsigned logn)
{
 801aec0:	b500      	push	{lr}
 801aec2:	b087      	sub	sp, #28
 801aec4:	9003      	str	r0, [sp, #12]
 801aec6:	9102      	str	r1, [sp, #8]
 801aec8:	9201      	str	r2, [sp, #4]
	size_t u, n;

	n = (size_t)1 << logn;
 801aeca:	2201      	movs	r2, #1
 801aecc:	9b01      	ldr	r3, [sp, #4]
 801aece:	fa02 f303 	lsl.w	r3, r2, r3
 801aed2:	9304      	str	r3, [sp, #16]
	for (u = 0; u < n; u ++) {
 801aed4:	2300      	movs	r3, #0
 801aed6:	9305      	str	r3, [sp, #20]
 801aed8:	e017      	b.n	801af0a <mq_poly_montymul_ntt+0x4a>
		f[u] = (uint16_t)mq_montymul(f[u], g[u]);
 801aeda:	9b05      	ldr	r3, [sp, #20]
 801aedc:	005b      	lsls	r3, r3, #1
 801aede:	9a03      	ldr	r2, [sp, #12]
 801aee0:	4413      	add	r3, r2
 801aee2:	881b      	ldrh	r3, [r3, #0]
 801aee4:	4618      	mov	r0, r3
 801aee6:	9b05      	ldr	r3, [sp, #20]
 801aee8:	005b      	lsls	r3, r3, #1
 801aeea:	9a02      	ldr	r2, [sp, #8]
 801aeec:	4413      	add	r3, r2
 801aeee:	881b      	ldrh	r3, [r3, #0]
 801aef0:	4619      	mov	r1, r3
 801aef2:	f7ff fdfd 	bl	801aaf0 <mq_montymul>
 801aef6:	4601      	mov	r1, r0
 801aef8:	9b05      	ldr	r3, [sp, #20]
 801aefa:	005b      	lsls	r3, r3, #1
 801aefc:	9a03      	ldr	r2, [sp, #12]
 801aefe:	4413      	add	r3, r2
 801af00:	b28a      	uxth	r2, r1
 801af02:	801a      	strh	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 801af04:	9b05      	ldr	r3, [sp, #20]
 801af06:	3301      	adds	r3, #1
 801af08:	9305      	str	r3, [sp, #20]
 801af0a:	9a05      	ldr	r2, [sp, #20]
 801af0c:	9b04      	ldr	r3, [sp, #16]
 801af0e:	429a      	cmp	r2, r3
 801af10:	d3e3      	bcc.n	801aeda <mq_poly_montymul_ntt+0x1a>
	}
}
 801af12:	bf00      	nop
 801af14:	bf00      	nop
 801af16:	b007      	add	sp, #28
 801af18:	f85d fb04 	ldr.w	pc, [sp], #4
 801af1c:	0000      	movs	r0, r0
	...

0801af20 <mq_poly_sub>:
/*
 * Subtract polynomial g from polynomial f.
 */
static void
mq_poly_sub(uint16_t *f, const uint16_t *g, unsigned logn)
{
 801af20:	b500      	push	{lr}
 801af22:	b087      	sub	sp, #28
 801af24:	9003      	str	r0, [sp, #12]
 801af26:	9102      	str	r1, [sp, #8]
 801af28:	9201      	str	r2, [sp, #4]
	size_t u, n;

	n = (size_t)1 << logn;
 801af2a:	2201      	movs	r2, #1
 801af2c:	9b01      	ldr	r3, [sp, #4]
 801af2e:	fa02 f303 	lsl.w	r3, r2, r3
 801af32:	9304      	str	r3, [sp, #16]
	for (u = 0; u < n; u ++) {
 801af34:	2300      	movs	r3, #0
 801af36:	9305      	str	r3, [sp, #20]
 801af38:	e017      	b.n	801af6a <mq_poly_sub+0x4a>
		f[u] = (uint16_t)mq_sub(f[u], g[u]);
 801af3a:	9b05      	ldr	r3, [sp, #20]
 801af3c:	005b      	lsls	r3, r3, #1
 801af3e:	9a03      	ldr	r2, [sp, #12]
 801af40:	4413      	add	r3, r2
 801af42:	881b      	ldrh	r3, [r3, #0]
 801af44:	4618      	mov	r0, r3
 801af46:	9b05      	ldr	r3, [sp, #20]
 801af48:	005b      	lsls	r3, r3, #1
 801af4a:	9a02      	ldr	r2, [sp, #8]
 801af4c:	4413      	add	r3, r2
 801af4e:	881b      	ldrh	r3, [r3, #0]
 801af50:	4619      	mov	r1, r3
 801af52:	f7ff fd9d 	bl	801aa90 <mq_sub>
 801af56:	4601      	mov	r1, r0
 801af58:	9b05      	ldr	r3, [sp, #20]
 801af5a:	005b      	lsls	r3, r3, #1
 801af5c:	9a03      	ldr	r2, [sp, #12]
 801af5e:	4413      	add	r3, r2
 801af60:	b28a      	uxth	r2, r1
 801af62:	801a      	strh	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 801af64:	9b05      	ldr	r3, [sp, #20]
 801af66:	3301      	adds	r3, #1
 801af68:	9305      	str	r3, [sp, #20]
 801af6a:	9a05      	ldr	r2, [sp, #20]
 801af6c:	9b04      	ldr	r3, [sp, #16]
 801af6e:	429a      	cmp	r2, r3
 801af70:	d3e3      	bcc.n	801af3a <mq_poly_sub+0x1a>
	}
}
 801af72:	bf00      	nop
 801af74:	bf00      	nop
 801af76:	b007      	add	sp, #28
 801af78:	f85d fb04 	ldr.w	pc, [sp], #4
 801af7c:	0000      	movs	r0, r0
	...

0801af80 <falcon_inner_to_ntt_monty>:
/* ===================================================================== */

/* see inner.h */
void
Zf(to_ntt_monty)(uint16_t *h, unsigned logn)
{
 801af80:	b500      	push	{lr}
 801af82:	b083      	sub	sp, #12
 801af84:	9001      	str	r0, [sp, #4]
 801af86:	9100      	str	r1, [sp, #0]
	mq_NTT(h, logn);
 801af88:	9900      	ldr	r1, [sp, #0]
 801af8a:	9801      	ldr	r0, [sp, #4]
 801af8c:	f7ff fe58 	bl	801ac40 <mq_NTT>
	mq_poly_tomonty(h, logn);
 801af90:	9900      	ldr	r1, [sp, #0]
 801af92:	9801      	ldr	r0, [sp, #4]
 801af94:	f7ff ff64 	bl	801ae60 <mq_poly_tomonty>
}
 801af98:	bf00      	nop
 801af9a:	b003      	add	sp, #12
 801af9c:	f85d fb04 	ldr.w	pc, [sp], #4

0801afa0 <falcon_inner_verify_raw>:

/* see inner.h */
int
Zf(verify_raw)(const uint16_t *c0, const int16_t *s2,
	const uint16_t *h, unsigned logn, uint8_t *tmp)
{
 801afa0:	b500      	push	{lr}
 801afa2:	b08b      	sub	sp, #44	; 0x2c
 801afa4:	9003      	str	r0, [sp, #12]
 801afa6:	9102      	str	r1, [sp, #8]
 801afa8:	9201      	str	r2, [sp, #4]
 801afaa:	9300      	str	r3, [sp, #0]
	size_t u, n;
	uint16_t *tt;

	n = (size_t)1 << logn;
 801afac:	2201      	movs	r2, #1
 801afae:	9b00      	ldr	r3, [sp, #0]
 801afb0:	fa02 f303 	lsl.w	r3, r2, r3
 801afb4:	9308      	str	r3, [sp, #32]
	tt = (uint16_t *)tmp;
 801afb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801afb8:	9307      	str	r3, [sp, #28]

	/*
	 * Reduce s2 elements modulo q ([0..q-1] range).
	 */
	for (u = 0; u < n; u ++) {
 801afba:	2300      	movs	r3, #0
 801afbc:	9309      	str	r3, [sp, #36]	; 0x24
 801afbe:	e019      	b.n	801aff4 <falcon_inner_verify_raw+0x54>
		uint32_t w;

		w = (uint32_t)s2[u];
 801afc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afc2:	005b      	lsls	r3, r3, #1
 801afc4:	9a02      	ldr	r2, [sp, #8]
 801afc6:	4413      	add	r3, r2
 801afc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801afcc:	9305      	str	r3, [sp, #20]
		w += Q & -(w >> 31);
 801afce:	9b05      	ldr	r3, [sp, #20]
 801afd0:	17db      	asrs	r3, r3, #31
 801afd2:	461a      	mov	r2, r3
 801afd4:	f243 0301 	movw	r3, #12289	; 0x3001
 801afd8:	4013      	ands	r3, r2
 801afda:	9a05      	ldr	r2, [sp, #20]
 801afdc:	4413      	add	r3, r2
 801afde:	9305      	str	r3, [sp, #20]
		tt[u] = (uint16_t)w;
 801afe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afe2:	005b      	lsls	r3, r3, #1
 801afe4:	9a07      	ldr	r2, [sp, #28]
 801afe6:	4413      	add	r3, r2
 801afe8:	9a05      	ldr	r2, [sp, #20]
 801afea:	b292      	uxth	r2, r2
 801afec:	801a      	strh	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 801afee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aff0:	3301      	adds	r3, #1
 801aff2:	9309      	str	r3, [sp, #36]	; 0x24
 801aff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aff6:	9b08      	ldr	r3, [sp, #32]
 801aff8:	429a      	cmp	r2, r3
 801affa:	d3e1      	bcc.n	801afc0 <falcon_inner_verify_raw+0x20>
	}

	/*
	 * Compute -s1 = s2*h - c0 mod phi mod q (in tt[]).
	 */
	mq_NTT(tt, logn);
 801affc:	9900      	ldr	r1, [sp, #0]
 801affe:	9807      	ldr	r0, [sp, #28]
 801b000:	f7ff fe1e 	bl	801ac40 <mq_NTT>
	mq_poly_montymul_ntt(tt, h, logn);
 801b004:	9a00      	ldr	r2, [sp, #0]
 801b006:	9901      	ldr	r1, [sp, #4]
 801b008:	9807      	ldr	r0, [sp, #28]
 801b00a:	f7ff ff59 	bl	801aec0 <mq_poly_montymul_ntt>
	mq_iNTT(tt, logn);
 801b00e:	9900      	ldr	r1, [sp, #0]
 801b010:	9807      	ldr	r0, [sp, #28]
 801b012:	f7ff fe85 	bl	801ad20 <mq_iNTT>
	mq_poly_sub(tt, c0, logn);
 801b016:	9a00      	ldr	r2, [sp, #0]
 801b018:	9903      	ldr	r1, [sp, #12]
 801b01a:	9807      	ldr	r0, [sp, #28]
 801b01c:	f7ff ff80 	bl	801af20 <mq_poly_sub>

	/*
	 * Normalize -s1 elements into the [-q/2..q/2] range.
	 */
	for (u = 0; u < n; u ++) {
 801b020:	2300      	movs	r3, #0
 801b022:	9309      	str	r3, [sp, #36]	; 0x24
 801b024:	e019      	b.n	801b05a <falcon_inner_verify_raw+0xba>
		int32_t w;

		w = (int32_t)tt[u];
 801b026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b028:	005b      	lsls	r3, r3, #1
 801b02a:	9a07      	ldr	r2, [sp, #28]
 801b02c:	4413      	add	r3, r2
 801b02e:	881b      	ldrh	r3, [r3, #0]
 801b030:	9306      	str	r3, [sp, #24]
		w -= (int32_t)(Q & -(((Q >> 1) - (uint32_t)w) >> 31));
 801b032:	9b06      	ldr	r3, [sp, #24]
 801b034:	f5c3 53c0 	rsb	r3, r3, #6144	; 0x1800
 801b038:	17da      	asrs	r2, r3, #31
 801b03a:	f243 0301 	movw	r3, #12289	; 0x3001
 801b03e:	4013      	ands	r3, r2
 801b040:	9a06      	ldr	r2, [sp, #24]
 801b042:	1ad3      	subs	r3, r2, r3
 801b044:	9306      	str	r3, [sp, #24]
		((int16_t *)tt)[u] = (int16_t)w;
 801b046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b048:	005b      	lsls	r3, r3, #1
 801b04a:	9a07      	ldr	r2, [sp, #28]
 801b04c:	4413      	add	r3, r2
 801b04e:	9a06      	ldr	r2, [sp, #24]
 801b050:	b212      	sxth	r2, r2
 801b052:	801a      	strh	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 801b054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b056:	3301      	adds	r3, #1
 801b058:	9309      	str	r3, [sp, #36]	; 0x24
 801b05a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b05c:	9b08      	ldr	r3, [sp, #32]
 801b05e:	429a      	cmp	r2, r3
 801b060:	d3e1      	bcc.n	801b026 <falcon_inner_verify_raw+0x86>

	/*
	 * Signature is valid if and only if the aggregate (-s1,s2) vector
	 * is short enough.
	 */
	return Zf(is_short)((int16_t *)tt, s2, logn);
 801b062:	9a00      	ldr	r2, [sp, #0]
 801b064:	9902      	ldr	r1, [sp, #8]
 801b066:	9807      	ldr	r0, [sp, #28]
 801b068:	f7f6 fce2 	bl	8011a30 <falcon_inner_is_short>
 801b06c:	4603      	mov	r3, r0
}
 801b06e:	4618      	mov	r0, r3
 801b070:	b00b      	add	sp, #44	; 0x2c
 801b072:	f85d fb04 	ldr.w	pc, [sp], #4
 801b076:	bf00      	nop
	...

0801b080 <falcon_inner_compute_public>:

/* see inner.h */
int
Zf(compute_public)(uint16_t *h,
	const int8_t *f, const int8_t *g, unsigned logn, uint8_t *tmp)
{
 801b080:	b500      	push	{lr}
 801b082:	b089      	sub	sp, #36	; 0x24
 801b084:	9003      	str	r0, [sp, #12]
 801b086:	9102      	str	r1, [sp, #8]
 801b088:	9201      	str	r2, [sp, #4]
 801b08a:	9300      	str	r3, [sp, #0]
	size_t u, n;
	uint16_t *tt;

	n = (size_t)1 << logn;
 801b08c:	2201      	movs	r2, #1
 801b08e:	9b00      	ldr	r3, [sp, #0]
 801b090:	fa02 f303 	lsl.w	r3, r2, r3
 801b094:	9306      	str	r3, [sp, #24]
	tt = (uint16_t *)tmp;
 801b096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b098:	9305      	str	r3, [sp, #20]
	for (u = 0; u < n; u ++) {
 801b09a:	2300      	movs	r3, #0
 801b09c:	9307      	str	r3, [sp, #28]
 801b09e:	e020      	b.n	801b0e2 <falcon_inner_compute_public+0x62>
		tt[u] = (uint16_t)mq_conv_small(f[u]);
 801b0a0:	9a02      	ldr	r2, [sp, #8]
 801b0a2:	9b07      	ldr	r3, [sp, #28]
 801b0a4:	4413      	add	r3, r2
 801b0a6:	f993 3000 	ldrsb.w	r3, [r3]
 801b0aa:	4618      	mov	r0, r3
 801b0ac:	f7ff fcc0 	bl	801aa30 <mq_conv_small>
 801b0b0:	4601      	mov	r1, r0
 801b0b2:	9b07      	ldr	r3, [sp, #28]
 801b0b4:	005b      	lsls	r3, r3, #1
 801b0b6:	9a05      	ldr	r2, [sp, #20]
 801b0b8:	4413      	add	r3, r2
 801b0ba:	b28a      	uxth	r2, r1
 801b0bc:	801a      	strh	r2, [r3, #0]
		h[u] = (uint16_t)mq_conv_small(g[u]);
 801b0be:	9a01      	ldr	r2, [sp, #4]
 801b0c0:	9b07      	ldr	r3, [sp, #28]
 801b0c2:	4413      	add	r3, r2
 801b0c4:	f993 3000 	ldrsb.w	r3, [r3]
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f7ff fcb1 	bl	801aa30 <mq_conv_small>
 801b0ce:	4601      	mov	r1, r0
 801b0d0:	9b07      	ldr	r3, [sp, #28]
 801b0d2:	005b      	lsls	r3, r3, #1
 801b0d4:	9a03      	ldr	r2, [sp, #12]
 801b0d6:	4413      	add	r3, r2
 801b0d8:	b28a      	uxth	r2, r1
 801b0da:	801a      	strh	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 801b0dc:	9b07      	ldr	r3, [sp, #28]
 801b0de:	3301      	adds	r3, #1
 801b0e0:	9307      	str	r3, [sp, #28]
 801b0e2:	9a07      	ldr	r2, [sp, #28]
 801b0e4:	9b06      	ldr	r3, [sp, #24]
 801b0e6:	429a      	cmp	r2, r3
 801b0e8:	d3da      	bcc.n	801b0a0 <falcon_inner_compute_public+0x20>
	}
	mq_NTT(h, logn);
 801b0ea:	9900      	ldr	r1, [sp, #0]
 801b0ec:	9803      	ldr	r0, [sp, #12]
 801b0ee:	f7ff fda7 	bl	801ac40 <mq_NTT>
	mq_NTT(tt, logn);
 801b0f2:	9900      	ldr	r1, [sp, #0]
 801b0f4:	9805      	ldr	r0, [sp, #20]
 801b0f6:	f7ff fda3 	bl	801ac40 <mq_NTT>
	for (u = 0; u < n; u ++) {
 801b0fa:	2300      	movs	r3, #0
 801b0fc:	9307      	str	r3, [sp, #28]
 801b0fe:	e020      	b.n	801b142 <falcon_inner_compute_public+0xc2>
		if (tt[u] == 0) {
 801b100:	9b07      	ldr	r3, [sp, #28]
 801b102:	005b      	lsls	r3, r3, #1
 801b104:	9a05      	ldr	r2, [sp, #20]
 801b106:	4413      	add	r3, r2
 801b108:	881b      	ldrh	r3, [r3, #0]
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d101      	bne.n	801b112 <falcon_inner_compute_public+0x92>
			return 0;
 801b10e:	2300      	movs	r3, #0
 801b110:	e020      	b.n	801b154 <falcon_inner_compute_public+0xd4>
		}
		h[u] = (uint16_t)mq_div_12289(h[u], tt[u]);
 801b112:	9b07      	ldr	r3, [sp, #28]
 801b114:	005b      	lsls	r3, r3, #1
 801b116:	9a03      	ldr	r2, [sp, #12]
 801b118:	4413      	add	r3, r2
 801b11a:	881b      	ldrh	r3, [r3, #0]
 801b11c:	4618      	mov	r0, r3
 801b11e:	9b07      	ldr	r3, [sp, #28]
 801b120:	005b      	lsls	r3, r3, #1
 801b122:	9a05      	ldr	r2, [sp, #20]
 801b124:	4413      	add	r3, r2
 801b126:	881b      	ldrh	r3, [r3, #0]
 801b128:	4619      	mov	r1, r3
 801b12a:	f7ff fd21 	bl	801ab70 <mq_div_12289>
 801b12e:	4601      	mov	r1, r0
 801b130:	9b07      	ldr	r3, [sp, #28]
 801b132:	005b      	lsls	r3, r3, #1
 801b134:	9a03      	ldr	r2, [sp, #12]
 801b136:	4413      	add	r3, r2
 801b138:	b28a      	uxth	r2, r1
 801b13a:	801a      	strh	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 801b13c:	9b07      	ldr	r3, [sp, #28]
 801b13e:	3301      	adds	r3, #1
 801b140:	9307      	str	r3, [sp, #28]
 801b142:	9a07      	ldr	r2, [sp, #28]
 801b144:	9b06      	ldr	r3, [sp, #24]
 801b146:	429a      	cmp	r2, r3
 801b148:	d3da      	bcc.n	801b100 <falcon_inner_compute_public+0x80>
	}
	mq_iNTT(h, logn);
 801b14a:	9900      	ldr	r1, [sp, #0]
 801b14c:	9803      	ldr	r0, [sp, #12]
 801b14e:	f7ff fde7 	bl	801ad20 <mq_iNTT>
	return 1;
 801b152:	2301      	movs	r3, #1
}
 801b154:	4618      	mov	r0, r3
 801b156:	b009      	add	sp, #36	; 0x24
 801b158:	f85d fb04 	ldr.w	pc, [sp], #4
 801b15c:	0000      	movs	r0, r0
	...

0801b160 <falcon_inner_complete_private>:
/* see inner.h */
int
Zf(complete_private)(int8_t *G,
	const int8_t *f, const int8_t *g, const int8_t *F,
	unsigned logn, uint8_t *tmp)
{
 801b160:	b500      	push	{lr}
 801b162:	b08b      	sub	sp, #44	; 0x2c
 801b164:	9003      	str	r0, [sp, #12]
 801b166:	9102      	str	r1, [sp, #8]
 801b168:	9201      	str	r2, [sp, #4]
 801b16a:	9300      	str	r3, [sp, #0]
	size_t u, n;
	uint16_t *t1, *t2;

	n = (size_t)1 << logn;
 801b16c:	2201      	movs	r2, #1
 801b16e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b170:	fa02 f303 	lsl.w	r3, r2, r3
 801b174:	9308      	str	r3, [sp, #32]
	t1 = (uint16_t *)tmp;
 801b176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b178:	9307      	str	r3, [sp, #28]
	t2 = t1 + n;
 801b17a:	9b08      	ldr	r3, [sp, #32]
 801b17c:	005b      	lsls	r3, r3, #1
 801b17e:	9a07      	ldr	r2, [sp, #28]
 801b180:	4413      	add	r3, r2
 801b182:	9306      	str	r3, [sp, #24]
	for (u = 0; u < n; u ++) {
 801b184:	2300      	movs	r3, #0
 801b186:	9309      	str	r3, [sp, #36]	; 0x24
 801b188:	e020      	b.n	801b1cc <falcon_inner_complete_private+0x6c>
		t1[u] = (uint16_t)mq_conv_small(g[u]);
 801b18a:	9a01      	ldr	r2, [sp, #4]
 801b18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b18e:	4413      	add	r3, r2
 801b190:	f993 3000 	ldrsb.w	r3, [r3]
 801b194:	4618      	mov	r0, r3
 801b196:	f7ff fc4b 	bl	801aa30 <mq_conv_small>
 801b19a:	4601      	mov	r1, r0
 801b19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b19e:	005b      	lsls	r3, r3, #1
 801b1a0:	9a07      	ldr	r2, [sp, #28]
 801b1a2:	4413      	add	r3, r2
 801b1a4:	b28a      	uxth	r2, r1
 801b1a6:	801a      	strh	r2, [r3, #0]
		t2[u] = (uint16_t)mq_conv_small(F[u]);
 801b1a8:	9a00      	ldr	r2, [sp, #0]
 801b1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1ac:	4413      	add	r3, r2
 801b1ae:	f993 3000 	ldrsb.w	r3, [r3]
 801b1b2:	4618      	mov	r0, r3
 801b1b4:	f7ff fc3c 	bl	801aa30 <mq_conv_small>
 801b1b8:	4601      	mov	r1, r0
 801b1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1bc:	005b      	lsls	r3, r3, #1
 801b1be:	9a06      	ldr	r2, [sp, #24]
 801b1c0:	4413      	add	r3, r2
 801b1c2:	b28a      	uxth	r2, r1
 801b1c4:	801a      	strh	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 801b1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1c8:	3301      	adds	r3, #1
 801b1ca:	9309      	str	r3, [sp, #36]	; 0x24
 801b1cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b1ce:	9b08      	ldr	r3, [sp, #32]
 801b1d0:	429a      	cmp	r2, r3
 801b1d2:	d3da      	bcc.n	801b18a <falcon_inner_complete_private+0x2a>
	}
	mq_NTT(t1, logn);
 801b1d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b1d6:	9807      	ldr	r0, [sp, #28]
 801b1d8:	f7ff fd32 	bl	801ac40 <mq_NTT>
	mq_NTT(t2, logn);
 801b1dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b1de:	9806      	ldr	r0, [sp, #24]
 801b1e0:	f7ff fd2e 	bl	801ac40 <mq_NTT>
	mq_poly_tomonty(t1, logn);
 801b1e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b1e6:	9807      	ldr	r0, [sp, #28]
 801b1e8:	f7ff fe3a 	bl	801ae60 <mq_poly_tomonty>
	mq_poly_montymul_ntt(t1, t2, logn);
 801b1ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b1ee:	9906      	ldr	r1, [sp, #24]
 801b1f0:	9807      	ldr	r0, [sp, #28]
 801b1f2:	f7ff fe65 	bl	801aec0 <mq_poly_montymul_ntt>
	for (u = 0; u < n; u ++) {
 801b1f6:	2300      	movs	r3, #0
 801b1f8:	9309      	str	r3, [sp, #36]	; 0x24
 801b1fa:	e011      	b.n	801b220 <falcon_inner_complete_private+0xc0>
		t2[u] = (uint16_t)mq_conv_small(f[u]);
 801b1fc:	9a02      	ldr	r2, [sp, #8]
 801b1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b200:	4413      	add	r3, r2
 801b202:	f993 3000 	ldrsb.w	r3, [r3]
 801b206:	4618      	mov	r0, r3
 801b208:	f7ff fc12 	bl	801aa30 <mq_conv_small>
 801b20c:	4601      	mov	r1, r0
 801b20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b210:	005b      	lsls	r3, r3, #1
 801b212:	9a06      	ldr	r2, [sp, #24]
 801b214:	4413      	add	r3, r2
 801b216:	b28a      	uxth	r2, r1
 801b218:	801a      	strh	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 801b21a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b21c:	3301      	adds	r3, #1
 801b21e:	9309      	str	r3, [sp, #36]	; 0x24
 801b220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b222:	9b08      	ldr	r3, [sp, #32]
 801b224:	429a      	cmp	r2, r3
 801b226:	d3e9      	bcc.n	801b1fc <falcon_inner_complete_private+0x9c>
	}
	mq_NTT(t2, logn);
 801b228:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b22a:	9806      	ldr	r0, [sp, #24]
 801b22c:	f7ff fd08 	bl	801ac40 <mq_NTT>
	for (u = 0; u < n; u ++) {
 801b230:	2300      	movs	r3, #0
 801b232:	9309      	str	r3, [sp, #36]	; 0x24
 801b234:	e020      	b.n	801b278 <falcon_inner_complete_private+0x118>
		if (t2[u] == 0) {
 801b236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b238:	005b      	lsls	r3, r3, #1
 801b23a:	9a06      	ldr	r2, [sp, #24]
 801b23c:	4413      	add	r3, r2
 801b23e:	881b      	ldrh	r3, [r3, #0]
 801b240:	2b00      	cmp	r3, #0
 801b242:	d101      	bne.n	801b248 <falcon_inner_complete_private+0xe8>
			return 0;
 801b244:	2300      	movs	r3, #0
 801b246:	e04d      	b.n	801b2e4 <falcon_inner_complete_private+0x184>
		}
		t1[u] = (uint16_t)mq_div_12289(t1[u], t2[u]);
 801b248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b24a:	005b      	lsls	r3, r3, #1
 801b24c:	9a07      	ldr	r2, [sp, #28]
 801b24e:	4413      	add	r3, r2
 801b250:	881b      	ldrh	r3, [r3, #0]
 801b252:	4618      	mov	r0, r3
 801b254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b256:	005b      	lsls	r3, r3, #1
 801b258:	9a06      	ldr	r2, [sp, #24]
 801b25a:	4413      	add	r3, r2
 801b25c:	881b      	ldrh	r3, [r3, #0]
 801b25e:	4619      	mov	r1, r3
 801b260:	f7ff fc86 	bl	801ab70 <mq_div_12289>
 801b264:	4601      	mov	r1, r0
 801b266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b268:	005b      	lsls	r3, r3, #1
 801b26a:	9a07      	ldr	r2, [sp, #28]
 801b26c:	4413      	add	r3, r2
 801b26e:	b28a      	uxth	r2, r1
 801b270:	801a      	strh	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 801b272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b274:	3301      	adds	r3, #1
 801b276:	9309      	str	r3, [sp, #36]	; 0x24
 801b278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b27a:	9b08      	ldr	r3, [sp, #32]
 801b27c:	429a      	cmp	r2, r3
 801b27e:	d3da      	bcc.n	801b236 <falcon_inner_complete_private+0xd6>
	}
	mq_iNTT(t1, logn);
 801b280:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b282:	9807      	ldr	r0, [sp, #28]
 801b284:	f7ff fd4c 	bl	801ad20 <mq_iNTT>
	for (u = 0; u < n; u ++) {
 801b288:	2300      	movs	r3, #0
 801b28a:	9309      	str	r3, [sp, #36]	; 0x24
 801b28c:	e025      	b.n	801b2da <falcon_inner_complete_private+0x17a>
		uint32_t w;
		int32_t gi;

		w = t1[u];
 801b28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b290:	005b      	lsls	r3, r3, #1
 801b292:	9a07      	ldr	r2, [sp, #28]
 801b294:	4413      	add	r3, r2
 801b296:	881b      	ldrh	r3, [r3, #0]
 801b298:	9304      	str	r3, [sp, #16]
		w -= (Q & ~-((w - (Q >> 1)) >> 31));
 801b29a:	9a04      	ldr	r2, [sp, #16]
 801b29c:	9b04      	ldr	r3, [sp, #16]
 801b29e:	f5a3 53c0 	sub.w	r3, r3, #6144	; 0x1800
 801b2a2:	17db      	asrs	r3, r3, #31
 801b2a4:	43d9      	mvns	r1, r3
 801b2a6:	f243 0301 	movw	r3, #12289	; 0x3001
 801b2aa:	400b      	ands	r3, r1
 801b2ac:	1ad3      	subs	r3, r2, r3
 801b2ae:	9304      	str	r3, [sp, #16]
		gi = *(int32_t *)&w;
 801b2b0:	ab04      	add	r3, sp, #16
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	9305      	str	r3, [sp, #20]
		if (gi < -127 || gi > +127) {
 801b2b6:	9b05      	ldr	r3, [sp, #20]
 801b2b8:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 801b2bc:	db02      	blt.n	801b2c4 <falcon_inner_complete_private+0x164>
 801b2be:	9b05      	ldr	r3, [sp, #20]
 801b2c0:	2b7f      	cmp	r3, #127	; 0x7f
 801b2c2:	dd01      	ble.n	801b2c8 <falcon_inner_complete_private+0x168>
			return 0;
 801b2c4:	2300      	movs	r3, #0
 801b2c6:	e00d      	b.n	801b2e4 <falcon_inner_complete_private+0x184>
		}
		G[u] = (int8_t)gi;
 801b2c8:	9a03      	ldr	r2, [sp, #12]
 801b2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2cc:	4413      	add	r3, r2
 801b2ce:	9a05      	ldr	r2, [sp, #20]
 801b2d0:	b252      	sxtb	r2, r2
 801b2d2:	701a      	strb	r2, [r3, #0]
	for (u = 0; u < n; u ++) {
 801b2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2d6:	3301      	adds	r3, #1
 801b2d8:	9309      	str	r3, [sp, #36]	; 0x24
 801b2da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b2dc:	9b08      	ldr	r3, [sp, #32]
 801b2de:	429a      	cmp	r2, r3
 801b2e0:	d3d5      	bcc.n	801b28e <falcon_inner_complete_private+0x12e>
	}
	return 1;
 801b2e2:	2301      	movs	r3, #1
}
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	b00b      	add	sp, #44	; 0x2c
 801b2e8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b2ec:	0000      	movs	r0, r0
	...

0801b2f0 <randombytes>:
    DRBG_ctx.reseed_counter = 1;
}

int
randombytes(unsigned char *x, unsigned long long xlen)
{
 801b2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2f2:	b08b      	sub	sp, #44	; 0x2c
 801b2f4:	9003      	str	r0, [sp, #12]
 801b2f6:	e9cd 2300 	strd	r2, r3, [sp]
    unsigned char   block[16];
    int             i = 0;
 801b2fa:	2300      	movs	r3, #0
 801b2fc:	9309      	str	r3, [sp, #36]	; 0x24
    
    while ( xlen > 0 ) {
 801b2fe:	e054      	b.n	801b3aa <randombytes+0xba>
        //increment V
        for (int j=15; j>=0; j--) {
 801b300:	230f      	movs	r3, #15
 801b302:	9308      	str	r3, [sp, #32]
 801b304:	e01e      	b.n	801b344 <randombytes+0x54>
            if ( DRBG_ctx.V[j] == 0xff )
 801b306:	4a32      	ldr	r2, [pc, #200]	; (801b3d0 <randombytes+0xe0>)
 801b308:	9b08      	ldr	r3, [sp, #32]
 801b30a:	4413      	add	r3, r2
 801b30c:	3320      	adds	r3, #32
 801b30e:	781b      	ldrb	r3, [r3, #0]
 801b310:	2bff      	cmp	r3, #255	; 0xff
 801b312:	d106      	bne.n	801b322 <randombytes+0x32>
                DRBG_ctx.V[j] = 0x00;
 801b314:	4a2e      	ldr	r2, [pc, #184]	; (801b3d0 <randombytes+0xe0>)
 801b316:	9b08      	ldr	r3, [sp, #32]
 801b318:	4413      	add	r3, r2
 801b31a:	3320      	adds	r3, #32
 801b31c:	2200      	movs	r2, #0
 801b31e:	701a      	strb	r2, [r3, #0]
 801b320:	e00d      	b.n	801b33e <randombytes+0x4e>
            else {
                DRBG_ctx.V[j]++;
 801b322:	4a2b      	ldr	r2, [pc, #172]	; (801b3d0 <randombytes+0xe0>)
 801b324:	9b08      	ldr	r3, [sp, #32]
 801b326:	4413      	add	r3, r2
 801b328:	3320      	adds	r3, #32
 801b32a:	781b      	ldrb	r3, [r3, #0]
 801b32c:	3301      	adds	r3, #1
 801b32e:	b2d9      	uxtb	r1, r3
 801b330:	4a27      	ldr	r2, [pc, #156]	; (801b3d0 <randombytes+0xe0>)
 801b332:	9b08      	ldr	r3, [sp, #32]
 801b334:	4413      	add	r3, r2
 801b336:	3320      	adds	r3, #32
 801b338:	460a      	mov	r2, r1
 801b33a:	701a      	strb	r2, [r3, #0]
                break;
 801b33c:	e005      	b.n	801b34a <randombytes+0x5a>
        for (int j=15; j>=0; j--) {
 801b33e:	9b08      	ldr	r3, [sp, #32]
 801b340:	3b01      	subs	r3, #1
 801b342:	9308      	str	r3, [sp, #32]
 801b344:	9b08      	ldr	r3, [sp, #32]
 801b346:	2b00      	cmp	r3, #0
 801b348:	dadd      	bge.n	801b306 <randombytes+0x16>
            }
        }
        AES256_ECB(DRBG_ctx.Key, DRBG_ctx.V, block);
 801b34a:	ab04      	add	r3, sp, #16
 801b34c:	461a      	mov	r2, r3
 801b34e:	4921      	ldr	r1, [pc, #132]	; (801b3d4 <randombytes+0xe4>)
 801b350:	481f      	ldr	r0, [pc, #124]	; (801b3d0 <randombytes+0xe0>)
 801b352:	f000 fb2d 	bl	801b9b0 <AES256_ECB>
        if ( xlen > 15 ) {
 801b356:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b35a:	2a10      	cmp	r2, #16
 801b35c:	f173 0300 	sbcs.w	r3, r3, #0
 801b360:	d315      	bcc.n	801b38e <randombytes+0x9e>
            memcpy(x+i, block, 16);
 801b362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b364:	9a03      	ldr	r2, [sp, #12]
 801b366:	4413      	add	r3, r2
 801b368:	461d      	mov	r5, r3
 801b36a:	ac04      	add	r4, sp, #16
 801b36c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b36e:	6028      	str	r0, [r5, #0]
 801b370:	6069      	str	r1, [r5, #4]
 801b372:	60aa      	str	r2, [r5, #8]
 801b374:	60eb      	str	r3, [r5, #12]
            i += 16;
 801b376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b378:	3310      	adds	r3, #16
 801b37a:	9309      	str	r3, [sp, #36]	; 0x24
            xlen -= 16;
 801b37c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b380:	f1b2 0610 	subs.w	r6, r2, #16
 801b384:	f143 37ff 	adc.w	r7, r3, #4294967295
 801b388:	e9cd 6700 	strd	r6, r7, [sp]
 801b38c:	e00d      	b.n	801b3aa <randombytes+0xba>
        }
        else {
            memcpy(x+i, block, xlen);
 801b38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b390:	9a03      	ldr	r2, [sp, #12]
 801b392:	4413      	add	r3, r2
 801b394:	9a00      	ldr	r2, [sp, #0]
 801b396:	a904      	add	r1, sp, #16
 801b398:	4618      	mov	r0, r3
 801b39a:	f001 f94d 	bl	801c638 <memcpy>
            xlen = 0;
 801b39e:	f04f 0200 	mov.w	r2, #0
 801b3a2:	f04f 0300 	mov.w	r3, #0
 801b3a6:	e9cd 2300 	strd	r2, r3, [sp]
    while ( xlen > 0 ) {
 801b3aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b3ae:	4313      	orrs	r3, r2
 801b3b0:	d1a6      	bne.n	801b300 <randombytes+0x10>
        }
    }
    AES256_CTR_DRBG_Update(NULL, DRBG_ctx.Key, DRBG_ctx.V);
 801b3b2:	4a08      	ldr	r2, [pc, #32]	; (801b3d4 <randombytes+0xe4>)
 801b3b4:	4906      	ldr	r1, [pc, #24]	; (801b3d0 <randombytes+0xe0>)
 801b3b6:	2000      	movs	r0, #0
 801b3b8:	f000 f812 	bl	801b3e0 <AES256_CTR_DRBG_Update>
    DRBG_ctx.reseed_counter++;
 801b3bc:	4b04      	ldr	r3, [pc, #16]	; (801b3d0 <randombytes+0xe0>)
 801b3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b3c0:	3301      	adds	r3, #1
 801b3c2:	4a03      	ldr	r2, [pc, #12]	; (801b3d0 <randombytes+0xe0>)
 801b3c4:	6313      	str	r3, [r2, #48]	; 0x30

    return RNG_SUCCESS;
 801b3c6:	2300      	movs	r3, #0
}
 801b3c8:	4618      	mov	r0, r3
 801b3ca:	b00b      	add	sp, #44	; 0x2c
 801b3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3ce:	bf00      	nop
 801b3d0:	20018fa0 	.word	0x20018fa0
 801b3d4:	20018fc0 	.word	0x20018fc0
	...

0801b3e0 <AES256_CTR_DRBG_Update>:

void
AES256_CTR_DRBG_Update(unsigned char *provided_data,
                       unsigned char *Key,
                       unsigned char *V)
{
 801b3e0:	b500      	push	{lr}
 801b3e2:	b095      	sub	sp, #84	; 0x54
 801b3e4:	9003      	str	r0, [sp, #12]
 801b3e6:	9102      	str	r1, [sp, #8]
 801b3e8:	9201      	str	r2, [sp, #4]
    unsigned char   temp[48];
    
    for (int i=0; i<3; i++) {
 801b3ea:	2300      	movs	r3, #0
 801b3ec:	9313      	str	r3, [sp, #76]	; 0x4c
 801b3ee:	e029      	b.n	801b444 <AES256_CTR_DRBG_Update+0x64>
        //increment V
        for (int j=15; j>=0; j--) {
 801b3f0:	230f      	movs	r3, #15
 801b3f2:	9312      	str	r3, [sp, #72]	; 0x48
 801b3f4:	e016      	b.n	801b424 <AES256_CTR_DRBG_Update+0x44>
            if ( V[j] == 0xff )
 801b3f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b3f8:	9a01      	ldr	r2, [sp, #4]
 801b3fa:	4413      	add	r3, r2
 801b3fc:	781b      	ldrb	r3, [r3, #0]
 801b3fe:	2bff      	cmp	r3, #255	; 0xff
 801b400:	d105      	bne.n	801b40e <AES256_CTR_DRBG_Update+0x2e>
                V[j] = 0x00;
 801b402:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b404:	9a01      	ldr	r2, [sp, #4]
 801b406:	4413      	add	r3, r2
 801b408:	2200      	movs	r2, #0
 801b40a:	701a      	strb	r2, [r3, #0]
 801b40c:	e007      	b.n	801b41e <AES256_CTR_DRBG_Update+0x3e>
            else {
                V[j]++;
 801b40e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b410:	9a01      	ldr	r2, [sp, #4]
 801b412:	4413      	add	r3, r2
 801b414:	781a      	ldrb	r2, [r3, #0]
 801b416:	3201      	adds	r2, #1
 801b418:	b2d2      	uxtb	r2, r2
 801b41a:	701a      	strb	r2, [r3, #0]
                break;
 801b41c:	e005      	b.n	801b42a <AES256_CTR_DRBG_Update+0x4a>
        for (int j=15; j>=0; j--) {
 801b41e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b420:	3b01      	subs	r3, #1
 801b422:	9312      	str	r3, [sp, #72]	; 0x48
 801b424:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b426:	2b00      	cmp	r3, #0
 801b428:	dae5      	bge.n	801b3f6 <AES256_CTR_DRBG_Update+0x16>
            }
        }
        
        AES256_ECB(Key, V, temp+16*i);
 801b42a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b42c:	011b      	lsls	r3, r3, #4
 801b42e:	461a      	mov	r2, r3
 801b430:	ab05      	add	r3, sp, #20
 801b432:	4413      	add	r3, r2
 801b434:	461a      	mov	r2, r3
 801b436:	9901      	ldr	r1, [sp, #4]
 801b438:	9802      	ldr	r0, [sp, #8]
 801b43a:	f000 fab9 	bl	801b9b0 <AES256_ECB>
    for (int i=0; i<3; i++) {
 801b43e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b440:	3301      	adds	r3, #1
 801b442:	9313      	str	r3, [sp, #76]	; 0x4c
 801b444:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b446:	2b02      	cmp	r3, #2
 801b448:	ddd2      	ble.n	801b3f0 <AES256_CTR_DRBG_Update+0x10>
    }
    if ( provided_data != NULL )
 801b44a:	9b03      	ldr	r3, [sp, #12]
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d017      	beq.n	801b480 <AES256_CTR_DRBG_Update+0xa0>
        for (int i=0; i<48; i++)
 801b450:	2300      	movs	r3, #0
 801b452:	9311      	str	r3, [sp, #68]	; 0x44
 801b454:	e011      	b.n	801b47a <AES256_CTR_DRBG_Update+0x9a>
            temp[i] ^= provided_data[i];
 801b456:	aa05      	add	r2, sp, #20
 801b458:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b45a:	4413      	add	r3, r2
 801b45c:	781a      	ldrb	r2, [r3, #0]
 801b45e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b460:	9903      	ldr	r1, [sp, #12]
 801b462:	440b      	add	r3, r1
 801b464:	781b      	ldrb	r3, [r3, #0]
 801b466:	4053      	eors	r3, r2
 801b468:	b2d9      	uxtb	r1, r3
 801b46a:	aa05      	add	r2, sp, #20
 801b46c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b46e:	4413      	add	r3, r2
 801b470:	460a      	mov	r2, r1
 801b472:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<48; i++)
 801b474:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b476:	3301      	adds	r3, #1
 801b478:	9311      	str	r3, [sp, #68]	; 0x44
 801b47a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b47c:	2b2f      	cmp	r3, #47	; 0x2f
 801b47e:	ddea      	ble.n	801b456 <AES256_CTR_DRBG_Update+0x76>
    memcpy(Key, temp, 32);
 801b480:	ab05      	add	r3, sp, #20
 801b482:	2220      	movs	r2, #32
 801b484:	4619      	mov	r1, r3
 801b486:	9802      	ldr	r0, [sp, #8]
 801b488:	f001 f8d6 	bl	801c638 <memcpy>
    memcpy(V, temp+32, 16);
 801b48c:	ab05      	add	r3, sp, #20
 801b48e:	3320      	adds	r3, #32
 801b490:	2210      	movs	r2, #16
 801b492:	4619      	mov	r1, r3
 801b494:	9801      	ldr	r0, [sp, #4]
 801b496:	f001 f8cf 	bl	801c638 <memcpy>
}
 801b49a:	bf00      	nop
 801b49c:	b015      	add	sp, #84	; 0x54
 801b49e:	f85d fb04 	ldr.w	pc, [sp], #4
 801b4a2:	bf00      	nop
	...

0801b4b0 <dec32be>:
 * is not constant-time.
 */

static inline uint32_t
dec32be(const void *src)
{
 801b4b0:	b084      	sub	sp, #16
 801b4b2:	9001      	str	r0, [sp, #4]
	const unsigned char *buf;

	buf = src;
 801b4b4:	9b01      	ldr	r3, [sp, #4]
 801b4b6:	9303      	str	r3, [sp, #12]
	return ((uint32_t)buf[0] << 24)
 801b4b8:	9b03      	ldr	r3, [sp, #12]
 801b4ba:	781b      	ldrb	r3, [r3, #0]
 801b4bc:	061a      	lsls	r2, r3, #24
		| ((uint32_t)buf[1] << 16)
 801b4be:	9b03      	ldr	r3, [sp, #12]
 801b4c0:	3301      	adds	r3, #1
 801b4c2:	781b      	ldrb	r3, [r3, #0]
 801b4c4:	041b      	lsls	r3, r3, #16
 801b4c6:	431a      	orrs	r2, r3
		| ((uint32_t)buf[2] << 8)
 801b4c8:	9b03      	ldr	r3, [sp, #12]
 801b4ca:	3302      	adds	r3, #2
 801b4cc:	781b      	ldrb	r3, [r3, #0]
 801b4ce:	021b      	lsls	r3, r3, #8
 801b4d0:	4313      	orrs	r3, r2
		| (uint32_t)buf[3];
 801b4d2:	9a03      	ldr	r2, [sp, #12]
 801b4d4:	3203      	adds	r2, #3
 801b4d6:	7812      	ldrb	r2, [r2, #0]
 801b4d8:	4313      	orrs	r3, r2
}
 801b4da:	4618      	mov	r0, r3
 801b4dc:	b004      	add	sp, #16
 801b4de:	4770      	bx	lr

0801b4e0 <enc32be>:

static inline void
enc32be(void *dst, uint32_t x)
{
 801b4e0:	b084      	sub	sp, #16
 801b4e2:	9001      	str	r0, [sp, #4]
 801b4e4:	9100      	str	r1, [sp, #0]
	unsigned char *buf;

	buf = dst;
 801b4e6:	9b01      	ldr	r3, [sp, #4]
 801b4e8:	9303      	str	r3, [sp, #12]
	buf[0] = (unsigned char)(x >> 24);
 801b4ea:	9b00      	ldr	r3, [sp, #0]
 801b4ec:	0e1b      	lsrs	r3, r3, #24
 801b4ee:	b2da      	uxtb	r2, r3
 801b4f0:	9b03      	ldr	r3, [sp, #12]
 801b4f2:	701a      	strb	r2, [r3, #0]
	buf[1] = (unsigned char)(x >> 16);
 801b4f4:	9b00      	ldr	r3, [sp, #0]
 801b4f6:	0c1a      	lsrs	r2, r3, #16
 801b4f8:	9b03      	ldr	r3, [sp, #12]
 801b4fa:	3301      	adds	r3, #1
 801b4fc:	b2d2      	uxtb	r2, r2
 801b4fe:	701a      	strb	r2, [r3, #0]
	buf[2] = (unsigned char)(x >> 8);
 801b500:	9b00      	ldr	r3, [sp, #0]
 801b502:	0a1a      	lsrs	r2, r3, #8
 801b504:	9b03      	ldr	r3, [sp, #12]
 801b506:	3302      	adds	r3, #2
 801b508:	b2d2      	uxtb	r2, r2
 801b50a:	701a      	strb	r2, [r3, #0]
	buf[3] = (unsigned char)x;
 801b50c:	9b03      	ldr	r3, [sp, #12]
 801b50e:	3303      	adds	r3, #3
 801b510:	9a00      	ldr	r2, [sp, #0]
 801b512:	b2d2      	uxtb	r2, r2
 801b514:	701a      	strb	r2, [r3, #0]
}
 801b516:	bf00      	nop
 801b518:	b004      	add	sp, #16
 801b51a:	4770      	bx	lr
 801b51c:	0000      	movs	r0, r0
	...

0801b520 <SubWord>:
	0xB0, 0x54, 0xBB, 0x16
};

static uint32_t
SubWord(uint32_t x)
{
 801b520:	b082      	sub	sp, #8
 801b522:	9001      	str	r0, [sp, #4]
	return ((uint32_t)S[x >> 24] << 24)
 801b524:	9b01      	ldr	r3, [sp, #4]
 801b526:	0e1b      	lsrs	r3, r3, #24
 801b528:	4a0c      	ldr	r2, [pc, #48]	; (801b55c <SubWord+0x3c>)
 801b52a:	5cd3      	ldrb	r3, [r2, r3]
 801b52c:	061a      	lsls	r2, r3, #24
		| ((uint32_t)S[(x >> 16) & 0xFF] << 16)
 801b52e:	9b01      	ldr	r3, [sp, #4]
 801b530:	0c1b      	lsrs	r3, r3, #16
 801b532:	b2db      	uxtb	r3, r3
 801b534:	4909      	ldr	r1, [pc, #36]	; (801b55c <SubWord+0x3c>)
 801b536:	5ccb      	ldrb	r3, [r1, r3]
 801b538:	041b      	lsls	r3, r3, #16
 801b53a:	431a      	orrs	r2, r3
		| ((uint32_t)S[(x >> 8) & 0xFF] << 8)
 801b53c:	9b01      	ldr	r3, [sp, #4]
 801b53e:	0a1b      	lsrs	r3, r3, #8
 801b540:	b2db      	uxtb	r3, r3
 801b542:	4906      	ldr	r1, [pc, #24]	; (801b55c <SubWord+0x3c>)
 801b544:	5ccb      	ldrb	r3, [r1, r3]
 801b546:	021b      	lsls	r3, r3, #8
 801b548:	4313      	orrs	r3, r2
		| (uint32_t)S[x & 0xFF];
 801b54a:	9a01      	ldr	r2, [sp, #4]
 801b54c:	b2d2      	uxtb	r2, r2
 801b54e:	4903      	ldr	r1, [pc, #12]	; (801b55c <SubWord+0x3c>)
 801b550:	5c8a      	ldrb	r2, [r1, r2]
 801b552:	4313      	orrs	r3, r2
}
 801b554:	4618      	mov	r0, r3
 801b556:	b002      	add	sp, #8
 801b558:	4770      	bx	lr
 801b55a:	bf00      	nop
 801b55c:	080265f4 	.word	0x080265f4

0801b560 <aes256_keysched>:

static void
aes256_keysched(uint32_t *skey, const void *key)
{
 801b560:	b510      	push	{r4, lr}
 801b562:	b086      	sub	sp, #24
 801b564:	9001      	str	r0, [sp, #4]
 801b566:	9100      	str	r1, [sp, #0]
	int i, j, k;

	for (i = 0; i < 8; i ++) {
 801b568:	2300      	movs	r3, #0
 801b56a:	9305      	str	r3, [sp, #20]
 801b56c:	e010      	b.n	801b590 <aes256_keysched+0x30>
		skey[i] = dec32be((const unsigned char *)key + (i << 2));
 801b56e:	9b05      	ldr	r3, [sp, #20]
 801b570:	009b      	lsls	r3, r3, #2
 801b572:	461a      	mov	r2, r3
 801b574:	9b00      	ldr	r3, [sp, #0]
 801b576:	1899      	adds	r1, r3, r2
 801b578:	9b05      	ldr	r3, [sp, #20]
 801b57a:	009b      	lsls	r3, r3, #2
 801b57c:	9a01      	ldr	r2, [sp, #4]
 801b57e:	18d4      	adds	r4, r2, r3
 801b580:	4608      	mov	r0, r1
 801b582:	f7ff ff95 	bl	801b4b0 <dec32be>
 801b586:	4603      	mov	r3, r0
 801b588:	6023      	str	r3, [r4, #0]
	for (i = 0; i < 8; i ++) {
 801b58a:	9b05      	ldr	r3, [sp, #20]
 801b58c:	3301      	adds	r3, #1
 801b58e:	9305      	str	r3, [sp, #20]
 801b590:	9b05      	ldr	r3, [sp, #20]
 801b592:	2b07      	cmp	r3, #7
 801b594:	ddeb      	ble.n	801b56e <aes256_keysched+0xe>
	}
	for (i = 8, j = 0, k = 0; i < 60; i ++) {
 801b596:	2308      	movs	r3, #8
 801b598:	9305      	str	r3, [sp, #20]
 801b59a:	2300      	movs	r3, #0
 801b59c:	9304      	str	r3, [sp, #16]
 801b59e:	2300      	movs	r3, #0
 801b5a0:	9303      	str	r3, [sp, #12]
 801b5a2:	e03e      	b.n	801b622 <aes256_keysched+0xc2>
		uint32_t tmp;

		tmp = skey[i - 1];
 801b5a4:	9b05      	ldr	r3, [sp, #20]
 801b5a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b5aa:	3b01      	subs	r3, #1
 801b5ac:	009b      	lsls	r3, r3, #2
 801b5ae:	9a01      	ldr	r2, [sp, #4]
 801b5b0:	4413      	add	r3, r2
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	9302      	str	r3, [sp, #8]
		if (j == 0) {
 801b5b6:	9b04      	ldr	r3, [sp, #16]
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d10e      	bne.n	801b5da <aes256_keysched+0x7a>
			tmp = (tmp << 8) | (tmp >> 24);
 801b5bc:	9b02      	ldr	r3, [sp, #8]
 801b5be:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b5c2:	9302      	str	r3, [sp, #8]
			tmp = SubWord(tmp) ^ Rcon[k];
 801b5c4:	9802      	ldr	r0, [sp, #8]
 801b5c6:	f7ff ffab 	bl	801b520 <SubWord>
 801b5ca:	4602      	mov	r2, r0
 801b5cc:	4918      	ldr	r1, [pc, #96]	; (801b630 <aes256_keysched+0xd0>)
 801b5ce:	9b03      	ldr	r3, [sp, #12]
 801b5d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801b5d4:	4053      	eors	r3, r2
 801b5d6:	9302      	str	r3, [sp, #8]
 801b5d8:	e006      	b.n	801b5e8 <aes256_keysched+0x88>
		} else if (j == 4) {
 801b5da:	9b04      	ldr	r3, [sp, #16]
 801b5dc:	2b04      	cmp	r3, #4
 801b5de:	d103      	bne.n	801b5e8 <aes256_keysched+0x88>
			tmp = SubWord(tmp);
 801b5e0:	9802      	ldr	r0, [sp, #8]
 801b5e2:	f7ff ff9d 	bl	801b520 <SubWord>
 801b5e6:	9002      	str	r0, [sp, #8]
		}
		skey[i] = skey[i - 8] ^ tmp;
 801b5e8:	9b05      	ldr	r3, [sp, #20]
 801b5ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b5ee:	3b08      	subs	r3, #8
 801b5f0:	009b      	lsls	r3, r3, #2
 801b5f2:	9a01      	ldr	r2, [sp, #4]
 801b5f4:	4413      	add	r3, r2
 801b5f6:	6819      	ldr	r1, [r3, #0]
 801b5f8:	9b05      	ldr	r3, [sp, #20]
 801b5fa:	009b      	lsls	r3, r3, #2
 801b5fc:	9a01      	ldr	r2, [sp, #4]
 801b5fe:	4413      	add	r3, r2
 801b600:	9a02      	ldr	r2, [sp, #8]
 801b602:	404a      	eors	r2, r1
 801b604:	601a      	str	r2, [r3, #0]
		if (++ j == 8) {
 801b606:	9b04      	ldr	r3, [sp, #16]
 801b608:	3301      	adds	r3, #1
 801b60a:	9304      	str	r3, [sp, #16]
 801b60c:	9b04      	ldr	r3, [sp, #16]
 801b60e:	2b08      	cmp	r3, #8
 801b610:	d104      	bne.n	801b61c <aes256_keysched+0xbc>
			j = 0;
 801b612:	2300      	movs	r3, #0
 801b614:	9304      	str	r3, [sp, #16]
			k ++;
 801b616:	9b03      	ldr	r3, [sp, #12]
 801b618:	3301      	adds	r3, #1
 801b61a:	9303      	str	r3, [sp, #12]
	for (i = 8, j = 0, k = 0; i < 60; i ++) {
 801b61c:	9b05      	ldr	r3, [sp, #20]
 801b61e:	3301      	adds	r3, #1
 801b620:	9305      	str	r3, [sp, #20]
 801b622:	9b05      	ldr	r3, [sp, #20]
 801b624:	2b3b      	cmp	r3, #59	; 0x3b
 801b626:	ddbd      	ble.n	801b5a4 <aes256_keysched+0x44>
		}
	}
}
 801b628:	bf00      	nop
 801b62a:	bf00      	nop
 801b62c:	b006      	add	sp, #24
 801b62e:	bd10      	pop	{r4, pc}
 801b630:	080265cc 	.word	0x080265cc
	...

0801b640 <rotr>:
	0x7BB0B0CB, 0xA85454FC, 0x6DBBBBD6, 0x2C16163A
};

static inline uint32_t
rotr(uint32_t x, int n)
{
 801b640:	b082      	sub	sp, #8
 801b642:	9001      	str	r0, [sp, #4]
 801b644:	9100      	str	r1, [sp, #0]
	return (x << (32 - n)) | (x >> n);
 801b646:	9a01      	ldr	r2, [sp, #4]
 801b648:	9b00      	ldr	r3, [sp, #0]
 801b64a:	fa62 f303 	ror.w	r3, r2, r3
}
 801b64e:	4618      	mov	r0, r3
 801b650:	b002      	add	sp, #8
 801b652:	4770      	bx	lr
	...

0801b660 <aes256_encrypt>:
#define SboxExt2(x)   (rotr(Ssm0[x], 16))
#define SboxExt3(x)   (rotr(Ssm0[x], 24))

static void
aes256_encrypt(const uint32_t *skey, void *data)
{
 801b660:	b510      	push	{r4, lr}
 801b662:	b090      	sub	sp, #64	; 0x40
 801b664:	9001      	str	r0, [sp, #4]
 801b666:	9100      	str	r1, [sp, #0]
	unsigned char *buf;
	uint32_t s0, s1, s2, s3;
	uint32_t t0, t1, t2, t3;
	unsigned u;

	buf = data;
 801b668:	9b00      	ldr	r3, [sp, #0]
 801b66a:	930a      	str	r3, [sp, #40]	; 0x28
	s0 = dec32be(buf);
 801b66c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b66e:	f7ff ff1f 	bl	801b4b0 <dec32be>
 801b672:	900f      	str	r0, [sp, #60]	; 0x3c
	s1 = dec32be(buf + 4);
 801b674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b676:	3304      	adds	r3, #4
 801b678:	4618      	mov	r0, r3
 801b67a:	f7ff ff19 	bl	801b4b0 <dec32be>
 801b67e:	900e      	str	r0, [sp, #56]	; 0x38
	s2 = dec32be(buf + 8);
 801b680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b682:	3308      	adds	r3, #8
 801b684:	4618      	mov	r0, r3
 801b686:	f7ff ff13 	bl	801b4b0 <dec32be>
 801b68a:	900d      	str	r0, [sp, #52]	; 0x34
	s3 = dec32be(buf + 12);
 801b68c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b68e:	330c      	adds	r3, #12
 801b690:	4618      	mov	r0, r3
 801b692:	f7ff ff0d 	bl	801b4b0 <dec32be>
 801b696:	900c      	str	r0, [sp, #48]	; 0x30
	s0 ^= skey[0];
 801b698:	9b01      	ldr	r3, [sp, #4]
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b69e:	4053      	eors	r3, r2
 801b6a0:	930f      	str	r3, [sp, #60]	; 0x3c
	s1 ^= skey[1];
 801b6a2:	9b01      	ldr	r3, [sp, #4]
 801b6a4:	3304      	adds	r3, #4
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b6aa:	4053      	eors	r3, r2
 801b6ac:	930e      	str	r3, [sp, #56]	; 0x38
	s2 ^= skey[2];
 801b6ae:	9b01      	ldr	r3, [sp, #4]
 801b6b0:	3308      	adds	r3, #8
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b6b6:	4053      	eors	r3, r2
 801b6b8:	930d      	str	r3, [sp, #52]	; 0x34
	s3 ^= skey[3];
 801b6ba:	9b01      	ldr	r3, [sp, #4]
 801b6bc:	330c      	adds	r3, #12
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b6c2:	4053      	eors	r3, r2
 801b6c4:	930c      	str	r3, [sp, #48]	; 0x30
	for (u = 1; u < 14; u ++) {
 801b6c6:	2301      	movs	r3, #1
 801b6c8:	930b      	str	r3, [sp, #44]	; 0x2c
 801b6ca:	e0d1      	b.n	801b870 <aes256_encrypt+0x210>
		uint32_t v0, v1, v2, v3;

		v0 = SboxExt0(s0 >> 24)
 801b6cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b6ce:	0e1b      	lsrs	r3, r3, #24
 801b6d0:	4aac      	ldr	r2, [pc, #688]	; (801b984 <aes256_encrypt+0x324>)
 801b6d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
			^ SboxExt1((s1 >> 16) & 0xFF)
 801b6d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b6d8:	0c1b      	lsrs	r3, r3, #16
 801b6da:	b2db      	uxtb	r3, r3
 801b6dc:	4aa9      	ldr	r2, [pc, #676]	; (801b984 <aes256_encrypt+0x324>)
 801b6de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b6e2:	2108      	movs	r1, #8
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	f7ff ffab 	bl	801b640 <rotr>
 801b6ea:	4603      	mov	r3, r0
 801b6ec:	405c      	eors	r4, r3
			^ SboxExt2((s2 >> 8) & 0xFF)
 801b6ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b6f0:	0a1b      	lsrs	r3, r3, #8
 801b6f2:	b2db      	uxtb	r3, r3
 801b6f4:	4aa3      	ldr	r2, [pc, #652]	; (801b984 <aes256_encrypt+0x324>)
 801b6f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b6fa:	2110      	movs	r1, #16
 801b6fc:	4618      	mov	r0, r3
 801b6fe:	f7ff ff9f 	bl	801b640 <rotr>
 801b702:	4603      	mov	r3, r0
 801b704:	405c      	eors	r4, r3
			^ SboxExt3(s3 & 0xFF);
 801b706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b708:	b2db      	uxtb	r3, r3
 801b70a:	4a9e      	ldr	r2, [pc, #632]	; (801b984 <aes256_encrypt+0x324>)
 801b70c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b710:	2118      	movs	r1, #24
 801b712:	4618      	mov	r0, r3
 801b714:	f7ff ff94 	bl	801b640 <rotr>
 801b718:	4603      	mov	r3, r0
		v0 = SboxExt0(s0 >> 24)
 801b71a:	4063      	eors	r3, r4
 801b71c:	9305      	str	r3, [sp, #20]
		v1 = SboxExt0(s1 >> 24)
 801b71e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b720:	0e1b      	lsrs	r3, r3, #24
 801b722:	4a98      	ldr	r2, [pc, #608]	; (801b984 <aes256_encrypt+0x324>)
 801b724:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
			^ SboxExt1((s2 >> 16) & 0xFF)
 801b728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b72a:	0c1b      	lsrs	r3, r3, #16
 801b72c:	b2db      	uxtb	r3, r3
 801b72e:	4a95      	ldr	r2, [pc, #596]	; (801b984 <aes256_encrypt+0x324>)
 801b730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b734:	2108      	movs	r1, #8
 801b736:	4618      	mov	r0, r3
 801b738:	f7ff ff82 	bl	801b640 <rotr>
 801b73c:	4603      	mov	r3, r0
 801b73e:	405c      	eors	r4, r3
			^ SboxExt2((s3 >> 8) & 0xFF)
 801b740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b742:	0a1b      	lsrs	r3, r3, #8
 801b744:	b2db      	uxtb	r3, r3
 801b746:	4a8f      	ldr	r2, [pc, #572]	; (801b984 <aes256_encrypt+0x324>)
 801b748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b74c:	2110      	movs	r1, #16
 801b74e:	4618      	mov	r0, r3
 801b750:	f7ff ff76 	bl	801b640 <rotr>
 801b754:	4603      	mov	r3, r0
 801b756:	405c      	eors	r4, r3
			^ SboxExt3(s0 & 0xFF);
 801b758:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b75a:	b2db      	uxtb	r3, r3
 801b75c:	4a89      	ldr	r2, [pc, #548]	; (801b984 <aes256_encrypt+0x324>)
 801b75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b762:	2118      	movs	r1, #24
 801b764:	4618      	mov	r0, r3
 801b766:	f7ff ff6b 	bl	801b640 <rotr>
 801b76a:	4603      	mov	r3, r0
		v1 = SboxExt0(s1 >> 24)
 801b76c:	4063      	eors	r3, r4
 801b76e:	9304      	str	r3, [sp, #16]
		v2 = SboxExt0(s2 >> 24)
 801b770:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b772:	0e1b      	lsrs	r3, r3, #24
 801b774:	4a83      	ldr	r2, [pc, #524]	; (801b984 <aes256_encrypt+0x324>)
 801b776:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
			^ SboxExt1((s3 >> 16) & 0xFF)
 801b77a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b77c:	0c1b      	lsrs	r3, r3, #16
 801b77e:	b2db      	uxtb	r3, r3
 801b780:	4a80      	ldr	r2, [pc, #512]	; (801b984 <aes256_encrypt+0x324>)
 801b782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b786:	2108      	movs	r1, #8
 801b788:	4618      	mov	r0, r3
 801b78a:	f7ff ff59 	bl	801b640 <rotr>
 801b78e:	4603      	mov	r3, r0
 801b790:	405c      	eors	r4, r3
			^ SboxExt2((s0 >> 8) & 0xFF)
 801b792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b794:	0a1b      	lsrs	r3, r3, #8
 801b796:	b2db      	uxtb	r3, r3
 801b798:	4a7a      	ldr	r2, [pc, #488]	; (801b984 <aes256_encrypt+0x324>)
 801b79a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b79e:	2110      	movs	r1, #16
 801b7a0:	4618      	mov	r0, r3
 801b7a2:	f7ff ff4d 	bl	801b640 <rotr>
 801b7a6:	4603      	mov	r3, r0
 801b7a8:	405c      	eors	r4, r3
			^ SboxExt3(s1 & 0xFF);
 801b7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7ac:	b2db      	uxtb	r3, r3
 801b7ae:	4a75      	ldr	r2, [pc, #468]	; (801b984 <aes256_encrypt+0x324>)
 801b7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b7b4:	2118      	movs	r1, #24
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	f7ff ff42 	bl	801b640 <rotr>
 801b7bc:	4603      	mov	r3, r0
		v2 = SboxExt0(s2 >> 24)
 801b7be:	4063      	eors	r3, r4
 801b7c0:	9303      	str	r3, [sp, #12]
		v3 = SboxExt0(s3 >> 24)
 801b7c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b7c4:	0e1b      	lsrs	r3, r3, #24
 801b7c6:	4a6f      	ldr	r2, [pc, #444]	; (801b984 <aes256_encrypt+0x324>)
 801b7c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
			^ SboxExt1((s0 >> 16) & 0xFF)
 801b7cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b7ce:	0c1b      	lsrs	r3, r3, #16
 801b7d0:	b2db      	uxtb	r3, r3
 801b7d2:	4a6c      	ldr	r2, [pc, #432]	; (801b984 <aes256_encrypt+0x324>)
 801b7d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b7d8:	2108      	movs	r1, #8
 801b7da:	4618      	mov	r0, r3
 801b7dc:	f7ff ff30 	bl	801b640 <rotr>
 801b7e0:	4603      	mov	r3, r0
 801b7e2:	405c      	eors	r4, r3
			^ SboxExt2((s1 >> 8) & 0xFF)
 801b7e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7e6:	0a1b      	lsrs	r3, r3, #8
 801b7e8:	b2db      	uxtb	r3, r3
 801b7ea:	4a66      	ldr	r2, [pc, #408]	; (801b984 <aes256_encrypt+0x324>)
 801b7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b7f0:	2110      	movs	r1, #16
 801b7f2:	4618      	mov	r0, r3
 801b7f4:	f7ff ff24 	bl	801b640 <rotr>
 801b7f8:	4603      	mov	r3, r0
 801b7fa:	405c      	eors	r4, r3
			^ SboxExt3(s2 & 0xFF);
 801b7fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b7fe:	b2db      	uxtb	r3, r3
 801b800:	4a60      	ldr	r2, [pc, #384]	; (801b984 <aes256_encrypt+0x324>)
 801b802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b806:	2118      	movs	r1, #24
 801b808:	4618      	mov	r0, r3
 801b80a:	f7ff ff19 	bl	801b640 <rotr>
 801b80e:	4603      	mov	r3, r0
		v3 = SboxExt0(s3 >> 24)
 801b810:	4063      	eors	r3, r4
 801b812:	9302      	str	r3, [sp, #8]
		s0 = v0;
 801b814:	9b05      	ldr	r3, [sp, #20]
 801b816:	930f      	str	r3, [sp, #60]	; 0x3c
		s1 = v1;
 801b818:	9b04      	ldr	r3, [sp, #16]
 801b81a:	930e      	str	r3, [sp, #56]	; 0x38
		s2 = v2;
 801b81c:	9b03      	ldr	r3, [sp, #12]
 801b81e:	930d      	str	r3, [sp, #52]	; 0x34
		s3 = v3;
 801b820:	9b02      	ldr	r3, [sp, #8]
 801b822:	930c      	str	r3, [sp, #48]	; 0x30
		s0 ^= skey[u << 2];
 801b824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b826:	011b      	lsls	r3, r3, #4
 801b828:	9a01      	ldr	r2, [sp, #4]
 801b82a:	4413      	add	r3, r2
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b830:	4053      	eors	r3, r2
 801b832:	930f      	str	r3, [sp, #60]	; 0x3c
		s1 ^= skey[(u << 2) + 1];
 801b834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b836:	011b      	lsls	r3, r3, #4
 801b838:	3304      	adds	r3, #4
 801b83a:	9a01      	ldr	r2, [sp, #4]
 801b83c:	4413      	add	r3, r2
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b842:	4053      	eors	r3, r2
 801b844:	930e      	str	r3, [sp, #56]	; 0x38
		s2 ^= skey[(u << 2) + 2];
 801b846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b848:	011b      	lsls	r3, r3, #4
 801b84a:	3308      	adds	r3, #8
 801b84c:	9a01      	ldr	r2, [sp, #4]
 801b84e:	4413      	add	r3, r2
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b854:	4053      	eors	r3, r2
 801b856:	930d      	str	r3, [sp, #52]	; 0x34
		s3 ^= skey[(u << 2) + 3];
 801b858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b85a:	011b      	lsls	r3, r3, #4
 801b85c:	330c      	adds	r3, #12
 801b85e:	9a01      	ldr	r2, [sp, #4]
 801b860:	4413      	add	r3, r2
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b866:	4053      	eors	r3, r2
 801b868:	930c      	str	r3, [sp, #48]	; 0x30
	for (u = 1; u < 14; u ++) {
 801b86a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b86c:	3301      	adds	r3, #1
 801b86e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b872:	2b0d      	cmp	r3, #13
 801b874:	f67f af2a 	bls.w	801b6cc <aes256_encrypt+0x6c>
	}
	t0 = ((uint32_t)S[s0 >> 24] << 24)
 801b878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b87a:	0e1b      	lsrs	r3, r3, #24
 801b87c:	4a42      	ldr	r2, [pc, #264]	; (801b988 <aes256_encrypt+0x328>)
 801b87e:	5cd3      	ldrb	r3, [r2, r3]
 801b880:	061a      	lsls	r2, r3, #24
		| ((uint32_t)S[(s1 >> 16) & 0xFF] << 16)
 801b882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b884:	0c1b      	lsrs	r3, r3, #16
 801b886:	b2db      	uxtb	r3, r3
 801b888:	493f      	ldr	r1, [pc, #252]	; (801b988 <aes256_encrypt+0x328>)
 801b88a:	5ccb      	ldrb	r3, [r1, r3]
 801b88c:	041b      	lsls	r3, r3, #16
 801b88e:	431a      	orrs	r2, r3
		| ((uint32_t)S[(s2 >> 8) & 0xFF] << 8)
 801b890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b892:	0a1b      	lsrs	r3, r3, #8
 801b894:	b2db      	uxtb	r3, r3
 801b896:	493c      	ldr	r1, [pc, #240]	; (801b988 <aes256_encrypt+0x328>)
 801b898:	5ccb      	ldrb	r3, [r1, r3]
 801b89a:	021b      	lsls	r3, r3, #8
 801b89c:	4313      	orrs	r3, r2
		| (uint32_t)S[s3 & 0xFF];
 801b89e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b8a0:	b2d2      	uxtb	r2, r2
 801b8a2:	4939      	ldr	r1, [pc, #228]	; (801b988 <aes256_encrypt+0x328>)
 801b8a4:	5c8a      	ldrb	r2, [r1, r2]
	t0 = ((uint32_t)S[s0 >> 24] << 24)
 801b8a6:	4313      	orrs	r3, r2
 801b8a8:	9309      	str	r3, [sp, #36]	; 0x24
	t1 = ((uint32_t)S[s1 >> 24] << 24)
 801b8aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b8ac:	0e1b      	lsrs	r3, r3, #24
 801b8ae:	4a36      	ldr	r2, [pc, #216]	; (801b988 <aes256_encrypt+0x328>)
 801b8b0:	5cd3      	ldrb	r3, [r2, r3]
 801b8b2:	061a      	lsls	r2, r3, #24
		| ((uint32_t)S[(s2 >> 16) & 0xFF] << 16)
 801b8b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b8b6:	0c1b      	lsrs	r3, r3, #16
 801b8b8:	b2db      	uxtb	r3, r3
 801b8ba:	4933      	ldr	r1, [pc, #204]	; (801b988 <aes256_encrypt+0x328>)
 801b8bc:	5ccb      	ldrb	r3, [r1, r3]
 801b8be:	041b      	lsls	r3, r3, #16
 801b8c0:	431a      	orrs	r2, r3
		| ((uint32_t)S[(s3 >> 8) & 0xFF] << 8)
 801b8c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8c4:	0a1b      	lsrs	r3, r3, #8
 801b8c6:	b2db      	uxtb	r3, r3
 801b8c8:	492f      	ldr	r1, [pc, #188]	; (801b988 <aes256_encrypt+0x328>)
 801b8ca:	5ccb      	ldrb	r3, [r1, r3]
 801b8cc:	021b      	lsls	r3, r3, #8
 801b8ce:	4313      	orrs	r3, r2
		| (uint32_t)S[s0 & 0xFF];
 801b8d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b8d2:	b2d2      	uxtb	r2, r2
 801b8d4:	492c      	ldr	r1, [pc, #176]	; (801b988 <aes256_encrypt+0x328>)
 801b8d6:	5c8a      	ldrb	r2, [r1, r2]
	t1 = ((uint32_t)S[s1 >> 24] << 24)
 801b8d8:	4313      	orrs	r3, r2
 801b8da:	9308      	str	r3, [sp, #32]
	t2 = ((uint32_t)S[s2 >> 24] << 24)
 801b8dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b8de:	0e1b      	lsrs	r3, r3, #24
 801b8e0:	4a29      	ldr	r2, [pc, #164]	; (801b988 <aes256_encrypt+0x328>)
 801b8e2:	5cd3      	ldrb	r3, [r2, r3]
 801b8e4:	061a      	lsls	r2, r3, #24
		| ((uint32_t)S[(s3 >> 16) & 0xFF] << 16)
 801b8e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8e8:	0c1b      	lsrs	r3, r3, #16
 801b8ea:	b2db      	uxtb	r3, r3
 801b8ec:	4926      	ldr	r1, [pc, #152]	; (801b988 <aes256_encrypt+0x328>)
 801b8ee:	5ccb      	ldrb	r3, [r1, r3]
 801b8f0:	041b      	lsls	r3, r3, #16
 801b8f2:	431a      	orrs	r2, r3
		| ((uint32_t)S[(s0 >> 8) & 0xFF] << 8)
 801b8f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b8f6:	0a1b      	lsrs	r3, r3, #8
 801b8f8:	b2db      	uxtb	r3, r3
 801b8fa:	4923      	ldr	r1, [pc, #140]	; (801b988 <aes256_encrypt+0x328>)
 801b8fc:	5ccb      	ldrb	r3, [r1, r3]
 801b8fe:	021b      	lsls	r3, r3, #8
 801b900:	4313      	orrs	r3, r2
		| (uint32_t)S[s1 & 0xFF];
 801b902:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b904:	b2d2      	uxtb	r2, r2
 801b906:	4920      	ldr	r1, [pc, #128]	; (801b988 <aes256_encrypt+0x328>)
 801b908:	5c8a      	ldrb	r2, [r1, r2]
	t2 = ((uint32_t)S[s2 >> 24] << 24)
 801b90a:	4313      	orrs	r3, r2
 801b90c:	9307      	str	r3, [sp, #28]
	t3 = ((uint32_t)S[s3 >> 24] << 24)
 801b90e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b910:	0e1b      	lsrs	r3, r3, #24
 801b912:	4a1d      	ldr	r2, [pc, #116]	; (801b988 <aes256_encrypt+0x328>)
 801b914:	5cd3      	ldrb	r3, [r2, r3]
 801b916:	061a      	lsls	r2, r3, #24
		| ((uint32_t)S[(s0 >> 16) & 0xFF] << 16)
 801b918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b91a:	0c1b      	lsrs	r3, r3, #16
 801b91c:	b2db      	uxtb	r3, r3
 801b91e:	491a      	ldr	r1, [pc, #104]	; (801b988 <aes256_encrypt+0x328>)
 801b920:	5ccb      	ldrb	r3, [r1, r3]
 801b922:	041b      	lsls	r3, r3, #16
 801b924:	431a      	orrs	r2, r3
		| ((uint32_t)S[(s1 >> 8) & 0xFF] << 8)
 801b926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b928:	0a1b      	lsrs	r3, r3, #8
 801b92a:	b2db      	uxtb	r3, r3
 801b92c:	4916      	ldr	r1, [pc, #88]	; (801b988 <aes256_encrypt+0x328>)
 801b92e:	5ccb      	ldrb	r3, [r1, r3]
 801b930:	021b      	lsls	r3, r3, #8
 801b932:	4313      	orrs	r3, r2
		| (uint32_t)S[s2 & 0xFF];
 801b934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b936:	b2d2      	uxtb	r2, r2
 801b938:	4913      	ldr	r1, [pc, #76]	; (801b988 <aes256_encrypt+0x328>)
 801b93a:	5c8a      	ldrb	r2, [r1, r2]
	t3 = ((uint32_t)S[s3 >> 24] << 24)
 801b93c:	4313      	orrs	r3, r2
 801b93e:	9306      	str	r3, [sp, #24]
	s0 = t0 ^ skey[56];
 801b940:	9b01      	ldr	r3, [sp, #4]
 801b942:	33e0      	adds	r3, #224	; 0xe0
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b948:	4053      	eors	r3, r2
 801b94a:	930f      	str	r3, [sp, #60]	; 0x3c
	s1 = t1 ^ skey[57];
 801b94c:	9b01      	ldr	r3, [sp, #4]
 801b94e:	33e4      	adds	r3, #228	; 0xe4
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	9a08      	ldr	r2, [sp, #32]
 801b954:	4053      	eors	r3, r2
 801b956:	930e      	str	r3, [sp, #56]	; 0x38
	s2 = t2 ^ skey[58];
 801b958:	9b01      	ldr	r3, [sp, #4]
 801b95a:	33e8      	adds	r3, #232	; 0xe8
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	9a07      	ldr	r2, [sp, #28]
 801b960:	4053      	eors	r3, r2
 801b962:	930d      	str	r3, [sp, #52]	; 0x34
	s3 = t3 ^ skey[59];
 801b964:	9b01      	ldr	r3, [sp, #4]
 801b966:	33ec      	adds	r3, #236	; 0xec
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	9a06      	ldr	r2, [sp, #24]
 801b96c:	4053      	eors	r3, r2
 801b96e:	930c      	str	r3, [sp, #48]	; 0x30
	enc32be(buf, s0);
 801b970:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801b972:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b974:	f7ff fdb4 	bl	801b4e0 <enc32be>
	enc32be(buf + 4, s1);
 801b978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b97a:	3304      	adds	r3, #4
 801b97c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b97e:	4618      	mov	r0, r3
 801b980:	e004      	b.n	801b98c <aes256_encrypt+0x32c>
 801b982:	bf00      	nop
 801b984:	080266f4 	.word	0x080266f4
 801b988:	080265f4 	.word	0x080265f4
 801b98c:	f7ff fda8 	bl	801b4e0 <enc32be>
	enc32be(buf + 8, s2);
 801b990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b992:	3308      	adds	r3, #8
 801b994:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b996:	4618      	mov	r0, r3
 801b998:	f7ff fda2 	bl	801b4e0 <enc32be>
	enc32be(buf + 12, s3);
 801b99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b99e:	330c      	adds	r3, #12
 801b9a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b9a2:	4618      	mov	r0, r3
 801b9a4:	f7ff fd9c 	bl	801b4e0 <enc32be>
}
 801b9a8:	bf00      	nop
 801b9aa:	b010      	add	sp, #64	; 0x40
 801b9ac:	bd10      	pop	{r4, pc}
 801b9ae:	bf00      	nop

0801b9b0 <AES256_ECB>:

void
AES256_ECB(unsigned char *key, unsigned char *ctr, unsigned char *buffer)
{
 801b9b0:	b500      	push	{lr}
 801b9b2:	b0c1      	sub	sp, #260	; 0x104
 801b9b4:	9003      	str	r0, [sp, #12]
 801b9b6:	9102      	str	r1, [sp, #8]
 801b9b8:	9201      	str	r2, [sp, #4]
	uint32_t skey[60];

	aes256_keysched(skey, key);
 801b9ba:	ab04      	add	r3, sp, #16
 801b9bc:	9903      	ldr	r1, [sp, #12]
 801b9be:	4618      	mov	r0, r3
 801b9c0:	f7ff fdce 	bl	801b560 <aes256_keysched>
	memmove(buffer, ctr, 16);
 801b9c4:	2210      	movs	r2, #16
 801b9c6:	9902      	ldr	r1, [sp, #8]
 801b9c8:	9801      	ldr	r0, [sp, #4]
 801b9ca:	f000 fdcf 	bl	801c56c <memmove>
	aes256_encrypt(skey, buffer);
 801b9ce:	ab04      	add	r3, sp, #16
 801b9d0:	9901      	ldr	r1, [sp, #4]
 801b9d2:	4618      	mov	r0, r3
 801b9d4:	f7ff fe44 	bl	801b660 <aes256_encrypt>
}
 801b9d8:	bf00      	nop
 801b9da:	b041      	add	sp, #260	; 0x104
 801b9dc:	f85d fb04 	ldr.w	pc, [sp], #4

0801b9e0 <rand>:
 801b9e0:	4b16      	ldr	r3, [pc, #88]	; (801ba3c <rand+0x5c>)
 801b9e2:	b510      	push	{r4, lr}
 801b9e4:	681c      	ldr	r4, [r3, #0]
 801b9e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b9e8:	b9b3      	cbnz	r3, 801ba18 <rand+0x38>
 801b9ea:	2018      	movs	r0, #24
 801b9ec:	f000 f854 	bl	801ba98 <malloc>
 801b9f0:	4602      	mov	r2, r0
 801b9f2:	6320      	str	r0, [r4, #48]	; 0x30
 801b9f4:	b920      	cbnz	r0, 801ba00 <rand+0x20>
 801b9f6:	4b12      	ldr	r3, [pc, #72]	; (801ba40 <rand+0x60>)
 801b9f8:	4812      	ldr	r0, [pc, #72]	; (801ba44 <rand+0x64>)
 801b9fa:	2152      	movs	r1, #82	; 0x52
 801b9fc:	f000 f82e 	bl	801ba5c <__assert_func>
 801ba00:	4911      	ldr	r1, [pc, #68]	; (801ba48 <rand+0x68>)
 801ba02:	4b12      	ldr	r3, [pc, #72]	; (801ba4c <rand+0x6c>)
 801ba04:	e9c0 1300 	strd	r1, r3, [r0]
 801ba08:	4b11      	ldr	r3, [pc, #68]	; (801ba50 <rand+0x70>)
 801ba0a:	6083      	str	r3, [r0, #8]
 801ba0c:	230b      	movs	r3, #11
 801ba0e:	8183      	strh	r3, [r0, #12]
 801ba10:	2100      	movs	r1, #0
 801ba12:	2001      	movs	r0, #1
 801ba14:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ba18:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ba1a:	480e      	ldr	r0, [pc, #56]	; (801ba54 <rand+0x74>)
 801ba1c:	690b      	ldr	r3, [r1, #16]
 801ba1e:	694c      	ldr	r4, [r1, #20]
 801ba20:	4a0d      	ldr	r2, [pc, #52]	; (801ba58 <rand+0x78>)
 801ba22:	4358      	muls	r0, r3
 801ba24:	fb02 0004 	mla	r0, r2, r4, r0
 801ba28:	fba3 3202 	umull	r3, r2, r3, r2
 801ba2c:	3301      	adds	r3, #1
 801ba2e:	eb40 0002 	adc.w	r0, r0, r2
 801ba32:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ba36:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ba3a:	bd10      	pop	{r4, pc}
 801ba3c:	20000928 	.word	0x20000928
 801ba40:	08026af4 	.word	0x08026af4
 801ba44:	08026b0b 	.word	0x08026b0b
 801ba48:	abcd330e 	.word	0xabcd330e
 801ba4c:	e66d1234 	.word	0xe66d1234
 801ba50:	0005deec 	.word	0x0005deec
 801ba54:	5851f42d 	.word	0x5851f42d
 801ba58:	4c957f2d 	.word	0x4c957f2d

0801ba5c <__assert_func>:
 801ba5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ba5e:	4614      	mov	r4, r2
 801ba60:	461a      	mov	r2, r3
 801ba62:	4b09      	ldr	r3, [pc, #36]	; (801ba88 <__assert_func+0x2c>)
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	4605      	mov	r5, r0
 801ba68:	68d8      	ldr	r0, [r3, #12]
 801ba6a:	b14c      	cbz	r4, 801ba80 <__assert_func+0x24>
 801ba6c:	4b07      	ldr	r3, [pc, #28]	; (801ba8c <__assert_func+0x30>)
 801ba6e:	9100      	str	r1, [sp, #0]
 801ba70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ba74:	4906      	ldr	r1, [pc, #24]	; (801ba90 <__assert_func+0x34>)
 801ba76:	462b      	mov	r3, r5
 801ba78:	f000 f8b8 	bl	801bbec <fiprintf>
 801ba7c:	f000 f8ca 	bl	801bc14 <abort>
 801ba80:	4b04      	ldr	r3, [pc, #16]	; (801ba94 <__assert_func+0x38>)
 801ba82:	461c      	mov	r4, r3
 801ba84:	e7f3      	b.n	801ba6e <__assert_func+0x12>
 801ba86:	bf00      	nop
 801ba88:	20000928 	.word	0x20000928
 801ba8c:	08026b64 	.word	0x08026b64
 801ba90:	08026b71 	.word	0x08026b71
 801ba94:	08026b9f 	.word	0x08026b9f

0801ba98 <malloc>:
 801ba98:	4b02      	ldr	r3, [pc, #8]	; (801baa4 <malloc+0xc>)
 801ba9a:	4601      	mov	r1, r0
 801ba9c:	6818      	ldr	r0, [r3, #0]
 801ba9e:	f000 b823 	b.w	801bae8 <_malloc_r>
 801baa2:	bf00      	nop
 801baa4:	20000928 	.word	0x20000928

0801baa8 <sbrk_aligned>:
 801baa8:	b570      	push	{r4, r5, r6, lr}
 801baaa:	4e0e      	ldr	r6, [pc, #56]	; (801bae4 <sbrk_aligned+0x3c>)
 801baac:	460c      	mov	r4, r1
 801baae:	6831      	ldr	r1, [r6, #0]
 801bab0:	4605      	mov	r5, r0
 801bab2:	b911      	cbnz	r1, 801baba <sbrk_aligned+0x12>
 801bab4:	f7f3 feac 	bl	800f810 <_sbrk_r>
 801bab8:	6030      	str	r0, [r6, #0]
 801baba:	4621      	mov	r1, r4
 801babc:	4628      	mov	r0, r5
 801babe:	f7f3 fea7 	bl	800f810 <_sbrk_r>
 801bac2:	1c43      	adds	r3, r0, #1
 801bac4:	d00a      	beq.n	801badc <sbrk_aligned+0x34>
 801bac6:	1cc4      	adds	r4, r0, #3
 801bac8:	f024 0403 	bic.w	r4, r4, #3
 801bacc:	42a0      	cmp	r0, r4
 801bace:	d007      	beq.n	801bae0 <sbrk_aligned+0x38>
 801bad0:	1a21      	subs	r1, r4, r0
 801bad2:	4628      	mov	r0, r5
 801bad4:	f7f3 fe9c 	bl	800f810 <_sbrk_r>
 801bad8:	3001      	adds	r0, #1
 801bada:	d101      	bne.n	801bae0 <sbrk_aligned+0x38>
 801badc:	f04f 34ff 	mov.w	r4, #4294967295
 801bae0:	4620      	mov	r0, r4
 801bae2:	bd70      	pop	{r4, r5, r6, pc}
 801bae4:	20018fd8 	.word	0x20018fd8

0801bae8 <_malloc_r>:
 801bae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801baec:	1ccd      	adds	r5, r1, #3
 801baee:	f025 0503 	bic.w	r5, r5, #3
 801baf2:	3508      	adds	r5, #8
 801baf4:	2d0c      	cmp	r5, #12
 801baf6:	bf38      	it	cc
 801baf8:	250c      	movcc	r5, #12
 801bafa:	2d00      	cmp	r5, #0
 801bafc:	4607      	mov	r7, r0
 801bafe:	db01      	blt.n	801bb04 <_malloc_r+0x1c>
 801bb00:	42a9      	cmp	r1, r5
 801bb02:	d905      	bls.n	801bb10 <_malloc_r+0x28>
 801bb04:	230c      	movs	r3, #12
 801bb06:	603b      	str	r3, [r7, #0]
 801bb08:	2600      	movs	r6, #0
 801bb0a:	4630      	mov	r0, r6
 801bb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb10:	4e2f      	ldr	r6, [pc, #188]	; (801bbd0 <_malloc_r+0xe8>)
 801bb12:	f000 f85f 	bl	801bbd4 <__malloc_lock>
 801bb16:	6833      	ldr	r3, [r6, #0]
 801bb18:	461c      	mov	r4, r3
 801bb1a:	bb44      	cbnz	r4, 801bb6e <_malloc_r+0x86>
 801bb1c:	4629      	mov	r1, r5
 801bb1e:	4638      	mov	r0, r7
 801bb20:	f7ff ffc2 	bl	801baa8 <sbrk_aligned>
 801bb24:	1c43      	adds	r3, r0, #1
 801bb26:	4604      	mov	r4, r0
 801bb28:	d14f      	bne.n	801bbca <_malloc_r+0xe2>
 801bb2a:	6834      	ldr	r4, [r6, #0]
 801bb2c:	4626      	mov	r6, r4
 801bb2e:	2e00      	cmp	r6, #0
 801bb30:	d142      	bne.n	801bbb8 <_malloc_r+0xd0>
 801bb32:	2c00      	cmp	r4, #0
 801bb34:	d043      	beq.n	801bbbe <_malloc_r+0xd6>
 801bb36:	6823      	ldr	r3, [r4, #0]
 801bb38:	4631      	mov	r1, r6
 801bb3a:	4638      	mov	r0, r7
 801bb3c:	eb04 0803 	add.w	r8, r4, r3
 801bb40:	f7f3 fe66 	bl	800f810 <_sbrk_r>
 801bb44:	4580      	cmp	r8, r0
 801bb46:	d13a      	bne.n	801bbbe <_malloc_r+0xd6>
 801bb48:	6823      	ldr	r3, [r4, #0]
 801bb4a:	3503      	adds	r5, #3
 801bb4c:	1aed      	subs	r5, r5, r3
 801bb4e:	f025 0503 	bic.w	r5, r5, #3
 801bb52:	3508      	adds	r5, #8
 801bb54:	2d0c      	cmp	r5, #12
 801bb56:	bf38      	it	cc
 801bb58:	250c      	movcc	r5, #12
 801bb5a:	4629      	mov	r1, r5
 801bb5c:	4638      	mov	r0, r7
 801bb5e:	f7ff ffa3 	bl	801baa8 <sbrk_aligned>
 801bb62:	3001      	adds	r0, #1
 801bb64:	d02b      	beq.n	801bbbe <_malloc_r+0xd6>
 801bb66:	6823      	ldr	r3, [r4, #0]
 801bb68:	442b      	add	r3, r5
 801bb6a:	6023      	str	r3, [r4, #0]
 801bb6c:	e00e      	b.n	801bb8c <_malloc_r+0xa4>
 801bb6e:	6822      	ldr	r2, [r4, #0]
 801bb70:	1b52      	subs	r2, r2, r5
 801bb72:	d41e      	bmi.n	801bbb2 <_malloc_r+0xca>
 801bb74:	2a0b      	cmp	r2, #11
 801bb76:	d916      	bls.n	801bba6 <_malloc_r+0xbe>
 801bb78:	1961      	adds	r1, r4, r5
 801bb7a:	42a3      	cmp	r3, r4
 801bb7c:	6025      	str	r5, [r4, #0]
 801bb7e:	bf18      	it	ne
 801bb80:	6059      	strne	r1, [r3, #4]
 801bb82:	6863      	ldr	r3, [r4, #4]
 801bb84:	bf08      	it	eq
 801bb86:	6031      	streq	r1, [r6, #0]
 801bb88:	5162      	str	r2, [r4, r5]
 801bb8a:	604b      	str	r3, [r1, #4]
 801bb8c:	4638      	mov	r0, r7
 801bb8e:	f104 060b 	add.w	r6, r4, #11
 801bb92:	f000 f825 	bl	801bbe0 <__malloc_unlock>
 801bb96:	f026 0607 	bic.w	r6, r6, #7
 801bb9a:	1d23      	adds	r3, r4, #4
 801bb9c:	1af2      	subs	r2, r6, r3
 801bb9e:	d0b4      	beq.n	801bb0a <_malloc_r+0x22>
 801bba0:	1b9b      	subs	r3, r3, r6
 801bba2:	50a3      	str	r3, [r4, r2]
 801bba4:	e7b1      	b.n	801bb0a <_malloc_r+0x22>
 801bba6:	6862      	ldr	r2, [r4, #4]
 801bba8:	42a3      	cmp	r3, r4
 801bbaa:	bf0c      	ite	eq
 801bbac:	6032      	streq	r2, [r6, #0]
 801bbae:	605a      	strne	r2, [r3, #4]
 801bbb0:	e7ec      	b.n	801bb8c <_malloc_r+0xa4>
 801bbb2:	4623      	mov	r3, r4
 801bbb4:	6864      	ldr	r4, [r4, #4]
 801bbb6:	e7b0      	b.n	801bb1a <_malloc_r+0x32>
 801bbb8:	4634      	mov	r4, r6
 801bbba:	6876      	ldr	r6, [r6, #4]
 801bbbc:	e7b7      	b.n	801bb2e <_malloc_r+0x46>
 801bbbe:	230c      	movs	r3, #12
 801bbc0:	603b      	str	r3, [r7, #0]
 801bbc2:	4638      	mov	r0, r7
 801bbc4:	f000 f80c 	bl	801bbe0 <__malloc_unlock>
 801bbc8:	e79f      	b.n	801bb0a <_malloc_r+0x22>
 801bbca:	6025      	str	r5, [r4, #0]
 801bbcc:	e7de      	b.n	801bb8c <_malloc_r+0xa4>
 801bbce:	bf00      	nop
 801bbd0:	20018fd4 	.word	0x20018fd4

0801bbd4 <__malloc_lock>:
 801bbd4:	4801      	ldr	r0, [pc, #4]	; (801bbdc <__malloc_lock+0x8>)
 801bbd6:	f000 b81b 	b.w	801bc10 <__retarget_lock_acquire_recursive>
 801bbda:	bf00      	nop
 801bbdc:	20018fdc 	.word	0x20018fdc

0801bbe0 <__malloc_unlock>:
 801bbe0:	4801      	ldr	r0, [pc, #4]	; (801bbe8 <__malloc_unlock+0x8>)
 801bbe2:	f000 b816 	b.w	801bc12 <__retarget_lock_release_recursive>
 801bbe6:	bf00      	nop
 801bbe8:	20018fdc 	.word	0x20018fdc

0801bbec <fiprintf>:
 801bbec:	b40e      	push	{r1, r2, r3}
 801bbee:	b503      	push	{r0, r1, lr}
 801bbf0:	4601      	mov	r1, r0
 801bbf2:	ab03      	add	r3, sp, #12
 801bbf4:	4805      	ldr	r0, [pc, #20]	; (801bc0c <fiprintf+0x20>)
 801bbf6:	f853 2b04 	ldr.w	r2, [r3], #4
 801bbfa:	6800      	ldr	r0, [r0, #0]
 801bbfc:	9301      	str	r3, [sp, #4]
 801bbfe:	f000 f883 	bl	801bd08 <_vfiprintf_r>
 801bc02:	b002      	add	sp, #8
 801bc04:	f85d eb04 	ldr.w	lr, [sp], #4
 801bc08:	b003      	add	sp, #12
 801bc0a:	4770      	bx	lr
 801bc0c:	20000928 	.word	0x20000928

0801bc10 <__retarget_lock_acquire_recursive>:
 801bc10:	4770      	bx	lr

0801bc12 <__retarget_lock_release_recursive>:
 801bc12:	4770      	bx	lr

0801bc14 <abort>:
 801bc14:	b508      	push	{r3, lr}
 801bc16:	2006      	movs	r0, #6
 801bc18:	f000 fcf2 	bl	801c600 <raise>
 801bc1c:	2001      	movs	r0, #1
 801bc1e:	f7f3 fe37 	bl	800f890 <_exit>
	...

0801bc24 <_free_r>:
 801bc24:	b538      	push	{r3, r4, r5, lr}
 801bc26:	4605      	mov	r5, r0
 801bc28:	2900      	cmp	r1, #0
 801bc2a:	d041      	beq.n	801bcb0 <_free_r+0x8c>
 801bc2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bc30:	1f0c      	subs	r4, r1, #4
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	bfb8      	it	lt
 801bc36:	18e4      	addlt	r4, r4, r3
 801bc38:	f7ff ffcc 	bl	801bbd4 <__malloc_lock>
 801bc3c:	4a1d      	ldr	r2, [pc, #116]	; (801bcb4 <_free_r+0x90>)
 801bc3e:	6813      	ldr	r3, [r2, #0]
 801bc40:	b933      	cbnz	r3, 801bc50 <_free_r+0x2c>
 801bc42:	6063      	str	r3, [r4, #4]
 801bc44:	6014      	str	r4, [r2, #0]
 801bc46:	4628      	mov	r0, r5
 801bc48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bc4c:	f7ff bfc8 	b.w	801bbe0 <__malloc_unlock>
 801bc50:	42a3      	cmp	r3, r4
 801bc52:	d908      	bls.n	801bc66 <_free_r+0x42>
 801bc54:	6820      	ldr	r0, [r4, #0]
 801bc56:	1821      	adds	r1, r4, r0
 801bc58:	428b      	cmp	r3, r1
 801bc5a:	bf01      	itttt	eq
 801bc5c:	6819      	ldreq	r1, [r3, #0]
 801bc5e:	685b      	ldreq	r3, [r3, #4]
 801bc60:	1809      	addeq	r1, r1, r0
 801bc62:	6021      	streq	r1, [r4, #0]
 801bc64:	e7ed      	b.n	801bc42 <_free_r+0x1e>
 801bc66:	461a      	mov	r2, r3
 801bc68:	685b      	ldr	r3, [r3, #4]
 801bc6a:	b10b      	cbz	r3, 801bc70 <_free_r+0x4c>
 801bc6c:	42a3      	cmp	r3, r4
 801bc6e:	d9fa      	bls.n	801bc66 <_free_r+0x42>
 801bc70:	6811      	ldr	r1, [r2, #0]
 801bc72:	1850      	adds	r0, r2, r1
 801bc74:	42a0      	cmp	r0, r4
 801bc76:	d10b      	bne.n	801bc90 <_free_r+0x6c>
 801bc78:	6820      	ldr	r0, [r4, #0]
 801bc7a:	4401      	add	r1, r0
 801bc7c:	1850      	adds	r0, r2, r1
 801bc7e:	4283      	cmp	r3, r0
 801bc80:	6011      	str	r1, [r2, #0]
 801bc82:	d1e0      	bne.n	801bc46 <_free_r+0x22>
 801bc84:	6818      	ldr	r0, [r3, #0]
 801bc86:	685b      	ldr	r3, [r3, #4]
 801bc88:	6053      	str	r3, [r2, #4]
 801bc8a:	4408      	add	r0, r1
 801bc8c:	6010      	str	r0, [r2, #0]
 801bc8e:	e7da      	b.n	801bc46 <_free_r+0x22>
 801bc90:	d902      	bls.n	801bc98 <_free_r+0x74>
 801bc92:	230c      	movs	r3, #12
 801bc94:	602b      	str	r3, [r5, #0]
 801bc96:	e7d6      	b.n	801bc46 <_free_r+0x22>
 801bc98:	6820      	ldr	r0, [r4, #0]
 801bc9a:	1821      	adds	r1, r4, r0
 801bc9c:	428b      	cmp	r3, r1
 801bc9e:	bf04      	itt	eq
 801bca0:	6819      	ldreq	r1, [r3, #0]
 801bca2:	685b      	ldreq	r3, [r3, #4]
 801bca4:	6063      	str	r3, [r4, #4]
 801bca6:	bf04      	itt	eq
 801bca8:	1809      	addeq	r1, r1, r0
 801bcaa:	6021      	streq	r1, [r4, #0]
 801bcac:	6054      	str	r4, [r2, #4]
 801bcae:	e7ca      	b.n	801bc46 <_free_r+0x22>
 801bcb0:	bd38      	pop	{r3, r4, r5, pc}
 801bcb2:	bf00      	nop
 801bcb4:	20018fd4 	.word	0x20018fd4

0801bcb8 <__sfputc_r>:
 801bcb8:	6893      	ldr	r3, [r2, #8]
 801bcba:	3b01      	subs	r3, #1
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	b410      	push	{r4}
 801bcc0:	6093      	str	r3, [r2, #8]
 801bcc2:	da07      	bge.n	801bcd4 <__sfputc_r+0x1c>
 801bcc4:	6994      	ldr	r4, [r2, #24]
 801bcc6:	42a3      	cmp	r3, r4
 801bcc8:	db01      	blt.n	801bcce <__sfputc_r+0x16>
 801bcca:	290a      	cmp	r1, #10
 801bccc:	d102      	bne.n	801bcd4 <__sfputc_r+0x1c>
 801bcce:	bc10      	pop	{r4}
 801bcd0:	f000 bbb7 	b.w	801c442 <__swbuf_r>
 801bcd4:	6813      	ldr	r3, [r2, #0]
 801bcd6:	1c58      	adds	r0, r3, #1
 801bcd8:	6010      	str	r0, [r2, #0]
 801bcda:	7019      	strb	r1, [r3, #0]
 801bcdc:	4608      	mov	r0, r1
 801bcde:	bc10      	pop	{r4}
 801bce0:	4770      	bx	lr

0801bce2 <__sfputs_r>:
 801bce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bce4:	4606      	mov	r6, r0
 801bce6:	460f      	mov	r7, r1
 801bce8:	4614      	mov	r4, r2
 801bcea:	18d5      	adds	r5, r2, r3
 801bcec:	42ac      	cmp	r4, r5
 801bcee:	d101      	bne.n	801bcf4 <__sfputs_r+0x12>
 801bcf0:	2000      	movs	r0, #0
 801bcf2:	e007      	b.n	801bd04 <__sfputs_r+0x22>
 801bcf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcf8:	463a      	mov	r2, r7
 801bcfa:	4630      	mov	r0, r6
 801bcfc:	f7ff ffdc 	bl	801bcb8 <__sfputc_r>
 801bd00:	1c43      	adds	r3, r0, #1
 801bd02:	d1f3      	bne.n	801bcec <__sfputs_r+0xa>
 801bd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bd08 <_vfiprintf_r>:
 801bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd0c:	460d      	mov	r5, r1
 801bd0e:	b09d      	sub	sp, #116	; 0x74
 801bd10:	4614      	mov	r4, r2
 801bd12:	4698      	mov	r8, r3
 801bd14:	4606      	mov	r6, r0
 801bd16:	b118      	cbz	r0, 801bd20 <_vfiprintf_r+0x18>
 801bd18:	6a03      	ldr	r3, [r0, #32]
 801bd1a:	b90b      	cbnz	r3, 801bd20 <_vfiprintf_r+0x18>
 801bd1c:	f000 fb18 	bl	801c350 <__sinit>
 801bd20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bd22:	07d9      	lsls	r1, r3, #31
 801bd24:	d405      	bmi.n	801bd32 <_vfiprintf_r+0x2a>
 801bd26:	89ab      	ldrh	r3, [r5, #12]
 801bd28:	059a      	lsls	r2, r3, #22
 801bd2a:	d402      	bmi.n	801bd32 <_vfiprintf_r+0x2a>
 801bd2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bd2e:	f7ff ff6f 	bl	801bc10 <__retarget_lock_acquire_recursive>
 801bd32:	89ab      	ldrh	r3, [r5, #12]
 801bd34:	071b      	lsls	r3, r3, #28
 801bd36:	d501      	bpl.n	801bd3c <_vfiprintf_r+0x34>
 801bd38:	692b      	ldr	r3, [r5, #16]
 801bd3a:	b99b      	cbnz	r3, 801bd64 <_vfiprintf_r+0x5c>
 801bd3c:	4629      	mov	r1, r5
 801bd3e:	4630      	mov	r0, r6
 801bd40:	f000 fbbc 	bl	801c4bc <__swsetup_r>
 801bd44:	b170      	cbz	r0, 801bd64 <_vfiprintf_r+0x5c>
 801bd46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bd48:	07dc      	lsls	r4, r3, #31
 801bd4a:	d504      	bpl.n	801bd56 <_vfiprintf_r+0x4e>
 801bd4c:	f04f 30ff 	mov.w	r0, #4294967295
 801bd50:	b01d      	add	sp, #116	; 0x74
 801bd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd56:	89ab      	ldrh	r3, [r5, #12]
 801bd58:	0598      	lsls	r0, r3, #22
 801bd5a:	d4f7      	bmi.n	801bd4c <_vfiprintf_r+0x44>
 801bd5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bd5e:	f7ff ff58 	bl	801bc12 <__retarget_lock_release_recursive>
 801bd62:	e7f3      	b.n	801bd4c <_vfiprintf_r+0x44>
 801bd64:	2300      	movs	r3, #0
 801bd66:	9309      	str	r3, [sp, #36]	; 0x24
 801bd68:	2320      	movs	r3, #32
 801bd6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bd6e:	f8cd 800c 	str.w	r8, [sp, #12]
 801bd72:	2330      	movs	r3, #48	; 0x30
 801bd74:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801bf28 <_vfiprintf_r+0x220>
 801bd78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bd7c:	f04f 0901 	mov.w	r9, #1
 801bd80:	4623      	mov	r3, r4
 801bd82:	469a      	mov	sl, r3
 801bd84:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd88:	b10a      	cbz	r2, 801bd8e <_vfiprintf_r+0x86>
 801bd8a:	2a25      	cmp	r2, #37	; 0x25
 801bd8c:	d1f9      	bne.n	801bd82 <_vfiprintf_r+0x7a>
 801bd8e:	ebba 0b04 	subs.w	fp, sl, r4
 801bd92:	d00b      	beq.n	801bdac <_vfiprintf_r+0xa4>
 801bd94:	465b      	mov	r3, fp
 801bd96:	4622      	mov	r2, r4
 801bd98:	4629      	mov	r1, r5
 801bd9a:	4630      	mov	r0, r6
 801bd9c:	f7ff ffa1 	bl	801bce2 <__sfputs_r>
 801bda0:	3001      	adds	r0, #1
 801bda2:	f000 80a9 	beq.w	801bef8 <_vfiprintf_r+0x1f0>
 801bda6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bda8:	445a      	add	r2, fp
 801bdaa:	9209      	str	r2, [sp, #36]	; 0x24
 801bdac:	f89a 3000 	ldrb.w	r3, [sl]
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	f000 80a1 	beq.w	801bef8 <_vfiprintf_r+0x1f0>
 801bdb6:	2300      	movs	r3, #0
 801bdb8:	f04f 32ff 	mov.w	r2, #4294967295
 801bdbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bdc0:	f10a 0a01 	add.w	sl, sl, #1
 801bdc4:	9304      	str	r3, [sp, #16]
 801bdc6:	9307      	str	r3, [sp, #28]
 801bdc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bdcc:	931a      	str	r3, [sp, #104]	; 0x68
 801bdce:	4654      	mov	r4, sl
 801bdd0:	2205      	movs	r2, #5
 801bdd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdd6:	4854      	ldr	r0, [pc, #336]	; (801bf28 <_vfiprintf_r+0x220>)
 801bdd8:	f7e4 fa8a 	bl	80002f0 <memchr>
 801bddc:	9a04      	ldr	r2, [sp, #16]
 801bdde:	b9d8      	cbnz	r0, 801be18 <_vfiprintf_r+0x110>
 801bde0:	06d1      	lsls	r1, r2, #27
 801bde2:	bf44      	itt	mi
 801bde4:	2320      	movmi	r3, #32
 801bde6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bdea:	0713      	lsls	r3, r2, #28
 801bdec:	bf44      	itt	mi
 801bdee:	232b      	movmi	r3, #43	; 0x2b
 801bdf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bdf4:	f89a 3000 	ldrb.w	r3, [sl]
 801bdf8:	2b2a      	cmp	r3, #42	; 0x2a
 801bdfa:	d015      	beq.n	801be28 <_vfiprintf_r+0x120>
 801bdfc:	9a07      	ldr	r2, [sp, #28]
 801bdfe:	4654      	mov	r4, sl
 801be00:	2000      	movs	r0, #0
 801be02:	f04f 0c0a 	mov.w	ip, #10
 801be06:	4621      	mov	r1, r4
 801be08:	f811 3b01 	ldrb.w	r3, [r1], #1
 801be0c:	3b30      	subs	r3, #48	; 0x30
 801be0e:	2b09      	cmp	r3, #9
 801be10:	d94d      	bls.n	801beae <_vfiprintf_r+0x1a6>
 801be12:	b1b0      	cbz	r0, 801be42 <_vfiprintf_r+0x13a>
 801be14:	9207      	str	r2, [sp, #28]
 801be16:	e014      	b.n	801be42 <_vfiprintf_r+0x13a>
 801be18:	eba0 0308 	sub.w	r3, r0, r8
 801be1c:	fa09 f303 	lsl.w	r3, r9, r3
 801be20:	4313      	orrs	r3, r2
 801be22:	9304      	str	r3, [sp, #16]
 801be24:	46a2      	mov	sl, r4
 801be26:	e7d2      	b.n	801bdce <_vfiprintf_r+0xc6>
 801be28:	9b03      	ldr	r3, [sp, #12]
 801be2a:	1d19      	adds	r1, r3, #4
 801be2c:	681b      	ldr	r3, [r3, #0]
 801be2e:	9103      	str	r1, [sp, #12]
 801be30:	2b00      	cmp	r3, #0
 801be32:	bfbb      	ittet	lt
 801be34:	425b      	neglt	r3, r3
 801be36:	f042 0202 	orrlt.w	r2, r2, #2
 801be3a:	9307      	strge	r3, [sp, #28]
 801be3c:	9307      	strlt	r3, [sp, #28]
 801be3e:	bfb8      	it	lt
 801be40:	9204      	strlt	r2, [sp, #16]
 801be42:	7823      	ldrb	r3, [r4, #0]
 801be44:	2b2e      	cmp	r3, #46	; 0x2e
 801be46:	d10c      	bne.n	801be62 <_vfiprintf_r+0x15a>
 801be48:	7863      	ldrb	r3, [r4, #1]
 801be4a:	2b2a      	cmp	r3, #42	; 0x2a
 801be4c:	d134      	bne.n	801beb8 <_vfiprintf_r+0x1b0>
 801be4e:	9b03      	ldr	r3, [sp, #12]
 801be50:	1d1a      	adds	r2, r3, #4
 801be52:	681b      	ldr	r3, [r3, #0]
 801be54:	9203      	str	r2, [sp, #12]
 801be56:	2b00      	cmp	r3, #0
 801be58:	bfb8      	it	lt
 801be5a:	f04f 33ff 	movlt.w	r3, #4294967295
 801be5e:	3402      	adds	r4, #2
 801be60:	9305      	str	r3, [sp, #20]
 801be62:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801bf2c <_vfiprintf_r+0x224>
 801be66:	7821      	ldrb	r1, [r4, #0]
 801be68:	2203      	movs	r2, #3
 801be6a:	4650      	mov	r0, sl
 801be6c:	f7e4 fa40 	bl	80002f0 <memchr>
 801be70:	b138      	cbz	r0, 801be82 <_vfiprintf_r+0x17a>
 801be72:	9b04      	ldr	r3, [sp, #16]
 801be74:	eba0 000a 	sub.w	r0, r0, sl
 801be78:	2240      	movs	r2, #64	; 0x40
 801be7a:	4082      	lsls	r2, r0
 801be7c:	4313      	orrs	r3, r2
 801be7e:	3401      	adds	r4, #1
 801be80:	9304      	str	r3, [sp, #16]
 801be82:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be86:	482a      	ldr	r0, [pc, #168]	; (801bf30 <_vfiprintf_r+0x228>)
 801be88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801be8c:	2206      	movs	r2, #6
 801be8e:	f7e4 fa2f 	bl	80002f0 <memchr>
 801be92:	2800      	cmp	r0, #0
 801be94:	d03f      	beq.n	801bf16 <_vfiprintf_r+0x20e>
 801be96:	4b27      	ldr	r3, [pc, #156]	; (801bf34 <_vfiprintf_r+0x22c>)
 801be98:	bb1b      	cbnz	r3, 801bee2 <_vfiprintf_r+0x1da>
 801be9a:	9b03      	ldr	r3, [sp, #12]
 801be9c:	3307      	adds	r3, #7
 801be9e:	f023 0307 	bic.w	r3, r3, #7
 801bea2:	3308      	adds	r3, #8
 801bea4:	9303      	str	r3, [sp, #12]
 801bea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bea8:	443b      	add	r3, r7
 801beaa:	9309      	str	r3, [sp, #36]	; 0x24
 801beac:	e768      	b.n	801bd80 <_vfiprintf_r+0x78>
 801beae:	fb0c 3202 	mla	r2, ip, r2, r3
 801beb2:	460c      	mov	r4, r1
 801beb4:	2001      	movs	r0, #1
 801beb6:	e7a6      	b.n	801be06 <_vfiprintf_r+0xfe>
 801beb8:	2300      	movs	r3, #0
 801beba:	3401      	adds	r4, #1
 801bebc:	9305      	str	r3, [sp, #20]
 801bebe:	4619      	mov	r1, r3
 801bec0:	f04f 0c0a 	mov.w	ip, #10
 801bec4:	4620      	mov	r0, r4
 801bec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801beca:	3a30      	subs	r2, #48	; 0x30
 801becc:	2a09      	cmp	r2, #9
 801bece:	d903      	bls.n	801bed8 <_vfiprintf_r+0x1d0>
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d0c6      	beq.n	801be62 <_vfiprintf_r+0x15a>
 801bed4:	9105      	str	r1, [sp, #20]
 801bed6:	e7c4      	b.n	801be62 <_vfiprintf_r+0x15a>
 801bed8:	fb0c 2101 	mla	r1, ip, r1, r2
 801bedc:	4604      	mov	r4, r0
 801bede:	2301      	movs	r3, #1
 801bee0:	e7f0      	b.n	801bec4 <_vfiprintf_r+0x1bc>
 801bee2:	ab03      	add	r3, sp, #12
 801bee4:	9300      	str	r3, [sp, #0]
 801bee6:	462a      	mov	r2, r5
 801bee8:	4b13      	ldr	r3, [pc, #76]	; (801bf38 <_vfiprintf_r+0x230>)
 801beea:	a904      	add	r1, sp, #16
 801beec:	4630      	mov	r0, r6
 801beee:	f3af 8000 	nop.w
 801bef2:	4607      	mov	r7, r0
 801bef4:	1c78      	adds	r0, r7, #1
 801bef6:	d1d6      	bne.n	801bea6 <_vfiprintf_r+0x19e>
 801bef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801befa:	07d9      	lsls	r1, r3, #31
 801befc:	d405      	bmi.n	801bf0a <_vfiprintf_r+0x202>
 801befe:	89ab      	ldrh	r3, [r5, #12]
 801bf00:	059a      	lsls	r2, r3, #22
 801bf02:	d402      	bmi.n	801bf0a <_vfiprintf_r+0x202>
 801bf04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bf06:	f7ff fe84 	bl	801bc12 <__retarget_lock_release_recursive>
 801bf0a:	89ab      	ldrh	r3, [r5, #12]
 801bf0c:	065b      	lsls	r3, r3, #25
 801bf0e:	f53f af1d 	bmi.w	801bd4c <_vfiprintf_r+0x44>
 801bf12:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bf14:	e71c      	b.n	801bd50 <_vfiprintf_r+0x48>
 801bf16:	ab03      	add	r3, sp, #12
 801bf18:	9300      	str	r3, [sp, #0]
 801bf1a:	462a      	mov	r2, r5
 801bf1c:	4b06      	ldr	r3, [pc, #24]	; (801bf38 <_vfiprintf_r+0x230>)
 801bf1e:	a904      	add	r1, sp, #16
 801bf20:	4630      	mov	r0, r6
 801bf22:	f000 f879 	bl	801c018 <_printf_i>
 801bf26:	e7e4      	b.n	801bef2 <_vfiprintf_r+0x1ea>
 801bf28:	08026ba0 	.word	0x08026ba0
 801bf2c:	08026ba6 	.word	0x08026ba6
 801bf30:	08026baa 	.word	0x08026baa
 801bf34:	00000000 	.word	0x00000000
 801bf38:	0801bce3 	.word	0x0801bce3

0801bf3c <_printf_common>:
 801bf3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf40:	4616      	mov	r6, r2
 801bf42:	4699      	mov	r9, r3
 801bf44:	688a      	ldr	r2, [r1, #8]
 801bf46:	690b      	ldr	r3, [r1, #16]
 801bf48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bf4c:	4293      	cmp	r3, r2
 801bf4e:	bfb8      	it	lt
 801bf50:	4613      	movlt	r3, r2
 801bf52:	6033      	str	r3, [r6, #0]
 801bf54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bf58:	4607      	mov	r7, r0
 801bf5a:	460c      	mov	r4, r1
 801bf5c:	b10a      	cbz	r2, 801bf62 <_printf_common+0x26>
 801bf5e:	3301      	adds	r3, #1
 801bf60:	6033      	str	r3, [r6, #0]
 801bf62:	6823      	ldr	r3, [r4, #0]
 801bf64:	0699      	lsls	r1, r3, #26
 801bf66:	bf42      	ittt	mi
 801bf68:	6833      	ldrmi	r3, [r6, #0]
 801bf6a:	3302      	addmi	r3, #2
 801bf6c:	6033      	strmi	r3, [r6, #0]
 801bf6e:	6825      	ldr	r5, [r4, #0]
 801bf70:	f015 0506 	ands.w	r5, r5, #6
 801bf74:	d106      	bne.n	801bf84 <_printf_common+0x48>
 801bf76:	f104 0a19 	add.w	sl, r4, #25
 801bf7a:	68e3      	ldr	r3, [r4, #12]
 801bf7c:	6832      	ldr	r2, [r6, #0]
 801bf7e:	1a9b      	subs	r3, r3, r2
 801bf80:	42ab      	cmp	r3, r5
 801bf82:	dc26      	bgt.n	801bfd2 <_printf_common+0x96>
 801bf84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bf88:	1e13      	subs	r3, r2, #0
 801bf8a:	6822      	ldr	r2, [r4, #0]
 801bf8c:	bf18      	it	ne
 801bf8e:	2301      	movne	r3, #1
 801bf90:	0692      	lsls	r2, r2, #26
 801bf92:	d42b      	bmi.n	801bfec <_printf_common+0xb0>
 801bf94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bf98:	4649      	mov	r1, r9
 801bf9a:	4638      	mov	r0, r7
 801bf9c:	47c0      	blx	r8
 801bf9e:	3001      	adds	r0, #1
 801bfa0:	d01e      	beq.n	801bfe0 <_printf_common+0xa4>
 801bfa2:	6823      	ldr	r3, [r4, #0]
 801bfa4:	6922      	ldr	r2, [r4, #16]
 801bfa6:	f003 0306 	and.w	r3, r3, #6
 801bfaa:	2b04      	cmp	r3, #4
 801bfac:	bf02      	ittt	eq
 801bfae:	68e5      	ldreq	r5, [r4, #12]
 801bfb0:	6833      	ldreq	r3, [r6, #0]
 801bfb2:	1aed      	subeq	r5, r5, r3
 801bfb4:	68a3      	ldr	r3, [r4, #8]
 801bfb6:	bf0c      	ite	eq
 801bfb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bfbc:	2500      	movne	r5, #0
 801bfbe:	4293      	cmp	r3, r2
 801bfc0:	bfc4      	itt	gt
 801bfc2:	1a9b      	subgt	r3, r3, r2
 801bfc4:	18ed      	addgt	r5, r5, r3
 801bfc6:	2600      	movs	r6, #0
 801bfc8:	341a      	adds	r4, #26
 801bfca:	42b5      	cmp	r5, r6
 801bfcc:	d11a      	bne.n	801c004 <_printf_common+0xc8>
 801bfce:	2000      	movs	r0, #0
 801bfd0:	e008      	b.n	801bfe4 <_printf_common+0xa8>
 801bfd2:	2301      	movs	r3, #1
 801bfd4:	4652      	mov	r2, sl
 801bfd6:	4649      	mov	r1, r9
 801bfd8:	4638      	mov	r0, r7
 801bfda:	47c0      	blx	r8
 801bfdc:	3001      	adds	r0, #1
 801bfde:	d103      	bne.n	801bfe8 <_printf_common+0xac>
 801bfe0:	f04f 30ff 	mov.w	r0, #4294967295
 801bfe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfe8:	3501      	adds	r5, #1
 801bfea:	e7c6      	b.n	801bf7a <_printf_common+0x3e>
 801bfec:	18e1      	adds	r1, r4, r3
 801bfee:	1c5a      	adds	r2, r3, #1
 801bff0:	2030      	movs	r0, #48	; 0x30
 801bff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bff6:	4422      	add	r2, r4
 801bff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c000:	3302      	adds	r3, #2
 801c002:	e7c7      	b.n	801bf94 <_printf_common+0x58>
 801c004:	2301      	movs	r3, #1
 801c006:	4622      	mov	r2, r4
 801c008:	4649      	mov	r1, r9
 801c00a:	4638      	mov	r0, r7
 801c00c:	47c0      	blx	r8
 801c00e:	3001      	adds	r0, #1
 801c010:	d0e6      	beq.n	801bfe0 <_printf_common+0xa4>
 801c012:	3601      	adds	r6, #1
 801c014:	e7d9      	b.n	801bfca <_printf_common+0x8e>
	...

0801c018 <_printf_i>:
 801c018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c01c:	7e0f      	ldrb	r7, [r1, #24]
 801c01e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c020:	2f78      	cmp	r7, #120	; 0x78
 801c022:	4691      	mov	r9, r2
 801c024:	4680      	mov	r8, r0
 801c026:	460c      	mov	r4, r1
 801c028:	469a      	mov	sl, r3
 801c02a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c02e:	d807      	bhi.n	801c040 <_printf_i+0x28>
 801c030:	2f62      	cmp	r7, #98	; 0x62
 801c032:	d80a      	bhi.n	801c04a <_printf_i+0x32>
 801c034:	2f00      	cmp	r7, #0
 801c036:	f000 80d4 	beq.w	801c1e2 <_printf_i+0x1ca>
 801c03a:	2f58      	cmp	r7, #88	; 0x58
 801c03c:	f000 80c0 	beq.w	801c1c0 <_printf_i+0x1a8>
 801c040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c048:	e03a      	b.n	801c0c0 <_printf_i+0xa8>
 801c04a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c04e:	2b15      	cmp	r3, #21
 801c050:	d8f6      	bhi.n	801c040 <_printf_i+0x28>
 801c052:	a101      	add	r1, pc, #4	; (adr r1, 801c058 <_printf_i+0x40>)
 801c054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c058:	0801c0b1 	.word	0x0801c0b1
 801c05c:	0801c0c5 	.word	0x0801c0c5
 801c060:	0801c041 	.word	0x0801c041
 801c064:	0801c041 	.word	0x0801c041
 801c068:	0801c041 	.word	0x0801c041
 801c06c:	0801c041 	.word	0x0801c041
 801c070:	0801c0c5 	.word	0x0801c0c5
 801c074:	0801c041 	.word	0x0801c041
 801c078:	0801c041 	.word	0x0801c041
 801c07c:	0801c041 	.word	0x0801c041
 801c080:	0801c041 	.word	0x0801c041
 801c084:	0801c1c9 	.word	0x0801c1c9
 801c088:	0801c0f1 	.word	0x0801c0f1
 801c08c:	0801c183 	.word	0x0801c183
 801c090:	0801c041 	.word	0x0801c041
 801c094:	0801c041 	.word	0x0801c041
 801c098:	0801c1eb 	.word	0x0801c1eb
 801c09c:	0801c041 	.word	0x0801c041
 801c0a0:	0801c0f1 	.word	0x0801c0f1
 801c0a4:	0801c041 	.word	0x0801c041
 801c0a8:	0801c041 	.word	0x0801c041
 801c0ac:	0801c18b 	.word	0x0801c18b
 801c0b0:	682b      	ldr	r3, [r5, #0]
 801c0b2:	1d1a      	adds	r2, r3, #4
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	602a      	str	r2, [r5, #0]
 801c0b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c0bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c0c0:	2301      	movs	r3, #1
 801c0c2:	e09f      	b.n	801c204 <_printf_i+0x1ec>
 801c0c4:	6820      	ldr	r0, [r4, #0]
 801c0c6:	682b      	ldr	r3, [r5, #0]
 801c0c8:	0607      	lsls	r7, r0, #24
 801c0ca:	f103 0104 	add.w	r1, r3, #4
 801c0ce:	6029      	str	r1, [r5, #0]
 801c0d0:	d501      	bpl.n	801c0d6 <_printf_i+0xbe>
 801c0d2:	681e      	ldr	r6, [r3, #0]
 801c0d4:	e003      	b.n	801c0de <_printf_i+0xc6>
 801c0d6:	0646      	lsls	r6, r0, #25
 801c0d8:	d5fb      	bpl.n	801c0d2 <_printf_i+0xba>
 801c0da:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c0de:	2e00      	cmp	r6, #0
 801c0e0:	da03      	bge.n	801c0ea <_printf_i+0xd2>
 801c0e2:	232d      	movs	r3, #45	; 0x2d
 801c0e4:	4276      	negs	r6, r6
 801c0e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c0ea:	485a      	ldr	r0, [pc, #360]	; (801c254 <_printf_i+0x23c>)
 801c0ec:	230a      	movs	r3, #10
 801c0ee:	e012      	b.n	801c116 <_printf_i+0xfe>
 801c0f0:	682b      	ldr	r3, [r5, #0]
 801c0f2:	6820      	ldr	r0, [r4, #0]
 801c0f4:	1d19      	adds	r1, r3, #4
 801c0f6:	6029      	str	r1, [r5, #0]
 801c0f8:	0605      	lsls	r5, r0, #24
 801c0fa:	d501      	bpl.n	801c100 <_printf_i+0xe8>
 801c0fc:	681e      	ldr	r6, [r3, #0]
 801c0fe:	e002      	b.n	801c106 <_printf_i+0xee>
 801c100:	0641      	lsls	r1, r0, #25
 801c102:	d5fb      	bpl.n	801c0fc <_printf_i+0xe4>
 801c104:	881e      	ldrh	r6, [r3, #0]
 801c106:	4853      	ldr	r0, [pc, #332]	; (801c254 <_printf_i+0x23c>)
 801c108:	2f6f      	cmp	r7, #111	; 0x6f
 801c10a:	bf0c      	ite	eq
 801c10c:	2308      	moveq	r3, #8
 801c10e:	230a      	movne	r3, #10
 801c110:	2100      	movs	r1, #0
 801c112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c116:	6865      	ldr	r5, [r4, #4]
 801c118:	60a5      	str	r5, [r4, #8]
 801c11a:	2d00      	cmp	r5, #0
 801c11c:	bfa2      	ittt	ge
 801c11e:	6821      	ldrge	r1, [r4, #0]
 801c120:	f021 0104 	bicge.w	r1, r1, #4
 801c124:	6021      	strge	r1, [r4, #0]
 801c126:	b90e      	cbnz	r6, 801c12c <_printf_i+0x114>
 801c128:	2d00      	cmp	r5, #0
 801c12a:	d04b      	beq.n	801c1c4 <_printf_i+0x1ac>
 801c12c:	4615      	mov	r5, r2
 801c12e:	fbb6 f1f3 	udiv	r1, r6, r3
 801c132:	fb03 6711 	mls	r7, r3, r1, r6
 801c136:	5dc7      	ldrb	r7, [r0, r7]
 801c138:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c13c:	4637      	mov	r7, r6
 801c13e:	42bb      	cmp	r3, r7
 801c140:	460e      	mov	r6, r1
 801c142:	d9f4      	bls.n	801c12e <_printf_i+0x116>
 801c144:	2b08      	cmp	r3, #8
 801c146:	d10b      	bne.n	801c160 <_printf_i+0x148>
 801c148:	6823      	ldr	r3, [r4, #0]
 801c14a:	07de      	lsls	r6, r3, #31
 801c14c:	d508      	bpl.n	801c160 <_printf_i+0x148>
 801c14e:	6923      	ldr	r3, [r4, #16]
 801c150:	6861      	ldr	r1, [r4, #4]
 801c152:	4299      	cmp	r1, r3
 801c154:	bfde      	ittt	le
 801c156:	2330      	movle	r3, #48	; 0x30
 801c158:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c15c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c160:	1b52      	subs	r2, r2, r5
 801c162:	6122      	str	r2, [r4, #16]
 801c164:	f8cd a000 	str.w	sl, [sp]
 801c168:	464b      	mov	r3, r9
 801c16a:	aa03      	add	r2, sp, #12
 801c16c:	4621      	mov	r1, r4
 801c16e:	4640      	mov	r0, r8
 801c170:	f7ff fee4 	bl	801bf3c <_printf_common>
 801c174:	3001      	adds	r0, #1
 801c176:	d14a      	bne.n	801c20e <_printf_i+0x1f6>
 801c178:	f04f 30ff 	mov.w	r0, #4294967295
 801c17c:	b004      	add	sp, #16
 801c17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c182:	6823      	ldr	r3, [r4, #0]
 801c184:	f043 0320 	orr.w	r3, r3, #32
 801c188:	6023      	str	r3, [r4, #0]
 801c18a:	4833      	ldr	r0, [pc, #204]	; (801c258 <_printf_i+0x240>)
 801c18c:	2778      	movs	r7, #120	; 0x78
 801c18e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c192:	6823      	ldr	r3, [r4, #0]
 801c194:	6829      	ldr	r1, [r5, #0]
 801c196:	061f      	lsls	r7, r3, #24
 801c198:	f851 6b04 	ldr.w	r6, [r1], #4
 801c19c:	d402      	bmi.n	801c1a4 <_printf_i+0x18c>
 801c19e:	065f      	lsls	r7, r3, #25
 801c1a0:	bf48      	it	mi
 801c1a2:	b2b6      	uxthmi	r6, r6
 801c1a4:	07df      	lsls	r7, r3, #31
 801c1a6:	bf48      	it	mi
 801c1a8:	f043 0320 	orrmi.w	r3, r3, #32
 801c1ac:	6029      	str	r1, [r5, #0]
 801c1ae:	bf48      	it	mi
 801c1b0:	6023      	strmi	r3, [r4, #0]
 801c1b2:	b91e      	cbnz	r6, 801c1bc <_printf_i+0x1a4>
 801c1b4:	6823      	ldr	r3, [r4, #0]
 801c1b6:	f023 0320 	bic.w	r3, r3, #32
 801c1ba:	6023      	str	r3, [r4, #0]
 801c1bc:	2310      	movs	r3, #16
 801c1be:	e7a7      	b.n	801c110 <_printf_i+0xf8>
 801c1c0:	4824      	ldr	r0, [pc, #144]	; (801c254 <_printf_i+0x23c>)
 801c1c2:	e7e4      	b.n	801c18e <_printf_i+0x176>
 801c1c4:	4615      	mov	r5, r2
 801c1c6:	e7bd      	b.n	801c144 <_printf_i+0x12c>
 801c1c8:	682b      	ldr	r3, [r5, #0]
 801c1ca:	6826      	ldr	r6, [r4, #0]
 801c1cc:	6961      	ldr	r1, [r4, #20]
 801c1ce:	1d18      	adds	r0, r3, #4
 801c1d0:	6028      	str	r0, [r5, #0]
 801c1d2:	0635      	lsls	r5, r6, #24
 801c1d4:	681b      	ldr	r3, [r3, #0]
 801c1d6:	d501      	bpl.n	801c1dc <_printf_i+0x1c4>
 801c1d8:	6019      	str	r1, [r3, #0]
 801c1da:	e002      	b.n	801c1e2 <_printf_i+0x1ca>
 801c1dc:	0670      	lsls	r0, r6, #25
 801c1de:	d5fb      	bpl.n	801c1d8 <_printf_i+0x1c0>
 801c1e0:	8019      	strh	r1, [r3, #0]
 801c1e2:	2300      	movs	r3, #0
 801c1e4:	6123      	str	r3, [r4, #16]
 801c1e6:	4615      	mov	r5, r2
 801c1e8:	e7bc      	b.n	801c164 <_printf_i+0x14c>
 801c1ea:	682b      	ldr	r3, [r5, #0]
 801c1ec:	1d1a      	adds	r2, r3, #4
 801c1ee:	602a      	str	r2, [r5, #0]
 801c1f0:	681d      	ldr	r5, [r3, #0]
 801c1f2:	6862      	ldr	r2, [r4, #4]
 801c1f4:	2100      	movs	r1, #0
 801c1f6:	4628      	mov	r0, r5
 801c1f8:	f7e4 f87a 	bl	80002f0 <memchr>
 801c1fc:	b108      	cbz	r0, 801c202 <_printf_i+0x1ea>
 801c1fe:	1b40      	subs	r0, r0, r5
 801c200:	6060      	str	r0, [r4, #4]
 801c202:	6863      	ldr	r3, [r4, #4]
 801c204:	6123      	str	r3, [r4, #16]
 801c206:	2300      	movs	r3, #0
 801c208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c20c:	e7aa      	b.n	801c164 <_printf_i+0x14c>
 801c20e:	6923      	ldr	r3, [r4, #16]
 801c210:	462a      	mov	r2, r5
 801c212:	4649      	mov	r1, r9
 801c214:	4640      	mov	r0, r8
 801c216:	47d0      	blx	sl
 801c218:	3001      	adds	r0, #1
 801c21a:	d0ad      	beq.n	801c178 <_printf_i+0x160>
 801c21c:	6823      	ldr	r3, [r4, #0]
 801c21e:	079b      	lsls	r3, r3, #30
 801c220:	d413      	bmi.n	801c24a <_printf_i+0x232>
 801c222:	68e0      	ldr	r0, [r4, #12]
 801c224:	9b03      	ldr	r3, [sp, #12]
 801c226:	4298      	cmp	r0, r3
 801c228:	bfb8      	it	lt
 801c22a:	4618      	movlt	r0, r3
 801c22c:	e7a6      	b.n	801c17c <_printf_i+0x164>
 801c22e:	2301      	movs	r3, #1
 801c230:	4632      	mov	r2, r6
 801c232:	4649      	mov	r1, r9
 801c234:	4640      	mov	r0, r8
 801c236:	47d0      	blx	sl
 801c238:	3001      	adds	r0, #1
 801c23a:	d09d      	beq.n	801c178 <_printf_i+0x160>
 801c23c:	3501      	adds	r5, #1
 801c23e:	68e3      	ldr	r3, [r4, #12]
 801c240:	9903      	ldr	r1, [sp, #12]
 801c242:	1a5b      	subs	r3, r3, r1
 801c244:	42ab      	cmp	r3, r5
 801c246:	dcf2      	bgt.n	801c22e <_printf_i+0x216>
 801c248:	e7eb      	b.n	801c222 <_printf_i+0x20a>
 801c24a:	2500      	movs	r5, #0
 801c24c:	f104 0619 	add.w	r6, r4, #25
 801c250:	e7f5      	b.n	801c23e <_printf_i+0x226>
 801c252:	bf00      	nop
 801c254:	08026bb1 	.word	0x08026bb1
 801c258:	08026bc2 	.word	0x08026bc2

0801c25c <std>:
 801c25c:	2300      	movs	r3, #0
 801c25e:	b510      	push	{r4, lr}
 801c260:	4604      	mov	r4, r0
 801c262:	e9c0 3300 	strd	r3, r3, [r0]
 801c266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c26a:	6083      	str	r3, [r0, #8]
 801c26c:	8181      	strh	r1, [r0, #12]
 801c26e:	6643      	str	r3, [r0, #100]	; 0x64
 801c270:	81c2      	strh	r2, [r0, #14]
 801c272:	6183      	str	r3, [r0, #24]
 801c274:	4619      	mov	r1, r3
 801c276:	2208      	movs	r2, #8
 801c278:	305c      	adds	r0, #92	; 0x5c
 801c27a:	f000 f991 	bl	801c5a0 <memset>
 801c27e:	4b05      	ldr	r3, [pc, #20]	; (801c294 <std+0x38>)
 801c280:	6263      	str	r3, [r4, #36]	; 0x24
 801c282:	4b05      	ldr	r3, [pc, #20]	; (801c298 <std+0x3c>)
 801c284:	62a3      	str	r3, [r4, #40]	; 0x28
 801c286:	4b05      	ldr	r3, [pc, #20]	; (801c29c <std+0x40>)
 801c288:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c28a:	4b05      	ldr	r3, [pc, #20]	; (801c2a0 <std+0x44>)
 801c28c:	6224      	str	r4, [r4, #32]
 801c28e:	6323      	str	r3, [r4, #48]	; 0x30
 801c290:	bd10      	pop	{r4, pc}
 801c292:	bf00      	nop
 801c294:	0801c3bd 	.word	0x0801c3bd
 801c298:	0801c3df 	.word	0x0801c3df
 801c29c:	0801c417 	.word	0x0801c417
 801c2a0:	0801c43b 	.word	0x0801c43b

0801c2a4 <stdio_exit_handler>:
 801c2a4:	4a02      	ldr	r2, [pc, #8]	; (801c2b0 <stdio_exit_handler+0xc>)
 801c2a6:	4903      	ldr	r1, [pc, #12]	; (801c2b4 <stdio_exit_handler+0x10>)
 801c2a8:	4803      	ldr	r0, [pc, #12]	; (801c2b8 <stdio_exit_handler+0x14>)
 801c2aa:	f000 b869 	b.w	801c380 <_fwalk_sglue>
 801c2ae:	bf00      	nop
 801c2b0:	2000092c 	.word	0x2000092c
 801c2b4:	0801c759 	.word	0x0801c759
 801c2b8:	200008dc 	.word	0x200008dc

0801c2bc <cleanup_stdio>:
 801c2bc:	6841      	ldr	r1, [r0, #4]
 801c2be:	4b0c      	ldr	r3, [pc, #48]	; (801c2f0 <cleanup_stdio+0x34>)
 801c2c0:	4299      	cmp	r1, r3
 801c2c2:	b510      	push	{r4, lr}
 801c2c4:	4604      	mov	r4, r0
 801c2c6:	d001      	beq.n	801c2cc <cleanup_stdio+0x10>
 801c2c8:	f000 fa46 	bl	801c758 <_fflush_r>
 801c2cc:	68a1      	ldr	r1, [r4, #8]
 801c2ce:	4b09      	ldr	r3, [pc, #36]	; (801c2f4 <cleanup_stdio+0x38>)
 801c2d0:	4299      	cmp	r1, r3
 801c2d2:	d002      	beq.n	801c2da <cleanup_stdio+0x1e>
 801c2d4:	4620      	mov	r0, r4
 801c2d6:	f000 fa3f 	bl	801c758 <_fflush_r>
 801c2da:	68e1      	ldr	r1, [r4, #12]
 801c2dc:	4b06      	ldr	r3, [pc, #24]	; (801c2f8 <cleanup_stdio+0x3c>)
 801c2de:	4299      	cmp	r1, r3
 801c2e0:	d004      	beq.n	801c2ec <cleanup_stdio+0x30>
 801c2e2:	4620      	mov	r0, r4
 801c2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c2e8:	f000 ba36 	b.w	801c758 <_fflush_r>
 801c2ec:	bd10      	pop	{r4, pc}
 801c2ee:	bf00      	nop
 801c2f0:	20018fe0 	.word	0x20018fe0
 801c2f4:	20019048 	.word	0x20019048
 801c2f8:	200190b0 	.word	0x200190b0

0801c2fc <global_stdio_init.part.0>:
 801c2fc:	b510      	push	{r4, lr}
 801c2fe:	4b0b      	ldr	r3, [pc, #44]	; (801c32c <global_stdio_init.part.0+0x30>)
 801c300:	4c0b      	ldr	r4, [pc, #44]	; (801c330 <global_stdio_init.part.0+0x34>)
 801c302:	4a0c      	ldr	r2, [pc, #48]	; (801c334 <global_stdio_init.part.0+0x38>)
 801c304:	601a      	str	r2, [r3, #0]
 801c306:	4620      	mov	r0, r4
 801c308:	2200      	movs	r2, #0
 801c30a:	2104      	movs	r1, #4
 801c30c:	f7ff ffa6 	bl	801c25c <std>
 801c310:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801c314:	2201      	movs	r2, #1
 801c316:	2109      	movs	r1, #9
 801c318:	f7ff ffa0 	bl	801c25c <std>
 801c31c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801c320:	2202      	movs	r2, #2
 801c322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c326:	2112      	movs	r1, #18
 801c328:	f7ff bf98 	b.w	801c25c <std>
 801c32c:	20019118 	.word	0x20019118
 801c330:	20018fe0 	.word	0x20018fe0
 801c334:	0801c2a5 	.word	0x0801c2a5

0801c338 <__sfp_lock_acquire>:
 801c338:	4801      	ldr	r0, [pc, #4]	; (801c340 <__sfp_lock_acquire+0x8>)
 801c33a:	f7ff bc69 	b.w	801bc10 <__retarget_lock_acquire_recursive>
 801c33e:	bf00      	nop
 801c340:	20018fdd 	.word	0x20018fdd

0801c344 <__sfp_lock_release>:
 801c344:	4801      	ldr	r0, [pc, #4]	; (801c34c <__sfp_lock_release+0x8>)
 801c346:	f7ff bc64 	b.w	801bc12 <__retarget_lock_release_recursive>
 801c34a:	bf00      	nop
 801c34c:	20018fdd 	.word	0x20018fdd

0801c350 <__sinit>:
 801c350:	b510      	push	{r4, lr}
 801c352:	4604      	mov	r4, r0
 801c354:	f7ff fff0 	bl	801c338 <__sfp_lock_acquire>
 801c358:	6a23      	ldr	r3, [r4, #32]
 801c35a:	b11b      	cbz	r3, 801c364 <__sinit+0x14>
 801c35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c360:	f7ff bff0 	b.w	801c344 <__sfp_lock_release>
 801c364:	4b04      	ldr	r3, [pc, #16]	; (801c378 <__sinit+0x28>)
 801c366:	6223      	str	r3, [r4, #32]
 801c368:	4b04      	ldr	r3, [pc, #16]	; (801c37c <__sinit+0x2c>)
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d1f5      	bne.n	801c35c <__sinit+0xc>
 801c370:	f7ff ffc4 	bl	801c2fc <global_stdio_init.part.0>
 801c374:	e7f2      	b.n	801c35c <__sinit+0xc>
 801c376:	bf00      	nop
 801c378:	0801c2bd 	.word	0x0801c2bd
 801c37c:	20019118 	.word	0x20019118

0801c380 <_fwalk_sglue>:
 801c380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c384:	4607      	mov	r7, r0
 801c386:	4688      	mov	r8, r1
 801c388:	4614      	mov	r4, r2
 801c38a:	2600      	movs	r6, #0
 801c38c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c390:	f1b9 0901 	subs.w	r9, r9, #1
 801c394:	d505      	bpl.n	801c3a2 <_fwalk_sglue+0x22>
 801c396:	6824      	ldr	r4, [r4, #0]
 801c398:	2c00      	cmp	r4, #0
 801c39a:	d1f7      	bne.n	801c38c <_fwalk_sglue+0xc>
 801c39c:	4630      	mov	r0, r6
 801c39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c3a2:	89ab      	ldrh	r3, [r5, #12]
 801c3a4:	2b01      	cmp	r3, #1
 801c3a6:	d907      	bls.n	801c3b8 <_fwalk_sglue+0x38>
 801c3a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c3ac:	3301      	adds	r3, #1
 801c3ae:	d003      	beq.n	801c3b8 <_fwalk_sglue+0x38>
 801c3b0:	4629      	mov	r1, r5
 801c3b2:	4638      	mov	r0, r7
 801c3b4:	47c0      	blx	r8
 801c3b6:	4306      	orrs	r6, r0
 801c3b8:	3568      	adds	r5, #104	; 0x68
 801c3ba:	e7e9      	b.n	801c390 <_fwalk_sglue+0x10>

0801c3bc <__sread>:
 801c3bc:	b510      	push	{r4, lr}
 801c3be:	460c      	mov	r4, r1
 801c3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c3c4:	f7f3 f9ec 	bl	800f7a0 <_read_r>
 801c3c8:	2800      	cmp	r0, #0
 801c3ca:	bfab      	itete	ge
 801c3cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c3ce:	89a3      	ldrhlt	r3, [r4, #12]
 801c3d0:	181b      	addge	r3, r3, r0
 801c3d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c3d6:	bfac      	ite	ge
 801c3d8:	6563      	strge	r3, [r4, #84]	; 0x54
 801c3da:	81a3      	strhlt	r3, [r4, #12]
 801c3dc:	bd10      	pop	{r4, pc}

0801c3de <__swrite>:
 801c3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3e2:	461f      	mov	r7, r3
 801c3e4:	898b      	ldrh	r3, [r1, #12]
 801c3e6:	05db      	lsls	r3, r3, #23
 801c3e8:	4605      	mov	r5, r0
 801c3ea:	460c      	mov	r4, r1
 801c3ec:	4616      	mov	r6, r2
 801c3ee:	d505      	bpl.n	801c3fc <__swrite+0x1e>
 801c3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c3f4:	2302      	movs	r3, #2
 801c3f6:	2200      	movs	r2, #0
 801c3f8:	f7f3 f9e2 	bl	800f7c0 <_lseek_r>
 801c3fc:	89a3      	ldrh	r3, [r4, #12]
 801c3fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c406:	81a3      	strh	r3, [r4, #12]
 801c408:	4632      	mov	r2, r6
 801c40a:	463b      	mov	r3, r7
 801c40c:	4628      	mov	r0, r5
 801c40e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c412:	f7f3 b9e5 	b.w	800f7e0 <_write_r>

0801c416 <__sseek>:
 801c416:	b510      	push	{r4, lr}
 801c418:	460c      	mov	r4, r1
 801c41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c41e:	f7f3 f9cf 	bl	800f7c0 <_lseek_r>
 801c422:	1c43      	adds	r3, r0, #1
 801c424:	89a3      	ldrh	r3, [r4, #12]
 801c426:	bf15      	itete	ne
 801c428:	6560      	strne	r0, [r4, #84]	; 0x54
 801c42a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c42e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c432:	81a3      	strheq	r3, [r4, #12]
 801c434:	bf18      	it	ne
 801c436:	81a3      	strhne	r3, [r4, #12]
 801c438:	bd10      	pop	{r4, pc}

0801c43a <__sclose>:
 801c43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c43e:	f7f3 b9df 	b.w	800f800 <_close_r>

0801c442 <__swbuf_r>:
 801c442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c444:	460e      	mov	r6, r1
 801c446:	4614      	mov	r4, r2
 801c448:	4605      	mov	r5, r0
 801c44a:	b118      	cbz	r0, 801c454 <__swbuf_r+0x12>
 801c44c:	6a03      	ldr	r3, [r0, #32]
 801c44e:	b90b      	cbnz	r3, 801c454 <__swbuf_r+0x12>
 801c450:	f7ff ff7e 	bl	801c350 <__sinit>
 801c454:	69a3      	ldr	r3, [r4, #24]
 801c456:	60a3      	str	r3, [r4, #8]
 801c458:	89a3      	ldrh	r3, [r4, #12]
 801c45a:	071a      	lsls	r2, r3, #28
 801c45c:	d525      	bpl.n	801c4aa <__swbuf_r+0x68>
 801c45e:	6923      	ldr	r3, [r4, #16]
 801c460:	b31b      	cbz	r3, 801c4aa <__swbuf_r+0x68>
 801c462:	6823      	ldr	r3, [r4, #0]
 801c464:	6922      	ldr	r2, [r4, #16]
 801c466:	1a98      	subs	r0, r3, r2
 801c468:	6963      	ldr	r3, [r4, #20]
 801c46a:	b2f6      	uxtb	r6, r6
 801c46c:	4283      	cmp	r3, r0
 801c46e:	4637      	mov	r7, r6
 801c470:	dc04      	bgt.n	801c47c <__swbuf_r+0x3a>
 801c472:	4621      	mov	r1, r4
 801c474:	4628      	mov	r0, r5
 801c476:	f000 f96f 	bl	801c758 <_fflush_r>
 801c47a:	b9e0      	cbnz	r0, 801c4b6 <__swbuf_r+0x74>
 801c47c:	68a3      	ldr	r3, [r4, #8]
 801c47e:	3b01      	subs	r3, #1
 801c480:	60a3      	str	r3, [r4, #8]
 801c482:	6823      	ldr	r3, [r4, #0]
 801c484:	1c5a      	adds	r2, r3, #1
 801c486:	6022      	str	r2, [r4, #0]
 801c488:	701e      	strb	r6, [r3, #0]
 801c48a:	6962      	ldr	r2, [r4, #20]
 801c48c:	1c43      	adds	r3, r0, #1
 801c48e:	429a      	cmp	r2, r3
 801c490:	d004      	beq.n	801c49c <__swbuf_r+0x5a>
 801c492:	89a3      	ldrh	r3, [r4, #12]
 801c494:	07db      	lsls	r3, r3, #31
 801c496:	d506      	bpl.n	801c4a6 <__swbuf_r+0x64>
 801c498:	2e0a      	cmp	r6, #10
 801c49a:	d104      	bne.n	801c4a6 <__swbuf_r+0x64>
 801c49c:	4621      	mov	r1, r4
 801c49e:	4628      	mov	r0, r5
 801c4a0:	f000 f95a 	bl	801c758 <_fflush_r>
 801c4a4:	b938      	cbnz	r0, 801c4b6 <__swbuf_r+0x74>
 801c4a6:	4638      	mov	r0, r7
 801c4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c4aa:	4621      	mov	r1, r4
 801c4ac:	4628      	mov	r0, r5
 801c4ae:	f000 f805 	bl	801c4bc <__swsetup_r>
 801c4b2:	2800      	cmp	r0, #0
 801c4b4:	d0d5      	beq.n	801c462 <__swbuf_r+0x20>
 801c4b6:	f04f 37ff 	mov.w	r7, #4294967295
 801c4ba:	e7f4      	b.n	801c4a6 <__swbuf_r+0x64>

0801c4bc <__swsetup_r>:
 801c4bc:	b538      	push	{r3, r4, r5, lr}
 801c4be:	4b2a      	ldr	r3, [pc, #168]	; (801c568 <__swsetup_r+0xac>)
 801c4c0:	4605      	mov	r5, r0
 801c4c2:	6818      	ldr	r0, [r3, #0]
 801c4c4:	460c      	mov	r4, r1
 801c4c6:	b118      	cbz	r0, 801c4d0 <__swsetup_r+0x14>
 801c4c8:	6a03      	ldr	r3, [r0, #32]
 801c4ca:	b90b      	cbnz	r3, 801c4d0 <__swsetup_r+0x14>
 801c4cc:	f7ff ff40 	bl	801c350 <__sinit>
 801c4d0:	89a3      	ldrh	r3, [r4, #12]
 801c4d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c4d6:	0718      	lsls	r0, r3, #28
 801c4d8:	d422      	bmi.n	801c520 <__swsetup_r+0x64>
 801c4da:	06d9      	lsls	r1, r3, #27
 801c4dc:	d407      	bmi.n	801c4ee <__swsetup_r+0x32>
 801c4de:	2309      	movs	r3, #9
 801c4e0:	602b      	str	r3, [r5, #0]
 801c4e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c4e6:	81a3      	strh	r3, [r4, #12]
 801c4e8:	f04f 30ff 	mov.w	r0, #4294967295
 801c4ec:	e034      	b.n	801c558 <__swsetup_r+0x9c>
 801c4ee:	0758      	lsls	r0, r3, #29
 801c4f0:	d512      	bpl.n	801c518 <__swsetup_r+0x5c>
 801c4f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c4f4:	b141      	cbz	r1, 801c508 <__swsetup_r+0x4c>
 801c4f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c4fa:	4299      	cmp	r1, r3
 801c4fc:	d002      	beq.n	801c504 <__swsetup_r+0x48>
 801c4fe:	4628      	mov	r0, r5
 801c500:	f7ff fb90 	bl	801bc24 <_free_r>
 801c504:	2300      	movs	r3, #0
 801c506:	6363      	str	r3, [r4, #52]	; 0x34
 801c508:	89a3      	ldrh	r3, [r4, #12]
 801c50a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c50e:	81a3      	strh	r3, [r4, #12]
 801c510:	2300      	movs	r3, #0
 801c512:	6063      	str	r3, [r4, #4]
 801c514:	6923      	ldr	r3, [r4, #16]
 801c516:	6023      	str	r3, [r4, #0]
 801c518:	89a3      	ldrh	r3, [r4, #12]
 801c51a:	f043 0308 	orr.w	r3, r3, #8
 801c51e:	81a3      	strh	r3, [r4, #12]
 801c520:	6923      	ldr	r3, [r4, #16]
 801c522:	b94b      	cbnz	r3, 801c538 <__swsetup_r+0x7c>
 801c524:	89a3      	ldrh	r3, [r4, #12]
 801c526:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c52a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c52e:	d003      	beq.n	801c538 <__swsetup_r+0x7c>
 801c530:	4621      	mov	r1, r4
 801c532:	4628      	mov	r0, r5
 801c534:	f000 f95e 	bl	801c7f4 <__smakebuf_r>
 801c538:	89a0      	ldrh	r0, [r4, #12]
 801c53a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c53e:	f010 0301 	ands.w	r3, r0, #1
 801c542:	d00a      	beq.n	801c55a <__swsetup_r+0x9e>
 801c544:	2300      	movs	r3, #0
 801c546:	60a3      	str	r3, [r4, #8]
 801c548:	6963      	ldr	r3, [r4, #20]
 801c54a:	425b      	negs	r3, r3
 801c54c:	61a3      	str	r3, [r4, #24]
 801c54e:	6923      	ldr	r3, [r4, #16]
 801c550:	b943      	cbnz	r3, 801c564 <__swsetup_r+0xa8>
 801c552:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c556:	d1c4      	bne.n	801c4e2 <__swsetup_r+0x26>
 801c558:	bd38      	pop	{r3, r4, r5, pc}
 801c55a:	0781      	lsls	r1, r0, #30
 801c55c:	bf58      	it	pl
 801c55e:	6963      	ldrpl	r3, [r4, #20]
 801c560:	60a3      	str	r3, [r4, #8]
 801c562:	e7f4      	b.n	801c54e <__swsetup_r+0x92>
 801c564:	2000      	movs	r0, #0
 801c566:	e7f7      	b.n	801c558 <__swsetup_r+0x9c>
 801c568:	20000928 	.word	0x20000928

0801c56c <memmove>:
 801c56c:	4288      	cmp	r0, r1
 801c56e:	b510      	push	{r4, lr}
 801c570:	eb01 0402 	add.w	r4, r1, r2
 801c574:	d902      	bls.n	801c57c <memmove+0x10>
 801c576:	4284      	cmp	r4, r0
 801c578:	4623      	mov	r3, r4
 801c57a:	d807      	bhi.n	801c58c <memmove+0x20>
 801c57c:	1e43      	subs	r3, r0, #1
 801c57e:	42a1      	cmp	r1, r4
 801c580:	d008      	beq.n	801c594 <memmove+0x28>
 801c582:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c586:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c58a:	e7f8      	b.n	801c57e <memmove+0x12>
 801c58c:	4402      	add	r2, r0
 801c58e:	4601      	mov	r1, r0
 801c590:	428a      	cmp	r2, r1
 801c592:	d100      	bne.n	801c596 <memmove+0x2a>
 801c594:	bd10      	pop	{r4, pc}
 801c596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c59a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c59e:	e7f7      	b.n	801c590 <memmove+0x24>

0801c5a0 <memset>:
 801c5a0:	4402      	add	r2, r0
 801c5a2:	4603      	mov	r3, r0
 801c5a4:	4293      	cmp	r3, r2
 801c5a6:	d100      	bne.n	801c5aa <memset+0xa>
 801c5a8:	4770      	bx	lr
 801c5aa:	f803 1b01 	strb.w	r1, [r3], #1
 801c5ae:	e7f9      	b.n	801c5a4 <memset+0x4>

0801c5b0 <_raise_r>:
 801c5b0:	291f      	cmp	r1, #31
 801c5b2:	b538      	push	{r3, r4, r5, lr}
 801c5b4:	4604      	mov	r4, r0
 801c5b6:	460d      	mov	r5, r1
 801c5b8:	d904      	bls.n	801c5c4 <_raise_r+0x14>
 801c5ba:	2316      	movs	r3, #22
 801c5bc:	6003      	str	r3, [r0, #0]
 801c5be:	f04f 30ff 	mov.w	r0, #4294967295
 801c5c2:	bd38      	pop	{r3, r4, r5, pc}
 801c5c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801c5c6:	b112      	cbz	r2, 801c5ce <_raise_r+0x1e>
 801c5c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c5cc:	b94b      	cbnz	r3, 801c5e2 <_raise_r+0x32>
 801c5ce:	4620      	mov	r0, r4
 801c5d0:	f000 f830 	bl	801c634 <_getpid_r>
 801c5d4:	462a      	mov	r2, r5
 801c5d6:	4601      	mov	r1, r0
 801c5d8:	4620      	mov	r0, r4
 801c5da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c5de:	f000 b817 	b.w	801c610 <_kill_r>
 801c5e2:	2b01      	cmp	r3, #1
 801c5e4:	d00a      	beq.n	801c5fc <_raise_r+0x4c>
 801c5e6:	1c59      	adds	r1, r3, #1
 801c5e8:	d103      	bne.n	801c5f2 <_raise_r+0x42>
 801c5ea:	2316      	movs	r3, #22
 801c5ec:	6003      	str	r3, [r0, #0]
 801c5ee:	2001      	movs	r0, #1
 801c5f0:	e7e7      	b.n	801c5c2 <_raise_r+0x12>
 801c5f2:	2400      	movs	r4, #0
 801c5f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c5f8:	4628      	mov	r0, r5
 801c5fa:	4798      	blx	r3
 801c5fc:	2000      	movs	r0, #0
 801c5fe:	e7e0      	b.n	801c5c2 <_raise_r+0x12>

0801c600 <raise>:
 801c600:	4b02      	ldr	r3, [pc, #8]	; (801c60c <raise+0xc>)
 801c602:	4601      	mov	r1, r0
 801c604:	6818      	ldr	r0, [r3, #0]
 801c606:	f7ff bfd3 	b.w	801c5b0 <_raise_r>
 801c60a:	bf00      	nop
 801c60c:	20000928 	.word	0x20000928

0801c610 <_kill_r>:
 801c610:	b538      	push	{r3, r4, r5, lr}
 801c612:	4d07      	ldr	r5, [pc, #28]	; (801c630 <_kill_r+0x20>)
 801c614:	2300      	movs	r3, #0
 801c616:	4604      	mov	r4, r0
 801c618:	4608      	mov	r0, r1
 801c61a:	4611      	mov	r1, r2
 801c61c:	602b      	str	r3, [r5, #0]
 801c61e:	f7f3 f947 	bl	800f8b0 <_kill>
 801c622:	1c43      	adds	r3, r0, #1
 801c624:	d102      	bne.n	801c62c <_kill_r+0x1c>
 801c626:	682b      	ldr	r3, [r5, #0]
 801c628:	b103      	cbz	r3, 801c62c <_kill_r+0x1c>
 801c62a:	6023      	str	r3, [r4, #0]
 801c62c:	bd38      	pop	{r3, r4, r5, pc}
 801c62e:	bf00      	nop
 801c630:	2001911c 	.word	0x2001911c

0801c634 <_getpid_r>:
 801c634:	f7f3 b94c 	b.w	800f8d0 <_getpid>

0801c638 <memcpy>:
 801c638:	440a      	add	r2, r1
 801c63a:	4291      	cmp	r1, r2
 801c63c:	f100 33ff 	add.w	r3, r0, #4294967295
 801c640:	d100      	bne.n	801c644 <memcpy+0xc>
 801c642:	4770      	bx	lr
 801c644:	b510      	push	{r4, lr}
 801c646:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c64a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c64e:	4291      	cmp	r1, r2
 801c650:	d1f9      	bne.n	801c646 <memcpy+0xe>
 801c652:	bd10      	pop	{r4, pc}

0801c654 <__sflush_r>:
 801c654:	898a      	ldrh	r2, [r1, #12]
 801c656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c658:	4605      	mov	r5, r0
 801c65a:	0710      	lsls	r0, r2, #28
 801c65c:	460c      	mov	r4, r1
 801c65e:	d457      	bmi.n	801c710 <__sflush_r+0xbc>
 801c660:	684b      	ldr	r3, [r1, #4]
 801c662:	2b00      	cmp	r3, #0
 801c664:	dc04      	bgt.n	801c670 <__sflush_r+0x1c>
 801c666:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c668:	2b00      	cmp	r3, #0
 801c66a:	dc01      	bgt.n	801c670 <__sflush_r+0x1c>
 801c66c:	2000      	movs	r0, #0
 801c66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c672:	2e00      	cmp	r6, #0
 801c674:	d0fa      	beq.n	801c66c <__sflush_r+0x18>
 801c676:	2300      	movs	r3, #0
 801c678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c67c:	682f      	ldr	r7, [r5, #0]
 801c67e:	6a21      	ldr	r1, [r4, #32]
 801c680:	602b      	str	r3, [r5, #0]
 801c682:	d032      	beq.n	801c6ea <__sflush_r+0x96>
 801c684:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c686:	89a3      	ldrh	r3, [r4, #12]
 801c688:	075a      	lsls	r2, r3, #29
 801c68a:	d505      	bpl.n	801c698 <__sflush_r+0x44>
 801c68c:	6863      	ldr	r3, [r4, #4]
 801c68e:	1ac0      	subs	r0, r0, r3
 801c690:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c692:	b10b      	cbz	r3, 801c698 <__sflush_r+0x44>
 801c694:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c696:	1ac0      	subs	r0, r0, r3
 801c698:	2300      	movs	r3, #0
 801c69a:	4602      	mov	r2, r0
 801c69c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c69e:	6a21      	ldr	r1, [r4, #32]
 801c6a0:	4628      	mov	r0, r5
 801c6a2:	47b0      	blx	r6
 801c6a4:	1c43      	adds	r3, r0, #1
 801c6a6:	89a3      	ldrh	r3, [r4, #12]
 801c6a8:	d106      	bne.n	801c6b8 <__sflush_r+0x64>
 801c6aa:	6829      	ldr	r1, [r5, #0]
 801c6ac:	291d      	cmp	r1, #29
 801c6ae:	d82b      	bhi.n	801c708 <__sflush_r+0xb4>
 801c6b0:	4a28      	ldr	r2, [pc, #160]	; (801c754 <__sflush_r+0x100>)
 801c6b2:	410a      	asrs	r2, r1
 801c6b4:	07d6      	lsls	r6, r2, #31
 801c6b6:	d427      	bmi.n	801c708 <__sflush_r+0xb4>
 801c6b8:	2200      	movs	r2, #0
 801c6ba:	6062      	str	r2, [r4, #4]
 801c6bc:	04d9      	lsls	r1, r3, #19
 801c6be:	6922      	ldr	r2, [r4, #16]
 801c6c0:	6022      	str	r2, [r4, #0]
 801c6c2:	d504      	bpl.n	801c6ce <__sflush_r+0x7a>
 801c6c4:	1c42      	adds	r2, r0, #1
 801c6c6:	d101      	bne.n	801c6cc <__sflush_r+0x78>
 801c6c8:	682b      	ldr	r3, [r5, #0]
 801c6ca:	b903      	cbnz	r3, 801c6ce <__sflush_r+0x7a>
 801c6cc:	6560      	str	r0, [r4, #84]	; 0x54
 801c6ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c6d0:	602f      	str	r7, [r5, #0]
 801c6d2:	2900      	cmp	r1, #0
 801c6d4:	d0ca      	beq.n	801c66c <__sflush_r+0x18>
 801c6d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c6da:	4299      	cmp	r1, r3
 801c6dc:	d002      	beq.n	801c6e4 <__sflush_r+0x90>
 801c6de:	4628      	mov	r0, r5
 801c6e0:	f7ff faa0 	bl	801bc24 <_free_r>
 801c6e4:	2000      	movs	r0, #0
 801c6e6:	6360      	str	r0, [r4, #52]	; 0x34
 801c6e8:	e7c1      	b.n	801c66e <__sflush_r+0x1a>
 801c6ea:	2301      	movs	r3, #1
 801c6ec:	4628      	mov	r0, r5
 801c6ee:	47b0      	blx	r6
 801c6f0:	1c41      	adds	r1, r0, #1
 801c6f2:	d1c8      	bne.n	801c686 <__sflush_r+0x32>
 801c6f4:	682b      	ldr	r3, [r5, #0]
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d0c5      	beq.n	801c686 <__sflush_r+0x32>
 801c6fa:	2b1d      	cmp	r3, #29
 801c6fc:	d001      	beq.n	801c702 <__sflush_r+0xae>
 801c6fe:	2b16      	cmp	r3, #22
 801c700:	d101      	bne.n	801c706 <__sflush_r+0xb2>
 801c702:	602f      	str	r7, [r5, #0]
 801c704:	e7b2      	b.n	801c66c <__sflush_r+0x18>
 801c706:	89a3      	ldrh	r3, [r4, #12]
 801c708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c70c:	81a3      	strh	r3, [r4, #12]
 801c70e:	e7ae      	b.n	801c66e <__sflush_r+0x1a>
 801c710:	690f      	ldr	r7, [r1, #16]
 801c712:	2f00      	cmp	r7, #0
 801c714:	d0aa      	beq.n	801c66c <__sflush_r+0x18>
 801c716:	0793      	lsls	r3, r2, #30
 801c718:	680e      	ldr	r6, [r1, #0]
 801c71a:	bf08      	it	eq
 801c71c:	694b      	ldreq	r3, [r1, #20]
 801c71e:	600f      	str	r7, [r1, #0]
 801c720:	bf18      	it	ne
 801c722:	2300      	movne	r3, #0
 801c724:	1bf6      	subs	r6, r6, r7
 801c726:	608b      	str	r3, [r1, #8]
 801c728:	2e00      	cmp	r6, #0
 801c72a:	dd9f      	ble.n	801c66c <__sflush_r+0x18>
 801c72c:	6a21      	ldr	r1, [r4, #32]
 801c72e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801c732:	4633      	mov	r3, r6
 801c734:	463a      	mov	r2, r7
 801c736:	4628      	mov	r0, r5
 801c738:	47e0      	blx	ip
 801c73a:	2800      	cmp	r0, #0
 801c73c:	dc06      	bgt.n	801c74c <__sflush_r+0xf8>
 801c73e:	89a3      	ldrh	r3, [r4, #12]
 801c740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c744:	81a3      	strh	r3, [r4, #12]
 801c746:	f04f 30ff 	mov.w	r0, #4294967295
 801c74a:	e790      	b.n	801c66e <__sflush_r+0x1a>
 801c74c:	4407      	add	r7, r0
 801c74e:	1a36      	subs	r6, r6, r0
 801c750:	e7ea      	b.n	801c728 <__sflush_r+0xd4>
 801c752:	bf00      	nop
 801c754:	dfbffffe 	.word	0xdfbffffe

0801c758 <_fflush_r>:
 801c758:	b538      	push	{r3, r4, r5, lr}
 801c75a:	690b      	ldr	r3, [r1, #16]
 801c75c:	4605      	mov	r5, r0
 801c75e:	460c      	mov	r4, r1
 801c760:	b913      	cbnz	r3, 801c768 <_fflush_r+0x10>
 801c762:	2500      	movs	r5, #0
 801c764:	4628      	mov	r0, r5
 801c766:	bd38      	pop	{r3, r4, r5, pc}
 801c768:	b118      	cbz	r0, 801c772 <_fflush_r+0x1a>
 801c76a:	6a03      	ldr	r3, [r0, #32]
 801c76c:	b90b      	cbnz	r3, 801c772 <_fflush_r+0x1a>
 801c76e:	f7ff fdef 	bl	801c350 <__sinit>
 801c772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c776:	2b00      	cmp	r3, #0
 801c778:	d0f3      	beq.n	801c762 <_fflush_r+0xa>
 801c77a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c77c:	07d0      	lsls	r0, r2, #31
 801c77e:	d404      	bmi.n	801c78a <_fflush_r+0x32>
 801c780:	0599      	lsls	r1, r3, #22
 801c782:	d402      	bmi.n	801c78a <_fflush_r+0x32>
 801c784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c786:	f7ff fa43 	bl	801bc10 <__retarget_lock_acquire_recursive>
 801c78a:	4628      	mov	r0, r5
 801c78c:	4621      	mov	r1, r4
 801c78e:	f7ff ff61 	bl	801c654 <__sflush_r>
 801c792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c794:	07da      	lsls	r2, r3, #31
 801c796:	4605      	mov	r5, r0
 801c798:	d4e4      	bmi.n	801c764 <_fflush_r+0xc>
 801c79a:	89a3      	ldrh	r3, [r4, #12]
 801c79c:	059b      	lsls	r3, r3, #22
 801c79e:	d4e1      	bmi.n	801c764 <_fflush_r+0xc>
 801c7a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c7a2:	f7ff fa36 	bl	801bc12 <__retarget_lock_release_recursive>
 801c7a6:	e7dd      	b.n	801c764 <_fflush_r+0xc>

0801c7a8 <__swhatbuf_r>:
 801c7a8:	b570      	push	{r4, r5, r6, lr}
 801c7aa:	460c      	mov	r4, r1
 801c7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c7b0:	2900      	cmp	r1, #0
 801c7b2:	b096      	sub	sp, #88	; 0x58
 801c7b4:	4615      	mov	r5, r2
 801c7b6:	461e      	mov	r6, r3
 801c7b8:	da0d      	bge.n	801c7d6 <__swhatbuf_r+0x2e>
 801c7ba:	89a3      	ldrh	r3, [r4, #12]
 801c7bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c7c0:	f04f 0100 	mov.w	r1, #0
 801c7c4:	bf0c      	ite	eq
 801c7c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c7ca:	2340      	movne	r3, #64	; 0x40
 801c7cc:	2000      	movs	r0, #0
 801c7ce:	6031      	str	r1, [r6, #0]
 801c7d0:	602b      	str	r3, [r5, #0]
 801c7d2:	b016      	add	sp, #88	; 0x58
 801c7d4:	bd70      	pop	{r4, r5, r6, pc}
 801c7d6:	466a      	mov	r2, sp
 801c7d8:	f7f3 f83a 	bl	800f850 <_fstat_r>
 801c7dc:	2800      	cmp	r0, #0
 801c7de:	dbec      	blt.n	801c7ba <__swhatbuf_r+0x12>
 801c7e0:	9901      	ldr	r1, [sp, #4]
 801c7e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c7e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c7ea:	4259      	negs	r1, r3
 801c7ec:	4159      	adcs	r1, r3
 801c7ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c7f2:	e7eb      	b.n	801c7cc <__swhatbuf_r+0x24>

0801c7f4 <__smakebuf_r>:
 801c7f4:	898b      	ldrh	r3, [r1, #12]
 801c7f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c7f8:	079d      	lsls	r5, r3, #30
 801c7fa:	4606      	mov	r6, r0
 801c7fc:	460c      	mov	r4, r1
 801c7fe:	d507      	bpl.n	801c810 <__smakebuf_r+0x1c>
 801c800:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c804:	6023      	str	r3, [r4, #0]
 801c806:	6123      	str	r3, [r4, #16]
 801c808:	2301      	movs	r3, #1
 801c80a:	6163      	str	r3, [r4, #20]
 801c80c:	b002      	add	sp, #8
 801c80e:	bd70      	pop	{r4, r5, r6, pc}
 801c810:	ab01      	add	r3, sp, #4
 801c812:	466a      	mov	r2, sp
 801c814:	f7ff ffc8 	bl	801c7a8 <__swhatbuf_r>
 801c818:	9900      	ldr	r1, [sp, #0]
 801c81a:	4605      	mov	r5, r0
 801c81c:	4630      	mov	r0, r6
 801c81e:	f7ff f963 	bl	801bae8 <_malloc_r>
 801c822:	b948      	cbnz	r0, 801c838 <__smakebuf_r+0x44>
 801c824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c828:	059a      	lsls	r2, r3, #22
 801c82a:	d4ef      	bmi.n	801c80c <__smakebuf_r+0x18>
 801c82c:	f023 0303 	bic.w	r3, r3, #3
 801c830:	f043 0302 	orr.w	r3, r3, #2
 801c834:	81a3      	strh	r3, [r4, #12]
 801c836:	e7e3      	b.n	801c800 <__smakebuf_r+0xc>
 801c838:	89a3      	ldrh	r3, [r4, #12]
 801c83a:	6020      	str	r0, [r4, #0]
 801c83c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c840:	81a3      	strh	r3, [r4, #12]
 801c842:	9b00      	ldr	r3, [sp, #0]
 801c844:	6163      	str	r3, [r4, #20]
 801c846:	9b01      	ldr	r3, [sp, #4]
 801c848:	6120      	str	r0, [r4, #16]
 801c84a:	b15b      	cbz	r3, 801c864 <__smakebuf_r+0x70>
 801c84c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c850:	4630      	mov	r0, r6
 801c852:	f7f3 f815 	bl	800f880 <_isatty_r>
 801c856:	b128      	cbz	r0, 801c864 <__smakebuf_r+0x70>
 801c858:	89a3      	ldrh	r3, [r4, #12]
 801c85a:	f023 0303 	bic.w	r3, r3, #3
 801c85e:	f043 0301 	orr.w	r3, r3, #1
 801c862:	81a3      	strh	r3, [r4, #12]
 801c864:	89a3      	ldrh	r3, [r4, #12]
 801c866:	431d      	orrs	r5, r3
 801c868:	81a5      	strh	r5, [r4, #12]
 801c86a:	e7cf      	b.n	801c80c <__smakebuf_r+0x18>

0801c86c <memcmp>:
 801c86c:	b510      	push	{r4, lr}
 801c86e:	3901      	subs	r1, #1
 801c870:	4402      	add	r2, r0
 801c872:	4290      	cmp	r0, r2
 801c874:	d101      	bne.n	801c87a <memcmp+0xe>
 801c876:	2000      	movs	r0, #0
 801c878:	e005      	b.n	801c886 <memcmp+0x1a>
 801c87a:	7803      	ldrb	r3, [r0, #0]
 801c87c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c880:	42a3      	cmp	r3, r4
 801c882:	d001      	beq.n	801c888 <memcmp+0x1c>
 801c884:	1b18      	subs	r0, r3, r4
 801c886:	bd10      	pop	{r4, pc}
 801c888:	3001      	adds	r0, #1
 801c88a:	e7f2      	b.n	801c872 <memcmp+0x6>

0801c88c <strncmp>:
 801c88c:	b510      	push	{r4, lr}
 801c88e:	b16a      	cbz	r2, 801c8ac <strncmp+0x20>
 801c890:	3901      	subs	r1, #1
 801c892:	1884      	adds	r4, r0, r2
 801c894:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c898:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c89c:	429a      	cmp	r2, r3
 801c89e:	d103      	bne.n	801c8a8 <strncmp+0x1c>
 801c8a0:	42a0      	cmp	r0, r4
 801c8a2:	d001      	beq.n	801c8a8 <strncmp+0x1c>
 801c8a4:	2a00      	cmp	r2, #0
 801c8a6:	d1f5      	bne.n	801c894 <strncmp+0x8>
 801c8a8:	1ad0      	subs	r0, r2, r3
 801c8aa:	bd10      	pop	{r4, pc}
 801c8ac:	4610      	mov	r0, r2
 801c8ae:	e7fc      	b.n	801c8aa <strncmp+0x1e>
