ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 1


   1              	# 0 "aes-encrypt.S"
   2              	# 1 "C:\\ChibiStudio\\workspace_user\\CRYSTALS-Dilithium//"
   0              	
   0              	
   0              	
   1              	/******************************************************************************
   2              	* Assembly fixsliced implementation of AES-128 and AES-256 (encryption only).
   3              	*
   4              	* Fully-fixsliced implementation runs faster than the semi-fixsliced variant
   5              	* at the cost of a larger code size.
   6              	*
   7              	* See the paper at https://eprint.iacr.org/2020/1123.pdf for more details.
   8              	*
   9              	* @author   Alexandre Adomnicai, Nanyang Technological University, Singapore
  10              	*           alexandre.adomnicai@ntu.edu.sg
  11              	*
  12              	* @date     October 2020
  13              	******************************************************************************/
  14              	
  15              	.syntax unified
  16              	.thumb
  17              	
  18              	/******************************************************************************
  19              	* Macro to compute the SWAPMOVE technique: swap the bits in 'in1' masked by 'm'
  20              	* by the bits in 'in0' masked by 'm << n' and put the results in 'out0', 'out1'
  21              	******************************************************************************/
  22              	.macro swpmv out0, out1, in0, in1, m, n, tmp
  23              	    eor     \tmp, \in1, \in0, lsr \n
  24              	    and     \tmp, \m
  25              	    eor     \out1, \in1, \tmp
  26              	    eor     \out0, \in0, \tmp, lsl \n
  27              	.endm
  28              	
  29              	/******************************************************************************
  30              	* Rotate all bytes in 'in' by 'n0' bits to the rights and put the results in
  31              	* 'out'. 'm' refers to the appropriate bitmask and 'n1' = 8-'n0'.
  32              	******************************************************************************/
  33              	.macro byteror  out, in, m, n0, n1, tmp
  34              	    and     \out, \m, \in, lsr \n0
  35              	    bic     \tmp, \in, \m, ror \n1
  36              	    orr     \out, \out, \tmp, lsl \n1
  37              	.endm
  38              	
  39              	/******************************************************************************
  40              	* Compute the MixColumns for rounds i st i%4 == 0 or 2.
  41              	* Between the two versions, only the masks and the shifts for the 'byteror' are
  42              	* differing.
  43              	******************************************************************************/
  44              	.macro mc_0_2   m, n0, n1, n2, n3
  45              	    byteror r14, r1, \m, \n0, \n1, r9   // r14 <- BYTE_ROR_n0(S0)
  46              	    eor     r4, r1, r14, ror #8         // r4 <- S0 ^ (BYTE_ROR_6(S0) >>> 8)
  47              	    movw    r1, #0x0f0f
  48              	    movt    r1, #0x0f0f                 // r1 <- 0x0f0f0f0f (for BYTE_ROR)
  49              	    byteror r5, r11, \m, \n0, \n1, r9   // r5 <- BYTE_ROR_n0(S7)
  50              	    eor     r10, r11, r5, ror #8        // r10<- S7 ^ BYTE_ROR_n0(S7 >>> 8)
  51              	    byteror r11, r10, r1, 4, 4, r9      // r11<- BYTE_ROR_4(r10)
  52              	    eor     r11, r4, r11, ror #16       // r11<- BYTE_ROR_4(r10) ^ (r10 >>> 16)
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 2


  53              	    eor     r11, r11, r5, ror #8        // r11<- S'7
  54              	    byteror r5, r2, \m, \n0, \n1, r9    // r5 <- BYTE_ROR_n0(S6)
  55              	    eor     r2, r2, r5, ror #8          // r2 <- S6 ^ BYTE_ROR_n0(S6 >>> 8)
  56              	    eor     r10, r10, r5, ror #8        // r10<- r10 ^ (BYTE_ROR_n0(S6) >>> 8)
  57              	    byteror r5, r2, r1, 4, 4, r9        // r5 <- BYTE_ROR_4(r2)
  58              	    eor     r10, r10, r5, ror #16       // r10<- r10 ^ (r5 >>> 16)
  59              	    eor     r10, r10, r4                // r10<- S'6
  60              	    byteror r5, r0, \m, \n0, \n1, r9    // r5 <- BYTE_ROR_n0(S5)
  61              	    eor     r0, r0, r5, ror #8          // r0 <- S5 ^ BYTE_ROR_6(S5 >>> 8)
  62              	    eor     r9, r2, r5, ror #8          // r9 <- r2 ^ (BYTE_ROR_n0(S5) >>> 8)
  63              	    byteror r5, r0, r1, 4, 4, r2        // r5 <- BYTE_ROR_4(r0)
  64              	    eor     r9, r9, r5, ror #16         // r9 <- S'5
  65              	    byteror r5, r8, \m, \n0, \n1, r2    // r5 <- BYTE_ROR_n0(S4)
  66              	    eor     r2, r8, r5, ror #8          // r2 <- S4 ^ BYTE_ROR_6(S4 >>> 8)
  67              	    eor     r8, r0, r5, ror #8          // r8 <- r0 ^ (BYTE_ROR_n0(S4) >>> 8)
  68              	    byteror r5, r2, r1, 4, 4, r0        // r5 <- BYTE_ROR_4(r2)
  69              	    eor     r8, r8, r5, ror #16         // r8 <- r8 ^ (r5 >>> 16)
  70              	    eor     r8, r8, r4                  // r8 <- S'4
  71              	    byteror r5, r7, \m, \n0, \n1, r0    // r5 <- BYTE_ROR_n0(S3)
  72              	    eor     r0, r7, r5, ror #8          // r0 <- S3 ^ BYTE_ROR_6(S3 >>> 8)
  73              	    eor     r7, r2, r5, ror #8          // r2 ^ (BYTE_ROR_n0(S3) >>> 8)
  74              	    byteror r5, r0, r1, 4, 4, r2        // r5 <- BYTE_ROR_4(r0)
  75              	    eor     r7, r7, r5, ror #16         // r7 <- r7 ^ (r5 >>> 16)
  76              	    eor     r7, r7, r4                  // r7 <- S'3
  77              	    byteror r5, r6, \m, \n0, \n1, r2    // r5 <- BYTE_ROR_n0(S2)
  78              	    eor     r2, r6, r5, ror #8          // r2 <- S2 ^ BYTE_ROR_6(S2 >>> 8)
  79              	    eor     r6, r0, r5, ror #8          // r6 <- r0 ^ (BYTE_ROR_n0(S2) >>> 8)
  80              	    byteror r5, r2, r1, 4, 4, r0        // r5 <- BYTE_ROR_4(r2)
  81              	    eor     r6, r6, r5, ror #16         // r6 <- S'2
  82              	    byteror r5, r3, \m, \n0, \n1, r0    // r5 <- BYTE_ROR_n0(S1)
  83              	    eor     r0, r3, r5, ror #8          // r0 <- S1 ^ BYTE_ROR_6(S1 >>> 8)
  84              	    eor     r3, r2, r5, ror #8          // r3 <- r0 ^ (BYTE_ROR_n0(S1) >>> 8)
  85              	    byteror r5, r0, r1, 4, 4, r2        // r5 <- BYTE_ROR_4(r0)
  86              	    eor     r5, r3, r5, ror #16         // r5 <- S'1
  87              	    eor     r14, r0, r14, ror #8        // r14<- r0 ^ (BYTE_ROR_n0(S0) >>> 8)
  88              	    byteror r0, r4, r1, 4, 4, r2        // r0 <- BYTE_ROR_4(r4)
  89              	    eor     r4, r14, r0, ror #16        // r4 <- S'0
  90              	.endm
  91              	
  92              	/******************************************************************************
  93              	* Packs two 128-bit input blocs stored in r4-r7 and r8-r11, respectively, into
  94              	* the 256-bit internal state where the bits are packed as follows:
  95              	* r4 = b_24 b_56 b_88 b_120 || ... || b_0 b_32 b_64 b_96
  96              	* r5 = b_25 b_57 b_89 b_121 || ... || b_1 b_33 b_65 b_97
  97              	* r6 = b_26 b_58 b_90 b_122 || ... || b_2 b_34 b_66 b_98
  98              	* r7 = b_27 b_59 b_91 b_123 || ... || b_3 b_35 b_67 b_99
  99              	* r8 = b_28 b_60 b_92 b_124 || ... || b_4 b_36 b_68 b_100
 100              	* r9 = b_29 b_61 b_93 b_125 || ... || b_5 b_37 b_69 b_101
 101              	* r10 = b_30 b_62 b_94 b_126 || ... || b_6 b_38 b_70 b_102
 102              	* r11 = b_31 b_63 b_95 b_127 || ... || b_7 b_39 b_71 b_103
 103              	******************************************************************************/
 104              	.align 2
 105              	packing:
 106 0000 40F60F73 	    movw    r3, #0x0f0f
 107 0004 C0F60F73 	    movt    r3, #0x0f0f             // r3 <- 0x0f0f0f0f (mask for SWAPMOVE)
 108 0008 83EA8302 	    eor     r2, r3, r3, lsl #2      // r2 <- 0x33333333 (mask for SWAPMOVE)
 109 000c 82EA4201 	    eor     r1, r2, r2, lsl #1      // r1 <- 0x55555555 (mask for SWAPMOVE)
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 3


 110              	    swpmv   r8, r4, r8, r4, r1, #1, r12
 110 0010 84EA580C 	>  eor r12,r4,r8,lsr#1
 110 0014 0CEA010C 	>  and r12,r1
 110 0018 84EA0C04 	>  eor r4,r4,r12
 110 001c 88EA4C08 	>  eor r8,r8,r12,lsl#1
 111              	    swpmv   r9, r5, r9, r5, r1, #1, r12
 111 0020 85EA590C 	>  eor r12,r5,r9,lsr#1
 111 0024 0CEA010C 	>  and r12,r1
 111 0028 85EA0C05 	>  eor r5,r5,r12
 111 002c 89EA4C09 	>  eor r9,r9,r12,lsl#1
 112              	    swpmv   r10, r6, r10, r6, r1, #1, r12
 112 0030 86EA5A0C 	>  eor r12,r6,r10,lsr#1
 112 0034 0CEA010C 	>  and r12,r1
 112 0038 86EA0C06 	>  eor r6,r6,r12
 112 003c 8AEA4C0A 	>  eor r10,r10,r12,lsl#1
 113              	    swpmv   r11, r7, r11, r7, r1, #1, r12
 113 0040 87EA5B0C 	>  eor r12,r7,r11,lsr#1
 113 0044 0CEA010C 	>  and r12,r1
 113 0048 87EA0C07 	>  eor r7,r7,r12
 113 004c 8BEA4C0B 	>  eor r11,r11,r12,lsl#1
 114              	    swpmv   r0, r4, r5, r4, r2, #2, r12
 114 0050 84EA950C 	>  eor r12,r4,r5,lsr#2
 114 0054 0CEA020C 	>  and r12,r2
 114 0058 84EA0C04 	>  eor r4,r4,r12
 114 005c 85EA8C00 	>  eor r0,r5,r12,lsl#2
 115              	    swpmv   r9, r5, r9, r8, r2, #2, r12
 115 0060 88EA990C 	>  eor r12,r8,r9,lsr#2
 115 0064 0CEA020C 	>  and r12,r2
 115 0068 88EA0C05 	>  eor r5,r8,r12
 115 006c 89EA8C09 	>  eor r9,r9,r12,lsl#2
 116              	    swpmv   r7, r8, r7, r6, r2, #2, r12
 116 0070 86EA970C 	>  eor r12,r6,r7,lsr#2
 116 0074 0CEA020C 	>  and r12,r2
 116 0078 86EA0C08 	>  eor r8,r6,r12
 116 007c 87EA8C07 	>  eor r7,r7,r12,lsl#2
 117              	    swpmv   r11, r2, r11, r10, r2, #2, r12
 117 0080 8AEA9B0C 	>  eor r12,r10,r11,lsr#2
 117 0084 0CEA020C 	>  and r12,r2
 117 0088 8AEA0C02 	>  eor r2,r10,r12
 117 008c 8BEA8C0B 	>  eor r11,r11,r12,lsl#2
 118              	    swpmv   r8, r4, r8, r4, r3, #4, r12
 118 0090 84EA181C 	>  eor r12,r4,r8,lsr#4
 118 0094 0CEA030C 	>  and r12,r3
 118 0098 84EA0C04 	>  eor r4,r4,r12
 118 009c 88EA0C18 	>  eor r8,r8,r12,lsl#4
 119              	    swpmv   r10, r6, r7, r0, r3, #4, r12
 119 00a0 80EA171C 	>  eor r12,r0,r7,lsr#4
 119 00a4 0CEA030C 	>  and r12,r3
 119 00a8 80EA0C06 	>  eor r6,r0,r12
 119 00ac 87EA0C1A 	>  eor r10,r7,r12,lsl#4
 120              	    swpmv   r11, r7, r11, r9, r3, #4, r12
 120 00b0 89EA1B1C 	>  eor r12,r9,r11,lsr#4
 120 00b4 0CEA030C 	>  and r12,r3
 120 00b8 89EA0C07 	>  eor r7,r9,r12
 120 00bc 8BEA0C1B 	>  eor r11,r11,r12,lsl#4
 121              	    swpmv   r9, r5, r2, r5, r3, #4, r12
 121 00c0 85EA121C 	>  eor r12,r5,r2,lsr#4
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 4


 121 00c4 0CEA030C 	>  and r12,r3
 121 00c8 85EA0C05 	>  eor r5,r5,r12
 121 00cc 82EA0C19 	>  eor r9,r2,r12,lsl#4
 122 00d0 7047     	    bx      lr
 123              	
 124              	/******************************************************************************
 125              	* Unpacks the 256-bit internal state in two 128-bit blocs.
 126              	******************************************************************************/
 127 00d2 00BF     	.align 2
 128              	unpacking:
 129 00d4 40F60F73 	    movw    r3, #0x0f0f
 130 00d8 C0F60F73 	    movt    r3, #0x0f0f                 // r3 <- 0x0f0f0f0f (mask for SWAPMOVE)
 131              	    swpmv   r2, r5, r9, r5, r3, #4, r12
 131 00dc 85EA191C 	>  eor r12,r5,r9,lsr#4
 131 00e0 0CEA030C 	>  and r12,r3
 131 00e4 85EA0C05 	>  eor r5,r5,r12
 131 00e8 89EA0C12 	>  eor r2,r9,r12,lsl#4
 132              	    swpmv   r11, r9, r11, r7, r3, #4, r12
 132 00ec 87EA1B1C 	>  eor r12,r7,r11,lsr#4
 132 00f0 0CEA030C 	>  and r12,r3
 132 00f4 87EA0C09 	>  eor r9,r7,r12
 132 00f8 8BEA0C1B 	>  eor r11,r11,r12,lsl#4
 133              	    swpmv   r7, r1, r10, r6, r3, #4, r12
 133 00fc 86EA1A1C 	>  eor r12,r6,r10,lsr#4
 133 0100 0CEA030C 	>  and r12,r3
 133 0104 86EA0C01 	>  eor r1,r6,r12
 133 0108 8AEA0C17 	>  eor r7,r10,r12,lsl#4
 134              	    swpmv   r8, r4, r8, r4, r3, #4, r12
 134 010c 84EA181C 	>  eor r12,r4,r8,lsr#4
 134 0110 0CEA030C 	>  and r12,r3
 134 0114 84EA0C04 	>  eor r4,r4,r12
 134 0118 88EA0C18 	>  eor r8,r8,r12,lsl#4
 135 011c 83EA8303 	    eor     r3, r3, r3, lsl #2          // r3 <- 0x33333333 (mask for SWAPMOVE)
 136              	    swpmv   r11, r10,r11, r2, r3, #2, r12
 136 0120 82EA9B0C 	>  eor r12,r2,r11,lsr#2
 136 0124 0CEA030C 	>  and r12,r3
 136 0128 82EA0C0A 	>  eor r10,r2,r12
 136 012c 8BEA8C0B 	>  eor r11,r11,r12,lsl#2
 137              	    swpmv   r7, r6, r7, r8, r3, #2, r12
 137 0130 88EA970C 	>  eor r12,r8,r7,lsr#2
 137 0134 0CEA030C 	>  and r12,r3
 137 0138 88EA0C06 	>  eor r6,r8,r12
 137 013c 87EA8C07 	>  eor r7,r7,r12,lsl#2
 138              	    swpmv   r9, r8, r9, r5, r3, #2, r12
 138 0140 85EA990C 	>  eor r12,r5,r9,lsr#2
 138 0144 0CEA030C 	>  and r12,r3
 138 0148 85EA0C08 	>  eor r8,r5,r12
 138 014c 89EA8C09 	>  eor r9,r9,r12,lsl#2
 139              	    swpmv   r5, r4, r1, r4, r3, #2, r12
 139 0150 84EA910C 	>  eor r12,r4,r1,lsr#2
 139 0154 0CEA030C 	>  and r12,r3
 139 0158 84EA0C04 	>  eor r4,r4,r12
 139 015c 81EA8C05 	>  eor r5,r1,r12,lsl#2
 140 0160 83EA4301 	    eor     r1, r3, r3, lsl #1          // r1 <- 0x55555555 (mask for SWAPMOVE)
 141              	    swpmv   r8, r4, r8, r4, r1, #1, r12
 141 0164 84EA580C 	>  eor r12,r4,r8,lsr#1
 141 0168 0CEA010C 	>  and r12,r1
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 5


 141 016c 84EA0C04 	>  eor r4,r4,r12
 141 0170 88EA4C08 	>  eor r8,r8,r12,lsl#1
 142              	    swpmv   r9, r5,r9, r5, r1, #1, r12
 142 0174 85EA590C 	>  eor r12,r5,r9,lsr#1
 142 0178 0CEA010C 	>  and r12,r1
 142 017c 85EA0C05 	>  eor r5,r5,r12
 142 0180 89EA4C09 	>  eor r9,r9,r12,lsl#1
 143              	    swpmv   r10, r6, r10, r6, r1, #1, r12
 143 0184 86EA5A0C 	>  eor r12,r6,r10,lsr#1
 143 0188 0CEA010C 	>  and r12,r1
 143 018c 86EA0C06 	>  eor r6,r6,r12
 143 0190 8AEA4C0A 	>  eor r10,r10,r12,lsl#1
 144              	    swpmv   r11, r7, r11, r7, r1, #1, r12
 144 0194 87EA5B0C 	>  eor r12,r7,r11,lsr#1
 144 0198 0CEA010C 	>  and r12,r1
 144 019c 87EA0C07 	>  eor r7,r7,r12
 144 01a0 8BEA4C0B 	>  eor r11,r11,r12,lsl#1
 145 01a4 7047     	    bx      lr
 146              	
 147              	/******************************************************************************
 148              	* Subroutine that computes the AddRoundKey and the S-box.
 149              	* Credits to https://github.com/Ko-/aes-armcortexm for the S-box implementation
 150              	******************************************************************************/
 151 01a6 00BF     	.align 2
 152              	ark_sbox:
 153              	    // add round key
 154 01a8 DDF83010 	    ldr.w   r1, [sp, #48]
 155 01ac B1E80D10 	    ldmia   r1!, {r0,r2,r3,r12}
 156 01b0 84EA0004 	    eor     r4, r0
 157 01b4 85EA0205 	    eor     r5, r2
 158 01b8 86EA0306 	    eor     r6, r3
 159 01bc 87EA0C07 	    eor     r7, r12
 160 01c0 B1E80D10 	    ldmia   r1!, {r0,r2,r3,r12}
 161 01c4 88EA0008 	    eor     r8, r0
 162 01c8 89EA0209 	    eor     r9, r2
 163 01cc 8AEA030A 	    eor     r10, r3
 164 01d0 8BEA0C0B 	    eor     r11, r12
 165 01d4 CDF83010 	    str.w   r1, [sp, #48]
 166 01d8 CDF834E0 	    str     r14, [sp, #52]
 167              	    // sbox: credits to https://github.com/Ko-/aes-armcortexm
 168 01dc 87EA0901 	    eor     r1, r7, r9              //Exec y14 = U3 ^ U5; into r1
 169 01e0 84EA0A03 	    eor     r3, r4, r10             //Exec y13 = U0 ^ U6; into r3
 170 01e4 83EA0102 	    eor     r2, r3, r1              //Exec y12 = y13 ^ y14; into r2
 171 01e8 88EA0200 	    eor     r0, r8, r2              //Exec t1 = U4 ^ y12; into r0
 172 01ec 80EA090E 	    eor     r14, r0, r9             //Exec y15 = t1 ^ U5; into r14
 173 01f0 02EA0E0C 	    and     r12, r2, r14            //Exec t2 = y12 & y15; into r12
 174 01f4 8EEA0B08 	    eor     r8, r14, r11            //Exec y6 = y15 ^ U7; into r8
 175 01f8 80EA0500 	    eor     r0, r0, r5              //Exec y20 = t1 ^ U1; into r0
 176 01fc CDF82C20 	    str.w   r2, [sp, #44]           //Store r2/y12 on stack
 177 0200 84EA0702 	    eor     r2, r4, r7              //Exec y9 = U0 ^ U3; into r2
 178 0204 0A90     	    str     r0, [sp, #40]           //Store r0/y20 on stack
 179 0206 80EA0200 	    eor     r0, r0, r2              //Exec y11 = y20 ^ y9; into r0
 180 020a 0992     	    str     r2, [sp, #36]           //Store r2/y9 on stack
 181 020c 02EA0002 	    and     r2, r2, r0              //Exec t12 = y9 & y11; into r2
 182 0210 CDF82080 	    str     r8, [sp, #32]           //Store r8/y6 on stack
 183 0214 8BEA0008 	    eor     r8, r11, r0             //Exec y7 = U7 ^ y11; into r8
 184 0218 84EA0909 	    eor     r9, r4, r9              //Exec y8 = U0 ^ U5; into r9
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 6


 185 021c 85EA0606 	    eor     r6, r5, r6              //Exec t0 = U1 ^ U2; into r6
 186 0220 8EEA0605 	    eor     r5, r14, r6             //Exec y10 = y15 ^ t0; into r5
 187 0224 CDF81CE0 	    str     r14, [sp, #28]          //Store r14/y15 on stack
 188 0228 85EA000E 	    eor     r14, r5, r0             //Exec y17 = y10 ^ y11; into r14
 189 022c CDF81810 	    str.w   r1, [sp, #24]           //Store r1/y14 on stack
 190 0230 01EA0E01 	    and     r1, r1, r14             //Exec t13 = y14 & y17; into r1
 191 0234 81EA0201 	    eor     r1, r1, r2              //Exec t14 = t13 ^ t12; into r1
 192 0238 CDF814E0 	    str     r14, [sp, #20]          //Store r14/y17 on stack
 193 023c 85EA090E 	    eor     r14, r5, r9             //Exec y19 = y10 ^ y8; into r14
 194 0240 CDF81050 	    str.w   r5, [sp, #16]           //Store r5/y10 on stack
 195 0244 09EA0505 	    and     r5, r9, r5              //Exec t15 = y8 & y10; into r5
 196 0248 85EA0202 	    eor     r2, r5, r2              //Exec t16 = t15 ^ t12; into r2
 197 024c 86EA0005 	    eor     r5, r6, r0              //Exec y16 = t0 ^ y11; into r5
 198 0250 CDF80C00 	    str.w   r0, [sp, #12]           //Store r0/y11 on stack
 199 0254 83EA0500 	    eor     r0, r3, r5              //Exec y21 = y13 ^ y16; into r0
 200 0258 0293     	    str     r3, [sp, #8]            //Store r3/y13 on stack
 201 025a 03EA0503 	    and     r3, r3, r5              //Exec t7 = y13 & y16; into r3
 202 025e 0195     	    str     r5, [sp, #4]            //Store r5/y16 on stack
 203 0260 CDF800B0 	    str     r11, [sp, #0]           //Store r11/U7 on stack
 204 0264 84EA0505 	    eor     r5, r4, r5              //Exec y18 = U0 ^ y16; into r5
 205 0268 86EA0B06 	    eor     r6, r6, r11             //Exec y1 = t0 ^ U7; into r6
 206 026c 86EA0707 	    eor     r7, r6, r7              //Exec y4 = y1 ^ U3; into r7
 207 0270 07EA0B0B 	    and     r11, r7, r11            //Exec t5 = y4 & U7; into r11
 208 0274 8BEA0C0B 	    eor     r11, r11, r12           //Exec t6 = t5 ^ t2; into r11
 209 0278 8BEA020B 	    eor     r11, r11, r2            //Exec t18 = t6 ^ t16; into r11
 210 027c 8BEA0E0E 	    eor     r14, r11, r14           //Exec t22 = t18 ^ y19; into r14
 211 0280 86EA0404 	    eor     r4, r6, r4              //Exec y2 = y1 ^ U0; into r4
 212 0284 04EA080B 	    and     r11, r4, r8             //Exec t10 = y2 & y7; into r11
 213 0288 8BEA030B 	    eor     r11, r11, r3            //Exec t11 = t10 ^ t7; into r11
 214 028c 8BEA0202 	    eor     r2, r11, r2             //Exec t20 = t11 ^ t16; into r2
 215 0290 82EA0502 	    eor     r2, r2, r5              //Exec t24 = t20 ^ y18; into r2
 216 0294 86EA0A0A 	    eor     r10, r6, r10            //Exec y5 = y1 ^ U6; into r10
 217 0298 0AEA060B 	    and     r11, r10, r6            //Exec t8 = y5 & y1; into r11
 218 029c 8BEA0303 	    eor     r3, r11, r3             //Exec t9 = t8 ^ t7; into r3
 219 02a0 83EA0103 	    eor     r3, r3, r1              //Exec t19 = t9 ^ t14; into r3
 220 02a4 83EA0003 	    eor     r3, r3, r0              //Exec t23 = t19 ^ y21; into r3
 221 02a8 8AEA0900 	    eor     r0, r10, r9             //Exec y3 = y5 ^ y8; into r0
 222 02ac DDF820B0 	    ldr     r11, [sp, #32]          //Load y6 into r11
 223 02b0 00EA0B05 	    and     r5, r0, r11             //Exec t3 = y3 & y6; into r5
 224 02b4 85EA0C0C 	    eor     r12, r5, r12            //Exec t4 = t3 ^ t2; into r12
 225 02b8 0A9D     	    ldr     r5, [sp, #40]           //Load y20 into r5
 226 02ba 0897     	    str     r7, [sp, #32]           //Store r7/y4 on stack
 227 02bc 8CEA050C 	    eor     r12, r12, r5            //Exec t17 = t4 ^ y20; into r12
 228 02c0 8CEA0101 	    eor     r1, r12, r1             //Exec t21 = t17 ^ t14; into r1
 229 02c4 01EA030C 	    and     r12, r1, r3             //Exec t26 = t21 & t23; into r12
 230 02c8 82EA0C05 	    eor     r5, r2, r12             //Exec t27 = t24 ^ t26; into r5
 231 02cc 8EEA0C0C 	    eor     r12, r14, r12           //Exec t31 = t22 ^ t26; into r12
 232 02d0 81EA0E01 	    eor     r1, r1, r14             //Exec t25 = t21 ^ t22; into r1
 233 02d4 01EA0507 	    and     r7, r1, r5              //Exec t28 = t25 & t27; into r7
 234 02d8 87EA0E0E 	    eor     r14, r7, r14            //Exec t29 = t28 ^ t22; into r14
 235 02dc 0EEA0404 	    and     r4, r14, r4             //Exec z14 = t29 & y2; into r4
 236 02e0 0EEA0808 	    and     r8, r14, r8             //Exec z5 = t29 & y7; into r8
 237 02e4 83EA0207 	    eor     r7, r3, r2              //Exec t30 = t23 ^ t24; into r7
 238 02e8 0CEA070C 	    and     r12, r12, r7            //Exec t32 = t31 & t30; into r12
 239 02ec 8CEA020C 	    eor     r12, r12, r2            //Exec t33 = t32 ^ t24; into r12
 240 02f0 85EA0C07 	    eor     r7, r5, r12             //Exec t35 = t27 ^ t33; into r7
 241 02f4 02EA0702 	    and     r2, r2, r7              //Exec t36 = t24 & t35; into r2
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 7


 242 02f8 85EA0205 	    eor     r5, r5, r2              //Exec t38 = t27 ^ t36; into r5
 243 02fc 0EEA0505 	    and     r5, r14, r5             //Exec t39 = t29 & t38; into r5
 244 0300 81EA0501 	    eor     r1, r1, r5              //Exec t40 = t25 ^ t39; into r1
 245 0304 8EEA0105 	    eor     r5, r14, r1             //Exec t43 = t29 ^ t40; into r5
 246 0308 DDF80470 	    ldr.w   r7, [sp, #4]            //Load y16 into r7
 247 030c 05EA0707 	    and     r7, r5, r7              //Exec z3 = t43 & y16; into r7
 248 0310 87EA0808 	    eor     r8, r7, r8              //Exec tc12 = z3 ^ z5; into r8
 249 0314 CDF82880 	    str     r8, [sp, #40]           //Store r8/tc12 on stack
 250 0318 DDF80880 	    ldr     r8, [sp, #8]            //Load y13 into r8
 251 031c 05EA0808 	    and     r8, r5, r8              //Exec z12 = t43 & y13; into r8
 252 0320 01EA0A0A 	    and     r10, r1, r10            //Exec z13 = t40 & y5; into r10
 253 0324 01EA0606 	    and     r6, r1, r6              //Exec z4 = t40 & y1; into r6
 254 0328 87EA0606 	    eor     r6, r7, r6              //Exec tc6 = z3 ^ z4; into r6
 255 032c 83EA0C03 	    eor     r3, r3, r12             //Exec t34 = t23 ^ t33; into r3
 256 0330 82EA0303 	    eor     r3, r2, r3              //Exec t37 = t36 ^ t34; into r3
 257 0334 81EA0301 	    eor     r1, r1, r3              //Exec t41 = t40 ^ t37; into r1
 258 0338 DDF81050 	    ldr.w   r5, [sp, #16]           //Load y10 into r5
 259 033c 01EA0502 	    and     r2, r1, r5              //Exec z8 = t41 & y10; into r2
 260 0340 01EA0909 	    and     r9, r1, r9              //Exec z17 = t41 & y8; into r9
 261 0344 CDF81090 	    str     r9, [sp, #16]           //Store r9/z17 on stack
 262 0348 8CEA0305 	    eor     r5, r12, r3             //Exec t44 = t33 ^ t37; into r5
 263 034c DDF81C90 	    ldr     r9, [sp, #28]           //Load y15 into r9
 264 0350 DDF82C70 	    ldr.w   r7, [sp, #44]           //Load y12 into r7
 265 0354 05EA0909 	    and     r9, r5, r9              //Exec z0 = t44 & y15; into r9
 266 0358 05EA0707 	    and     r7, r5, r7              //Exec z9 = t44 & y12; into r7
 267 035c 03EA0000 	    and     r0, r3, r0              //Exec z10 = t37 & y3; into r0
 268 0360 03EA0B03 	    and     r3, r3, r11             //Exec z1 = t37 & y6; into r3
 269 0364 83EA0903 	    eor     r3, r3, r9              //Exec tc5 = z1 ^ z0; into r3
 270 0368 86EA0303 	    eor     r3, r6, r3              //Exec tc11 = tc6 ^ tc5; into r3
 271 036c DDF820B0 	    ldr     r11, [sp, #32]          //Load y4 into r11
 272 0370 DDF81450 	    ldr.w   r5, [sp, #20]           //Load y17 into r5
 273 0374 0CEA0B0B 	    and     r11, r12, r11           //Exec z11 = t33 & y4; into r11
 274 0378 8EEA0C0E 	    eor     r14, r14, r12           //Exec t42 = t29 ^ t33; into r14
 275 037c 8EEA0101 	    eor     r1, r14, r1             //Exec t45 = t42 ^ t41; into r1
 276 0380 01EA0505 	    and     r5, r1, r5              //Exec z7 = t45 & y17; into r5
 277 0384 85EA0606 	    eor     r6, r5, r6              //Exec tc8 = z7 ^ tc6; into r6
 278 0388 069D     	    ldr     r5, [sp, #24]           //Load y14 into r5
 279 038a 0894     	    str     r4, [sp, #32]           //Store r4/z14 on stack
 280 038c 01EA0501 	    and     r1, r1, r5              //Exec z16 = t45 & y14; into r1
 281 0390 039D     	    ldr     r5, [sp, #12]           //Load y11 into r5
 282 0392 099C     	    ldr     r4, [sp, #36]           //Load y9 into r4
 283 0394 0EEA0505 	    and     r5, r14, r5             //Exec z6 = t42 & y11; into r5
 284 0398 85EA0605 	    eor     r5, r5, r6              //Exec tc16 = z6 ^ tc8; into r5
 285 039c 0EEA0404 	    and     r4, r14, r4             //Exec z15 = t42 & y9; into r4
 286 03a0 84EA050E 	    eor     r14, r4, r5             //Exec tc20 = z15 ^ tc16; into r14
 287 03a4 84EA0104 	    eor     r4, r4, r1              //Exec tc1 = z15 ^ z16; into r4
 288 03a8 80EA0401 	    eor     r1, r0, r4              //Exec tc2 = z10 ^ tc1; into r1
 289 03ac 81EA0B00 	    eor     r0, r1, r11             //Exec tc21 = tc2 ^ z11; into r0
 290 03b0 87EA0107 	    eor     r7, r7, r1              //Exec tc3 = z9 ^ tc2; into r7
 291 03b4 87EA0501 	    eor     r1, r7, r5              //Exec S0 = tc3 ^ tc16; into r1
 292 03b8 87EA0307 	    eor     r7, r7, r3              //Exec S3 = tc3 ^ tc11; into r7
 293 03bc 87EA0503 	    eor     r3, r7, r5              //Exec S1 = S3 ^ tc16 ^ 1; into r3
 294 03c0 8AEA040B 	    eor     r11, r10, r4            //Exec tc13 = z13 ^ tc1; into r11
 295 03c4 DDF80040 	    ldr.w   r4, [sp, #0]            //Load U7 into r4
 296 03c8 0CEA040C 	    and     r12, r12, r4            //Exec z2 = t33 & U7; into r12
 297 03cc 89EA0C09 	    eor     r9, r9, r12             //Exec tc4 = z0 ^ z2; into r9
 298 03d0 88EA090C 	    eor     r12, r8, r9             //Exec tc7 = z12 ^ tc4; into r12
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 8


 299 03d4 82EA0C02 	    eor     r2, r2, r12             //Exec tc9 = z8 ^ tc7; into r2
 300 03d8 86EA0202 	    eor     r2, r6, r2              //Exec tc10 = tc8 ^ tc9; into r2
 301 03dc DDF82040 	    ldr.w   r4, [sp, #32]           //Load z14 into r4
 302 03e0 84EA020C 	    eor     r12, r4, r2             //Exec tc17 = z14 ^ tc10; into r12
 303 03e4 80EA0C00 	    eor     r0, r0, r12             //Exec S5 = tc21 ^ tc17; into r0
 304 03e8 8CEA0E06 	    eor     r6, r12, r14            //Exec tc26 = tc17 ^ tc20; into r6
 305 03ec DDF81040 	    ldr.w   r4, [sp, #16]           //Load z17 into r4
 306 03f0 DDF828C0 	    ldr     r12, [sp, #40]          //Load tc12 into r12
 307 03f4 86EA0406 	    eor     r6, r6, r4              //Exec S2 = tc26 ^ z17 ^ 1; into r6
 308 03f8 89EA0C0C 	    eor     r12, r9, r12            //Exec tc14 = tc4 ^ tc12; into r12
 309 03fc 8BEA0C0E 	    eor     r14, r11, r12           //Exec tc18 = tc13 ^ tc14; into r14
 310 0400 82EA0E02 	    eor     r2, r2, r14             //Exec S6 = tc10 ^ tc18 ^ 1; into r2
 311 0404 88EA0E0B 	    eor     r11, r8, r14            //Exec S7 = z12 ^ tc18 ^ 1; into r11
 312 0408 DDF834E0 	    ldr     r14, [sp, #52]          // restore link register
 313 040c 8CEA0708 	    eor     r8, r12, r7             //Exec S4 = tc14 ^ S3; into r8
 314 0410 7047     	    bx      lr
 315              	    // [('r0', 'S5'), ('r1', 'S0'), ('r2', 'S6'), ('r3', 'S1'),
 316              	    // ('r6', 'S2'),('r7', 'S3'), ('r8', 'S4'), ('r11', 'S7')]
 317              	
 318              	/******************************************************************************
 319              	* Computation of the MixColumns transformation in the fixsliced representation.
 320              	* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 0.
 321              	* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 0.
 322              	******************************************************************************/
 323 0412 00BF     	.align 2
 324              	mixcolumns_0:
 325 0414 CDF834E0 	    str     r14, [sp, #52]          // store link register
 326 0418 40F2033C 	    movw    r12, #0x0303
 327 041c C0F2033C 	    movt    r12, #0x0303
 328              	    mc_0_2  r12, 6, 2, 26, 18
 328              	>  byteror r14,r1,r12,6,2,r9
 328 0420 0CEA911E 	>>  and r14,r12,r1,lsr 6
 328 0424 21EABC09 	>>  bic r9,r1,r12,ror 2
 328 0428 4EEA890E 	>>  orr r14,r14,r9,lsl 2
 328 042c 81EA3E24 	>  eor r4,r1,r14,ror#8
 328 0430 40F60F71 	>  movw r1,#0x0f0f
 328 0434 C0F60F71 	>  movt r1,#0x0f0f
 328              	>  byteror r5,r11,r12,6,2,r9
 328 0438 0CEA9B15 	>>  and r5,r12,r11,lsr 6
 328 043c 2BEABC09 	>>  bic r9,r11,r12,ror 2
 328 0440 45EA8905 	>>  orr r5,r5,r9,lsl 2
 328 0444 8BEA352A 	>  eor r10,r11,r5,ror#8
 328              	>  byteror r11,r10,r1,4,4,r9
 328 0448 01EA1A1B 	>>  and r11,r1,r10,lsr 4
 328 044c 2AEA3119 	>>  bic r9,r10,r1,ror 4
 328 0450 4BEA091B 	>>  orr r11,r11,r9,lsl 4
 328 0454 84EA3B4B 	>  eor r11,r4,r11,ror#16
 328 0458 8BEA352B 	>  eor r11,r11,r5,ror#8
 328              	>  byteror r5,r2,r12,6,2,r9
 328 045c 0CEA9215 	>>  and r5,r12,r2,lsr 6
 328 0460 22EABC09 	>>  bic r9,r2,r12,ror 2
 328 0464 45EA8905 	>>  orr r5,r5,r9,lsl 2
 328 0468 82EA3522 	>  eor r2,r2,r5,ror#8
 328 046c 8AEA352A 	>  eor r10,r10,r5,ror#8
 328              	>  byteror r5,r2,r1,4,4,r9
 328 0470 01EA1215 	>>  and r5,r1,r2,lsr 4
 328 0474 22EA3119 	>>  bic r9,r2,r1,ror 4
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 9


 328 0478 45EA0915 	>>  orr r5,r5,r9,lsl 4
 328 047c 8AEA354A 	>  eor r10,r10,r5,ror#16
 328 0480 8AEA040A 	>  eor r10,r10,r4
 328              	>  byteror r5,r0,r12,6,2,r9
 328 0484 0CEA9015 	>>  and r5,r12,r0,lsr 6
 328 0488 20EABC09 	>>  bic r9,r0,r12,ror 2
 328 048c 45EA8905 	>>  orr r5,r5,r9,lsl 2
 328 0490 80EA3520 	>  eor r0,r0,r5,ror#8
 328 0494 82EA3529 	>  eor r9,r2,r5,ror#8
 328              	>  byteror r5,r0,r1,4,4,r2
 328 0498 01EA1015 	>>  and r5,r1,r0,lsr 4
 328 049c 20EA3112 	>>  bic r2,r0,r1,ror 4
 328 04a0 45EA0215 	>>  orr r5,r5,r2,lsl 4
 328 04a4 89EA3549 	>  eor r9,r9,r5,ror#16
 328              	>  byteror r5,r8,r12,6,2,r2
 328 04a8 0CEA9815 	>>  and r5,r12,r8,lsr 6
 328 04ac 28EABC02 	>>  bic r2,r8,r12,ror 2
 328 04b0 45EA8205 	>>  orr r5,r5,r2,lsl 2
 328 04b4 88EA3522 	>  eor r2,r8,r5,ror#8
 328 04b8 80EA3528 	>  eor r8,r0,r5,ror#8
 328              	>  byteror r5,r2,r1,4,4,r0
 328 04bc 01EA1215 	>>  and r5,r1,r2,lsr 4
 328 04c0 22EA3110 	>>  bic r0,r2,r1,ror 4
 328 04c4 45EA0015 	>>  orr r5,r5,r0,lsl 4
 328 04c8 88EA3548 	>  eor r8,r8,r5,ror#16
 328 04cc 88EA0408 	>  eor r8,r8,r4
 328              	>  byteror r5,r7,r12,6,2,r0
 328 04d0 0CEA9715 	>>  and r5,r12,r7,lsr 6
 328 04d4 27EABC00 	>>  bic r0,r7,r12,ror 2
 328 04d8 45EA8005 	>>  orr r5,r5,r0,lsl 2
 328 04dc 87EA3520 	>  eor r0,r7,r5,ror#8
 328 04e0 82EA3527 	>  eor r7,r2,r5,ror#8
 328              	>  byteror r5,r0,r1,4,4,r2
 328 04e4 01EA1015 	>>  and r5,r1,r0,lsr 4
 328 04e8 20EA3112 	>>  bic r2,r0,r1,ror 4
 328 04ec 45EA0215 	>>  orr r5,r5,r2,lsl 4
 328 04f0 87EA3547 	>  eor r7,r7,r5,ror#16
 328 04f4 87EA0407 	>  eor r7,r7,r4
 328              	>  byteror r5,r6,r12,6,2,r2
 328 04f8 0CEA9615 	>>  and r5,r12,r6,lsr 6
 328 04fc 26EABC02 	>>  bic r2,r6,r12,ror 2
 328 0500 45EA8205 	>>  orr r5,r5,r2,lsl 2
 328 0504 86EA3522 	>  eor r2,r6,r5,ror#8
 328 0508 80EA3526 	>  eor r6,r0,r5,ror#8
 328              	>  byteror r5,r2,r1,4,4,r0
 328 050c 01EA1215 	>>  and r5,r1,r2,lsr 4
 328 0510 22EA3110 	>>  bic r0,r2,r1,ror 4
 328 0514 45EA0015 	>>  orr r5,r5,r0,lsl 4
 328 0518 86EA3546 	>  eor r6,r6,r5,ror#16
 328              	>  byteror r5,r3,r12,6,2,r0
 328 051c 0CEA9315 	>>  and r5,r12,r3,lsr 6
 328 0520 23EABC00 	>>  bic r0,r3,r12,ror 2
 328 0524 45EA8005 	>>  orr r5,r5,r0,lsl 2
 328 0528 83EA3520 	>  eor r0,r3,r5,ror#8
 328 052c 82EA3523 	>  eor r3,r2,r5,ror#8
 328              	>  byteror r5,r0,r1,4,4,r2
 328 0530 01EA1015 	>>  and r5,r1,r0,lsr 4
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 10


 328 0534 20EA3112 	>>  bic r2,r0,r1,ror 4
 328 0538 45EA0215 	>>  orr r5,r5,r2,lsl 4
 328 053c 83EA3545 	>  eor r5,r3,r5,ror#16
 328 0540 80EA3E2E 	>  eor r14,r0,r14,ror#8
 328              	>  byteror r0,r4,r1,4,4,r2
 328 0544 01EA1410 	>>  and r0,r1,r4,lsr 4
 328 0548 24EA3112 	>>  bic r2,r4,r1,ror 4
 328 054c 40EA0210 	>>  orr r0,r0,r2,lsl 4
 328 0550 8EEA3044 	>  eor r4,r14,r0,ror#16
 329 0554 DDF834E0 	    ldr     r14, [sp, #52]          // restore link register
 330 0558 7047     	    bx      lr
 331              	
 332              	/******************************************************************************
 333              	* Computation of the MixColumns transformation in the fixsliced representation.
 334              	* For fully-fixsliced implementations only, for round i s.t. (i%4) == 1.
 335              	******************************************************************************/
 336 055a 00BF     	.align 2
 337              	mixcolumns_1:
 338 055c CDF834E0 	    str     r14, [sp, #52]          // store link register
 339 0560 40F60F7E 	    movw    r14, #0x0f0f
 340 0564 C0F60F7E 	    movt    r14, #0x0f0f            // r14<- 0x0f0f0f0f (mask for BYTE_ROR_4)
 341 0568 0EEA1115 	    and     r5, r14, r1, lsr #4     // r5 <- (S0 >> 4) & 0x0f0f0f0f
 342 056c 0EEA0109 	    and     r9, r14, r1             // r9 <- S0 & 0x0f0f0f0f
 343 0570 45EA0915 	    orr     r5, r5, r9, lsl #4      // r5 <- BYTE_ROR_4(S0)
 344 0574 81EA3524 	    eor     r4, r1, r5, ror #8      // r4 <- S0 ^ (BYTE_ROR_4(S0) >>> 8)
 345 0578 4FEA3521 	    mov.w   r1, r5, ror #8          // r1 <- (BYTE_ROR_4(S0) >>> 8)
 346 057c 0EEA1B15 	    and     r5, r14, r11, lsr #4    // r5 <- (S7 >> 4) & 0x0f0f0f0f
 347 0580 0EEA0B09 	    and     r9, r14, r11            // r9 <- S7 & 0x0f0f0f0f
 348 0584 45EA0915 	    orr     r5, r5, r9, lsl #4      // r5 <- BYTE_ROR_4(S7)
 349 0588 8BEA352C 	    eor     r12, r11, r5, ror #8    // r12<- S7 ^ (BYTE_ROR_4(S7) >>> 8)
 350 058c 84EA0C0A 	    eor     r10, r4, r12            // r10<- r4 ^ r12
 351 0590 8BEA0A0B 	    eor     r11, r10                // r11<- S7 ^ r4 ^ r12
 352 0594 8BEA3C4B 	    eor     r11, r11, r12, ror #16  // r11<- r11 ^ (r12 >>> 16)
 353 0598 0EEA1215 	    and     r5, r14, r2, lsr #4     // r5 <- (S6 >> 4) & 0x0f0f0f0f
 354 059c 0EEA0209 	    and     r9, r14, r2             // r9 <- S6 & 0x0f0f0f0f
 355 05a0 45EA0915 	    orr     r5, r5, r9, lsl #4      // r5 <- BYTE_ROR_4(S6)
 356 05a4 8AEA352A 	    eor     r10, r10, r5, ror #8    // r10<- r10 ^ (BYTE_ROR_4(S6) >>> 8)
 357 05a8 82EA352C 	    eor     r12, r2, r5, ror #8     // r12<- S6 ^ (BYTE_ROR_4(S6) >>> 8)
 358 05ac 8AEA3C4A 	    eor     r10, r10, r12, ror #16  // r10<- r10 ^ (r12 >>> 16)
 359 05b0 0EEA1015 	    and     r5, r14, r0, lsr #4     // r5 <- (S5 >> 4) & 0x0f0f0f0f
 360 05b4 0EEA0009 	    and     r9, r14, r0             // r9 <- S5 & 0x0f0f0f0f
 361 05b8 45EA0915 	    orr     r5, r5, r9, lsl #4      // r5 <- BYTE_ROR_4(S5)
 362 05bc 8CEA3529 	    eor     r9, r12, r5, ror #8     // r9 <- r12 ^ (BYTE_ROR_4(S5) >>> 8)
 363 05c0 80EA352C 	    eor     r12, r0, r5, ror #8     // r12<- S5 ^ (BYTE_ROR_4(S5) >>> 8)
 364 05c4 89EA3C49 	    eor     r9, r9, r12, ror #16    // r9 <- (r9 ^ r12 >>> 16)
 365 05c8 84EA0C00 	    eor     r0, r4, r12             // r0 <- r12 ^ S0 ^ (BYTE_ROR_4(S0) >>> 8)
 366 05cc 0EEA1815 	    and     r5, r14, r8, lsr #4     // r5 <- (S4 >> 4) & 0x0f0f0f0f
 367 05d0 0EEA0802 	    and     r2, r14, r8             // r2 <- S4 & 0x0f0f0f0f
 368 05d4 45EA0212 	    orr     r2, r5, r2, lsl #4      // r2 <- BYTE_ROR_4(S4)
 369 05d8 80EA3220 	    eor     r0, r0, r2, ror #8      // r0 <- r0 ^ (BYTE_ROR_4(S4) >>> 8)
 370 05dc 88EA3222 	    eor     r2, r8, r2, ror #8      // r2 <- S4 ^ (BYTE_ROR_4(S4) >>> 8)
 371 05e0 80EA3248 	    eor     r8, r0, r2, ror #16     // r8 <- r0 ^ (r2 >>> 16)
 372 05e4 82EA0402 	    eor     r2, r4                  // r2 <- r2 ^ S0 ^ (BYTE_ROR_4(S0) >>> 8)
 373 05e8 0EEA1715 	    and     r5, r14, r7, lsr #4     // r5 <- (S3 >> 4) & 0x0f0f0f0f
 374 05ec 0EEA0700 	    and     r0, r14, r7             // r0 <- S3 & 0x0f0f0f0f
 375 05f0 45EA0010 	    orr     r0, r5, r0, lsl #4      // r0 <- BYTE_ROR_4(S3)
 376 05f4 82EA3022 	    eor     r2, r2, r0, ror #8      // r2 <- r2 ^ (BYTE_ROR_4(S3) >>> 8)
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 11


 377 05f8 87EA3020 	    eor     r0, r7, r0, ror #8      // r0 <- S3 ^ (BYTE_ROR_4(S3) >>> 8)
 378 05fc 82EA3047 	    eor     r7, r2, r0, ror #16     // r7 <- r2 ^ (r0 >>> 16)
 379 0600 0EEA1615 	    and     r5, r14, r6, lsr #4     // r5 <- (S2 >> 4) & 0x0f0f0f0f
 380 0604 0EEA0602 	    and     r2, r14, r6             // r2 <- S2 & 0x0f0f0f0f
 381 0608 45EA0212 	    orr     r2, r5, r2, lsl #4      // r2 <- BYTE_ROR_4(S2)
 382 060c 80EA3220 	    eor     r0, r0, r2, ror #8      // r0 <- r0 ^ (BYTE_ROR_4(S2) >>> 8)
 383 0610 86EA3222 	    eor     r2, r6, r2, ror #8      // r2 <- S2 ^ (BYTE_ROR_4(S2) >>> 8)
 384 0614 80EA3246 	    eor     r6, r0, r2, ror #16     // r6 <- r0 ^ (r2 >>> 16)
 385 0618 0EEA1315 	    and     r5, r14, r3, lsr #4     // r5 <- (S1 >> 4) & 0x0f0f0f0f
 386 061c 0EEA0300 	    and     r0, r14, r3             // r0 <- S1 & 0x0f0f0f0f
 387 0620 45EA0010 	    orr     r0, r5, r0, lsl #4      // r0 <- BYTE_ROR_4(S1)
 388 0624 DDF834E0 	    ldr     r14, [sp, #52]          // restore link register
 389 0628 82EA3022 	    eor     r2, r2, r0, ror #8      // r2 <- r2 ^ (BYTE_ROR_4(S1) >>> 8)
 390 062c 83EA3020 	    eor     r0, r3, r0, ror #8      // r0 <- S1 ^ (BYTE_ROR_4(S1) >>> 8)
 391 0630 82EA3045 	    eor     r5, r2, r0, ror #16     // r5 <- r2 <- (r0 >>> 16)
 392 0634 80EA0101 	    eor     r1, r0, r1              // r1 <- r0 ^ BYTE_ROR_4(S0) >>> 8
 393 0638 81EA3444 	    eor     r4, r1, r4, ror #16     // r4 <- r4 ^ (r0 >>> 16)
 394 063c 7047     	    bx      lr
 395              	
 396              	/******************************************************************************
 397              	* Computation of the MixColumns transformation in the fixsliced representation.
 398              	* For fully-fixsliced implementations only, for rounds i s.t. (i%4) == 2.
 399              	******************************************************************************/
 400 063e 00BF     	.align 2
 401              	mixcolumns_2:
 402 0640 CDF834E0 	    str     r14, [sp, #52]          // store link register
 403 0644 43F63F7C 	    movw    r12, #0x3f3f
 404 0648 C3F63F7C 	    movt    r12, #0x3f3f
 405              	    mc_0_2  r12, 2, 6, 30, 22
 405              	>  byteror r14,r1,r12,2,6,r9
 405 064c 0CEA910E 	>>  and r14,r12,r1,lsr 2
 405 0650 21EABC19 	>>  bic r9,r1,r12,ror 6
 405 0654 4EEA891E 	>>  orr r14,r14,r9,lsl 6
 405 0658 81EA3E24 	>  eor r4,r1,r14,ror#8
 405 065c 40F60F71 	>  movw r1,#0x0f0f
 405 0660 C0F60F71 	>  movt r1,#0x0f0f
 405              	>  byteror r5,r11,r12,2,6,r9
 405 0664 0CEA9B05 	>>  and r5,r12,r11,lsr 2
 405 0668 2BEABC19 	>>  bic r9,r11,r12,ror 6
 405 066c 45EA8915 	>>  orr r5,r5,r9,lsl 6
 405 0670 8BEA352A 	>  eor r10,r11,r5,ror#8
 405              	>  byteror r11,r10,r1,4,4,r9
 405 0674 01EA1A1B 	>>  and r11,r1,r10,lsr 4
 405 0678 2AEA3119 	>>  bic r9,r10,r1,ror 4
 405 067c 4BEA091B 	>>  orr r11,r11,r9,lsl 4
 405 0680 84EA3B4B 	>  eor r11,r4,r11,ror#16
 405 0684 8BEA352B 	>  eor r11,r11,r5,ror#8
 405              	>  byteror r5,r2,r12,2,6,r9
 405 0688 0CEA9205 	>>  and r5,r12,r2,lsr 2
 405 068c 22EABC19 	>>  bic r9,r2,r12,ror 6
 405 0690 45EA8915 	>>  orr r5,r5,r9,lsl 6
 405 0694 82EA3522 	>  eor r2,r2,r5,ror#8
 405 0698 8AEA352A 	>  eor r10,r10,r5,ror#8
 405              	>  byteror r5,r2,r1,4,4,r9
 405 069c 01EA1215 	>>  and r5,r1,r2,lsr 4
 405 06a0 22EA3119 	>>  bic r9,r2,r1,ror 4
 405 06a4 45EA0915 	>>  orr r5,r5,r9,lsl 4
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 12


 405 06a8 8AEA354A 	>  eor r10,r10,r5,ror#16
 405 06ac 8AEA040A 	>  eor r10,r10,r4
 405              	>  byteror r5,r0,r12,2,6,r9
 405 06b0 0CEA9005 	>>  and r5,r12,r0,lsr 2
 405 06b4 20EABC19 	>>  bic r9,r0,r12,ror 6
 405 06b8 45EA8915 	>>  orr r5,r5,r9,lsl 6
 405 06bc 80EA3520 	>  eor r0,r0,r5,ror#8
 405 06c0 82EA3529 	>  eor r9,r2,r5,ror#8
 405              	>  byteror r5,r0,r1,4,4,r2
 405 06c4 01EA1015 	>>  and r5,r1,r0,lsr 4
 405 06c8 20EA3112 	>>  bic r2,r0,r1,ror 4
 405 06cc 45EA0215 	>>  orr r5,r5,r2,lsl 4
 405 06d0 89EA3549 	>  eor r9,r9,r5,ror#16
 405              	>  byteror r5,r8,r12,2,6,r2
 405 06d4 0CEA9805 	>>  and r5,r12,r8,lsr 2
 405 06d8 28EABC12 	>>  bic r2,r8,r12,ror 6
 405 06dc 45EA8215 	>>  orr r5,r5,r2,lsl 6
 405 06e0 88EA3522 	>  eor r2,r8,r5,ror#8
 405 06e4 80EA3528 	>  eor r8,r0,r5,ror#8
 405              	>  byteror r5,r2,r1,4,4,r0
 405 06e8 01EA1215 	>>  and r5,r1,r2,lsr 4
 405 06ec 22EA3110 	>>  bic r0,r2,r1,ror 4
 405 06f0 45EA0015 	>>  orr r5,r5,r0,lsl 4
 405 06f4 88EA3548 	>  eor r8,r8,r5,ror#16
 405 06f8 88EA0408 	>  eor r8,r8,r4
 405              	>  byteror r5,r7,r12,2,6,r0
 405 06fc 0CEA9705 	>>  and r5,r12,r7,lsr 2
 405 0700 27EABC10 	>>  bic r0,r7,r12,ror 6
 405 0704 45EA8015 	>>  orr r5,r5,r0,lsl 6
 405 0708 87EA3520 	>  eor r0,r7,r5,ror#8
 405 070c 82EA3527 	>  eor r7,r2,r5,ror#8
 405              	>  byteror r5,r0,r1,4,4,r2
 405 0710 01EA1015 	>>  and r5,r1,r0,lsr 4
 405 0714 20EA3112 	>>  bic r2,r0,r1,ror 4
 405 0718 45EA0215 	>>  orr r5,r5,r2,lsl 4
 405 071c 87EA3547 	>  eor r7,r7,r5,ror#16
 405 0720 87EA0407 	>  eor r7,r7,r4
 405              	>  byteror r5,r6,r12,2,6,r2
 405 0724 0CEA9605 	>>  and r5,r12,r6,lsr 2
 405 0728 26EABC12 	>>  bic r2,r6,r12,ror 6
 405 072c 45EA8215 	>>  orr r5,r5,r2,lsl 6
 405 0730 86EA3522 	>  eor r2,r6,r5,ror#8
 405 0734 80EA3526 	>  eor r6,r0,r5,ror#8
 405              	>  byteror r5,r2,r1,4,4,r0
 405 0738 01EA1215 	>>  and r5,r1,r2,lsr 4
 405 073c 22EA3110 	>>  bic r0,r2,r1,ror 4
 405 0740 45EA0015 	>>  orr r5,r5,r0,lsl 4
 405 0744 86EA3546 	>  eor r6,r6,r5,ror#16
 405              	>  byteror r5,r3,r12,2,6,r0
 405 0748 0CEA9305 	>>  and r5,r12,r3,lsr 2
 405 074c 23EABC10 	>>  bic r0,r3,r12,ror 6
 405 0750 45EA8015 	>>  orr r5,r5,r0,lsl 6
 405 0754 83EA3520 	>  eor r0,r3,r5,ror#8
 405 0758 82EA3523 	>  eor r3,r2,r5,ror#8
 405              	>  byteror r5,r0,r1,4,4,r2
 405 075c 01EA1015 	>>  and r5,r1,r0,lsr 4
 405 0760 20EA3112 	>>  bic r2,r0,r1,ror 4
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 13


 405 0764 45EA0215 	>>  orr r5,r5,r2,lsl 4
 405 0768 83EA3545 	>  eor r5,r3,r5,ror#16
 405 076c 80EA3E2E 	>  eor r14,r0,r14,ror#8
 405              	>  byteror r0,r4,r1,4,4,r2
 405 0770 01EA1410 	>>  and r0,r1,r4,lsr 4
 405 0774 24EA3112 	>>  bic r2,r4,r1,ror 4
 405 0778 40EA0210 	>>  orr r0,r0,r2,lsl 4
 405 077c 8EEA3044 	>  eor r4,r14,r0,ror#16
 406 0780 DDF834E0 	    ldr     r14, [sp, #52]          // restore link register
 407 0784 7047     	    bx      lr
 408              	
 409              	/******************************************************************************
 410              	* Computation of the MixColumns transformation in the fixsliced representation.
 411              	* For fully-fixsliced implementations, it is used for rounds i s.t. (i%4) == 3.
 412              	* For semi-fixsliced implementations, it is used for rounds i s.t. (i%2) == 1.
 413              	* Based on Käsper-Schwabe, similar to https://github.com/Ko-/aes-armcortexm.
 414              	******************************************************************************/
 415 0786 00BF     	.align 2
 416              	mixcolumns_3:
 417 0788 8BEA3B2C 	    eor     r12, r11, r11, ror #8   // r12<- S7 ^ (S7 >>> 8)
 418 078c 81EA3124 	    eor     r4, r1, r1, ror #8      // r4 <- S0 ^ (S0 >>> 8)
 419 0790 84EA3B2B 	    eor     r11, r4, r11, ror #8    // r11<- S0 ^ (S0 >>> 8) ^ (S7 >>> 8)
 420 0794 8BEA3C4B 	    eor     r11, r11, r12, ror #16  // r11<- r11 ^ (S7 >>> 16) ^ (S7 >>> 24)
 421 0798 8CEA322A 	    eor     r10, r12, r2, ror #8    // r10<- S7 ^ (S7 >>> 8) ^ (S6 >>> 8)
 422 079c 82EA322C 	    eor     r12, r2, r2, ror #8     // r12<- S6 ^ (S6 >>> 8)
 423 07a0 8AEA3C4A 	    eor     r10, r10, r12, ror #16  // r10<- r10 ^ (S6 >>> 16) ^ (S6 >>> 24)
 424 07a4 8AEA040A 	    eor     r10, r4                 // r10<- r10 ^ S0 ^ (S0 >>> 8)
 425 07a8 8CEA3029 	    eor     r9, r12, r0, ror #8     // r9 <- S6 ^ (S6 >>> 8) ^ (S5 >>> 8)
 426 07ac 80EA302C 	    eor     r12, r0, r0, ror #8     // r12<- S5 ^ (S5 >>> 8)
 427 07b0 89EA3C49 	    eor     r9, r9, r12, ror #16    // r9 <- r9 ^ (S5 >>> 16) ^ (S5 >>> 24)
 428 07b4 88EA3822 	    eor     r2, r8, r8, ror #8      // r2 <- S4 ^ (S4 >>> 8)
 429 07b8 8CEA3828 	    eor     r8, r12, r8, ror #8     // r8 <- S5 ^ (S5 >>> 8) ^ (S4 >>> 8)
 430 07bc 88EA0408 	    eor     r8, r4                  // r8 <- r8 ^ S0 ^ (S0 >>> 8)
 431 07c0 88EA3248 	    eor     r8, r8, r2, ror #16     // r8 <- r8 ^ (S4 >>> 16) ^ (S4 >>> 24)
 432 07c4 87EA372C 	    eor     r12, r7, r7, ror #8     // r12<- S3 ^ (S3 >>> 8)
 433 07c8 82EA3727 	    eor     r7, r2, r7, ror #8      // r7 <- S4 ^ (S4 >>> 8) ^ (S3 >>> 8)
 434 07cc 87EA0407 	    eor     r7, r4                  // r7 <- r7 ^ S0 ^ (S0 >>> 8)
 435 07d0 87EA3C47 	    eor     r7, r7, r12, ror #16    // r7 <- r7 ^ (S3 >>> 16) ^ (S3 >>> 24)
 436 07d4 86EA3622 	    eor     r2, r6, r6, ror #8      // r2 <- S2 ^ (S2 >>> 8)
 437 07d8 8CEA3626 	    eor     r6, r12, r6, ror #8     // r6 <- S3 ^ (S3 >>> 8) ^ (S2 >>> 8)
 438 07dc 86EA3246 	    eor     r6, r6, r2, ror #16     // r6 <- r6 ^ (S2 >>> 16) ^ (S2 >>> 24)
 439 07e0 83EA332C 	    eor     r12, r3, r3, ror #8     // r12<- S1 ^ (S1 >>> 8)
 440 07e4 82EA3325 	    eor     r5, r2, r3, ror #8      // r5 <- S2 ^ (S2 >>> 8) ^ (S1 >>> 8)
 441 07e8 85EA3C45 	    eor     r5, r5, r12, ror #16    // r5 <- r5 ^ (S1 >>> 16) ^ (S1 >>> 24)
 442 07ec 8CEA3444 	    eor     r4, r12, r4, ror #16    // r4 <- S1 ^ (S1 >>> 8) ^ (r4 >>> 16)
 443 07f0 84EA3124 	    eor     r4, r4, r1, ror #8      // r4 <- r4 ^ (S0 >>> 8)
 444 07f4 7047     	    bx      lr
 445              	
 446              	/******************************************************************************
 447              	* Applies the ShiftRows transformation twice (i.e. SR^2) on the internal state.
 448              	******************************************************************************/
 449 07f6 00BF     	.align 2
 450              	double_shiftrows:
 451 07f8 40F6007A 	    movw    r10, #0x0f00
 452 07fc C0F6007A 	    movt    r10, #0x0f00            // r10<- 0x0f000f00 (mask)
 453              	    swpmv   r0, r0, r0, r0, r10, #4, r12
 453 0800 80EA101C 	>  eor r12,r0,r0,lsr#4
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 14


 453 0804 0CEA0A0C 	>  and r12,r10
 453 0808 80EA0C00 	>  eor r0,r0,r12
 453 080c 80EA0C10 	>  eor r0,r0,r12,lsl#4
 454              	    swpmv   r1, r1, r1, r1, r10, #4, r12
 454 0810 81EA111C 	>  eor r12,r1,r1,lsr#4
 454 0814 0CEA0A0C 	>  and r12,r10
 454 0818 81EA0C01 	>  eor r1,r1,r12
 454 081c 81EA0C11 	>  eor r1,r1,r12,lsl#4
 455              	    swpmv   r2, r2, r2, r2, r10, #4, r12
 455 0820 82EA121C 	>  eor r12,r2,r2,lsr#4
 455 0824 0CEA0A0C 	>  and r12,r10
 455 0828 82EA0C02 	>  eor r2,r2,r12
 455 082c 82EA0C12 	>  eor r2,r2,r12,lsl#4
 456              	    swpmv   r3, r3, r3, r3, r10, #4, r12
 456 0830 83EA131C 	>  eor r12,r3,r3,lsr#4
 456 0834 0CEA0A0C 	>  and r12,r10
 456 0838 83EA0C03 	>  eor r3,r3,r12
 456 083c 83EA0C13 	>  eor r3,r3,r12,lsl#4
 457              	    swpmv   r6, r6, r6, r6, r10, #4, r12
 457 0840 86EA161C 	>  eor r12,r6,r6,lsr#4
 457 0844 0CEA0A0C 	>  and r12,r10
 457 0848 86EA0C06 	>  eor r6,r6,r12
 457 084c 86EA0C16 	>  eor r6,r6,r12,lsl#4
 458              	    swpmv   r7, r7, r7, r7, r10, #4, r12
 458 0850 87EA171C 	>  eor r12,r7,r7,lsr#4
 458 0854 0CEA0A0C 	>  and r12,r10
 458 0858 87EA0C07 	>  eor r7,r7,r12
 458 085c 87EA0C17 	>  eor r7,r7,r12,lsl#4
 459              	    swpmv   r8, r8, r8, r8, r10, #4, r12
 459 0860 88EA181C 	>  eor r12,r8,r8,lsr#4
 459 0864 0CEA0A0C 	>  and r12,r10
 459 0868 88EA0C08 	>  eor r8,r8,r12
 459 086c 88EA0C18 	>  eor r8,r8,r12,lsl#4
 460              	    swpmv   r11, r11, r11, r11, r10, #4, r12
 460 0870 8BEA1B1C 	>  eor r12,r11,r11,lsr#4
 460 0874 0CEA0A0C 	>  and r12,r10
 460 0878 8BEA0C0B 	>  eor r11,r11,r12
 460 087c 8BEA0C1B 	>  eor r11,r11,r12,lsl#4
 461 0880 7047     	    bx      lr
 462              	
 463              	/******************************************************************************
 464              	* Fully-fixsliced implementation of AES-128.
 465              	*
 466              	* Two blocks are encrypted in parallel, without any operating mode.
 467              	*
 468              	* Note that additional 4 bytes are allocated on the stack as the function takes
 469              	* 5 arguments as input.
 470              	******************************************************************************/
 471              	@ void aes128_encrypt_ffs(u8* ctext, u8* ctext_bis, const u8* ptext,
 472              	@                   const u8* ptext_bis, const u32* rkey);
 473              	.global aes128_encrypt_ffs
 474              	.type   aes128_encrypt_ffs,%function
 475 0882 00BF     	.align 2
 476              	aes128_encrypt_ffs:
 477 0884 2DE9FF5F 	    push    {r0-r12,r14}
 478 0888 ADF1380D 	    sub.w   sp, #56                 // allow space on the stack for tmp var
 479 088c D2F80040 	    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 15


 480 0890 5568     	    ldr     r5, [r2, #4]
 481 0892 9668     	    ldr     r6, [r2, #8]
 482 0894 D768     	    ldr     r7, [r2, #12]
 483 0896 D3F80080 	    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 484 089a D3F80490 	    ldr     r9, [r3, #4]
 485 089e D3F808A0 	    ldr     r10,[r3, #8]
 486 08a2 D3F80CB0 	    ldr     r11,[r3, #12]
 487 08a6 DDF87010 	    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 488 08aa CDF83010 	    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 489 08ae FFF7A7FB 	    bl      packing                 // pack the 2 input blocks
 490 08b2 FFF779FC 	    bl      ark_sbox                // ark + sbox (round 0)
 491 08b6 FFF7ADFD 	    bl      mixcolumns_0            // mixcolumns (round 0)
 492 08ba FFF775FC 	    bl      ark_sbox                // ark + sbox (round 1)
 493 08be FFF74DFE 	    bl      mixcolumns_1            // mixcolumns (round 1)
 494 08c2 FFF771FC 	    bl      ark_sbox                // ark + sbox (round 2)
 495 08c6 FFF7BBFE 	    bl      mixcolumns_2            // mixcolumns (round 2)
 496 08ca FFF76DFC 	    bl      ark_sbox                // ark + sbox (round 3)
 497 08ce FFF75BFF 	    bl      mixcolumns_3            // mixcolumns (round 3)
 498 08d2 FFF769FC 	    bl      ark_sbox                // ark + sbox (round 4)
 499 08d6 FFF79DFD 	    bl      mixcolumns_0            // mixcolumns (round 4)
 500 08da FFF765FC 	    bl      ark_sbox                // ark + sbox (round 5)
 501 08de FFF73DFE 	    bl      mixcolumns_1            // mixcolumns (round 5)
 502 08e2 FFF761FC 	    bl      ark_sbox                // ark + sbox (round 6)
 503 08e6 FFF7ABFE 	    bl      mixcolumns_2            // mixcolumns (round 6)
 504 08ea FFF75DFC 	    bl      ark_sbox                // ark + sbox (round 7)
 505 08ee FFF74BFF 	    bl      mixcolumns_3            // mixcolumns (round 7)
 506 08f2 FFF759FC 	    bl      ark_sbox                // ark + sbox (round 8)
 507 08f6 FFF78DFD 	    bl      mixcolumns_0            // mixcolumns (round 8)
 508 08fa FFF755FC 	    bl      ark_sbox                // ark + sbox (round 9)
 509 08fe FFF77BFF 	    bl      double_shiftrows        // to resynchronize with the classical rep
 510 0902 DDF830E0 	    ldr     r14, [sp, #48]          // ---------------------------------------
 511 0906 BEE83014 	    ldmia   r14!, {r4,r5,r10,r12}   //
 512 090a 84EA0104 	    eor     r4, r1                  //
 513 090e 85EA0305 	    eor     r5, r3                  //
 514 0912 86EA0A06 	    eor     r6, r10                 //
 515 0916 87EA0C07 	    eor     r7, r12                 //  Last add_round_key
 516 091a BEE80A14 	    ldmia   r14!, {r1,r3,r10,r12}   //
 517 091e 88EA0108 	    eor     r8, r1                  //
 518 0922 80EA0309 	    eor     r9, r0, r3              //
 519 0926 8AEA020A 	    eor     r10, r2                 //
 520 092a 8BEA0C0B 	    eor     r11, r12                // ---------------------------------------
 521 092e FFF7D1FB 	    bl      unpacking               // unpack the internal state
 522 0932 DDE90E01 	    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 523 0936 0DF1400D 	    add.w   sp, #64                 // restore the stack pointer
 524 093a C0F80040 	    str.w   r4, [r0]                // store the ciphertext
 525 093e 4560     	    str     r5, [r0, #4]
 526 0940 8660     	    str     r6, [r0, #8]
 527 0942 C760     	    str     r7, [r0, #12]
 528 0944 C1F80080 	    str.w   r8, [r1]               // store the ciphertext
 529 0948 C1F80490 	    str     r9, [r1, #4]
 530 094c C1F808A0 	    str     r10,[r1, #8]
 531 0950 C1F80CB0 	    str     r11,[r1, #12]
 532 0954 BDE8FC5F 	    pop     {r2-r12, r14}           // restore context
 533 0958 7047     	    bx      lr
 534              	
 535              	/******************************************************************************
 536              	* Fully-fixsliced implementation of AES-256.
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 16


 537              	*
 538              	* Two blocks are encrypted in parallel, without any operating mode.
 539              	*
 540              	* Note that additional 4 bytes are allocated on the stack as the function takes
 541              	* 5 arguments as input.
 542              	******************************************************************************/
 543              	@ void aes256_encrypt_ffs(u8* ctext, u8* ctext_bis, const u8* ptext,
 544              	@                   const u8* ptext_bis, const u32* rkey);
 545              	.global aes256_encrypt_ffs
 546              	.type   aes256_encrypt_ffs,%function
 547 095a 00BF     	.align 2
 548              	aes256_encrypt_ffs:
 549 095c 2DE9FF5F 	    push    {r0-r12,r14}
 550 0960 ADF1380D 	    sub.w   sp, #56                 // allow space on the stack for tmp var
 551 0964 D2F80040 	    ldr.w   r4, [r2]                // load the 1st 128-bit blocks in r4-r7
 552 0968 5568     	    ldr     r5, [r2, #4]
 553 096a 9668     	    ldr     r6, [r2, #8]
 554 096c D768     	    ldr     r7, [r2, #12]
 555 096e D3F80080 	    ldr.w   r8, [r3]                // load the 2nd 128-bit blocks in r8-r11
 556 0972 D3F80490 	    ldr     r9, [r3, #4]
 557 0976 D3F808A0 	    ldr     r10,[r3, #8]
 558 097a D3F80CB0 	    ldr     r11,[r3, #12]
 559 097e DDF87010 	    ldr.w   r1, [sp, #112]          // load 'rkey' argument from the stack
 560 0982 CDF83010 	    str.w   r1, [sp, #48]           // store it there for 'add_round_key'
 561 0986 FFF73BFB 	    bl      packing                 // pack the 2 input blocks
 562 098a FFF70DFC 	    bl      ark_sbox                // ark + sbox (round 0)
 563 098e FFF741FD 	    bl      mixcolumns_0            // mixcolumns (round 0)
 564 0992 FFF709FC 	    bl      ark_sbox                // ark + sbox (round 1)
 565 0996 FFF7E1FD 	    bl      mixcolumns_1            // mixcolumns (round 1)
 566 099a FFF705FC 	    bl      ark_sbox                // ark + sbox (round 2)
 567 099e FFF74FFE 	    bl      mixcolumns_2            // mixcolumns (round 2)
 568 09a2 FFF701FC 	    bl      ark_sbox                // ark + sbox (round 3)
 569 09a6 FFF7EFFE 	    bl      mixcolumns_3            // mixcolumns (round 3)
 570 09aa FFF7FDFB 	    bl      ark_sbox                // ark + sbox (round 4)
 571 09ae FFF731FD 	    bl      mixcolumns_0            // mixcolumns (round 4)
 572 09b2 FFF7F9FB 	    bl      ark_sbox                // ark + sbox (round 5)
 573 09b6 FFF7D1FD 	    bl      mixcolumns_1            // mixcolumns (round 5)
 574 09ba FFF7F5FB 	    bl      ark_sbox                // ark + sbox (round 6)
 575 09be FFF73FFE 	    bl      mixcolumns_2            // mixcolumns (round 6)
 576 09c2 FFF7F1FB 	    bl      ark_sbox                // ark + sbox (round 7)
 577 09c6 FFF7DFFE 	    bl      mixcolumns_3            // mixcolumns (round 7)
 578 09ca FFF7EDFB 	    bl      ark_sbox                // ark + sbox (round 8)
 579 09ce FFF721FD 	    bl      mixcolumns_0            // mixcolumns (round 8)
 580 09d2 FFF7E9FB 	    bl      ark_sbox                // ark + sbox (round 9)
 581 09d6 FFF7C1FD 	    bl      mixcolumns_1            // mixcolumns (round 9)
 582 09da FFF7E5FB 	    bl      ark_sbox                // ark + sbox (round 10)
 583 09de FFF72FFE 	    bl      mixcolumns_2            // mixcolumns (round 10)
 584 09e2 FFF7E1FB 	    bl      ark_sbox                // ark + sbox (round 11)
 585 09e6 FFF7CFFE 	    bl      mixcolumns_3            // mixcolumns (round 11)
 586 09ea FFF7DDFB 	    bl      ark_sbox                // ark + sbox (round 12)
 587 09ee FFF711FD 	    bl      mixcolumns_0            // mixcolumns (round 12)
 588 09f2 FFF7D9FB 	    bl      ark_sbox                // ark + sbox (round 13)
 589 09f6 FFF7FFFE 	    bl      double_shiftrows        // to resynchronize with the classical rep
 590 09fa DDF830E0 	    ldr     r14, [sp, #48]          // ---------------------------------------
 591 09fe BEE83014 	    ldmia   r14!, {r4,r5,r10,r12}   //
 592 0a02 84EA0104 	    eor     r4, r1                  //
 593 0a06 85EA0305 	    eor     r5, r3                  //
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 17


 594 0a0a 86EA0A06 	    eor     r6, r10                 //
 595 0a0e 87EA0C07 	    eor     r7, r12                 //  Last add_round_key
 596 0a12 BEE80A14 	    ldmia   r14!, {r1,r3,r10,r12}   //
 597 0a16 88EA0108 	    eor     r8, r1                  //
 598 0a1a 80EA0309 	    eor     r9, r0, r3              //
 599 0a1e 8AEA020A 	    eor     r10, r2                 //
 600 0a22 8BEA0C0B 	    eor     r11, r12                // ---------------------------------------
 601 0a26 FFF755FB 	    bl      unpacking               // unpack the internal state
 602 0a2a DDE90E01 	    ldrd    r0, r1, [sp, #56]       // restore the addr to store the ciphertext
 603 0a2e 0DF1400D 	    add.w   sp, #64                 // restore the stack pointer
 604 0a32 C0F80040 	    str.w   r4, [r0]                // store the ciphertext
 605 0a36 4560     	    str     r5, [r0, #4]
 606 0a38 8660     	    str     r6, [r0, #8]
 607 0a3a C760     	    str     r7, [r0, #12]
 608 0a3c C1F80080 	    str.w   r8, [r1]                // store the ciphertext
 609 0a40 C1F80490 	    str     r9, [r1, #4]
 610 0a44 C1F808A0 	    str     r10,[r1, #8]
 611 0a48 C1F80CB0 	    str     r11,[r1, #12]
 612 0a4c BDE8FC5F 	    pop     {r2-r12, r14}           // restore context
 613 0a50 704700BF 	    bx      lr...
ARM GAS  C:\Users\Ridwane\AppData\Local\Temp\ccTrzHuL.s 			page 18


DEFINED SYMBOLS
       aes-encrypt.S:104    .text:00000000 $t
       aes-encrypt.S:105    .text:00000000 packing
       aes-encrypt.S:128    .text:000000d4 unpacking
       aes-encrypt.S:152    .text:000001a8 ark_sbox
       aes-encrypt.S:324    .text:00000414 mixcolumns_0
       aes-encrypt.S:337    .text:0000055c mixcolumns_1
       aes-encrypt.S:401    .text:00000640 mixcolumns_2
       aes-encrypt.S:416    .text:00000788 mixcolumns_3
       aes-encrypt.S:450    .text:000007f8 double_shiftrows
       aes-encrypt.S:476    .text:00000884 aes128_encrypt_ffs
       aes-encrypt.S:548    .text:0000095c aes256_encrypt_ffs

NO UNDEFINED SYMBOLS
