
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	080067f1 	.word	0x080067f1
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	080002bb 	.word	0x080002bb
 8000070:	080002bb 	.word	0x080002bb
 8000074:	080002bb 	.word	0x080002bb
 8000078:	080002bb 	.word	0x080002bb
 800007c:	080002bb 	.word	0x080002bb
 8000080:	080002bb 	.word	0x080002bb
 8000084:	080002bb 	.word	0x080002bb
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	08001951 	.word	0x08001951
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	08001891 	.word	0x08001891
 80000d8:	080018f1 	.word	0x080018f1
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	080002bb 	.word	0x080002bb
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	080002bb 	.word	0x080002bb
 8000124:	080002bb 	.word	0x080002bb
 8000128:	080002bb 	.word	0x080002bb
 800012c:	080002bb 	.word	0x080002bb
 8000130:	080002bb 	.word	0x080002bb
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	080002bb 	.word	0x080002bb
 8000154:	080002bb 	.word	0x080002bb
 8000158:	080002bb 	.word	0x080002bb
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4826      	ldr	r0, [pc, #152]	; (800027c <endfiniloop+0x6>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4825      	ldr	r0, [pc, #148]	; (8000280 <endfiniloop+0xa>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 80001ee:	4825      	ldr	r0, [pc, #148]	; (8000284 <endfiniloop+0xe>)
                ldr     r1, =SCB_VTOR
 80001f0:	4925      	ldr	r1, [pc, #148]	; (8000288 <endfiniloop+0x12>)
                str     r0, [r1]
 80001f2:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001f4:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001f6:	f380 8814 	msr	CONTROL, r0
                isb
 80001fa:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 80001fe:	f001 faf7 	bl	80017f0 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000202:	f001 fc95 	bl	8001b30 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000206:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 800020a:	4920      	ldr	r1, [pc, #128]	; (800028c <endfiniloop+0x16>)
                ldr     r2, =__main_stack_end__
 800020c:	4a1b      	ldr	r2, [pc, #108]	; (800027c <endfiniloop+0x6>)

0800020e <msloop>:
msloop:
                cmp     r1, r2
 800020e:	4291      	cmp	r1, r2
                itt     lo
 8000210:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000212:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000216:	e7fa      	bcc.n	800020e <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000218:	491d      	ldr	r1, [pc, #116]	; (8000290 <endfiniloop+0x1a>)
                ldr     r2, =__process_stack_end__
 800021a:	4a19      	ldr	r2, [pc, #100]	; (8000280 <endfiniloop+0xa>)

0800021c <psloop>:
psloop:
                cmp     r1, r2
 800021c:	4291      	cmp	r1, r2
                itt     lo
 800021e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000220:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 8000224:	e7fa      	bcc.n	800021c <psloop>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 8000226:	491b      	ldr	r1, [pc, #108]	; (8000294 <endfiniloop+0x1e>)
                ldr     r2, =__data_base__
 8000228:	4a1b      	ldr	r2, [pc, #108]	; (8000298 <endfiniloop+0x22>)
                ldr     r3, =__data_end__
 800022a:	4b1c      	ldr	r3, [pc, #112]	; (800029c <endfiniloop+0x26>)

0800022c <dloop>:
dloop:
                cmp     r2, r3
 800022c:	429a      	cmp	r2, r3
                ittt    lo
 800022e:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000230:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 8000234:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 8000238:	e7f8      	bcc.n	800022c <dloop>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 800023a:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 800023c:	4918      	ldr	r1, [pc, #96]	; (80002a0 <endfiniloop+0x2a>)
                ldr     r2, =__bss_end__
 800023e:	4a19      	ldr	r2, [pc, #100]	; (80002a4 <endfiniloop+0x2e>)

08000240 <bloop>:
bloop:
                cmp     r1, r2
 8000240:	4291      	cmp	r1, r2
                itt     lo
 8000242:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000244:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 8000248:	e7fa      	bcc.n	8000240 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 800024a:	f001 fae9 	bl	8001820 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 800024e:	f001 fad7 	bl	8001800 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000252:	4c15      	ldr	r4, [pc, #84]	; (80002a8 <endfiniloop+0x32>)
                ldr     r5, =__init_array_end__
 8000254:	4d15      	ldr	r5, [pc, #84]	; (80002ac <endfiniloop+0x36>)

08000256 <initloop>:
initloop:
                cmp     r4, r5
 8000256:	42ac      	cmp	r4, r5
                bge     endinitloop
 8000258:	da03      	bge.n	8000262 <endinitloop>
                ldr     r1, [r4], #4
 800025a:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 800025e:	4788      	blx	r1
                b       initloop
 8000260:	e7f9      	b.n	8000256 <initloop>

08000262 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000262:	f00b fbbd 	bl	800b9e0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 8000266:	4c12      	ldr	r4, [pc, #72]	; (80002b0 <endfiniloop+0x3a>)
                ldr     r5, =__fini_array_end__
 8000268:	4d12      	ldr	r5, [pc, #72]	; (80002b4 <endfiniloop+0x3e>)

0800026a <finiloop>:
finiloop:
                cmp     r4, r5
 800026a:	42ac      	cmp	r4, r5
                bge     endfiniloop
 800026c:	da03      	bge.n	8000276 <endfiniloop>
                ldr     r1, [r4], #4
 800026e:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000272:	4788      	blx	r1
                b       finiloop
 8000274:	e7f9      	b.n	800026a <finiloop>

08000276 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 8000276:	f001 bacb 	b.w	8001810 <__default_exit>
 800027a:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 800027c:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000280:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000284:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 8000288:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	0801efd0 	.word	0x0801efd0
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	20000938 	.word	0x20000938
                ldr     r1, =__bss_base__
 80002a0:	20000938 	.word	0x20000938
                ldr     r2, =__bss_end__
 80002a4:	20018350 	.word	0x20018350
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <__port_thread_start>:
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f003 fde0 	bl	8003ea0 <chThdExit>

080002e0 <.zombies>:
.zombies:       b       .zombies
 80002e0:	e7fe      	b.n	80002e0 <.zombies>

080002e2 <__port_switch_from_isr>:
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
#endif
                bl      chSchDoPreemption
 80002e2:	f001 fe35 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>

080002e6 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e8:	e7fe      	b.n	80002e8 <__port_exit_from_isr+0x2>
 80002ea:	0000      	movs	r0, r0
 80002ec:	0000      	movs	r0, r0
	...

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strcmp>:
 8000390:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000394:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000398:	2a01      	cmp	r2, #1
 800039a:	bf28      	it	cs
 800039c:	429a      	cmpcs	r2, r3
 800039e:	d0f7      	beq.n	8000390 <strcmp>
 80003a0:	1ad0      	subs	r0, r2, r3
 80003a2:	4770      	bx	lr
	...

080003b0 <_ctl.lto_priv.0>:
    return sd_lld_control(sdp, operation, arg);
#else
    return HAL_RET_UNKNOWN_CTL;
#endif
  }
  return HAL_RET_SUCCESS;
 80003b0:	2901      	cmp	r1, #1
}
 80003b2:	bf14      	ite	ne
 80003b4:	f06f 0013 	mvnne.w	r0, #19
 80003b8:	2000      	moveq	r0, #0
 80003ba:	4770      	bx	lr
 80003bc:	0000      	movs	r0, r0
	...

080003c0 <notify1.lto_priv.0>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80003c0:	4a02      	ldr	r2, [pc, #8]	; (80003cc <notify1.lto_priv.0+0xc>)
 80003c2:	68d3      	ldr	r3, [r2, #12]
 80003c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80003c8:	60d3      	str	r3, [r2, #12]
}
 80003ca:	4770      	bx	lr
 80003cc:	40011000 	.word	0x40011000

080003d0 <notify2.lto_priv.0>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80003d0:	4a02      	ldr	r2, [pc, #8]	; (80003dc <notify2.lto_priv.0+0xc>)
 80003d2:	68d3      	ldr	r3, [r2, #12]
 80003d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80003d8:	60d3      	str	r3, [r2, #12]
}
 80003da:	4770      	bx	lr
 80003dc:	40004400 	.word	0x40004400

080003e0 <__idle_thread.lto_priv.0>:
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 80003e0:	e7fe      	b.n	80003e0 <__idle_thread.lto_priv.0>
 80003e2:	bf00      	nop
	...

080003f0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80003f0:	b410      	push	{r4}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80003f2:	2330      	movs	r3, #48	; 0x30
 80003f4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <chCoreAllocFromTop+0x38>)
 80003fa:	685c      	ldr	r4, [r3, #4]
 80003fc:	4249      	negs	r1, r1
 80003fe:	1a20      	subs	r0, r4, r0
 8000400:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000402:	6819      	ldr	r1, [r3, #0]
  prev = p - offset;
 8000404:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000406:	428a      	cmp	r2, r1
 8000408:	d307      	bcc.n	800041a <chCoreAllocFromTop+0x2a>
 800040a:	4294      	cmp	r4, r2
 800040c:	d305      	bcc.n	800041a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	2300      	movs	r3, #0
 8000412:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000416:	bc10      	pop	{r4}
 8000418:	4770      	bx	lr
    return NULL;
 800041a:	2000      	movs	r0, #0
 800041c:	2300      	movs	r3, #0
 800041e:	f383 8811 	msr	BASEPRI, r3
}
 8000422:	bc10      	pop	{r4}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	20000b60 	.word	0x20000b60
 800042c:	00000000 	.word	0x00000000

08000430 <__ch_delegate_fn0>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn0(va_list *argsp) {
  delegate_fn0_t fn0 = (delegate_fn0_t)va_arg(*argsp, delegate_fn0_t);
 8000430:	6803      	ldr	r3, [r0, #0]
 8000432:	1d1a      	adds	r2, r3, #4
 8000434:	6002      	str	r2, [r0, #0]
  return fn0();
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4718      	bx	r3
 800043a:	bf00      	nop
 800043c:	0000      	movs	r0, r0
	...

08000440 <__ch_delegate_fn1>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn1(va_list *argsp) {
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8000440:	6801      	ldr	r1, [r0, #0]
msg_t __ch_delegate_fn1(va_list *argsp) {
 8000442:	4603      	mov	r3, r0
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8000444:	460a      	mov	r2, r1
 8000446:	1d08      	adds	r0, r1, #4
msg_t __ch_delegate_fn1(va_list *argsp) {
 8000448:	b410      	push	{r4}
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 800044a:	6018      	str	r0, [r3, #0]
 800044c:	f852 4b08 	ldr.w	r4, [r2], #8
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  return fn1(p1);
 8000450:	6848      	ldr	r0, [r1, #4]
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8000452:	601a      	str	r2, [r3, #0]
  return fn1(p1);
 8000454:	4623      	mov	r3, r4
}
 8000456:	bc10      	pop	{r4}
  return fn1(p1);
 8000458:	4718      	bx	r3
 800045a:	bf00      	nop
 800045c:	0000      	movs	r0, r0
	...

08000460 <__ch_delegate_fn2>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn2(va_list *argsp) {
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000460:	6802      	ldr	r2, [r0, #0]
msg_t __ch_delegate_fn2(va_list *argsp) {
 8000462:	b430      	push	{r4, r5}
 8000464:	4603      	mov	r3, r0
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 8000466:	1d11      	adds	r1, r2, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 8000468:	6850      	ldr	r0, [r2, #4]
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 800046a:	6019      	str	r1, [r3, #0]
 800046c:	6814      	ldr	r4, [r2, #0]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
  return fn2(p1, p2);
 800046e:	6891      	ldr	r1, [r2, #8]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000470:	f102 050c 	add.w	r5, r2, #12
 8000474:	601d      	str	r5, [r3, #0]
  return fn2(p1, p2);
 8000476:	4623      	mov	r3, r4
}
 8000478:	bc30      	pop	{r4, r5}
  return fn2(p1, p2);
 800047a:	4718      	bx	r3
 800047c:	0000      	movs	r0, r0
	...

08000480 <__ch_delegate_fn3>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn3(va_list *argsp) {
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 8000480:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn3(va_list *argsp) {
 8000482:	b430      	push	{r4, r5}
 8000484:	4602      	mov	r2, r0
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 8000486:	1d1c      	adds	r4, r3, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 8000488:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 800048c:	6014      	str	r4, [r2, #0]
 800048e:	681c      	ldr	r4, [r3, #0]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 8000490:	f103 0510 	add.w	r5, r3, #16
 8000494:	6015      	str	r5, [r2, #0]
  return fn3(p1, p2, p3);
 8000496:	68da      	ldr	r2, [r3, #12]
 8000498:	4623      	mov	r3, r4
}
 800049a:	bc30      	pop	{r4, r5}
  return fn3(p1, p2, p3);
 800049c:	4718      	bx	r3
 800049e:	bf00      	nop

080004a0 <__ch_delegate_fn4>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn4(va_list *argsp) {
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80004a0:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn4(va_list *argsp) {
 80004a2:	b430      	push	{r4, r5}
 80004a4:	4684      	mov	ip, r0
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80004a6:	1d1c      	adds	r4, r3, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80004a8:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 80004ac:	68da      	ldr	r2, [r3, #12]
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80004ae:	f8cc 4000 	str.w	r4, [ip]
 80004b2:	681c      	ldr	r4, [r3, #0]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 80004b4:	f103 0514 	add.w	r5, r3, #20
 80004b8:	f8cc 5000 	str.w	r5, [ip]
  return fn4(p1, p2, p3, p4);
 80004bc:	691b      	ldr	r3, [r3, #16]
 80004be:	46a4      	mov	ip, r4
}
 80004c0:	bc30      	pop	{r4, r5}
  return fn4(p1, p2, p3, p4);
 80004c2:	4760      	bx	ip
	...

080004d0 <chCoreAllocAlignedI.lto_priv.0>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <chCoreAllocAlignedI.lto_priv.0+0x1c>)
 80004d2:	685a      	ldr	r2, [r3, #4]
 80004d4:	4249      	negs	r1, r1
 80004d6:	1a10      	subs	r0, r2, r0
 80004d8:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80004da:	6819      	ldr	r1, [r3, #0]
 80004dc:	4288      	cmp	r0, r1
 80004de:	d303      	bcc.n	80004e8 <chCoreAllocAlignedI.lto_priv.0+0x18>
 80004e0:	4282      	cmp	r2, r0
 80004e2:	d301      	bcc.n	80004e8 <chCoreAllocAlignedI.lto_priv.0+0x18>
  ch_memcore.topmem = prev;
 80004e4:	6058      	str	r0, [r3, #4]
  return p;
 80004e6:	4770      	bx	lr
    return NULL;
 80004e8:	2000      	movs	r0, #0
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80004ea:	4770      	bx	lr
 80004ec:	20000b60 	.word	0x20000b60

080004f0 <test_stream_putchar.lto_priv.0>:
/*===========================================================================*/

#if (TEST_CFG_CHIBIOS_SUPPORT == TRUE) || defined(__DOXYGEN__)
static int test_stream_putchar(int c) {

  streamPut(chtest.stream, (uint8_t)c);
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <test_stream_putchar.lto_priv.0+0x14>)
static int test_stream_putchar(int c) {
 80004f2:	b510      	push	{r4, lr}
 80004f4:	4604      	mov	r4, r0
  streamPut(chtest.stream, (uint8_t)c);
 80004f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80004f8:	6803      	ldr	r3, [r0, #0]
 80004fa:	b2e1      	uxtb	r1, r4
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	4798      	blx	r3

  return c;
}
 8000500:	4620      	mov	r0, r4
 8000502:	bd10      	pop	{r4, pc}
 8000504:	20000b74 	.word	0x20000b74
	...

08000510 <__test_assert_sequence>:
    return __test_fail(msg);
  }
  return false;
}

bool __test_assert_sequence(char *expected, const char *msg) {
 8000510:	b470      	push	{r4, r5, r6}
  char *cp = chtest.tokens_buffer;

  while (cp < chtest.tokp) {
 8000512:	4d0d      	ldr	r5, [pc, #52]	; (8000548 <__test_assert_sequence+0x38>)
  char *cp = chtest.tokens_buffer;
 8000514:	f105 0610 	add.w	r6, r5, #16
  while (cp < chtest.tokp) {
 8000518:	68ec      	ldr	r4, [r5, #12]
  char *cp = chtest.tokens_buffer;
 800051a:	4633      	mov	r3, r6
  while (cp < chtest.tokp) {
 800051c:	e005      	b.n	800052a <__test_assert_sequence+0x1a>
    if (*cp++ != *expected++)
 800051e:	f813 cb01 	ldrb.w	ip, [r3], #1
 8000522:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000526:	4594      	cmp	ip, r2
 8000528:	d106      	bne.n	8000538 <__test_assert_sequence+0x28>
  while (cp < chtest.tokp) {
 800052a:	429c      	cmp	r4, r3
 800052c:	d8f7      	bhi.n	800051e <__test_assert_sequence+0xe>
     return __test_fail(msg);
  }

  if (*expected) {
 800052e:	7800      	ldrb	r0, [r0, #0]
 8000530:	b910      	cbnz	r0, 8000538 <__test_assert_sequence+0x28>
  chtest.tokp = chtest.tokens_buffer;
 8000532:	60ee      	str	r6, [r5, #12]
  }

  test_clear_tokens();

  return false;
}
 8000534:	bc70      	pop	{r4, r5, r6}
 8000536:	4770      	bx	lr
  chtest.global_fail     = true;
 8000538:	f240 1301 	movw	r3, #257	; 0x101
 800053c:	80ab      	strh	r3, [r5, #4]
  chtest.failure_message = msg;
 800053e:	60a9      	str	r1, [r5, #8]
     return __test_fail(msg);
 8000540:	2001      	movs	r0, #1
}
 8000542:	bc70      	pop	{r4, r5, r6}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000b74 	.word	0x20000b74
 800054c:	00000000 	.word	0x00000000

08000550 <rt_test_002_001_execute.lto_priv.0>:
 * - [2.1.3] Testing Registry List integrity.
 * - [2.1.4] Testing Port-defined integrity.
 * .
 */

static void rt_test_002_001_execute(void) {
 8000550:	b410      	push	{r4}
  bool result;

  /* [2.1.1] Testing Ready List integrity.*/
  test_set_step(1);
 8000552:	4c42      	ldr	r4, [pc, #264]	; (800065c <rt_test_002_001_execute.lto_priv.0+0x10c>)
 8000554:	2301      	movs	r3, #1
 8000556:	6023      	str	r3, [r4, #0]
 8000558:	2330      	movs	r3, #48	; 0x30
 800055a:	f383 8811 	msr	BASEPRI, r3
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
    ch_priority_queue_t *pqp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    pqp = oip->rlist.pqueue.next;
 800055e:	4940      	ldr	r1, [pc, #256]	; (8000660 <rt_test_002_001_execute.lto_priv.0+0x110>)
 8000560:	680a      	ldr	r2, [r1, #0]
    while (pqp != &oip->rlist.pqueue) {
 8000562:	428a      	cmp	r2, r1
 8000564:	d063      	beq.n	800062e <rt_test_002_001_execute.lto_priv.0+0xde>
    n = (cnt_t)0;
 8000566:	2300      	movs	r3, #0
      n++;
      pqp = pqp->next;
 8000568:	6812      	ldr	r2, [r2, #0]
    while (pqp != &oip->rlist.pqueue) {
 800056a:	428a      	cmp	r2, r1
      n++;
 800056c:	f103 0301 	add.w	r3, r3, #1
    while (pqp != &oip->rlist.pqueue) {
 8000570:	d1fa      	bne.n	8000568 <rt_test_002_001_execute.lto_priv.0+0x18>
    }

    /* Scanning the ready list backward.*/
    pqp = oip->rlist.pqueue.prev;
 8000572:	684a      	ldr	r2, [r1, #4]
    while (pqp != &oip->rlist.pqueue) {
 8000574:	428a      	cmp	r2, r1
 8000576:	d046      	beq.n	8000606 <rt_test_002_001_execute.lto_priv.0+0xb6>
      n--;
      pqp = pqp->prev;
 8000578:	6852      	ldr	r2, [r2, #4]
    while (pqp != &oip->rlist.pqueue) {
 800057a:	428a      	cmp	r2, r1
      n--;
 800057c:	f103 33ff 	add.w	r3, r3, #4294967295
    while (pqp != &oip->rlist.pqueue) {
 8000580:	d1fa      	bne.n	8000578 <rt_test_002_001_execute.lto_priv.0+0x28>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000582:	2b00      	cmp	r3, #0
 8000584:	d13f      	bne.n	8000606 <rt_test_002_001_execute.lto_priv.0+0xb6>
 8000586:	2300      	movs	r3, #0
 8000588:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
  }
  test_end_step(1);

  /* [2.1.2] Testing Virtual Timers List integrity.*/
  test_set_step(2);
 800058c:	2202      	movs	r2, #2
 800058e:	6022      	str	r2, [r4, #0]
 8000590:	2230      	movs	r2, #48	; 0x30
 8000592:	f382 8811 	msr	BASEPRI, r2
    ch_delta_list_t *dlp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    dlp = oip->vtlist.dlist.next;
    while (dlp != &oip->vtlist.dlist) {
 8000596:	4833      	ldr	r0, [pc, #204]	; (8000664 <rt_test_002_001_execute.lto_priv.0+0x114>)
    dlp = oip->vtlist.dlist.next;
 8000598:	690a      	ldr	r2, [r1, #16]
    while (dlp != &oip->vtlist.dlist) {
 800059a:	4282      	cmp	r2, r0
 800059c:	d04d      	beq.n	800063a <rt_test_002_001_execute.lto_priv.0+0xea>
      n++;
      dlp = dlp->next;
 800059e:	6812      	ldr	r2, [r2, #0]
    while (dlp != &oip->vtlist.dlist) {
 80005a0:	4282      	cmp	r2, r0
      n++;
 80005a2:	f103 0301 	add.w	r3, r3, #1
    while (dlp != &oip->vtlist.dlist) {
 80005a6:	d1fa      	bne.n	800059e <rt_test_002_001_execute.lto_priv.0+0x4e>
    }

    /* Scanning the timers list backward.*/
    dlp = oip->vtlist.dlist.prev;
 80005a8:	694a      	ldr	r2, [r1, #20]
    while (dlp != &oip->vtlist.dlist) {
 80005aa:	4282      	cmp	r2, r0
 80005ac:	d035      	beq.n	800061a <rt_test_002_001_execute.lto_priv.0+0xca>
      n--;
      dlp = dlp->prev;
 80005ae:	6852      	ldr	r2, [r2, #4]
    while (dlp != &oip->vtlist.dlist) {
 80005b0:	4282      	cmp	r2, r0
      n--;
 80005b2:	f103 33ff 	add.w	r3, r3, #4294967295
    while (dlp != &oip->vtlist.dlist) {
 80005b6:	d1fa      	bne.n	80005ae <rt_test_002_001_execute.lto_priv.0+0x5e>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80005b8:	bb7b      	cbnz	r3, 800061a <rt_test_002_001_execute.lto_priv.0+0xca>
 80005ba:	2300      	movs	r3, #0
 80005bc:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "virtual timers list check failed");
  }
  test_end_step(2);

  /* [2.1.3] Testing Registry List integrity.*/
  test_set_step(3);
 80005c0:	2203      	movs	r2, #3
 80005c2:	6022      	str	r2, [r4, #0]
 80005c4:	2230      	movs	r2, #48	; 0x30
 80005c6:	f382 8811 	msr	BASEPRI, r2
    rqp = REG_HEADER(oip);

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    qp = rqp->next;
    while (qp != rqp) {
 80005ca:	4827      	ldr	r0, [pc, #156]	; (8000668 <rt_test_002_001_execute.lto_priv.0+0x118>)
    qp = rqp->next;
 80005cc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    while (qp != rqp) {
 80005ce:	4282      	cmp	r2, r0
 80005d0:	d040      	beq.n	8000654 <rt_test_002_001_execute.lto_priv.0+0x104>
      n++;
      qp = qp->next;
 80005d2:	6812      	ldr	r2, [r2, #0]
    while (qp != rqp) {
 80005d4:	4282      	cmp	r2, r0
      n++;
 80005d6:	f103 0301 	add.w	r3, r3, #1
    while (qp != rqp) {
 80005da:	d1fa      	bne.n	80005d2 <rt_test_002_001_execute.lto_priv.0+0x82>
    }

    /* Scanning the ready list backward.*/
    qp = rqp->prev;
 80005dc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    while (qp != rqp) {
 80005de:	4282      	cmp	r2, r0
 80005e0:	d02f      	beq.n	8000642 <rt_test_002_001_execute.lto_priv.0+0xf2>
      n--;
      qp = qp->prev;
 80005e2:	6852      	ldr	r2, [r2, #4]
    while (qp != rqp) {
 80005e4:	4282      	cmp	r2, r0
      n--;
 80005e6:	f103 33ff 	add.w	r3, r3, #4294967295
    while (qp != rqp) {
 80005ea:	d1fa      	bne.n	80005e2 <rt_test_002_001_execute.lto_priv.0+0x92>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 80005ec:	bb4b      	cbnz	r3, 8000642 <rt_test_002_001_execute.lto_priv.0+0xf2>
 80005ee:	2300      	movs	r3, #0
 80005f0:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "registry list check failed");
  }
  test_end_step(3);

  /* [2.1.4] Testing Port-defined integrity.*/
  test_set_step(4);
 80005f4:	2204      	movs	r2, #4
 80005f6:	6022      	str	r2, [r4, #0]
 80005f8:	2230      	movs	r2, #48	; 0x30
 80005fa:	f382 8811 	msr	BASEPRI, r2
 80005fe:	f383 8811 	msr	BASEPRI, r3
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
    chSysUnlock();
    test_assert(result == false, "port layer check failed");
  }
  test_end_step(4);
}
 8000602:	bc10      	pop	{r4}
 8000604:	4770      	bx	lr
 8000606:	2300      	movs	r3, #0
 8000608:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <rt_test_002_001_execute.lto_priv.0+0x11c>)
 800060e:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8000610:	f240 1201 	movw	r2, #257	; 0x101
 8000614:	80a2      	strh	r2, [r4, #4]
 8000616:	bc10      	pop	{r4}
 8000618:	4770      	bx	lr
 800061a:	2300      	movs	r3, #0
 800061c:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <rt_test_002_001_execute.lto_priv.0+0x120>)
 8000622:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8000624:	f240 1201 	movw	r2, #257	; 0x101
 8000628:	80a2      	strh	r2, [r4, #4]
 800062a:	bc10      	pop	{r4}
 800062c:	4770      	bx	lr
    pqp = oip->rlist.pqueue.prev;
 800062e:	684a      	ldr	r2, [r1, #4]
    while (pqp != &oip->rlist.pqueue) {
 8000630:	428a      	cmp	r2, r1
    n = (cnt_t)0;
 8000632:	bf18      	it	ne
 8000634:	2300      	movne	r3, #0
    while (pqp != &oip->rlist.pqueue) {
 8000636:	d19f      	bne.n	8000578 <rt_test_002_001_execute.lto_priv.0+0x28>
 8000638:	e7a5      	b.n	8000586 <rt_test_002_001_execute.lto_priv.0+0x36>
    dlp = oip->vtlist.dlist.prev;
 800063a:	694a      	ldr	r2, [r1, #20]
    while (dlp != &oip->vtlist.dlist) {
 800063c:	4282      	cmp	r2, r0
 800063e:	d1b6      	bne.n	80005ae <rt_test_002_001_execute.lto_priv.0+0x5e>
 8000640:	e7bb      	b.n	80005ba <rt_test_002_001_execute.lto_priv.0+0x6a>
 8000642:	2300      	movs	r3, #0
 8000644:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <rt_test_002_001_execute.lto_priv.0+0x124>)
 800064a:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 800064c:	f240 1201 	movw	r2, #257	; 0x101
 8000650:	80a2      	strh	r2, [r4, #4]
  return true;
 8000652:	e7e0      	b.n	8000616 <rt_test_002_001_execute.lto_priv.0+0xc6>
    qp = rqp->prev;
 8000654:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    while (qp != rqp) {
 8000656:	4282      	cmp	r2, r0
 8000658:	d1c3      	bne.n	80005e2 <rt_test_002_001_execute.lto_priv.0+0x92>
 800065a:	e7c8      	b.n	80005ee <rt_test_002_001_execute.lto_priv.0+0x9e>
 800065c:	20000b74 	.word	0x20000b74
 8000660:	20000a90 	.word	0x20000a90
 8000664:	20000aa0 	.word	0x20000aa0
 8000668:	20000ab8 	.word	0x20000ab8
 800066c:	08014f00 	.word	0x08014f00
 8000670:	08014f18 	.word	0x08014f18
 8000674:	08014f3c 	.word	0x08014f3c
	...

08000680 <rt_test_002_003_execute.lto_priv.0>:

static void rt_test_002_003_execute(void) {

  /* [2.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <rt_test_002_003_execute.lto_priv.0+0x20>)
 8000682:	2201      	movs	r2, #1
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	2330      	movs	r3, #48	; 0x30
 8000688:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 800068c:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 800068e:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000690:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000694:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000696:	2300      	movs	r3, #0
 8000698:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 800069c:	b662      	cpsie	i
    chSysDisable();
    chSysSuspend();
    chSysEnable();
  }
  test_end_step(1);
}
 800069e:	4770      	bx	lr
 80006a0:	20000b74 	.word	0x20000b74
	...

080006b0 <rt_test_003_001_execute.lto_priv.0>:

static void rt_test_003_001_execute(void) {

  /* [3.1.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <rt_test_003_001_execute.lto_priv.0+0x14>)
 80006b2:	2101      	movs	r1, #1
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80006b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b8:	6019      	str	r1, [r3, #0]
 80006ba:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80006bc:	6a53      	ldr	r3, [r2, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 80006be:	4299      	cmp	r1, r3
 80006c0:	d0fc      	beq.n	80006bc <rt_test_003_001_execute.lto_priv.0+0xc>
        _sim_check_for_interrupts();
#endif
    }
  }
  test_end_step(1);
}
 80006c2:	4770      	bx	lr
 80006c4:	20000b74 	.word	0x20000b74
	...

080006d0 <rt_test_003_002_execute.lto_priv.0>:
    test_assert(b == false, "in range");
  }
  test_end_step(2);

  /* [3.2.3] Checking boundaries for start > end.*/
  test_set_step(3);
 80006d0:	4b01      	ldr	r3, [pc, #4]	; (80006d8 <rt_test_003_002_execute.lto_priv.0+0x8>)
 80006d2:	2203      	movs	r2, #3
 80006d4:	601a      	str	r2, [r3, #0]
    test_assert(b == true, "not in range");
    b = chTimeIsInRangeX((systime_t)10, (systime_t)100, (systime_t)10);
    test_assert(b == false, "in range");
  }
  test_end_step(3);
}
 80006d6:	4770      	bx	lr
 80006d8:	20000b74 	.word	0x20000b74
 80006dc:	00000000 	.word	0x00000000

080006e0 <thread>:
 *
 * @api
 */
void test_emit_token(char token) {

  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <thread+0x18>)
 80006e2:	68da      	ldr	r2, [r3, #12]
 80006e4:	f103 0120 	add.w	r1, r3, #32
 80006e8:	428a      	cmp	r2, r1
 80006ea:	d203      	bcs.n	80006f4 <thread+0x14>
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 80006ec:	7801      	ldrb	r1, [r0, #0]
    *chtest.tokp++ = token;
 80006ee:	1c50      	adds	r0, r2, #1
 80006f0:	60d8      	str	r0, [r3, #12]
 80006f2:	7011      	strb	r1, [r2, #0]
}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000b74 	.word	0x20000b74
 80006fc:	00000000 	.word	0x00000000

08000700 <rt_test_006_001_setup.lto_priv.0>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_006_001_setup(void) {
  tr1 = NULL;
 8000700:	4b01      	ldr	r3, [pc, #4]	; (8000708 <rt_test_006_001_setup.lto_priv.0+0x8>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
}
 8000706:	4770      	bx	lr
 8000708:	200016f8 	.word	0x200016f8
 800070c:	00000000 	.word	0x00000000

08000710 <rt_test_007_001_setup.lto_priv.0>:
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <rt_test_007_001_setup.lto_priv.0+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  ch_queue_init(&sp->queue);
  sp->cnt = n;
 8000712:	2201      	movs	r2, #1
  qp->prev = qp;
 8000714:	e9c3 3300 	strd	r3, r3, [r3]
 8000718:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_007_001_setup(void) {
  chSemObjectInit(&sem1, 1);
}
 800071a:	4770      	bx	lr
 800071c:	20000dbc 	.word	0x20000dbc

08000720 <rt_test_007_005_setup.lto_priv.0>:
  qp->next = qp;
 8000720:	4b02      	ldr	r3, [pc, #8]	; (800072c <rt_test_007_005_setup.lto_priv.0+0xc>)
 8000722:	2200      	movs	r2, #0
  qp->prev = qp;
 8000724:	e9c3 3300 	strd	r3, r3, [r3]
 8000728:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_007_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 800072a:	4770      	bx	lr
 800072c:	20000dbc 	.word	0x20000dbc

08000730 <rt_test_007_002_setup.lto_priv.0>:
 8000730:	4b02      	ldr	r3, [pc, #8]	; (800073c <rt_test_007_002_setup.lto_priv.0+0xc>)
 8000732:	2200      	movs	r2, #0
 8000734:	e9c3 3300 	strd	r3, r3, [r3]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	4770      	bx	lr
 800073c:	20000dbc 	.word	0x20000dbc

08000740 <rt_test_007_003_setup.lto_priv.0>:
 8000740:	4b02      	ldr	r3, [pc, #8]	; (800074c <rt_test_007_003_setup.lto_priv.0+0xc>)
 8000742:	2200      	movs	r2, #0
 8000744:	e9c3 3300 	strd	r3, r3, [r3]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	4770      	bx	lr
 800074c:	20000dbc 	.word	0x20000dbc

08000750 <rt_test_007_004_setup.lto_priv.0>:
 8000750:	4b02      	ldr	r3, [pc, #8]	; (800075c <rt_test_007_004_setup.lto_priv.0+0xc>)
 8000752:	2200      	movs	r2, #0
 8000754:	e9c3 3300 	strd	r3, r3, [r3]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	4770      	bx	lr
 800075c:	20000dbc 	.word	0x20000dbc

08000760 <rt_test_008_005_setup.lto_priv.0>:
  qp->next = qp;
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <rt_test_008_005_setup.lto_priv.0+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 8000762:	2200      	movs	r2, #0
  qp->prev = qp;
 8000764:	e9c3 3300 	strd	r3, r3, [r3]
 8000768:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_008_005_setup(void) {
  chMtxObjectInit(&m1);
}
 800076a:	4770      	bx	lr
 800076c:	2000082c 	.word	0x2000082c

08000770 <rt_test_008_001_setup.lto_priv.0>:
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <rt_test_008_001_setup.lto_priv.0+0xc>)
 8000772:	2200      	movs	r2, #0
 8000774:	e9c3 3300 	strd	r3, r3, [r3]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	4770      	bx	lr
 800077c:	2000082c 	.word	0x2000082c

08000780 <rt_test_008_004_setup.lto_priv.0>:
  qp->next = qp;
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <rt_test_008_004_setup.lto_priv.0+0x14>)
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <rt_test_008_004_setup.lto_priv.0+0x18>)
 8000784:	2100      	movs	r1, #0
  qp->prev = qp;
 8000786:	e9c2 2200 	strd	r2, r2, [r2]
 800078a:	e9c3 3300 	strd	r3, r3, [r3]
 800078e:	6091      	str	r1, [r2, #8]
 8000790:	6099      	str	r1, [r3, #8]
}
 8000792:	4770      	bx	lr
 8000794:	2000082c 	.word	0x2000082c
 8000798:	2000083c 	.word	0x2000083c
 800079c:	00000000 	.word	0x00000000

080007a0 <rt_test_008_008_setup.lto_priv.0>:
  qp->next = qp;
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <rt_test_008_008_setup.lto_priv.0+0x14>)
 80007a2:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <rt_test_008_008_setup.lto_priv.0+0x18>)
 80007a4:	2100      	movs	r1, #0
  qp->prev = qp;
 80007a6:	e9c2 2200 	strd	r2, r2, [r2]
 80007aa:	e9c3 3300 	strd	r3, r3, [r3]
 80007ae:	6099      	str	r1, [r3, #8]
 */

static void rt_test_008_008_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	2000082c 	.word	0x2000082c
 80007b8:	20000800 	.word	0x20000800
 80007bc:	00000000 	.word	0x00000000

080007c0 <rt_test_008_007_setup.lto_priv.0>:
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <rt_test_008_007_setup.lto_priv.0+0x14>)
 80007c2:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <rt_test_008_007_setup.lto_priv.0+0x18>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	e9c2 2200 	strd	r2, r2, [r2]
 80007ca:	e9c3 3300 	strd	r3, r3, [r3]
 80007ce:	6099      	str	r1, [r3, #8]
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	2000082c 	.word	0x2000082c
 80007d8:	20000800 	.word	0x20000800
 80007dc:	00000000 	.word	0x00000000

080007e0 <rt_test_008_009_setup.lto_priv.0>:
  qp->next = qp;
 80007e0:	4a06      	ldr	r2, [pc, #24]	; (80007fc <rt_test_008_009_setup.lto_priv.0+0x1c>)
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <rt_test_008_009_setup.lto_priv.0+0x20>)
 80007e4:	4907      	ldr	r1, [pc, #28]	; (8000804 <rt_test_008_009_setup.lto_priv.0+0x24>)
 80007e6:	2000      	movs	r0, #0
  qp->prev = qp;
 80007e8:	e9c1 1100 	strd	r1, r1, [r1]
 80007ec:	e9c2 2200 	strd	r2, r2, [r2]
 80007f0:	e9c3 3300 	strd	r3, r3, [r3]
 80007f4:	6090      	str	r0, [r2, #8]
 80007f6:	6098      	str	r0, [r3, #8]

static void rt_test_008_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	2000082c 	.word	0x2000082c
 8000800:	2000083c 	.word	0x2000083c
 8000804:	20000800 	.word	0x20000800
	...

08000810 <h1>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <h1+0x18>)
 8000812:	68da      	ldr	r2, [r3, #12]
 8000814:	f103 0120 	add.w	r1, r3, #32
 8000818:	428a      	cmp	r2, r1
 800081a:	d203      	bcs.n	8000824 <h1+0x14>
    *chtest.tokp++ = token;
 800081c:	1c50      	adds	r0, r2, #1
 800081e:	2141      	movs	r1, #65	; 0x41
 8000820:	60d8      	str	r0, [r3, #12]
 8000822:	7011      	strb	r1, [r2, #0]
 ****************************************************************************/

static EVENTSOURCE_DECL(es1);
static EVENTSOURCE_DECL(es2);

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000b74 	.word	0x20000b74
 800082c:	00000000 	.word	0x00000000

08000830 <h2>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <h2+0x18>)
 8000832:	68da      	ldr	r2, [r3, #12]
 8000834:	f103 0120 	add.w	r1, r3, #32
 8000838:	428a      	cmp	r2, r1
 800083a:	d203      	bcs.n	8000844 <h2+0x14>
    *chtest.tokp++ = token;
 800083c:	1c50      	adds	r0, r2, #1
 800083e:	2142      	movs	r1, #66	; 0x42
 8000840:	60d8      	str	r0, [r3, #12]
 8000842:	7011      	strb	r1, [r2, #0]
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000b74 	.word	0x20000b74
 800084c:	00000000 	.word	0x00000000

08000850 <h3>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <h3+0x18>)
 8000852:	68da      	ldr	r2, [r3, #12]
 8000854:	f103 0120 	add.w	r1, r3, #32
 8000858:	428a      	cmp	r2, r1
 800085a:	d203      	bcs.n	8000864 <h3+0x14>
    *chtest.tokp++ = token;
 800085c:	1c50      	adds	r0, r2, #1
 800085e:	2143      	movs	r1, #67	; 0x43
 8000860:	60d8      	str	r0, [r3, #12]
 8000862:	7011      	strb	r1, [r2, #0]
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000b74 	.word	0x20000b74
 800086c:	00000000 	.word	0x00000000

08000870 <rt_test_010_001_execute.lto_priv.0>:
 * - [10.1.4] An Event Listener is unregistered, the Event Source must
 *   not have listeners.
 * .
 */

static void rt_test_010_001_execute(void) {
 8000870:	b4f0      	push	{r4, r5, r6, r7}
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000872:	4a39      	ldr	r2, [pc, #228]	; (8000958 <rt_test_010_001_execute.lto_priv.0+0xe8>)
  }
  test_end_step(1);

  /* [10.1.2] Two Event Listeners are registered on the Event Source,
     the Event Source is tested to have listeners.*/
  test_set_step(2);
 8000874:	4c39      	ldr	r4, [pc, #228]	; (800095c <rt_test_010_001_execute.lto_priv.0+0xec>)
 8000876:	6012      	str	r2, [r2, #0]
 8000878:	2702      	movs	r7, #2
static void rt_test_010_001_execute(void) {
 800087a:	b08a      	sub	sp, #40	; 0x28
  test_set_step(2);
 800087c:	6027      	str	r7, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800087e:	2030      	movs	r0, #48	; 0x30
 8000880:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
 8000884:	4d36      	ldr	r5, [pc, #216]	; (8000960 <rt_test_010_001_execute.lto_priv.0+0xf0>)
  thread_t *currtp = chThdGetSelfX();

  chDbgCheckClassI();
  chDbgCheck((esp != NULL) && (elp != NULL));

  elp->next     = esp->next;
 8000886:	6813      	ldr	r3, [r2, #0]
 8000888:	9305      	str	r3, [sp, #20]
 800088a:	68eb      	ldr	r3, [r5, #12]
  esp->next     = elp;
  elp->listener = currtp;
 800088c:	9306      	str	r3, [sp, #24]
  elp->events   = events;
  elp->flags    = (eventflags_t)0;
 800088e:	2601      	movs	r6, #1
 8000890:	2300      	movs	r3, #0
 8000892:	e9cd 6307 	strd	r6, r3, [sp, #28]
  esp->next     = elp;
 8000896:	a905      	add	r1, sp, #20
  elp->wflags   = wflags;
 8000898:	f04f 36ff 	mov.w	r6, #4294967295
  esp->next     = elp;
 800089c:	6011      	str	r1, [r2, #0]
  elp->wflags   = wflags;
 800089e:	9609      	str	r6, [sp, #36]	; 0x24
 80008a0:	f383 8811 	msr	BASEPRI, r3
 80008a4:	f380 8811 	msr	BASEPRI, r0
 80008a8:	68ed      	ldr	r5, [r5, #12]
  elp->listener = currtp;
 80008aa:	9501      	str	r5, [sp, #4]
  elp->next     = esp->next;
 80008ac:	6815      	ldr	r5, [r2, #0]
 80008ae:	9500      	str	r5, [sp, #0]
  esp->next     = elp;
 80008b0:	466d      	mov	r5, sp
  elp->events   = events;
 80008b2:	9702      	str	r7, [sp, #8]
  elp->wflags   = wflags;
 80008b4:	9604      	str	r6, [sp, #16]
  elp->flags    = (eventflags_t)0;
 80008b6:	9303      	str	r3, [sp, #12]
  esp->next     = elp;
 80008b8:	6015      	str	r5, [r2, #0]
 80008ba:	f383 8811 	msr	BASEPRI, r3
 80008be:	f380 8811 	msr	BASEPRI, r0
  if (!condition) {
 80008c2:	6816      	ldr	r6, [r2, #0]
 80008c4:	4296      	cmp	r6, r2
 80008c6:	d037      	beq.n	8000938 <rt_test_010_001_execute.lto_priv.0+0xc8>
 80008c8:	f383 8811 	msr	BASEPRI, r3
  }
  test_end_step(2);

  /* [10.1.3] An Event Listener is unregistered, the Event Source must
     still have listeners.*/
  test_set_step(3);
 80008cc:	2303      	movs	r3, #3
 80008ce:	6023      	str	r3, [r4, #0]
 80008d0:	f380 8811 	msr	BASEPRI, r0
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 80008d4:	4613      	mov	r3, r2
static inline void chSysLock(void) {

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
}
 80008d6:	e001      	b.n	80008dc <rt_test_010_001_execute.lto_priv.0+0x6c>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->next == elp) {
 80008d8:	428b      	cmp	r3, r1
 80008da:	d037      	beq.n	800094c <rt_test_010_001_execute.lto_priv.0+0xdc>
  while (p->next != (event_listener_t *)esp) {
 80008dc:	4618      	mov	r0, r3
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d1f9      	bne.n	80008d8 <rt_test_010_001_execute.lto_priv.0+0x68>
 80008e4:	2300      	movs	r3, #0
 80008e6:	f383 8811 	msr	BASEPRI, r3
 80008ea:	2130      	movs	r1, #48	; 0x30
 80008ec:	f381 8811 	msr	BASEPRI, r1
 80008f0:	6810      	ldr	r0, [r2, #0]
 80008f2:	4290      	cmp	r0, r2
 80008f4:	d020      	beq.n	8000938 <rt_test_010_001_execute.lto_priv.0+0xc8>
 80008f6:	f383 8811 	msr	BASEPRI, r3
  }
  test_end_step(3);

  /* [10.1.4] An Event Listener is unregistered, the Event Source must
     not have listeners.*/
  test_set_step(4);
 80008fa:	2304      	movs	r3, #4
 80008fc:	6023      	str	r3, [r4, #0]
 80008fe:	f381 8811 	msr	BASEPRI, r1
  p = (event_listener_t *)esp;
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <rt_test_010_001_execute.lto_priv.0+0xe8>)
 8000904:	e001      	b.n	800090a <rt_test_010_001_execute.lto_priv.0+0x9a>
    if (p->next == elp) {
 8000906:	42ab      	cmp	r3, r5
 8000908:	d023      	beq.n	8000952 <rt_test_010_001_execute.lto_priv.0+0xe2>
  while (p->next != (event_listener_t *)esp) {
 800090a:	4619      	mov	r1, r3
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4293      	cmp	r3, r2
 8000910:	d1f9      	bne.n	8000906 <rt_test_010_001_execute.lto_priv.0+0x96>
 8000912:	2300      	movs	r3, #0
 8000914:	f383 8811 	msr	BASEPRI, r3
 8000918:	2130      	movs	r1, #48	; 0x30
 800091a:	f381 8811 	msr	BASEPRI, r1
 800091e:	6811      	ldr	r1, [r2, #0]
 8000920:	4291      	cmp	r1, r2
  chtest.failure_message = msg;
 8000922:	bf1f      	itttt	ne
 8000924:	4a0f      	ldrne	r2, [pc, #60]	; (8000964 <rt_test_010_001_execute.lto_priv.0+0xf4>)
 8000926:	60a2      	strne	r2, [r4, #8]
  chtest.global_fail     = true;
 8000928:	f240 1101 	movwne	r1, #257	; 0x101
 800092c:	80a1      	strhne	r1, [r4, #4]
 800092e:	f383 8811 	msr	BASEPRI, r3
  {
    chEvtUnregister(&es1, &el2);
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
  }
  test_end_step(4);
}
 8000932:	b00a      	add	sp, #40	; 0x28
 8000934:	bcf0      	pop	{r4, r5, r6, r7}
 8000936:	4770      	bx	lr
  chtest.failure_message = msg;
 8000938:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <rt_test_010_001_execute.lto_priv.0+0xf8>)
 800093a:	60a2      	str	r2, [r4, #8]
  chtest.global_fail     = true;
 800093c:	f240 1101 	movw	r1, #257	; 0x101
 8000940:	80a1      	strh	r1, [r4, #4]
 8000942:	f383 8811 	msr	BASEPRI, r3
 8000946:	b00a      	add	sp, #40	; 0x28
 8000948:	bcf0      	pop	{r4, r5, r6, r7}
 800094a:	4770      	bx	lr
      p->next = elp->next;
 800094c:	9b05      	ldr	r3, [sp, #20]
 800094e:	6003      	str	r3, [r0, #0]
      break;
 8000950:	e7c8      	b.n	80008e4 <rt_test_010_001_execute.lto_priv.0+0x74>
      p->next = elp->next;
 8000952:	9b00      	ldr	r3, [sp, #0]
 8000954:	600b      	str	r3, [r1, #0]
      break;
 8000956:	e7dc      	b.n	8000912 <rt_test_010_001_execute.lto_priv.0+0xa2>
 8000958:	20000808 	.word	0x20000808
 800095c:	20000b74 	.word	0x20000b74
 8000960:	20000a90 	.word	0x20000a90
 8000964:	08014f64 	.word	0x08014f64
 8000968:	08014f58 	.word	0x08014f58
 800096c:	00000000 	.word	0x00000000

08000970 <rt_test_010_002_setup.lto_priv.0>:
 8000970:	2330      	movs	r3, #48	; 0x30
 8000972:	f383 8811 	msr	BASEPRI, r3
 8000976:	4a03      	ldr	r2, [pc, #12]	; (8000984 <rt_test_010_002_setup.lto_priv.0+0x14>)
 8000978:	68d2      	ldr	r2, [r2, #12]
 800097a:	2300      	movs	r3, #0
 800097c:	6393      	str	r3, [r2, #56]	; 0x38
 800097e:	f383 8811 	msr	BASEPRI, r3
 8000982:	4770      	bx	lr
 8000984:	20000a90 	.word	0x20000a90
	...

08000990 <rt_test_010_002_execute.lto_priv.0>:

static void rt_test_010_002_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void rt_test_010_002_execute(void) {
 8000990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* [10.2.1] Three evenf flag bits are raised then chEvtDispatch() is
     invoked, the sequence of handlers calls is tested.*/
  test_set_step(1);
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <rt_test_010_002_execute.lto_priv.0+0x40>)
 8000994:	4e0f      	ldr	r6, [pc, #60]	; (80009d4 <rt_test_010_002_execute.lto_priv.0+0x44>)
 8000996:	2701      	movs	r7, #1
 8000998:	601f      	str	r7, [r3, #0]
 800099a:	2507      	movs	r5, #7
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 800099c:	2400      	movs	r4, #0
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 800099e:	fa25 f304 	lsr.w	r3, r5, r4
 80009a2:	f013 0f01 	tst.w	r3, #1
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 80009a6:	fa07 f204 	lsl.w	r2, r7, r4
      handlers[eid](eid);
 80009aa:	4620      	mov	r0, r4
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 80009ac:	d00d      	beq.n	80009ca <rt_test_010_002_execute.lto_priv.0+0x3a>
      handlers[eid](eid);
 80009ae:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
      events &= ~EVENT_MASK(eid);
 80009b2:	ea25 0502 	bic.w	r5, r5, r2
      handlers[eid](eid);
 80009b6:	3401      	adds	r4, #1
 80009b8:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d1ef      	bne.n	800099e <rt_test_010_002_execute.lto_priv.0+0xe>
  {
    chEvtDispatch(evhndl, 7);
    test_assert_sequence("ABC", "invalid sequence");
  }
  test_end_step(1);
}
 80009be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 80009c2:	4905      	ldr	r1, [pc, #20]	; (80009d8 <rt_test_010_002_execute.lto_priv.0+0x48>)
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <rt_test_010_002_execute.lto_priv.0+0x4c>)
 80009c6:	f7ff bda3 	b.w	8000510 <__test_assert_sequence>
    }
    eid++;
 80009ca:	3401      	adds	r4, #1
 80009cc:	e7e7      	b.n	800099e <rt_test_010_002_execute.lto_priv.0+0xe>
 80009ce:	bf00      	nop
 80009d0:	20000b74 	.word	0x20000b74
 80009d4:	0801614c 	.word	0x0801614c
 80009d8:	08014f74 	.word	0x08014f74
 80009dc:	08014f88 	.word	0x08014f88

080009e0 <rt_test_010_003_setup.lto_priv.0>:
 80009e0:	2330      	movs	r3, #48	; 0x30
 80009e2:	f383 8811 	msr	BASEPRI, r3
 80009e6:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <rt_test_010_003_setup.lto_priv.0+0x14>)
 80009e8:	68d2      	ldr	r2, [r2, #12]
 80009ea:	2300      	movs	r3, #0
 80009ec:	6393      	str	r3, [r2, #56]	; 0x38
 80009ee:	f383 8811 	msr	BASEPRI, r3
 80009f2:	4770      	bx	lr
 80009f4:	20000a90 	.word	0x20000a90
	...

08000a00 <rt_test_010_004_setup.lto_priv.0>:
 8000a00:	2330      	movs	r3, #48	; 0x30
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <rt_test_010_004_setup.lto_priv.0+0x14>)
 8000a08:	68d2      	ldr	r2, [r2, #12]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	6393      	str	r3, [r2, #56]	; 0x38
 8000a0e:	f383 8811 	msr	BASEPRI, r3
 8000a12:	4770      	bx	lr
 8000a14:	20000a90 	.word	0x20000a90
	...

08000a20 <rt_test_010_005_setup.lto_priv.0>:
 8000a20:	2330      	movs	r3, #48	; 0x30
 8000a22:	f383 8811 	msr	BASEPRI, r3
 8000a26:	4a03      	ldr	r2, [pc, #12]	; (8000a34 <rt_test_010_005_setup.lto_priv.0+0x14>)
 8000a28:	68d2      	ldr	r2, [r2, #12]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	6393      	str	r3, [r2, #56]	; 0x38
 8000a2e:	f383 8811 	msr	BASEPRI, r3
 8000a32:	4770      	bx	lr
 8000a34:	20000a90 	.word	0x20000a90
	...

08000a40 <rt_test_010_006_setup.lto_priv.0>:
 8000a40:	2330      	movs	r3, #48	; 0x30
 8000a42:	f383 8811 	msr	BASEPRI, r3
 8000a46:	4a03      	ldr	r2, [pc, #12]	; (8000a54 <rt_test_010_006_setup.lto_priv.0+0x14>)
  currtp->epending &= ~events;
 8000a48:	68d2      	ldr	r2, [r2, #12]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	6393      	str	r3, [r2, #56]	; 0x38
 8000a4e:	f383 8811 	msr	BASEPRI, r3
 * .
 */

static void rt_test_010_006_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}
 8000a52:	4770      	bx	lr
 8000a54:	20000a90 	.word	0x20000a90
	...

08000a60 <rt_test_010_007_setup.lto_priv.0>:
 8000a60:	2330      	movs	r3, #48	; 0x30
 8000a62:	f383 8811 	msr	BASEPRI, r3
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <rt_test_010_007_setup.lto_priv.0+0x1c>)
 8000a68:	68d2      	ldr	r2, [r2, #12]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	6393      	str	r3, [r2, #56]	; 0x38
 8000a6e:	f383 8811 	msr	BASEPRI, r3
 8000a72:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <rt_test_010_007_setup.lto_priv.0+0x20>)
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <rt_test_010_007_setup.lto_priv.0+0x24>)
 8000a76:	6012      	str	r2, [r2, #0]
 8000a78:	601b      	str	r3, [r3, #0]

static void rt_test_010_007_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 8000a7a:	4770      	bx	lr
 8000a7c:	20000a90 	.word	0x20000a90
 8000a80:	20000808 	.word	0x20000808
 8000a84:	2000080c 	.word	0x2000080c
	...

08000a90 <dyn_thread1.lto_priv.0>:
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <dyn_thread1.lto_priv.0+0x18>)
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	f103 0120 	add.w	r1, r3, #32
 8000a98:	428a      	cmp	r2, r1
 8000a9a:	d203      	bcs.n	8000aa4 <dyn_thread1.lto_priv.0+0x14>
 8000a9c:	7801      	ldrb	r1, [r0, #0]
 8000a9e:	1c50      	adds	r0, r2, #1
 8000aa0:	60d8      	str	r0, [r3, #12]
 8000aa2:	7011      	strb	r1, [r2, #0]
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000b74 	.word	0x20000b74
 8000aac:	00000000 	.word	0x00000000

08000ab0 <rt_test_011_001_setup.lto_priv.0>:
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <rt_test_011_001_setup.lto_priv.0+0x2c>)
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <rt_test_011_001_setup.lto_priv.0+0x30>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8000ab4:	1dd9      	adds	r1, r3, #7
 8000ab6:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 8000aba:	1acb      	subs	r3, r1, r3
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000abc:	f5c3 6306 	rsb	r3, r3, #2144	; 0x860
 8000ac0:	3308      	adds	r3, #8
  heapp->provider = NULL;
 8000ac2:	2000      	movs	r0, #0
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000ac4:	08db      	lsrs	r3, r3, #3
  H_NEXT(&heapp->header) = hp;
 8000ac6:	e9c2 0100 	strd	r0, r1, [r2]
  H_PAGES(&heapp->header) = 0;
 8000aca:	6090      	str	r0, [r2, #8]
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8000acc:	e9c1 0300 	strd	r0, r3, [r1]
  qp->next = qp;
 8000ad0:	f102 030c 	add.w	r3, r2, #12
  qp->prev = qp;
 8000ad4:	e9c2 3303 	strd	r3, r3, [r2, #12]
 8000ad8:	6150      	str	r0, [r2, #20]
 * .
 */

static void rt_test_011_001_setup(void) {
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}
 8000ada:	4770      	bx	lr
 8000adc:	20000dd8 	.word	0x20000dd8
 8000ae0:	20000bfc 	.word	0x20000bfc
	...

08000af0 <rt_test_011_002_setup.lto_priv.0>:
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <rt_test_011_002_setup.lto_priv.0+0x14>)
 8000af2:	2200      	movs	r2, #0
  mp->object_size = size;
 8000af4:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
  mp->align = align;
 8000af8:	2104      	movs	r1, #4
  mp->object_size = size;
 8000afa:	e9c3 2000 	strd	r2, r0, [r3]
  mp->provider = provider;
 8000afe:	e9c3 1202 	strd	r1, r2, [r3, #8]
 * .
 */

static void rt_test_011_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 8000b02:	4770      	bx	lr
 8000b04:	20000c8c 	.word	0x20000c8c
	...

08000b10 <tmo>:

static void tmo(virtual_timer_t *vtp, void *param) {

  (void)vtp;
  (void)param;
}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
	...

08000b20 <rt_test_012_007_setup.lto_priv.0>:
  qp->next = qp;
 8000b20:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <rt_test_012_007_setup.lto_priv.0+0xc>)
 8000b22:	2200      	movs	r2, #0
  qp->prev = qp;
 8000b24:	e9c3 3300 	strd	r3, r3, [r3]
 8000b28:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_012_007_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 8000b2a:	4770      	bx	lr
 8000b2c:	20000dc8 	.word	0x20000dc8

08000b30 <rt_test_012_010_setup.lto_priv.0>:
  qp->next = qp;
 8000b30:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <rt_test_012_010_setup.lto_priv.0+0xc>)
 8000b32:	2201      	movs	r2, #1
  qp->prev = qp;
 8000b34:	e9c3 3300 	strd	r3, r3, [r3]
 8000b38:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_012_010_setup(void) {
  chSemObjectInit(&sem1, 1);
}
 8000b3a:	4770      	bx	lr
 8000b3c:	20000dc8 	.word	0x20000dc8

08000b40 <rt_test_012_011_setup.lto_priv.0>:
  qp->next = qp;
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <rt_test_012_011_setup.lto_priv.0+0xc>)
 8000b42:	2200      	movs	r2, #0
  qp->prev = qp;
 8000b44:	e9c3 3300 	strd	r3, r3, [r3]
 8000b48:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_012_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000cac 	.word	0x20000cac

08000b50 <oslib_test_002_003_setup.lto_priv.0>:
 *   active state.
 * - [2.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_002_003_setup(void) {
 8000b50:	b430      	push	{r4, r5}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <oslib_test_002_003_setup.lto_priv.0+0x2c>)
 8000b54:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <oslib_test_002_003_setup.lto_priv.0+0x30>)
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
  mbp->cnt    = (size_t)0;
 8000b56:	2400      	movs	r4, #0
  mbp->top    = &buf[n];
 8000b58:	f102 0510 	add.w	r5, r2, #16
  qp->next = qp;
 8000b5c:	f103 0018 	add.w	r0, r3, #24
 8000b60:	f103 0120 	add.w	r1, r3, #32
  mbp->buffer = buf;
 8000b64:	e9c3 2500 	strd	r2, r5, [r3]
  mbp->cnt    = (size_t)0;
 8000b68:	611c      	str	r4, [r3, #16]
  mbp->reset  = false;
 8000b6a:	751c      	strb	r4, [r3, #20]
  mbp->wrptr  = buf;
 8000b6c:	e9c3 2202 	strd	r2, r2, [r3, #8]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 8000b70:	bc30      	pop	{r4, r5}
  qp->prev = qp;
 8000b72:	e9c3 0006 	strd	r0, r0, [r3, #24]
 8000b76:	e9c3 1108 	strd	r1, r1, [r3, #32]
 8000b7a:	4770      	bx	lr
 8000b7c:	2000084c 	.word	0x2000084c
 8000b80:	20000c7c 	.word	0x20000c7c
	...

08000b90 <oslib_test_002_001_setup.lto_priv.0>:
 8000b90:	b430      	push	{r4, r5}
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <oslib_test_002_001_setup.lto_priv.0+0x2c>)
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <oslib_test_002_001_setup.lto_priv.0+0x30>)
 8000b96:	2400      	movs	r4, #0
 8000b98:	f102 0510 	add.w	r5, r2, #16
 8000b9c:	f103 0018 	add.w	r0, r3, #24
 8000ba0:	f103 0120 	add.w	r1, r3, #32
 8000ba4:	e9c3 2500 	strd	r2, r5, [r3]
 8000ba8:	611c      	str	r4, [r3, #16]
 8000baa:	751c      	strb	r4, [r3, #20]
 8000bac:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8000bb0:	bc30      	pop	{r4, r5}
 8000bb2:	e9c3 0006 	strd	r0, r0, [r3, #24]
 8000bb6:	e9c3 1108 	strd	r1, r1, [r3, #32]
 8000bba:	4770      	bx	lr
 8000bbc:	2000084c 	.word	0x2000084c
 8000bc0:	20000c7c 	.word	0x20000c7c
	...

08000bd0 <oslib_test_002_002_setup.lto_priv.0>:
 8000bd0:	b430      	push	{r4, r5}
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <oslib_test_002_002_setup.lto_priv.0+0x2c>)
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <oslib_test_002_002_setup.lto_priv.0+0x30>)
 8000bd6:	2400      	movs	r4, #0
 8000bd8:	f102 0510 	add.w	r5, r2, #16
 8000bdc:	f103 0018 	add.w	r0, r3, #24
 8000be0:	f103 0120 	add.w	r1, r3, #32
 8000be4:	e9c3 2500 	strd	r2, r5, [r3]
 8000be8:	611c      	str	r4, [r3, #16]
 8000bea:	751c      	strb	r4, [r3, #20]
 8000bec:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8000bf0:	bc30      	pop	{r4, r5}
 8000bf2:	e9c3 0006 	strd	r0, r0, [r3, #24]
 8000bf6:	e9c3 1108 	strd	r1, r1, [r3, #32]
 8000bfa:	4770      	bx	lr
 8000bfc:	2000084c 	.word	0x2000084c
 8000c00:	20000c7c 	.word	0x20000c7c
	...

08000c10 <oslib_test_003_001_setup.lto_priv.0>:
 * - [3.1.13] Write wrapping buffer boundary.
 * - [3.1.14] Read wrapping buffer boundary.
 * .
 */

static void oslib_test_003_001_setup(void) {
 8000c10:	b430      	push	{r4, r5}
 */
void chPipeObjectInit(pipe_t *pp, uint8_t *buf, size_t n) {

  chDbgCheck((pp != NULL) && (buf != NULL) && (n > (size_t)0));

  pp->buffer = buf;
 8000c12:	490f      	ldr	r1, [pc, #60]	; (8000c50 <oslib_test_003_001_setup.lto_priv.0+0x40>)
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <oslib_test_003_001_setup.lto_priv.0+0x44>)
  pp->rdptr  = buf;
  pp->wrptr  = buf;
  pp->top    = &buf[n];
 8000c16:	f101 0510 	add.w	r5, r1, #16
  pp->cnt    = (size_t)0;
 8000c1a:	2200      	movs	r2, #0
  pp->buffer = buf;
 8000c1c:	e9c3 1500 	strd	r1, r5, [r3]
  qp->next = qp;
 8000c20:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 8000c24:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8000c28:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000c2c:	f103 0140 	add.w	r1, r3, #64	; 0x40
  qp->prev = qp;
 8000c30:	e9c3 4408 	strd	r4, r4, [r3, #32]
  pp->reset  = false;
  pp->wtr    = NULL;
  pp->rtr    = NULL;
 8000c34:	e9c3 2206 	strd	r2, r2, [r3, #24]
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE);
}
 8000c38:	bc30      	pop	{r4, r5}
 8000c3a:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
 8000c3e:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->cnt    = (size_t)0;
 8000c42:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8000c44:	751a      	strb	r2, [r3, #20]
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
 8000c48:	639a      	str	r2, [r3, #56]	; 0x38
 8000c4a:	649a      	str	r2, [r3, #72]	; 0x48
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000a38 	.word	0x20000a38
 8000c54:	20000884 	.word	0x20000884
	...

08000c60 <oslib_test_003_002_setup.lto_priv.0>:
 * - [3.2.1] Reading while pipe is empty.
 * - [3.2.2] Writing a string larger than pipe buffer.
 * .
 */

static void oslib_test_003_002_setup(void) {
 8000c60:	b430      	push	{r4, r5}
  pp->buffer = buf;
 8000c62:	490f      	ldr	r1, [pc, #60]	; (8000ca0 <oslib_test_003_002_setup.lto_priv.0+0x40>)
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <oslib_test_003_002_setup.lto_priv.0+0x44>)
  pp->top    = &buf[n];
 8000c66:	f101 0508 	add.w	r5, r1, #8
  pp->cnt    = (size_t)0;
 8000c6a:	2200      	movs	r2, #0
  pp->buffer = buf;
 8000c6c:	e9c3 1500 	strd	r1, r5, [r3]
  qp->next = qp;
 8000c70:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 8000c74:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8000c78:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000c7c:	f103 0140 	add.w	r1, r3, #64	; 0x40
  qp->prev = qp;
 8000c80:	e9c3 4408 	strd	r4, r4, [r3, #32]
  pp->rtr    = NULL;
 8000c84:	e9c3 2206 	strd	r2, r2, [r3, #24]
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
}
 8000c88:	bc30      	pop	{r4, r5}
 8000c8a:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
 8000c8e:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->cnt    = (size_t)0;
 8000c92:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8000c94:	751a      	strb	r2, [r3, #20]
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
 8000c98:	639a      	str	r2, [r3, #56]	; 0x38
 8000c9a:	649a      	str	r2, [r3, #72]	; 0x48
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000a38 	.word	0x20000a38
 8000ca4:	20000884 	.word	0x20000884
	...

08000cb0 <dis_func0>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <dis_func0+0x1c>)
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	f103 0120 	add.w	r1, r3, #32
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	d203      	bcs.n	8000cc4 <dis_func0+0x14>
    *chtest.tokp++ = token;
 8000cbc:	1c50      	adds	r0, r2, #1
 8000cbe:	2130      	movs	r1, #48	; 0x30
 8000cc0:	60d8      	str	r0, [r3, #12]
 8000cc2:	7011      	strb	r1, [r2, #0]
static int dis_func0(void) {

  test_emit_token('0');

  return (msg_t)0x55AA;
}
 8000cc4:	f245 50aa 	movw	r0, #21930	; 0x55aa
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000b74 	.word	0x20000b74

08000cd0 <dis_func1>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <dis_func1+0x14>)
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	f103 0120 	add.w	r1, r3, #32
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	d202      	bcs.n	8000ce2 <dis_func1+0x12>
    *chtest.tokp++ = token;
 8000cdc:	1c51      	adds	r1, r2, #1
 8000cde:	60d9      	str	r1, [r3, #12]

static msg_t dis_func1(msg_t a) {

  test_emit_token((char)a);
 8000ce0:	7010      	strb	r0, [r2, #0]

  return (msg_t)a;
}
 8000ce2:	4770      	bx	lr
 8000ce4:	20000b74 	.word	0x20000b74
	...

08000cf0 <dis_func2>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <dis_func2+0x28>)
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	f103 0c20 	add.w	ip, r3, #32
 8000cf8:	4562      	cmp	r2, ip
 8000cfa:	d20c      	bcs.n	8000d16 <dis_func2+0x26>

static msg_t dis_func2(msg_t a, msg_t b) {
 8000cfc:	b410      	push	{r4}
    *chtest.tokp++ = token;
 8000cfe:	1c54      	adds	r4, r2, #1
 8000d00:	60dc      	str	r4, [r3, #12]

  test_emit_token((char)a);
 8000d02:	7010      	strb	r0, [r2, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	4562      	cmp	r2, ip
  test_emit_token((char)b);
 8000d08:	b2c9      	uxtb	r1, r1
 8000d0a:	d202      	bcs.n	8000d12 <dis_func2+0x22>
    *chtest.tokp++ = token;
 8000d0c:	1c54      	adds	r4, r2, #1
 8000d0e:	60dc      	str	r4, [r3, #12]
 8000d10:	7011      	strb	r1, [r2, #0]

  return (msg_t)a;
}
 8000d12:	bc10      	pop	{r4}
 8000d14:	4770      	bx	lr
 8000d16:	4770      	bx	lr
 8000d18:	20000b74 	.word	0x20000b74
 8000d1c:	00000000 	.word	0x00000000

08000d20 <dis_func3>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <dis_func3+0x34>)

static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 8000d22:	b430      	push	{r4, r5}
 8000d24:	68dc      	ldr	r4, [r3, #12]
 8000d26:	f103 0c20 	add.w	ip, r3, #32
 8000d2a:	4564      	cmp	r4, ip
 8000d2c:	d210      	bcs.n	8000d50 <dis_func3+0x30>
    *chtest.tokp++ = token;
 8000d2e:	1c65      	adds	r5, r4, #1
 8000d30:	60dd      	str	r5, [r3, #12]

  test_emit_token((char)a);
 8000d32:	7020      	strb	r0, [r4, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000d34:	68dc      	ldr	r4, [r3, #12]
 8000d36:	4564      	cmp	r4, ip
  test_emit_token((char)b);
 8000d38:	b2c9      	uxtb	r1, r1
 8000d3a:	d209      	bcs.n	8000d50 <dis_func3+0x30>
    *chtest.tokp++ = token;
 8000d3c:	1c65      	adds	r5, r4, #1
 8000d3e:	60dd      	str	r5, [r3, #12]
 8000d40:	7021      	strb	r1, [r4, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000d42:	68d9      	ldr	r1, [r3, #12]
 8000d44:	4561      	cmp	r1, ip
  test_emit_token((char)c);
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	d202      	bcs.n	8000d50 <dis_func3+0x30>
    *chtest.tokp++ = token;
 8000d4a:	1c4c      	adds	r4, r1, #1
 8000d4c:	60dc      	str	r4, [r3, #12]
 8000d4e:	700a      	strb	r2, [r1, #0]

  return (msg_t)a;
}
 8000d50:	bc30      	pop	{r4, r5}
 8000d52:	4770      	bx	lr
 8000d54:	20000b74 	.word	0x20000b74
	...

08000d60 <dis_func4>:

static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 8000d60:	b470      	push	{r4, r5, r6}
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000d62:	4c10      	ldr	r4, [pc, #64]	; (8000da4 <dis_func4+0x44>)
 8000d64:	68e5      	ldr	r5, [r4, #12]
 8000d66:	f104 0c20 	add.w	ip, r4, #32
 8000d6a:	4565      	cmp	r5, ip
 8000d6c:	d217      	bcs.n	8000d9e <dis_func4+0x3e>
    *chtest.tokp++ = token;
 8000d6e:	1c6e      	adds	r6, r5, #1
 8000d70:	60e6      	str	r6, [r4, #12]

  test_emit_token((char)a);
 8000d72:	7028      	strb	r0, [r5, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000d74:	68e5      	ldr	r5, [r4, #12]
 8000d76:	4565      	cmp	r5, ip
  test_emit_token((char)b);
 8000d78:	b2c9      	uxtb	r1, r1
 8000d7a:	d210      	bcs.n	8000d9e <dis_func4+0x3e>
    *chtest.tokp++ = token;
 8000d7c:	1c6e      	adds	r6, r5, #1
 8000d7e:	60e6      	str	r6, [r4, #12]
 8000d80:	7029      	strb	r1, [r5, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000d82:	68e1      	ldr	r1, [r4, #12]
 8000d84:	4561      	cmp	r1, ip
  test_emit_token((char)c);
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	d209      	bcs.n	8000d9e <dis_func4+0x3e>
    *chtest.tokp++ = token;
 8000d8a:	1c4d      	adds	r5, r1, #1
 8000d8c:	60e5      	str	r5, [r4, #12]
 8000d8e:	700a      	strb	r2, [r1, #0]
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000d90:	68e2      	ldr	r2, [r4, #12]
 8000d92:	4562      	cmp	r2, ip
  test_emit_token((char)d);
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	d202      	bcs.n	8000d9e <dis_func4+0x3e>
    *chtest.tokp++ = token;
 8000d98:	1c51      	adds	r1, r2, #1
 8000d9a:	60e1      	str	r1, [r4, #12]
 8000d9c:	7013      	strb	r3, [r2, #0]

  return (msg_t)a;
}
 8000d9e:	bc70      	pop	{r4, r5, r6}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000b74 	.word	0x20000b74
	...

08000db0 <dis_func_end>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <dis_func_end+0x20>)
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	f103 0120 	add.w	r1, r3, #32
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d203      	bcs.n	8000dc4 <dis_func_end+0x14>
    *chtest.tokp++ = token;
 8000dbc:	1c50      	adds	r0, r2, #1
 8000dbe:	215a      	movs	r1, #90	; 0x5a
 8000dc0:	60d8      	str	r0, [r3, #12]
 8000dc2:	7011      	strb	r1, [r2, #0]

static int dis_func_end(void) {

  test_emit_token('Z');
  exit_flag = true;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <dis_func_end+0x24>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]

  return (msg_t)0xAA55;
}
 8000dca:	f64a 2055 	movw	r0, #43605	; 0xaa55
 8000dce:	4770      	bx	lr
 8000dd0:	20000b74 	.word	0x20000b74
 8000dd4:	20000bb8 	.word	0x20000bb8
	...

08000de0 <obj_write>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <obj_write+0x1c>)
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	f103 0020 	add.w	r0, r3, #32
 8000de8:	4282      	cmp	r2, r0
 8000dea:	d204      	bcs.n	8000df6 <obj_write+0x16>
                      oc_object_t *objp,
                      bool async) {
  (void)ocp;
  (void)async;

  test_emit_token('A' + objp->obj_key);
 8000dec:	6949      	ldr	r1, [r1, #20]
    *chtest.tokp++ = token;
 8000dee:	1c50      	adds	r0, r2, #1
 8000df0:	3141      	adds	r1, #65	; 0x41
 8000df2:	60d8      	str	r0, [r3, #12]
 8000df4:	7011      	strb	r1, [r2, #0]

  return false;
}
 8000df6:	2000      	movs	r0, #0
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000b74 	.word	0x20000b74

08000e00 <null_provider>:

  (void)size;
  (void)align;

  return NULL;
}
 8000e00:	2000      	movs	r0, #0
 8000e02:	4770      	bx	lr
	...

08000e10 <oslib_test_007_001_setup.lto_priv.0>:
  mp->next = NULL;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <oslib_test_007_001_setup.lto_priv.0+0x10>)
  mp->object_size = size;
 8000e12:	2200      	movs	r2, #0
 8000e14:	2104      	movs	r1, #4
 8000e16:	e9c3 2100 	strd	r2, r1, [r3]
  mp->provider = provider;
 8000e1a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 * .
 */

static void oslib_test_007_001_setup(void) {
  chPoolObjectInit(&mp1, sizeof (uint32_t), NULL);
}
 8000e1e:	4770      	bx	lr
 8000e20:	20000874 	.word	0x20000874
	...

08000e30 <oslib_test_007_001_execute.lto_priv.0>:

static void oslib_test_007_001_execute(void) {
 8000e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned i;

  /* [7.1.1] Adding the objects to the pool using chPoolLoadArray().*/
  test_set_step(1);
 8000e34:	4f5d      	ldr	r7, [pc, #372]	; (8000fac <oslib_test_007_001_execute.lto_priv.0+0x17c>)
 8000e36:	4b5e      	ldr	r3, [pc, #376]	; (8000fb0 <oslib_test_007_001_execute.lto_priv.0+0x180>)
 8000e38:	4c5e      	ldr	r4, [pc, #376]	; (8000fb4 <oslib_test_007_001_execute.lto_priv.0+0x184>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	603a      	str	r2, [r7, #0]
 8000e3e:	2530      	movs	r5, #48	; 0x30
 8000e40:	2204      	movs	r2, #4
 8000e42:	2000      	movs	r0, #0
 8000e44:	f385 8811 	msr	BASEPRI, r5
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8000e48:	6821      	ldr	r1, [r4, #0]
 8000e4a:	6019      	str	r1, [r3, #0]
  mp->next = php;
 8000e4c:	6023      	str	r3, [r4, #0]
 8000e4e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8000e52:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8000e54:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8000e56:	440b      	add	r3, r1
  while (n != 0U) {
 8000e58:	d1f4      	bne.n	8000e44 <oslib_test_007_001_execute.lto_priv.0+0x14>
    chPoolLoadArray(&mp1, objects, MEMORY_POOL_SIZE);
  }
  test_end_step(1);

  /* [7.1.2] Emptying the pool using chPoolAlloc().*/
  test_set_step(2);
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	2604      	movs	r6, #4
 8000e60:	f04f 0830 	mov.w	r8, #48	; 0x30
 8000e64:	4615      	mov	r5, r2
 8000e66:	f388 8811 	msr	BASEPRI, r8
  objp = mp->next;
 8000e6a:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	d070      	beq.n	8000f52 <oslib_test_007_001_execute.lto_priv.0+0x122>
    mp->next = mp->next->next;
 8000e70:	6803      	ldr	r3, [r0, #0]
 8000e72:	6023      	str	r3, [r4, #0]
 8000e74:	f385 8811 	msr	BASEPRI, r5
  if (!condition) {
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d063      	beq.n	8000f44 <oslib_test_007_001_execute.lto_priv.0+0x114>
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8000e7c:	3e01      	subs	r6, #1
 8000e7e:	d1f2      	bne.n	8000e66 <oslib_test_007_001_execute.lto_priv.0+0x36>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }
  test_end_step(2);

  /* [7.1.3] Now must be empty.*/
  test_set_step(3);
 8000e80:	2303      	movs	r3, #3
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	2330      	movs	r3, #48	; 0x30
 8000e86:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8000e8a:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	d072      	beq.n	8000f76 <oslib_test_007_001_execute.lto_priv.0+0x146>
    mp->next = mp->next->next;
 8000e90:	6803      	ldr	r3, [r0, #0]
 8000e92:	6023      	str	r3, [r4, #0]
 8000e94:	2300      	movs	r3, #0
 8000e96:	f383 8811 	msr	BASEPRI, r3
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d164      	bne.n	8000f68 <oslib_test_007_001_execute.lto_priv.0+0x138>
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
  }
  test_end_step(3);

  /* [7.1.4] Adding the objects to the pool using chPoolFree().*/
  test_set_step(4);
 8000e9e:	4b44      	ldr	r3, [pc, #272]	; (8000fb0 <oslib_test_007_001_execute.lto_priv.0+0x180>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	603a      	str	r2, [r7, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8000ea4:	f103 0610 	add.w	r6, r3, #16
 8000ea8:	2530      	movs	r5, #48	; 0x30
 8000eaa:	2000      	movs	r0, #0
      chPoolFree(&mp1, &objects[i]);
 8000eac:	461a      	mov	r2, r3
 8000eae:	f385 8811 	msr	BASEPRI, r5
  php->next = mp->next;
 8000eb2:	6821      	ldr	r1, [r4, #0]
 8000eb4:	f843 1b04 	str.w	r1, [r3], #4
  mp->next = php;
 8000eb8:	6022      	str	r2, [r4, #0]
 8000eba:	f380 8811 	msr	BASEPRI, r0
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	d1f4      	bne.n	8000eac <oslib_test_007_001_execute.lto_priv.0+0x7c>
  }
  test_end_step(4);

  /* [7.1.5] Emptying the pool using chPoolAlloc() again.*/
  test_set_step(5);
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	2504      	movs	r5, #4
 8000ec8:	2630      	movs	r6, #48	; 0x30
 8000eca:	f04f 0800 	mov.w	r8, #0
 8000ece:	f386 8811 	msr	BASEPRI, r6
  objp = mp->next;
 8000ed2:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	d031      	beq.n	8000f3c <oslib_test_007_001_execute.lto_priv.0+0x10c>
    mp->next = mp->next->next;
 8000ed8:	6803      	ldr	r3, [r0, #0]
 8000eda:	6023      	str	r3, [r4, #0]
 8000edc:	f388 8811 	msr	BASEPRI, r8
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d02f      	beq.n	8000f44 <oslib_test_007_001_execute.lto_priv.0+0x114>
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8000ee4:	3d01      	subs	r5, #1
 8000ee6:	d1f2      	bne.n	8000ece <oslib_test_007_001_execute.lto_priv.0+0x9e>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
  }
  test_end_step(5);

  /* [7.1.6] Now must be empty again.*/
  test_set_step(6);
 8000ee8:	2306      	movs	r3, #6
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	2330      	movs	r3, #48	; 0x30
 8000eee:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8000ef2:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	d044      	beq.n	8000f82 <oslib_test_007_001_execute.lto_priv.0+0x152>
    mp->next = mp->next->next;
 8000ef8:	6803      	ldr	r3, [r0, #0]
 8000efa:	6023      	str	r3, [r4, #0]
 8000efc:	2300      	movs	r3, #0
 8000efe:	f383 8811 	msr	BASEPRI, r3
 8000f02:	2800      	cmp	r0, #0
 8000f04:	d130      	bne.n	8000f68 <oslib_test_007_001_execute.lto_priv.0+0x138>
  mp->provider = provider;
 8000f06:	4a2c      	ldr	r2, [pc, #176]	; (8000fb8 <oslib_test_007_001_execute.lto_priv.0+0x188>)
  }
  test_end_step(6);

  /* [7.1.7] Covering the case where a provider is unable to return
     more memory.*/
  test_set_step(7);
 8000f08:	2107      	movs	r1, #7
  mp->object_size = size;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	6039      	str	r1, [r7, #0]
  mp->next = NULL;
 8000f0e:	2100      	movs	r1, #0
  mp->object_size = size;
 8000f10:	e9c4 1300 	strd	r1, r3, [r4]
  mp->provider = provider;
 8000f14:	e9c4 3202 	strd	r3, r2, [r4, #8]
 8000f18:	2330      	movs	r3, #48	; 0x30
 8000f1a:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8000f1e:	6820      	ldr	r0, [r4, #0]
  if (objp != NULL) {
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d034      	beq.n	8000f8e <oslib_test_007_001_execute.lto_priv.0+0x15e>
    mp->next = mp->next->next;
 8000f24:	6803      	ldr	r3, [r0, #0]
 8000f26:	6023      	str	r3, [r4, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f383 8811 	msr	BASEPRI, r3
 8000f2e:	b170      	cbz	r0, 8000f4e <oslib_test_007_001_execute.lto_priv.0+0x11e>
  chtest.failure_message = msg;
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <oslib_test_007_001_execute.lto_priv.0+0x18c>)
 8000f32:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8000f34:	f240 1201 	movw	r2, #257	; 0x101
 8000f38:	80ba      	strh	r2, [r7, #4]
    return __test_fail(msg);
 8000f3a:	e008      	b.n	8000f4e <oslib_test_007_001_execute.lto_priv.0+0x11e>
  else if (mp->provider != NULL) {
 8000f3c:	68e3      	ldr	r3, [r4, #12]
 8000f3e:	b97b      	cbnz	r3, 8000f60 <oslib_test_007_001_execute.lto_priv.0+0x130>
 8000f40:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <oslib_test_007_001_execute.lto_priv.0+0x190>)
 8000f46:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8000f48:	f240 1201 	movw	r2, #257	; 0x101
 8000f4c:	80ba      	strh	r2, [r7, #4]
  {
    chPoolObjectInit(&mp1, sizeof (uint32_t), null_provider);
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
  }
  test_end_step(7);
}
 8000f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f52:	68e3      	ldr	r3, [r4, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0f3      	beq.n	8000f40 <oslib_test_007_001_execute.lto_priv.0+0x110>
    objp = mp->provider(mp->object_size, mp->align);
 8000f58:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8000f5c:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8000f5e:	e789      	b.n	8000e74 <oslib_test_007_001_execute.lto_priv.0+0x44>
    objp = mp->provider(mp->object_size, mp->align);
 8000f60:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8000f64:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8000f66:	e7b9      	b.n	8000edc <oslib_test_007_001_execute.lto_priv.0+0xac>
  chtest.failure_message = msg;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <oslib_test_007_001_execute.lto_priv.0+0x194>)
 8000f6a:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8000f6c:	f240 1201 	movw	r2, #257	; 0x101
 8000f70:	80ba      	strh	r2, [r7, #4]
 8000f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 8000f76:	68e3      	ldr	r3, [r4, #12]
 8000f78:	b17b      	cbz	r3, 8000f9a <oslib_test_007_001_execute.lto_priv.0+0x16a>
    objp = mp->provider(mp->object_size, mp->align);
 8000f7a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8000f7e:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8000f80:	e788      	b.n	8000e94 <oslib_test_007_001_execute.lto_priv.0+0x64>
  else if (mp->provider != NULL) {
 8000f82:	68e3      	ldr	r3, [r4, #12]
 8000f84:	b163      	cbz	r3, 8000fa0 <oslib_test_007_001_execute.lto_priv.0+0x170>
    objp = mp->provider(mp->object_size, mp->align);
 8000f86:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8000f8a:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8000f8c:	e7b6      	b.n	8000efc <oslib_test_007_001_execute.lto_priv.0+0xcc>
  else if (mp->provider != NULL) {
 8000f8e:	68e3      	ldr	r3, [r4, #12]
 8000f90:	b14b      	cbz	r3, 8000fa6 <oslib_test_007_001_execute.lto_priv.0+0x176>
    objp = mp->provider(mp->object_size, mp->align);
 8000f92:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8000f96:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8000f98:	e7c6      	b.n	8000f28 <oslib_test_007_001_execute.lto_priv.0+0xf8>
 8000f9a:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 8000f9e:	e77e      	b.n	8000e9e <oslib_test_007_001_execute.lto_priv.0+0x6e>
 8000fa0:	f385 8811 	msr	BASEPRI, r5
 8000fa4:	e7af      	b.n	8000f06 <oslib_test_007_001_execute.lto_priv.0+0xd6>
 8000fa6:	f383 8811 	msr	BASEPRI, r3
 8000faa:	e7d0      	b.n	8000f4e <oslib_test_007_001_execute.lto_priv.0+0x11e>
 8000fac:	20000b74 	.word	0x20000b74
 8000fb0:	20000dac 	.word	0x20000dac
 8000fb4:	20000874 	.word	0x20000874
 8000fb8:	08000e01 	.word	0x08000e01
 8000fbc:	08014fa8 	.word	0x08014fa8
 8000fc0:	08014f8c 	.word	0x08014f8c
 8000fc4:	08014f98 	.word	0x08014f98
	...

08000fd0 <oslib_test_007_003_setup.lto_priv.0>:
  mp->next = NULL;
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <oslib_test_007_003_setup.lto_priv.0+0x18>)
  mp->object_size = size;
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	e9c3 2103 	strd	r2, r1, [r3, #12]
  mp->provider = provider;
 8000fda:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8000fde:	e9c3 3300 	strd	r3, r3, [r3]
 8000fe2:	609a      	str	r2, [r3, #8]
 * .
 */

static void oslib_test_007_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000810 	.word	0x20000810
 8000fec:	00000000 	.word	0x00000000

08000ff0 <oslib_test_007_002_setup.lto_priv.0>:
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <oslib_test_007_002_setup.lto_priv.0+0x18>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	e9c3 2103 	strd	r2, r1, [r3, #12]
 8000ffa:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8000ffe:	e9c3 3300 	strd	r3, r3, [r3]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000810 	.word	0x20000810
 800100c:	00000000 	.word	0x00000000

08001010 <oslib_test_008_001_setup.lto_priv.0>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <oslib_test_008_001_setup.lto_priv.0+0x2c>)
  heapp->provider = NULL;
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <oslib_test_008_001_setup.lto_priv.0+0x30>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8001014:	1dd9      	adds	r1, r3, #7
 8001016:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 800101a:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800101c:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
  heapp->provider = NULL;
 8001020:	2000      	movs	r0, #0
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8001022:	08db      	lsrs	r3, r3, #3
  H_NEXT(&heapp->header) = hp;
 8001024:	e9c2 0100 	strd	r0, r1, [r2]
  H_PAGES(&heapp->header) = 0;
 8001028:	6090      	str	r0, [r2, #8]
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800102a:	e9c1 0300 	strd	r0, r3, [r1]
  qp->next = qp;
 800102e:	f102 030c 	add.w	r3, r2, #12
  qp->prev = qp;
 8001032:	e9c2 3303 	strd	r3, r3, [r2, #12]
 8001036:	6150      	str	r0, [r2, #20]
 * .
 */

static void oslib_test_008_001_setup(void) {
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20001664 	.word	0x20001664
 8001040:	20001648 	.word	0x20001648
	...

08001050 <__sch_wakeup.lto_priv.0>:
 8001050:	2330      	movs	r3, #48	; 0x30
 8001052:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = threadref(p);

  (void)vtp;

  chSysLockFromISR();
  switch (tp->state) {
 8001056:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 800105a:	2b0c      	cmp	r3, #12
 800105c:	d810      	bhi.n	8001080 <__sch_wakeup.lto_priv.0+0x30>
 800105e:	e8df f003 	tbb	[pc, r3]
 8001062:	0f2a      	.short	0x0f2a
 8001064:	070b260f 	.word	0x070b260f
 8001068:	0f0f0b0f 	.word	0x0f0f0b0f
 800106c:	0f0f      	.short	0x0f0f
 800106e:	0b          	.byte	0x0b
 800106f:	00          	.byte	0x00
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8001070:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8001072:	6893      	ldr	r3, [r2, #8]
 8001074:	3301      	adds	r3, #1
 8001076:	6093      	str	r3, [r2, #8]
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 8001078:	e9d1 3200 	ldrd	r3, r2, [r1]
 800107c:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800107e:	605a      	str	r2, [r3, #4]
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8001080:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 8001082:	2200      	movs	r2, #0
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 8001084:	f04f 34ff 	mov.w	r4, #4294967295
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001088:	698b      	ldr	r3, [r1, #24]
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio >= p->prio));
 800108a:	6888      	ldr	r0, [r1, #8]
  tp->u.rdymsg = MSG_TIMEOUT;
 800108c:	628c      	str	r4, [r1, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800108e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
    pqp = pqp->next;
 8001092:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	4282      	cmp	r2, r0
 8001098:	d2fb      	bcs.n	8001092 <__sch_wakeup.lto_priv.0+0x42>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	2000      	movs	r0, #0
 800109e:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 80010a2:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 80010a4:	6059      	str	r1, [r3, #4]
 80010a6:	f380 8811 	msr	BASEPRI, r0
  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
  chSysUnlockFromISR();

  return;
}
 80010aa:	bc10      	pop	{r4}
 80010ac:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80010ae:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
    break;
 80010b4:	e7e4      	b.n	8001080 <__sch_wakeup.lto_priv.0+0x30>
 80010b6:	2300      	movs	r3, #0
 80010b8:	f383 8811 	msr	BASEPRI, r3
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 80010c0:	6883      	ldr	r3, [r0, #8]
 80010c2:	3301      	adds	r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	6083      	str	r3, [r0, #8]
 80010c8:	dd00      	ble.n	80010cc <chSemSignalI+0xc>
 80010ca:	4770      	bx	lr
  ch_queue_t *p = qp->next;
 80010cc:	6803      	ldr	r3, [r0, #0]
void chSemSignalI(semaphore_t *sp) {
 80010ce:	b410      	push	{r4}
  qp->next       = p->next;
 80010d0:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80010d2:	699a      	ldr	r2, [r3, #24]
 80010d4:	6004      	str	r4, [r0, #0]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = threadref(ch_queue_fifo_remove(&sp->queue));
    tp->u.rdymsg = MSG_OK;
 80010d6:	2100      	movs	r1, #0
  qp->next->prev = qp;
 80010d8:	6060      	str	r0, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 80010da:	6898      	ldr	r0, [r3, #8]
 80010dc:	6299      	str	r1, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80010de:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 80010e2:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80010e4:	6891      	ldr	r1, [r2, #8]
 80010e6:	4281      	cmp	r1, r0
 80010e8:	d2fb      	bcs.n	80010e2 <chSemSignalI+0x22>
  p->prev       = pqp->prev;
 80010ea:	6851      	ldr	r1, [r2, #4]
    (void) chSchReadyI(tp);
  }
}
 80010ec:	bc10      	pop	{r4}
 80010ee:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 80010f2:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 80010f4:	6053      	str	r3, [r2, #4]
 80010f6:	4770      	bx	lr
	...

08001100 <chMtxUnlockS>:
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <chMtxUnlockS+0x64>)
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001102:	6802      	ldr	r2, [r0, #0]
void chMtxUnlockS(mutex_t *mp) {
 8001104:	b410      	push	{r4}
 8001106:	68dc      	ldr	r4, [r3, #12]
    currtp->mtxlist = mp->next;
 8001108:	68c3      	ldr	r3, [r0, #12]
 800110a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (chMtxQueueNotEmptyS(mp)) {
 800110c:	4282      	cmp	r2, r0
 800110e:	d024      	beq.n	800115a <chMtxUnlockS+0x5a>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 8001110:	6c21      	ldr	r1, [r4, #64]	; 0x40
      lmp = currtp->mtxlist;
      while (lmp != NULL) {
 8001112:	b14b      	cbz	r3, 8001128 <chMtxUnlockS+0x28>
  return (bool)(qp->next != qp);
 8001114:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001116:	4293      	cmp	r3, r2
 8001118:	d003      	beq.n	8001122 <chMtxUnlockS+0x22>
 800111a:	6892      	ldr	r2, [r2, #8]
 800111c:	4291      	cmp	r1, r2
 800111e:	bf38      	it	cc
 8001120:	4611      	movcc	r1, r2
            ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
          newprio = threadref(lmp->queue.next)->hdr.pqueue.prio;
        }
        lmp = lmp->next;
 8001122:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f5      	bne.n	8001114 <chMtxUnlockS+0x14>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 8001128:	60a1      	str	r1, [r4, #8]
  ch_queue_t *p = qp->next;
 800112a:	6803      	ldr	r3, [r0, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = threadref(ch_queue_fifo_remove(&mp->queue));
      mp->owner = tp;
      mp->next = tp->mtxlist;
 800112c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  qp->next       = p->next;
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	6002      	str	r2, [r0, #0]
 8001132:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8001134:	6050      	str	r0, [r2, #4]
 8001136:	e9c0 3402 	strd	r3, r4, [r0, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800113a:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800113c:	689c      	ldr	r4, [r3, #8]
      tp->mtxlist = mp;
 800113e:	63d8      	str	r0, [r3, #60]	; 0x3c
  tp->state = CH_STATE_READY;
 8001140:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 8001144:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001146:	6891      	ldr	r1, [r2, #8]
 8001148:	42a1      	cmp	r1, r4
 800114a:	d2fb      	bcs.n	8001144 <chMtxUnlockS+0x44>
  p->prev       = pqp->prev;
 800114c:	6851      	ldr	r1, [r2, #4]
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 800114e:	bc10      	pop	{r4}
 8001150:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8001154:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8001156:	6053      	str	r3, [r2, #4]
 8001158:	4770      	bx	lr
      mp->owner = NULL;
 800115a:	2300      	movs	r3, #0
}
 800115c:	bc10      	pop	{r4}
      mp->owner = NULL;
 800115e:	6093      	str	r3, [r2, #8]
}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000a90 	.word	0x20000a90
	...

08001170 <chEvtBroadcastFlagsI>:
  elp = esp->next;
 8001170:	6803      	ldr	r3, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 8001172:	4298      	cmp	r0, r3
 8001174:	d034      	beq.n	80011e0 <chEvtBroadcastFlagsI+0x70>
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001176:	b4f0      	push	{r4, r5, r6, r7}
    tp->u.rdymsg = MSG_OK;
 8001178:	2500      	movs	r5, #0
 800117a:	e005      	b.n	8001188 <chEvtBroadcastFlagsI+0x18>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800117c:	f1bc 0f0b 	cmp.w	ip, #11
 8001180:	d029      	beq.n	80011d6 <chEvtBroadcastFlagsI+0x66>
    elp = elp->next;
 8001182:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8001184:	4298      	cmp	r0, r3
 8001186:	d024      	beq.n	80011d2 <chEvtBroadcastFlagsI+0x62>
    elp->flags |= flags;
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	430a      	orrs	r2, r1
 800118c:	60da      	str	r2, [r3, #12]
    if ((flags == (eventflags_t)0) ||
 800118e:	b111      	cbz	r1, 8001196 <chEvtBroadcastFlagsI+0x26>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8001190:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8001192:	4211      	tst	r1, r2
 8001194:	d0f5      	beq.n	8001182 <chEvtBroadcastFlagsI+0x12>
  tp->epending |= events;
 8001196:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 800119a:	6b96      	ldr	r6, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 800119c:	f892 c024 	ldrb.w	ip, [r2, #36]	; 0x24
  tp->epending |= events;
 80011a0:	4334      	orrs	r4, r6
  if (((tp->state == CH_STATE_WTOREVT) &&
 80011a2:	f1bc 0f0a 	cmp.w	ip, #10
  tp->epending |= events;
 80011a6:	6394      	str	r4, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 80011a8:	d1e8      	bne.n	800117c <chEvtBroadcastFlagsI+0xc>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80011aa:	6a96      	ldr	r6, [r2, #40]	; 0x28
  if (((tp->state == CH_STATE_WTOREVT) &&
 80011ac:	4234      	tst	r4, r6
 80011ae:	d0e8      	beq.n	8001182 <chEvtBroadcastFlagsI+0x12>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80011b0:	6994      	ldr	r4, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80011b2:	6897      	ldr	r7, [r2, #8]
    tp->u.rdymsg = MSG_OK;
 80011b4:	6295      	str	r5, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80011b6:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
    pqp = pqp->next;
 80011ba:	6824      	ldr	r4, [r4, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80011bc:	68a6      	ldr	r6, [r4, #8]
 80011be:	42be      	cmp	r6, r7
 80011c0:	d2fb      	bcs.n	80011ba <chEvtBroadcastFlagsI+0x4a>
    elp = elp->next;
 80011c2:	681b      	ldr	r3, [r3, #0]
  p->prev       = pqp->prev;
 80011c4:	6866      	ldr	r6, [r4, #4]
  while (elp != (event_listener_t *)esp) {
 80011c6:	4298      	cmp	r0, r3
 80011c8:	e9c2 4600 	strd	r4, r6, [r2]
  p->prev->next = p;
 80011cc:	6032      	str	r2, [r6, #0]
  pqp->prev     = p;
 80011ce:	6062      	str	r2, [r4, #4]
 80011d0:	d1da      	bne.n	8001188 <chEvtBroadcastFlagsI+0x18>
}
 80011d2:	bcf0      	pop	{r4, r5, r6, r7}
 80011d4:	4770      	bx	lr
      ((tp->state == CH_STATE_WTANDEVT) &&
 80011d6:	6a96      	ldr	r6, [r2, #40]	; 0x28
 80011d8:	ea36 0404 	bics.w	r4, r6, r4
 80011dc:	d1d1      	bne.n	8001182 <chEvtBroadcastFlagsI+0x12>
 80011de:	e7e7      	b.n	80011b0 <chEvtBroadcastFlagsI+0x40>
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
	...

080011f0 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 80011f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 80011f4:	6f46      	ldr	r6, [r0, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80011f6:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 80011fa:	6833      	ldr	r3, [r6, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 80011fc:	05d9      	lsls	r1, r3, #23
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 80011fe:	4604      	mov	r4, r0
  uint16_t sr = u->SR;
 8001200:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 8001202:	f100 8088 	bmi.w	8001316 <sd_lld_serve_interrupt+0x126>
 8001206:	2330      	movs	r3, #48	; 0x30
 8001208:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800120c:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8001210:	d059      	beq.n	80012c6 <sd_lld_serve_interrupt+0xd6>
  chnAddFlagsI(sdp, sts);
 8001212:	1d20      	adds	r0, r4, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8001214:	f104 070c 	add.w	r7, r4, #12

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001218:	f04f 0800 	mov.w	r8, #0
 800121c:	e00a      	b.n	8001234 <sd_lld_serve_interrupt+0x44>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 800121e:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8001220:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8001224:	f894 a07c 	ldrb.w	sl, [r4, #124]	; 0x7c
    if (sr & USART_SR_RXNE)
 8001228:	d41d      	bmi.n	8001266 <sd_lld_serve_interrupt+0x76>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800122a:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800122c:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8001230:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001232:	d048      	beq.n	80012c6 <sd_lld_serve_interrupt+0xd6>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8001234:	072a      	lsls	r2, r5, #28
 8001236:	d0f2      	beq.n	800121e <sd_lld_serve_interrupt+0x2e>
  if (sr & USART_SR_ORE)
 8001238:	f3c5 01c0 	ubfx	r1, r5, #3, #1
 800123c:	0209      	lsls	r1, r1, #8
  if (sr & USART_SR_PE)
 800123e:	07eb      	lsls	r3, r5, #31
    sts |= SD_PARITY_ERROR;
 8001240:	bf48      	it	mi
 8001242:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8001246:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8001248:	bf48      	it	mi
 800124a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800124e:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 8001250:	bf48      	it	mi
 8001252:	f041 0180 	orrmi.w	r1, r1, #128	; 0x80
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001256:	f7ff ff8b 	bl	8001170 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 800125a:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800125c:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8001260:	f894 a07c 	ldrb.w	sl, [r4, #124]	; 0x7c
    if (sr & USART_SR_RXNE)
 8001264:	d5e1      	bpl.n	800122a <sd_lld_serve_interrupt+0x3a>
  if (iqIsEmptyI(&sdp->iqueue))
 8001266:	6963      	ldr	r3, [r4, #20]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d045      	beq.n	80012f8 <sd_lld_serve_interrupt+0x108>
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 800126c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8001270:	429a      	cmp	r2, r3
 8001272:	d048      	beq.n	8001306 <sd_lld_serve_interrupt+0x116>
    iqp->q_counter++;
 8001274:	6963      	ldr	r3, [r4, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	6163      	str	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 800127a:	ea0a 0a0b 	and.w	sl, sl, fp
    *iqp->q_wrptr++ = b;
 800127e:	1c53      	adds	r3, r2, #1
 8001280:	6223      	str	r3, [r4, #32]
 8001282:	f882 a000 	strb.w	sl, [r2]
    if (iqp->q_wrptr >= iqp->q_top) {
 8001286:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800128a:	429a      	cmp	r2, r3
 800128c:	d301      	bcc.n	8001292 <sd_lld_serve_interrupt+0xa2>
      iqp->q_wrptr = iqp->q_buffer;
 800128e:	69a3      	ldr	r3, [r4, #24]
 8001290:	6223      	str	r3, [r4, #32]
  return (bool)(qp->next != qp);
 8001292:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (ch_queue_notempty(&tqp->queue)) {
 8001294:	429f      	cmp	r7, r3
 8001296:	d0c8      	beq.n	800122a <sd_lld_serve_interrupt+0x3a>
  qp->next       = p->next;
 8001298:	681a      	ldr	r2, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800129a:	6999      	ldr	r1, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800129c:	689d      	ldr	r5, [r3, #8]
  qp->next       = p->next;
 800129e:	60e2      	str	r2, [r4, #12]
  qp->next->prev = qp;
 80012a0:	6057      	str	r7, [r2, #4]
 80012a2:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80012a6:	f883 8024 	strb.w	r8, [r3, #36]	; 0x24
    pqp = pqp->next;
 80012aa:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80012ac:	688a      	ldr	r2, [r1, #8]
 80012ae:	42aa      	cmp	r2, r5
 80012b0:	d2fb      	bcs.n	80012aa <sd_lld_serve_interrupt+0xba>
  p->prev       = pqp->prev;
 80012b2:	684a      	ldr	r2, [r1, #4]
  p->next       = pqp;
 80012b4:	6019      	str	r1, [r3, #0]
  p->prev       = pqp->prev;
 80012b6:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 80012b8:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 80012ba:	604b      	str	r3, [r1, #4]
    sr = u->SR;
 80012bc:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80012be:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 80012c2:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80012c4:	d1b6      	bne.n	8001234 <sd_lld_serve_interrupt+0x44>
 80012c6:	2300      	movs	r3, #0
 80012c8:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80012cc:	f019 0f80 	tst.w	r9, #128	; 0x80
 80012d0:	d001      	beq.n	80012d6 <sd_lld_serve_interrupt+0xe6>
 80012d2:	062a      	lsls	r2, r5, #24
 80012d4:	d42e      	bmi.n	8001334 <sd_lld_serve_interrupt+0x144>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80012d6:	f019 0f40 	tst.w	r9, #64	; 0x40
 80012da:	d00b      	beq.n	80012f4 <sd_lld_serve_interrupt+0x104>
 80012dc:	066b      	lsls	r3, r5, #25
 80012de:	d509      	bpl.n	80012f4 <sd_lld_serve_interrupt+0x104>
 80012e0:	2330      	movs	r3, #48	; 0x30
 80012e2:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue)) {
 80012e6:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d04f      	beq.n	800138e <sd_lld_serve_interrupt+0x19e>
 80012ee:	2300      	movs	r3, #0
 80012f0:	f383 8811 	msr	BASEPRI, r3
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
      u->CR1 = cr1 & ~USART_CR1_TCIE;
    }
    osalSysUnlockFromISR();
  }
}
 80012f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012f8:	2104      	movs	r1, #4
 80012fa:	f7ff ff39 	bl	8001170 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 80012fe:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8001302:	429a      	cmp	r2, r3
 8001304:	d1b6      	bne.n	8001274 <sd_lld_serve_interrupt+0x84>
 8001306:	6963      	ldr	r3, [r4, #20]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0b3      	beq.n	8001274 <sd_lld_serve_interrupt+0x84>
 800130c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001310:	f7ff ff2e 	bl	8001170 <chEvtBroadcastFlagsI>
}
 8001314:	e789      	b.n	800122a <sd_lld_serve_interrupt+0x3a>
 8001316:	2330      	movs	r3, #48	; 0x30
 8001318:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 800131c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001320:	3004      	adds	r0, #4
 8001322:	f7ff ff25 	bl	8001170 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8001326:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800132a:	6033      	str	r3, [r6, #0]
 800132c:	2300      	movs	r3, #0
 800132e:	f383 8811 	msr	BASEPRI, r3
}
 8001332:	e768      	b.n	8001206 <sd_lld_serve_interrupt+0x16>
 8001334:	2330      	movs	r3, #48	; 0x30
 8001336:	f383 8811 	msr	BASEPRI, r3
    b = oqGetI(&sdp->oqueue);
 800133a:	18e1      	adds	r1, r4, r3
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 800133c:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8001340:	429a      	cmp	r2, r3
 8001342:	d031      	beq.n	80013a8 <sd_lld_serve_interrupt+0x1b8>
    uint8_t b;

    oqp->q_counter++;
 8001344:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001346:	3201      	adds	r2, #1
 8001348:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	64a2      	str	r2, [r4, #72]	; 0x48
 800134e:	7818      	ldrb	r0, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8001350:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001352:	429a      	cmp	r2, r3
 8001354:	d301      	bcc.n	800135a <sd_lld_serve_interrupt+0x16a>
      oqp->q_rdptr = oqp->q_buffer;
 8001356:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001358:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(qp->next != qp);
 800135a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800135c:	4299      	cmp	r1, r3
 800135e:	d011      	beq.n	8001384 <sd_lld_serve_interrupt+0x194>
  qp->next       = p->next;
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	6322      	str	r2, [r4, #48]	; 0x30
  qp->next->prev = qp;
 8001364:	6051      	str	r1, [r2, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	629a      	str	r2, [r3, #40]	; 0x28
 800136a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  } while (unlikely(pqp->prio >= p->prio));
 800136e:	689f      	ldr	r7, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001370:	699a      	ldr	r2, [r3, #24]
    pqp = pqp->next;
 8001372:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001374:	6891      	ldr	r1, [r2, #8]
 8001376:	42b9      	cmp	r1, r7
 8001378:	d2fb      	bcs.n	8001372 <sd_lld_serve_interrupt+0x182>
  p->prev       = pqp->prev;
 800137a:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 800137c:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800137e:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 8001380:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8001382:	6053      	str	r3, [r2, #4]
      u->DR = b;
 8001384:	6070      	str	r0, [r6, #4]
 8001386:	2300      	movs	r3, #0
 8001388:	f383 8811 	msr	BASEPRI, r3
 800138c:	e7a3      	b.n	80012d6 <sd_lld_serve_interrupt+0xe6>
    if (oqIsEmptyI(&sdp->oqueue)) {
 800138e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0ac      	beq.n	80012ee <sd_lld_serve_interrupt+0xfe>
  chEvtBroadcastFlagsI(esp, flags);
 8001394:	2110      	movs	r1, #16
 8001396:	1d20      	adds	r0, r4, #4
 8001398:	f7ff feea 	bl	8001170 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800139c:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80013a0:	ea09 0303 	and.w	r3, r9, r3
 80013a4:	60f3      	str	r3, [r6, #12]
 80013a6:	e7a2      	b.n	80012ee <sd_lld_serve_interrupt+0xfe>
  if (!oqIsEmptyI(oqp)) {
 80013a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80013aa:	2a00      	cmp	r2, #0
 80013ac:	d0ca      	beq.n	8001344 <sd_lld_serve_interrupt+0x154>
 80013ae:	2108      	movs	r1, #8
 80013b0:	1d20      	adds	r0, r4, #4
 80013b2:	f7ff fedd 	bl	8001170 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80013b6:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80013ba:	ea09 0303 	and.w	r3, r9, r3
 80013be:	60f3      	str	r3, [r6, #12]
 80013c0:	e7e1      	b.n	8001386 <sd_lld_serve_interrupt+0x196>
 80013c2:	bf00      	nop
	...

080013d0 <chThdYield>:
void chThdYield(void) {
 80013d0:	b510      	push	{r4, lr}
 80013d2:	2330      	movs	r3, #48	; 0x30
 80013d4:	f383 8811 	msr	BASEPRI, r3
 *
 * @sclass
 */
void chSchDoYieldS(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <chThdYield+0x4c>)
 80013da:	68d9      	ldr	r1, [r3, #12]

  chDbgCheckClassS();

  /* If this function has been called then it is likely there are threads
     at same priority level.*/
  if (likely(firstprio(&oip->rlist.pqueue) >= tp->hdr.pqueue.prio)) {
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	688a      	ldr	r2, [r1, #8]
 80013e0:	6884      	ldr	r4, [r0, #8]
 80013e2:	4294      	cmp	r4, r2
 80013e4:	d315      	bcc.n	8001412 <chThdYield+0x42>
  pqp->next       = p->next;
 80013e6:	6804      	ldr	r4, [r0, #0]
 80013e8:	601c      	str	r4, [r3, #0]
  pqp->next->prev = pqp;
 80013ea:	6063      	str	r3, [r4, #4]
  ntp->state = CH_STATE_CURRENT;
 80013ec:	2401      	movs	r4, #1
 80013ee:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 80013f2:	60d8      	str	r0, [r3, #12]
  tp->state = CH_STATE_READY;
 80013f4:	2400      	movs	r4, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80013f6:	698b      	ldr	r3, [r1, #24]
  tp->state = CH_STATE_READY;
 80013f8:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
    pqp = pqp->next;
 80013fc:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80013fe:	689c      	ldr	r4, [r3, #8]
 8001400:	42a2      	cmp	r2, r4
 8001402:	d9fb      	bls.n	80013fc <chThdYield+0x2c>
  p->prev       = pqp->prev;
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 800140a:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 800140c:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 800140e:	f7fe ff57 	bl	80002c0 <__port_switch>
 8001412:	2300      	movs	r3, #0
 8001414:	f383 8811 	msr	BASEPRI, r3
}
 8001418:	bd10      	pop	{r4, pc}
 800141a:	bf00      	nop
 800141c:	20000a90 	.word	0x20000a90

08001420 <chMsgSend>:
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8001420:	b538      	push	{r3, r4, r5, lr}
  return __sch_get_currthread();
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <chMsgSend+0x68>)
 8001424:	2230      	movs	r2, #48	; 0x30
 8001426:	68dc      	ldr	r4, [r3, #12]
 8001428:	f382 8811 	msr	BASEPRI, r2
  p->prev       = qp->prev;
 800142c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800142e:	6062      	str	r2, [r4, #4]

  chDbgCheck(tp != NULL);

  chSysLock();
  currtp->u.sentmsg = msg;
  __ch_msg_insert(&tp->msgqueue, currtp);
 8001430:	f100 0530 	add.w	r5, r0, #48	; 0x30
  p->next       = qp;
 8001434:	6025      	str	r5, [r4, #0]
  currtp->u.sentmsg = msg;
 8001436:	62a1      	str	r1, [r4, #40]	; 0x28
  p->prev->next = p;
 8001438:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 800143a:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
  qp->prev      = p;
 800143e:	6344      	str	r4, [r0, #52]	; 0x34
 8001440:	2a0e      	cmp	r2, #14
 8001442:	d012      	beq.n	800146a <chMsgSend+0x4a>
  thread_t *otp = __instance_get_currthread(oip);
 8001444:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 8001446:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 8001448:	220c      	movs	r2, #12
 800144a:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pqp->next       = p->next;
 800144e:	6802      	ldr	r2, [r0, #0]
 8001450:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 8001452:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8001454:	2201      	movs	r2, #1
 8001456:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 800145a:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 800145c:	f7fe ff30 	bl	80002c0 <__port_switch>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
  msg = currtp->u.rdymsg;
 8001460:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001462:	2300      	movs	r3, #0
 8001464:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 8001468:	bd38      	pop	{r3, r4, r5, pc}
  tp->state = CH_STATE_READY;
 800146a:	2100      	movs	r1, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800146c:	6982      	ldr	r2, [r0, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800146e:	6885      	ldr	r5, [r0, #8]
  tp->state = CH_STATE_READY;
 8001470:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    pqp = pqp->next;
 8001474:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001476:	6891      	ldr	r1, [r2, #8]
 8001478:	42a9      	cmp	r1, r5
 800147a:	d2fb      	bcs.n	8001474 <chMsgSend+0x54>
  p->prev       = pqp->prev;
 800147c:	6851      	ldr	r1, [r2, #4]
 800147e:	e9c0 2100 	strd	r2, r1, [r0]
  p->prev->next = p;
 8001482:	6008      	str	r0, [r1, #0]
  pqp->prev     = p;
 8001484:	6050      	str	r0, [r2, #4]
  return __sch_ready_behind(tp);
 8001486:	e7dd      	b.n	8001444 <chMsgSend+0x24>
 8001488:	20000a90 	.word	0x20000a90
 800148c:	00000000 	.word	0x00000000

08001490 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 8001490:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8001492:	2141      	movs	r1, #65	; 0x41
static THD_FUNCTION(msg_thread1, p) {
 8001494:	4604      	mov	r4, r0
  chMsgSend(p, 'A');
 8001496:	f7ff ffc3 	bl	8001420 <chMsgSend>
  chMsgSend(p, 'B');
 800149a:	2142      	movs	r1, #66	; 0x42
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff ffbf 	bl	8001420 <chMsgSend>
  chMsgSend(p, 'C');
 80014a2:	2143      	movs	r1, #67	; 0x43
 80014a4:	4620      	mov	r0, r4
 80014a6:	f7ff ffbb 	bl	8001420 <chMsgSend>
  chMsgSend(p, 'D');
 80014aa:	4620      	mov	r0, r4
 80014ac:	2144      	movs	r1, #68	; 0x44
}
 80014ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 80014b2:	f7ff bfb5 	b.w	8001420 <chMsgSend>
 80014b6:	bf00      	nop
	...

080014c0 <thread1.lto_priv.1>:
static THD_FUNCTION(thread1, p) {
 80014c0:	b510      	push	{r4, lr}
 80014c2:	2330      	movs	r3, #48	; 0x30
 80014c4:	4604      	mov	r4, r0
 80014c6:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80014ca:	4a15      	ldr	r2, [pc, #84]	; (8001520 <thread1.lto_priv.1+0x60>)
 80014cc:	6893      	ldr	r3, [r2, #8]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	6093      	str	r3, [r2, #8]
 80014d4:	db0d      	blt.n	80014f2 <thread1.lto_priv.1+0x32>
 80014d6:	2300      	movs	r3, #0
 80014d8:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <thread1.lto_priv.1+0x64>)
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	f103 0120 	add.w	r1, r3, #32
 80014e4:	428a      	cmp	r2, r1
 80014e6:	d203      	bcs.n	80014f0 <thread1.lto_priv.1+0x30>
  test_emit_token(*(char *)p);
 80014e8:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 80014ea:	1c50      	adds	r0, r2, #1
 80014ec:	60d8      	str	r0, [r3, #12]
 80014ee:	7011      	strb	r1, [r2, #0]
}
 80014f0:	bd10      	pop	{r4, pc}
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <thread1.lto_priv.1+0x68>)
  p->prev       = qp->prev;
 80014f4:	6850      	ldr	r0, [r2, #4]
 80014f6:	68d9      	ldr	r1, [r3, #12]
  otp->state = newstate;
 80014f8:	f04f 0c05 	mov.w	ip, #5
 80014fc:	e9c1 2000 	strd	r2, r0, [r1]
    currtp->u.wtsemp = sp;
 8001500:	628a      	str	r2, [r1, #40]	; 0x28
  p->prev->next = p;
 8001502:	6001      	str	r1, [r0, #0]
  ch_priority_queue_t *p = pqp->next;
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	f881 c024 	strb.w	ip, [r1, #36]	; 0x24
  qp->prev      = p;
 800150a:	6051      	str	r1, [r2, #4]
  pqp->next       = p->next;
 800150c:	6802      	ldr	r2, [r0, #0]
 800150e:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 8001510:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8001512:	2201      	movs	r2, #1
 8001514:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8001518:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 800151a:	f7fe fed1 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 800151e:	e7da      	b.n	80014d6 <thread1.lto_priv.1+0x16>
 8001520:	20000dbc 	.word	0x20000dbc
 8001524:	20000b74 	.word	0x20000b74
 8001528:	20000a90 	.word	0x20000a90
 800152c:	00000000 	.word	0x00000000

08001530 <bmk_thread3>:
static THD_FUNCTION(bmk_thread3, p) {
 8001530:	b570      	push	{r4, r5, r6, lr}
 8001532:	2330      	movs	r3, #48	; 0x30
 8001534:	f383 8811 	msr	BASEPRI, r3
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <bmk_thread3+0x84>)
 800153a:	68d9      	ldr	r1, [r3, #12]
  return (bool)(lp->next != lp);
 800153c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  currtp->u.exitcode = msg;
 800153e:	6288      	str	r0, [r1, #40]	; 0x28
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8001540:	f101 0c2c 	add.w	ip, r1, #44	; 0x2c
 8001544:	4594      	cmp	ip, r2
  tp->state = CH_STATE_READY;
 8001546:	bf18      	it	ne
 8001548:	f04f 0e00 	movne.w	lr, #0
 800154c:	d113      	bne.n	8001576 <bmk_thread3+0x46>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 800154e:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 8001552:	b32a      	cbz	r2, 80015a0 <bmk_thread3+0x70>
  ch_priority_queue_t *p = pqp->next;
 8001554:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 8001556:	220f      	movs	r2, #15
 8001558:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pqp->next       = p->next;
 800155c:	6802      	ldr	r2, [r0, #0]
 800155e:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 8001560:	f04f 0c01 	mov.w	ip, #1
  pqp->next->prev = pqp;
 8001564:	6053      	str	r3, [r2, #4]
 8001566:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
}
 800156a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __instance_set_currthread(oip, ntp);
 800156e:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8001570:	f7fe bea6 	b.w	80002c0 <__port_switch>
 8001574:	4622      	mov	r2, r4
  lp->next = p->next;
 8001576:	6814      	ldr	r4, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001578:	6990      	ldr	r0, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800157a:	6896      	ldr	r6, [r2, #8]
  lp->next = p->next;
 800157c:	62cc      	str	r4, [r1, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 800157e:	f882 e024 	strb.w	lr, [r2, #36]	; 0x24
    pqp = pqp->next;
 8001582:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001584:	6885      	ldr	r5, [r0, #8]
 8001586:	42b5      	cmp	r5, r6
 8001588:	d2fb      	bcs.n	8001582 <bmk_thread3+0x52>
  p->prev       = pqp->prev;
 800158a:	6845      	ldr	r5, [r0, #4]
  p->next       = pqp;
 800158c:	6010      	str	r0, [r2, #0]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 800158e:	4564      	cmp	r4, ip
  p->prev       = pqp->prev;
 8001590:	6055      	str	r5, [r2, #4]
  p->prev->next = p;
 8001592:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 8001594:	6042      	str	r2, [r0, #4]
 8001596:	d1ed      	bne.n	8001574 <bmk_thread3+0x44>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8001598:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 800159c:	2a00      	cmp	r2, #0
 800159e:	d1d9      	bne.n	8001554 <bmk_thread3+0x24>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 80015a0:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
 80015a4:	0792      	lsls	r2, r2, #30
 80015a6:	d1d5      	bne.n	8001554 <bmk_thread3+0x24>
  p->prev->next = p->next;
 80015a8:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 80015ac:	6002      	str	r2, [r0, #0]
  p->next->prev = p->prev;
 80015ae:	6050      	str	r0, [r2, #4]
  return p;
 80015b0:	e7d0      	b.n	8001554 <bmk_thread3+0x24>
 80015b2:	bf00      	nop
 80015b4:	20000a90 	.word	0x20000a90
	...

080015c0 <bmk_thread4>:
static THD_FUNCTION(bmk_thread4, p) {
 80015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015c2:	4c0d      	ldr	r4, [pc, #52]	; (80015f8 <bmk_thread4+0x38>)
 80015c4:	2330      	movs	r3, #48	; 0x30
 80015c6:	68e7      	ldr	r7, [r4, #12]
 80015c8:	f383 8811 	msr	BASEPRI, r3
  otp->state = newstate;
 80015cc:	2603      	movs	r6, #3
  ntp->state = CH_STATE_CURRENT;
 80015ce:	2501      	movs	r5, #1
  thread_t *otp = __instance_get_currthread(oip);
 80015d0:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 80015d2:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80015d4:	f881 6024 	strb.w	r6, [r1, #36]	; 0x24
  pqp->next       = p->next;
 80015d8:	6803      	ldr	r3, [r0, #0]
 80015da:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 80015dc:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80015de:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 80015e2:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 80015e4:	f7fe fe6c 	bl	80002c0 <__port_switch>
  } while (msg == MSG_OK);
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <bmk_thread4+0x10>
 80015ee:	2300      	movs	r3, #0
 80015f0:	f383 8811 	msr	BASEPRI, r3
}
 80015f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000a90 	.word	0x20000a90
 80015fc:	00000000 	.word	0x00000000

08001600 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 8001600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001604:	4f17      	ldr	r7, [pc, #92]	; (8001664 <bmk_thread7+0x64>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8001606:	68fb      	ldr	r3, [r7, #12]
  while (!chThdShouldTerminateX())
 8001608:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800160c:	075a      	lsls	r2, r3, #29
 800160e:	d427      	bmi.n	8001660 <bmk_thread7+0x60>
 8001610:	4c15      	ldr	r4, [pc, #84]	; (8001668 <bmk_thread7+0x68>)
 8001612:	f04f 0830 	mov.w	r8, #48	; 0x30
  otp->state = newstate;
 8001616:	2605      	movs	r6, #5
  ntp->state = CH_STATE_CURRENT;
 8001618:	2501      	movs	r5, #1
 800161a:	e007      	b.n	800162c <bmk_thread7+0x2c>
 800161c:	2300      	movs	r3, #0
 800161e:	f383 8811 	msr	BASEPRI, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001628:	075b      	lsls	r3, r3, #29
 800162a:	d419      	bmi.n	8001660 <bmk_thread7+0x60>
 800162c:	f388 8811 	msr	BASEPRI, r8
  if (--sp->cnt < (cnt_t)0) {
 8001630:	68a3      	ldr	r3, [r4, #8]
 8001632:	3b01      	subs	r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	60a3      	str	r3, [r4, #8]
 8001638:	daf0      	bge.n	800161c <bmk_thread7+0x1c>
  return __sch_get_currthread();
 800163a:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 800163c:	6863      	ldr	r3, [r4, #4]
  ch_priority_queue_t *p = pqp->next;
 800163e:	6838      	ldr	r0, [r7, #0]
    currtp->u.wtsemp = sp;
 8001640:	628c      	str	r4, [r1, #40]	; 0x28
  p->prev       = qp->prev;
 8001642:	e9c1 4300 	strd	r4, r3, [r1]
  p->prev->next = p;
 8001646:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8001648:	f881 6024 	strb.w	r6, [r1, #36]	; 0x24
  pqp->next       = p->next;
 800164c:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 800164e:	6061      	str	r1, [r4, #4]
  pqp->next->prev = pqp;
 8001650:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8001652:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  pqp->next       = p->next;
 8001656:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 8001658:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 800165a:	f7fe fe31 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 800165e:	e7dd      	b.n	800161c <bmk_thread7+0x1c>
}
 8001660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001664:	20000a90 	.word	0x20000a90
 8001668:	20000dc8 	.word	0x20000dc8
 800166c:	00000000 	.word	0x00000000

08001670 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 8001670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001674:	4c1a      	ldr	r4, [pc, #104]	; (80016e0 <bmk_thread8+0x70>)
 8001676:	4605      	mov	r5, r0
 8001678:	2730      	movs	r7, #48	; 0x30
  ntp->state = CH_STATE_CURRENT;
 800167a:	f04f 0801 	mov.w	r8, #1
  tp->state = CH_STATE_READY;
 800167e:	2600      	movs	r6, #0
 8001680:	f387 8811 	msr	BASEPRI, r7
  thread_t *tp = __instance_get_currthread(oip);
 8001684:	68e1      	ldr	r1, [r4, #12]
  if (likely(firstprio(&oip->rlist.pqueue) >= tp->hdr.pqueue.prio)) {
 8001686:	6820      	ldr	r0, [r4, #0]
 8001688:	688a      	ldr	r2, [r1, #8]
 800168a:	6883      	ldr	r3, [r0, #8]
 800168c:	4293      	cmp	r3, r2
 800168e:	d314      	bcc.n	80016ba <bmk_thread8+0x4a>
 8001690:	6803      	ldr	r3, [r0, #0]
 8001692:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8001694:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8001696:	f880 8024 	strb.w	r8, [r0, #36]	; 0x24
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800169a:	698b      	ldr	r3, [r1, #24]
  __instance_set_currthread(oip, ntp);
 800169c:	60e0      	str	r0, [r4, #12]
  tp->state = CH_STATE_READY;
 800169e:	f881 6024 	strb.w	r6, [r1, #36]	; 0x24
    pqp = pqp->next;
 80016a2:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80016a4:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80016a8:	4562      	cmp	r2, ip
 80016aa:	d9fa      	bls.n	80016a2 <bmk_thread8+0x32>
  p->prev       = pqp->prev;
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 80016b2:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 80016b4:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 80016b6:	f7fe fe03 	bl	80002c0 <__port_switch>
 80016ba:	f386 8811 	msr	BASEPRI, r6
    chThdYield();
 80016be:	f7ff fe87 	bl	80013d0 <chThdYield>
    chThdYield();
 80016c2:	f7ff fe85 	bl	80013d0 <chThdYield>
    chThdYield();
 80016c6:	f7ff fe83 	bl	80013d0 <chThdYield>
    (*(uint32_t *)p) += 4;
 80016ca:	682b      	ldr	r3, [r5, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80016cc:	68e2      	ldr	r2, [r4, #12]
 80016ce:	3304      	adds	r3, #4
 80016d0:	602b      	str	r3, [r5, #0]
  } while(!chThdShouldTerminateX());
 80016d2:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80016d6:	075b      	lsls	r3, r3, #29
 80016d8:	d5d2      	bpl.n	8001680 <bmk_thread8+0x10>
}
 80016da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016de:	bf00      	nop
 80016e0:	20000a90 	.word	0x20000a90
	...

080016f0 <chDelegateCallVeneer>:
 * @param[in] veneer    pointer to the veneer function to be called
 * @param[in] ...       variable number of parameters
 * @return              The function return value casted to msg_t. It is
 *                      garbage for functions returning @p void.
 */
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 80016f0:	b40e      	push	{r1, r2, r3}
 80016f2:	b510      	push	{r4, lr}
 80016f4:	b085      	sub	sp, #20
 80016f6:	ab07      	add	r3, sp, #28

  va_start(args, veneer);

  /* Preparing the call message.*/
  cm.veneer = veneer;
  cm.argsp  = &args;
 80016f8:	aa01      	add	r2, sp, #4
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 80016fa:	f853 4b04 	ldr.w	r4, [r3], #4
  cm.argsp  = &args;
 80016fe:	9203      	str	r2, [sp, #12]
  (void)cm; /* Suppresses a lint warning.*/

  /* Sending the message to the dispatcher thread, the return value is
     contained in the returned message.*/
  msg = chMsgSend(tp, (msg_t)&cm);
 8001700:	a902      	add	r1, sp, #8
  cm.veneer = veneer;
 8001702:	e9cd 3401 	strd	r3, r4, [sp, #4]
  msg = chMsgSend(tp, (msg_t)&cm);
 8001706:	f7ff fe8b 	bl	8001420 <chMsgSend>

  va_end(args);

  return msg;
}
 800170a:	b005      	add	sp, #20
 800170c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001710:	b003      	add	sp, #12
 8001712:	4770      	bx	lr
	...

08001720 <rt_test_007_001_teardown.lto_priv.0>:
  chSemResetWithMessage(sp, n, MSG_RESET);
 8001720:	4801      	ldr	r0, [pc, #4]	; (8001728 <rt_test_007_001_teardown.lto_priv.0+0x8>)
 8001722:	2100      	movs	r1, #0
 8001724:	f011 bdf4 	b.w	8013310 <chSemResetWithMessage.constprop.0>
 8001728:	20000dbc 	.word	0x20000dbc
 800172c:	00000000 	.word	0x00000000

08001730 <oslib_test_002_003_teardown.lto_priv.0>:

static void oslib_test_002_003_teardown(void) {
  chMBReset(&mb1);
 8001730:	f011 bcf6 	b.w	8013120 <chMBReset.constprop.0>
	...

08001740 <oslib_test_002_001_teardown.lto_priv.0>:
 8001740:	f011 bcee 	b.w	8013120 <chMBReset.constprop.0>
	...

08001750 <oslib_test_002_002_teardown.lto_priv.0>:
 8001750:	f011 bce6 	b.w	8013120 <chMBReset.constprop.0>
	...

08001760 <oslib_test_003_002_execute.lto_priv.0>:

static void oslib_test_003_002_execute(void) {
 8001760:	b530      	push	{r4, r5, lr}
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8001762:	4c1d      	ldr	r4, [pc, #116]	; (80017d8 <oslib_test_003_002_execute.lto_priv.0+0x78>)

  /* [3.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 8001764:	4d1d      	ldr	r5, [pc, #116]	; (80017dc <oslib_test_003_002_execute.lto_priv.0+0x7c>)
 8001766:	7d23      	ldrb	r3, [r4, #20]
 8001768:	2201      	movs	r2, #1
static void oslib_test_003_002_execute(void) {
 800176a:	b085      	sub	sp, #20
  test_set_step(1);
 800176c:	602a      	str	r2, [r5, #0]
 800176e:	b153      	cbz	r3, 8001786 <oslib_test_003_002_execute.lto_priv.0+0x26>
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
    test_assert(n == 0, "wrong size");
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8001770:	6822      	ldr	r2, [r4, #0]
 8001772:	68e3      	ldr	r3, [r4, #12]
 8001774:	4293      	cmp	r3, r2
 8001776:	d00e      	beq.n	8001796 <oslib_test_003_002_execute.lto_priv.0+0x36>
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <oslib_test_003_002_execute.lto_priv.0+0x80>)
  chtest.failure_message = msg;
 800177a:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 800177c:	f240 1201 	movw	r2, #257	; 0x101
 8001780:	80aa      	strh	r2, [r5, #4]
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
  test_end_step(2);
}
 8001782:	b005      	add	sp, #20
 8001784:	bd30      	pop	{r4, r5, pc}
 8001786:	2110      	movs	r1, #16
 8001788:	4668      	mov	r0, sp
 800178a:	f011 feb9 	bl	8013500 <chPipeReadTimeout.part.0.constprop.0>
  if (!condition) {
 800178e:	2800      	cmp	r0, #0
 8001790:	d0ee      	beq.n	8001770 <oslib_test_003_002_execute.lto_priv.0+0x10>
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <oslib_test_003_002_execute.lto_priv.0+0x84>)
 8001794:	e7f1      	b.n	800177a <oslib_test_003_002_execute.lto_priv.0+0x1a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8001796:	68a2      	ldr	r2, [r4, #8]
 8001798:	4293      	cmp	r3, r2
 800179a:	d1ed      	bne.n	8001778 <oslib_test_003_002_execute.lto_priv.0+0x18>
 800179c:	6923      	ldr	r3, [r4, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1ea      	bne.n	8001778 <oslib_test_003_002_execute.lto_priv.0+0x18>
  if (pp->reset) {
 80017a2:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(2);
 80017a4:	2202      	movs	r2, #2
 80017a6:	602a      	str	r2, [r5, #0]
 80017a8:	b97b      	cbnz	r3, 80017ca <oslib_test_003_002_execute.lto_priv.0+0x6a>
 80017aa:	2010      	movs	r0, #16
 80017ac:	f011 ff18 	bl	80135e0 <chPipeWriteTimeout.part.0.constprop.0>
 80017b0:	2808      	cmp	r0, #8
 80017b2:	d10a      	bne.n	80017ca <oslib_test_003_002_execute.lto_priv.0+0x6a>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80017b4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d1dd      	bne.n	8001778 <oslib_test_003_002_execute.lto_priv.0+0x18>
 80017bc:	6822      	ldr	r2, [r4, #0]
 80017be:	4293      	cmp	r3, r2
 80017c0:	d1da      	bne.n	8001778 <oslib_test_003_002_execute.lto_priv.0+0x18>
 80017c2:	6923      	ldr	r3, [r4, #16]
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d1d7      	bne.n	8001778 <oslib_test_003_002_execute.lto_priv.0+0x18>
 80017c8:	e7db      	b.n	8001782 <oslib_test_003_002_execute.lto_priv.0+0x22>
  chtest.failure_message = msg;
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <oslib_test_003_002_execute.lto_priv.0+0x84>)
 80017cc:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80017ce:	f240 1201 	movw	r2, #257	; 0x101
 80017d2:	80aa      	strh	r2, [r5, #4]
}
 80017d4:	b005      	add	sp, #20
 80017d6:	bd30      	pop	{r4, r5, pc}
 80017d8:	20000884 	.word	0x20000884
 80017dc:	20000b74 	.word	0x20000b74
 80017e0:	08014fc4 	.word	0x08014fc4
 80017e4:	08014fd8 	.word	0x08014fd8
	...

080017f0 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
	...

08001800 <__late_init>:
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
	...

08001810 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8001810:	e7fe      	b.n	8001810 <__default_exit>
 8001812:	bf00      	nop
	...

08001820 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001822:	4d15      	ldr	r5, [pc, #84]	; (8001878 <__init_ram_areas+0x58>)
 8001824:	4f15      	ldr	r7, [pc, #84]	; (800187c <__init_ram_areas+0x5c>)
 8001826:	4916      	ldr	r1, [pc, #88]	; (8001880 <__init_ram_areas+0x60>)
 8001828:	4816      	ldr	r0, [pc, #88]	; (8001884 <__init_ram_areas+0x64>)
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <__init_ram_areas+0x68>)
 800182c:	f105 0470 	add.w	r4, r5, #112	; 0x70
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001830:	4281      	cmp	r1, r0
 8001832:	d90d      	bls.n	8001850 <__init_ram_areas+0x30>
 8001834:	3a04      	subs	r2, #4
 8001836:	4603      	mov	r3, r0
      *p = *tp;
 8001838:	f852 6f04 	ldr.w	r6, [r2, #4]!
 800183c:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8001840:	4299      	cmp	r1, r3
 8001842:	d8f9      	bhi.n	8001838 <__init_ram_areas+0x18>
      p++;
 8001844:	1e4b      	subs	r3, r1, #1
 8001846:	1a1b      	subs	r3, r3, r0
 8001848:	f023 0303 	bic.w	r3, r3, #3
 800184c:	3304      	adds	r3, #4
 800184e:	4418      	add	r0, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001850:	4287      	cmp	r7, r0
 8001852:	d907      	bls.n	8001864 <__init_ram_areas+0x44>
      *p = 0;
 8001854:	1e7a      	subs	r2, r7, #1
 8001856:	1a12      	subs	r2, r2, r0
 8001858:	f022 0203 	bic.w	r2, r2, #3
 800185c:	3204      	adds	r2, #4
 800185e:	2100      	movs	r1, #0
 8001860:	f013 f9c4 	bl	8014bec <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8001864:	42a5      	cmp	r5, r4
 8001866:	d005      	beq.n	8001874 <__init_ram_areas+0x54>
    uint32_t *p = rap->init_area;
 8001868:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    while (p < rap->no_init_area) {
 800186c:	e9d5 1706 	ldrd	r1, r7, [r5, #24]
 8001870:	3510      	adds	r5, #16
 8001872:	e7dd      	b.n	8001830 <__init_ram_areas+0x10>
#endif
}
 8001874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001876:	bf00      	nop
 8001878:	0801616c 	.word	0x0801616c
 800187c:	20018350 	.word	0x20018350
 8001880:	20018350 	.word	0x20018350
 8001884:	20018350 	.word	0x20018350
 8001888:	0801f108 	.word	0x0801f108
 800188c:	00000000 	.word	0x00000000

08001890 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8001890:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART1
  sd_lld_serve_interrupt(&SD1);
 8001892:	4810      	ldr	r0, [pc, #64]	; (80018d4 <VectorD4+0x44>)
 8001894:	f7ff fcac 	bl	80011f0 <sd_lld_serve_interrupt>
 8001898:	2330      	movs	r3, #48	; 0x30
 800189a:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <VectorD4+0x48>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80018a6:	d102      	bne.n	80018ae <VectorD4+0x1e>
 80018a8:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD1);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 80018ac:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80018ae:	f3ef 8309 	mrs	r3, PSP
    s_psp = __get_PSP();
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 80018b2:	3b20      	subs	r3, #32

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 80018b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018b8:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80018ba:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80018be:	4a07      	ldr	r2, [pc, #28]	; (80018dc <VectorD4+0x4c>)
 80018c0:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 80018c2:	68d2      	ldr	r2, [r2, #12]
    /* Writing back the modified S-PSP value.*/
    __set_PSP(s_psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80018c4:	6889      	ldr	r1, [r1, #8]
 80018c6:	6892      	ldr	r2, [r2, #8]
 80018c8:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80018ca:	bf8c      	ite	hi
 80018cc:	4a04      	ldrhi	r2, [pc, #16]	; (80018e0 <VectorD4+0x50>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80018ce:	4a05      	ldrls	r2, [pc, #20]	; (80018e4 <VectorD4+0x54>)
 80018d0:	619a      	str	r2, [r3, #24]
 80018d2:	bd08      	pop	{r3, pc}
 80018d4:	20000938 	.word	0x20000938
 80018d8:	e000ed00 	.word	0xe000ed00
 80018dc:	20000a90 	.word	0x20000a90
 80018e0:	080002e3 	.word	0x080002e3
 80018e4:	080002e6 	.word	0x080002e6
	...

080018f0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80018f0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART2
  sd_lld_serve_interrupt(&SD2);
 80018f2:	4810      	ldr	r0, [pc, #64]	; (8001934 <VectorD8+0x44>)
 80018f4:	f7ff fc7c 	bl	80011f0 <sd_lld_serve_interrupt>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80018f8:	2330      	movs	r3, #48	; 0x30
 80018fa:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <VectorD8+0x48>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001906:	d102      	bne.n	800190e <VectorD8+0x1e>
 8001908:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 800190c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800190e:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 8001912:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001918:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800191a:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 800191e:	4a07      	ldr	r2, [pc, #28]	; (800193c <VectorD8+0x4c>)
 8001920:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8001922:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8001924:	6889      	ldr	r1, [r1, #8]
 8001926:	6892      	ldr	r2, [r2, #8]
 8001928:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800192a:	bf8c      	ite	hi
 800192c:	4a04      	ldrhi	r2, [pc, #16]	; (8001940 <VectorD8+0x50>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 800192e:	4a05      	ldrls	r2, [pc, #20]	; (8001944 <VectorD8+0x54>)
 8001930:	619a      	str	r2, [r3, #24]
 8001932:	bd08      	pop	{r3, pc}
 8001934:	200009b8 	.word	0x200009b8
 8001938:	e000ed00 	.word	0xe000ed00
 800193c:	20000a90 	.word	0x20000a90
 8001940:	080002e3 	.word	0x080002e3
 8001944:	080002e6 	.word	0x080002e6
	...

08001950 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8001950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8001954:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8001958:	6933      	ldr	r3, [r6, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 800195a:	68f2      	ldr	r2, [r6, #12]
 800195c:	4013      	ands	r3, r2
 800195e:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8001960:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8001962:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8001964:	6132      	str	r2, [r6, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8001966:	d40b      	bmi.n	8001980 <VectorB0+0x30>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001968:	2330      	movs	r3, #48	; 0x30
 800196a:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800196e:	4b4e      	ldr	r3, [pc, #312]	; (8001aa8 <VectorB0+0x158>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001976:	d15e      	bne.n	8001a36 <VectorB0+0xe6>
 8001978:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 800197c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001980:	2330      	movs	r3, #48	; 0x30
 8001982:	f383 8811 	msr	BASEPRI, r3
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
 8001986:	4d49      	ldr	r5, [pc, #292]	; (8001aac <VectorB0+0x15c>)
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
    vtlp->lasttime = lasttime;

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
    vtp->dlist.next = NULL;
 8001988:	f04f 0a00 	mov.w	sl, #0
 800198c:	f105 0710 	add.w	r7, r5, #16
 8001990:	f04f 0830 	mov.w	r8, #48	; 0x30
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8001994:	692c      	ldr	r4, [r5, #16]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8001996:	69ea      	ldr	r2, [r5, #28]
 8001998:	6a71      	ldr	r1, [r6, #36]	; 0x24
    if (nowdelta < vtp->dlist.delta) {
 800199a:	68a3      	ldr	r3, [r4, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800199c:	1a88      	subs	r0, r1, r2
 800199e:	4298      	cmp	r0, r3
  return systime + (systime_t)interval;
 80019a0:	eb02 0903 	add.w	r9, r2, r3
 80019a4:	d334      	bcc.n	8001a10 <VectorB0+0xc0>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 80019a6:	e9d4 3200 	ldrd	r3, r2, [r4]
    vtlp->lasttime = lasttime;
 80019aa:	f8c5 901c 	str.w	r9, [r5, #28]
 80019ae:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 80019b0:	605a      	str	r2, [r3, #4]
    vtp->dlist.next = NULL;
 80019b2:	f8c4 a000 	str.w	sl, [r4]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80019b6:	692b      	ldr	r3, [r5, #16]
 80019b8:	42bb      	cmp	r3, r7
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
 80019ba:	bf08      	it	eq
 80019bc:	f8c6 a00c 	streq.w	sl, [r6, #12]
 80019c0:	f38a 8811 	msr	BASEPRI, sl
    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();

    vtp->func(vtp, vtp->par);
 80019c4:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 80019c8:	4620      	mov	r0, r4
 80019ca:	4798      	blx	r3
 80019cc:	f388 8811 	msr	BASEPRI, r8

    chSysLockFromISR();

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 80019d0:	6963      	ldr	r3, [r4, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0de      	beq.n	8001994 <VectorB0+0x44>
  return (systime_t)STM32_ST_TIM->CNT;
 80019d6:	6a71      	ldr	r1, [r6, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80019d8:	eba1 0009 	sub.w	r0, r1, r9
      now = chVTGetSystemTimeX();
      nowdelta = chTimeDiffX(lasttime, now);

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 80019dc:	4283      	cmp	r3, r0
 80019de:	d33e      	bcc.n	8001a5e <VectorB0+0x10e>
  return (bool)(dlhp == dlhp->next);
 80019e0:	692a      	ldr	r2, [r5, #16]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 80019e2:	42ba      	cmp	r2, r7
 80019e4:	d055      	beq.n	8001a92 <VectorB0+0x142>
  while (likely(dlp->delta < delta)) {
 80019e6:	6891      	ldr	r1, [r2, #8]
 80019e8:	428b      	cmp	r3, r1
 80019ea:	d904      	bls.n	80019f6 <VectorB0+0xa6>
    dlp = dlp->next;
 80019ec:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 80019ee:	1a5b      	subs	r3, r3, r1
  while (likely(dlp->delta < delta)) {
 80019f0:	6891      	ldr	r1, [r2, #8]
 80019f2:	4299      	cmp	r1, r3
 80019f4:	d3fa      	bcc.n	80019ec <VectorB0+0x9c>
  dlp->delta      = delta;
 80019f6:	60a3      	str	r3, [r4, #8]
  dlp->delta -= delta;
 80019f8:	6891      	ldr	r1, [r2, #8]
  dlp->next       = dlhp;
 80019fa:	6022      	str	r2, [r4, #0]
  dlp->delta -= delta;
 80019fc:	1ac9      	subs	r1, r1, r3
  dlp->prev       = dlp->next->prev;
 80019fe:	6853      	ldr	r3, [r2, #4]
 8001a00:	6063      	str	r3, [r4, #4]
  dlp->prev->next = dlp;
 8001a02:	601c      	str	r4, [r3, #0]
  dlhp->delta = (sysinterval_t)-1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
  dlp->delta -= delta;
 8001a08:	e9c2 4101 	strd	r4, r1, [r2, #4]
  dlhp->delta = (sysinterval_t)-1;
 8001a0c:	61ab      	str	r3, [r5, #24]
}
 8001a0e:	e7bf      	b.n	8001990 <VectorB0+0x40>
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8001a10:	42bc      	cmp	r4, r7
 8001a12:	d00c      	beq.n	8001a2e <VectorB0+0xde>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  vtp->dlist.delta -= nowdelta;
 8001a14:	1a5b      	subs	r3, r3, r1
 8001a16:	4413      	add	r3, r2
 8001a18:	2b02      	cmp	r3, #2
  vtlp->lasttime += nowdelta;
 8001a1a:	61e9      	str	r1, [r5, #28]
  vtp->dlist.delta -= nowdelta;
 8001a1c:	60a3      	str	r3, [r4, #8]
  if (delay < currdelta) {
 8001a1e:	bf38      	it	cc
 8001a20:	2302      	movcc	r3, #2
  return systime + (systime_t)interval;
 8001a22:	18ca      	adds	r2, r1, r3
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001a24:	6372      	str	r2, [r6, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001a26:	6a72      	ldr	r2, [r6, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001a28:	1a51      	subs	r1, r2, r1
    if (likely(nowdelta < delay)) {
 8001a2a:	428b      	cmp	r3, r1
 8001a2c:	d920      	bls.n	8001a70 <VectorB0+0x120>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f383 8811 	msr	BASEPRI, r3
}
 8001a34:	e798      	b.n	8001968 <VectorB0+0x18>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001a36:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 8001a3a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a40:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001a42:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8001a46:	4a19      	ldr	r2, [pc, #100]	; (8001aac <VectorB0+0x15c>)
 8001a48:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8001a4a:	68d2      	ldr	r2, [r2, #12]
    if (chSchIsPreemptionRequired()) {
 8001a4c:	6889      	ldr	r1, [r1, #8]
 8001a4e:	6892      	ldr	r2, [r2, #8]
 8001a50:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8001a52:	bf8c      	ite	hi
 8001a54:	4a16      	ldrhi	r2, [pc, #88]	; (8001ab0 <VectorB0+0x160>)
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8001a56:	4a17      	ldrls	r2, [pc, #92]	; (8001ab4 <VectorB0+0x164>)
 8001a58:	619a      	str	r2, [r3, #24]
 8001a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 8001a5e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  return (bool)(dlhp == dlhp->next);
 8001a60:	692a      	ldr	r2, [r5, #16]
 8001a62:	f043 0302 	orr.w	r3, r3, #2
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8001a66:	42ba      	cmp	r2, r7
 8001a68:	636b      	str	r3, [r5, #52]	; 0x34
 8001a6a:	d019      	beq.n	8001aa0 <VectorB0+0x150>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	e7ba      	b.n	80019e6 <VectorB0+0x96>
    if (likely(nowdelta < delay)) {
 8001a70:	2302      	movs	r3, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001a72:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    currdelta += (sysinterval_t)1;
 8001a76:	3301      	adds	r3, #1
  return systime + (systime_t)interval;
 8001a78:	18d0      	adds	r0, r2, r3
 8001a7a:	6348      	str	r0, [r1, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001a7c:	6a48      	ldr	r0, [r1, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001a7e:	1a82      	subs	r2, r0, r2
    if (likely(nowdelta < delay)) {
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d20f      	bcs.n	8001aa4 <VectorB0+0x154>
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d9d2      	bls.n	8001a2e <VectorB0+0xde>
 8001a88:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	636b      	str	r3, [r5, #52]	; 0x34
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
 8001a90:	e7cd      	b.n	8001a2e <VectorB0+0xde>
        delay = vtp->reload - nowdelta;
 8001a92:	1a5b      	subs	r3, r3, r1
 8001a94:	eb03 0209 	add.w	r2, r3, r9
        vt_insert_first(vtlp, vtp, now, delay);
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f011 fcb1 	bl	8013400 <vt_insert_first.constprop.0>
        return;
 8001a9e:	e7c6      	b.n	8001a2e <VectorB0+0xde>
        delay = (sysinterval_t)0;
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	e7f9      	b.n	8001a98 <VectorB0+0x148>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	e7e6      	b.n	8001a76 <VectorB0+0x126>
 8001aa8:	e000ed00 	.word	0xe000ed00
 8001aac:	20000a90 	.word	0x20000a90
 8001ab0:	080002e3 	.word	0x080002e3
 8001ab4:	080002e6 	.word	0x080002e6
	...

08001ac0 <usart_init.lto_priv.0>:
  USART_TypeDef *u = sdp->usart;
 8001ac0:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	; 0x74
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 8001ac4:	b510      	push	{r4, lr}
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 8001ac6:	680c      	ldr	r4, [r1, #0]
  if (config->cr1 & USART_CR1_OVER8)
 8001ac8:	f8b1 c004 	ldrh.w	ip, [r1, #4]
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 8001acc:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8001ad0:	fbb3 f3f4 	udiv	r3, r3, r4
  if (config->cr1 & USART_CR1_OVER8)
 8001ad4:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8001ad8:	2c00      	cmp	r4, #0
 8001ada:	da05      	bge.n	8001ae8 <usart_init.lto_priv.0+0x28>
    brr = ((brr & ~7) * 2) | (brr & 7);
 8001adc:	f023 0407 	bic.w	r4, r3, #7
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
  u->BRR = brr;
 8001ae8:	6093      	str	r3, [r2, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001aea:	f8b1 e006 	ldrh.w	lr, [r1, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001aee:	890b      	ldrh	r3, [r1, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001af0:	f04e 0140 	orr.w	r1, lr, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001af4:	f043 0301 	orr.w	r3, r3, #1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001af8:	6111      	str	r1, [r2, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001afa:	6153      	str	r3, [r2, #20]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001afc:	f44c 5304 	orr.w	r3, ip, #8448	; 0x2100
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8001b00:	f40c 5ca0 	and.w	ip, ip, #5120	; 0x1400
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001b04:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
  u->SR = 0;
 8001b08:	2100      	movs	r1, #0
    sdp->rxmask = 0xFF;
 8001b0a:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001b0e:	60d3      	str	r3, [r2, #12]
  u->SR = 0;
 8001b10:	6011      	str	r1, [r2, #0]
    sdp->rxmask = 0xFF;
 8001b12:	bf0c      	ite	eq
 8001b14:	237f      	moveq	r3, #127	; 0x7f
 8001b16:	23ff      	movne	r3, #255	; 0xff
  (void)u->SR;  /* SR reset step 1.*/
 8001b18:	6811      	ldr	r1, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8001b1a:	6852      	ldr	r2, [r2, #4]
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8001b1c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
}
 8001b20:	bd10      	pop	{r4, pc}
 8001b22:	bf00      	nop
	...

08001b30 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001b30:	4a88      	ldr	r2, [pc, #544]	; (8001d54 <__early_init+0x224>)
  gpiop->OTYPER  = config->otyper;
 8001b32:	4889      	ldr	r0, [pc, #548]	; (8001d58 <__early_init+0x228>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001b34:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8001b36:	f8df c224 	ldr.w	ip, [pc, #548]	; 8001d5c <__early_init+0x22c>
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8001b3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001b3e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001b42:	4323      	orrs	r3, r4
 8001b44:	6113      	str	r3, [r2, #16]
 8001b46:	6911      	ldr	r1, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8001b48:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8001d60 <__early_init+0x230>
  gpiop->PUPDR   = config->pupdr;
 8001b4c:	f8df a214 	ldr.w	sl, [pc, #532]	; 8001d64 <__early_init+0x234>
  gpiop->OTYPER  = config->otyper;
 8001b50:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8001d68 <__early_init+0x238>
 8001b54:	f8df e214 	ldr.w	lr, [pc, #532]	; 8001d6c <__early_init+0x23c>
 8001b58:	4f85      	ldr	r7, [pc, #532]	; (8001d70 <__early_init+0x240>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001b5a:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 8001b5e:	f021 0101 	bic.w	r1, r1, #1
 8001b62:	6111      	str	r1, [r2, #16]
 8001b64:	6911      	ldr	r1, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001b66:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001b68:	4321      	orrs	r1, r4
 8001b6a:	6311      	str	r1, [r2, #48]	; 0x30
 8001b6c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8001b6e:	4321      	orrs	r1, r4
  gpiop->OTYPER  = config->otyper;
 8001b70:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001b72:	6511      	str	r1, [r2, #80]	; 0x50
  gpiop->PUPDR   = config->pupdr;
 8001b74:	4c7f      	ldr	r4, [pc, #508]	; (8001d74 <__early_init+0x244>)
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001b76:	6d16      	ldr	r6, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8001b78:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001b7a:	f46f 45a8 	mvn.w	r5, #21504	; 0x5400
 8001b7e:	6085      	str	r5, [r0, #8]
  gpiop->ODR     = config->odr;
 8001b80:	f64f 71ff 	movw	r1, #65535	; 0xffff
  gpiop->PUPDR   = config->pupdr;
 8001b84:	60c4      	str	r4, [r0, #12]
  gpiop->AFRL    = config->afrl;
 8001b86:	4c7c      	ldr	r4, [pc, #496]	; (8001d78 <__early_init+0x248>)
  gpiop->ODR     = config->odr;
 8001b88:	6141      	str	r1, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8001b8a:	6204      	str	r4, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8001b8c:	4c7b      	ldr	r4, [pc, #492]	; (8001d7c <__early_init+0x24c>)
 8001b8e:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001b90:	f104 542a 	add.w	r4, r4, #713031680	; 0x2a800000
 8001b94:	f504 14b0 	add.w	r4, r4, #1441792	; 0x160000
 8001b98:	6004      	str	r4, [r0, #0]
  gpiop->OTYPER  = config->otyper;
 8001b9a:	f44f 7010 	mov.w	r0, #576	; 0x240
 8001b9e:	f8c9 0004 	str.w	r0, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba6:	f8c9 0008 	str.w	r0, [r9, #8]
  gpiop->PUPDR   = config->pupdr;
 8001baa:	f8c9 a00c 	str.w	sl, [r9, #12]
  gpiop->AFRL    = config->afrl;
 8001bae:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
  gpiop->ODR     = config->odr;
 8001bb2:	f8c9 1014 	str.w	r1, [r9, #20]
  gpiop->AFRH    = config->afrh;
 8001bb6:	f04f 0b40 	mov.w	fp, #64	; 0x40
  gpiop->AFRL    = config->afrl;
 8001bba:	f8c9 a020 	str.w	sl, [r9, #32]
  gpiop->MODER   = config->moder;
 8001bbe:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8001d80 <__early_init+0x250>
  gpiop->AFRH    = config->afrh;
 8001bc2:	f8c9 b024 	str.w	fp, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001bc6:	f8c9 a000 	str.w	sl, [r9]
  gpiop->PUPDR   = config->pupdr;
 8001bca:	f109 59a2 	add.w	r9, r9, #339738624	; 0x14400000
 8001bce:	f509 3944 	add.w	r9, r9, #200704	; 0x31000
 8001bd2:	f509 79aa 	add.w	r9, r9, #340	; 0x154
  gpiop->OTYPER  = config->otyper;
 8001bd6:	f8c8 3004 	str.w	r3, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001bda:	f8c8 0008 	str.w	r0, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
 8001bde:	f8c8 900c 	str.w	r9, [r8, #12]
  gpiop->AFRL    = config->afrl;
 8001be2:	f04f 49c0 	mov.w	r9, #1610612736	; 0x60000000
  gpiop->ODR     = config->odr;
 8001be6:	f8c8 1014 	str.w	r1, [r8, #20]
  gpiop->AFRL    = config->afrl;
 8001bea:	f8c8 9020 	str.w	r9, [r8, #32]
  gpiop->AFRH    = config->afrh;
 8001bee:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8001d84 <__early_init+0x254>
 8001bf2:	f8c8 9024 	str.w	r9, [r8, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001bf6:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8001d88 <__early_init+0x258>
 8001bfa:	f8c8 9000 	str.w	r9, [r8]
  gpiop->PUPDR   = config->pupdr;
 8001bfe:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8001d8c <__early_init+0x25c>
  gpiop->OTYPER  = config->otyper;
 8001c02:	f8ce 3004 	str.w	r3, [lr, #4]
 8001c06:	4e62      	ldr	r6, [pc, #392]	; (8001d90 <__early_init+0x260>)
  gpiop->OSPEEDR = config->ospeedr;
 8001c08:	f8ce 0008 	str.w	r0, [lr, #8]
  gpiop->OTYPER  = config->otyper;
 8001c0c:	4d61      	ldr	r5, [pc, #388]	; (8001d94 <__early_init+0x264>)
  gpiop->PUPDR   = config->pupdr;
 8001c0e:	f8ce 800c 	str.w	r8, [lr, #12]
  gpiop->OTYPER  = config->otyper;
 8001c12:	4c61      	ldr	r4, [pc, #388]	; (8001d98 <__early_init+0x268>)
  gpiop->ODR     = config->odr;
 8001c14:	f640 78ff 	movw	r8, #4095	; 0xfff
 8001c18:	f8ce 8014 	str.w	r8, [lr, #20]
  gpiop->MODER   = config->moder;
 8001c1c:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8001d9c <__early_init+0x26c>
  gpiop->AFRL    = config->afrl;
 8001c20:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8001c24:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c28:	f8ce 8000 	str.w	r8, [lr]
  gpiop->OTYPER  = config->otyper;
 8001c2c:	f8cc 3004 	str.w	r3, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c30:	f8cc 0008 	str.w	r0, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c34:	f8cc 300c 	str.w	r3, [ip, #12]
  gpiop->ODR     = config->odr;
 8001c38:	f8cc 1014 	str.w	r1, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8001c3c:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8001c40:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c44:	f8cc b000 	str.w	fp, [ip]
  gpiop->OTYPER  = config->otyper;
 8001c48:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c4a:	60b8      	str	r0, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c4c:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 8001c4e:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8001c50:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c54:	603b      	str	r3, [r7, #0]
  gpiop->OTYPER  = config->otyper;
 8001c56:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c58:	60b0      	str	r0, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c5a:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 8001c5c:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8001c5e:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8001c60:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c62:	6033      	str	r3, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 8001c64:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c66:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c68:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
 8001c6a:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8001c6c:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8001c6e:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c70:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 8001c72:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c74:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c76:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 8001c78:	6161      	str	r1, [r4, #20]
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001c7a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  gpiop->AFRL    = config->afrl;
 8001c7e:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8001c80:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c82:	6023      	str	r3, [r4, #0]
 8001c84:	6411      	str	r1, [r2, #64]	; 0x40
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001c86:	4946      	ldr	r1, [pc, #280]	; (8001da0 <__early_init+0x270>)
 8001c88:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c8c:	600b      	str	r3, [r1, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001c96:	6813      	ldr	r3, [r2, #0]
 8001c98:	079d      	lsls	r5, r3, #30
 8001c9a:	d5fc      	bpl.n	8001c96 <__early_init+0x166>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001c9c:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001c9e:	492d      	ldr	r1, [pc, #180]	; (8001d54 <__early_init+0x224>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001ca0:	f023 0303 	bic.w	r3, r3, #3
 8001ca4:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001ca6:	688b      	ldr	r3, [r1, #8]
 8001ca8:	f013 030c 	ands.w	r3, r3, #12
 8001cac:	d1fb      	bne.n	8001ca6 <__early_init+0x176>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001cae:	680a      	ldr	r2, [r1, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001cb0:	4828      	ldr	r0, [pc, #160]	; (8001d54 <__early_init+0x224>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001cb2:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 8001cb6:	600a      	str	r2, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001cb8:	608b      	str	r3, [r1, #8]
  RCC->CR |= RCC_CR_HSEON;
 8001cba:	680b      	ldr	r3, [r1, #0]
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001cc2:	6803      	ldr	r3, [r0, #0]
 8001cc4:	039c      	lsls	r4, r3, #14
 8001cc6:	d5fc      	bpl.n	8001cc2 <__early_init+0x192>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001cc8:	6f43      	ldr	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001cca:	4a22      	ldr	r2, [pc, #136]	; (8001d54 <__early_init+0x224>)
  RCC->CSR |= RCC_CSR_LSION;
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6743      	str	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001cd2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001cd4:	0799      	lsls	r1, r3, #30
 8001cd6:	d5fc      	bpl.n	8001cd2 <__early_init+0x1a2>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001cd8:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <__early_init+0x274>)
 8001cda:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001cdc:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001cde:	4930      	ldr	r1, [pc, #192]	; (8001da0 <__early_init+0x270>)
  RCC->CR |= RCC_CR_PLLON;
 8001ce0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce4:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001ce6:	684b      	ldr	r3, [r1, #4]
 8001ce8:	045a      	lsls	r2, r3, #17
 8001cea:	d5fc      	bpl.n	8001ce6 <__early_init+0x1b6>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <__early_init+0x224>)
 8001cee:	6813      	ldr	r3, [r2, #0]
 8001cf0:	019b      	lsls	r3, r3, #6
 8001cf2:	d5fc      	bpl.n	8001cee <__early_init+0x1be>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001cf4:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <__early_init+0x278>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001cf6:	492d      	ldr	r1, [pc, #180]	; (8001dac <__early_init+0x27c>)
 8001cf8:	6091      	str	r1, [r2, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <__early_init+0x280>)
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d01e      	beq.n	8001d40 <__early_init+0x210>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001d02:	4b2c      	ldr	r3, [pc, #176]	; (8001db4 <__early_init+0x284>)
 8001d04:	f240 7205 	movw	r2, #1797	; 0x705
 8001d08:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8001d0a:	4a2a      	ldr	r2, [pc, #168]	; (8001db4 <__early_init+0x284>)
 8001d0c:	6813      	ldr	r3, [r2, #0]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	2b05      	cmp	r3, #5
 8001d14:	d1fa      	bne.n	8001d0c <__early_init+0x1dc>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001d16:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <__early_init+0x224>)
 8001d18:	6893      	ldr	r3, [r2, #8]
 8001d1a:	f043 0302 	orr.w	r3, r3, #2
 8001d1e:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001d20:	6893      	ldr	r3, [r2, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d1fa      	bne.n	8001d20 <__early_init+0x1f0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8001d2a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d38:	6653      	str	r3, [r2, #100]	; 0x64
 8001d3a:	6e53      	ldr	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8001d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001d40:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <__early_init+0x288>)
 8001d42:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <__early_init+0x28c>)
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d1db      	bne.n	8001d02 <__early_init+0x1d2>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <__early_init+0x284>)
 8001d4c:	f240 1205 	movw	r2, #261	; 0x105
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e7da      	b.n	8001d0a <__early_init+0x1da>
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40020400 	.word	0x40020400
 8001d64:	55514515 	.word	0x55514515
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020c00 	.word	0x40020c00
 8001d70:	40021400 	.word	0x40021400
 8001d74:	40010054 	.word	0x40010054
 8001d78:	55560000 	.word	0x55560000
 8001d7c:	000aaa00 	.word	0x000aaa00
 8001d80:	00082080 	.word	0x00082080
 8001d84:	00060600 	.word	0x00060600
 8001d88:	02208001 	.word	0x02208001
 8001d8c:	00555055 	.word	0x00555055
 8001d90:	40021800 	.word	0x40021800
 8001d94:	40021c00 	.word	0x40021c00
 8001d98:	40022000 	.word	0x40022000
 8001d9c:	55000100 	.word	0x55000100
 8001da0:	40007000 	.word	0x40007000
 8001da4:	07405408 	.word	0x07405408
 8001da8:	e0042000 	.word	0xe0042000
 8001dac:	38889400 	.word	0x38889400
 8001db0:	20006411 	.word	0x20006411
 8001db4:	40023c00 	.word	0x40023c00
 8001db8:	e000ed00 	.word	0xe000ed00
 8001dbc:	410fc241 	.word	0x410fc241

08001dc0 <chVTDoResetI>:
  return (bool)(dlhp->next == dlp);
 8001dc0:	4927      	ldr	r1, [pc, #156]	; (8001e60 <chVTDoResetI+0xa0>)
 8001dc2:	690b      	ldr	r3, [r1, #16]
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 8001dc4:	4298      	cmp	r0, r3
void chVTDoResetI(virtual_timer_t *vtp) {
 8001dc6:	b430      	push	{r4, r5}
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 8001dc8:	d00e      	beq.n	8001de8 <chVTDoResetI+0x28>
  dlp->prev->next = dlp->next;
 8001dca:	6803      	ldr	r3, [r0, #0]
    vtp->dlist.next->delta += vtp->dlist.delta;
 8001dcc:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	6023      	str	r3, [r4, #0]
 8001dd4:	442a      	add	r2, r5
 8001dd6:	e9c3 4201 	strd	r4, r2, [r3, #4]
    vtp->dlist.next = NULL;
 8001dda:	2200      	movs	r2, #0
    vtlp->dlist.delta = (sysinterval_t)-1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
    vtp->dlist.next = NULL;
 8001de0:	6002      	str	r2, [r0, #0]
    vtlp->dlist.delta = (sysinterval_t)-1;
 8001de2:	618b      	str	r3, [r1, #24]
}
 8001de4:	bc30      	pop	{r4, r5}
 8001de6:	4770      	bx	lr
  dlhp->next       = dlp->next;
 8001de8:	460b      	mov	r3, r1
 8001dea:	6802      	ldr	r2, [r0, #0]
 8001dec:	f843 2f10 	str.w	r2, [r3, #16]!
  vtp->dlist.next = NULL;
 8001df0:	2500      	movs	r5, #0
  dlhp->next->prev = dlhp;
 8001df2:	6053      	str	r3, [r2, #4]
 8001df4:	6005      	str	r5, [r0, #0]
  return (bool)(dlhp == dlhp->next);
 8001df6:	690c      	ldr	r4, [r1, #16]
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8001df8:	429c      	cmp	r4, r3
 8001dfa:	d02a      	beq.n	8001e52 <chVTDoResetI+0x92>
  vtlp->dlist.next->delta += vtp->dlist.delta;
 8001dfc:	6883      	ldr	r3, [r0, #8]
 8001dfe:	68a2      	ldr	r2, [r4, #8]
 8001e00:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8001e04:	441a      	add	r2, r3
 8001e06:	60a2      	str	r2, [r4, #8]
 8001e08:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
  nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8001e0c:	69cb      	ldr	r3, [r1, #28]
 8001e0e:	1ac4      	subs	r4, r0, r3
  if (nowdelta >= vtlp->dlist.next->delta) {
 8001e10:	42a2      	cmp	r2, r4
 8001e12:	d9e7      	bls.n	8001de4 <chVTDoResetI+0x24>
  delta = vtlp->dlist.next->delta - nowdelta;
 8001e14:	1a1b      	subs	r3, r3, r0
 8001e16:	4413      	add	r3, r2
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	bf38      	it	cc
 8001e1c:	2302      	movcc	r3, #2
  return systime + (systime_t)interval;
 8001e1e:	18c2      	adds	r2, r0, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001e20:	f8cc 2034 	str.w	r2, [ip, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001e24:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001e28:	1a10      	subs	r0, r2, r0
    if (likely(nowdelta < delay)) {
 8001e2a:	4283      	cmp	r3, r0
 8001e2c:	bf98      	it	ls
 8001e2e:	2302      	movls	r3, #2
 8001e30:	d8d8      	bhi.n	8001de4 <chVTDoResetI+0x24>
    currdelta += (sysinterval_t)1;
 8001e32:	3301      	adds	r3, #1
  return systime + (systime_t)interval;
 8001e34:	18d0      	adds	r0, r2, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001e36:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001e3a:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001e3e:	1a82      	subs	r2, r0, r2
    if (likely(nowdelta < delay)) {
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d20a      	bcs.n	8001e5a <chVTDoResetI+0x9a>
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d9cd      	bls.n	8001de4 <chVTDoResetI+0x24>
  currcore->rfcu.mask |= mask;
 8001e48:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	634b      	str	r3, [r1, #52]	; 0x34
}
 8001e50:	e7c8      	b.n	8001de4 <chVTDoResetI+0x24>
  STM32_ST_TIM->DIER = 0U;
 8001e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e56:	60dd      	str	r5, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 8001e58:	e7c4      	b.n	8001de4 <chVTDoResetI+0x24>
  return (systime_t)STM32_ST_TIM->CNT;
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	e7e9      	b.n	8001e32 <chVTDoResetI+0x72>
 8001e5e:	bf00      	nop
 8001e60:	20000a90 	.word	0x20000a90
	...

08001e70 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8001e70:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001e72:	2330      	movs	r3, #48	; 0x30
 8001e74:	b087      	sub	sp, #28
 8001e76:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = __instance_get_currthread(currcore);
 8001e7a:	4c15      	ldr	r4, [pc, #84]	; (8001ed0 <test_wait_tick+0x60>)
  vtp->func    = vtfunc;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <test_wait_tick+0x64>)
 8001e7e:	68e5      	ldr	r5, [r4, #12]
  vt_enqueue(vtlp, vtp, delay);
 8001e80:	2101      	movs	r1, #1
  vtp->par     = par;
 8001e82:	e9cd 3503 	strd	r3, r5, [sp, #12]
  vt_enqueue(vtlp, vtp, delay);
 8001e86:	4668      	mov	r0, sp
  vtp->reload  = (sysinterval_t)0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 8001e8c:	f011 fae8 	bl	8013460 <vt_enqueue.constprop.0>
  ch_priority_queue_t *p = pqp->next;
 8001e90:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8001e92:	2308      	movs	r3, #8
 8001e94:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  pqp->next       = p->next;
 8001e98:	6803      	ldr	r3, [r0, #0]
 8001e9a:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8001e9c:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  chSysSwitch(ntp, otp);
 8001ea4:	4629      	mov	r1, r5
  __instance_set_currthread(oip, ntp);
 8001ea6:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8001ea8:	f7fe fa0a 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8001eac:	9b00      	ldr	r3, [sp, #0]
 8001eae:	b113      	cbz	r3, 8001eb6 <test_wait_tick+0x46>
      chVTDoResetI(&vt);
 8001eb0:	4668      	mov	r0, sp
 8001eb2:	f7ff ff85 	bl	8001dc0 <chVTDoResetI>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f383 8811 	msr	BASEPRI, r3
 8001ebc:	2230      	movs	r2, #48	; 0x30
 8001ebe:	f382 8811 	msr	BASEPRI, r2
 8001ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ec6:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8001ec8:	f383 8811 	msr	BASEPRI, r3

  chThdSleep(1);
  return chVTGetSystemTime();
}
 8001ecc:	b007      	add	sp, #28
 8001ece:	bd30      	pop	{r4, r5, pc}
 8001ed0:	20000a90 	.word	0x20000a90
 8001ed4:	08001051 	.word	0x08001051
	...

08001ee0 <job_slow>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <job_slow+0x64>)

static jobs_queue_t jq;
static job_descriptor_t jobs[JOBS_QUEUE_SIZE];
static msg_t msg_queue[JOBS_QUEUE_SIZE];

static void job_slow(void *arg) {
 8001ee2:	b530      	push	{r4, r5, lr}
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	f103 0120 	add.w	r1, r3, #32
 8001eea:	428a      	cmp	r2, r1
 8001eec:	b087      	sub	sp, #28
 8001eee:	d202      	bcs.n	8001ef6 <job_slow+0x16>
    *chtest.tokp++ = token;
 8001ef0:	1c51      	adds	r1, r2, #1
 8001ef2:	60d9      	str	r1, [r3, #12]

  test_emit_token((int)arg);
 8001ef4:	7010      	strb	r0, [r2, #0]
 8001ef6:	2330      	movs	r3, #48	; 0x30
 8001ef8:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = __instance_get_currthread(currcore);
 8001efc:	4c12      	ldr	r4, [pc, #72]	; (8001f48 <job_slow+0x68>)
  vtp->func    = vtfunc;
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <job_slow+0x6c>)
 8001f00:	68e5      	ldr	r5, [r4, #12]
  vt_enqueue(vtlp, vtp, delay);
 8001f02:	2164      	movs	r1, #100	; 0x64
  vtp->par     = par;
 8001f04:	e9cd 3503 	strd	r3, r5, [sp, #12]
  vt_enqueue(vtlp, vtp, delay);
 8001f08:	4668      	mov	r0, sp
  vtp->reload  = (sysinterval_t)0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 8001f0e:	f011 faa7 	bl	8013460 <vt_enqueue.constprop.0>
  ch_priority_queue_t *p = pqp->next;
 8001f12:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8001f14:	2308      	movs	r3, #8
 8001f16:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  pqp->next       = p->next;
 8001f1a:	6803      	ldr	r3, [r0, #0]
 8001f1c:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8001f1e:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  chSysSwitch(ntp, otp);
 8001f26:	4629      	mov	r1, r5
  __instance_set_currthread(oip, ntp);
 8001f28:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8001f2a:	f7fe f9c9 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8001f2e:	9b00      	ldr	r3, [sp, #0]
 8001f30:	b113      	cbz	r3, 8001f38 <job_slow+0x58>
      chVTDoResetI(&vt);
 8001f32:	4668      	mov	r0, sp
 8001f34:	f7ff ff44 	bl	8001dc0 <chVTDoResetI>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f383 8811 	msr	BASEPRI, r3
  chThdSleepMilliseconds(10);
}
 8001f3e:	b007      	add	sp, #28
 8001f40:	bd30      	pop	{r4, r5, pc}
 8001f42:	bf00      	nop
 8001f44:	20000b74 	.word	0x20000b74
 8001f48:	20000a90 	.word	0x20000a90
 8001f4c:	08001051 	.word	0x08001051

08001f50 <__sch_reschedule_ahead.lto_priv.0>:
  thread_t *otp = __instance_get_currthread(oip);
 8001f50:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <__sch_reschedule_ahead.lto_priv.0+0x38>)
  ch_priority_queue_t *p = pqp->next;
 8001f52:	6810      	ldr	r0, [r2, #0]
 8001f54:	68d1      	ldr	r1, [r2, #12]
  pqp->next       = p->next;
 8001f56:	6803      	ldr	r3, [r0, #0]
static void __sch_reschedule_ahead(void) {
 8001f58:	b410      	push	{r4}
  ntp->state = CH_STATE_CURRENT;
 8001f5a:	2401      	movs	r4, #1
  pqp->next->prev = pqp;
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8001f62:	2400      	movs	r4, #0
  pqp->next       = p->next;
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8001f6a:	698b      	ldr	r3, [r1, #24]
  } while (unlikely(pqp->prio > p->prio));
 8001f6c:	688c      	ldr	r4, [r1, #8]
  __instance_set_currthread(oip, ntp);
 8001f6e:	60d0      	str	r0, [r2, #12]
    pqp = pqp->next;
 8001f70:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	42a2      	cmp	r2, r4
 8001f76:	d8fb      	bhi.n	8001f70 <__sch_reschedule_ahead.lto_priv.0+0x20>
  p->prev       = pqp->prev;
 8001f78:	685a      	ldr	r2, [r3, #4]
}
 8001f7a:	bc10      	pop	{r4}
 8001f7c:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8001f80:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8001f82:	6059      	str	r1, [r3, #4]
  chSysSwitch(ntp, otp);
 8001f84:	f7fe b99c 	b.w	80002c0 <__port_switch>
 8001f88:	20000a90 	.word	0x20000a90
 8001f8c:	00000000 	.word	0x00000000

08001f90 <vtcb>:
static void vtcb(virtual_timer_t *vtp, void *p) {
 8001f90:	b508      	push	{r3, lr}
 8001f92:	2330      	movs	r3, #48	; 0x30
 8001f94:	f383 8811 	msr	BASEPRI, r3
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f382 8811 	msr	BASEPRI, r2
 8001f9e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fa2:	f3ef 8211 	mrs	r2, BASEPRI
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8001fa6:	b95a      	cbnz	r2, 8001fc0 <vtcb+0x30>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fa8:	f3ef 8205 	mrs	r2, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001fac:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fb0:	f3ef 8305 	mrs	r3, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
__STATIC_FORCEINLINE bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8001fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8001fb8:	b133      	cbz	r3, 8001fc8 <vtcb+0x38>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f383 8811 	msr	BASEPRI, r3
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f383 8811 	msr	BASEPRI, r3
}
 8001fc6:	bd08      	pop	{r3, pc}
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <vtcb+0x4c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	6892      	ldr	r2, [r2, #8]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d9f1      	bls.n	8001fba <vtcb+0x2a>
    __sch_reschedule_ahead();
 8001fd6:	f7ff ffbb 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8001fda:	e7ee      	b.n	8001fba <vtcb+0x2a>
 8001fdc:	20000a90 	.word	0x20000a90

08001fe0 <rt_test_005_003_execute.lto_priv.0>:
 * - [5.3.2] Thread priority is returned to the previous value then a
 *   check is performed.
 * .
 */

static void rt_test_005_003_execute(void) {
 8001fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 8001fe4:	4c29      	ldr	r4, [pc, #164]	; (800208c <rt_test_005_003_execute.lto_priv.0+0xac>)
  tprio_t prio, p1;

  /* [5.3.1] Thread priority is increased by one then a check is
     performed.*/
  test_set_step(1);
 8001fe6:	4e2a      	ldr	r6, [pc, #168]	; (8002090 <rt_test_005_003_execute.lto_priv.0+0xb0>)
 8001fe8:	68e3      	ldr	r3, [r4, #12]
  return chThdGetSelfX()->hdr.pqueue.prio;
 8001fea:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	6032      	str	r2, [r6, #0]
  {
    prio = chThdGetPriorityX();
    p1 = chThdSetPriority(prio + 1);
 8001ff2:	eb08 0502 	add.w	r5, r8, r2
 8001ff6:	2230      	movs	r2, #48	; 0x30
 8001ff8:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 8001ffc:	6c1f      	ldr	r7, [r3, #64]	; 0x40
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	4297      	cmp	r7, r2
 8002002:	d038      	beq.n	8002076 <rt_test_005_003_execute.lto_priv.0+0x96>
 8002004:	4295      	cmp	r5, r2
 8002006:	d836      	bhi.n	8002076 <rt_test_005_003_execute.lto_priv.0+0x96>
  currtp->realprio = newprio;
 8002008:	641d      	str	r5, [r3, #64]	; 0x40
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	68e3      	ldr	r3, [r4, #12]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	429a      	cmp	r2, r3
 8002014:	d901      	bls.n	800201a <rt_test_005_003_execute.lto_priv.0+0x3a>
    __sch_reschedule_ahead();
 8002016:	f7ff ff9b 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 800201a:	2300      	movs	r3, #0
 800201c:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8002020:	45b8      	cmp	r8, r7
 8002022:	d12a      	bne.n	800207a <rt_test_005_003_execute.lto_priv.0+0x9a>
  return __sch_get_currthread();
 8002024:	68e3      	ldr	r3, [r4, #12]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4295      	cmp	r5, r2
 800202a:	d11d      	bne.n	8002068 <rt_test_005_003_execute.lto_priv.0+0x88>
  }
  test_end_step(1);

  /* [5.3.2] Thread priority is returned to the previous value then a
     check is performed.*/
  test_set_step(2);
 800202c:	2202      	movs	r2, #2
 800202e:	6032      	str	r2, [r6, #0]
 8002030:	2230      	movs	r2, #48	; 0x30
 8002032:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 8002036:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	4591      	cmp	r9, r2
 800203e:	d023      	beq.n	8002088 <rt_test_005_003_execute.lto_priv.0+0xa8>
 8002040:	4590      	cmp	r8, r2
 8002042:	d821      	bhi.n	8002088 <rt_test_005_003_execute.lto_priv.0+0xa8>
  currtp->realprio = newprio;
 8002044:	641f      	str	r7, [r3, #64]	; 0x40
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	68e3      	ldr	r3, [r4, #12]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	429a      	cmp	r2, r3
 8002050:	d901      	bls.n	8002056 <rt_test_005_003_execute.lto_priv.0+0x76>
    __sch_reschedule_ahead();
 8002052:	f7ff ff7d 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8002056:	2300      	movs	r3, #0
 8002058:	f383 8811 	msr	BASEPRI, r3
 800205c:	454d      	cmp	r5, r9
 800205e:	d10c      	bne.n	800207a <rt_test_005_003_execute.lto_priv.0+0x9a>
  return chThdGetSelfX()->hdr.pqueue.prio;
 8002060:	68e3      	ldr	r3, [r4, #12]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4598      	cmp	r8, r3
 8002066:	d004      	beq.n	8002072 <rt_test_005_003_execute.lto_priv.0+0x92>
  chtest.failure_message = msg;
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <rt_test_005_003_execute.lto_priv.0+0xb4>)
 800206a:	60b3      	str	r3, [r6, #8]
  chtest.global_fail     = true;
 800206c:	f240 1201 	movw	r2, #257	; 0x101
 8002070:	80b2      	strh	r2, [r6, #4]
    p1 = chThdSetPriority(p1);
    test_assert(p1 == prio + 1, "unexpected returned priority level");
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
  }
  test_end_step(2);
}
 8002072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    currtp->hdr.pqueue.prio = newprio;
 8002076:	609d      	str	r5, [r3, #8]
 8002078:	e7c6      	b.n	8002008 <rt_test_005_003_execute.lto_priv.0+0x28>
  chtest.failure_message = msg;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <rt_test_005_003_execute.lto_priv.0+0xb8>)
 800207c:	60b3      	str	r3, [r6, #8]
  chtest.global_fail     = true;
 800207e:	f240 1201 	movw	r2, #257	; 0x101
 8002082:	80b2      	strh	r2, [r6, #4]
 8002084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002088:	609f      	str	r7, [r3, #8]
 800208a:	e7db      	b.n	8002044 <rt_test_005_003_execute.lto_priv.0+0x64>
 800208c:	20000a90 	.word	0x20000a90
 8002090:	20000b74 	.word	0x20000b74
 8002094:	08015008 	.word	0x08015008
 8002098:	08014fe4 	.word	0x08014fe4
 800209c:	00000000 	.word	0x00000000

080020a0 <rt_test_005_004_execute.lto_priv.0>:
 * - [5.4.3] Raising thread priority above the boosted level.
 * - [5.4.4] Restoring original conditions.
 * .
 */

static void rt_test_005_004_execute(void) {
 80020a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 80020a4:	4d3a      	ldr	r5, [pc, #232]	; (8002190 <rt_test_005_004_execute.lto_priv.0+0xf0>)
  }
  test_end_step(1);

  /* [5.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 80020a6:	4e3b      	ldr	r6, [pc, #236]	; (8002194 <rt_test_005_004_execute.lto_priv.0+0xf4>)
 80020a8:	68eb      	ldr	r3, [r5, #12]
  return chThdGetSelfX()->hdr.pqueue.prio;
 80020aa:	689c      	ldr	r4, [r3, #8]
 80020ac:	2202      	movs	r2, #2
    chThdGetSelfX()->hdr.pqueue.prio += 2;
 80020ae:	f104 0902 	add.w	r9, r4, #2
  test_set_step(2);
 80020b2:	6032      	str	r2, [r6, #0]
    chThdGetSelfX()->hdr.pqueue.prio += 2;
 80020b4:	f8c3 9008 	str.w	r9, [r3, #8]
  {
    p1 = chThdSetPriority(prio + 1);
 80020b8:	f104 0801 	add.w	r8, r4, #1
 80020bc:	2230      	movs	r2, #48	; 0x30
 80020be:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 80020c2:	6c1f      	ldr	r7, [r3, #64]	; 0x40
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	4297      	cmp	r7, r2
 80020c8:	d044      	beq.n	8002154 <rt_test_005_004_execute.lto_priv.0+0xb4>
 80020ca:	4590      	cmp	r8, r2
 80020cc:	d842      	bhi.n	8002154 <rt_test_005_004_execute.lto_priv.0+0xb4>
  currtp->realprio = newprio;
 80020ce:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80020d2:	682b      	ldr	r3, [r5, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	68eb      	ldr	r3, [r5, #12]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d901      	bls.n	80020e2 <rt_test_005_004_execute.lto_priv.0+0x42>
    __sch_reschedule_ahead();
 80020de:	f7ff ff37 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 80020e2:	2300      	movs	r3, #0
 80020e4:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 80020e8:	42bc      	cmp	r4, r7
 80020ea:	d136      	bne.n	800215a <rt_test_005_004_execute.lto_priv.0+0xba>
  return __sch_get_currthread();
 80020ec:	68eb      	ldr	r3, [r5, #12]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	4591      	cmp	r9, r2
 80020f2:	d139      	bne.n	8002168 <rt_test_005_004_execute.lto_priv.0+0xc8>
 80020f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f6:	4590      	cmp	r8, r2
 80020f8:	d13c      	bne.n	8002174 <rt_test_005_004_execute.lto_priv.0+0xd4>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
  }
  test_end_step(2);

  /* [5.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
 80020fa:	2203      	movs	r2, #3
 80020fc:	6032      	str	r2, [r6, #0]
  {
    p1 = chThdSetPriority(prio + 3);
 80020fe:	18a7      	adds	r7, r4, r2
 8002100:	2230      	movs	r2, #48	; 0x30
 8002102:	f382 8811 	msr	BASEPRI, r2
  oldprio = currtp->realprio;
 8002106:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
  if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	4591      	cmp	r9, r2
 800210e:	d037      	beq.n	8002180 <rt_test_005_004_execute.lto_priv.0+0xe0>
 8002110:	4297      	cmp	r7, r2
 8002112:	d835      	bhi.n	8002180 <rt_test_005_004_execute.lto_priv.0+0xe0>
  currtp->realprio = newprio;
 8002114:	641f      	str	r7, [r3, #64]	; 0x40
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002116:	682b      	ldr	r3, [r5, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	68eb      	ldr	r3, [r5, #12]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	429a      	cmp	r2, r3
 8002120:	d901      	bls.n	8002126 <rt_test_005_004_execute.lto_priv.0+0x86>
    __sch_reschedule_ahead();
 8002122:	f7ff ff15 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8002126:	2300      	movs	r3, #0
 8002128:	f383 8811 	msr	BASEPRI, r3
 800212c:	45c8      	cmp	r8, r9
 800212e:	d114      	bne.n	800215a <rt_test_005_004_execute.lto_priv.0+0xba>
 8002130:	68ea      	ldr	r2, [r5, #12]
 8002132:	6891      	ldr	r1, [r2, #8]
 8002134:	428f      	cmp	r7, r1
 8002136:	d117      	bne.n	8002168 <rt_test_005_004_execute.lto_priv.0+0xc8>
 8002138:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800213a:	4297      	cmp	r7, r2
 800213c:	d122      	bne.n	8002184 <rt_test_005_004_execute.lto_priv.0+0xe4>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
  }
  test_end_step(3);

  /* [5.4.4] Restoring original conditions.*/
  test_set_step(4);
 800213e:	2204      	movs	r2, #4
 8002140:	6032      	str	r2, [r6, #0]
 8002142:	2230      	movs	r2, #48	; 0x30
 8002144:	f382 8811 	msr	BASEPRI, r2
 8002148:	68ea      	ldr	r2, [r5, #12]
  {
    chSysLock();
    chThdGetSelfX()->hdr.pqueue.prio = prio;
 800214a:	6094      	str	r4, [r2, #8]
    chThdGetSelfX()->realprio = prio;
 800214c:	6414      	str	r4, [r2, #64]	; 0x40
 800214e:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
              (currcore->rlist.current->hdr.pqueue.prio >= currcore->rlist.pqueue.next->prio),
              "priority order violation");

  port_unlock();
}
 8002152:	e007      	b.n	8002164 <rt_test_005_004_execute.lto_priv.0+0xc4>
    currtp->hdr.pqueue.prio = newprio;
 8002154:	f8c3 8008 	str.w	r8, [r3, #8]
 8002158:	e7b9      	b.n	80020ce <rt_test_005_004_execute.lto_priv.0+0x2e>
  chtest.failure_message = msg;
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <rt_test_005_004_execute.lto_priv.0+0xf8>)
 800215c:	60b3      	str	r3, [r6, #8]
  chtest.global_fail     = true;
 800215e:	f240 1201 	movw	r2, #257	; 0x101
 8002162:	80b2      	strh	r2, [r6, #4]
    chSysUnlock();
  }
  test_end_step(4);
}
 8002164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <rt_test_005_004_execute.lto_priv.0+0xfc>)
 800216a:	60b3      	str	r3, [r6, #8]
  chtest.global_fail     = true;
 800216c:	f240 1201 	movw	r2, #257	; 0x101
 8002170:	80b2      	strh	r2, [r6, #4]
  return true;
 8002172:	e7f7      	b.n	8002164 <rt_test_005_004_execute.lto_priv.0+0xc4>
  chtest.failure_message = msg;
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <rt_test_005_004_execute.lto_priv.0+0x100>)
 8002176:	60b3      	str	r3, [r6, #8]
  chtest.global_fail     = true;
 8002178:	f240 1201 	movw	r2, #257	; 0x101
 800217c:	80b2      	strh	r2, [r6, #4]
  return true;
 800217e:	e7f1      	b.n	8002164 <rt_test_005_004_execute.lto_priv.0+0xc4>
 8002180:	609f      	str	r7, [r3, #8]
 8002182:	e7c7      	b.n	8002114 <rt_test_005_004_execute.lto_priv.0+0x74>
  chtest.failure_message = msg;
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <rt_test_005_004_execute.lto_priv.0+0x104>)
 8002186:	60b3      	str	r3, [r6, #8]
  chtest.global_fail     = true;
 8002188:	f240 1201 	movw	r2, #257	; 0x101
 800218c:	80b2      	strh	r2, [r6, #4]
  return true;
 800218e:	e7e9      	b.n	8002164 <rt_test_005_004_execute.lto_priv.0+0xc4>
 8002190:	20000a90 	.word	0x20000a90
 8002194:	20000b74 	.word	0x20000b74
 8002198:	08014fe4 	.word	0x08014fe4
 800219c:	08015008 	.word	0x08015008
 80021a0:	08015024 	.word	0x08015024
 80021a4:	0801504c 	.word	0x0801504c
	...

080021b0 <thread1.lto_priv.0>:
static THD_FUNCTION(thread1, p) {
 80021b0:	b510      	push	{r4, lr}
 80021b2:	2330      	movs	r3, #48	; 0x30
 80021b4:	4604      	mov	r4, r0
 80021b6:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80021ba:	4915      	ldr	r1, [pc, #84]	; (8002210 <thread1.lto_priv.0+0x60>)
 80021bc:	680b      	ldr	r3, [r1, #0]
 80021be:	b17b      	cbz	r3, 80021e0 <thread1.lto_priv.0+0x30>
    *trp = NULL;
 80021c0:	2000      	movs	r0, #0
 80021c2:	6008      	str	r0, [r1, #0]
    tp->u.rdymsg = msg;
 80021c4:	6298      	str	r0, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80021c6:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80021ca:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80021cc:	6898      	ldr	r0, [r3, #8]
    pqp = pqp->next;
 80021ce:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80021d0:	6891      	ldr	r1, [r2, #8]
 80021d2:	4281      	cmp	r1, r0
 80021d4:	d2fb      	bcs.n	80021ce <thread1.lto_priv.0+0x1e>
  p->prev       = pqp->prev;
 80021d6:	6851      	ldr	r1, [r2, #4]
 80021d8:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 80021dc:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 80021de:	6053      	str	r3, [r2, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <thread1.lto_priv.0+0x64>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	6892      	ldr	r2, [r2, #8]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d901      	bls.n	80021f2 <thread1.lto_priv.0+0x42>
    __sch_reschedule_ahead();
 80021ee:	f7ff feaf 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 80021f2:	2300      	movs	r3, #0
 80021f4:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80021f8:	4b07      	ldr	r3, [pc, #28]	; (8002218 <thread1.lto_priv.0+0x68>)
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	f103 0120 	add.w	r1, r3, #32
 8002200:	428a      	cmp	r2, r1
 8002202:	d203      	bcs.n	800220c <thread1.lto_priv.0+0x5c>
  test_emit_token(*(char *)p);
 8002204:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 8002206:	1c50      	adds	r0, r2, #1
 8002208:	60d8      	str	r0, [r3, #12]
 800220a:	7011      	strb	r1, [r2, #0]
}
 800220c:	bd10      	pop	{r4, pc}
 800220e:	bf00      	nop
 8002210:	200016f8 	.word	0x200016f8
 8002214:	20000a90 	.word	0x20000a90
 8002218:	20000b74 	.word	0x20000b74
 800221c:	00000000 	.word	0x00000000

08002220 <thread4>:
static THD_FUNCTION(thread4, p) {
 8002220:	b508      	push	{r3, lr}
 8002222:	2230      	movs	r2, #48	; 0x30
 8002224:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8002228:	6883      	ldr	r3, [r0, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	dd0c      	ble.n	8002248 <thread4+0x28>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <thread4+0x30>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	6892      	ldr	r2, [r2, #8]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	429a      	cmp	r2, r3
 800223a:	d901      	bls.n	8002240 <thread4+0x20>
    __sch_reschedule_ahead();
 800223c:	f7ff fe88 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8002240:	2300      	movs	r3, #0
 8002242:	f383 8811 	msr	BASEPRI, r3
}
 8002246:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 8002248:	f7fe ff3a 	bl	80010c0 <chSemSignalI>
 800224c:	e7ef      	b.n	800222e <thread4+0xe>
 800224e:	bf00      	nop
 8002250:	20000a90 	.word	0x20000a90
	...

08002260 <obj_read>:
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8002260:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <obj_read+0xc0>)
                     bool async) {
 8002262:	b570      	push	{r4, r5, r6, lr}
 8002264:	68dd      	ldr	r5, [r3, #12]
 8002266:	460c      	mov	r4, r1
 8002268:	f103 0120 	add.w	r1, r3, #32
 800226c:	428d      	cmp	r5, r1
 800226e:	d204      	bcs.n	800227a <obj_read+0x1a>
  test_emit_token('a' + objp->obj_key);
 8002270:	6961      	ldr	r1, [r4, #20]
    *chtest.tokp++ = token;
 8002272:	1c6e      	adds	r6, r5, #1
 8002274:	3161      	adds	r1, #97	; 0x61
 8002276:	60de      	str	r6, [r3, #12]
 8002278:	7029      	strb	r1, [r5, #0]
  objp->obj_flags &= ~OC_FLAG_NOTSYNC;
 800227a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800227c:	f023 0308 	bic.w	r3, r3, #8
 8002280:	6263      	str	r3, [r4, #36]	; 0x24
  if (async) {
 8002282:	b90a      	cbnz	r2, 8002288 <obj_read+0x28>
}
 8002284:	2000      	movs	r0, #0
 8002286:	bd70      	pop	{r4, r5, r6, pc}
 8002288:	2330      	movs	r3, #48	; 0x30
 800228a:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(chSemGetCounterI(&objp->obj_sem) <= (cnt_t)0,
              "semaphore counter greater than 0");

  /* If some thread is waiting for this specific buffer then it is
     handed directly without going through the LRU.*/
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800228e:	6a23      	ldr	r3, [r4, #32]
 8002290:	2b00      	cmp	r3, #0
    /* Clearing all flags except those that are still meaningful, note,
       OC_FLAG_NOTSYNC and OC_FLAG_LAZYWRITE are passed, the other thread
       will handle them.*/
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002292:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002294:	db3b      	blt.n	800230e <obj_read+0xae>
    return;
  }

  /* If the object specifies OC_FLAG_NOTSYNC then it must be invalidated
     and removed from the hash table.*/
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 8002296:	0719      	lsls	r1, r3, #28
 8002298:	d421      	bmi.n	80022de <obj_read+0x7e>
    objp->obj_key   = 0U;
    objp->obj_flags = OC_FLAG_INLRU;
  }
  else {
    /* LRU insertion point depends on the OC_FLAG_FORGET flag.*/
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 800229a:	069a      	lsls	r2, r3, #26
 800229c:	d42f      	bmi.n	80022fe <obj_read+0x9e>
      /* Placing it on head.*/
      LRU_INSERT_HEAD(ocp, objp);
 800229e:	69c2      	ldr	r2, [r0, #28]
 80022a0:	f100 0114 	add.w	r1, r0, #20
 80022a4:	e9c4 2102 	strd	r2, r1, [r4, #8]
 80022a8:	60d4      	str	r4, [r2, #12]
 80022aa:	61c4      	str	r4, [r0, #28]
    }
    else {
      /* Low priority data, placing it on tail.*/
      LRU_INSERT_TAIL(ocp, objp);
    }
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 80022ac:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 80022b0:	f043 0301 	orr.w	r3, r3, #1
    objp->obj_flags = OC_FLAG_INLRU;
 80022b4:	6263      	str	r3, [r4, #36]	; 0x24
  }

  /* Increasing the LRU counter semaphore.*/
  chSemSignalI(&ocp->lru_sem);
 80022b6:	3030      	adds	r0, #48	; 0x30
 80022b8:	f7fe ff02 	bl	80010c0 <chSemSignalI>
  sp->cnt++;
 80022bc:	6a23      	ldr	r3, [r4, #32]
 80022be:	3301      	adds	r3, #1
 80022c0:	6223      	str	r3, [r4, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <obj_read+0xc4>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	6892      	ldr	r2, [r2, #8]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d901      	bls.n	80022d4 <obj_read+0x74>
    __sch_reschedule_ahead();
 80022d0:	f7ff fe3e 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 80022d4:	2300      	movs	r3, #0
 80022d6:	f383 8811 	msr	BASEPRI, r3
 80022da:	2000      	movs	r0, #0
 80022dc:	bd70      	pop	{r4, r5, r6, pc}
    HASH_REMOVE(objp);
 80022de:	e9d4 3200 	ldrd	r3, r2, [r4]
    LRU_INSERT_TAIL(ocp, objp);
 80022e2:	6a01      	ldr	r1, [r0, #32]
    HASH_REMOVE(objp);
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	605a      	str	r2, [r3, #4]
    LRU_INSERT_TAIL(ocp, objp);
 80022e8:	f100 0314 	add.w	r3, r0, #20
    objp->obj_group = 0U;
 80022ec:	2200      	movs	r2, #0
    LRU_INSERT_TAIL(ocp, objp);
 80022ee:	e9c4 3102 	strd	r3, r1, [r4, #8]
 80022f2:	608c      	str	r4, [r1, #8]
 80022f4:	2301      	movs	r3, #1
 80022f6:	6204      	str	r4, [r0, #32]
    objp->obj_key   = 0U;
 80022f8:	e9c4 2204 	strd	r2, r2, [r4, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 80022fc:	e7da      	b.n	80022b4 <obj_read+0x54>
      LRU_INSERT_TAIL(ocp, objp);
 80022fe:	6a02      	ldr	r2, [r0, #32]
 8002300:	f100 0114 	add.w	r1, r0, #20
 8002304:	e9c4 1202 	strd	r1, r2, [r4, #8]
 8002308:	6094      	str	r4, [r2, #8]
 800230a:	6204      	str	r4, [r0, #32]
 800230c:	e7ce      	b.n	80022ac <obj_read+0x4c>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800230e:	f003 031a 	and.w	r3, r3, #26
    chSemSignalI(&objp->obj_sem);
 8002312:	f104 0018 	add.w	r0, r4, #24
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002316:	6263      	str	r3, [r4, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 8002318:	f7fe fed2 	bl	80010c0 <chSemSignalI>
    return;
 800231c:	e7d1      	b.n	80022c2 <obj_read+0x62>
 800231e:	bf00      	nop
 8002320:	20000b74 	.word	0x20000b74
 8002324:	20000a90 	.word	0x20000a90
	...

08002330 <oslib_test_006_001_execute.lto_priv.0>:
 * - [6.1.5] Checking cached objects.
 * - [6.1.6] Checking non-cached objects.
 * .
 */

static void oslib_test_006_001_execute(void) {
 8002330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  qp->next = qp;
 8002334:	4c5a      	ldr	r4, [pc, #360]	; (80024a0 <oslib_test_006_001_execute.lto_priv.0+0x170>)
  ocp->hashp            = hashp;
 8002336:	4b5b      	ldr	r3, [pc, #364]	; (80024a4 <oslib_test_006_001_execute.lto_priv.0+0x174>)
  sp->cnt = n;
 8002338:	2104      	movs	r1, #4
 800233a:	f104 0224 	add.w	r2, r4, #36	; 0x24
 800233e:	2001      	movs	r0, #1
  qp->prev = qp;
 8002340:	e9c4 2209 	strd	r2, r2, [r4, #36]	; 0x24
  ocp->objn             = objn;
 8002344:	e9c4 3101 	strd	r3, r1, [r4, #4]
  ocp->hashn            = hashn;
 8002348:	2208      	movs	r2, #8
 800234a:	62e0      	str	r0, [r4, #44]	; 0x2c
 800234c:	63a1      	str	r1, [r4, #56]	; 0x38
  qp->next = qp;
 800234e:	f104 0030 	add.w	r0, r4, #48	; 0x30
  ocp->readf            = readf;
 8002352:	4955      	ldr	r1, [pc, #340]	; (80024a8 <oslib_test_006_001_execute.lto_priv.0+0x178>)
  ocp->hashn            = hashn;
 8002354:	6022      	str	r2, [r4, #0]
  qp->prev = qp;
 8002356:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
  ocp->lru.hash_next    = NULL;
 800235a:	2200      	movs	r2, #0
  ocp->objvp            = objvp;
 800235c:	4853      	ldr	r0, [pc, #332]	; (80024ac <oslib_test_006_001_execute.lto_priv.0+0x17c>)
  ocp->readf            = readf;
 800235e:	63e1      	str	r1, [r4, #60]	; 0x3c
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8002360:	f104 0614 	add.w	r6, r4, #20
  ocp->writef           = writef;
 8002364:	4952      	ldr	r1, [pc, #328]	; (80024b0 <oslib_test_006_001_execute.lto_priv.0+0x180>)
  ocp->objvp            = objvp;
 8002366:	6120      	str	r0, [r4, #16]
  ocp->lru.hash_prev    = NULL;
 8002368:	e9c4 2205 	strd	r2, r2, [r4, #20]
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 800236c:	6226      	str	r6, [r4, #32]
 800236e:	f103 0240 	add.w	r2, r3, #64	; 0x40
  ocp->writef           = writef;
 8002372:	6421      	str	r1, [r4, #64]	; 0x40
    hashp->hash_prev = (oc_object_t *)hashp;
 8002374:	e9c3 3300 	strd	r3, r3, [r3]
    hashp++;
 8002378:	3308      	adds	r3, #8
  } while (hashp < &ocp->hashp[ocp->hashn]);
 800237a:	4293      	cmp	r3, r2
 800237c:	d1fa      	bne.n	8002374 <oslib_test_006_001_execute.lto_priv.0+0x44>
 800237e:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <oslib_test_006_001_execute.lto_priv.0+0x17c>)
 8002380:	494c      	ldr	r1, [pc, #304]	; (80024b4 <oslib_test_006_001_execute.lto_priv.0+0x184>)
 8002382:	f103 0cf0 	add.w	ip, r3, #240	; 0xf0
 8002386:	2701      	movs	r7, #1
    objp->obj_group = 0U;
 8002388:	2200      	movs	r2, #0
 800238a:	e000      	b.n	800238e <oslib_test_006_001_execute.lto_priv.0+0x5e>
 800238c:	462b      	mov	r3, r5
    objvp = (void *)((uint8_t *)objvp + objsz);
 800238e:	f103 053c 	add.w	r5, r3, #60	; 0x3c
 8002392:	f103 0018 	add.w	r0, r3, #24
  } while (objn > (ucnt_t)0);
 8002396:	4565      	cmp	r5, ip
    LRU_INSERT_HEAD(ocp, objp);
 8002398:	6099      	str	r1, [r3, #8]
 800239a:	e9c3 0006 	strd	r0, r0, [r3, #24]
 800239e:	621f      	str	r7, [r3, #32]
 80023a0:	60de      	str	r6, [r3, #12]
 80023a2:	60cb      	str	r3, [r1, #12]
    objp->obj_key   = 0U;
 80023a4:	e9c3 2204 	strd	r2, r2, [r3, #16]
    objp->dptr      = NULL;
 80023a8:	e9c3 7209 	strd	r7, r2, [r3, #36]	; 0x24
 80023ac:	4619      	mov	r1, r3
  } while (objn > (ucnt_t)0);
 80023ae:	d1ed      	bne.n	800238c <oslib_test_006_001_execute.lto_priv.0+0x5c>
 80023b0:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <oslib_test_006_001_execute.lto_priv.0+0x188>)
                      obj_write);
  }
  test_end_step(1);

  /* [6.1.2] Getting and releasing objects without initialization.*/
  test_set_step(2);
 80023b2:	4d42      	ldr	r5, [pc, #264]	; (80024bc <oslib_test_006_001_execute.lto_priv.0+0x18c>)
 80023b4:	61e3      	str	r3, [r4, #28]
 80023b6:	2302      	movs	r3, #2
  chSemSignalI(&ocp->lru_sem);
 80023b8:	f8df a104 	ldr.w	sl, [pc, #260]	; 80024c0 <oslib_test_006_001_execute.lto_priv.0+0x190>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80023bc:	4f41      	ldr	r7, [pc, #260]	; (80024c4 <oslib_test_006_001_execute.lto_priv.0+0x194>)
 80023be:	602b      	str	r3, [r5, #0]
  {
    uint32_t i;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 80023c0:	f04f 0800 	mov.w	r8, #0
 80023c4:	f04f 0930 	mov.w	r9, #48	; 0x30
 80023c8:	e02a      	b.n	8002420 <oslib_test_006_001_execute.lto_priv.0+0xf0>
    LRU_INSERT_TAIL(ocp, objp);
 80023ca:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 80023cc:	f8db 1004 	ldr.w	r1, [fp, #4]
 80023d0:	f8db 2000 	ldr.w	r2, [fp]
 80023d4:	600a      	str	r2, [r1, #0]
 80023d6:	6051      	str	r1, [r2, #4]
    LRU_INSERT_TAIL(ocp, objp);
 80023d8:	e9cb 6302 	strd	r6, r3, [fp, #8]
 80023dc:	f8c3 b008 	str.w	fp, [r3, #8]
    objp->obj_group = 0U;
 80023e0:	2300      	movs	r3, #0
    LRU_INSERT_TAIL(ocp, objp);
 80023e2:	f8c4 b020 	str.w	fp, [r4, #32]
    objp->obj_key   = 0U;
 80023e6:	e9cb 3304 	strd	r3, r3, [fp, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 80023ea:	2301      	movs	r3, #1
 80023ec:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
  chSemSignalI(&ocp->lru_sem);
 80023f0:	4650      	mov	r0, sl
 80023f2:	f7fe fe65 	bl	80010c0 <chSemSignalI>
 80023f6:	f8db 3020 	ldr.w	r3, [fp, #32]
 80023fa:	3301      	adds	r3, #1
 80023fc:	f8cb 3020 	str.w	r3, [fp, #32]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6892      	ldr	r2, [r2, #8]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	429a      	cmp	r2, r3
 800240a:	d901      	bls.n	8002410 <oslib_test_006_001_execute.lto_priv.0+0xe0>
    __sch_reschedule_ahead();
 800240c:	f7ff fda0 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8002410:	2300      	movs	r3, #0
 8002412:	f383 8811 	msr	BASEPRI, r3
 8002416:	f108 0801 	add.w	r8, r8, #1
 800241a:	f1b8 0f08 	cmp.w	r8, #8
 800241e:	d057      	beq.n	80024d0 <oslib_test_006_001_execute.lto_priv.0+0x1a0>
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 8002420:	4640      	mov	r0, r8
 8002422:	f010 fd25 	bl	8012e70 <chCacheGetObject.constprop.0>

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8002426:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (!condition) {
 8002428:	079a      	lsls	r2, r3, #30
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 800242a:	4683      	mov	fp, r0
 800242c:	d519      	bpl.n	8002462 <oslib_test_006_001_execute.lto_priv.0+0x132>
 800242e:	0718      	lsls	r0, r3, #28
 8002430:	d51e      	bpl.n	8002470 <oslib_test_006_001_execute.lto_priv.0+0x140>
 8002432:	f389 8811 	msr	BASEPRI, r9
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002436:	f8db 3020 	ldr.w	r3, [fp, #32]
 800243a:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800243c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002440:	db25      	blt.n	800248e <oslib_test_006_001_execute.lto_priv.0+0x15e>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 8002442:	0719      	lsls	r1, r3, #28
 8002444:	d4c1      	bmi.n	80023ca <oslib_test_006_001_execute.lto_priv.0+0x9a>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 8002446:	069a      	lsls	r2, r3, #26
 8002448:	d419      	bmi.n	800247e <oslib_test_006_001_execute.lto_priv.0+0x14e>
      LRU_INSERT_HEAD(ocp, objp);
 800244a:	69e2      	ldr	r2, [r4, #28]
 800244c:	e9cb 2602 	strd	r2, r6, [fp, #8]
 8002450:	f8c2 b00c 	str.w	fp, [r2, #12]
 8002454:	f8c4 b01c 	str.w	fp, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8002458:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	e7c4      	b.n	80023ec <oslib_test_006_001_execute.lto_priv.0+0xbc>
  chtest.failure_message = msg;
 8002462:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <oslib_test_006_001_execute.lto_priv.0+0x198>)
 8002464:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8002466:	f240 1201 	movw	r2, #257	; 0x101
 800246a:	80aa      	strh	r2, [r5, #4]
    }

    test_assert_sequence("", "unexpected tokens");
  }
  test_end_step(6);
}
 800246c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chtest.failure_message = msg;
 8002470:	4b16      	ldr	r3, [pc, #88]	; (80024cc <oslib_test_006_001_execute.lto_priv.0+0x19c>)
 8002472:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8002474:	f240 1201 	movw	r2, #257	; 0x101
 8002478:	80aa      	strh	r2, [r5, #4]
 800247a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LRU_INSERT_TAIL(ocp, objp);
 800247e:	6a22      	ldr	r2, [r4, #32]
 8002480:	e9cb 6202 	strd	r6, r2, [fp, #8]
 8002484:	f8c2 b008 	str.w	fp, [r2, #8]
 8002488:	f8c4 b020 	str.w	fp, [r4, #32]
 800248c:	e7e4      	b.n	8002458 <oslib_test_006_001_execute.lto_priv.0+0x128>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800248e:	f003 031a 	and.w	r3, r3, #26
 8002492:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 8002496:	f10b 0018 	add.w	r0, fp, #24
 800249a:	f7fe fe11 	bl	80010c0 <chSemSignalI>
    return;
 800249e:	e7af      	b.n	8002400 <oslib_test_006_001_execute.lto_priv.0+0xd0>
 80024a0:	20000a48 	.word	0x20000a48
 80024a4:	20000bbc 	.word	0x20000bbc
 80024a8:	08002261 	.word	0x08002261
 80024ac:	20000cbc 	.word	0x20000cbc
 80024b0:	08000de1 	.word	0x08000de1
 80024b4:	20000a5c 	.word	0x20000a5c
 80024b8:	20000d70 	.word	0x20000d70
 80024bc:	20000b74 	.word	0x20000b74
 80024c0:	20000a78 	.word	0x20000a78
 80024c4:	20000a90 	.word	0x20000a90
 80024c8:	0801506c 	.word	0x0801506c
 80024cc:	08015078 	.word	0x08015078
    test_assert_sequence("", "unexpected tokens");
 80024d0:	49b0      	ldr	r1, [pc, #704]	; (8002794 <oslib_test_006_001_execute.lto_priv.0+0x464>)
 80024d2:	48b1      	ldr	r0, [pc, #708]	; (8002798 <oslib_test_006_001_execute.lto_priv.0+0x468>)
 80024d4:	f7fe f81c 	bl	8000510 <__test_assert_sequence>
 80024d8:	4681      	mov	r9, r0
 80024da:	2800      	cmp	r0, #0
 80024dc:	d1c6      	bne.n	800246c <oslib_test_006_001_execute.lto_priv.0+0x13c>
  test_set_step(3);
 80024de:	2303      	movs	r3, #3
  /* Marking it as OC_FLAG_NOTSYNC because the read operation is going
     to corrupt it in case of failure. It is responsibility of the read
     implementation to clear it if the operation succeeds.*/
  objp->obj_flags |= OC_FLAG_NOTSYNC;

  return ocp->readf(ocp, objp, async);
 80024e0:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800279c <oslib_test_006_001_execute.lto_priv.0+0x46c>
 80024e4:	602b      	str	r3, [r5, #0]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 80024e6:	4648      	mov	r0, r9
 80024e8:	f010 fcc2 	bl	8012e70 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 80024ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 80024ee:	4683      	mov	fp, r0
  if (!condition) {
 80024f0:	0798      	lsls	r0, r3, #30
 80024f2:	d5b6      	bpl.n	8002462 <oslib_test_006_001_execute.lto_priv.0+0x132>
 80024f4:	0719      	lsls	r1, r3, #28
 80024f6:	f140 813b 	bpl.w	8002770 <oslib_test_006_001_execute.lto_priv.0+0x440>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 80024fa:	f043 0308 	orr.w	r3, r3, #8
 80024fe:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 8002502:	2200      	movs	r2, #0
 8002504:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002506:	4659      	mov	r1, fp
 8002508:	4650      	mov	r0, sl
 800250a:	4798      	blx	r3
 800250c:	2800      	cmp	r0, #0
 800250e:	f040 813b 	bne.w	8002788 <oslib_test_006_001_execute.lto_priv.0+0x458>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8002512:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8002516:	079a      	lsls	r2, r3, #30
 8002518:	d5a3      	bpl.n	8002462 <oslib_test_006_001_execute.lto_priv.0+0x132>
 800251a:	f013 0808 	ands.w	r8, r3, #8
 800251e:	f040 812d 	bne.w	800277c <oslib_test_006_001_execute.lto_priv.0+0x44c>
 8002522:	2330      	movs	r3, #48	; 0x30
 8002524:	f383 8811 	msr	BASEPRI, r3
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002528:	f8db 3020 	ldr.w	r3, [fp, #32]
 800252c:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800252e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002532:	f2c0 8155 	blt.w	80027e0 <oslib_test_006_001_execute.lto_priv.0+0x4b0>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 8002536:	0718      	lsls	r0, r3, #28
 8002538:	f140 813c 	bpl.w	80027b4 <oslib_test_006_001_execute.lto_priv.0+0x484>
    HASH_REMOVE(objp);
 800253c:	e9db 2100 	ldrd	r2, r1, [fp]
    LRU_INSERT_TAIL(ocp, objp);
 8002540:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 8002542:	600a      	str	r2, [r1, #0]
 8002544:	6051      	str	r1, [r2, #4]
    LRU_INSERT_TAIL(ocp, objp);
 8002546:	e9cb 6302 	strd	r6, r3, [fp, #8]
 800254a:	f8c3 b008 	str.w	fp, [r3, #8]
 800254e:	f8c4 b020 	str.w	fp, [r4, #32]
    objp->obj_key   = 0U;
 8002552:	e9cb 8804 	strd	r8, r8, [fp, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 8002556:	2301      	movs	r3, #1
 8002558:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
  chSemSignalI(&ocp->lru_sem);
 800255c:	4890      	ldr	r0, [pc, #576]	; (80027a0 <oslib_test_006_001_execute.lto_priv.0+0x470>)
 800255e:	f7fe fdaf 	bl	80010c0 <chSemSignalI>
 8002562:	f8db 3020 	ldr.w	r3, [fp, #32]
 8002566:	3301      	adds	r3, #1
 8002568:	f8cb 3020 	str.w	r3, [fp, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	429a      	cmp	r2, r3
 8002576:	d901      	bls.n	800257c <oslib_test_006_001_execute.lto_priv.0+0x24c>
    __sch_reschedule_ahead();
 8002578:	f7ff fcea 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 800257c:	2300      	movs	r3, #0
 800257e:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8002582:	f109 0901 	add.w	r9, r9, #1
 8002586:	f1b9 0f08 	cmp.w	r9, #8
 800258a:	d1ac      	bne.n	80024e6 <oslib_test_006_001_execute.lto_priv.0+0x1b6>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 800258c:	4981      	ldr	r1, [pc, #516]	; (8002794 <oslib_test_006_001_execute.lto_priv.0+0x464>)
 800258e:	4885      	ldr	r0, [pc, #532]	; (80027a4 <oslib_test_006_001_execute.lto_priv.0+0x474>)
 8002590:	f7fd ffbe 	bl	8000510 <__test_assert_sequence>
 8002594:	2800      	cmp	r0, #0
 8002596:	f47f af69 	bne.w	800246c <oslib_test_006_001_execute.lto_priv.0+0x13c>
  test_set_step(4);
 800259a:	2304      	movs	r3, #4
  return ocp->readf(ocp, objp, async);
 800259c:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 800279c <oslib_test_006_001_execute.lto_priv.0+0x46c>
 80025a0:	602b      	str	r3, [r5, #0]
 80025a2:	f04f 0a30 	mov.w	sl, #48	; 0x30
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 80025a6:	4640      	mov	r0, r8
 80025a8:	f010 fc62 	bl	8012e70 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 80025ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025ae:	079a      	lsls	r2, r3, #30
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 80025b0:	4601      	mov	r1, r0
 80025b2:	f57f af56 	bpl.w	8002462 <oslib_test_006_001_execute.lto_priv.0+0x132>
 80025b6:	0718      	lsls	r0, r3, #28
 80025b8:	f140 80da 	bpl.w	8002770 <oslib_test_006_001_execute.lto_priv.0+0x440>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 80025bc:	f043 0308 	orr.w	r3, r3, #8
 80025c0:	624b      	str	r3, [r1, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 80025c2:	2201      	movs	r2, #1
 80025c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025c6:	4648      	mov	r0, r9
 80025c8:	4798      	blx	r3
 80025ca:	2800      	cmp	r0, #0
 80025cc:	f040 80dc 	bne.w	8002788 <oslib_test_006_001_execute.lto_priv.0+0x458>
      objp = chCacheGetObject(&cache1, 0U, i);
 80025d0:	4640      	mov	r0, r8
 80025d2:	f010 fc4d 	bl	8012e70 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 80025d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025d8:	079a      	lsls	r2, r3, #30
 80025da:	f57f af42 	bpl.w	8002462 <oslib_test_006_001_execute.lto_priv.0+0x132>
 80025de:	f013 0308 	ands.w	r3, r3, #8
 80025e2:	f040 80cb 	bne.w	800277c <oslib_test_006_001_execute.lto_priv.0+0x44c>
 80025e6:	f38a 8811 	msr	BASEPRI, sl
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 80025ea:	6a02      	ldr	r2, [r0, #32]
 80025ec:	2a00      	cmp	r2, #0
 80025ee:	f2c0 812a 	blt.w	8002846 <oslib_test_006_001_execute.lto_priv.0+0x516>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 80025f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80025f4:	0711      	lsls	r1, r2, #28
 80025f6:	f140 80fc 	bpl.w	80027f2 <oslib_test_006_001_execute.lto_priv.0+0x4c2>
    HASH_REMOVE(objp);
 80025fa:	e9d0 1c00 	ldrd	r1, ip, [r0]
    LRU_INSERT_TAIL(ocp, objp);
 80025fe:	6a22      	ldr	r2, [r4, #32]
    HASH_REMOVE(objp);
 8002600:	f8cc 1000 	str.w	r1, [ip]
 8002604:	f8c1 c004 	str.w	ip, [r1, #4]
    LRU_INSERT_TAIL(ocp, objp);
 8002608:	e9c0 6202 	strd	r6, r2, [r0, #8]
 800260c:	6090      	str	r0, [r2, #8]
 800260e:	6220      	str	r0, [r4, #32]
    objp->obj_key   = 0U;
 8002610:	e9c0 3304 	strd	r3, r3, [r0, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 8002614:	2201      	movs	r2, #1
  if (++sp->cnt <= (cnt_t)0) {
 8002616:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002618:	6242      	str	r2, [r0, #36]	; 0x24
 800261a:	3301      	adds	r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002620:	f340 80f3 	ble.w	800280a <oslib_test_006_001_execute.lto_priv.0+0x4da>
 8002624:	6a03      	ldr	r3, [r0, #32]
 8002626:	3301      	adds	r3, #1
 8002628:	6203      	str	r3, [r0, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	429a      	cmp	r2, r3
 8002634:	d901      	bls.n	800263a <oslib_test_006_001_execute.lto_priv.0+0x30a>
    __sch_reschedule_ahead();
 8002636:	f7ff fc8b 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 800263a:	2300      	movs	r3, #0
 800263c:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8002640:	f108 0801 	add.w	r8, r8, #1
 8002644:	f1b8 0f08 	cmp.w	r8, #8
 8002648:	d1ad      	bne.n	80025a6 <oslib_test_006_001_execute.lto_priv.0+0x276>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 800264a:	4952      	ldr	r1, [pc, #328]	; (8002794 <oslib_test_006_001_execute.lto_priv.0+0x464>)
 800264c:	4855      	ldr	r0, [pc, #340]	; (80027a4 <oslib_test_006_001_execute.lto_priv.0+0x474>)
 800264e:	f7fd ff5f 	bl	8000510 <__test_assert_sequence>
 8002652:	4681      	mov	r9, r0
 8002654:	2800      	cmp	r0, #0
 8002656:	f47f af09 	bne.w	800246c <oslib_test_006_001_execute.lto_priv.0+0x13c>
  test_set_step(5);
 800265a:	2305      	movs	r3, #5
 800265c:	602b      	str	r3, [r5, #0]
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 800265e:	f04f 0a04 	mov.w	sl, #4
    tp->u.rdymsg = MSG_OK;
 8002662:	4683      	mov	fp, r0
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8002664:	4650      	mov	r0, sl
 8002666:	f010 fc03 	bl	8012e70 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800266a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800266c:	0799      	lsls	r1, r3, #30
 800266e:	f57f aef8 	bpl.w	8002462 <oslib_test_006_001_execute.lto_priv.0+0x132>
 8002672:	f013 0808 	ands.w	r8, r3, #8
 8002676:	f040 8081 	bne.w	800277c <oslib_test_006_001_execute.lto_priv.0+0x44c>
 800267a:	2330      	movs	r3, #48	; 0x30
 800267c:	f383 8811 	msr	BASEPRI, r3
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002680:	6a03      	ldr	r3, [r0, #32]
 8002682:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002684:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002686:	f2c0 811a 	blt.w	80028be <oslib_test_006_001_execute.lto_priv.0+0x58e>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 800268a:	071a      	lsls	r2, r3, #28
 800268c:	f140 80e3 	bpl.w	8002856 <oslib_test_006_001_execute.lto_priv.0+0x526>
    HASH_REMOVE(objp);
 8002690:	e9d0 2100 	ldrd	r2, r1, [r0]
    LRU_INSERT_TAIL(ocp, objp);
 8002694:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 8002696:	600a      	str	r2, [r1, #0]
 8002698:	6051      	str	r1, [r2, #4]
    LRU_INSERT_TAIL(ocp, objp);
 800269a:	e9c0 6302 	strd	r6, r3, [r0, #8]
 800269e:	6098      	str	r0, [r3, #8]
 80026a0:	6220      	str	r0, [r4, #32]
    objp->obj_key   = 0U;
 80026a2:	e9c0 8804 	strd	r8, r8, [r0, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 80026a6:	2301      	movs	r3, #1
 80026a8:	6243      	str	r3, [r0, #36]	; 0x24
  if (++sp->cnt <= (cnt_t)0) {
 80026aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026ac:	3301      	adds	r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80026b2:	f340 80ee 	ble.w	8002892 <oslib_test_006_001_execute.lto_priv.0+0x562>
 80026b6:	6a03      	ldr	r3, [r0, #32]
 80026b8:	3301      	adds	r3, #1
 80026ba:	6203      	str	r3, [r0, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d901      	bls.n	80026cc <oslib_test_006_001_execute.lto_priv.0+0x39c>
    __sch_reschedule_ahead();
 80026c8:	f7ff fc42 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 80026cc:	f38b 8811 	msr	BASEPRI, fp
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 80026d0:	f10a 0a01 	add.w	sl, sl, #1
 80026d4:	f1ba 0f08 	cmp.w	sl, #8
 80026d8:	d1c4      	bne.n	8002664 <oslib_test_006_001_execute.lto_priv.0+0x334>
    test_assert_sequence("", "unexpected tokens");
 80026da:	492e      	ldr	r1, [pc, #184]	; (8002794 <oslib_test_006_001_execute.lto_priv.0+0x464>)
 80026dc:	482e      	ldr	r0, [pc, #184]	; (8002798 <oslib_test_006_001_execute.lto_priv.0+0x468>)
 80026de:	f7fd ff17 	bl	8000510 <__test_assert_sequence>
 80026e2:	4681      	mov	r9, r0
 80026e4:	2800      	cmp	r0, #0
 80026e6:	f47f aec1 	bne.w	800246c <oslib_test_006_001_execute.lto_priv.0+0x13c>
  test_set_step(6);
 80026ea:	2306      	movs	r3, #6
 80026ec:	602b      	str	r3, [r5, #0]
 80026ee:	f04f 0a30 	mov.w	sl, #48	; 0x30
    tp->u.rdymsg = MSG_OK;
 80026f2:	4683      	mov	fp, r0
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 80026f4:	4640      	mov	r0, r8
 80026f6:	f010 fbbb 	bl	8012e70 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 80026fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026fc:	079a      	lsls	r2, r3, #30
 80026fe:	f57f aeb0 	bpl.w	8002462 <oslib_test_006_001_execute.lto_priv.0+0x132>
 8002702:	071b      	lsls	r3, r3, #28
 8002704:	d534      	bpl.n	8002770 <oslib_test_006_001_execute.lto_priv.0+0x440>
 8002706:	f38a 8811 	msr	BASEPRI, sl
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 800270a:	6a03      	ldr	r3, [r0, #32]
 800270c:	2b00      	cmp	r3, #0
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 800270e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8002710:	f2c0 80f8 	blt.w	8002904 <oslib_test_006_001_execute.lto_priv.0+0x5d4>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 8002714:	0719      	lsls	r1, r3, #28
 8002716:	f140 80b0 	bpl.w	800287a <oslib_test_006_001_execute.lto_priv.0+0x54a>
    HASH_REMOVE(objp);
 800271a:	e9d0 2100 	ldrd	r2, r1, [r0]
    LRU_INSERT_TAIL(ocp, objp);
 800271e:	6a23      	ldr	r3, [r4, #32]
    HASH_REMOVE(objp);
 8002720:	600a      	str	r2, [r1, #0]
 8002722:	6051      	str	r1, [r2, #4]
    LRU_INSERT_TAIL(ocp, objp);
 8002724:	e9c0 6302 	strd	r6, r3, [r0, #8]
 8002728:	6098      	str	r0, [r3, #8]
 800272a:	6220      	str	r0, [r4, #32]
    objp->obj_key   = 0U;
 800272c:	e9c0 9904 	strd	r9, r9, [r0, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 8002730:	2301      	movs	r3, #1
 8002732:	6243      	str	r3, [r0, #36]	; 0x24
  if (++sp->cnt <= (cnt_t)0) {
 8002734:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002736:	3301      	adds	r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	63a3      	str	r3, [r4, #56]	; 0x38
 800273c:	f340 80c6 	ble.w	80028cc <oslib_test_006_001_execute.lto_priv.0+0x59c>
 8002740:	6a03      	ldr	r3, [r0, #32]
 8002742:	3301      	adds	r3, #1
 8002744:	6203      	str	r3, [r0, #32]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	d901      	bls.n	8002756 <oslib_test_006_001_execute.lto_priv.0+0x426>
    __sch_reschedule_ahead();
 8002752:	f7ff fbfd 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8002756:	f38b 8811 	msr	BASEPRI, fp
    for (i = 0; i < NUM_OBJECTS; i++) {
 800275a:	f108 0801 	add.w	r8, r8, #1
 800275e:	f1b8 0f04 	cmp.w	r8, #4
 8002762:	d1c7      	bne.n	80026f4 <oslib_test_006_001_execute.lto_priv.0+0x3c4>
}
 8002764:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("", "unexpected tokens");
 8002768:	490a      	ldr	r1, [pc, #40]	; (8002794 <oslib_test_006_001_execute.lto_priv.0+0x464>)
 800276a:	480b      	ldr	r0, [pc, #44]	; (8002798 <oslib_test_006_001_execute.lto_priv.0+0x468>)
 800276c:	f7fd bed0 	b.w	8000510 <__test_assert_sequence>
  chtest.failure_message = msg;
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <oslib_test_006_001_execute.lto_priv.0+0x478>)
 8002772:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8002774:	f240 1201 	movw	r2, #257	; 0x101
 8002778:	80aa      	strh	r2, [r5, #4]
  return true;
 800277a:	e677      	b.n	800246c <oslib_test_006_001_execute.lto_priv.0+0x13c>
  chtest.failure_message = msg;
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <oslib_test_006_001_execute.lto_priv.0+0x47c>)
 800277e:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8002780:	f240 1201 	movw	r2, #257	; 0x101
 8002784:	80aa      	strh	r2, [r5, #4]
  return true;
 8002786:	e671      	b.n	800246c <oslib_test_006_001_execute.lto_priv.0+0x13c>
  chtest.failure_message = msg;
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <oslib_test_006_001_execute.lto_priv.0+0x480>)
 800278a:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 800278c:	f240 1201 	movw	r2, #257	; 0x101
 8002790:	80aa      	strh	r2, [r5, #4]
  return true;
 8002792:	e66b      	b.n	800246c <oslib_test_006_001_execute.lto_priv.0+0x13c>
 8002794:	08015090 	.word	0x08015090
 8002798:	0801dcd4 	.word	0x0801dcd4
 800279c:	20000a48 	.word	0x20000a48
 80027a0:	20000a78 	.word	0x20000a78
 80027a4:	080150c0 	.word	0x080150c0
 80027a8:	080150b8 	.word	0x080150b8
 80027ac:	080150b4 	.word	0x080150b4
 80027b0:	080150a4 	.word	0x080150a4
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 80027b4:	0699      	lsls	r1, r3, #26
 80027b6:	d40b      	bmi.n	80027d0 <oslib_test_006_001_execute.lto_priv.0+0x4a0>
      LRU_INSERT_HEAD(ocp, objp);
 80027b8:	69e2      	ldr	r2, [r4, #28]
 80027ba:	e9cb 2602 	strd	r2, r6, [fp, #8]
 80027be:	f8c2 b00c 	str.w	fp, [r2, #12]
 80027c2:	f8c4 b01c 	str.w	fp, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 80027c6:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	e6c3      	b.n	8002558 <oslib_test_006_001_execute.lto_priv.0+0x228>
      LRU_INSERT_TAIL(ocp, objp);
 80027d0:	6a22      	ldr	r2, [r4, #32]
 80027d2:	e9cb 6202 	strd	r6, r2, [fp, #8]
 80027d6:	f8c2 b008 	str.w	fp, [r2, #8]
 80027da:	f8c4 b020 	str.w	fp, [r4, #32]
 80027de:	e7f2      	b.n	80027c6 <oslib_test_006_001_execute.lto_priv.0+0x496>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 80027e0:	f003 031a 	and.w	r3, r3, #26
 80027e4:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 80027e8:	f10b 0018 	add.w	r0, fp, #24
 80027ec:	f7fe fc68 	bl	80010c0 <chSemSignalI>
    return;
 80027f0:	e6bc      	b.n	800256c <oslib_test_006_001_execute.lto_priv.0+0x23c>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 80027f2:	0693      	lsls	r3, r2, #26
 80027f4:	d421      	bmi.n	800283a <oslib_test_006_001_execute.lto_priv.0+0x50a>
      LRU_INSERT_HEAD(ocp, objp);
 80027f6:	69e3      	ldr	r3, [r4, #28]
 80027f8:	e9c0 3602 	strd	r3, r6, [r0, #8]
 80027fc:	60d8      	str	r0, [r3, #12]
 80027fe:	61e0      	str	r0, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8002800:	f002 0212 	and.w	r2, r2, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	e705      	b.n	8002616 <oslib_test_006_001_execute.lto_priv.0+0x2e6>
  ch_queue_t *p = qp->next;
 800280a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800280c:	f8df c104 	ldr.w	ip, [pc, #260]	; 8002914 <oslib_test_006_001_execute.lto_priv.0+0x5e4>
  qp->next       = p->next;
 8002810:	6819      	ldr	r1, [r3, #0]
 8002812:	6321      	str	r1, [r4, #48]	; 0x30
    tp->u.rdymsg = MSG_OK;
 8002814:	2200      	movs	r2, #0
  qp->next->prev = qp;
 8002816:	f8c1 c004 	str.w	ip, [r1, #4]
 800281a:	629a      	str	r2, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800281c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  } while (unlikely(pqp->prio >= p->prio));
 8002820:	6899      	ldr	r1, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002822:	699a      	ldr	r2, [r3, #24]
    pqp = pqp->next;
 8002824:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002826:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800282a:	458c      	cmp	ip, r1
 800282c:	d2fa      	bcs.n	8002824 <oslib_test_006_001_execute.lto_priv.0+0x4f4>
  p->prev       = pqp->prev;
 800282e:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 8002830:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8002832:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 8002834:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8002836:	6053      	str	r3, [r2, #4]
  return __sch_ready_behind(tp);
 8002838:	e6f4      	b.n	8002624 <oslib_test_006_001_execute.lto_priv.0+0x2f4>
      LRU_INSERT_TAIL(ocp, objp);
 800283a:	6a23      	ldr	r3, [r4, #32]
 800283c:	e9c0 6302 	strd	r6, r3, [r0, #8]
 8002840:	6098      	str	r0, [r3, #8]
 8002842:	6220      	str	r0, [r4, #32]
 8002844:	e7dc      	b.n	8002800 <oslib_test_006_001_execute.lto_priv.0+0x4d0>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002846:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002848:	f003 031a 	and.w	r3, r3, #26
 800284c:	6243      	str	r3, [r0, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 800284e:	3018      	adds	r0, #24
 8002850:	f7fe fc36 	bl	80010c0 <chSemSignalI>
    return;
 8002854:	e6e9      	b.n	800262a <oslib_test_006_001_execute.lto_priv.0+0x2fa>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 8002856:	0699      	lsls	r1, r3, #26
 8002858:	d509      	bpl.n	800286e <oslib_test_006_001_execute.lto_priv.0+0x53e>
      LRU_INSERT_TAIL(ocp, objp);
 800285a:	6a22      	ldr	r2, [r4, #32]
 800285c:	e9c0 6202 	strd	r6, r2, [r0, #8]
 8002860:	6090      	str	r0, [r2, #8]
 8002862:	6220      	str	r0, [r4, #32]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8002864:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	e71c      	b.n	80026a8 <oslib_test_006_001_execute.lto_priv.0+0x378>
      LRU_INSERT_HEAD(ocp, objp);
 800286e:	69e2      	ldr	r2, [r4, #28]
 8002870:	e9c0 2602 	strd	r2, r6, [r0, #8]
 8002874:	60d0      	str	r0, [r2, #12]
 8002876:	61e0      	str	r0, [r4, #28]
 8002878:	e7f4      	b.n	8002864 <oslib_test_006_001_execute.lto_priv.0+0x534>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 800287a:	069a      	lsls	r2, r3, #26
 800287c:	d43c      	bmi.n	80028f8 <oslib_test_006_001_execute.lto_priv.0+0x5c8>
      LRU_INSERT_HEAD(ocp, objp);
 800287e:	69e2      	ldr	r2, [r4, #28]
 8002880:	e9c0 2602 	strd	r2, r6, [r0, #8]
 8002884:	60d0      	str	r0, [r2, #12]
 8002886:	61e0      	str	r0, [r4, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8002888:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	e74f      	b.n	8002732 <oslib_test_006_001_execute.lto_priv.0+0x402>
  ch_queue_t *p = qp->next;
 8002892:	6b22      	ldr	r2, [r4, #48]	; 0x30
  qp->next->prev = qp;
 8002894:	491f      	ldr	r1, [pc, #124]	; (8002914 <oslib_test_006_001_execute.lto_priv.0+0x5e4>)
  qp->next       = p->next;
 8002896:	6813      	ldr	r3, [r2, #0]
 8002898:	6323      	str	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800289a:	6059      	str	r1, [r3, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800289c:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800289e:	6893      	ldr	r3, [r2, #8]
 80028a0:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80028a4:	f882 9024 	strb.w	r9, [r2, #36]	; 0x24
    pqp = pqp->next;
 80028a8:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80028aa:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80028ae:	459c      	cmp	ip, r3
 80028b0:	d2fa      	bcs.n	80028a8 <oslib_test_006_001_execute.lto_priv.0+0x578>
  p->prev       = pqp->prev;
 80028b2:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 80028b4:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 80028b6:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 80028b8:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 80028ba:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 80028bc:	e6fb      	b.n	80026b6 <oslib_test_006_001_execute.lto_priv.0+0x386>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 80028be:	f003 031a 	and.w	r3, r3, #26
 80028c2:	6243      	str	r3, [r0, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 80028c4:	3018      	adds	r0, #24
 80028c6:	f7fe fbfb 	bl	80010c0 <chSemSignalI>
    return;
 80028ca:	e6f7      	b.n	80026bc <oslib_test_006_001_execute.lto_priv.0+0x38c>
  ch_queue_t *p = qp->next;
 80028cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 80028ce:	4911      	ldr	r1, [pc, #68]	; (8002914 <oslib_test_006_001_execute.lto_priv.0+0x5e4>)
  qp->next       = p->next;
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	6322      	str	r2, [r4, #48]	; 0x30
  qp->next->prev = qp;
 80028d4:	6051      	str	r1, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80028d6:	6999      	ldr	r1, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80028de:	f883 9024 	strb.w	r9, [r3, #36]	; 0x24
    pqp = pqp->next;
 80028e2:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80028e4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80028e8:	4594      	cmp	ip, r2
 80028ea:	d2fa      	bcs.n	80028e2 <oslib_test_006_001_execute.lto_priv.0+0x5b2>
  p->prev       = pqp->prev;
 80028ec:	684a      	ldr	r2, [r1, #4]
  p->next       = pqp;
 80028ee:	6019      	str	r1, [r3, #0]
  p->prev       = pqp->prev;
 80028f0:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 80028f2:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 80028f4:	604b      	str	r3, [r1, #4]
  return __sch_ready_behind(tp);
 80028f6:	e723      	b.n	8002740 <oslib_test_006_001_execute.lto_priv.0+0x410>
      LRU_INSERT_TAIL(ocp, objp);
 80028f8:	6a22      	ldr	r2, [r4, #32]
 80028fa:	e9c0 6202 	strd	r6, r2, [r0, #8]
 80028fe:	6090      	str	r0, [r2, #8]
 8002900:	6220      	str	r0, [r4, #32]
 8002902:	e7c1      	b.n	8002888 <oslib_test_006_001_execute.lto_priv.0+0x558>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8002904:	f003 031a 	and.w	r3, r3, #26
 8002908:	6243      	str	r3, [r0, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 800290a:	3018      	adds	r0, #24
 800290c:	f7fe fbd8 	bl	80010c0 <chSemSignalI>
    return;
 8002910:	e719      	b.n	8002746 <oslib_test_006_001_execute.lto_priv.0+0x416>
 8002912:	bf00      	nop
 8002914:	20000a78 	.word	0x20000a78
	...

08002920 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002920:	b570      	push	{r4, r5, r6, lr}
  thread_t *tp = __instance_get_currthread(currcore);
 8002922:	4c19      	ldr	r4, [pc, #100]	; (8002988 <chSchGoSleepTimeoutS+0x68>)
  if (TIME_INFINITE != timeout) {
 8002924:	1c4b      	adds	r3, r1, #1
  thread_t *tp = __instance_get_currthread(currcore);
 8002926:	68e5      	ldr	r5, [r4, #12]
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002928:	b086      	sub	sp, #24
 800292a:	4606      	mov	r6, r0
  if (TIME_INFINITE != timeout) {
 800292c:	d01c      	beq.n	8002968 <chSchGoSleepTimeoutS+0x48>
  vtp->func    = vtfunc;
 800292e:	4b17      	ldr	r3, [pc, #92]	; (800298c <chSchGoSleepTimeoutS+0x6c>)
  vt_enqueue(vtlp, vtp, delay);
 8002930:	4668      	mov	r0, sp
  vtp->func    = vtfunc;
 8002932:	e9cd 3503 	strd	r3, r5, [sp, #12]
  vtp->reload  = (sysinterval_t)0;
 8002936:	2300      	movs	r3, #0
 8002938:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 800293a:	f010 fd91 	bl	8013460 <vt_enqueue.constprop.0>
  ch_priority_queue_t *p = pqp->next;
 800293e:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8002940:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
  pqp->next       = p->next;
 8002944:	6803      	ldr	r3, [r0, #0]
 8002946:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8002948:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800294a:	2301      	movs	r3, #1
 800294c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  chSysSwitch(ntp, otp);
 8002950:	4629      	mov	r1, r5
  __instance_set_currthread(oip, ntp);
 8002952:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8002954:	f7fd fcb4 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8002958:	9b00      	ldr	r3, [sp, #0]
 800295a:	b113      	cbz	r3, 8002962 <chSchGoSleepTimeoutS+0x42>
      chVTDoResetI(&vt);
 800295c:	4668      	mov	r0, sp
 800295e:	f7ff fa2f 	bl	8001dc0 <chVTDoResetI>
}
 8002962:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002964:	b006      	add	sp, #24
 8002966:	bd70      	pop	{r4, r5, r6, pc}
  ch_priority_queue_t *p = pqp->next;
 8002968:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800296a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
  pqp->next       = p->next;
 800296e:	6803      	ldr	r3, [r0, #0]
 8002970:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 8002972:	2201      	movs	r2, #1
  pqp->next->prev = pqp;
 8002974:	605c      	str	r4, [r3, #4]
  chSysSwitch(ntp, otp);
 8002976:	4629      	mov	r1, r5
  ntp->state = CH_STATE_CURRENT;
 8002978:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 800297c:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 800297e:	f7fd fc9f 	bl	80002c0 <__port_switch>
}
 8002982:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002984:	b006      	add	sp, #24
 8002986:	bd70      	pop	{r4, r5, r6, pc}
 8002988:	20000a90 	.word	0x20000a90
 800298c:	08001051 	.word	0x08001051

08002990 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8002990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002994:	b083      	sub	sp, #12
  qnotify_t nfy = iqp->q_notify;
 8002996:	69c7      	ldr	r7, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 8002998:	9201      	str	r2, [sp, #4]
 800299a:	469a      	mov	sl, r3
 800299c:	f04f 0930 	mov.w	r9, #48	; 0x30
 80029a0:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80029a4:	2a00      	cmp	r2, #0
 80029a6:	d033      	beq.n	8002a10 <iqReadTimeout+0x80>
 80029a8:	f8dd b004 	ldr.w	fp, [sp, #4]
 80029ac:	4604      	mov	r4, r0
 80029ae:	460e      	mov	r6, r1
  if (n > iqGetFullI(iqp)) {
 80029b0:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80029b2:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 80029b4:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80029b6:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 80029b8:	bf8c      	ite	hi
 80029ba:	68a5      	ldrhi	r5, [r4, #8]
 80029bc:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80029be:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 80029c2:	45a8      	cmp	r8, r5
 80029c4:	d831      	bhi.n	8002a2a <iqReadTimeout+0x9a>
  else if (n > s1) {
 80029c6:	d22a      	bcs.n	8002a1e <iqReadTimeout+0x8e>
    s2 = n - s1;
 80029c8:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80029cc:	4642      	mov	r2, r8
 80029ce:	4630      	mov	r0, r6
    s2 = n - s1;
 80029d0:	9300      	str	r3, [sp, #0]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80029d2:	f012 f957 	bl	8014c84 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80029d6:	eb06 0008 	add.w	r0, r6, r8
 80029da:	f8dd 8000 	ldr.w	r8, [sp]
 80029de:	68e1      	ldr	r1, [r4, #12]
 80029e0:	4642      	mov	r2, r8
 80029e2:	f012 f94f 	bl	8014c84 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80029e6:	68e1      	ldr	r1, [r4, #12]
 80029e8:	4441      	add	r1, r8
  iqp->q_counter -= n;
 80029ea:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr += n;
 80029ec:	61a1      	str	r1, [r4, #24]
  iqp->q_counter -= n;
 80029ee:	1b52      	subs	r2, r2, r5
 80029f0:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 80029f2:	b30d      	cbz	r5, 8002a38 <iqReadTimeout+0xa8>
      if (nfy != NULL) {
 80029f4:	b10f      	cbz	r7, 80029fa <iqReadTimeout+0x6a>
        nfy(iqp);
 80029f6:	4620      	mov	r0, r4
 80029f8:	47b8      	blx	r7
 80029fa:	2300      	movs	r3, #0
 80029fc:	f383 8811 	msr	BASEPRI, r3
      n  -= done;
 8002a00:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002a04:	442e      	add	r6, r5
 8002a06:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002a0a:	f1bb 0f00 	cmp.w	fp, #0
 8002a0e:	d1cf      	bne.n	80029b0 <iqReadTimeout+0x20>
 8002a10:	9801      	ldr	r0, [sp, #4]
 8002a12:	2300      	movs	r3, #0
 8002a14:	f383 8811 	msr	BASEPRI, r3
}
 8002a18:	b003      	add	sp, #12
 8002a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002a1e:	462a      	mov	r2, r5
 8002a20:	4630      	mov	r0, r6
 8002a22:	f012 f92f 	bl	8014c84 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002a26:	68e1      	ldr	r1, [r4, #12]
 8002a28:	e7df      	b.n	80029ea <iqReadTimeout+0x5a>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002a2a:	462a      	mov	r2, r5
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f012 f929 	bl	8014c84 <memcpy>
    iqp->q_rdptr += n;
 8002a32:	69a1      	ldr	r1, [r4, #24]
 8002a34:	4429      	add	r1, r5
 8002a36:	e7d8      	b.n	80029ea <iqReadTimeout+0x5a>
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <iqReadTimeout+0xdc>)
 8002a3a:	68da      	ldr	r2, [r3, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002a3c:	f1ba 0f00 	cmp.w	sl, #0
 8002a40:	d00a      	beq.n	8002a58 <iqReadTimeout+0xc8>
  p->prev       = qp->prev;
 8002a42:	6861      	ldr	r1, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002a44:	2004      	movs	r0, #4
 8002a46:	e9c2 4100 	strd	r4, r1, [r2]
  p->prev->next = p;
 8002a4a:	600a      	str	r2, [r1, #0]
 8002a4c:	4651      	mov	r1, sl
  qp->prev      = p;
 8002a4e:	6062      	str	r2, [r4, #4]
 8002a50:	f7ff ff66 	bl	8002920 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8002a54:	2800      	cmp	r0, #0
 8002a56:	d0ab      	beq.n	80029b0 <iqReadTimeout+0x20>
  return max - n;
 8002a58:	9b01      	ldr	r3, [sp, #4]
 8002a5a:	eba3 000b 	sub.w	r0, r3, fp
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f383 8811 	msr	BASEPRI, r3
}
 8002a64:	b003      	add	sp, #12
 8002a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000a90 	.word	0x20000a90

08002a70 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
 8002a74:	300c      	adds	r0, #12
 8002a76:	f7ff bf8b 	b.w	8002990 <iqReadTimeout>
 8002a7a:	bf00      	nop
 8002a7c:	0000      	movs	r0, r0
	...

08002a80 <_readt.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002a80:	300c      	adds	r0, #12
 8002a82:	f7ff bf85 	b.w	8002990 <iqReadTimeout>
 8002a86:	bf00      	nop
	...

08002a90 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	2330      	movs	r3, #48	; 0x30
 8002a94:	4604      	mov	r4, r0
 8002a96:	460d      	mov	r5, r1
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	4e16      	ldr	r6, [pc, #88]	; (8002af8 <iqGetTimeout+0x68>)
}
 8002a9e:	e008      	b.n	8002ab2 <iqGetTimeout+0x22>
  p->prev       = qp->prev;
 8002aa0:	6862      	ldr	r2, [r4, #4]
 8002aa2:	e9c3 4200 	strd	r4, r2, [r3]
  p->prev->next = p;
 8002aa6:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8002aa8:	6063      	str	r3, [r4, #4]
 8002aaa:	f7ff ff39 	bl	8002920 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	db08      	blt.n	8002ac4 <iqGetTimeout+0x34>
  while (iqIsEmptyI(iqp)) {
 8002ab2:	68a3      	ldr	r3, [r4, #8]
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	2004      	movs	r0, #4
 8002ab8:	b943      	cbnz	r3, 8002acc <iqGetTimeout+0x3c>
 8002aba:	68f3      	ldr	r3, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002abc:	2d00      	cmp	r5, #0
 8002abe:	d1ef      	bne.n	8002aa0 <iqGetTimeout+0x10>
    return MSG_TIMEOUT;
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f383 8811 	msr	BASEPRI, r3
}
 8002aca:	bd70      	pop	{r4, r5, r6, pc}
  iqp->q_counter--;
 8002acc:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8002ace:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	60a3      	str	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8002ad4:	6923      	ldr	r3, [r4, #16]
  b = *iqp->q_rdptr++;
 8002ad6:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8002ad8:	429a      	cmp	r2, r3
    iqp->q_rdptr = iqp->q_buffer;
 8002ada:	bf28      	it	cs
 8002adc:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8002ade:	61a2      	str	r2, [r4, #24]
 8002ae0:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8002ae2:	bf28      	it	cs
 8002ae4:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8002ae6:	69e3      	ldr	r3, [r4, #28]
 8002ae8:	b10b      	cbz	r3, 8002aee <iqGetTimeout+0x5e>
    iqp->q_notify(iqp);
 8002aea:	4620      	mov	r0, r4
 8002aec:	4798      	blx	r3
 8002aee:	2300      	movs	r3, #0
 8002af0:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8002af4:	4628      	mov	r0, r5
}
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	20000a90 	.word	0x20000a90
 8002afc:	00000000 	.word	0x00000000

08002b00 <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002b00:	f04f 31ff 	mov.w	r1, #4294967295
 8002b04:	300c      	adds	r0, #12
 8002b06:	f7ff bfc3 	b.w	8002a90 <iqGetTimeout>
 8002b0a:	bf00      	nop
 8002b0c:	0000      	movs	r0, r0
	...

08002b10 <_gett.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002b10:	300c      	adds	r0, #12
 8002b12:	f7ff bfbd 	b.w	8002a90 <iqGetTimeout>
 8002b16:	bf00      	nop
	...

08002b20 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8002b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b24:	2330      	movs	r3, #48	; 0x30
 8002b26:	4604      	mov	r4, r0
 8002b28:	460f      	mov	r7, r1
 8002b2a:	4616      	mov	r6, r2
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8002b94 <oqPutTimeout+0x74>
 8002b34:	e008      	b.n	8002b48 <oqPutTimeout+0x28>
  p->prev       = qp->prev;
 8002b36:	6865      	ldr	r5, [r4, #4]
 8002b38:	e9c3 4500 	strd	r4, r5, [r3]
  p->prev->next = p;
 8002b3c:	602b      	str	r3, [r5, #0]
  qp->prev      = p;
 8002b3e:	6063      	str	r3, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002b40:	f7ff feee 	bl	8002920 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002b44:	2800      	cmp	r0, #0
 8002b46:	db09      	blt.n	8002b5c <oqPutTimeout+0x3c>
  while (oqIsFullI(oqp)) {
 8002b48:	68a3      	ldr	r3, [r4, #8]
 8002b4a:	4631      	mov	r1, r6
 8002b4c:	2004      	movs	r0, #4
 8002b4e:	b953      	cbnz	r3, 8002b66 <oqPutTimeout+0x46>
 8002b50:	f8d8 300c 	ldr.w	r3, [r8, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002b54:	2e00      	cmp	r6, #0
 8002b56:	d1ee      	bne.n	8002b36 <oqPutTimeout+0x16>
    return MSG_TIMEOUT;
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f383 8811 	msr	BASEPRI, r3
}
 8002b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *oqp->q_wrptr++ = b;
 8002b66:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8002b68:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002b6a:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8002b6c:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8002b6e:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8002b70:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002b72:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8002b74:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002b78:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002b7a:	bf24      	itt	cs
 8002b7c:	68e3      	ldrcs	r3, [r4, #12]
 8002b7e:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8002b80:	69e3      	ldr	r3, [r4, #28]
 8002b82:	b10b      	cbz	r3, 8002b88 <oqPutTimeout+0x68>
    oqp->q_notify(oqp);
 8002b84:	4620      	mov	r0, r4
 8002b86:	4798      	blx	r3
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f380 8811 	msr	BASEPRI, r0
}
 8002b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b92:	bf00      	nop
 8002b94:	20000a90 	.word	0x20000a90
	...

08002ba0 <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba4:	3030      	adds	r0, #48	; 0x30
 8002ba6:	f7ff bfbb 	b.w	8002b20 <oqPutTimeout>
 8002baa:	bf00      	nop
 8002bac:	0000      	movs	r0, r0
	...

08002bb0 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002bb0:	3030      	adds	r0, #48	; 0x30
 8002bb2:	f7ff bfb5 	b.w	8002b20 <oqPutTimeout>
 8002bb6:	bf00      	nop
	...

08002bc0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bc4:	b083      	sub	sp, #12
  qnotify_t nfy = oqp->q_notify;
 8002bc6:	f8d0 801c 	ldr.w	r8, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 8002bca:	9201      	str	r2, [sp, #4]
 8002bcc:	469a      	mov	sl, r3
 8002bce:	f04f 0930 	mov.w	r9, #48	; 0x30
 8002bd2:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8002bd6:	b382      	cbz	r2, 8002c3a <oqWriteTimeout+0x7a>
 8002bd8:	f8dd b004 	ldr.w	fp, [sp, #4]
 8002bdc:	4604      	mov	r4, r0
 8002bde:	460f      	mov	r7, r1
  if (n > oqGetEmptyI(oqp)) {
 8002be0:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002be2:	e9d4 6004 	ldrd	r6, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 8002be6:	459b      	cmp	fp, r3
    n = oqGetEmptyI(oqp);
 8002be8:	bf8c      	ite	hi
 8002bea:	68a5      	ldrhi	r5, [r4, #8]
 8002bec:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002bee:	1a36      	subs	r6, r6, r0
  if (n < s1) {
 8002bf0:	42ae      	cmp	r6, r5
 8002bf2:	d82f      	bhi.n	8002c54 <oqWriteTimeout+0x94>
  else if (n > s1) {
 8002bf4:	d228      	bcs.n	8002c48 <oqWriteTimeout+0x88>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002bf6:	4632      	mov	r2, r6
 8002bf8:	4639      	mov	r1, r7
 8002bfa:	f012 f843 	bl	8014c84 <memcpy>
    s2 = n - s1;
 8002bfe:	1baa      	subs	r2, r5, r6
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8002c00:	68e0      	ldr	r0, [r4, #12]
 8002c02:	9200      	str	r2, [sp, #0]
 8002c04:	19b9      	adds	r1, r7, r6
 8002c06:	f012 f83d 	bl	8014c84 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002c0a:	68e3      	ldr	r3, [r4, #12]
 8002c0c:	9a00      	ldr	r2, [sp, #0]
 8002c0e:	441a      	add	r2, r3
  oqp->q_counter -= n;
 8002c10:	68a3      	ldr	r3, [r4, #8]
    oqp->q_wrptr += n;
 8002c12:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8002c14:	1b5b      	subs	r3, r3, r5
 8002c16:	60a3      	str	r3, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8002c18:	b31d      	cbz	r5, 8002c62 <oqWriteTimeout+0xa2>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8002c1a:	f1b8 0f00 	cmp.w	r8, #0
 8002c1e:	d001      	beq.n	8002c24 <oqWriteTimeout+0x64>
        nfy(oqp);
 8002c20:	4620      	mov	r0, r4
 8002c22:	47c0      	blx	r8
 8002c24:	2300      	movs	r3, #0
 8002c26:	f383 8811 	msr	BASEPRI, r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8002c2a:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002c2e:	442f      	add	r7, r5
 8002c30:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002c34:	f1bb 0f00 	cmp.w	fp, #0
 8002c38:	d1d2      	bne.n	8002be0 <oqWriteTimeout+0x20>
 8002c3a:	9801      	ldr	r0, [sp, #4]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8002c42:	b003      	add	sp, #12
 8002c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002c48:	462a      	mov	r2, r5
 8002c4a:	4639      	mov	r1, r7
 8002c4c:	f012 f81a 	bl	8014c84 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8002c50:	68e2      	ldr	r2, [r4, #12]
 8002c52:	e7dd      	b.n	8002c10 <oqWriteTimeout+0x50>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002c54:	462a      	mov	r2, r5
 8002c56:	4639      	mov	r1, r7
 8002c58:	f012 f814 	bl	8014c84 <memcpy>
    oqp->q_wrptr += n;
 8002c5c:	6962      	ldr	r2, [r4, #20]
 8002c5e:	442a      	add	r2, r5
 8002c60:	e7d6      	b.n	8002c10 <oqWriteTimeout+0x50>
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <oqWriteTimeout+0xd4>)
 8002c64:	68db      	ldr	r3, [r3, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002c66:	f1ba 0f00 	cmp.w	sl, #0
 8002c6a:	d00a      	beq.n	8002c82 <oqWriteTimeout+0xc2>
  p->prev       = qp->prev;
 8002c6c:	6862      	ldr	r2, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002c6e:	4651      	mov	r1, sl
 8002c70:	e9c3 4200 	strd	r4, r2, [r3]
 8002c74:	2004      	movs	r0, #4
  p->prev->next = p;
 8002c76:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8002c78:	6063      	str	r3, [r4, #4]
 8002c7a:	f7ff fe51 	bl	8002920 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d0ae      	beq.n	8002be0 <oqWriteTimeout+0x20>
  return max - n;
 8002c82:	9b01      	ldr	r3, [sp, #4]
 8002c84:	eba3 000b 	sub.w	r0, r3, fp
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f383 8811 	msr	BASEPRI, r3
}
 8002c8e:	b003      	add	sp, #12
 8002c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c94:	20000a90 	.word	0x20000a90
	...

08002ca0 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca4:	3030      	adds	r0, #48	; 0x30
 8002ca6:	f7ff bf8b 	b.w	8002bc0 <oqWriteTimeout>
 8002caa:	bf00      	nop
 8002cac:	0000      	movs	r0, r0
	...

08002cb0 <_writet.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002cb0:	3030      	adds	r0, #48	; 0x30
 8002cb2:	f7ff bf85 	b.w	8002bc0 <oqWriteTimeout>
 8002cb6:	bf00      	nop
	...

08002cc0 <chMBPostTimeout>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8002cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cc4:	4604      	mov	r4, r0
 8002cc6:	4688      	mov	r8, r1
 8002cc8:	4691      	mov	r9, r2
 8002cca:	2330      	movs	r3, #48	; 0x30
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	4e2e      	ldr	r6, [pc, #184]	; (8002d8c <chMBPostTimeout+0xcc>)

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8002cd2:	f100 0718 	add.w	r7, r0, #24
 8002cd6:	e007      	b.n	8002ce8 <chMBPostTimeout+0x28>
  p->prev       = qp->prev;
 8002cd8:	69e5      	ldr	r5, [r4, #28]
 8002cda:	e9c3 7500 	strd	r7, r5, [r3]
  p->prev->next = p;
 8002cde:	602b      	str	r3, [r5, #0]
  qp->prev      = p;
 8002ce0:	61e3      	str	r3, [r4, #28]
 8002ce2:	f7ff fe1d 	bl	8002920 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 8002ce6:	b988      	cbnz	r0, 8002d0c <chMBPostTimeout+0x4c>
    if (mbp->reset) {
 8002ce8:	7d23      	ldrb	r3, [r4, #20]
 8002cea:	4649      	mov	r1, r9
 8002cec:	2004      	movs	r0, #4
 8002cee:	b993      	cbnz	r3, 8002d16 <chMBPostTimeout+0x56>
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
 8002cf0:	e9d4 2500 	ldrd	r2, r5, [r4]
 */
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return mbp->cnt;
 8002cf4:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8002cf6:	eba5 0c02 	sub.w	ip, r5, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8002cfa:	ebb3 0fac 	cmp.w	r3, ip, asr #2
 8002cfe:	d111      	bne.n	8002d24 <chMBPostTimeout+0x64>
 8002d00:	68f3      	ldr	r3, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8002d02:	f1b9 0f00 	cmp.w	r9, #0
 8002d06:	d1e7      	bne.n	8002cd8 <chMBPostTimeout+0x18>
    return MSG_TIMEOUT;
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f383 8811 	msr	BASEPRI, r3
}
 8002d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return MSG_RESET;
 8002d16:	f06f 0001 	mvn.w	r0, #1
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f383 8811 	msr	BASEPRI, r3
}
 8002d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      *mbp->wrptr++ = msg;
 8002d24:	68a0      	ldr	r0, [r4, #8]
 8002d26:	1d01      	adds	r1, r0, #4
 8002d28:	60a1      	str	r1, [r4, #8]
      if (mbp->wrptr >= mbp->top) {
 8002d2a:	428d      	cmp	r5, r1
  return (bool)(qp->next != qp);
 8002d2c:	6a21      	ldr	r1, [r4, #32]
      *mbp->wrptr++ = msg;
 8002d2e:	f8c0 8000 	str.w	r8, [r0]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8002d32:	f104 0020 	add.w	r0, r4, #32
        mbp->wrptr = mbp->buffer;
 8002d36:	bf88      	it	hi
 8002d38:	68a2      	ldrhi	r2, [r4, #8]
 8002d3a:	60a2      	str	r2, [r4, #8]
      mbp->cnt++;
 8002d3c:	3301      	adds	r3, #1
  if (ch_queue_notempty(&tqp->queue)) {
 8002d3e:	4288      	cmp	r0, r1
 8002d40:	6123      	str	r3, [r4, #16]
 8002d42:	d011      	beq.n	8002d68 <chMBPostTimeout+0xa8>
  qp->next       = p->next;
 8002d44:	680b      	ldr	r3, [r1, #0]
 8002d46:	6223      	str	r3, [r4, #32]
  tp->u.rdymsg = msg;
 8002d48:	2200      	movs	r2, #0
  qp->next->prev = qp;
 8002d4a:	6058      	str	r0, [r3, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002d4c:	698b      	ldr	r3, [r1, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8002d4e:	6888      	ldr	r0, [r1, #8]
 8002d50:	628a      	str	r2, [r1, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8002d52:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
    pqp = pqp->next;
 8002d56:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	4282      	cmp	r2, r0
 8002d5c:	d2fb      	bcs.n	8002d56 <chMBPostTimeout+0x96>
  p->prev       = pqp->prev;
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8002d64:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8002d66:	6059      	str	r1, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <chMBPostTimeout+0xcc>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	6892      	ldr	r2, [r2, #8]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d907      	bls.n	8002d86 <chMBPostTimeout+0xc6>
    __sch_reschedule_ahead();
 8002d76:	f7ff f8eb 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
      return MSG_OK;
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f383 8811 	msr	BASEPRI, r3
}
 8002d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return MSG_OK;
 8002d86:	2000      	movs	r0, #0
 8002d88:	e7c0      	b.n	8002d0c <chMBPostTimeout+0x4c>
 8002d8a:	bf00      	nop
 8002d8c:	20000a90 	.word	0x20000a90

08002d90 <chMBFetchTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8002d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 8002d94:	4f26      	ldr	r7, [pc, #152]	; (8002e30 <chMBFetchTimeoutS+0xa0>)
 8002d96:	4604      	mov	r4, r0
 8002d98:	4688      	mov	r8, r1
 8002d9a:	4691      	mov	r9, r2

      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8002d9c:	f100 0620 	add.w	r6, r0, #32
 8002da0:	e00a      	b.n	8002db8 <chMBFetchTimeoutS+0x28>
  return mbp->cnt;
 8002da2:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8002da4:	b98b      	cbnz	r3, 8002dca <chMBFetchTimeoutS+0x3a>
 8002da6:	68fb      	ldr	r3, [r7, #12]
  p->prev       = qp->prev;
 8002da8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002daa:	e9c3 6500 	strd	r6, r5, [r3]
  p->prev->next = p;
 8002dae:	602b      	str	r3, [r5, #0]
  qp->prev      = p;
 8002db0:	6263      	str	r3, [r4, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002db2:	f7ff fdb5 	bl	8002920 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 8002db6:	b930      	cbnz	r0, 8002dc6 <chMBFetchTimeoutS+0x36>
    if (mbp->reset) {
 8002db8:	7d23      	ldrb	r3, [r4, #20]
 8002dba:	4649      	mov	r1, r9
 8002dbc:	2004      	movs	r0, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0ef      	beq.n	8002da2 <chMBFetchTimeoutS+0x12>
      return MSG_RESET;
 8002dc2:	f06f 0001 	mvn.w	r0, #1

  return rdymsg;
}
 8002dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      *msgp = *mbp->rdptr++;
 8002dca:	68e1      	ldr	r1, [r4, #12]
 8002dcc:	180a      	adds	r2, r1, r0
 8002dce:	6809      	ldr	r1, [r1, #0]
 8002dd0:	60e2      	str	r2, [r4, #12]
 8002dd2:	f8c8 1000 	str.w	r1, [r8]
      if (mbp->rdptr >= mbp->top) {
 8002dd6:	6861      	ldr	r1, [r4, #4]
 8002dd8:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->buffer;
 8002dda:	bf24      	itt	cs
 8002ddc:	6822      	ldrcs	r2, [r4, #0]
 8002dde:	60e2      	strcs	r2, [r4, #12]
  return (bool)(qp->next != qp);
 8002de0:	69a2      	ldr	r2, [r4, #24]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8002de2:	f104 0118 	add.w	r1, r4, #24
      mbp->cnt--;
 8002de6:	3b01      	subs	r3, #1
  if (ch_queue_notempty(&tqp->queue)) {
 8002de8:	4291      	cmp	r1, r2
 8002dea:	6123      	str	r3, [r4, #16]
 8002dec:	d011      	beq.n	8002e12 <chMBFetchTimeoutS+0x82>
  qp->next       = p->next;
 8002dee:	6813      	ldr	r3, [r2, #0]
 8002df0:	61a3      	str	r3, [r4, #24]
  tp->u.rdymsg = msg;
 8002df2:	2000      	movs	r0, #0
  qp->next->prev = qp;
 8002df4:	6059      	str	r1, [r3, #4]
  } while (unlikely(pqp->prio >= p->prio));
 8002df6:	6894      	ldr	r4, [r2, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002df8:	6993      	ldr	r3, [r2, #24]
 8002dfa:	6290      	str	r0, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8002dfc:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
    pqp = pqp->next;
 8002e00:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002e02:	6899      	ldr	r1, [r3, #8]
 8002e04:	42a1      	cmp	r1, r4
 8002e06:	d2fb      	bcs.n	8002e00 <chMBFetchTimeoutS+0x70>
  p->prev       = pqp->prev;
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 8002e0e:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 8002e10:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <chMBFetchTimeoutS+0xa0>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	6892      	ldr	r2, [r2, #8]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d904      	bls.n	8002e2a <chMBFetchTimeoutS+0x9a>
    __sch_reschedule_ahead();
 8002e20:	f7ff f896 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
      return MSG_OK;
 8002e24:	2000      	movs	r0, #0
}
 8002e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return MSG_OK;
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	e7cb      	b.n	8002dc6 <chMBFetchTimeoutS+0x36>
 8002e2e:	bf00      	nop
 8002e30:	20000a90 	.word	0x20000a90
	...

08002e40 <oslib_test_002_003_execute.lto_priv.0>:
}

static void oslib_test_002_003_execute(void) {
 8002e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [2.3.1] Filling the mailbox.*/
  test_set_step(1);
 8002e44:	4f55      	ldr	r7, [pc, #340]	; (8002f9c <oslib_test_002_003_execute.lto_priv.0+0x15c>)
 8002e46:	4e56      	ldr	r6, [pc, #344]	; (8002fa0 <oslib_test_002_003_execute.lto_priv.0+0x160>)
 8002e48:	2301      	movs	r3, #1
static void oslib_test_002_003_execute(void) {
 8002e4a:	b082      	sub	sp, #8
  test_set_step(1);
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	2442      	movs	r4, #66	; 0x42
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8002e50:	4621      	mov	r1, r4
 8002e52:	f04f 32ff 	mov.w	r2, #4294967295
 8002e56:	4630      	mov	r0, r6
 8002e58:	f7ff ff32 	bl	8002cc0 <chMBPostTimeout>
    for (i = 0; i < MB_SIZE; i++) {
 8002e5c:	3401      	adds	r4, #1
  if (!condition) {
 8002e5e:	4605      	mov	r5, r0
 8002e60:	2800      	cmp	r0, #0
 8002e62:	d13c      	bne.n	8002ede <oslib_test_002_003_execute.lto_priv.0+0x9e>
 8002e64:	2c46      	cmp	r4, #70	; 0x46
 8002e66:	d1f3      	bne.n	8002e50 <oslib_test_002_003_execute.lto_priv.0+0x10>
  }
  test_end_step(1);

  /* [2.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 8002e68:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8002e6a:	484d      	ldr	r0, [pc, #308]	; (8002fa0 <oslib_test_002_003_execute.lto_priv.0+0x160>)
  test_set_step(2);
 8002e6c:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8002e6e:	2201      	movs	r2, #1
 8002e70:	2158      	movs	r1, #88	; 0x58
 8002e72:	f7ff ff25 	bl	8002cc0 <chMBPostTimeout>
 8002e76:	3001      	adds	r0, #1
 8002e78:	d131      	bne.n	8002ede <oslib_test_002_003_execute.lto_priv.0+0x9e>
 8002e7a:	f04f 0830 	mov.w	r8, #48	; 0x30
 8002e7e:	f388 8811 	msr	BASEPRI, r8
  if (mbp->reset) {
 8002e82:	7d34      	ldrb	r4, [r6, #20]
 8002e84:	2c00      	cmp	r4, #0
 8002e86:	d17e      	bne.n	8002f86 <oslib_test_002_003_execute.lto_priv.0+0x146>
  return (size_t)(mbp->top - mbp->buffer);
 8002e88:	e9d6 1300 	ldrd	r1, r3, [r6]
  return mbp->cnt;
 8002e8c:	6932      	ldr	r2, [r6, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8002e8e:	1a58      	subs	r0, r3, r1
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8002e90:	ebb2 0fa0 	cmp.w	r2, r0, asr #2
 8002e94:	d02b      	beq.n	8002eee <oslib_test_002_003_execute.lto_priv.0+0xae>
    *mbp->wrptr++ = msg;
 8002e96:	68b4      	ldr	r4, [r6, #8]
    mbp->cnt++;
 8002e98:	3201      	adds	r2, #1
    *mbp->wrptr++ = msg;
 8002e9a:	1d20      	adds	r0, r4, #4
 8002e9c:	2558      	movs	r5, #88	; 0x58
 8002e9e:	60b0      	str	r0, [r6, #8]
    if (mbp->wrptr >= mbp->top) {
 8002ea0:	4283      	cmp	r3, r0
    *mbp->wrptr++ = msg;
 8002ea2:	6025      	str	r5, [r4, #0]
  return (bool)(qp->next != qp);
 8002ea4:	6a33      	ldr	r3, [r6, #32]
    mbp->cnt++;
 8002ea6:	6132      	str	r2, [r6, #16]
 8002ea8:	4a3e      	ldr	r2, [pc, #248]	; (8002fa4 <oslib_test_002_003_execute.lto_priv.0+0x164>)
      mbp->wrptr = mbp->buffer;
 8002eaa:	bf88      	it	hi
 8002eac:	68b1      	ldrhi	r1, [r6, #8]
 8002eae:	60b1      	str	r1, [r6, #8]
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d064      	beq.n	8002f7e <oslib_test_002_003_execute.lto_priv.0+0x13e>
  qp->next       = p->next;
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	6230      	str	r0, [r6, #32]
 8002eb8:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8002eba:	6042      	str	r2, [r0, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002ebc:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8002ebe:	6898      	ldr	r0, [r3, #8]
 8002ec0:	6299      	str	r1, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8002ec2:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 8002ec6:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002ec8:	6891      	ldr	r1, [r2, #8]
 8002eca:	4281      	cmp	r1, r0
 8002ecc:	d2fb      	bcs.n	8002ec6 <oslib_test_002_003_execute.lto_priv.0+0x86>
  p->prev       = pqp->prev;
 8002ece:	6851      	ldr	r1, [r2, #4]
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8002ed6:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8002ed8:	6053      	str	r3, [r2, #4]
 8002eda:	f380 8811 	msr	BASEPRI, r0
  chtest.failure_message = msg;
 8002ede:	4b32      	ldr	r3, [pc, #200]	; (8002fa8 <oslib_test_002_003_execute.lto_priv.0+0x168>)
 8002ee0:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8002ee2:	f240 1201 	movw	r2, #257	; 0x101
 8002ee6:	80ba      	strh	r2, [r7, #4]
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
  test_end_step(4);
}
 8002ee8:	b002      	add	sp, #8
 8002eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eee:	f384 8811 	msr	BASEPRI, r4
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	2058      	movs	r0, #88	; 0x58
 8002ef6:	f010 f8b3 	bl	8013060 <chMBPostAheadTimeout.constprop.0>
  if (!condition) {
 8002efa:	3001      	adds	r0, #1
 8002efc:	d1ef      	bne.n	8002ede <oslib_test_002_003_execute.lto_priv.0+0x9e>
 8002efe:	f388 8811 	msr	BASEPRI, r8
    msg1 = chMBPostAheadI(&mb1, 'X');
 8002f02:	2058      	movs	r0, #88	; 0x58
 8002f04:	f010 f86c 	bl	8012fe0 <chMBPostAheadI.constprop.0>
 8002f08:	f384 8811 	msr	BASEPRI, r4
 8002f0c:	3001      	adds	r0, #1
 8002f0e:	d1e6      	bne.n	8002ede <oslib_test_002_003_execute.lto_priv.0+0x9e>
  test_set_step(3);
 8002f10:	2303      	movs	r3, #3
 8002f12:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8002f14:	f010 f904 	bl	8013120 <chMBReset.constprop.0>
  test_set_step(4);
 8002f18:	2304      	movs	r3, #4
 8002f1a:	603b      	str	r3, [r7, #0]
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 8002f1c:	7534      	strb	r4, [r6, #20]
 8002f1e:	f388 8811 	msr	BASEPRI, r8
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 8002f22:	2201      	movs	r2, #1
 8002f24:	eb0d 0103 	add.w	r1, sp, r3
 8002f28:	481d      	ldr	r0, [pc, #116]	; (8002fa0 <oslib_test_002_003_execute.lto_priv.0+0x160>)
 8002f2a:	f7ff ff31 	bl	8002d90 <chMBFetchTimeoutS>
 8002f2e:	f384 8811 	msr	BASEPRI, r4
 8002f32:	3001      	adds	r0, #1
 8002f34:	d1d3      	bne.n	8002ede <oslib_test_002_003_execute.lto_priv.0+0x9e>
 8002f36:	f388 8811 	msr	BASEPRI, r8

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8002f3a:	7d33      	ldrb	r3, [r6, #20]
 8002f3c:	bb53      	cbnz	r3, 8002f94 <oslib_test_002_003_execute.lto_priv.0+0x154>
  return mbp->cnt;
 8002f3e:	6932      	ldr	r2, [r6, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8002f40:	b322      	cbz	r2, 8002f8c <oslib_test_002_003_execute.lto_priv.0+0x14c>
    *msgp = *mbp->rdptr++;
 8002f42:	68f1      	ldr	r1, [r6, #12]
 8002f44:	1d0b      	adds	r3, r1, #4
 8002f46:	6809      	ldr	r1, [r1, #0]
 8002f48:	9101      	str	r1, [sp, #4]
    if (mbp->rdptr >= mbp->top) {
 8002f4a:	6871      	ldr	r1, [r6, #4]
    *msgp = *mbp->rdptr++;
 8002f4c:	60f3      	str	r3, [r6, #12]
    if (mbp->rdptr >= mbp->top) {
 8002f4e:	428b      	cmp	r3, r1
      mbp->rdptr = mbp->buffer;
 8002f50:	bf24      	itt	cs
 8002f52:	6833      	ldrcs	r3, [r6, #0]
 8002f54:	60f3      	strcs	r3, [r6, #12]
 8002f56:	4915      	ldr	r1, [pc, #84]	; (8002fac <oslib_test_002_003_execute.lto_priv.0+0x16c>)
  return (bool)(qp->next != qp);
 8002f58:	69b3      	ldr	r3, [r6, #24]
    }
    mbp->cnt--;
 8002f5a:	3a01      	subs	r2, #1
 8002f5c:	428b      	cmp	r3, r1
 8002f5e:	6132      	str	r2, [r6, #16]
 8002f60:	d00d      	beq.n	8002f7e <oslib_test_002_003_execute.lto_priv.0+0x13e>
  qp->next       = p->next;
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	61b2      	str	r2, [r6, #24]
 8002f66:	2000      	movs	r0, #0
  qp->next->prev = qp;
 8002f68:	6051      	str	r1, [r2, #4]
  } while (unlikely(pqp->prio >= p->prio));
 8002f6a:	689c      	ldr	r4, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	6298      	str	r0, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8002f70:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
    pqp = pqp->next;
 8002f74:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002f76:	6891      	ldr	r1, [r2, #8]
 8002f78:	42a1      	cmp	r1, r4
 8002f7a:	d3a8      	bcc.n	8002ece <oslib_test_002_003_execute.lto_priv.0+0x8e>
 8002f7c:	e7fa      	b.n	8002f74 <oslib_test_002_003_execute.lto_priv.0+0x134>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8002f84:	e7ab      	b.n	8002ede <oslib_test_002_003_execute.lto_priv.0+0x9e>
 8002f86:	f385 8811 	msr	BASEPRI, r5
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8002f8a:	e7a8      	b.n	8002ede <oslib_test_002_003_execute.lto_priv.0+0x9e>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8002f92:	e7a9      	b.n	8002ee8 <oslib_test_002_003_execute.lto_priv.0+0xa8>
 8002f94:	f384 8811 	msr	BASEPRI, r4
 8002f98:	e7a1      	b.n	8002ede <oslib_test_002_003_execute.lto_priv.0+0x9e>
 8002f9a:	bf00      	nop
 8002f9c:	20000b74 	.word	0x20000b74
 8002fa0:	2000084c 	.word	0x2000084c
 8002fa4:	2000086c 	.word	0x2000086c
 8002fa8:	080150cc 	.word	0x080150cc
 8002fac:	20000864 	.word	0x20000864

08002fb0 <Thread1.lto_priv.0>:

static THD_WORKING_AREA(wa1Thread1, 256);
static THD_WORKING_AREA(wa2Thread1, 256);
static THD_FUNCTION(Thread1, arg) {
 8002fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fb4:	4d23      	ldr	r5, [pc, #140]	; (8003044 <Thread1.lto_priv.0+0x94>)
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8002fb6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003048 <Thread1.lto_priv.0+0x98>
 8002fba:	b083      	sub	sp, #12
 8002fbc:	2730      	movs	r7, #48	; 0x30
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 8002fbe:	f105 081c 	add.w	r8, r5, #28
 8002fc2:	f387 8811 	msr	BASEPRI, r7
 8002fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fca:	a901      	add	r1, sp, #4
 8002fcc:	4640      	mov	r0, r8
 8002fce:	f7ff fedf 	bl	8002d90 <chMBFetchTimeoutS>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	f383 8811 	msr	BASEPRI, r3
static inline msg_t chJobDispatch(jobs_queue_t *jqp) {
  msg_t msg, jmsg;

  /* Waiting for a job.*/
  msg = chMBFetchTimeout(&jqp->mbx, &jmsg, TIME_INFINITE);
  if (msg == MSG_OK) {
 8002fda:	b110      	cbz	r0, 8002fe2 <Thread1.lto_priv.0+0x32>
  (void)arg;

  do {
    msg = chJobDispatch(&jq);
  } while (msg == MSG_OK);
}
 8002fdc:	b003      	add	sp, #12
 8002fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    job_descriptor_t *jp = (job_descriptor_t *)jmsg;
 8002fe2:	9e01      	ldr	r6, [sp, #4]

    chDbgAssert(jp != NULL, "is NULL");

    if (jp->jobfunc != NULL) {
 8002fe4:	6833      	ldr	r3, [r6, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f8      	beq.n	8002fdc <Thread1.lto_priv.0+0x2c>

      /* Invoking the job function.*/
      jp->jobfunc(jp->jobarg);
 8002fea:	6870      	ldr	r0, [r6, #4]
 8002fec:	4798      	blx	r3
 8002fee:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 8002ff2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
  if (++sp->cnt <= (cnt_t)0) {
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	6032      	str	r2, [r6, #0]
 8002ffc:	e9c5 3602 	strd	r3, r6, [r5, #8]
 8003000:	dd0d      	ble.n	800301e <Thread1.lto_priv.0+0x6e>
 8003002:	f8d9 2000 	ldr.w	r2, [r9]
 8003006:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800300a:	6892      	ldr	r2, [r2, #8]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	429a      	cmp	r2, r3
 8003010:	d901      	bls.n	8003016 <Thread1.lto_priv.0+0x66>
    __sch_reschedule_ahead();
 8003012:	f7fe ff9d 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8003016:	2300      	movs	r3, #0
 8003018:	f383 8811 	msr	BASEPRI, r3
  } while (msg == MSG_OK);
 800301c:	e7d1      	b.n	8002fc2 <Thread1.lto_priv.0+0x12>
  ch_queue_t *p = qp->next;
 800301e:	682b      	ldr	r3, [r5, #0]
  qp->next       = p->next;
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	602a      	str	r2, [r5, #0]
  qp->next->prev = qp;
 8003024:	6055      	str	r5, [r2, #4]
  } while (unlikely(pqp->prio >= p->prio));
 8003026:	6898      	ldr	r0, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003028:	699a      	ldr	r2, [r3, #24]
    tp->u.rdymsg = MSG_OK;
 800302a:	629c      	str	r4, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800302c:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    pqp = pqp->next;
 8003030:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003032:	6891      	ldr	r1, [r2, #8]
 8003034:	4281      	cmp	r1, r0
 8003036:	d2fb      	bcs.n	8003030 <Thread1.lto_priv.0+0x80>
  p->prev       = pqp->prev;
 8003038:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 800303a:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800303c:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 800303e:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8003040:	6053      	str	r3, [r2, #4]
  return __sch_ready_behind(tp);
 8003042:	e7de      	b.n	8003002 <Thread1.lto_priv.0+0x52>
 8003044:	20000c38 	.word	0x20000c38
 8003048:	20000a90 	.word	0x20000a90
 800304c:	00000000 	.word	0x00000000

08003050 <chGuardedPoolAllocTimeout>:
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
                                sysinterval_t timeout) {
 8003050:	b510      	push	{r4, lr}
 8003052:	2330      	movs	r3, #48	; 0x30
 8003054:	4604      	mov	r4, r0
 8003056:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 800305a:	6882      	ldr	r2, [r0, #8]
 800305c:	1e53      	subs	r3, r2, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	6083      	str	r3, [r0, #8]
 8003062:	db07      	blt.n	8003074 <chGuardedPoolAllocTimeout+0x24>
  objp = mp->next;
 8003064:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 8003066:	b1c8      	cbz	r0, 800309c <chGuardedPoolAllocTimeout+0x4c>
    mp->next = mp->next->next;
 8003068:	6803      	ldr	r3, [r0, #0]
 800306a:	60e3      	str	r3, [r4, #12]
 800306c:	2300      	movs	r3, #0
 800306e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 8003072:	bd10      	pop	{r4, pc}
    if (unlikely(TIME_IMMEDIATE == timeout)) {
 8003074:	4608      	mov	r0, r1
 8003076:	b1d9      	cbz	r1, 80030b0 <chGuardedPoolAllocTimeout+0x60>
  return __sch_get_currthread();
 8003078:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <chGuardedPoolAllocTimeout+0x64>)
  p->prev       = qp->prev;
 800307a:	6862      	ldr	r2, [r4, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800307e:	2005      	movs	r0, #5
 8003080:	e9c3 4200 	strd	r4, r2, [r3]
    currtp->u.wtsemp = sp;
 8003084:	629c      	str	r4, [r3, #40]	; 0x28
  p->prev->next = p;
 8003086:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8003088:	6063      	str	r3, [r4, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800308a:	f7ff fc49 	bl	8002920 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 800308e:	2800      	cmp	r0, #0
 8003090:	d0e8      	beq.n	8003064 <chGuardedPoolAllocTimeout+0x14>
    return NULL;
 8003092:	2000      	movs	r0, #0
 8003094:	2300      	movs	r3, #0
 8003096:	f383 8811 	msr	BASEPRI, r3
}
 800309a:	bd10      	pop	{r4, pc}
  else if (mp->provider != NULL) {
 800309c:	69a3      	ldr	r3, [r4, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f7      	beq.n	8003092 <chGuardedPoolAllocTimeout+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 80030a2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80030a6:	4798      	blx	r3
 80030a8:	2300      	movs	r3, #0
 80030aa:	f383 8811 	msr	BASEPRI, r3
}
 80030ae:	bd10      	pop	{r4, pc}
      sp->cnt++;
 80030b0:	60a2      	str	r2, [r4, #8]
  if (msg != MSG_OK) {
 80030b2:	e7db      	b.n	800306c <chGuardedPoolAllocTimeout+0x1c>
 80030b4:	20000a90 	.word	0x20000a90
	...

080030c0 <oslib_test_007_002_execute.lto_priv.0>:
static void oslib_test_007_002_execute(void) {
 80030c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 80030c4:	4f50      	ldr	r7, [pc, #320]	; (8003208 <oslib_test_007_002_execute.lto_priv.0+0x148>)
 80030c6:	4d51      	ldr	r5, [pc, #324]	; (800320c <oslib_test_007_002_execute.lto_priv.0+0x14c>)
 80030c8:	4c51      	ldr	r4, [pc, #324]	; (8003210 <oslib_test_007_002_execute.lto_priv.0+0x150>)
 80030ca:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8003214 <oslib_test_007_002_execute.lto_priv.0+0x154>
 80030ce:	2301      	movs	r3, #1
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	f04f 0a04 	mov.w	sl, #4
 80030d6:	f04f 0830 	mov.w	r8, #48	; 0x30
    tp->u.rdymsg = MSG_OK;
 80030da:	2600      	movs	r6, #0
 80030dc:	e010      	b.n	8003100 <oslib_test_007_002_execute.lto_priv.0+0x40>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80030de:	f8d9 2000 	ldr.w	r2, [r9]
 80030e2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80030e6:	6892      	ldr	r2, [r2, #8]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d901      	bls.n	80030f2 <oslib_test_007_002_execute.lto_priv.0+0x32>
    __sch_reschedule_ahead();
 80030ee:	f7fe ff2f 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 80030f2:	f386 8811 	msr	BASEPRI, r6
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80030f6:	6923      	ldr	r3, [r4, #16]
  while (n != 0U) {
 80030f8:	f1ba 0a01 	subs.w	sl, sl, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80030fc:	441d      	add	r5, r3
  while (n != 0U) {
 80030fe:	d01c      	beq.n	800313a <oslib_test_007_002_execute.lto_priv.0+0x7a>
 8003100:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 8003104:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
  if (++sp->cnt <= (cnt_t)0) {
 8003108:	3301      	adds	r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	e9c4 3502 	strd	r3, r5, [r4, #8]
 8003110:	602a      	str	r2, [r5, #0]
 8003112:	dce4      	bgt.n	80030de <oslib_test_007_002_execute.lto_priv.0+0x1e>
  ch_queue_t *p = qp->next;
 8003114:	6822      	ldr	r2, [r4, #0]
  qp->next       = p->next;
 8003116:	6813      	ldr	r3, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003118:	6890      	ldr	r0, [r2, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800311a:	6991      	ldr	r1, [r2, #24]
  qp->next       = p->next;
 800311c:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 800311e:	605c      	str	r4, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 8003120:	6296      	str	r6, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8003122:	f882 6024 	strb.w	r6, [r2, #36]	; 0x24
    pqp = pqp->next;
 8003126:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003128:	688b      	ldr	r3, [r1, #8]
 800312a:	4283      	cmp	r3, r0
 800312c:	d2fb      	bcs.n	8003126 <oslib_test_007_002_execute.lto_priv.0+0x66>
  p->prev       = pqp->prev;
 800312e:	684b      	ldr	r3, [r1, #4]
 8003130:	e9c2 1300 	strd	r1, r3, [r2]
  p->prev->next = p;
 8003134:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 8003136:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 8003138:	e7d1      	b.n	80030de <oslib_test_007_002_execute.lto_priv.0+0x1e>
  test_set_step(2);
 800313a:	2302      	movs	r3, #2
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800313c:	4e34      	ldr	r6, [pc, #208]	; (8003210 <oslib_test_007_002_execute.lto_priv.0+0x150>)
  test_set_step(2);
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	2504      	movs	r5, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8003142:	2100      	movs	r1, #0
 8003144:	4630      	mov	r0, r6
 8003146:	f7ff ff83 	bl	8003050 <chGuardedPoolAllocTimeout>
 800314a:	2800      	cmp	r0, #0
 800314c:	d042      	beq.n	80031d4 <oslib_test_007_002_execute.lto_priv.0+0x114>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800314e:	3d01      	subs	r5, #1
 8003150:	d1f7      	bne.n	8003142 <oslib_test_007_002_execute.lto_priv.0+0x82>
  test_set_step(3);
 8003152:	2303      	movs	r3, #3
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8003154:	482e      	ldr	r0, [pc, #184]	; (8003210 <oslib_test_007_002_execute.lto_priv.0+0x150>)
  test_set_step(3);
 8003156:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8003158:	4629      	mov	r1, r5
 800315a:	f7ff ff79 	bl	8003050 <chGuardedPoolAllocTimeout>
 800315e:	bb90      	cbnz	r0, 80031c6 <oslib_test_007_002_execute.lto_priv.0+0x106>
  test_set_step(4);
 8003160:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800320c <oslib_test_007_002_execute.lto_priv.0+0x14c>
 8003164:	2304      	movs	r3, #4
 8003166:	603b      	str	r3, [r7, #0]
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8003168:	f10a 0810 	add.w	r8, sl, #16
 800316c:	2630      	movs	r6, #48	; 0x30
      chGuardedPoolFree(&gmp1, &objects[i]);
 800316e:	4651      	mov	r1, sl
 8003170:	f386 8811 	msr	BASEPRI, r6
 8003174:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
  if (++sp->cnt <= (cnt_t)0) {
 8003178:	3301      	adds	r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	e9c4 3102 	strd	r3, r1, [r4, #8]
 8003180:	f84a 2b04 	str.w	r2, [sl], #4
 8003184:	dd2d      	ble.n	80031e2 <oslib_test_007_002_execute.lto_priv.0+0x122>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003186:	f8d9 2000 	ldr.w	r2, [r9]
 800318a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800318e:	6892      	ldr	r2, [r2, #8]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	429a      	cmp	r2, r3
 8003194:	d901      	bls.n	800319a <oslib_test_007_002_execute.lto_priv.0+0xda>
    __sch_reschedule_ahead();
 8003196:	f7fe fedb 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 800319a:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800319e:	45d0      	cmp	r8, sl
 80031a0:	d1e5      	bne.n	800316e <oslib_test_007_002_execute.lto_priv.0+0xae>
  test_set_step(5);
 80031a2:	2305      	movs	r3, #5
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80031a4:	4d1a      	ldr	r5, [pc, #104]	; (8003210 <oslib_test_007_002_execute.lto_priv.0+0x150>)
  test_set_step(5);
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 80031aa:	2100      	movs	r1, #0
 80031ac:	4628      	mov	r0, r5
 80031ae:	f7ff ff4f 	bl	8003050 <chGuardedPoolAllocTimeout>
 80031b2:	b178      	cbz	r0, 80031d4 <oslib_test_007_002_execute.lto_priv.0+0x114>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80031b4:	3c01      	subs	r4, #1
 80031b6:	d1f8      	bne.n	80031aa <oslib_test_007_002_execute.lto_priv.0+0xea>
  test_set_step(6);
 80031b8:	2306      	movs	r3, #6
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80031ba:	4815      	ldr	r0, [pc, #84]	; (8003210 <oslib_test_007_002_execute.lto_priv.0+0x150>)
  test_set_step(6);
 80031bc:	603b      	str	r3, [r7, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 80031be:	4621      	mov	r1, r4
 80031c0:	f7ff ff46 	bl	8003050 <chGuardedPoolAllocTimeout>
 80031c4:	b158      	cbz	r0, 80031de <oslib_test_007_002_execute.lto_priv.0+0x11e>
  chtest.failure_message = msg;
 80031c6:	4b14      	ldr	r3, [pc, #80]	; (8003218 <oslib_test_007_002_execute.lto_priv.0+0x158>)
 80031c8:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 80031ca:	f240 1201 	movw	r2, #257	; 0x101
 80031ce:	80ba      	strh	r2, [r7, #4]
}
 80031d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.failure_message = msg;
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <oslib_test_007_002_execute.lto_priv.0+0x15c>)
 80031d6:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 80031d8:	f240 1201 	movw	r2, #257	; 0x101
 80031dc:	80ba      	strh	r2, [r7, #4]
 80031de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  ch_queue_t *p = qp->next;
 80031e2:	6822      	ldr	r2, [r4, #0]
  qp->next       = p->next;
 80031e4:	6813      	ldr	r3, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80031e6:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80031e8:	6890      	ldr	r0, [r2, #8]
  qp->next->prev = qp;
 80031ea:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 80031ec:	6023      	str	r3, [r4, #0]
    tp->u.rdymsg = MSG_OK;
 80031ee:	6295      	str	r5, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80031f0:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
    pqp = pqp->next;
 80031f4:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80031f6:	688b      	ldr	r3, [r1, #8]
 80031f8:	4283      	cmp	r3, r0
 80031fa:	d2fb      	bcs.n	80031f4 <oslib_test_007_002_execute.lto_priv.0+0x134>
  p->prev       = pqp->prev;
 80031fc:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 80031fe:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 8003200:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 8003202:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 8003204:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 8003206:	e7be      	b.n	8003186 <oslib_test_007_002_execute.lto_priv.0+0xc6>
 8003208:	20000b74 	.word	0x20000b74
 800320c:	20000dac 	.word	0x20000dac
 8003210:	20000810 	.word	0x20000810
 8003214:	20000a90 	.word	0x20000a90
 8003218:	08014f98 	.word	0x08014f98
 800321c:	08014f8c 	.word	0x08014f8c

08003220 <oslib_test_007_003_execute.lto_priv.0>:

static void oslib_test_007_003_execute(void) {
 8003220:	b510      	push	{r4, lr}

  /* [7.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 8003222:	4c08      	ldr	r4, [pc, #32]	; (8003244 <oslib_test_007_003_execute.lto_priv.0+0x24>)
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8003224:	4808      	ldr	r0, [pc, #32]	; (8003248 <oslib_test_007_003_execute.lto_priv.0+0x28>)
  test_set_step(1);
 8003226:	2301      	movs	r3, #1
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8003228:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  test_set_step(1);
 800322c:	6023      	str	r3, [r4, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 800322e:	f7ff ff0f 	bl	8003050 <chGuardedPoolAllocTimeout>
  if (!condition) {
 8003232:	b900      	cbnz	r0, 8003236 <oslib_test_007_003_execute.lto_priv.0+0x16>
  }
  test_end_step(1);
}
 8003234:	bd10      	pop	{r4, pc}
  chtest.failure_message = msg;
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <oslib_test_007_003_execute.lto_priv.0+0x2c>)
 8003238:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 800323a:	f240 1201 	movw	r2, #257	; 0x101
 800323e:	80a2      	strh	r2, [r4, #4]
 8003240:	bd10      	pop	{r4, pc}
 8003242:	bf00      	nop
 8003244:	20000b74 	.word	0x20000b74
 8003248:	20000810 	.word	0x20000810
 800324c:	08014f98 	.word	0x08014f98

08003250 <rt_test_002_002_execute.lto_priv.0>:
static void rt_test_002_002_execute(void) {
 8003250:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8003252:	4c48      	ldr	r4, [pc, #288]	; (8003374 <rt_test_002_002_execute.lto_priv.0+0x124>)
 8003254:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 8003256:	b086      	sub	sp, #24
  test_set_step(1);
 8003258:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800325a:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 800325e:	b96b      	cbnz	r3, 800327c <rt_test_002_002_execute.lto_priv.0+0x2c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003260:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003264:	2330      	movs	r3, #48	; 0x30
 8003266:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800326a:	f3ef 8305 	mrs	r3, IPSR
 800326e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 8003272:	2b00      	cmp	r3, #0
 8003274:	d073      	beq.n	800335e <rt_test_002_002_execute.lto_priv.0+0x10e>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003276:	2300      	movs	r3, #0
 8003278:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 800327c:	2302      	movs	r3, #2
 800327e:	6023      	str	r3, [r4, #0]
 8003280:	2330      	movs	r3, #48	; 0x30
 8003282:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003286:	f3ef 8211 	mrs	r2, BASEPRI
  if (port_irq_enabled(sts)) {
 800328a:	b962      	cbnz	r2, 80032a6 <rt_test_002_002_execute.lto_priv.0+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800328c:	f3ef 8205 	mrs	r2, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003290:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003294:	f3ef 8305 	mrs	r3, IPSR
 8003298:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 800329c:	2b00      	cmp	r3, #0
 800329e:	d054      	beq.n	800334a <rt_test_002_002_execute.lto_priv.0+0xfa>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80032a0:	2300      	movs	r3, #0
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	2300      	movs	r3, #0
 80032a8:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 80032ac:	2303      	movs	r3, #3
 80032ae:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032b0:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 80032b4:	b913      	cbnz	r3, 80032bc <rt_test_002_002_execute.lto_priv.0+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80032b6:	2330      	movs	r3, #48	; 0x30
 80032b8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032bc:	f3ef 8311 	mrs	r3, BASEPRI
 80032c0:	b913      	cbnz	r3, 80032c8 <rt_test_002_002_execute.lto_priv.0+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80032c2:	2330      	movs	r3, #48	; 0x30
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	2300      	movs	r3, #0
 80032ca:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 80032ce:	2204      	movs	r2, #4
 80032d0:	6022      	str	r2, [r4, #0]
 80032d2:	2230      	movs	r2, #48	; 0x30
 80032d4:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032d8:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 80032dc:	b10a      	cbz	r2, 80032e2 <rt_test_002_002_execute.lto_priv.0+0x92>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80032de:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032e2:	f3ef 8311 	mrs	r3, BASEPRI
 80032e6:	b113      	cbz	r3, 80032ee <rt_test_002_002_execute.lto_priv.0+0x9e>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80032e8:	2300      	movs	r3, #0
 80032ea:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 80032ee:	2205      	movs	r2, #5
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->dlist.next = NULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	6022      	str	r2, [r4, #0]
 80032f6:	2330      	movs	r3, #48	; 0x30
 80032f8:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 80032fc:	9b00      	ldr	r3, [sp, #0]
    chVTDoResetI(vtp);
 80032fe:	466e      	mov	r6, sp
  if (chVTIsArmedI(vtp)) {
 8003300:	b113      	cbz	r3, 8003308 <rt_test_002_002_execute.lto_priv.0+0xb8>
    chVTDoResetI(vtp);
 8003302:	4630      	mov	r0, r6
 8003304:	f7fe fd5c 	bl	8001dc0 <chVTDoResetI>
  vtp->func    = vtfunc;
 8003308:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <rt_test_002_002_execute.lto_priv.0+0x128>)
  vtp->par     = par;
 800330a:	2500      	movs	r5, #0
  vt_enqueue(vtlp, vtp, delay);
 800330c:	2101      	movs	r1, #1
 800330e:	4630      	mov	r0, r6
  vtp->func    = vtfunc;
 8003310:	e9cd 3503 	strd	r3, r5, [sp, #12]
  vtp->reload  = (sysinterval_t)0;
 8003314:	9505      	str	r5, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 8003316:	f010 f8a3 	bl	8013460 <vt_enqueue.constprop.0>
 800331a:	f385 8811 	msr	BASEPRI, r5
 800331e:	2630      	movs	r6, #48	; 0x30
 8003320:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003324:	210a      	movs	r1, #10
 8003326:	2008      	movs	r0, #8
 8003328:	f7ff fafa 	bl	8002920 <chSchGoSleepTimeoutS>
 800332c:	f385 8811 	msr	BASEPRI, r5
 8003330:	f386 8811 	msr	BASEPRI, r6
  return (bool)(vtp->dlist.next != NULL);
 8003334:	9b00      	ldr	r3, [sp, #0]
 8003336:	f385 8811 	msr	BASEPRI, r5
  if (!condition) {
 800333a:	b123      	cbz	r3, 8003346 <rt_test_002_002_execute.lto_priv.0+0xf6>
  chtest.failure_message = msg;
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <rt_test_002_002_execute.lto_priv.0+0x12c>)
 800333e:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8003340:	f240 1201 	movw	r2, #257	; 0x101
 8003344:	80a2      	strh	r2, [r4, #4]
}
 8003346:	b006      	add	sp, #24
 8003348:	bd70      	pop	{r4, r5, r6, pc}
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <rt_test_002_002_execute.lto_priv.0+0x130>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	6892      	ldr	r2, [r2, #8]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	429a      	cmp	r2, r3
 8003356:	d9a3      	bls.n	80032a0 <rt_test_002_002_execute.lto_priv.0+0x50>
    __sch_reschedule_ahead();
 8003358:	f7fe fdfa 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 800335c:	e7a0      	b.n	80032a0 <rt_test_002_002_execute.lto_priv.0+0x50>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <rt_test_002_002_execute.lto_priv.0+0x130>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	6892      	ldr	r2, [r2, #8]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	d984      	bls.n	8003276 <rt_test_002_002_execute.lto_priv.0+0x26>
    __sch_reschedule_ahead();
 800336c:	f7fe fdf0 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8003370:	e781      	b.n	8003276 <rt_test_002_002_execute.lto_priv.0+0x26>
 8003372:	bf00      	nop
 8003374:	20000b74 	.word	0x20000b74
 8003378:	08001f91 	.word	0x08001f91
 800337c:	080150e4 	.word	0x080150e4
 8003380:	20000a90 	.word	0x20000a90
	...

08003390 <rt_test_004_001_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [4.1.1] Time stamps are generated and checked for monotonicity.
 * .
 */

static void rt_test_004_001_execute(void) {
 8003390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* [4.1.1] Time stamps are generated and checked for monotonicity.*/
  test_set_step(1);
 8003394:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800342c <rt_test_004_001_execute.lto_priv.0+0x9c>
 8003398:	2101      	movs	r1, #1
 800339a:	f8c8 1000 	str.w	r1, [r8]
 800339e:	f04f 0930 	mov.w	r9, #48	; 0x30
 80033a2:	f389 8811 	msr	BASEPRI, r9

  /* Current system time.*/
  now = chVTGetSystemTimeX();

  /* Last time stamp generated.*/
  last = oip->vtlist.laststamp;
 80033a6:	4e22      	ldr	r6, [pc, #136]	; (8003430 <rt_test_004_001_execute.lto_priv.0+0xa0>)
 80033a8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000

  /* Interval between the last time stamp and current time used for a new
     time stamp. Note that this fails if the interval is larger than a
     systime_t type.*/
  stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 80033ac:	f04f 0a00 	mov.w	sl, #0
 80033b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
  last = oip->vtlist.laststamp;
 80033b2:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
 80033b6:	1a80      	subs	r0, r0, r2
  stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 80033b8:	1884      	adds	r4, r0, r2
 80033ba:	f143 0500 	adc.w	r5, r3, #0

  chDbgAssert(oip->vtlist.laststamp <= stamp, "wrapped");

  /* Storing the new stamp.*/
  oip->vtlist.laststamp = stamp;
 80033be:	e9c6 4508 	strd	r4, r5, [r6, #32]
 80033c2:	f38a 8811 	msr	BASEPRI, sl
 80033c6:	f389 8811 	msr	BASEPRI, r9
 80033ca:	2008      	movs	r0, #8
 80033cc:	f7ff faa8 	bl	8002920 <chSchGoSleepTimeoutS>
 80033d0:	f38a 8811 	msr	BASEPRI, sl
 80033d4:	f389 8811 	msr	BASEPRI, r9
 80033d8:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 80033dc:	f38a 8811 	msr	BASEPRI, sl
  stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 80033e0:	46d6      	mov	lr, sl
      test_assert(last <= now, "not monotonic");
      last = now;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 80033e2:	f242 7a0f 	movw	sl, #9999	; 0x270f
 80033e6:	e004      	b.n	80033f2 <rt_test_004_001_execute.lto_priv.0+0x62>
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80033ea:	eba3 030b 	sub.w	r3, r3, fp
 80033ee:	4553      	cmp	r3, sl
 80033f0:	d819      	bhi.n	8003426 <rt_test_004_001_execute.lto_priv.0+0x96>
 80033f2:	f389 8811 	msr	BASEPRI, r9
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  last = oip->vtlist.laststamp;
 80033f8:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
  return (sysinterval_t)((systime_t)(end - start));
 80033fc:	1a1b      	subs	r3, r3, r0
 80033fe:	46a4      	mov	ip, r4
  stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 8003400:	181c      	adds	r4, r3, r0
 8003402:	462a      	mov	r2, r5
 8003404:	f141 0500 	adc.w	r5, r1, #0
  oip->vtlist.laststamp = stamp;
 8003408:	e9c6 4508 	strd	r4, r5, [r6, #32]
 800340c:	f38e 8811 	msr	BASEPRI, lr
  if (!condition) {
 8003410:	4564      	cmp	r4, ip
 8003412:	eb75 0202 	sbcs.w	r2, r5, r2
 8003416:	d2e7      	bcs.n	80033e8 <rt_test_004_001_execute.lto_priv.0+0x58>
  chtest.failure_message = msg;
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <rt_test_004_001_execute.lto_priv.0+0xa4>)
 800341a:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 800341e:	f240 1201 	movw	r2, #257	; 0x101
 8003422:	f8a8 2004 	strh.w	r2, [r8, #4]
  }
  test_end_step(1);
}
 8003426:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800342a:	bf00      	nop
 800342c:	20000b74 	.word	0x20000b74
 8003430:	20000a90 	.word	0x20000a90
 8003434:	080150f8 	.word	0x080150f8
	...

08003440 <rt_test_005_001_execute.lto_priv.0>:
static void rt_test_005_001_execute(void) {
 8003440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8003444:	4d37      	ldr	r5, [pc, #220]	; (8003524 <rt_test_005_001_execute.lto_priv.0+0xe4>)
 8003446:	2301      	movs	r3, #1
 8003448:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800344c:	602b      	str	r3, [r5, #0]
 800344e:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8003452:	2630      	movs	r6, #48	; 0x30
 8003454:	f386 8811 	msr	BASEPRI, r6
 8003458:	2164      	movs	r1, #100	; 0x64
 800345a:	2008      	movs	r0, #8
 800345c:	f7ff fa60 	bl	8002920 <chSchGoSleepTimeoutS>
 8003460:	2700      	movs	r7, #0
 8003462:	f387 8811 	msr	BASEPRI, r7
 8003466:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003468:	3b64      	subs	r3, #100	; 0x64
 800346a:	eba3 0308 	sub.w	r3, r3, r8
  if (!condition) {
 800346e:	2b02      	cmp	r3, #2
 8003470:	d851      	bhi.n	8003516 <rt_test_005_001_execute.lto_priv.0+0xd6>
  test_set_step(2);
 8003472:	2302      	movs	r3, #2
 8003474:	602b      	str	r3, [r5, #0]
 8003476:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 800347a:	f386 8811 	msr	BASEPRI, r6
 800347e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003482:	2008      	movs	r0, #8
 8003484:	f7ff fa4c 	bl	8002920 <chSchGoSleepTimeoutS>
 8003488:	f387 8811 	msr	BASEPRI, r7
 800348c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800348e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003492:	eba3 0308 	sub.w	r3, r3, r8
 8003496:	2b02      	cmp	r3, #2
 8003498:	d83d      	bhi.n	8003516 <rt_test_005_001_execute.lto_priv.0+0xd6>
  test_set_step(3);
 800349a:	2303      	movs	r3, #3
 800349c:	602b      	str	r3, [r5, #0]
 800349e:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 80034a2:	f386 8811 	msr	BASEPRI, r6
 80034a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80034aa:	2008      	movs	r0, #8
 80034ac:	f7ff fa38 	bl	8002920 <chSchGoSleepTimeoutS>
 80034b0:	f387 8811 	msr	BASEPRI, r7
 80034b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034b6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80034ba:	eba3 0308 	sub.w	r3, r3, r8
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d829      	bhi.n	8003516 <rt_test_005_001_execute.lto_priv.0+0xd6>
  test_set_step(4);
 80034c2:	2304      	movs	r3, #4
 80034c4:	602b      	str	r3, [r5, #0]
 80034c6:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 80034ca:	f386 8811 	msr	BASEPRI, r6
 80034ce:	f242 7110 	movw	r1, #10000	; 0x2710
 80034d2:	2008      	movs	r0, #8
 80034d4:	f7ff fa24 	bl	8002920 <chSchGoSleepTimeoutS>
 80034d8:	f387 8811 	msr	BASEPRI, r7
 80034dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034de:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 80034e2:	3b10      	subs	r3, #16
 80034e4:	eba3 0308 	sub.w	r3, r3, r8
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d814      	bhi.n	8003516 <rt_test_005_001_execute.lto_priv.0+0xd6>
  test_set_step(5);
 80034ec:	2305      	movs	r3, #5
 80034ee:	602b      	str	r3, [r5, #0]
 80034f0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  return systime + (systime_t)interval;
 80034f2:	3764      	adds	r7, #100	; 0x64
 80034f4:	f386 8811 	msr	BASEPRI, r6
 80034f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  if (likely(interval > (sysinterval_t)0)) {
 80034fa:	1a79      	subs	r1, r7, r1
 80034fc:	d002      	beq.n	8003504 <rt_test_005_001_execute.lto_priv.0+0xc4>
 80034fe:	2008      	movs	r0, #8
 8003500:	f7ff fa0e 	bl	8002920 <chSchGoSleepTimeoutS>
 8003504:	2300      	movs	r3, #0
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003510:	1bdb      	subs	r3, r3, r7
 8003512:	2b02      	cmp	r3, #2
 8003514:	d904      	bls.n	8003520 <rt_test_005_001_execute.lto_priv.0+0xe0>
  chtest.failure_message = msg;
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <rt_test_005_001_execute.lto_priv.0+0xe8>)
 8003518:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 800351a:	f240 1201 	movw	r2, #257	; 0x101
 800351e:	80aa      	strh	r2, [r5, #4]
}
 8003520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003524:	20000b74 	.word	0x20000b74
 8003528:	08015108 	.word	0x08015108
 800352c:	00000000 	.word	0x00000000

08003530 <thread2>:
static THD_FUNCTION(thread2, p) {
 8003530:	b510      	push	{r4, lr}
 8003532:	2430      	movs	r4, #48	; 0x30
 8003534:	f384 8811 	msr	BASEPRI, r4
 8003538:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800353c:	2008      	movs	r0, #8
 800353e:	f7ff f9ef 	bl	8002920 <chSchGoSleepTimeoutS>
 8003542:	2100      	movs	r1, #0
 8003544:	f381 8811 	msr	BASEPRI, r1
 8003548:	f384 8811 	msr	BASEPRI, r4
  if (++sp->cnt <= (cnt_t)0) {
 800354c:	4a12      	ldr	r2, [pc, #72]	; (8003598 <thread2+0x68>)
 800354e:	6893      	ldr	r3, [r2, #8]
 8003550:	3301      	adds	r3, #1
 8003552:	428b      	cmp	r3, r1
 8003554:	6093      	str	r3, [r2, #8]
 8003556:	dd0c      	ble.n	8003572 <thread2+0x42>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003558:	4b10      	ldr	r3, [pc, #64]	; (800359c <thread2+0x6c>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	6892      	ldr	r2, [r2, #8]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	d901      	bls.n	800356a <thread2+0x3a>
    __sch_reschedule_ahead();
 8003566:	f7fe fcf3 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 800356a:	2300      	movs	r3, #0
 800356c:	f383 8811 	msr	BASEPRI, r3
}
 8003570:	bd10      	pop	{r4, pc}
  ch_queue_t *p = qp->next;
 8003572:	6813      	ldr	r3, [r2, #0]
  qp->next       = p->next;
 8003574:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003576:	6998      	ldr	r0, [r3, #24]
 8003578:	6014      	str	r4, [r2, #0]
  qp->next->prev = qp;
 800357a:	6062      	str	r2, [r4, #4]
  } while (unlikely(pqp->prio >= p->prio));
 800357c:	689c      	ldr	r4, [r3, #8]
    tp->u.rdymsg = MSG_OK;
 800357e:	6299      	str	r1, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8003580:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 8003584:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003586:	6882      	ldr	r2, [r0, #8]
 8003588:	42a2      	cmp	r2, r4
 800358a:	d2fb      	bcs.n	8003584 <thread2+0x54>
  p->prev       = pqp->prev;
 800358c:	6842      	ldr	r2, [r0, #4]
 800358e:	e9c3 0200 	strd	r0, r2, [r3]
  p->prev->next = p;
 8003592:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 8003594:	6043      	str	r3, [r0, #4]
  return __sch_ready_behind(tp);
 8003596:	e7df      	b.n	8003558 <thread2+0x28>
 8003598:	20000dbc 	.word	0x20000dbc
 800359c:	20000a90 	.word	0x20000a90

080035a0 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 80035a0:	b538      	push	{r3, r4, r5, lr}
 80035a2:	4604      	mov	r4, r0
 80035a4:	2530      	movs	r5, #48	; 0x30
 80035a6:	f385 8811 	msr	BASEPRI, r5
 80035aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80035ae:	2008      	movs	r0, #8
 80035b0:	f7ff f9b6 	bl	8002920 <chSchGoSleepTimeoutS>
 80035b4:	2300      	movs	r3, #0
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f385 8811 	msr	BASEPRI, r5
  tp->epending |= events;
 80035be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 80035c0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
  tp->epending |= events;
 80035c4:	f043 0301 	orr.w	r3, r3, #1
  if (((tp->state == CH_STATE_WTOREVT) &&
 80035c8:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 80035ca:	63a3      	str	r3, [r4, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 80035cc:	d021      	beq.n	8003612 <evt_thread3+0x72>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80035ce:	2a0b      	cmp	r2, #11
 80035d0:	d00c      	beq.n	80035ec <evt_thread3+0x4c>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <evt_thread3+0x7c>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	6892      	ldr	r2, [r2, #8]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d901      	bls.n	80035e4 <evt_thread3+0x44>
    __sch_reschedule_ahead();
 80035e0:	f7fe fcb6 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 80035e4:	2300      	movs	r3, #0
 80035e6:	f383 8811 	msr	BASEPRI, r3
}
 80035ea:	bd38      	pop	{r3, r4, r5, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80035ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      ((tp->state == CH_STATE_WTANDEVT) &&
 80035ee:	439a      	bics	r2, r3
 80035f0:	d1ef      	bne.n	80035d2 <evt_thread3+0x32>
    tp->u.rdymsg = MSG_OK;
 80035f2:	2200      	movs	r2, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80035f4:	69a3      	ldr	r3, [r4, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80035f6:	68a1      	ldr	r1, [r4, #8]
 80035f8:	62a2      	str	r2, [r4, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80035fa:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    pqp = pqp->next;
 80035fe:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	428a      	cmp	r2, r1
 8003604:	d2fb      	bcs.n	80035fe <evt_thread3+0x5e>
  p->prev       = pqp->prev;
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	e9c4 3200 	strd	r3, r2, [r4]
  p->prev->next = p;
 800360c:	6014      	str	r4, [r2, #0]
  pqp->prev     = p;
 800360e:	605c      	str	r4, [r3, #4]
  return __sch_ready_behind(tp);
 8003610:	e7df      	b.n	80035d2 <evt_thread3+0x32>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8003612:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003614:	4213      	tst	r3, r2
 8003616:	d1ec      	bne.n	80035f2 <evt_thread3+0x52>
 8003618:	e7db      	b.n	80035d2 <evt_thread3+0x32>
 800361a:	bf00      	nop
 800361c:	20000a90 	.word	0x20000a90

08003620 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	2330      	movs	r3, #48	; 0x30
 8003624:	f383 8811 	msr	BASEPRI, r3
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003628:	4c15      	ldr	r4, [pc, #84]	; (8003680 <evt_thread7+0x60>)
  chEvtBroadcastFlagsI(esp, flags);
 800362a:	4816      	ldr	r0, [pc, #88]	; (8003684 <evt_thread7+0x64>)
 800362c:	2100      	movs	r1, #0
 800362e:	f7fd fd9f 	bl	8001170 <chEvtBroadcastFlagsI>
 8003632:	6822      	ldr	r2, [r4, #0]
 8003634:	68e3      	ldr	r3, [r4, #12]
 8003636:	6892      	ldr	r2, [r2, #8]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	429a      	cmp	r2, r3
 800363c:	d901      	bls.n	8003642 <evt_thread7+0x22>
    __sch_reschedule_ahead();
 800363e:	f7fe fc87 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8003642:	2500      	movs	r5, #0
 8003644:	f385 8811 	msr	BASEPRI, r5
 8003648:	2630      	movs	r6, #48	; 0x30
 800364a:	f386 8811 	msr	BASEPRI, r6
 800364e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003652:	2008      	movs	r0, #8
 8003654:	f7ff f964 	bl	8002920 <chSchGoSleepTimeoutS>
 8003658:	f385 8811 	msr	BASEPRI, r5
 800365c:	f386 8811 	msr	BASEPRI, r6
 8003660:	4809      	ldr	r0, [pc, #36]	; (8003688 <evt_thread7+0x68>)
 8003662:	4629      	mov	r1, r5
 8003664:	f7fd fd84 	bl	8001170 <chEvtBroadcastFlagsI>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003668:	6822      	ldr	r2, [r4, #0]
 800366a:	68e3      	ldr	r3, [r4, #12]
 800366c:	6892      	ldr	r2, [r2, #8]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	d901      	bls.n	8003678 <evt_thread7+0x58>
    __sch_reschedule_ahead();
 8003674:	f7fe fc6c 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8003678:	2300      	movs	r3, #0
 800367a:	f383 8811 	msr	BASEPRI, r3
}
 800367e:	bd70      	pop	{r4, r5, r6, pc}
 8003680:	20000a90 	.word	0x20000a90
 8003684:	20000808 	.word	0x20000808
 8003688:	2000080c 	.word	0x2000080c
 800368c:	00000000 	.word	0x00000000

08003690 <rt_test_010_006_execute.lto_priv.0>:
static void rt_test_010_006_execute(void) {
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8003692:	4c46      	ldr	r4, [pc, #280]	; (80037ac <rt_test_010_006_execute.lto_priv.0+0x11c>)
  return __sch_get_currthread();
 8003694:	4d46      	ldr	r5, [pc, #280]	; (80037b0 <rt_test_010_006_execute.lto_priv.0+0x120>)
 8003696:	2301      	movs	r3, #1
 8003698:	6023      	str	r3, [r4, #0]
 800369a:	68e9      	ldr	r1, [r5, #12]
 800369c:	2330      	movs	r3, #48	; 0x30
 800369e:	f383 8811 	msr	BASEPRI, r3
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *currtp = chThdGetSelfX();
  eventmask_t m;

  chSysLock();
  m = currtp->epending & events;
 80036a2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  if (m == (eventmask_t)0) {
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d143      	bne.n	8003730 <rt_test_010_006_execute.lto_priv.0+0xa0>
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	68e9      	ldr	r1, [r5, #12]
 80036ae:	2230      	movs	r2, #48	; 0x30
 80036b0:	f382 8811 	msr	BASEPRI, r2
  thread_t *currtp = chThdGetSelfX();
  eventmask_t m;

  chSysLock();
  m = currtp->epending & events;
  if (m == (eventmask_t)0) {
 80036b4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d14a      	bne.n	8003750 <rt_test_010_006_execute.lto_priv.0+0xc0>
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	68e9      	ldr	r1, [r5, #12]
 80036c0:	f382 8811 	msr	BASEPRI, r2
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *currtp = chThdGetSelfX();

  chSysLock();
  if ((currtp->epending & events) != events) {
 80036c4:	6b88      	ldr	r0, [r1, #56]	; 0x38
 80036c6:	3001      	adds	r0, #1
 80036c8:	d058      	beq.n	800377c <rt_test_010_006_execute.lto_priv.0+0xec>
 80036ca:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 80036ce:	2302      	movs	r3, #2
 80036d0:	68ef      	ldr	r7, [r5, #12]
 80036d2:	6023      	str	r3, [r4, #0]
 80036d4:	f382 8811 	msr	BASEPRI, r2
  m = currtp->epending & events;
 80036d8:	6bbe      	ldr	r6, [r7, #56]	; 0x38
  if (m == (eventmask_t)0) {
 80036da:	2e00      	cmp	r6, #0
 80036dc:	d042      	beq.n	8003764 <rt_test_010_006_execute.lto_priv.0+0xd4>
  m ^= m & (m - (eventmask_t)1);
 80036de:	4273      	negs	r3, r6
  currtp->epending &= ~m;
 80036e0:	ea26 0203 	bic.w	r2, r6, r3
 80036e4:	63ba      	str	r2, [r7, #56]	; 0x38
  m ^= m & (m - (eventmask_t)1);
 80036e6:	401e      	ands	r6, r3
 80036e8:	2300      	movs	r3, #0
 80036ea:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 80036ee:	bb4e      	cbnz	r6, 8003744 <rt_test_010_006_execute.lto_priv.0+0xb4>
 80036f0:	68ee      	ldr	r6, [r5, #12]
 80036f2:	2330      	movs	r3, #48	; 0x30
 80036f4:	f383 8811 	msr	BASEPRI, r3
  m = currtp->epending & events;
 80036f8:	6bb7      	ldr	r7, [r6, #56]	; 0x38
  if (m == (eventmask_t)0) {
 80036fa:	2f00      	cmp	r7, #0
 80036fc:	d040      	beq.n	8003780 <rt_test_010_006_execute.lto_priv.0+0xf0>
  currtp->epending &= ~m;
 80036fe:	2300      	movs	r3, #0
 8003700:	63b3      	str	r3, [r6, #56]	; 0x38
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	b9ef      	cbnz	r7, 8003744 <rt_test_010_006_execute.lto_priv.0+0xb4>
 8003708:	68ed      	ldr	r5, [r5, #12]
 800370a:	2330      	movs	r3, #48	; 0x30
 800370c:	f383 8811 	msr	BASEPRI, r3
  if ((currtp->epending & events) != events) {
 8003710:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003712:	3301      	adds	r3, #1
 8003714:	d009      	beq.n	800372a <rt_test_010_006_execute.lto_priv.0+0x9a>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    currtp->u.ewmask = events;
 8003716:	f04f 33ff 	mov.w	r3, #4294967295
 800371a:	62ab      	str	r3, [r5, #40]	; 0x28
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 800371c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003720:	200b      	movs	r0, #11
 8003722:	f7ff f8fd 	bl	8002920 <chSchGoSleepTimeoutS>
 8003726:	2800      	cmp	r0, #0
 8003728:	db3c      	blt.n	80037a4 <rt_test_010_006_execute.lto_priv.0+0x114>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  currtp->epending &= ~events;
 800372a:	2300      	movs	r3, #0
 800372c:	63ab      	str	r3, [r5, #56]	; 0x38
 800372e:	e011      	b.n	8003754 <rt_test_010_006_execute.lto_priv.0+0xc4>
  m ^= m & (m - (eventmask_t)1);
 8003730:	425a      	negs	r2, r3
  currtp->epending &= ~m;
 8003732:	ea23 0002 	bic.w	r0, r3, r2
 8003736:	6388      	str	r0, [r1, #56]	; 0x38
  m ^= m & (m - (eventmask_t)1);
 8003738:	401a      	ands	r2, r3
 800373a:	2300      	movs	r3, #0
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	2a00      	cmp	r2, #0
 8003742:	d0b3      	beq.n	80036ac <rt_test_010_006_execute.lto_priv.0+0x1c>
  chtest.failure_message = msg;
 8003744:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <rt_test_010_006_execute.lto_priv.0+0x124>)
 8003746:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8003748:	f240 1201 	movw	r2, #257	; 0x101
 800374c:	80a2      	strh	r2, [r4, #4]
}
 800374e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  currtp->epending &= ~m;
 8003750:	2300      	movs	r3, #0
 8003752:	638b      	str	r3, [r1, #56]	; 0x38
 8003754:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8003758:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <rt_test_010_006_execute.lto_priv.0+0x124>)
 800375a:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 800375c:	f240 1201 	movw	r2, #257	; 0x101
 8003760:	80a2      	strh	r2, [r4, #4]
  test_end_step(2);
 8003762:	e7f4      	b.n	800374e <rt_test_010_006_execute.lto_priv.0+0xbe>
    currtp->u.ewmask = events;
 8003764:	f04f 33ff 	mov.w	r3, #4294967295
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 800376a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800376e:	200a      	movs	r0, #10
 8003770:	f7ff f8d6 	bl	8002920 <chSchGoSleepTimeoutS>
 8003774:	2800      	cmp	r0, #0
 8003776:	db0f      	blt.n	8003798 <rt_test_010_006_execute.lto_priv.0+0x108>
    m = currtp->epending & events;
 8003778:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800377a:	e7b0      	b.n	80036de <rt_test_010_006_execute.lto_priv.0+0x4e>
  currtp->epending &= ~events;
 800377c:	638b      	str	r3, [r1, #56]	; 0x38
 800377e:	e7e9      	b.n	8003754 <rt_test_010_006_execute.lto_priv.0+0xc4>
    currtp->u.ewmask = events;
 8003780:	f04f 33ff 	mov.w	r3, #4294967295
 8003784:	62b3      	str	r3, [r6, #40]	; 0x28
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003786:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800378a:	200a      	movs	r0, #10
 800378c:	f7ff f8c8 	bl	8002920 <chSchGoSleepTimeoutS>
 8003790:	2800      	cmp	r0, #0
 8003792:	db04      	blt.n	800379e <rt_test_010_006_execute.lto_priv.0+0x10e>
    m = currtp->epending & events;
 8003794:	6bb7      	ldr	r7, [r6, #56]	; 0x38
 8003796:	e7b2      	b.n	80036fe <rt_test_010_006_execute.lto_priv.0+0x6e>
 8003798:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 800379c:	e7a8      	b.n	80036f0 <rt_test_010_006_execute.lto_priv.0+0x60>
 800379e:	f387 8811 	msr	BASEPRI, r7
 80037a2:	e7b1      	b.n	8003708 <rt_test_010_006_execute.lto_priv.0+0x78>
 80037a4:	2300      	movs	r3, #0
 80037a6:	f383 8811 	msr	BASEPRI, r3
}
 80037aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ac:	20000b74 	.word	0x20000b74
 80037b0:	20000a90 	.word	0x20000a90
 80037b4:	0801511c 	.word	0x0801511c
	...

080037c0 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 80037c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c4:	4605      	mov	r5, r0
 80037c6:	2630      	movs	r6, #48	; 0x30
 80037c8:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80037cc:	2101      	movs	r1, #1
 80037ce:	2008      	movs	r0, #8
 80037d0:	f7ff f8a6 	bl	8002920 <chSchGoSleepTimeoutS>
 80037d4:	f04f 0a00 	mov.w	sl, #0
 80037d8:	f38a 8811 	msr	BASEPRI, sl
 80037dc:	f386 8811 	msr	BASEPRI, r6
 80037e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037e4:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 80037e8:	f38a 8811 	msr	BASEPRI, sl
  end = chTimeAddX(start, TIME_MS2I(1000));
 80037ec:	4c21      	ldr	r4, [pc, #132]	; (8003874 <msg_loop_test+0xb4>)
  __ch_msg_insert(&tp->msgqueue, currtp);
 80037ee:	eb05 0806 	add.w	r8, r5, r6
  currtp->u.sentmsg = msg;
 80037f2:	f04f 0b01 	mov.w	fp, #1
  tp->state = CH_STATE_READY;
 80037f6:	4657      	mov	r7, sl
 80037f8:	e019      	b.n	800382e <msg_loop_test+0x6e>
  thread_t *otp = __instance_get_currthread(oip);
 80037fa:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 80037fc:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80037fe:	230c      	movs	r3, #12
 8003800:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8003804:	6803      	ldr	r3, [r0, #0]
 8003806:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8003808:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800380a:	f880 b024 	strb.w	fp, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 800380e:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8003810:	f7fc fd56 	bl	80002c0 <__port_switch>
 8003814:	f387 8811 	msr	BASEPRI, r7
 8003818:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  } while (chVTIsSystemTimeWithinX(start, end));
 800381c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	eba3 0309 	sub.w	r3, r3, r9
 8003826:	4293      	cmp	r3, r2
    n++;
 8003828:	f10a 0a01 	add.w	sl, sl, #1
  } while (chVTIsSystemTimeWithinX(start, end));
 800382c:	d81b      	bhi.n	8003866 <msg_loop_test+0xa6>
  return __sch_get_currthread();
 800382e:	68e3      	ldr	r3, [r4, #12]
 8003830:	f386 8811 	msr	BASEPRI, r6
  p->prev       = qp->prev;
 8003834:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003836:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
 800383a:	e9c3 8200 	strd	r8, r2, [r3]
  p->prev->next = p;
 800383e:	6013      	str	r3, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 8003840:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  qp->prev      = p;
 8003844:	636b      	str	r3, [r5, #52]	; 0x34
 8003846:	2a0e      	cmp	r2, #14
 8003848:	d1d7      	bne.n	80037fa <msg_loop_test+0x3a>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800384a:	69ab      	ldr	r3, [r5, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800384c:	68a9      	ldr	r1, [r5, #8]
  tp->state = CH_STATE_READY;
 800384e:	f885 7024 	strb.w	r7, [r5, #36]	; 0x24
    pqp = pqp->next;
 8003852:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	428a      	cmp	r2, r1
 8003858:	d2fb      	bcs.n	8003852 <msg_loop_test+0x92>
  p->prev       = pqp->prev;
 800385a:	685a      	ldr	r2, [r3, #4]
  p->next       = pqp;
 800385c:	602b      	str	r3, [r5, #0]
  p->prev       = pqp->prev;
 800385e:	606a      	str	r2, [r5, #4]
  p->prev->next = p;
 8003860:	6015      	str	r5, [r2, #0]
  pqp->prev     = p;
 8003862:	605d      	str	r5, [r3, #4]
  return __sch_ready_behind(tp);
 8003864:	e7c9      	b.n	80037fa <msg_loop_test+0x3a>
  (void)chMsgSend(tp, 0);
 8003866:	2100      	movs	r1, #0
 8003868:	4628      	mov	r0, r5
 800386a:	f7fd fdd9 	bl	8001420 <chMsgSend>
}
 800386e:	4650      	mov	r0, sl
 8003870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003874:	20000a90 	.word	0x20000a90
	...

08003880 <chSchWakeupS>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003880:	b410      	push	{r4}
  thread_t *otp = __instance_get_currthread(oip);
 8003882:	4c16      	ldr	r4, [pc, #88]	; (80038dc <chSchWakeupS+0x5c>)
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8003884:	6882      	ldr	r2, [r0, #8]
  thread_t *otp = __instance_get_currthread(oip);
 8003886:	68e3      	ldr	r3, [r4, #12]
  ntp->u.rdymsg = msg;
 8003888:	6281      	str	r1, [r0, #40]	; 0x28
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 800388a:	6899      	ldr	r1, [r3, #8]
 800388c:	428a      	cmp	r2, r1
 800388e:	d916      	bls.n	80038be <chSchWakeupS+0x3e>
  tp->state = CH_STATE_READY;
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8003896:	699a      	ldr	r2, [r3, #24]
    pqp = pqp->next;
 8003898:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio > p->prio));
 800389a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800389e:	4561      	cmp	r1, ip
 80038a0:	d3fa      	bcc.n	8003898 <chSchWakeupS+0x18>
  p->prev       = pqp->prev;
 80038a2:	6851      	ldr	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 80038a4:	f04f 0c01 	mov.w	ip, #1
 80038a8:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 80038ac:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 80038ae:	6053      	str	r3, [r2, #4]
    chSysSwitch(ntp, otp);
 80038b0:	4619      	mov	r1, r3
    __instance_set_currthread(oip, ntp);
 80038b2:	60e0      	str	r0, [r4, #12]
    ntp->state = CH_STATE_CURRENT;
 80038b4:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
}
 80038b8:	bc10      	pop	{r4}
    chSysSwitch(ntp, otp);
 80038ba:	f7fc bd01 	b.w	80002c0 <__port_switch>
  tp->state = CH_STATE_READY;
 80038be:	2100      	movs	r1, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80038c0:	6983      	ldr	r3, [r0, #24]
  tp->state = CH_STATE_READY;
 80038c2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    pqp = pqp->next;
 80038c6:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80038c8:	6899      	ldr	r1, [r3, #8]
 80038ca:	428a      	cmp	r2, r1
 80038cc:	d9fb      	bls.n	80038c6 <chSchWakeupS+0x46>
  p->prev       = pqp->prev;
 80038ce:	685a      	ldr	r2, [r3, #4]
}
 80038d0:	bc10      	pop	{r4}
 80038d2:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 80038d6:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 80038d8:	6058      	str	r0, [r3, #4]
 80038da:	4770      	bx	lr
 80038dc:	20000a90 	.word	0x20000a90

080038e0 <rt_test_007_001_execute.lto_priv.0>:
static void rt_test_007_001_execute(void) {
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 80038e2:	4d3c      	ldr	r5, [pc, #240]	; (80039d4 <rt_test_007_001_execute.lto_priv.0+0xf4>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	602a      	str	r2, [r5, #0]
 80038e8:	2630      	movs	r6, #48	; 0x30
 80038ea:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 80038ee:	4c3a      	ldr	r4, [pc, #232]	; (80039d8 <rt_test_007_001_execute.lto_priv.0+0xf8>)
 80038f0:	68a3      	ldr	r3, [r4, #8]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	60a3      	str	r3, [r4, #8]
 80038f8:	db44      	blt.n	8003984 <rt_test_007_001_execute.lto_priv.0+0xa4>
 80038fa:	2300      	movs	r3, #0
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f386 8811 	msr	BASEPRI, r6
 8003904:	68a3      	ldr	r3, [r4, #8]
 8003906:	bb23      	cbnz	r3, 8003952 <rt_test_007_001_execute.lto_priv.0+0x72>
 8003908:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 800390c:	2302      	movs	r3, #2
 800390e:	602b      	str	r3, [r5, #0]
 8003910:	2330      	movs	r3, #48	; 0x30
 8003912:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 8003916:	68a3      	ldr	r3, [r4, #8]
 8003918:	3301      	adds	r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	60a3      	str	r3, [r4, #8]
 800391e:	dd21      	ble.n	8003964 <rt_test_007_001_execute.lto_priv.0+0x84>
 8003920:	2600      	movs	r6, #0
 8003922:	f386 8811 	msr	BASEPRI, r6
 8003926:	2730      	movs	r7, #48	; 0x30
 8003928:	f387 8811 	msr	BASEPRI, r7
 800392c:	68a3      	ldr	r3, [r4, #8]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d120      	bne.n	8003974 <rt_test_007_001_execute.lto_priv.0+0x94>
 8003932:	f386 8811 	msr	BASEPRI, r6
  test_set_step(3);
 8003936:	2303      	movs	r3, #3
  chSemResetWithMessage(sp, n, MSG_RESET);
 8003938:	4827      	ldr	r0, [pc, #156]	; (80039d8 <rt_test_007_001_execute.lto_priv.0+0xf8>)
 800393a:	602b      	str	r3, [r5, #0]
 800393c:	2102      	movs	r1, #2
 800393e:	f00f fce7 	bl	8013310 <chSemResetWithMessage.constprop.0>
 8003942:	f387 8811 	msr	BASEPRI, r7
 8003946:	68a3      	ldr	r3, [r4, #8]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d113      	bne.n	8003974 <rt_test_007_001_execute.lto_priv.0+0x94>
 800394c:	f386 8811 	msr	BASEPRI, r6
}
 8003950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 8003952:	4b22      	ldr	r3, [pc, #136]	; (80039dc <rt_test_007_001_execute.lto_priv.0+0xfc>)
 8003954:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8003956:	f240 1201 	movw	r2, #257	; 0x101
 800395a:	80aa      	strh	r2, [r5, #4]
 800395c:	2300      	movs	r3, #0
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ch_queue_t *p = qp->next;
 8003964:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8003966:	6803      	ldr	r3, [r0, #0]
 8003968:	6023      	str	r3, [r4, #0]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&sp->queue)), MSG_OK);
 800396a:	2100      	movs	r1, #0
  qp->next->prev = qp;
 800396c:	605c      	str	r4, [r3, #4]
 800396e:	f7ff ff87 	bl	8003880 <chSchWakeupS>
 8003972:	e7d5      	b.n	8003920 <rt_test_007_001_execute.lto_priv.0+0x40>
  chtest.failure_message = msg;
 8003974:	4b19      	ldr	r3, [pc, #100]	; (80039dc <rt_test_007_001_execute.lto_priv.0+0xfc>)
 8003976:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8003978:	f240 1201 	movw	r2, #257	; 0x101
 800397c:	80aa      	strh	r2, [r5, #4]
 800397e:	f386 8811 	msr	BASEPRI, r6
 8003982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003984:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <rt_test_007_001_execute.lto_priv.0+0x100>)
  p->prev       = qp->prev;
 8003986:	6861      	ldr	r1, [r4, #4]
 8003988:	68df      	ldr	r7, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 800398a:	6818      	ldr	r0, [r3, #0]
    currtp->u.wtsemp = sp;
 800398c:	62bc      	str	r4, [r7, #40]	; 0x28
  p->prev       = qp->prev;
 800398e:	e9c7 4100 	strd	r4, r1, [r7]
  p->prev->next = p;
 8003992:	600f      	str	r7, [r1, #0]
  otp->state = newstate;
 8003994:	2105      	movs	r1, #5
 8003996:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
  pqp->next       = p->next;
 800399a:	6801      	ldr	r1, [r0, #0]
  qp->prev      = p;
 800399c:	6067      	str	r7, [r4, #4]
  pqp->next       = p->next;
 800399e:	6019      	str	r1, [r3, #0]
  pqp->next->prev = pqp;
 80039a0:	604b      	str	r3, [r1, #4]
  ntp->state = CH_STATE_CURRENT;
 80039a2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  chSysSwitch(ntp, otp);
 80039a6:	4639      	mov	r1, r7
  __instance_set_currthread(oip, ntp);
 80039a8:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 80039aa:	f7fc fc89 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 80039ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b0:	2300      	movs	r3, #0
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 80039ba:	68a3      	ldr	r3, [r4, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1c8      	bne.n	8003952 <rt_test_007_001_execute.lto_priv.0+0x72>
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	2a00      	cmp	r2, #0
 80039c6:	d0a1      	beq.n	800390c <rt_test_007_001_execute.lto_priv.0+0x2c>
  chtest.failure_message = msg;
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <rt_test_007_001_execute.lto_priv.0+0x104>)
 80039ca:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80039cc:	f240 1201 	movw	r2, #257	; 0x101
 80039d0:	80aa      	strh	r2, [r5, #4]
 80039d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d4:	20000b74 	.word	0x20000b74
 80039d8:	20000dbc 	.word	0x20000dbc
 80039dc:	0801512c 	.word	0x0801512c
 80039e0:	20000a90 	.word	0x20000a90
 80039e4:	08015140 	.word	0x08015140
	...

080039f0 <thread3>:
static THD_FUNCTION(thread3, p) {
 80039f0:	b510      	push	{r4, lr}
 80039f2:	2330      	movs	r3, #48	; 0x30
 80039f4:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80039f8:	4c1a      	ldr	r4, [pc, #104]	; (8003a64 <thread3+0x74>)
 80039fa:	68a3      	ldr	r3, [r4, #8]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	60a3      	str	r3, [r4, #8]
 8003a02:	db18      	blt.n	8003a36 <thread3+0x46>
 8003a04:	2100      	movs	r1, #0
 8003a06:	f381 8811 	msr	BASEPRI, r1
 8003a0a:	2330      	movs	r3, #48	; 0x30
 8003a0c:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 8003a10:	68a3      	ldr	r3, [r4, #8]
 8003a12:	3301      	adds	r3, #1
 8003a14:	428b      	cmp	r3, r1
 8003a16:	60a3      	str	r3, [r4, #8]
 8003a18:	dd03      	ble.n	8003a22 <thread3+0x32>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f383 8811 	msr	BASEPRI, r3
}
 8003a20:	bd10      	pop	{r4, pc}
  ch_queue_t *p = qp->next;
 8003a22:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8003a24:	6803      	ldr	r3, [r0, #0]
 8003a26:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 8003a28:	605c      	str	r4, [r3, #4]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&sp->queue)), MSG_OK);
 8003a2a:	f7ff ff29 	bl	8003880 <chSchWakeupS>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	bd10      	pop	{r4, pc}
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <thread3+0x78>)
  p->prev       = qp->prev;
 8003a38:	6862      	ldr	r2, [r4, #4]
 8003a3a:	68d9      	ldr	r1, [r3, #12]
  otp->state = newstate;
 8003a3c:	2005      	movs	r0, #5
 8003a3e:	e9c1 4200 	strd	r4, r2, [r1]
    currtp->u.wtsemp = sp;
 8003a42:	628c      	str	r4, [r1, #40]	; 0x28
  p->prev->next = p;
 8003a44:	6011      	str	r1, [r2, #0]
 8003a46:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  ch_priority_queue_t *p = pqp->next;
 8003a4a:	6818      	ldr	r0, [r3, #0]
  qp->prev      = p;
 8003a4c:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 8003a4e:	6802      	ldr	r2, [r0, #0]
 8003a50:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 8003a52:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 8003a54:	2201      	movs	r2, #1
 8003a56:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8003a5a:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8003a5c:	f7fc fc30 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 8003a60:	e7d0      	b.n	8003a04 <thread3+0x14>
 8003a62:	bf00      	nop
 8003a64:	20000dbc 	.word	0x20000dbc
 8003a68:	20000a90 	.word	0x20000a90
 8003a6c:	00000000 	.word	0x00000000

08003a70 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 8003a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a74:	4f18      	ldr	r7, [pc, #96]	; (8003ad8 <bmk_thread1+0x68>)
 8003a76:	2630      	movs	r6, #48	; 0x30
  otp->state = newstate;
 8003a78:	f04f 090e 	mov.w	r9, #14
  ntp->state = CH_STATE_CURRENT;
 8003a7c:	f04f 0801 	mov.w	r8, #1
 8003a80:	e010      	b.n	8003aa4 <bmk_thread1+0x34>
  qp->next       = p->next;
 8003a82:	6803      	ldr	r3, [r0, #0]
 8003a84:	632b      	str	r3, [r5, #48]	; 0x30

  if (!chMsgIsPendingI(currtp)) {
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = threadref(ch_queue_fifo_remove(&currtp->msgqueue));
  tp->state = CH_STATE_SNDMSG;
 8003a86:	220d      	movs	r2, #13
  qp->next->prev = qp;
 8003a88:	605c      	str	r4, [r3, #4]
 8003a8a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8003a8e:	f38a 8811 	msr	BASEPRI, sl
 */
static inline msg_t chMsgGet(thread_t *tp) {

  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");

  return tp->u.sentmsg;
 8003a92:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003a94:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8003a98:	4621      	mov	r1, r4
 8003a9a:	f7ff fef1 	bl	8003880 <chSchWakeupS>
 8003a9e:	f38a 8811 	msr	BASEPRI, sl
  } while (msg);
 8003aa2:	b1bc      	cbz	r4, 8003ad4 <bmk_thread1+0x64>
 8003aa4:	f386 8811 	msr	BASEPRI, r6
 8003aa8:	68fd      	ldr	r5, [r7, #12]
  return (bool)(tp->msgqueue.next != &tp->msgqueue);
 8003aaa:	462c      	mov	r4, r5
 8003aac:	f04f 0a00 	mov.w	sl, #0
 8003ab0:	f854 0f30 	ldr.w	r0, [r4, #48]!
  if (!chMsgIsPendingI(currtp)) {
 8003ab4:	42a0      	cmp	r0, r4
 8003ab6:	d1e4      	bne.n	8003a82 <bmk_thread1+0x12>
  ch_priority_queue_t *p = pqp->next;
 8003ab8:	6838      	ldr	r0, [r7, #0]
  otp->state = newstate;
 8003aba:	f885 9024 	strb.w	r9, [r5, #36]	; 0x24
  pqp->next       = p->next;
 8003abe:	6803      	ldr	r3, [r0, #0]
 8003ac0:	603b      	str	r3, [r7, #0]
  pqp->next->prev = pqp;
 8003ac2:	605f      	str	r7, [r3, #4]
  chSysSwitch(ntp, otp);
 8003ac4:	4629      	mov	r1, r5
  ntp->state = CH_STATE_CURRENT;
 8003ac6:	f880 8024 	strb.w	r8, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8003aca:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8003acc:	f7fc fbf8 	bl	80002c0 <__port_switch>
  ch_queue_t *p = qp->next;
 8003ad0:	6b28      	ldr	r0, [r5, #48]	; 0x30
}
 8003ad2:	e7d6      	b.n	8003a82 <bmk_thread1+0x12>
}
 8003ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad8:	20000a90 	.word	0x20000a90
 8003adc:	00000000 	.word	0x00000000

08003ae0 <chThdCreateSuspendedI>:
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8003ae0:	b530      	push	{r4, r5, lr}
  return __thd_object_init(currcore, tp, tdp->name, tdp->prio);
 8003ae2:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
  tp->wabase = tdp->wbase;
 8003ae6:	6845      	ldr	r5, [r0, #4]
 8003ae8:	f843 5c28 	str.w	r5, [r3, #-40]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003aec:	6905      	ldr	r5, [r0, #16]
  tp->owner             = oip;
 8003aee:	4a1c      	ldr	r2, [pc, #112]	; (8003b60 <chThdCreateSuspendedI+0x80>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003af0:	f843 5c6c 	str.w	r5, [r3, #-108]
  tp->flags             = CH_FLAG_MODE_STATIC;
 8003af4:	2100      	movs	r1, #0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003af6:	6945      	ldr	r5, [r0, #20]
 8003af8:	f843 5c68 	str.w	r5, [r3, #-104]
  tp->state             = CH_STATE_WTSTART;
 8003afc:	f04f 0e02 	mov.w	lr, #2
  tp->refs              = (trefs_t)1;
 8003b00:	f04f 0c01 	mov.w	ip, #1
  return __thd_object_init(currcore, tp, tdp->name, tdp->prio);
 8003b04:	6805      	ldr	r5, [r0, #0]
  tp->flags             = CH_FLAG_MODE_STATIC;
 8003b06:	f803 1c23 	strb.w	r1, [r3, #-35]
  tp->state             = CH_STATE_WTSTART;
 8003b0a:	f803 ec24 	strb.w	lr, [r3, #-36]
  tp->refs              = (trefs_t)1;
 8003b0e:	f803 cc22 	strb.w	ip, [r3, #-34]
  tp->hdr.pqueue.prio   = prio;
 8003b12:	f843 4c40 	str.w	r4, [r3, #-64]
  tp->realprio          = prio;
 8003b16:	f843 4c08 	str.w	r4, [r3, #-8]
  p->prev       = qp->prev;
 8003b1a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  tp->name              = name;
 8003b1c:	f843 5c2c 	str.w	r5, [r3, #-44]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003b20:	4d10      	ldr	r5, [pc, #64]	; (8003b64 <chThdCreateSuspendedI+0x84>)
 8003b22:	f843 5c4c 	str.w	r5, [r3, #-76]
 8003b26:	f1a3 056c 	sub.w	r5, r3, #108	; 0x6c
  REG_INSERT(oip, tp);
 8003b2a:	f1a3 0038 	sub.w	r0, r3, #56	; 0x38
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003b2e:	f843 5c3c 	str.w	r5, [r3, #-60]
  p->next       = qp;
 8003b32:	f102 0528 	add.w	r5, r2, #40	; 0x28
  tp->epending          = (eventmask_t)0;
 8003b36:	e943 1104 	strd	r1, r1, [r3, #-16]
  p->prev       = qp->prev;
 8003b3a:	f843 4c34 	str.w	r4, [r3, #-52]
  tp->owner             = oip;
 8003b3e:	f843 2c30 	str.w	r2, [r3, #-48]
  ch_queue_init(&tp->msgqueue);
 8003b42:	f1a3 0118 	sub.w	r1, r3, #24
  p->next       = qp;
 8003b46:	f843 5c38 	str.w	r5, [r3, #-56]
  p->prev->next = p;
 8003b4a:	6020      	str	r0, [r4, #0]
  ch_list_init(&tp->waiting);
 8003b4c:	f1a3 041c 	sub.w	r4, r3, #28
  qp->prev      = p;
 8003b50:	62d0      	str	r0, [r2, #44]	; 0x2c
  qp->next = qp;
 8003b52:	e943 4107 	strd	r4, r1, [r3, #-28]
}
 8003b56:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  qp->prev = qp;
 8003b5a:	f843 1c14 	str.w	r1, [r3, #-20]
 8003b5e:	bd30      	pop	{r4, r5, pc}
 8003b60:	20000a90 	.word	0x20000a90
 8003b64:	080002d1 	.word	0x080002d1
	...

08003b70 <chThdCreateStatic>:
                            tprio_t prio, tfunc_t pf, void *arg) {
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	2430      	movs	r4, #48	; 0x30
 8003b74:	f384 8811 	msr	BASEPRI, r4
  tp = threadref(((uint8_t *)wsp + size -
 8003b78:	3948      	subs	r1, #72	; 0x48
 8003b7a:	1844      	adds	r4, r0, r1
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003b7c:	4918      	ldr	r1, [pc, #96]	; (8003be0 <chThdCreateStatic+0x70>)
 8003b7e:	f844 1c04 	str.w	r1, [r4, #-4]
 8003b82:	f1a4 0124 	sub.w	r1, r4, #36	; 0x24
 8003b86:	f844 3c24 	str.w	r3, [r4, #-36]
 8003b8a:	60e1      	str	r1, [r4, #12]
  tp->owner             = oip;
 8003b8c:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <chThdCreateStatic+0x74>)
  tp->hdr.pqueue.prio   = prio;
 8003b8e:	60a2      	str	r2, [r4, #8]
  tp->state             = CH_STATE_WTSTART;
 8003b90:	2102      	movs	r1, #2
 8003b92:	84a1      	strh	r1, [r4, #36]	; 0x24
  tp->refs              = (trefs_t)1;
 8003b94:	2101      	movs	r1, #1
 8003b96:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
  tp->realprio          = prio;
 8003b9a:	6422      	str	r2, [r4, #64]	; 0x40
  p->next       = qp;
 8003b9c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003ba0:	6122      	str	r2, [r4, #16]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003ba2:	9904      	ldr	r1, [sp, #16]
  p->prev       = qp->prev;
 8003ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tp->wabase = (stkalign_t *)wsp;
 8003ba6:	6220      	str	r0, [r4, #32]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003ba8:	f844 1c20 	str.w	r1, [r4, #-32]
  tp->mtxlist           = NULL;
 8003bac:	2500      	movs	r5, #0
  REG_INSERT(oip, tp);
 8003bae:	f104 0110 	add.w	r1, r4, #16
  tp->name              = name;
 8003bb2:	480d      	ldr	r0, [pc, #52]	; (8003be8 <chThdCreateStatic+0x78>)
 8003bb4:	61e0      	str	r0, [r4, #28]
 8003bb6:	6162      	str	r2, [r4, #20]
  tp->owner             = oip;
 8003bb8:	61a3      	str	r3, [r4, #24]
  tp->epending          = (eventmask_t)0;
 8003bba:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
  ch_list_init(&tp->waiting);
 8003bbe:	f104 002c 	add.w	r0, r4, #44	; 0x2c
  p->prev->next = p;
 8003bc2:	6011      	str	r1, [r2, #0]
  ch_queue_init(&tp->msgqueue);
 8003bc4:	f104 0230 	add.w	r2, r4, #48	; 0x30
  qp->prev      = p;
 8003bc8:	62d9      	str	r1, [r3, #44]	; 0x2c
  qp->prev = qp;
 8003bca:	6362      	str	r2, [r4, #52]	; 0x34
  qp->next = qp;
 8003bcc:	e9c4 020b 	strd	r0, r2, [r4, #44]	; 0x2c
  chSchWakeupS(tp, MSG_OK);
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f7ff fe54 	bl	8003880 <chSchWakeupS>
 8003bd8:	f385 8811 	msr	BASEPRI, r5
}
 8003bdc:	4620      	mov	r0, r4
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	080002d1 	.word	0x080002d1
 8003be4:	20000a90 	.word	0x20000a90
 8003be8:	08015158 	.word	0x08015158
 8003bec:	00000000 	.word	0x00000000

08003bf0 <rt_test_007_005_execute.lto_priv.0>:

static void rt_test_007_005_teardown(void) {
  test_wait_threads();
}

static void rt_test_007_005_execute(void) {
 8003bf0:	b530      	push	{r4, r5, lr}
 8003bf2:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <rt_test_007_005_execute.lto_priv.0+0x68>)

  /* [7.5.1] An higher priority thread is created that performs
     non-atomical wait and signal operations on a semaphore.*/
  test_set_step(1);
 8003bf4:	4c19      	ldr	r4, [pc, #100]	; (8003c5c <rt_test_007_005_execute.lto_priv.0+0x6c>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8003bf6:	68db      	ldr	r3, [r3, #12]
static void rt_test_007_005_execute(void) {
 8003bf8:	b083      	sub	sp, #12
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	4b18      	ldr	r3, [pc, #96]	; (8003c60 <rt_test_007_005_execute.lto_priv.0+0x70>)
 8003bfe:	2500      	movs	r5, #0
  test_set_step(1);
 8003c00:	2001      	movs	r0, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003c02:	3201      	adds	r2, #1
 8003c04:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8003c08:	9500      	str	r5, [sp, #0]
  test_set_step(1);
 8003c0a:	6020      	str	r0, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003c0c:	4815      	ldr	r0, [pc, #84]	; (8003c64 <rt_test_007_005_execute.lto_priv.0+0x74>)
 8003c0e:	f7ff ffaf 	bl	8003b70 <chThdCreateStatic>
 8003c12:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <rt_test_007_005_execute.lto_priv.0+0x78>)
  test_end_step(1);

  /* [7.5.2] The function chSemSignalWait() is invoked by specifying
     the same semaphore for the wait and signal phases. The counter
     value must be one on exit.*/
  test_set_step(2);
 8003c14:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003c16:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8003c18:	6023      	str	r3, [r4, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8003c1a:	f00f fd89 	bl	8013730 <chSemSignalWait.constprop.0.isra.0>
  return (bool)(qp->next == qp);
 8003c1e:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <rt_test_007_005_execute.lto_priv.0+0x7c>)
  if (!condition) {
 8003c20:	681d      	ldr	r5, [r3, #0]
 8003c22:	429d      	cmp	r5, r3
 8003c24:	d111      	bne.n	8003c4a <rt_test_007_005_execute.lto_priv.0+0x5a>
 8003c26:	68ab      	ldr	r3, [r5, #8]
 8003c28:	b943      	cbnz	r3, 8003c3c <rt_test_007_005_execute.lto_priv.0+0x4c>
  test_end_step(2);

  /* [7.5.3] The function chSemSignalWait() is invoked again by
     specifying the same semaphore for the wait and signal phases. The
     counter value must be one on exit.*/
  test_set_step(3);
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	6023      	str	r3, [r4, #0]
  {
    chSemSignalWait(&sem1, &sem1);
 8003c2e:	f00f fd7f 	bl	8013730 <chSemSignalWait.constprop.0.isra.0>
 8003c32:	682b      	ldr	r3, [r5, #0]
 8003c34:	42ab      	cmp	r3, r5
 8003c36:	d108      	bne.n	8003c4a <rt_test_007_005_execute.lto_priv.0+0x5a>
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	b123      	cbz	r3, 8003c46 <rt_test_007_005_execute.lto_priv.0+0x56>
  chtest.failure_message = msg;
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <rt_test_007_005_execute.lto_priv.0+0x80>)
 8003c3e:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8003c40:	f240 1201 	movw	r2, #257	; 0x101
 8003c44:	80a2      	strh	r2, [r4, #4]
    test_assert(ch_queue_isempty(&sem1.queue), "queue not empty");
    test_assert(sem1.cnt == 0, "counter not zero");
  }
  test_end_step(3);
}
 8003c46:	b003      	add	sp, #12
 8003c48:	bd30      	pop	{r4, r5, pc}
  chtest.failure_message = msg;
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <rt_test_007_005_execute.lto_priv.0+0x84>)
 8003c4c:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8003c4e:	f240 1201 	movw	r2, #257	; 0x101
 8003c52:	80a2      	strh	r2, [r4, #4]
 8003c54:	b003      	add	sp, #12
 8003c56:	bd30      	pop	{r4, r5, pc}
 8003c58:	20000a90 	.word	0x20000a90
 8003c5c:	20000b74 	.word	0x20000b74
 8003c60:	080039f1 	.word	0x080039f1
 8003c64:	20000dd8 	.word	0x20000dd8
 8003c68:	200016e4 	.word	0x200016e4
 8003c6c:	20000dbc 	.word	0x20000dbc
 8003c70:	08015170 	.word	0x08015170
 8003c74:	08015160 	.word	0x08015160
	...

08003c80 <rt_test_007_006_execute.lto_priv.0>:

static void rt_test_007_006_teardown(void) {
  test_wait_threads();
}

static void rt_test_007_006_execute(void) {
 8003c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [7.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8003c84:	4c79      	ldr	r4, [pc, #484]	; (8003e6c <rt_test_007_006_execute.lto_priv.0+0x1ec>)
static void rt_test_007_006_execute(void) {
 8003c86:	b086      	sub	sp, #24
  qp->next = qp;
 8003c88:	ae03      	add	r6, sp, #12
  test_set_step(1);
 8003c8a:	f04f 0801 	mov.w	r8, #1
  sp->cnt = n;
 8003c8e:	2500      	movs	r5, #0
  qp->prev = qp;
 8003c90:	e9cd 6603 	strd	r6, r6, [sp, #12]
 8003c94:	f8c4 8000 	str.w	r8, [r4]
 8003c98:	9505      	str	r5, [sp, #20]
 8003c9a:	2730      	movs	r7, #48	; 0x30
 8003c9c:	f387 8811 	msr	BASEPRI, r7
  if (!condition) {
 8003ca0:	9b05      	ldr	r3, [sp, #20]
 8003ca2:	42ab      	cmp	r3, r5
 8003ca4:	dc7a      	bgt.n	8003d9c <rt_test_007_006_execute.lto_priv.0+0x11c>
 8003ca6:	f385 8811 	msr	BASEPRI, r5
  }
  test_end_step(1);

  /* [7.6.2] Resetting the binary semaphore in "taken" state, the state
     must not change.*/
  test_set_step(2);
 8003caa:	2302      	movs	r3, #2
 8003cac:	4629      	mov	r1, r5
 8003cae:	4630      	mov	r0, r6
 8003cb0:	6023      	str	r3, [r4, #0]
 8003cb2:	f00f fb2d 	bl	8013310 <chSemResetWithMessage.constprop.0>
 8003cb6:	f387 8811 	msr	BASEPRI, r7
 8003cba:	9b05      	ldr	r3, [sp, #20]
 8003cbc:	42ab      	cmp	r3, r5
 8003cbe:	dc6d      	bgt.n	8003d9c <rt_test_007_006_execute.lto_priv.0+0x11c>
 8003cc0:	f385 8811 	msr	BASEPRI, r5
  return __sch_get_currthread();
 8003cc4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8003e70 <rt_test_007_006_execute.lto_priv.0+0x1f0>
  test_end_step(2);

  /* [7.6.3] Starting a signaler thread at a lower priority.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8003cc8:	4b6a      	ldr	r3, [pc, #424]	; (8003e74 <rt_test_007_006_execute.lto_priv.0+0x1f4>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8003cca:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8003cce:	486a      	ldr	r0, [pc, #424]	; (8003e78 <rt_test_007_006_execute.lto_priv.0+0x1f8>)
 8003cd0:	6892      	ldr	r2, [r2, #8]
 8003cd2:	9600      	str	r6, [sp, #0]
  test_set_step(3);
 8003cd4:	2103      	movs	r1, #3
 8003cd6:	6021      	str	r1, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8003cd8:	3a01      	subs	r2, #1
 8003cda:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8003cde:	f7ff ff47 	bl	8003b70 <chThdCreateStatic>
 8003ce2:	4b66      	ldr	r3, [pc, #408]	; (8003e7c <rt_test_007_006_execute.lto_priv.0+0x1fc>)
 8003ce4:	6018      	str	r0, [r3, #0]
  }
  test_end_step(3);

  /* [7.6.4] Waiting for the binary semaphore to be signaled, the
     semaphore is expected to be taken.*/
  test_set_step(4);
 8003ce6:	2304      	movs	r3, #4
 8003ce8:	6023      	str	r3, [r4, #0]
 8003cea:	f387 8811 	msr	BASEPRI, r7
  if (--sp->cnt < (cnt_t)0) {
 8003cee:	9b05      	ldr	r3, [sp, #20]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	9305      	str	r3, [sp, #20]
 8003cf6:	db6e      	blt.n	8003dd6 <rt_test_007_006_execute.lto_priv.0+0x156>
 8003cf8:	f385 8811 	msr	BASEPRI, r5
 8003cfc:	f387 8811 	msr	BASEPRI, r7
 8003d00:	9b05      	ldr	r3, [sp, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	dc54      	bgt.n	8003db0 <rt_test_007_006_execute.lto_priv.0+0x130>
 8003d06:	f385 8811 	msr	BASEPRI, r5
  test_end_step(4);

  /* [7.6.5] Signaling the binary semaphore, checking the binary
     semaphore state to be "not taken" and the underlying counter
     semaphore counter to be one.*/
  test_set_step(5);
 8003d0a:	2305      	movs	r3, #5
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	2330      	movs	r3, #48	; 0x30
 8003d10:	f383 8811 	msr	BASEPRI, r3
  if (bsp->sem.cnt < (cnt_t)1) {
 8003d14:	9b05      	ldr	r3, [sp, #20]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f340 8097 	ble.w	8003e4a <rt_test_007_006_execute.lto_priv.0+0x1ca>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003d1c:	f8d9 2000 	ldr.w	r2, [r9]
 8003d20:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003d24:	6892      	ldr	r2, [r2, #8]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d901      	bls.n	8003d30 <rt_test_007_006_execute.lto_priv.0+0xb0>
    __sch_reschedule_ahead();
 8003d2c:	f7fe f910 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8003d30:	2300      	movs	r3, #0
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	2230      	movs	r2, #48	; 0x30
 8003d38:	f382 8811 	msr	BASEPRI, r2
 8003d3c:	9905      	ldr	r1, [sp, #20]
 8003d3e:	4299      	cmp	r1, r3
 8003d40:	dd41      	ble.n	8003dc6 <rt_test_007_006_execute.lto_priv.0+0x146>
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f382 8811 	msr	BASEPRI, r2
 8003d4a:	9905      	ldr	r1, [sp, #20]
 8003d4c:	2901      	cmp	r1, #1
 8003d4e:	d174      	bne.n	8003e3a <rt_test_007_006_execute.lto_priv.0+0x1ba>
 8003d50:	f383 8811 	msr	BASEPRI, r3
  }
  test_end_step(5);

  /* [7.6.6] Signaling the binary semaphore again, the internal state
     must not change from "not taken".*/
  test_set_step(6);
 8003d54:	2306      	movs	r3, #6
 8003d56:	6023      	str	r3, [r4, #0]
 8003d58:	f382 8811 	msr	BASEPRI, r2
 8003d5c:	9b05      	ldr	r3, [sp, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	dd7f      	ble.n	8003e62 <rt_test_007_006_execute.lto_priv.0+0x1e2>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003d62:	f8d9 2000 	ldr.w	r2, [r9]
 8003d66:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003d6a:	6892      	ldr	r2, [r2, #8]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d901      	bls.n	8003d76 <rt_test_007_006_execute.lto_priv.0+0xf6>
    __sch_reschedule_ahead();
 8003d72:	f7fe f8ed 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8003d76:	2300      	movs	r3, #0
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	2230      	movs	r2, #48	; 0x30
 8003d7e:	f382 8811 	msr	BASEPRI, r2
 8003d82:	9905      	ldr	r1, [sp, #20]
 8003d84:	4299      	cmp	r1, r3
 8003d86:	dd64      	ble.n	8003e52 <rt_test_007_006_execute.lto_priv.0+0x1d2>
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f382 8811 	msr	BASEPRI, r2
 8003d90:	9a05      	ldr	r2, [sp, #20]
 8003d92:	2a01      	cmp	r2, #1
 8003d94:	d151      	bne.n	8003e3a <rt_test_007_006_execute.lto_priv.0+0x1ba>
 8003d96:	f383 8811 	msr	BASEPRI, r3
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
  test_end_step(6);
 8003d9a:	e006      	b.n	8003daa <rt_test_007_006_execute.lto_priv.0+0x12a>
  chtest.failure_message = msg;
 8003d9c:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <rt_test_007_006_execute.lto_priv.0+0x200>)
 8003d9e:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8003da0:	f240 1201 	movw	r2, #257	; 0x101
 8003da4:	80a2      	strh	r2, [r4, #4]
 8003da6:	f385 8811 	msr	BASEPRI, r5
}
 8003daa:	b006      	add	sp, #24
 8003dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.failure_message = msg;
 8003db0:	4b33      	ldr	r3, [pc, #204]	; (8003e80 <rt_test_007_006_execute.lto_priv.0+0x200>)
 8003db2:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8003db4:	f240 1201 	movw	r2, #257	; 0x101
 8003db8:	80a2      	strh	r2, [r4, #4]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	b006      	add	sp, #24
 8003dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.failure_message = msg;
 8003dc6:	4a2f      	ldr	r2, [pc, #188]	; (8003e84 <rt_test_007_006_execute.lto_priv.0+0x204>)
 8003dc8:	60a2      	str	r2, [r4, #8]
  chtest.global_fail     = true;
 8003dca:	f240 1101 	movw	r1, #257	; 0x101
 8003dce:	80a1      	strh	r1, [r4, #4]
 8003dd0:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8003dd4:	e7e9      	b.n	8003daa <rt_test_007_006_execute.lto_priv.0+0x12a>
  return __sch_get_currthread();
 8003dd6:	f8d9 a00c 	ldr.w	sl, [r9, #12]
  p->prev       = qp->prev;
 8003dda:	9b04      	ldr	r3, [sp, #16]
  p->next       = qp;
 8003ddc:	f8ca 6000 	str.w	r6, [sl]
  p->prev       = qp->prev;
 8003de0:	f8ca 3004 	str.w	r3, [sl, #4]
  ch_priority_queue_t *p = pqp->next;
 8003de4:	f8d9 0000 	ldr.w	r0, [r9]
    currtp->u.wtsemp = sp;
 8003de8:	f8ca 6028 	str.w	r6, [sl, #40]	; 0x28
  p->prev->next = p;
 8003dec:	f8c3 a000 	str.w	sl, [r3]
  otp->state = newstate;
 8003df0:	2305      	movs	r3, #5
 8003df2:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
  pqp->next       = p->next;
 8003df6:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 8003df8:	f8cd a010 	str.w	sl, [sp, #16]
  chSysSwitch(ntp, otp);
 8003dfc:	4651      	mov	r1, sl
  pqp->next->prev = pqp;
 8003dfe:	f8c3 9004 	str.w	r9, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8003e02:	f880 8024 	strb.w	r8, [r0, #36]	; 0x24
  pqp->next       = p->next;
 8003e06:	f8c9 3000 	str.w	r3, [r9]
  __instance_set_currthread(oip, ntp);
 8003e0a:	f8c9 000c 	str.w	r0, [r9, #12]
  chSysSwitch(ntp, otp);
 8003e0e:	f7fc fa57 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 8003e12:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
 8003e16:	f385 8811 	msr	BASEPRI, r5
 8003e1a:	f387 8811 	msr	BASEPRI, r7
  if (!condition) {
 8003e1e:	9b05      	ldr	r3, [sp, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	dcc5      	bgt.n	8003db0 <rt_test_007_006_execute.lto_priv.0+0x130>
 8003e24:	f385 8811 	msr	BASEPRI, r5
 8003e28:	2a00      	cmp	r2, #0
 8003e2a:	f43f af6e 	beq.w	8003d0a <rt_test_007_006_execute.lto_priv.0+0x8a>
  chtest.failure_message = msg;
 8003e2e:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <rt_test_007_006_execute.lto_priv.0+0x208>)
 8003e30:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8003e32:	f240 1201 	movw	r2, #257	; 0x101
 8003e36:	80a2      	strh	r2, [r4, #4]
  return true;
 8003e38:	e7b7      	b.n	8003daa <rt_test_007_006_execute.lto_priv.0+0x12a>
  chtest.failure_message = msg;
 8003e3a:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <rt_test_007_006_execute.lto_priv.0+0x20c>)
 8003e3c:	60a2      	str	r2, [r4, #8]
  chtest.global_fail     = true;
 8003e3e:	f240 1101 	movw	r1, #257	; 0x101
 8003e42:	80a1      	strh	r1, [r4, #4]
 8003e44:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8003e48:	e7af      	b.n	8003daa <rt_test_007_006_execute.lto_priv.0+0x12a>
    chSemSignalI(&bsp->sem);
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	f7fd f938 	bl	80010c0 <chSemSignalI>
 8003e50:	e764      	b.n	8003d1c <rt_test_007_006_execute.lto_priv.0+0x9c>
  chtest.failure_message = msg;
 8003e52:	4a0f      	ldr	r2, [pc, #60]	; (8003e90 <rt_test_007_006_execute.lto_priv.0+0x210>)
 8003e54:	60a2      	str	r2, [r4, #8]
  chtest.global_fail     = true;
 8003e56:	f240 1101 	movw	r1, #257	; 0x101
 8003e5a:	80a1      	strh	r1, [r4, #4]
 8003e5c:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 8003e60:	e7a3      	b.n	8003daa <rt_test_007_006_execute.lto_priv.0+0x12a>
 8003e62:	4630      	mov	r0, r6
 8003e64:	f7fd f92c 	bl	80010c0 <chSemSignalI>
 8003e68:	e77b      	b.n	8003d62 <rt_test_007_006_execute.lto_priv.0+0xe2>
 8003e6a:	bf00      	nop
 8003e6c:	20000b74 	.word	0x20000b74
 8003e70:	20000a90 	.word	0x20000a90
 8003e74:	08002221 	.word	0x08002221
 8003e78:	20000dd8 	.word	0x20000dd8
 8003e7c:	200016e4 	.word	0x200016e4
 8003e80:	08015184 	.word	0x08015184
 8003e84:	080151a4 	.word	0x080151a4
 8003e88:	08015190 	.word	0x08015190
 8003e8c:	080151b0 	.word	0x080151b0
 8003e90:	08015188 	.word	0x08015188
	...

08003ea0 <chThdExit>:
void chThdExit(msg_t msg) {
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	2330      	movs	r3, #48	; 0x30
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <chThdExit+0x84>)
 8003eaa:	68d9      	ldr	r1, [r3, #12]
  return (bool)(lp->next != lp);
 8003eac:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  currtp->u.exitcode = msg;
 8003eae:	6288      	str	r0, [r1, #40]	; 0x28
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8003eb0:	f101 0c2c 	add.w	ip, r1, #44	; 0x2c
 8003eb4:	4594      	cmp	ip, r2
  tp->state = CH_STATE_READY;
 8003eb6:	bf18      	it	ne
 8003eb8:	f04f 0e00 	movne.w	lr, #0
 8003ebc:	d113      	bne.n	8003ee6 <chThdExit+0x46>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8003ebe:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 8003ec2:	b32a      	cbz	r2, 8003f10 <chThdExit+0x70>
  ch_priority_queue_t *p = pqp->next;
 8003ec4:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 8003ec6:	220f      	movs	r2, #15
 8003ec8:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8003ecc:	6802      	ldr	r2, [r0, #0]
 8003ece:	601a      	str	r2, [r3, #0]
  ntp->state = CH_STATE_CURRENT;
 8003ed0:	f04f 0c01 	mov.w	ip, #1
  pqp->next->prev = pqp;
 8003ed4:	6053      	str	r3, [r2, #4]
 8003ed6:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
}
 8003eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __instance_set_currthread(oip, ntp);
 8003ede:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8003ee0:	f7fc b9ee 	b.w	80002c0 <__port_switch>
 8003ee4:	4622      	mov	r2, r4
  lp->next = p->next;
 8003ee6:	6814      	ldr	r4, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003ee8:	6990      	ldr	r0, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8003eea:	6896      	ldr	r6, [r2, #8]
  lp->next = p->next;
 8003eec:	62cc      	str	r4, [r1, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 8003eee:	f882 e024 	strb.w	lr, [r2, #36]	; 0x24
    pqp = pqp->next;
 8003ef2:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003ef4:	6885      	ldr	r5, [r0, #8]
 8003ef6:	42b5      	cmp	r5, r6
 8003ef8:	d2fb      	bcs.n	8003ef2 <chThdExit+0x52>
  p->prev       = pqp->prev;
 8003efa:	6845      	ldr	r5, [r0, #4]
  p->next       = pqp;
 8003efc:	6010      	str	r0, [r2, #0]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8003efe:	4564      	cmp	r4, ip
  p->prev       = pqp->prev;
 8003f00:	6055      	str	r5, [r2, #4]
  p->prev->next = p;
 8003f02:	602a      	str	r2, [r5, #0]
  pqp->prev     = p;
 8003f04:	6042      	str	r2, [r0, #4]
 8003f06:	d1ed      	bne.n	8003ee4 <chThdExit+0x44>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8003f08:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 8003f0c:	2a00      	cmp	r2, #0
 8003f0e:	d1d9      	bne.n	8003ec4 <chThdExit+0x24>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 8003f10:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
 8003f14:	0792      	lsls	r2, r2, #30
 8003f16:	d1d5      	bne.n	8003ec4 <chThdExit+0x24>
  p->prev->next = p->next;
 8003f18:	e9d1 2004 	ldrd	r2, r0, [r1, #16]
 8003f1c:	6002      	str	r2, [r0, #0]
  p->next->prev = p->prev;
 8003f1e:	6050      	str	r0, [r2, #4]
  return p;
 8003f20:	e7d0      	b.n	8003ec4 <chThdExit+0x24>
 8003f22:	bf00      	nop
 8003f24:	20000a90 	.word	0x20000a90
	...

08003f30 <Thread1.lto_priv.1>:

static THD_WORKING_AREA(waThread1, 256);
static THD_FUNCTION(Thread1, arg) {
 8003f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  (void)arg;

  exit_flag = false;
 8003f34:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8003fbc <Thread1.lto_priv.1+0x8c>
 8003f38:	4f21      	ldr	r7, [pc, #132]	; (8003fc0 <Thread1.lto_priv.1+0x90>)
 8003f3a:	2300      	movs	r3, #0
static THD_FUNCTION(Thread1, arg) {
 8003f3c:	b083      	sub	sp, #12
  exit_flag = false;
 8003f3e:	f888 3000 	strb.w	r3, [r8]
 8003f42:	2630      	movs	r6, #48	; 0x30
  otp->state = newstate;
 8003f44:	f04f 0a0e 	mov.w	sl, #14
  ntp->state = CH_STATE_CURRENT;
 8003f48:	f04f 0901 	mov.w	r9, #1
 8003f4c:	e016      	b.n	8003f7c <Thread1.lto_priv.1+0x4c>
  qp->next       = p->next;
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	630b      	str	r3, [r1, #48]	; 0x30
  tp->state = CH_STATE_SNDMSG;
 8003f52:	220d      	movs	r2, #13
  qp->next->prev = qp;
 8003f54:	605d      	str	r5, [r3, #4]
 8003f56:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8003f5a:	f38b 8811 	msr	BASEPRI, fp
  thread_t *tp;
  const call_message_t *cmp;
  msg_t ret;

  tp = chMsgWait();
  cmp = (const call_message_t *)chMsgGet(tp);
 8003f5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  ret = cmp->veneer(cmp->argsp);
 8003f60:	e9d3 2000 	ldrd	r2, r0, [r3]
 8003f64:	4790      	blx	r2
 8003f66:	4601      	mov	r1, r0
 8003f68:	f386 8811 	msr	BASEPRI, r6
  chSchWakeupS(tp, msg);
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f7ff fc87 	bl	8003880 <chSchWakeupS>
 8003f72:	f38b 8811 	msr	BASEPRI, fp
  do {
    chDelegateDispatch();
  } while (!exit_flag);
 8003f76:	f898 3000 	ldrb.w	r3, [r8]
 8003f7a:	b9c3      	cbnz	r3, 8003fae <Thread1.lto_priv.1+0x7e>
 8003f7c:	f386 8811 	msr	BASEPRI, r6
 8003f80:	68f9      	ldr	r1, [r7, #12]
  return (bool)(tp->msgqueue.next != &tp->msgqueue);
 8003f82:	460d      	mov	r5, r1
 8003f84:	f04f 0b00 	mov.w	fp, #0
 8003f88:	f855 4f30 	ldr.w	r4, [r5, #48]!
  if (!chMsgIsPendingI(currtp)) {
 8003f8c:	42ac      	cmp	r4, r5
 8003f8e:	d1de      	bne.n	8003f4e <Thread1.lto_priv.1+0x1e>
  ch_priority_queue_t *p = pqp->next;
 8003f90:	6838      	ldr	r0, [r7, #0]
  otp->state = newstate;
 8003f92:	f881 a024 	strb.w	sl, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8003f96:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(ntp, otp);
 8003f98:	9101      	str	r1, [sp, #4]
  pqp->next->prev = pqp;
 8003f9a:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8003f9c:	f880 9024 	strb.w	r9, [r0, #36]	; 0x24
  pqp->next       = p->next;
 8003fa0:	603b      	str	r3, [r7, #0]
  __instance_set_currthread(oip, ntp);
 8003fa2:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8003fa4:	f7fc f98c 	bl	80002c0 <__port_switch>
  ch_queue_t *p = qp->next;
 8003fa8:	9901      	ldr	r1, [sp, #4]
 8003faa:	6b0c      	ldr	r4, [r1, #48]	; 0x30
}
 8003fac:	e7cf      	b.n	8003f4e <Thread1.lto_priv.1+0x1e>

  chThdExit(0x0FA5);
 8003fae:	f640 70a5 	movw	r0, #4005	; 0xfa5
}
 8003fb2:	b003      	add	sp, #12
 8003fb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chThdExit(0x0FA5);
 8003fb8:	f7ff bf72 	b.w	8003ea0 <chThdExit>
 8003fbc:	20000bb8 	.word	0x20000bb8
 8003fc0:	20000a90 	.word	0x20000a90
	...

08003fd0 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8003fd0:	4b01      	ldr	r3, [pc, #4]	; (8003fd8 <chTMStartMeasurementX+0x8>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8003fd4:	6083      	str	r3, [r0, #8]
}
 8003fd6:	4770      	bx	lr
 8003fd8:	e0001000 	.word	0xe0001000
 8003fdc:	00000000 	.word	0x00000000

08003fe0 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8003fe0:	4a0e      	ldr	r2, [pc, #56]	; (800401c <chTMStopMeasurementX+0x3c>)
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
 8003fe4:	6881      	ldr	r1, [r0, #8]
 8003fe6:	685b      	ldr	r3, [r3, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8003fe8:	b410      	push	{r4}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8003fea:	6894      	ldr	r4, [r2, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8003fec:	6902      	ldr	r2, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8003fee:	1b1b      	subs	r3, r3, r4
 8003ff0:	1a5b      	subs	r3, r3, r1
  tmp->cumulative += (rttime_t)tmp->last;
 8003ff2:	18d2      	adds	r2, r2, r3
 8003ff4:	6941      	ldr	r1, [r0, #20]
 8003ff6:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 8003ff8:	6842      	ldr	r2, [r0, #4]
  tmp->n++;
 8003ffa:	68c4      	ldr	r4, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8003ffc:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 8004000:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8004002:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8004004:	bf88      	it	hi
 8004006:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8004008:	3401      	adds	r4, #1
  if (tmp->last < tmp->best) {
 800400a:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 800400c:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8004010:	6141      	str	r1, [r0, #20]
}
 8004012:	bc10      	pop	{r4}
    tmp->best = tmp->last;
 8004014:	bf38      	it	cc
 8004016:	6003      	strcc	r3, [r0, #0]
}
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20000b68 	.word	0x20000b68
 8004020:	e0001000 	.word	0xe0001000
	...

08004030 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 8004030:	b4f0      	push	{r4, r5, r6, r7}
  if (mp->owner != NULL) {
 8004032:	6883      	ldr	r3, [r0, #8]
 8004034:	4c36      	ldr	r4, [pc, #216]	; (8004110 <chMtxLockS+0xe0>)
void chMtxLockS(mutex_t *mp) {
 8004036:	4602      	mov	r2, r0
 8004038:	68e1      	ldr	r1, [r4, #12]
  if (mp->owner != NULL) {
 800403a:	2b00      	cmp	r3, #0
 800403c:	d039      	beq.n	80040b2 <chMtxLockS+0x82>
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 800403e:	688d      	ldr	r5, [r1, #8]
 8004040:	6898      	ldr	r0, [r3, #8]
 8004042:	4285      	cmp	r5, r0
 8004044:	d907      	bls.n	8004056 <chMtxLockS+0x26>
        switch (tp->state) {
 8004046:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 800404a:	609d      	str	r5, [r3, #8]
        switch (tp->state) {
 800404c:	2806      	cmp	r0, #6
 800404e:	d045      	beq.n	80040dc <chMtxLockS+0xac>
 8004050:	2807      	cmp	r0, #7
 8004052:	d034      	beq.n	80040be <chMtxLockS+0x8e>
 8004054:	b1e0      	cbz	r0, 8004090 <chMtxLockS+0x60>
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {

  ch_queue_t *cp = qp;
 8004056:	4613      	mov	r3, r2
 8004058:	e003      	b.n	8004062 <chMtxLockS+0x32>
  do {
    cp = cp->next;
  } while ((cp != qp) &&
 800405a:	6888      	ldr	r0, [r1, #8]
 800405c:	689d      	ldr	r5, [r3, #8]
 800405e:	4285      	cmp	r5, r0
 8004060:	d302      	bcc.n	8004068 <chMtxLockS+0x38>
    cp = cp->next;
 8004062:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 8004064:	429a      	cmp	r2, r3
 8004066:	d1f8      	bne.n	800405a <chMtxLockS+0x2a>
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
  tp->next       = cp;
  tp->prev       = cp->prev;
 8004068:	6858      	ldr	r0, [r3, #4]
  otp->state = newstate;
 800406a:	2506      	movs	r5, #6
 800406c:	e9c1 3000 	strd	r3, r0, [r1]
  tp->prev->next = tp;
 8004070:	6001      	str	r1, [r0, #0]
  ch_priority_queue_t *p = pqp->next;
 8004072:	6820      	ldr	r0, [r4, #0]
  cp->prev       = tp;
 8004074:	6059      	str	r1, [r3, #4]
 8004076:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
  pqp->next       = p->next;
 800407a:	6803      	ldr	r3, [r0, #0]
 800407c:	6023      	str	r3, [r4, #0]
      currtp->u.wtmtxp = mp;
 800407e:	628a      	str	r2, [r1, #40]	; 0x28
  pqp->next->prev = pqp;
 8004080:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8004082:	2301      	movs	r3, #1
 8004084:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8004088:	60e0      	str	r0, [r4, #12]
}
 800408a:	bcf0      	pop	{r4, r5, r6, r7}
  chSysSwitch(ntp, otp);
 800408c:	f7fc b918 	b.w	80002c0 <__port_switch>
  p->prev->next = p->next;
 8004090:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004094:	603e      	str	r6, [r7, #0]
  p->next->prev = p->prev;
 8004096:	6077      	str	r7, [r6, #4]
  tp->state = CH_STATE_READY;
 8004098:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800409c:	6998      	ldr	r0, [r3, #24]
    pqp = pqp->next;
 800409e:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80040a0:	6886      	ldr	r6, [r0, #8]
 80040a2:	42ae      	cmp	r6, r5
 80040a4:	d2fb      	bcs.n	800409e <chMtxLockS+0x6e>
  p->next       = pqp;
 80040a6:	6018      	str	r0, [r3, #0]
  p->prev       = pqp->prev;
 80040a8:	6845      	ldr	r5, [r0, #4]
 80040aa:	605d      	str	r5, [r3, #4]
  p->prev->next = p;
 80040ac:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 80040ae:	6043      	str	r3, [r0, #4]
  return __sch_ready_behind(tp);
 80040b0:	e7d1      	b.n	8004056 <chMtxLockS+0x26>
    mp->next = currtp->mtxlist;
 80040b2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
}
 80040b4:	bcf0      	pop	{r4, r5, r6, r7}
    mp->next = currtp->mtxlist;
 80040b6:	e9c0 1302 	strd	r1, r3, [r0, #8]
    currtp->mtxlist = mp;
 80040ba:	63c8      	str	r0, [r1, #60]	; 0x3c
}
 80040bc:	4770      	bx	lr
  p->prev->next = p->next;
 80040be:	e9d3 0600 	ldrd	r0, r6, [r3]
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 80040c2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80040c4:	6030      	str	r0, [r6, #0]
  p->next->prev = p->prev;
 80040c6:	6046      	str	r6, [r0, #4]
  ch_queue_t *cp = qp;
 80040c8:	4628      	mov	r0, r5
 80040ca:	e003      	b.n	80040d4 <chMtxLockS+0xa4>
  } while ((cp != qp) &&
 80040cc:	6886      	ldr	r6, [r0, #8]
 80040ce:	689f      	ldr	r7, [r3, #8]
 80040d0:	42be      	cmp	r6, r7
 80040d2:	d3e8      	bcc.n	80040a6 <chMtxLockS+0x76>
    cp = cp->next;
 80040d4:	6800      	ldr	r0, [r0, #0]
  } while ((cp != qp) &&
 80040d6:	4285      	cmp	r5, r0
 80040d8:	d1f8      	bne.n	80040cc <chMtxLockS+0x9c>
 80040da:	e7e4      	b.n	80040a6 <chMtxLockS+0x76>
  p->prev->next = p->next;
 80040dc:	e9d3 0600 	ldrd	r0, r6, [r3]
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 80040e0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80040e2:	6030      	str	r0, [r6, #0]
  p->next->prev = p->prev;
 80040e4:	6046      	str	r6, [r0, #4]
  ch_queue_t *cp = qp;
 80040e6:	4628      	mov	r0, r5
 80040e8:	e003      	b.n	80040f2 <chMtxLockS+0xc2>
  } while ((cp != qp) &&
 80040ea:	6886      	ldr	r6, [r0, #8]
 80040ec:	689f      	ldr	r7, [r3, #8]
 80040ee:	42be      	cmp	r6, r7
 80040f0:	d302      	bcc.n	80040f8 <chMtxLockS+0xc8>
    cp = cp->next;
 80040f2:	6800      	ldr	r0, [r0, #0]
  } while ((cp != qp) &&
 80040f4:	4285      	cmp	r5, r0
 80040f6:	d1f8      	bne.n	80040ea <chMtxLockS+0xba>
  tp->prev       = cp->prev;
 80040f8:	6846      	ldr	r6, [r0, #4]
  tp->next       = cp;
 80040fa:	6018      	str	r0, [r3, #0]
  tp->prev       = cp->prev;
 80040fc:	605e      	str	r6, [r3, #4]
  tp->prev->next = tp;
 80040fe:	6033      	str	r3, [r6, #0]
  cp->prev       = tp;
 8004100:	6043      	str	r3, [r0, #4]
          tp = tp->u.wtmtxp->owner;
 8004102:	68ab      	ldr	r3, [r5, #8]
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8004104:	688d      	ldr	r5, [r1, #8]
 8004106:	6898      	ldr	r0, [r3, #8]
 8004108:	42a8      	cmp	r0, r5
 800410a:	d39c      	bcc.n	8004046 <chMtxLockS+0x16>
 800410c:	e7a3      	b.n	8004056 <chMtxLockS+0x26>
 800410e:	bf00      	nop
 8004110:	20000a90 	.word	0x20000a90
	...

08004120 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 8004120:	b510      	push	{r4, lr}
 8004122:	2430      	movs	r4, #48	; 0x30
 8004124:	f384 8811 	msr	BASEPRI, r4
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004128:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800412c:	2008      	movs	r0, #8
 800412e:	f7fe fbf7 	bl	8002920 <chSchGoSleepTimeoutS>
 8004132:	2300      	movs	r3, #0
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f384 8811 	msr	BASEPRI, r4
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 800413c:	4809      	ldr	r0, [pc, #36]	; (8004164 <thread4B+0x44>)
 800413e:	f7ff ff77 	bl	8004030 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8004142:	4808      	ldr	r0, [pc, #32]	; (8004164 <thread4B+0x44>)
 8004144:	f7fc ffdc 	bl	8001100 <chMtxUnlockS>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004148:	4b07      	ldr	r3, [pc, #28]	; (8004168 <thread4B+0x48>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	6892      	ldr	r2, [r2, #8]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	429a      	cmp	r2, r3
 8004154:	d901      	bls.n	800415a <thread4B+0x3a>
    __sch_reschedule_ahead();
 8004156:	f7fd fefb 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 800415a:	2300      	movs	r3, #0
 800415c:	f383 8811 	msr	BASEPRI, r3
}
 8004160:	bd10      	pop	{r4, pc}
 8004162:	bf00      	nop
 8004164:	2000083c 	.word	0x2000083c
 8004168:	20000a90 	.word	0x20000a90
 800416c:	00000000 	.word	0x00000000

08004170 <chMtxUnlock>:
void chMtxUnlock(mutex_t *mp) {
 8004170:	b538      	push	{r3, r4, r5, lr}
  return __sch_get_currthread();
 8004172:	4c1f      	ldr	r4, [pc, #124]	; (80041f0 <chMtxUnlock+0x80>)
 8004174:	2330      	movs	r3, #48	; 0x30
 8004176:	68e5      	ldr	r5, [r4, #12]
 8004178:	f383 8811 	msr	BASEPRI, r3
    if (chMtxQueueNotEmptyS(mp)) {
 800417c:	6802      	ldr	r2, [r0, #0]
    currtp->mtxlist = mp->next;
 800417e:	68c3      	ldr	r3, [r0, #12]
 8004180:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (chMtxQueueNotEmptyS(mp)) {
 8004182:	4282      	cmp	r2, r0
 8004184:	d02e      	beq.n	80041e4 <chMtxUnlock+0x74>
      tprio_t newprio = currtp->realprio;
 8004186:	6c29      	ldr	r1, [r5, #64]	; 0x40
      while (lmp != NULL) {
 8004188:	b14b      	cbz	r3, 800419e <chMtxUnlock+0x2e>
  return (bool)(qp->next != qp);
 800418a:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 800418c:	4293      	cmp	r3, r2
 800418e:	d003      	beq.n	8004198 <chMtxUnlock+0x28>
 8004190:	6892      	ldr	r2, [r2, #8]
 8004192:	4291      	cmp	r1, r2
 8004194:	bf38      	it	cc
 8004196:	4611      	movcc	r1, r2
        lmp = lmp->next;
 8004198:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f5      	bne.n	800418a <chMtxUnlock+0x1a>
      currtp->hdr.pqueue.prio = newprio;
 800419e:	60a9      	str	r1, [r5, #8]
  ch_queue_t *p = qp->next;
 80041a0:	6803      	ldr	r3, [r0, #0]
      mp->next = tp->mtxlist;
 80041a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  qp->next       = p->next;
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	6002      	str	r2, [r0, #0]
  qp->next->prev = qp;
 80041a8:	6050      	str	r0, [r2, #4]
 80041aa:	e9c0 3102 	strd	r3, r1, [r0, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80041ae:	699a      	ldr	r2, [r3, #24]
      tp->mtxlist = mp;
 80041b0:	63d8      	str	r0, [r3, #60]	; 0x3c
  tp->state = CH_STATE_READY;
 80041b2:	2100      	movs	r1, #0
  } while (unlikely(pqp->prio >= p->prio));
 80041b4:	6898      	ldr	r0, [r3, #8]
 80041b6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 80041ba:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80041bc:	6891      	ldr	r1, [r2, #8]
 80041be:	4281      	cmp	r1, r0
 80041c0:	d2fb      	bcs.n	80041ba <chMtxUnlock+0x4a>
  p->prev       = pqp->prev;
 80041c2:	6851      	ldr	r1, [r2, #4]
 80041c4:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 80041c8:	600b      	str	r3, [r1, #0]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80041ca:	6820      	ldr	r0, [r4, #0]
 80041cc:	68e1      	ldr	r1, [r4, #12]
  pqp->prev     = p;
 80041ce:	6053      	str	r3, [r2, #4]
 80041d0:	688b      	ldr	r3, [r1, #8]
 80041d2:	6882      	ldr	r2, [r0, #8]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d901      	bls.n	80041dc <chMtxUnlock+0x6c>
    __sch_reschedule_ahead();
 80041d8:	f7fd feba 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 80041dc:	2300      	movs	r3, #0
 80041de:	f383 8811 	msr	BASEPRI, r3
}
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
      mp->owner = NULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	6093      	str	r3, [r2, #8]
 80041e8:	2300      	movs	r3, #0
 80041ea:	f383 8811 	msr	BASEPRI, r3
}
 80041ee:	bd38      	pop	{r3, r4, r5, pc}
 80041f0:	20000a90 	.word	0x20000a90
	...

08004200 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8004200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8004204:	4c18      	ldr	r4, [pc, #96]	; (8004268 <chHeapStatus+0x68>)
 8004206:	2800      	cmp	r0, #0
 8004208:	bf18      	it	ne
 800420a:	4604      	movne	r4, r0
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 800420c:	460f      	mov	r7, r1
 800420e:	4616      	mov	r6, r2
  }

  H_LOCK(heapp);
 8004210:	f104 080c 	add.w	r8, r4, #12
 8004214:	2330      	movs	r3, #48	; 0x30
 8004216:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 800421a:	4640      	mov	r0, r8
 800421c:	f7ff ff08 	bl	8004030 <chMtxLockS>
 8004220:	f04f 0c00 	mov.w	ip, #0
 8004224:	f38c 8811 	msr	BASEPRI, ip
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8004228:	6863      	ldr	r3, [r4, #4]
 800422a:	b1cb      	cbz	r3, 8004260 <chHeapStatus+0x60>
  tpages = 0U;
 800422c:	46e6      	mov	lr, ip
  n = 0U;
 800422e:	4665      	mov	r5, ip
  while (H_NEXT(qp) != NULL) {
 8004230:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004234:	45a4      	cmp	ip, r4
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 8004236:	f105 0501 	add.w	r5, r5, #1
    tpages += pages;
 800423a:	44a6      	add	lr, r4
    if (pages > lpages) {
 800423c:	bf38      	it	cc
 800423e:	46a4      	movcc	ip, r4
  while (H_NEXT(qp) != NULL) {
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f5      	bne.n	8004230 <chHeapStatus+0x30>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8004244:	b117      	cbz	r7, 800424c <chHeapStatus+0x4c>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8004246:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800424a:	603b      	str	r3, [r7, #0]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 800424c:	b116      	cbz	r6, 8004254 <chHeapStatus+0x54>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 800424e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8004252:	6033      	str	r3, [r6, #0]
  }
  H_UNLOCK(heapp);
 8004254:	4640      	mov	r0, r8
 8004256:	f7ff ff8b 	bl	8004170 <chMtxUnlock>

  return n;
}
 800425a:	4628      	mov	r0, r5
 800425c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  lpages = 0U;
 8004260:	469c      	mov	ip, r3
  tpages = 0U;
 8004262:	469e      	mov	lr, r3
  n = 0U;
 8004264:	461d      	mov	r5, r3
 8004266:	e7ed      	b.n	8004244 <chHeapStatus+0x44>
 8004268:	20000b9c 	.word	0x20000b9c
 800426c:	00000000 	.word	0x00000000

08004270 <thread1.lto_priv.2>:
static THD_FUNCTION(thread1, p) {
 8004270:	b510      	push	{r4, lr}
 8004272:	2330      	movs	r3, #48	; 0x30
 8004274:	4604      	mov	r4, r0
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	480a      	ldr	r0, [pc, #40]	; (80042a4 <thread1.lto_priv.2+0x34>)
 800427c:	f7ff fed8 	bl	8004030 <chMtxLockS>
 8004280:	2300      	movs	r3, #0
 8004282:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8004286:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <thread1.lto_priv.2+0x38>)
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	f103 0120 	add.w	r1, r3, #32
 800428e:	428a      	cmp	r2, r1
 8004290:	d203      	bcs.n	800429a <thread1.lto_priv.2+0x2a>
  test_emit_token(*(char *)p);
 8004292:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 8004294:	1c50      	adds	r0, r2, #1
 8004296:	60d8      	str	r0, [r3, #12]
 8004298:	7011      	strb	r1, [r2, #0]
}
 800429a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 800429e:	4801      	ldr	r0, [pc, #4]	; (80042a4 <thread1.lto_priv.2+0x34>)
 80042a0:	f7ff bf66 	b.w	8004170 <chMtxUnlock>
 80042a4:	2000082c 	.word	0x2000082c
 80042a8:	20000b74 	.word	0x20000b74
 80042ac:	00000000 	.word	0x00000000

080042b0 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 80042b0:	b530      	push	{r4, r5, lr}
 80042b2:	2330      	movs	r3, #48	; 0x30
 80042b4:	b087      	sub	sp, #28
 80042b6:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = __instance_get_currthread(currcore);
 80042ba:	4c18      	ldr	r4, [pc, #96]	; (800431c <thread4A+0x6c>)
  vtp->func    = vtfunc;
 80042bc:	4b18      	ldr	r3, [pc, #96]	; (8004320 <thread4A+0x70>)
 80042be:	68e5      	ldr	r5, [r4, #12]
  vt_enqueue(vtlp, vtp, delay);
 80042c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  vtp->par     = par;
 80042c4:	e9cd 3503 	strd	r3, r5, [sp, #12]
  vt_enqueue(vtlp, vtp, delay);
 80042c8:	4668      	mov	r0, sp
  vtp->reload  = (sysinterval_t)0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 80042ce:	f00f f8c7 	bl	8013460 <vt_enqueue.constprop.0>
  ch_priority_queue_t *p = pqp->next;
 80042d2:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80042d4:	2308      	movs	r3, #8
 80042d6:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  pqp->next       = p->next;
 80042da:	6803      	ldr	r3, [r0, #0]
 80042dc:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 80042de:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  chSysSwitch(ntp, otp);
 80042e6:	4629      	mov	r1, r5
  __instance_set_currthread(oip, ntp);
 80042e8:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 80042ea:	f7fb ffe9 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 80042ee:	9b00      	ldr	r3, [sp, #0]
 80042f0:	b113      	cbz	r3, 80042f8 <thread4A+0x48>
      chVTDoResetI(&vt);
 80042f2:	4668      	mov	r0, sp
 80042f4:	f7fd fd64 	bl	8001dc0 <chVTDoResetI>
 80042f8:	2400      	movs	r4, #0
 80042fa:	f384 8811 	msr	BASEPRI, r4
 80042fe:	2330      	movs	r3, #48	; 0x30
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	4807      	ldr	r0, [pc, #28]	; (8004324 <thread4A+0x74>)
 8004306:	f7ff fe93 	bl	8004030 <chMtxLockS>
 800430a:	f384 8811 	msr	BASEPRI, r4
  chMtxUnlock(&m1);
 800430e:	4805      	ldr	r0, [pc, #20]	; (8004324 <thread4A+0x74>)
}
 8004310:	b007      	add	sp, #28
 8004312:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  chMtxUnlock(&m1);
 8004316:	f7ff bf2b 	b.w	8004170 <chMtxUnlock>
 800431a:	bf00      	nop
 800431c:	20000a90 	.word	0x20000a90
 8004320:	08001051 	.word	0x08001051
 8004324:	2000082c 	.word	0x2000082c
	...

08004330 <thread6>:
static THD_FUNCTION(thread6, p) {
 8004330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004334:	4607      	mov	r7, r0
 8004336:	2430      	movs	r4, #48	; 0x30
 8004338:	f384 8811 	msr	BASEPRI, r4
 800433c:	4820      	ldr	r0, [pc, #128]	; (80043c0 <thread6+0x90>)
 800433e:	f7ff fe77 	bl	8004030 <chMtxLockS>
 8004342:	2300      	movs	r3, #0
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f384 8811 	msr	BASEPRI, r4
 800434c:	4e1d      	ldr	r6, [pc, #116]	; (80043c4 <thread6+0x94>)
  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currtp->u.wtobjp = cp;
 800434e:	4d1e      	ldr	r5, [pc, #120]	; (80043c8 <thread6+0x98>)
 8004350:	68f4      	ldr	r4, [r6, #12]
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8004352:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
  chMtxUnlockS(mp);
 8004356:	4640      	mov	r0, r8
 8004358:	f7fc fed2 	bl	8001100 <chMtxUnlockS>
  currtp->u.wtobjp = cp;
 800435c:	62a5      	str	r5, [r4, #40]	; 0x28
  ch_queue_t *cp = qp;
 800435e:	462b      	mov	r3, r5
 8004360:	e003      	b.n	800436a <thread6+0x3a>
  } while ((cp != qp) &&
 8004362:	6899      	ldr	r1, [r3, #8]
 8004364:	68a2      	ldr	r2, [r4, #8]
 8004366:	4291      	cmp	r1, r2
 8004368:	d302      	bcc.n	8004370 <thread6+0x40>
    cp = cp->next;
 800436a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 800436c:	42ab      	cmp	r3, r5
 800436e:	d1f8      	bne.n	8004362 <thread6+0x32>
  tp->prev       = cp->prev;
 8004370:	685a      	ldr	r2, [r3, #4]
  thread_t *otp = __instance_get_currthread(oip);
 8004372:	68f1      	ldr	r1, [r6, #12]
  tp->next       = cp;
 8004374:	6023      	str	r3, [r4, #0]
  tp->prev       = cp->prev;
 8004376:	6062      	str	r2, [r4, #4]
  ch_priority_queue_t *p = pqp->next;
 8004378:	6830      	ldr	r0, [r6, #0]
  tp->prev->next = tp;
 800437a:	6014      	str	r4, [r2, #0]
  cp->prev       = tp;
 800437c:	605c      	str	r4, [r3, #4]
  otp->state = newstate;
 800437e:	2307      	movs	r3, #7
 8004380:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8004384:	6803      	ldr	r3, [r0, #0]
 8004386:	6033      	str	r3, [r6, #0]
  pqp->next->prev = pqp;
 8004388:	605e      	str	r6, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 800438a:	2301      	movs	r3, #1
 800438c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8004390:	60f0      	str	r0, [r6, #12]
  chSysSwitch(ntp, otp);
 8004392:	f7fb ff95 	bl	80002c0 <__port_switch>
  ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
  chSchGoSleepS(CH_STATE_WTCOND);
  msg = currtp->u.rdymsg;
  chMtxLockS(mp);
 8004396:	4640      	mov	r0, r8
 8004398:	f7ff fe4a 	bl	8004030 <chMtxLockS>
 800439c:	2300      	movs	r3, #0
 800439e:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80043a2:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <thread6+0x9c>)
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	f103 0120 	add.w	r1, r3, #32
 80043aa:	428a      	cmp	r2, r1
 80043ac:	d203      	bcs.n	80043b6 <thread6+0x86>
  test_emit_token(*(char *)p);
 80043ae:	7839      	ldrb	r1, [r7, #0]
    *chtest.tokp++ = token;
 80043b0:	1c50      	adds	r0, r2, #1
 80043b2:	60d8      	str	r0, [r3, #12]
 80043b4:	7011      	strb	r1, [r2, #0]
}
 80043b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chMtxUnlock(&m1);
 80043ba:	4801      	ldr	r0, [pc, #4]	; (80043c0 <thread6+0x90>)
 80043bc:	f7ff bed8 	b.w	8004170 <chMtxUnlock>
 80043c0:	2000082c 	.word	0x2000082c
 80043c4:	20000a90 	.word	0x20000a90
 80043c8:	20000800 	.word	0x20000800
 80043cc:	20000b74 	.word	0x20000b74

080043d0 <thread8>:
static THD_FUNCTION(thread8, p) {
 80043d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043d4:	4607      	mov	r7, r0
 80043d6:	2430      	movs	r4, #48	; 0x30
 80043d8:	f384 8811 	msr	BASEPRI, r4
 80043dc:	4827      	ldr	r0, [pc, #156]	; (800447c <thread8+0xac>)
 80043de:	f7ff fe27 	bl	8004030 <chMtxLockS>
 80043e2:	2500      	movs	r5, #0
 80043e4:	f385 8811 	msr	BASEPRI, r5
 80043e8:	f384 8811 	msr	BASEPRI, r4
 80043ec:	4824      	ldr	r0, [pc, #144]	; (8004480 <thread8+0xb0>)
 80043ee:	f7ff fe1f 	bl	8004030 <chMtxLockS>
 80043f2:	f385 8811 	msr	BASEPRI, r5
 80043f6:	f384 8811 	msr	BASEPRI, r4
 80043fa:	4e22      	ldr	r6, [pc, #136]	; (8004484 <thread8+0xb4>)
  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currtp->u.wtobjp = cp;
 80043fc:	4d22      	ldr	r5, [pc, #136]	; (8004488 <thread8+0xb8>)
 80043fe:	68f4      	ldr	r4, [r6, #12]
 8004400:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
  chMtxUnlockS(mp);
 8004404:	4640      	mov	r0, r8
 8004406:	f7fc fe7b 	bl	8001100 <chMtxUnlockS>
  currtp->u.wtobjp = cp;
 800440a:	62a5      	str	r5, [r4, #40]	; 0x28
  ch_queue_t *cp = qp;
 800440c:	462b      	mov	r3, r5
 800440e:	e003      	b.n	8004418 <thread8+0x48>
  } while ((cp != qp) &&
 8004410:	6899      	ldr	r1, [r3, #8]
 8004412:	68a2      	ldr	r2, [r4, #8]
 8004414:	4291      	cmp	r1, r2
 8004416:	d302      	bcc.n	800441e <thread8+0x4e>
    cp = cp->next;
 8004418:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 800441a:	42ab      	cmp	r3, r5
 800441c:	d1f8      	bne.n	8004410 <thread8+0x40>
  tp->prev       = cp->prev;
 800441e:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 8004420:	6023      	str	r3, [r4, #0]
  tp->prev       = cp->prev;
 8004422:	6062      	str	r2, [r4, #4]
  tp->prev->next = tp;
 8004424:	6014      	str	r4, [r2, #0]
  cp->prev       = tp;
 8004426:	605c      	str	r4, [r3, #4]
  thread_t *tp = __instance_get_currthread(currcore);
 8004428:	68f4      	ldr	r4, [r6, #12]
  ch_priority_queue_t *p = pqp->next;
 800442a:	6830      	ldr	r0, [r6, #0]
  otp->state = newstate;
 800442c:	2307      	movs	r3, #7
 800442e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  pqp->next       = p->next;
 8004432:	6803      	ldr	r3, [r0, #0]
 8004434:	6033      	str	r3, [r6, #0]
  ntp->state = CH_STATE_CURRENT;
 8004436:	2201      	movs	r2, #1
  pqp->next->prev = pqp;
 8004438:	605e      	str	r6, [r3, #4]
  chSysSwitch(ntp, otp);
 800443a:	4621      	mov	r1, r4
  ntp->state = CH_STATE_CURRENT;
 800443c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8004440:	60f0      	str	r0, [r6, #12]
  chSysSwitch(ntp, otp);
 8004442:	f7fb ff3d 	bl	80002c0 <__port_switch>
  ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 8004446:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004448:	3301      	adds	r3, #1
 800444a:	d002      	beq.n	8004452 <thread8+0x82>
    chMtxLockS(mp);
 800444c:	4640      	mov	r0, r8
 800444e:	f7ff fdef 	bl	8004030 <chMtxLockS>
 8004452:	2300      	movs	r3, #0
 8004454:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <thread8+0xbc>)
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	f103 0120 	add.w	r1, r3, #32
 8004460:	428a      	cmp	r2, r1
 8004462:	d203      	bcs.n	800446c <thread8+0x9c>
  test_emit_token(*(char *)p);
 8004464:	7839      	ldrb	r1, [r7, #0]
    *chtest.tokp++ = token;
 8004466:	1c50      	adds	r0, r2, #1
 8004468:	60d8      	str	r0, [r3, #12]
 800446a:	7011      	strb	r1, [r2, #0]
  chMtxUnlock(&m1);
 800446c:	4804      	ldr	r0, [pc, #16]	; (8004480 <thread8+0xb0>)
 800446e:	f7ff fe7f 	bl	8004170 <chMtxUnlock>
}
 8004472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chMtxUnlock(&m2);
 8004476:	4801      	ldr	r0, [pc, #4]	; (800447c <thread8+0xac>)
 8004478:	f7ff be7a 	b.w	8004170 <chMtxUnlock>
 800447c:	2000083c 	.word	0x2000083c
 8004480:	2000082c 	.word	0x2000082c
 8004484:	20000a90 	.word	0x20000a90
 8004488:	20000800 	.word	0x20000800
 800448c:	20000b74 	.word	0x20000b74

08004490 <thread9>:
static THD_FUNCTION(thread9, p) {
 8004490:	b510      	push	{r4, lr}
 8004492:	2330      	movs	r3, #48	; 0x30
 8004494:	4604      	mov	r4, r0
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	480a      	ldr	r0, [pc, #40]	; (80044c4 <thread9+0x34>)
 800449c:	f7ff fdc8 	bl	8004030 <chMtxLockS>
 80044a0:	2300      	movs	r3, #0
 80044a2:	f383 8811 	msr	BASEPRI, r3
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80044a6:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <thread9+0x38>)
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	f103 0120 	add.w	r1, r3, #32
 80044ae:	428a      	cmp	r2, r1
 80044b0:	d203      	bcs.n	80044ba <thread9+0x2a>
  test_emit_token(*(char *)p);
 80044b2:	7821      	ldrb	r1, [r4, #0]
    *chtest.tokp++ = token;
 80044b4:	1c50      	adds	r0, r2, #1
 80044b6:	60d8      	str	r0, [r3, #12]
 80044b8:	7011      	strb	r1, [r2, #0]
}
 80044ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m2);
 80044be:	4801      	ldr	r0, [pc, #4]	; (80044c4 <thread9+0x34>)
 80044c0:	f7ff be56 	b.w	8004170 <chMtxUnlock>
 80044c4:	2000083c 	.word	0x2000083c
 80044c8:	20000b74 	.word	0x20000b74
 80044cc:	00000000 	.word	0x00000000

080044d0 <rt_test_008_004_execute.lto_priv.0>:
static void rt_test_008_004_execute(void) {
 80044d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	4d3a      	ldr	r5, [pc, #232]	; (80045c0 <rt_test_008_004_execute.lto_priv.0+0xf0>)
  test_set_step(2);
 80044d6:	4c3b      	ldr	r4, [pc, #236]	; (80045c4 <rt_test_008_004_execute.lto_priv.0+0xf4>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 80044d8:	68eb      	ldr	r3, [r5, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 80044da:	483b      	ldr	r0, [pc, #236]	; (80045c8 <rt_test_008_004_execute.lto_priv.0+0xf8>)
 80044dc:	689e      	ldr	r6, [r3, #8]
 80044de:	4b3b      	ldr	r3, [pc, #236]	; (80045cc <rt_test_008_004_execute.lto_priv.0+0xfc>)
 80044e0:	4f3b      	ldr	r7, [pc, #236]	; (80045d0 <rt_test_008_004_execute.lto_priv.0+0x100>)
static void rt_test_008_004_execute(void) {
 80044e2:	b082      	sub	sp, #8
    pa = p + 1;
 80044e4:	f106 0901 	add.w	r9, r6, #1
  test_set_step(2);
 80044e8:	2102      	movs	r1, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	464a      	mov	r2, r9
  test_set_step(2);
 80044ee:	6021      	str	r1, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 80044f0:	4b38      	ldr	r3, [pc, #224]	; (80045d4 <rt_test_008_004_execute.lto_priv.0+0x104>)
 80044f2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80044f6:	f7ff fb3b 	bl	8003b70 <chThdCreateStatic>
    pb = p + 2;
 80044fa:	f106 0a02 	add.w	sl, r6, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 80044fe:	4b36      	ldr	r3, [pc, #216]	; (80045d8 <rt_test_008_004_execute.lto_priv.0+0x108>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8004500:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8004502:	4652      	mov	r2, sl
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800450a:	4b34      	ldr	r3, [pc, #208]	; (80045dc <rt_test_008_004_execute.lto_priv.0+0x10c>)
 800450c:	4834      	ldr	r0, [pc, #208]	; (80045e0 <rt_test_008_004_execute.lto_priv.0+0x110>)
 800450e:	f7ff fb2f 	bl	8003b70 <chThdCreateStatic>
  test_set_step(3);
 8004512:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8004514:	6078      	str	r0, [r7, #4]
  test_set_step(3);
 8004516:	6023      	str	r3, [r4, #0]
 8004518:	f04f 0830 	mov.w	r8, #48	; 0x30
 800451c:	f388 8811 	msr	BASEPRI, r8
 8004520:	4830      	ldr	r0, [pc, #192]	; (80045e4 <rt_test_008_004_execute.lto_priv.0+0x114>)
 8004522:	f7ff fd85 	bl	8004030 <chMtxLockS>
 8004526:	2700      	movs	r7, #0
 8004528:	f387 8811 	msr	BASEPRI, r7
 800452c:	68eb      	ldr	r3, [r5, #12]
  if (!condition) {
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	429e      	cmp	r6, r3
 8004532:	d13c      	bne.n	80045ae <rt_test_008_004_execute.lto_priv.0+0xde>
  test_set_step(4);
 8004534:	2304      	movs	r3, #4
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800453c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004540:	2008      	movs	r0, #8
 8004542:	f7fe f9ed 	bl	8002920 <chSchGoSleepTimeoutS>
 8004546:	f387 8811 	msr	BASEPRI, r7
  return chThdGetSelfX()->hdr.pqueue.prio;
 800454a:	68eb      	ldr	r3, [r5, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	4599      	cmp	r9, r3
 8004550:	d12d      	bne.n	80045ae <rt_test_008_004_execute.lto_priv.0+0xde>
  test_set_step(5);
 8004552:	2305      	movs	r3, #5
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	f388 8811 	msr	BASEPRI, r8
 800455a:	4823      	ldr	r0, [pc, #140]	; (80045e8 <rt_test_008_004_execute.lto_priv.0+0x118>)
 800455c:	f7ff fd68 	bl	8004030 <chMtxLockS>
 8004560:	f387 8811 	msr	BASEPRI, r7
 8004564:	68eb      	ldr	r3, [r5, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	4599      	cmp	r9, r3
 800456a:	d120      	bne.n	80045ae <rt_test_008_004_execute.lto_priv.0+0xde>
  test_set_step(6);
 800456c:	2306      	movs	r3, #6
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004574:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004578:	2008      	movs	r0, #8
 800457a:	f7fe f9d1 	bl	8002920 <chSchGoSleepTimeoutS>
 800457e:	f387 8811 	msr	BASEPRI, r7
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004582:	68eb      	ldr	r3, [r5, #12]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	459a      	cmp	sl, r3
 8004588:	d111      	bne.n	80045ae <rt_test_008_004_execute.lto_priv.0+0xde>
  test_set_step(7);
 800458a:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 800458c:	4816      	ldr	r0, [pc, #88]	; (80045e8 <rt_test_008_004_execute.lto_priv.0+0x118>)
  test_set_step(7);
 800458e:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m2);
 8004590:	f7ff fdee 	bl	8004170 <chMtxUnlock>
 8004594:	68eb      	ldr	r3, [r5, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4599      	cmp	r9, r3
 800459a:	d108      	bne.n	80045ae <rt_test_008_004_execute.lto_priv.0+0xde>
  test_set_step(8);
 800459c:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 800459e:	4811      	ldr	r0, [pc, #68]	; (80045e4 <rt_test_008_004_execute.lto_priv.0+0x114>)
  test_set_step(8);
 80045a0:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 80045a2:	f7ff fde5 	bl	8004170 <chMtxUnlock>
 80045a6:	68eb      	ldr	r3, [r5, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	429e      	cmp	r6, r3
 80045ac:	d004      	beq.n	80045b8 <rt_test_008_004_execute.lto_priv.0+0xe8>
  chtest.failure_message = msg;
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <rt_test_008_004_execute.lto_priv.0+0x11c>)
 80045b0:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 80045b2:	f240 1201 	movw	r2, #257	; 0x101
 80045b6:	80a2      	strh	r2, [r4, #4]
}
 80045b8:	b002      	add	sp, #8
 80045ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045be:	bf00      	nop
 80045c0:	20000a90 	.word	0x20000a90
 80045c4:	20000b74 	.word	0x20000b74
 80045c8:	20000dd8 	.word	0x20000dd8
 80045cc:	080151c4 	.word	0x080151c4
 80045d0:	200016e4 	.word	0x200016e4
 80045d4:	080042b1 	.word	0x080042b1
 80045d8:	080151c8 	.word	0x080151c8
 80045dc:	08004121 	.word	0x08004121
 80045e0:	20000f88 	.word	0x20000f88
 80045e4:	2000082c 	.word	0x2000082c
 80045e8:	2000083c 	.word	0x2000083c
 80045ec:	080151cc 	.word	0x080151cc

080045f0 <rt_test_008_005_execute.lto_priv.0>:
static void rt_test_008_005_execute(void) {
 80045f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 80045f4:	4e5a      	ldr	r6, [pc, #360]	; (8004760 <rt_test_008_005_execute.lto_priv.0+0x170>)
  test_set_step(2);
 80045f6:	4d5b      	ldr	r5, [pc, #364]	; (8004764 <rt_test_008_005_execute.lto_priv.0+0x174>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 80045f8:	68f2      	ldr	r2, [r6, #12]
 80045fa:	2302      	movs	r3, #2
 80045fc:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8004600:	602b      	str	r3, [r5, #0]
 8004602:	2730      	movs	r7, #48	; 0x30
 8004604:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 8004608:	4c57      	ldr	r4, [pc, #348]	; (8004768 <rt_test_008_005_execute.lto_priv.0+0x178>)
  return __sch_get_currthread();
 800460a:	68f2      	ldr	r2, [r6, #12]
 800460c:	68a3      	ldr	r3, [r4, #8]
 800460e:	b14b      	cbz	r3, 8004624 <rt_test_008_005_execute.lto_priv.0+0x34>
 8004610:	2300      	movs	r3, #0
 8004612:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8004616:	4b55      	ldr	r3, [pc, #340]	; (800476c <rt_test_008_005_execute.lto_priv.0+0x17c>)
 8004618:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 800461a:	f240 1201 	movw	r2, #257	; 0x101
 800461e:	80aa      	strh	r2, [r5, #4]
}
 8004620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mp->next = currtp->mtxlist;
 8004624:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
  mp->owner = currtp;
 8004626:	60a2      	str	r2, [r4, #8]
  mp->next = currtp->mtxlist;
 8004628:	60e1      	str	r1, [r4, #12]
  currtp->mtxlist = mp;
 800462a:	63d4      	str	r4, [r2, #60]	; 0x3c
 800462c:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8004630:	2203      	movs	r2, #3
 8004632:	602a      	str	r2, [r5, #0]
 8004634:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 8004638:	68a2      	ldr	r2, [r4, #8]
 800463a:	68f1      	ldr	r1, [r6, #12]
 800463c:	2a00      	cmp	r2, #0
 800463e:	d066      	beq.n	800470e <rt_test_008_005_execute.lto_priv.0+0x11e>
 8004640:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8004644:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 8004646:	4620      	mov	r0, r4
  test_set_step(4);
 8004648:	602b      	str	r3, [r5, #0]
    chMtxUnlock(&m1);
 800464a:	f7ff fd91 	bl	8004170 <chMtxUnlock>
  if (!condition) {
 800464e:	68a3      	ldr	r3, [r4, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d169      	bne.n	8004728 <rt_test_008_005_execute.lto_priv.0+0x138>
 8004654:	6822      	ldr	r2, [r4, #0]
 8004656:	42a2      	cmp	r2, r4
 8004658:	d16c      	bne.n	8004734 <rt_test_008_005_execute.lto_priv.0+0x144>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800465a:	68f1      	ldr	r1, [r6, #12]
 800465c:	6889      	ldr	r1, [r1, #8]
  test_set_step(5);
 800465e:	2005      	movs	r0, #5
 8004660:	4588      	cmp	r8, r1
 8004662:	6028      	str	r0, [r5, #0]
 8004664:	d14d      	bne.n	8004702 <rt_test_008_005_execute.lto_priv.0+0x112>
  test_set_step(6);
 8004666:	2106      	movs	r1, #6
 8004668:	6029      	str	r1, [r5, #0]
 800466a:	f387 8811 	msr	BASEPRI, r7
 800466e:	6891      	ldr	r1, [r2, #8]
  return __sch_get_currthread();
 8004670:	68f0      	ldr	r0, [r6, #12]
 8004672:	2900      	cmp	r1, #0
 8004674:	d1cd      	bne.n	8004612 <rt_test_008_005_execute.lto_priv.0+0x22>
  mp->next = currtp->mtxlist;
 8004676:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  mp->owner = currtp;
 8004678:	6090      	str	r0, [r2, #8]
  mp->next = currtp->mtxlist;
 800467a:	60d3      	str	r3, [r2, #12]
  currtp->mtxlist = mp;
 800467c:	63c2      	str	r2, [r0, #60]	; 0x3c
 800467e:	f381 8811 	msr	BASEPRI, r1
 8004682:	f387 8811 	msr	BASEPRI, r7
  if (mp->owner != NULL) {
 8004686:	6893      	ldr	r3, [r2, #8]
 8004688:	68f0      	ldr	r0, [r6, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d05b      	beq.n	8004746 <rt_test_008_005_execute.lto_priv.0+0x156>
 800468e:	f381 8811 	msr	BASEPRI, r1
 8004692:	f387 8811 	msr	BASEPRI, r7
 8004696:	68f7      	ldr	r7, [r6, #12]
 * @sclass
 */
void chMtxUnlockAllS(void) {
  thread_t *currtp = chThdGetSelfX();

  if (currtp->mtxlist != NULL) {
 8004698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469a:	b323      	cbz	r3, 80046e6 <rt_test_008_005_execute.lto_priv.0+0xf6>
  return (bool)(qp->next != qp);
 800469c:	681a      	ldr	r2, [r3, #0]
    do {
      mutex_t *mp = currtp->mtxlist;
      currtp->mtxlist = mp->next;
 800469e:	68d8      	ldr	r0, [r3, #12]
 80046a0:	63f8      	str	r0, [r7, #60]	; 0x3c
      if (chMtxQueueNotEmptyS(mp)) {
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d04c      	beq.n	8004740 <rt_test_008_005_execute.lto_priv.0+0x150>
  qp->next       = p->next;
 80046a6:	6810      	ldr	r0, [r2, #0]
 80046a8:	6018      	str	r0, [r3, #0]
  qp->next->prev = qp;
 80046aa:	6043      	str	r3, [r0, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)1;
#endif
        tp = threadref(ch_queue_fifo_remove(&mp->queue));
        mp->owner   = tp;
        mp->next    = tp->mtxlist;
 80046ac:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 80046ae:	60d8      	str	r0, [r3, #12]
        mp->owner   = tp;
 80046b0:	609a      	str	r2, [r3, #8]
  } while (unlikely(pqp->prio >= p->prio));
 80046b2:	6890      	ldr	r0, [r2, #8]
        tp->mtxlist = mp;
 80046b4:	63d3      	str	r3, [r2, #60]	; 0x3c
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80046b6:	6993      	ldr	r3, [r2, #24]
  tp->state = CH_STATE_READY;
 80046b8:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    pqp = pqp->next;
 80046bc:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80046be:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80046c2:	4584      	cmp	ip, r0
 80046c4:	d2fa      	bcs.n	80046bc <rt_test_008_005_execute.lto_priv.0+0xcc>
  p->prev       = pqp->prev;
 80046c6:	6858      	ldr	r0, [r3, #4]
  p->next       = pqp;
 80046c8:	6013      	str	r3, [r2, #0]
  p->prev       = pqp->prev;
 80046ca:	6050      	str	r0, [r2, #4]
  p->prev->next = p;
 80046cc:	6002      	str	r2, [r0, #0]
  pqp->prev     = p;
 80046ce:	605a      	str	r2, [r3, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
      }
    } while (currtp->mtxlist != NULL);
 80046d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e2      	bne.n	800469c <rt_test_008_005_execute.lto_priv.0+0xac>
    currtp->hdr.pqueue.prio = currtp->realprio;
 80046d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80046d8:	6832      	ldr	r2, [r6, #0]
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	6892      	ldr	r2, [r2, #8]
 80046de:	4293      	cmp	r3, r2
 80046e0:	d201      	bcs.n	80046e6 <rt_test_008_005_execute.lto_priv.0+0xf6>
    __sch_reschedule_ahead();
 80046e2:	f7fd fc35 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 80046e6:	2300      	movs	r3, #0
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	68a3      	ldr	r3, [r4, #8]
 80046ee:	b9db      	cbnz	r3, 8004728 <rt_test_008_005_execute.lto_priv.0+0x138>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	42a3      	cmp	r3, r4
 80046f4:	d11e      	bne.n	8004734 <rt_test_008_005_execute.lto_priv.0+0x144>
  return chThdGetSelfX()->hdr.pqueue.prio;
 80046f6:	68f3      	ldr	r3, [r6, #12]
 80046f8:	689b      	ldr	r3, [r3, #8]
  test_set_step(7);
 80046fa:	2207      	movs	r2, #7
 80046fc:	4598      	cmp	r8, r3
 80046fe:	602a      	str	r2, [r5, #0]
 8004700:	d08e      	beq.n	8004620 <rt_test_008_005_execute.lto_priv.0+0x30>
  chtest.failure_message = msg;
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <rt_test_008_005_execute.lto_priv.0+0x180>)
 8004704:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8004706:	f240 1201 	movw	r2, #257	; 0x101
 800470a:	80aa      	strh	r2, [r5, #4]
  return true;
 800470c:	e788      	b.n	8004620 <rt_test_008_005_execute.lto_priv.0+0x30>
  mp->next = currtp->mtxlist;
 800470e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  currtp->mtxlist = mp;
 8004710:	63cc      	str	r4, [r1, #60]	; 0x3c
  mp->next = currtp->mtxlist;
 8004712:	e9c4 1302 	strd	r1, r3, [r4, #8]
 8004716:	f382 8811 	msr	BASEPRI, r2
  chtest.failure_message = msg;
 800471a:	4b16      	ldr	r3, [pc, #88]	; (8004774 <rt_test_008_005_execute.lto_priv.0+0x184>)
 800471c:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 800471e:	f240 1201 	movw	r2, #257	; 0x101
 8004722:	80aa      	strh	r2, [r5, #4]
}
 8004724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.failure_message = msg;
 8004728:	4b13      	ldr	r3, [pc, #76]	; (8004778 <rt_test_008_005_execute.lto_priv.0+0x188>)
 800472a:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 800472c:	f240 1201 	movw	r2, #257	; 0x101
 8004730:	80aa      	strh	r2, [r5, #4]
  return true;
 8004732:	e775      	b.n	8004620 <rt_test_008_005_execute.lto_priv.0+0x30>
  chtest.failure_message = msg;
 8004734:	4b11      	ldr	r3, [pc, #68]	; (800477c <rt_test_008_005_execute.lto_priv.0+0x18c>)
 8004736:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8004738:	f240 1201 	movw	r2, #257	; 0x101
 800473c:	80aa      	strh	r2, [r5, #4]
  return true;
 800473e:	e76f      	b.n	8004620 <rt_test_008_005_execute.lto_priv.0+0x30>
        mp->owner = NULL;
 8004740:	6099      	str	r1, [r3, #8]
 8004742:	4603      	mov	r3, r0
 8004744:	e7c5      	b.n	80046d2 <rt_test_008_005_execute.lto_priv.0+0xe2>
  mp->next = currtp->mtxlist;
 8004746:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  currtp->mtxlist = mp;
 8004748:	63c2      	str	r2, [r0, #60]	; 0x3c
  mp->next = currtp->mtxlist;
 800474a:	e9c2 0102 	strd	r0, r1, [r2, #8]
 800474e:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <rt_test_008_005_execute.lto_priv.0+0x184>)
 8004754:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8004756:	f240 1201 	movw	r2, #257	; 0x101
 800475a:	80aa      	strh	r2, [r5, #4]
  return true;
 800475c:	e760      	b.n	8004620 <rt_test_008_005_execute.lto_priv.0+0x30>
 800475e:	bf00      	nop
 8004760:	20000a90 	.word	0x20000a90
 8004764:	20000b74 	.word	0x20000b74
 8004768:	2000082c 	.word	0x2000082c
 800476c:	080151e4 	.word	0x080151e4
 8004770:	080151cc 	.word	0x080151cc
 8004774:	080151f4 	.word	0x080151f4
 8004778:	08015200 	.word	0x08015200
 800477c:	08015160 	.word	0x08015160

08004780 <chHeapAllocAligned>:
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8004780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    heapp = &default_heap;
 8004784:	4e3c      	ldr	r6, [pc, #240]	; (8004878 <chHeapAllocAligned+0xf8>)
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004786:	1dcf      	adds	r7, r1, #7
    heapp = &default_heap;
 8004788:	2800      	cmp	r0, #0
 800478a:	bf18      	it	ne
 800478c:	4606      	movne	r6, r0
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 800478e:	460d      	mov	r5, r1
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004790:	08ff      	lsrs	r7, r7, #3
  H_LOCK(heapp);
 8004792:	f106 080c 	add.w	r8, r6, #12
 8004796:	2330      	movs	r3, #48	; 0x30
 8004798:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 800479c:	4640      	mov	r0, r8
 800479e:	f7ff fc47 	bl	8004030 <chMtxLockS>
 80047a2:	2300      	movs	r3, #0
 80047a4:	f383 8811 	msr	BASEPRI, r3
  while (H_NEXT(qp) != NULL) {
 80047a8:	6874      	ldr	r4, [r6, #4]
 80047aa:	1d31      	adds	r1, r6, #4
 80047ac:	b90c      	cbnz	r4, 80047b2 <chHeapAllocAligned+0x32>
 80047ae:	e019      	b.n	80047e4 <chHeapAllocAligned+0x64>
 80047b0:	461c      	mov	r4, r3
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 80047b2:	f8d4 c004 	ldr.w	ip, [r4, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80047b6:	f104 020f 	add.w	r2, r4, #15
 80047ba:	f022 0207 	bic.w	r2, r2, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 80047be:	f10c 0301 	add.w	r3, ip, #1
 80047c2:	4691      	mov	r9, r2
 80047c4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80047c8:	3a08      	subs	r2, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 80047ca:	eba3 0009 	sub.w	r0, r3, r9
 80047ce:	4293      	cmp	r3, r2
 80047d0:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80047d4:	d902      	bls.n	80047dc <chHeapAllocAligned+0x5c>
 80047d6:	ebb7 0fe0 	cmp.w	r7, r0, asr #3
 80047da:	d914      	bls.n	8004806 <chHeapAllocAligned+0x86>
  while (H_NEXT(qp) != NULL) {
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	4621      	mov	r1, r4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e5      	bne.n	80047b0 <chHeapAllocAligned+0x30>
  H_UNLOCK(heapp);
 80047e4:	4640      	mov	r0, r8
 80047e6:	f7ff fcc3 	bl	8004170 <chMtxUnlock>
  if (heapp->provider != NULL) {
 80047ea:	6833      	ldr	r3, [r6, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d038      	beq.n	8004862 <chHeapAllocAligned+0xe2>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 80047f0:	2208      	movs	r2, #8
 80047f2:	00f8      	lsls	r0, r7, #3
 80047f4:	4611      	mov	r1, r2
 80047f6:	4798      	blx	r3
    if (ahp != NULL) {
 80047f8:	4681      	mov	r9, r0
 80047fa:	b108      	cbz	r0, 8004800 <chHeapAllocAligned+0x80>
      H_SIZE(hp) = size;
 80047fc:	e940 6502 	strd	r6, r5, [r0, #-8]
}
 8004800:	4648      	mov	r0, r9
 8004802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (ahp > hp) {
 8004806:	4294      	cmp	r4, r2
 8004808:	d318      	bcc.n	800483c <chHeapAllocAligned+0xbc>
        if (H_PAGES(hp) == pages) {
 800480a:	45bc      	cmp	ip, r7
 800480c:	d02d      	beq.n	800486a <chHeapAllocAligned+0xea>
          fp = H_BLOCK(hp) + pages;
 800480e:	3701      	adds	r7, #1
 8004810:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004814:	f102 0008 	add.w	r0, r2, #8
 8004818:	1a1b      	subs	r3, r3, r0
 800481a:	10db      	asrs	r3, r3, #3
          H_NEXT(fp) = H_NEXT(hp);
 800481c:	6820      	ldr	r0, [r4, #0]
 800481e:	f844 0037 	str.w	r0, [r4, r7, lsl #3]
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004822:	f104 0908 	add.w	r9, r4, #8
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004826:	6053      	str	r3, [r2, #4]
          H_NEXT(qp) = fp;
 8004828:	600a      	str	r2, [r1, #0]
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 800482a:	4622      	mov	r2, r4
      H_UNLOCK(heapp);
 800482c:	4640      	mov	r0, r8
      H_HEAP(hp) = heapp;
 800482e:	e9c2 6500 	strd	r6, r5, [r2]
      H_UNLOCK(heapp);
 8004832:	f7ff fc9d 	bl	8004170 <chMtxUnlock>
}
 8004836:	4648      	mov	r0, r9
 8004838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 800483c:	f104 0308 	add.w	r3, r4, #8
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	10db      	asrs	r3, r3, #3
        if (bpages > pages) {
 8004844:	45be      	cmp	lr, r7
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004846:	6063      	str	r3, [r4, #4]
        if (bpages > pages) {
 8004848:	d9f0      	bls.n	800482c <chHeapAllocAligned+0xac>
          H_PAGES(fp) = (bpages - pages) - 1U;
 800484a:	ebae 0307 	sub.w	r3, lr, r7
          fp = H_BLOCK(ahp) + pages;
 800484e:	3701      	adds	r7, #1
 8004850:	eb02 01c7 	add.w	r1, r2, r7, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004854:	3b01      	subs	r3, #1
 8004856:	604b      	str	r3, [r1, #4]
          H_NEXT(fp) = H_NEXT(hp);
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	f842 3037 	str.w	r3, [r2, r7, lsl #3]
          H_NEXT(hp) = fp;
 800485e:	6021      	str	r1, [r4, #0]
 8004860:	e7e4      	b.n	800482c <chHeapAllocAligned+0xac>
  return NULL;
 8004862:	4699      	mov	r9, r3
}
 8004864:	4648      	mov	r0, r9
 8004866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          H_NEXT(qp) = H_NEXT(hp);
 800486a:	46a1      	mov	r9, r4
 800486c:	4622      	mov	r2, r4
 800486e:	f859 3b08 	ldr.w	r3, [r9], #8
 8004872:	600b      	str	r3, [r1, #0]
 8004874:	e7da      	b.n	800482c <chHeapAllocAligned+0xac>
 8004876:	bf00      	nop
 8004878:	20000b9c 	.word	0x20000b9c
 800487c:	00000000 	.word	0x00000000

08004880 <chHeapFree>:
void chHeapFree(void *p) {
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  heapp = H_HEAP(hp);
 8004882:	e950 7302 	ldrd	r7, r3, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8004886:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004888:	08db      	lsrs	r3, r3, #3
  qp = &heapp->header;
 800488a:	1d3d      	adds	r5, r7, #4
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800488c:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 8004890:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 8004892:	f1a0 0408 	sub.w	r4, r0, #8
  H_LOCK(heapp);
 8004896:	370c      	adds	r7, #12
 8004898:	2330      	movs	r3, #48	; 0x30
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	4638      	mov	r0, r7
 80048a0:	f7ff fbc6 	bl	8004030 <chMtxLockS>
 80048a4:	2300      	movs	r3, #0
 80048a6:	f383 8811 	msr	BASEPRI, r3
  qp = &heapp->header;
 80048aa:	462b      	mov	r3, r5
    if (((qp == &heapp->header) || (hp > qp)) &&
 80048ac:	429d      	cmp	r5, r3
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80048ae:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 80048b0:	d001      	beq.n	80048b6 <chHeapFree+0x36>
 80048b2:	42a3      	cmp	r3, r4
 80048b4:	d202      	bcs.n	80048bc <chHeapFree+0x3c>
 80048b6:	b11a      	cbz	r2, 80048c0 <chHeapFree+0x40>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80048b8:	4294      	cmp	r4, r2
 80048ba:	d301      	bcc.n	80048c0 <chHeapFree+0x40>
    qp = H_NEXT(qp);
 80048bc:	4613      	mov	r3, r2
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 80048be:	e7f5      	b.n	80048ac <chHeapFree+0x2c>
      H_NEXT(hp) = H_NEXT(qp);
 80048c0:	f846 2c08 	str.w	r2, [r6, #-8]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80048c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
      H_NEXT(qp) = hp;
 80048c8:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80048ca:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80048ce:	3201      	adds	r2, #1
 80048d0:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 80048d4:	4281      	cmp	r1, r0
 80048d6:	d00a      	beq.n	80048ee <chHeapFree+0x6e>
      if ((H_LIMIT(qp) == hp)) {
 80048d8:	6859      	ldr	r1, [r3, #4]
 80048da:	1c4a      	adds	r2, r1, #1
 80048dc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80048e0:	4294      	cmp	r4, r2
 80048e2:	d011      	beq.n	8004908 <chHeapFree+0x88>
  H_UNLOCK(heapp);
 80048e4:	4638      	mov	r0, r7
}
 80048e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 80048ea:	f7ff bc41 	b.w	8004170 <chMtxUnlock>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80048ee:	6848      	ldr	r0, [r1, #4]
 80048f0:	4410      	add	r0, r2
 80048f2:	f846 0c04 	str.w	r0, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80048f6:	680a      	ldr	r2, [r1, #0]
      if ((H_LIMIT(qp) == hp)) {
 80048f8:	6859      	ldr	r1, [r3, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80048fa:	f846 2c08 	str.w	r2, [r6, #-8]
      if ((H_LIMIT(qp) == hp)) {
 80048fe:	1c4a      	adds	r2, r1, #1
 8004900:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8004904:	4294      	cmp	r4, r2
 8004906:	d1ed      	bne.n	80048e4 <chHeapFree+0x64>
        H_NEXT(qp) = H_NEXT(hp);
 8004908:	e956 0202 	ldrd	r0, r2, [r6, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 800490c:	3201      	adds	r2, #1
 800490e:	440a      	add	r2, r1
        H_NEXT(qp) = H_NEXT(hp);
 8004910:	e9c3 0200 	strd	r0, r2, [r3]
  H_UNLOCK(heapp);
 8004914:	4638      	mov	r0, r7
}
 8004916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 800491a:	f7ff bc29 	b.w	8004170 <chMtxUnlock>
 800491e:	bf00      	nop

08004920 <chThdRelease.part.0>:
  p->prev->next = p->next;
 8004920:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 8004924:	2100      	movs	r1, #0
 8004926:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 800492e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b01      	cmp	r3, #1
 8004938:	d00d      	beq.n	8004956 <chThdRelease.part.0+0x36>
 800493a:	2b02      	cmp	r3, #2
 800493c:	d10a      	bne.n	8004954 <chThdRelease.part.0+0x34>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 800493e:	6c43      	ldr	r3, [r0, #68]	; 0x44
  return tp->wabase;
 8004940:	6a02      	ldr	r2, [r0, #32]
 8004942:	2030      	movs	r0, #48	; 0x30
 8004944:	f380 8811 	msr	BASEPRI, r0
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	6010      	str	r0, [r2, #0]
  mp->next = php;
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	f381 8811 	msr	BASEPRI, r1
}
 8004952:	4770      	bx	lr
 8004954:	4770      	bx	lr
      chHeapFree(chThdGetWorkingAreaX(tp));
 8004956:	6a00      	ldr	r0, [r0, #32]
 8004958:	f7ff bf92 	b.w	8004880 <chHeapFree>
 800495c:	0000      	movs	r0, r0
	...

08004960 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8004960:	b538      	push	{r3, r4, r5, lr}
  return __sch_get_currthread();
 8004962:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <chThdWait+0x6c>)
 8004964:	4604      	mov	r4, r0
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	2130      	movs	r1, #48	; 0x30
 800496a:	f381 8811 	msr	BASEPRI, r1
  if (likely(tp->state != CH_STATE_FINAL)) {
 800496e:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 8004972:	290f      	cmp	r1, #15
 8004974:	d010      	beq.n	8004998 <chThdWait+0x38>
  p->next = lp->next;
 8004976:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  thread_t *otp = __instance_get_currthread(oip);
 8004978:	68d9      	ldr	r1, [r3, #12]
 800497a:	6010      	str	r0, [r2, #0]
  otp->state = newstate;
 800497c:	2009      	movs	r0, #9
  lp->next = p;
 800497e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004980:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  ch_priority_queue_t *p = pqp->next;
 8004984:	6818      	ldr	r0, [r3, #0]
  pqp->next       = p->next;
 8004986:	6802      	ldr	r2, [r0, #0]
 8004988:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 800498a:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 800498c:	2201      	movs	r2, #1
 800498e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8004992:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8004994:	f7fb fc94 	bl	80002c0 <__port_switch>
  msg = tp->u.exitcode;
 8004998:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800499a:	2200      	movs	r2, #0
 800499c:	f382 8811 	msr	BASEPRI, r2
 80049a0:	2330      	movs	r3, #48	; 0x30
 80049a2:	f383 8811 	msr	BASEPRI, r3
  tp->refs--;
 80049a6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80049aa:	3b01      	subs	r3, #1
 80049ac:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80049b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80049b6:	2b0f      	cmp	r3, #15
 80049b8:	d003      	beq.n	80049c2 <chThdWait+0x62>
 80049ba:	f382 8811 	msr	BASEPRI, r2
}
 80049be:	4628      	mov	r0, r5
 80049c0:	bd38      	pop	{r3, r4, r5, pc}
 80049c2:	4620      	mov	r0, r4
 80049c4:	f7ff ffac 	bl	8004920 <chThdRelease.part.0>
 80049c8:	4628      	mov	r0, r5
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
 80049cc:	20000a90 	.word	0x20000a90

080049d0 <rt_test_010_003_execute.lto_priv.0>:
static void rt_test_010_003_execute(void) {
 80049d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80049d4:	4c3c      	ldr	r4, [pc, #240]	; (8004ac8 <rt_test_010_003_execute.lto_priv.0+0xf8>)
 80049d6:	2301      	movs	r3, #1
static void rt_test_010_003_execute(void) {
 80049d8:	b083      	sub	sp, #12
  test_set_step(1);
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	2730      	movs	r7, #48	; 0x30
 80049de:	f387 8811 	msr	BASEPRI, r7
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return __sch_get_currthread()->epending |= events;
 80049e2:	4e3a      	ldr	r6, [pc, #232]	; (8004acc <rt_test_010_003_execute.lto_priv.0+0xfc>)
 80049e4:	68f2      	ldr	r2, [r6, #12]
 80049e6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80049e8:	f043 0307 	orr.w	r3, r3, #7
 80049ec:	6393      	str	r3, [r2, #56]	; 0x38
 80049ee:	2500      	movs	r5, #0
 80049f0:	f385 8811 	msr	BASEPRI, r5
  test_set_step(2);
 80049f4:	2302      	movs	r3, #2
 80049f6:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 80049f8:	f00e fc62 	bl	80132c0 <chEvtWaitOne.constprop.0>
  if (!condition) {
 80049fc:	2801      	cmp	r0, #1
 80049fe:	d149      	bne.n	8004a94 <rt_test_010_003_execute.lto_priv.0+0xc4>
    m = chEvtWaitOne(ALL_EVENTS);
 8004a00:	f00e fc5e 	bl	80132c0 <chEvtWaitOne.constprop.0>
 8004a04:	2802      	cmp	r0, #2
 8004a06:	d145      	bne.n	8004a94 <rt_test_010_003_execute.lto_priv.0+0xc4>
    m = chEvtWaitOne(ALL_EVENTS);
 8004a08:	f00e fc5a 	bl	80132c0 <chEvtWaitOne.constprop.0>
 8004a0c:	2804      	cmp	r0, #4
 8004a0e:	4680      	mov	r8, r0
 8004a10:	d140      	bne.n	8004a94 <rt_test_010_003_execute.lto_priv.0+0xc4>
 8004a12:	f387 8811 	msr	BASEPRI, r7
 8004a16:	68f3      	ldr	r3, [r6, #12]
  m = currtp->epending & events;
 8004a18:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
  currtp->epending &= ~events;
 8004a1c:	639d      	str	r5, [r3, #56]	; 0x38
 8004a1e:	f385 8811 	msr	BASEPRI, r5
 8004a22:	f1b9 0f00 	cmp.w	r9, #0
 8004a26:	d13d      	bne.n	8004aa4 <rt_test_010_003_execute.lto_priv.0+0xd4>
  test_set_step(3);
 8004a28:	2303      	movs	r3, #3
 8004a2a:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8004a2c:	f7fd fa20 	bl	8001e70 <test_wait_tick>
 8004a30:	68f1      	ldr	r1, [r6, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8004a32:	4b27      	ldr	r3, [pc, #156]	; (8004ad0 <rt_test_010_003_execute.lto_priv.0+0x100>)
 8004a34:	688a      	ldr	r2, [r1, #8]
 8004a36:	9100      	str	r1, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8004a38:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8004a3a:	3a01      	subs	r2, #1
 8004a3c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004a40:	4824      	ldr	r0, [pc, #144]	; (8004ad4 <rt_test_010_003_execute.lto_priv.0+0x104>)
 8004a42:	f7ff f895 	bl	8003b70 <chThdCreateStatic>
  test_set_step(4);
 8004a46:	f8c4 8000 	str.w	r8, [r4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8004a4a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8004ad8 <rt_test_010_003_execute.lto_priv.0+0x108>
 8004a4e:	f8c8 0000 	str.w	r0, [r8]
    m = chEvtWaitOne(ALL_EVENTS);
 8004a52:	f00e fc35 	bl	80132c0 <chEvtWaitOne.constprop.0>
 8004a56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8004a60:	1b5b      	subs	r3, r3, r5
 8004a62:	2b13      	cmp	r3, #19
 8004a64:	d82a      	bhi.n	8004abc <rt_test_010_003_execute.lto_priv.0+0xec>
 8004a66:	2801      	cmp	r0, #1
 8004a68:	d122      	bne.n	8004ab0 <rt_test_010_003_execute.lto_priv.0+0xe0>
 8004a6a:	f387 8811 	msr	BASEPRI, r7
 8004a6e:	68f3      	ldr	r3, [r6, #12]
  m = currtp->epending & events;
 8004a70:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  currtp->epending &= ~events;
 8004a72:	f8c3 9038 	str.w	r9, [r3, #56]	; 0x38
 8004a76:	f389 8811 	msr	BASEPRI, r9
 8004a7a:	b99d      	cbnz	r5, 8004aa4 <rt_test_010_003_execute.lto_priv.0+0xd4>
 8004a7c:	f108 0414 	add.w	r4, r8, #20
    if (threads[i] != NULL) {
 8004a80:	f858 0b04 	ldr.w	r0, [r8], #4
 8004a84:	b118      	cbz	r0, 8004a8e <rt_test_010_003_execute.lto_priv.0+0xbe>
      chThdWait(threads[i]);
 8004a86:	f7ff ff6b 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8004a8a:	f848 5c04 	str.w	r5, [r8, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8004a8e:	4544      	cmp	r4, r8
 8004a90:	d1f6      	bne.n	8004a80 <rt_test_010_003_execute.lto_priv.0+0xb0>
 8004a92:	e004      	b.n	8004a9e <rt_test_010_003_execute.lto_priv.0+0xce>
  chtest.failure_message = msg;
 8004a94:	4b11      	ldr	r3, [pc, #68]	; (8004adc <rt_test_010_003_execute.lto_priv.0+0x10c>)
 8004a96:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8004a98:	f240 1201 	movw	r2, #257	; 0x101
 8004a9c:	80a2      	strh	r2, [r4, #4]
}
 8004a9e:	b003      	add	sp, #12
 8004aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8004aa4:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <rt_test_010_003_execute.lto_priv.0+0x110>)
 8004aa6:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8004aa8:	f240 1201 	movw	r2, #257	; 0x101
 8004aac:	80a2      	strh	r2, [r4, #4]
  return true;
 8004aae:	e7f6      	b.n	8004a9e <rt_test_010_003_execute.lto_priv.0+0xce>
  chtest.failure_message = msg;
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <rt_test_010_003_execute.lto_priv.0+0x114>)
 8004ab2:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8004ab4:	f240 1201 	movw	r2, #257	; 0x101
 8004ab8:	80a2      	strh	r2, [r4, #4]
  return true;
 8004aba:	e7f0      	b.n	8004a9e <rt_test_010_003_execute.lto_priv.0+0xce>
  chtest.failure_message = msg;
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <rt_test_010_003_execute.lto_priv.0+0x118>)
 8004abe:	60a3      	str	r3, [r4, #8]
  chtest.global_fail     = true;
 8004ac0:	f240 1201 	movw	r2, #257	; 0x101
 8004ac4:	80a2      	strh	r2, [r4, #4]
 8004ac6:	e7ea      	b.n	8004a9e <rt_test_010_003_execute.lto_priv.0+0xce>
 8004ac8:	20000b74 	.word	0x20000b74
 8004acc:	20000a90 	.word	0x20000a90
 8004ad0:	080035a1 	.word	0x080035a1
 8004ad4:	20000dd8 	.word	0x20000dd8
 8004ad8:	200016e4 	.word	0x200016e4
 8004adc:	0801520c 	.word	0x0801520c
 8004ae0:	08015220 	.word	0x08015220
 8004ae4:	0801522c 	.word	0x0801522c
 8004ae8:	08015108 	.word	0x08015108
 8004aec:	00000000 	.word	0x00000000

08004af0 <rt_test_005_002_execute.lto_priv.0>:
static void rt_test_005_002_execute(void) {
 8004af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af4:	4d81      	ldr	r5, [pc, #516]	; (8004cfc <rt_test_005_002_execute.lto_priv.0+0x20c>)
  test_set_step(1);
 8004af6:	f8df a208 	ldr.w	sl, [pc, #520]	; 8004d00 <rt_test_005_002_execute.lto_priv.0+0x210>
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004afa:	68eb      	ldr	r3, [r5, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8004afc:	4881      	ldr	r0, [pc, #516]	; (8004d04 <rt_test_005_002_execute.lto_priv.0+0x214>)
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	4b81      	ldr	r3, [pc, #516]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004b02:	4c82      	ldr	r4, [pc, #520]	; (8004d0c <rt_test_005_002_execute.lto_priv.0+0x21c>)
static void rt_test_005_002_execute(void) {
 8004b04:	b083      	sub	sp, #12
  test_set_step(1);
 8004b06:	2101      	movs	r1, #1
 8004b08:	f8ca 1000 	str.w	r1, [sl]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8004b0c:	4980      	ldr	r1, [pc, #512]	; (8004d10 <rt_test_005_002_execute.lto_priv.0+0x220>)
 8004b0e:	9100      	str	r1, [sp, #0]
 8004b10:	3a05      	subs	r2, #5
 8004b12:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004b16:	f7ff f82b 	bl	8003b70 <chThdCreateStatic>
 8004b1a:	68eb      	ldr	r3, [r5, #12]
 8004b1c:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	4b7c      	ldr	r3, [pc, #496]	; (8004d14 <rt_test_005_002_execute.lto_priv.0+0x224>)
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	3a04      	subs	r2, #4
 8004b26:	4b78      	ldr	r3, [pc, #480]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004b28:	487b      	ldr	r0, [pc, #492]	; (8004d18 <rt_test_005_002_execute.lto_priv.0+0x228>)
 8004b2a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004b2e:	f7ff f81f 	bl	8003b70 <chThdCreateStatic>
 8004b32:	68eb      	ldr	r3, [r5, #12]
 8004b34:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	4b78      	ldr	r3, [pc, #480]	; (8004d1c <rt_test_005_002_execute.lto_priv.0+0x22c>)
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	3a03      	subs	r2, #3
 8004b3e:	4b72      	ldr	r3, [pc, #456]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004b40:	4877      	ldr	r0, [pc, #476]	; (8004d20 <rt_test_005_002_execute.lto_priv.0+0x230>)
 8004b42:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004b46:	f7ff f813 	bl	8003b70 <chThdCreateStatic>
 8004b4a:	68eb      	ldr	r3, [r5, #12]
 8004b4c:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	4b74      	ldr	r3, [pc, #464]	; (8004d24 <rt_test_005_002_execute.lto_priv.0+0x234>)
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	3a02      	subs	r2, #2
 8004b56:	4b6c      	ldr	r3, [pc, #432]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004b58:	4873      	ldr	r0, [pc, #460]	; (8004d28 <rt_test_005_002_execute.lto_priv.0+0x238>)
 8004b5a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004b5e:	f7ff f807 	bl	8003b70 <chThdCreateStatic>
 8004b62:	68eb      	ldr	r3, [r5, #12]
 8004b64:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	4b70      	ldr	r3, [pc, #448]	; (8004d2c <rt_test_005_002_execute.lto_priv.0+0x23c>)
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	4870      	ldr	r0, [pc, #448]	; (8004d30 <rt_test_005_002_execute.lto_priv.0+0x240>)
 8004b6e:	4b66      	ldr	r3, [pc, #408]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004b70:	3a01      	subs	r2, #1
 8004b72:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004b76:	f7fe fffb 	bl	8003b70 <chThdCreateStatic>
 8004b7a:	f104 0614 	add.w	r6, r4, #20
 8004b7e:	6120      	str	r0, [r4, #16]
 8004b80:	4627      	mov	r7, r4
 8004b82:	46a1      	mov	r9, r4
      threads[i] = NULL;
 8004b84:	f04f 0800 	mov.w	r8, #0
    if (threads[i] != NULL) {
 8004b88:	f859 0b04 	ldr.w	r0, [r9], #4
 8004b8c:	b118      	cbz	r0, 8004b96 <rt_test_005_002_execute.lto_priv.0+0xa6>
      chThdWait(threads[i]);
 8004b8e:	f7ff fee7 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8004b92:	f849 8c04 	str.w	r8, [r9, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8004b96:	45b1      	cmp	r9, r6
 8004b98:	d1f6      	bne.n	8004b88 <rt_test_005_002_execute.lto_priv.0+0x98>
    test_assert_sequence("ABCDE", "invalid sequence");
 8004b9a:	4966      	ldr	r1, [pc, #408]	; (8004d34 <rt_test_005_002_execute.lto_priv.0+0x244>)
 8004b9c:	4866      	ldr	r0, [pc, #408]	; (8004d38 <rt_test_005_002_execute.lto_priv.0+0x248>)
 8004b9e:	f7fb fcb7 	bl	8000510 <__test_assert_sequence>
 8004ba2:	4680      	mov	r8, r0
 8004ba4:	b110      	cbz	r0, 8004bac <rt_test_005_002_execute.lto_priv.0+0xbc>
}
 8004ba6:	b003      	add	sp, #12
 8004ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bac:	68eb      	ldr	r3, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8004bae:	4860      	ldr	r0, [pc, #384]	; (8004d30 <rt_test_005_002_execute.lto_priv.0+0x240>)
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	4b5e      	ldr	r3, [pc, #376]	; (8004d2c <rt_test_005_002_execute.lto_priv.0+0x23c>)
 8004bb4:	9300      	str	r3, [sp, #0]
  test_set_step(2);
 8004bb6:	f04f 0c02 	mov.w	ip, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8004bba:	4b53      	ldr	r3, [pc, #332]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
  test_set_step(2);
 8004bbc:	f8ca c000 	str.w	ip, [sl]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8004bc0:	3a01      	subs	r2, #1
 8004bc2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004bc6:	f7fe ffd3 	bl	8003b70 <chThdCreateStatic>
 8004bca:	68eb      	ldr	r3, [r5, #12]
 8004bcc:	6138      	str	r0, [r7, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	4b54      	ldr	r3, [pc, #336]	; (8004d24 <rt_test_005_002_execute.lto_priv.0+0x234>)
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	3a02      	subs	r2, #2
 8004bd6:	4b4c      	ldr	r3, [pc, #304]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004bd8:	4853      	ldr	r0, [pc, #332]	; (8004d28 <rt_test_005_002_execute.lto_priv.0+0x238>)
 8004bda:	f8df b160 	ldr.w	fp, [pc, #352]	; 8004d3c <rt_test_005_002_execute.lto_priv.0+0x24c>
 8004bde:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004be2:	f7fe ffc5 	bl	8003b70 <chThdCreateStatic>
 8004be6:	68eb      	ldr	r3, [r5, #12]
 8004be8:	60f8      	str	r0, [r7, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	4b4b      	ldr	r3, [pc, #300]	; (8004d1c <rt_test_005_002_execute.lto_priv.0+0x22c>)
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	3a03      	subs	r2, #3
 8004bf2:	4b45      	ldr	r3, [pc, #276]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004bf4:	484a      	ldr	r0, [pc, #296]	; (8004d20 <rt_test_005_002_execute.lto_priv.0+0x230>)
 8004bf6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004bfa:	f7fe ffb9 	bl	8003b70 <chThdCreateStatic>
 8004bfe:	68eb      	ldr	r3, [r5, #12]
 8004c00:	60b8      	str	r0, [r7, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	4b43      	ldr	r3, [pc, #268]	; (8004d14 <rt_test_005_002_execute.lto_priv.0+0x224>)
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	3a04      	subs	r2, #4
 8004c0a:	4b3f      	ldr	r3, [pc, #252]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004c0c:	4842      	ldr	r0, [pc, #264]	; (8004d18 <rt_test_005_002_execute.lto_priv.0+0x228>)
 8004c0e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004c12:	f7fe ffad 	bl	8003b70 <chThdCreateStatic>
 8004c16:	68eb      	ldr	r3, [r5, #12]
 8004c18:	6078      	str	r0, [r7, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	4b3c      	ldr	r3, [pc, #240]	; (8004d10 <rt_test_005_002_execute.lto_priv.0+0x220>)
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	4838      	ldr	r0, [pc, #224]	; (8004d04 <rt_test_005_002_execute.lto_priv.0+0x214>)
 8004c22:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004c24:	3a05      	subs	r2, #5
 8004c26:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004c2a:	f7fe ffa1 	bl	8003b70 <chThdCreateStatic>
 8004c2e:	6038      	str	r0, [r7, #0]
 8004c30:	f1ab 0710 	sub.w	r7, fp, #16
 8004c34:	46b9      	mov	r9, r7
    if (threads[i] != NULL) {
 8004c36:	b118      	cbz	r0, 8004c40 <rt_test_005_002_execute.lto_priv.0+0x150>
      chThdWait(threads[i]);
 8004c38:	f7ff fe92 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8004c3c:	f8c9 8000 	str.w	r8, [r9]
  for (i = 0; i < MAX_THREADS; i++)
 8004c40:	45d9      	cmp	r9, fp
 8004c42:	d002      	beq.n	8004c4a <rt_test_005_002_execute.lto_priv.0+0x15a>
    if (threads[i] != NULL) {
 8004c44:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8004c48:	e7f5      	b.n	8004c36 <rt_test_005_002_execute.lto_priv.0+0x146>
    test_assert_sequence("ABCDE", "invalid sequence");
 8004c4a:	493a      	ldr	r1, [pc, #232]	; (8004d34 <rt_test_005_002_execute.lto_priv.0+0x244>)
 8004c4c:	483a      	ldr	r0, [pc, #232]	; (8004d38 <rt_test_005_002_execute.lto_priv.0+0x248>)
 8004c4e:	f7fb fc5f 	bl	8000510 <__test_assert_sequence>
 8004c52:	4680      	mov	r8, r0
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d1a6      	bne.n	8004ba6 <rt_test_005_002_execute.lto_priv.0+0xb6>
 8004c58:	68eb      	ldr	r3, [r5, #12]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8004c5a:	482f      	ldr	r0, [pc, #188]	; (8004d18 <rt_test_005_002_execute.lto_priv.0+0x228>)
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	4b2d      	ldr	r3, [pc, #180]	; (8004d14 <rt_test_005_002_execute.lto_priv.0+0x224>)
 8004c60:	9300      	str	r3, [sp, #0]
  test_set_step(3);
 8004c62:	f04f 0c03 	mov.w	ip, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8004c66:	4b28      	ldr	r3, [pc, #160]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
  test_set_step(3);
 8004c68:	f8ca c000 	str.w	ip, [sl]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8004c6c:	3a04      	subs	r2, #4
 8004c6e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004c72:	f7fe ff7d 	bl	8003b70 <chThdCreateStatic>
 8004c76:	68eb      	ldr	r3, [r5, #12]
 8004c78:	6078      	str	r0, [r7, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <rt_test_005_002_execute.lto_priv.0+0x220>)
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	3a05      	subs	r2, #5
 8004c82:	4b21      	ldr	r3, [pc, #132]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004c84:	481f      	ldr	r0, [pc, #124]	; (8004d04 <rt_test_005_002_execute.lto_priv.0+0x214>)
 8004c86:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004c8a:	f7fe ff71 	bl	8003b70 <chThdCreateStatic>
 8004c8e:	68eb      	ldr	r3, [r5, #12]
 8004c90:	6038      	str	r0, [r7, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	4b25      	ldr	r3, [pc, #148]	; (8004d2c <rt_test_005_002_execute.lto_priv.0+0x23c>)
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	3a01      	subs	r2, #1
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004c9c:	4824      	ldr	r0, [pc, #144]	; (8004d30 <rt_test_005_002_execute.lto_priv.0+0x240>)
 8004c9e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004ca2:	f7fe ff65 	bl	8003b70 <chThdCreateStatic>
 8004ca6:	68eb      	ldr	r3, [r5, #12]
 8004ca8:	6138      	str	r0, [r7, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <rt_test_005_002_execute.lto_priv.0+0x234>)
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	3a02      	subs	r2, #2
 8004cb2:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004cb4:	481c      	ldr	r0, [pc, #112]	; (8004d28 <rt_test_005_002_execute.lto_priv.0+0x238>)
 8004cb6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004cba:	f7fe ff59 	bl	8003b70 <chThdCreateStatic>
 8004cbe:	68eb      	ldr	r3, [r5, #12]
 8004cc0:	60f8      	str	r0, [r7, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <rt_test_005_002_execute.lto_priv.0+0x22c>)
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	4815      	ldr	r0, [pc, #84]	; (8004d20 <rt_test_005_002_execute.lto_priv.0+0x230>)
 8004cca:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <rt_test_005_002_execute.lto_priv.0+0x218>)
 8004ccc:	3a03      	subs	r2, #3
 8004cce:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004cd2:	f7fe ff4d 	bl	8003b70 <chThdCreateStatic>
 8004cd6:	4645      	mov	r5, r8
 8004cd8:	60b8      	str	r0, [r7, #8]
 8004cda:	f854 0b04 	ldr.w	r0, [r4], #4
 8004cde:	b118      	cbz	r0, 8004ce8 <rt_test_005_002_execute.lto_priv.0+0x1f8>
      chThdWait(threads[i]);
 8004ce0:	f7ff fe3e 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8004ce4:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8004ce8:	42b4      	cmp	r4, r6
 8004cea:	d1f6      	bne.n	8004cda <rt_test_005_002_execute.lto_priv.0+0x1ea>
    test_assert_sequence("ABCDE", "invalid sequence");
 8004cec:	4911      	ldr	r1, [pc, #68]	; (8004d34 <rt_test_005_002_execute.lto_priv.0+0x244>)
 8004cee:	4812      	ldr	r0, [pc, #72]	; (8004d38 <rt_test_005_002_execute.lto_priv.0+0x248>)
}
 8004cf0:	b003      	add	sp, #12
 8004cf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8004cf6:	f7fb bc0b 	b.w	8000510 <__test_assert_sequence>
 8004cfa:	bf00      	nop
 8004cfc:	20000a90 	.word	0x20000a90
 8004d00:	20000b74 	.word	0x20000b74
 8004d04:	20000dd8 	.word	0x20000dd8
 8004d08:	080006e1 	.word	0x080006e1
 8004d0c:	200016e4 	.word	0x200016e4
 8004d10:	0801524c 	.word	0x0801524c
 8004d14:	08015240 	.word	0x08015240
 8004d18:	20000f88 	.word	0x20000f88
 8004d1c:	08015244 	.word	0x08015244
 8004d20:	20001138 	.word	0x20001138
 8004d24:	080151c8 	.word	0x080151c8
 8004d28:	200012e8 	.word	0x200012e8
 8004d2c:	080151c4 	.word	0x080151c4
 8004d30:	20001498 	.word	0x20001498
 8004d34:	08014f74 	.word	0x08014f74
 8004d38:	08015248 	.word	0x08015248
 8004d3c:	200016f4 	.word	0x200016f4

08004d40 <rt_test_006_001_execute.lto_priv.0>:

static void rt_test_006_001_execute(void) {
 8004d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 8004d44:	4d39      	ldr	r5, [pc, #228]	; (8004e2c <rt_test_006_001_execute.lto_priv.0+0xec>)
  msg_t msg;

  /* [6.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8004d46:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8004e30 <rt_test_006_001_execute.lto_priv.0+0xf0>
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004d4a:	68eb      	ldr	r3, [r5, #12]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8004d4c:	4939      	ldr	r1, [pc, #228]	; (8004e34 <rt_test_006_001_execute.lto_priv.0+0xf4>)
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	4839      	ldr	r0, [pc, #228]	; (8004e38 <rt_test_006_001_execute.lto_priv.0+0xf8>)
 8004d52:	4b3a      	ldr	r3, [pc, #232]	; (8004e3c <rt_test_006_001_execute.lto_priv.0+0xfc>)
 8004d54:	4c3a      	ldr	r4, [pc, #232]	; (8004e40 <rt_test_006_001_execute.lto_priv.0+0x100>)
static void rt_test_006_001_execute(void) {
 8004d56:	b083      	sub	sp, #12
  test_set_step(1);
 8004d58:	f04f 0901 	mov.w	r9, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8004d5c:	9100      	str	r1, [sp, #0]
 8004d5e:	3a01      	subs	r2, #1
 8004d60:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
  test_set_step(1);
 8004d64:	f8c8 9000 	str.w	r9, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8004d68:	f7fe ff02 	bl	8003b70 <chThdCreateStatic>
 8004d6c:	2330      	movs	r3, #48	; 0x30
 8004d6e:	6020      	str	r0, [r4, #0]
 8004d70:	f383 8811 	msr	BASEPRI, r3
  return __sch_get_currthread();
 8004d74:	68ee      	ldr	r6, [r5, #12]
  ch_priority_queue_t *p = pqp->next;
 8004d76:	6828      	ldr	r0, [r5, #0]
  *trp = tp;
 8004d78:	4f32      	ldr	r7, [pc, #200]	; (8004e44 <rt_test_006_001_execute.lto_priv.0+0x104>)
  otp->state = newstate;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
  pqp->next       = p->next;
 8004d80:	6803      	ldr	r3, [r0, #0]
 8004d82:	602b      	str	r3, [r5, #0]
  tp->u.wttrp = trp;
 8004d84:	62b7      	str	r7, [r6, #40]	; 0x28
  chSysSwitch(ntp, otp);
 8004d86:	4631      	mov	r1, r6
  pqp->next->prev = pqp;
 8004d88:	605d      	str	r5, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8004d8a:	f880 9024 	strb.w	r9, [r0, #36]	; 0x24
  *trp = tp;
 8004d8e:	603e      	str	r6, [r7, #0]
  __instance_set_currthread(oip, ntp);
 8004d90:	60e8      	str	r0, [r5, #12]
  chSysSwitch(ntp, otp);
 8004d92:	f7fb fa95 	bl	80002c0 <__port_switch>
  return tp->u.rdymsg;
 8004d96:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	bb8b      	cbnz	r3, 8004e06 <rt_test_006_001_execute.lto_priv.0+0xc6>
 8004da2:	bb36      	cbnz	r6, 8004df2 <rt_test_006_001_execute.lto_priv.0+0xb2>
 8004da4:	f104 0914 	add.w	r9, r4, #20
    if (threads[i] != NULL) {
 8004da8:	f854 0b04 	ldr.w	r0, [r4], #4
 8004dac:	b118      	cbz	r0, 8004db6 <rt_test_006_001_execute.lto_priv.0+0x76>
      chThdWait(threads[i]);
 8004dae:	f7ff fdd7 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8004db2:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8004db6:	45a1      	cmp	r9, r4
 8004db8:	d1f6      	bne.n	8004da8 <rt_test_006_001_execute.lto_priv.0+0x68>
  test_end_step(1);

  /* [6.1.2] The function chThdSuspendTimeoutS() is invoked, the thread
     is not resumed so a timeout must occur. On return the message and
     the state of the reference are tested.*/
  test_set_step(2);
 8004dba:	2302      	movs	r3, #2
 8004dbc:	f8c8 3000 	str.w	r3, [r8]
 8004dc0:	2330      	movs	r3, #48	; 0x30
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8004dca:	68eb      	ldr	r3, [r5, #12]
 8004dcc:	6a65      	ldr	r5, [r4, #36]	; 0x24
  tp->u.wttrp = trp;
 8004dce:	629f      	str	r7, [r3, #40]	; 0x28
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8004dd0:	2164      	movs	r1, #100	; 0x64
 8004dd2:	2003      	movs	r0, #3
  *trp = tp;
 8004dd4:	603b      	str	r3, [r7, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8004dd6:	f7fd fda3 	bl	8002920 <chSchGoSleepTimeoutS>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004de2:	3b64      	subs	r3, #100	; 0x64
 8004de4:	1b5b      	subs	r3, r3, r5
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d817      	bhi.n	8004e1a <rt_test_006_001_execute.lto_priv.0+0xda>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	b95b      	cbnz	r3, 8004e06 <rt_test_006_001_execute.lto_priv.0+0xc6>
 8004dee:	3001      	adds	r0, #1
 8004df0:	d010      	beq.n	8004e14 <rt_test_006_001_execute.lto_priv.0+0xd4>
  chtest.failure_message = msg;
 8004df2:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <rt_test_006_001_execute.lto_priv.0+0x108>)
 8004df4:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8004df8:	f240 1201 	movw	r2, #257	; 0x101
 8004dfc:	f8a8 2004 	strh.w	r2, [r8, #4]
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
  test_end_step(2);
}
 8004e00:	b003      	add	sp, #12
 8004e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8004e06:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <rt_test_006_001_execute.lto_priv.0+0x10c>)
 8004e08:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8004e0c:	f240 1201 	movw	r2, #257	; 0x101
 8004e10:	f8a8 2004 	strh.w	r2, [r8, #4]
 8004e14:	b003      	add	sp, #12
 8004e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	; (8004e50 <rt_test_006_001_execute.lto_priv.0+0x110>)
 8004e1c:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8004e20:	f240 1201 	movw	r2, #257	; 0x101
 8004e24:	f8a8 2004 	strh.w	r2, [r8, #4]
 8004e28:	e7f4      	b.n	8004e14 <rt_test_006_001_execute.lto_priv.0+0xd4>
 8004e2a:	bf00      	nop
 8004e2c:	20000a90 	.word	0x20000a90
 8004e30:	20000b74 	.word	0x20000b74
 8004e34:	080151c4 	.word	0x080151c4
 8004e38:	20000dd8 	.word	0x20000dd8
 8004e3c:	080021b1 	.word	0x080021b1
 8004e40:	200016e4 	.word	0x200016e4
 8004e44:	200016f8 	.word	0x200016f8
 8004e48:	08015140 	.word	0x08015140
 8004e4c:	08015250 	.word	0x08015250
 8004e50:	08015108 	.word	0x08015108
	...

08004e60 <rt_test_007_002_execute.lto_priv.0>:
static void rt_test_007_002_execute(void) {
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	4d59      	ldr	r5, [pc, #356]	; (8004fc8 <rt_test_007_002_execute.lto_priv.0+0x168>)
  test_set_step(1);
 8004e64:	4e59      	ldr	r6, [pc, #356]	; (8004fcc <rt_test_007_002_execute.lto_priv.0+0x16c>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8004e66:	68eb      	ldr	r3, [r5, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004e68:	4859      	ldr	r0, [pc, #356]	; (8004fd0 <rt_test_007_002_execute.lto_priv.0+0x170>)
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <rt_test_007_002_execute.lto_priv.0+0x174>)
 8004e6e:	4c5a      	ldr	r4, [pc, #360]	; (8004fd8 <rt_test_007_002_execute.lto_priv.0+0x178>)
static void rt_test_007_002_execute(void) {
 8004e70:	b082      	sub	sp, #8
  test_set_step(1);
 8004e72:	2101      	movs	r1, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004e74:	9000      	str	r0, [sp, #0]
 8004e76:	3205      	adds	r2, #5
  test_set_step(1);
 8004e78:	6031      	str	r1, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004e7a:	4858      	ldr	r0, [pc, #352]	; (8004fdc <rt_test_007_002_execute.lto_priv.0+0x17c>)
 8004e7c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004e80:	f7fe fe76 	bl	8003b70 <chThdCreateStatic>
 8004e84:	68eb      	ldr	r3, [r5, #12]
 8004e86:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	4b55      	ldr	r3, [pc, #340]	; (8004fe0 <rt_test_007_002_execute.lto_priv.0+0x180>)
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	3201      	adds	r2, #1
 8004e90:	4b50      	ldr	r3, [pc, #320]	; (8004fd4 <rt_test_007_002_execute.lto_priv.0+0x174>)
 8004e92:	4854      	ldr	r0, [pc, #336]	; (8004fe4 <rt_test_007_002_execute.lto_priv.0+0x184>)
 8004e94:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004e98:	f7fe fe6a 	bl	8003b70 <chThdCreateStatic>
 8004e9c:	68eb      	ldr	r3, [r5, #12]
 8004e9e:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	4b51      	ldr	r3, [pc, #324]	; (8004fe8 <rt_test_007_002_execute.lto_priv.0+0x188>)
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	3203      	adds	r2, #3
 8004ea8:	4b4a      	ldr	r3, [pc, #296]	; (8004fd4 <rt_test_007_002_execute.lto_priv.0+0x174>)
 8004eaa:	4850      	ldr	r0, [pc, #320]	; (8004fec <rt_test_007_002_execute.lto_priv.0+0x18c>)
 8004eac:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004eb0:	f7fe fe5e 	bl	8003b70 <chThdCreateStatic>
 8004eb4:	68eb      	ldr	r3, [r5, #12]
 8004eb6:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	4b4d      	ldr	r3, [pc, #308]	; (8004ff0 <rt_test_007_002_execute.lto_priv.0+0x190>)
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	3204      	adds	r2, #4
 8004ec0:	4b44      	ldr	r3, [pc, #272]	; (8004fd4 <rt_test_007_002_execute.lto_priv.0+0x174>)
 8004ec2:	484c      	ldr	r0, [pc, #304]	; (8004ff4 <rt_test_007_002_execute.lto_priv.0+0x194>)
 8004ec4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004ec8:	f7fe fe52 	bl	8003b70 <chThdCreateStatic>
 8004ecc:	68ea      	ldr	r2, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8004ece:	4b4a      	ldr	r3, [pc, #296]	; (8004ff8 <rt_test_007_002_execute.lto_priv.0+0x198>)
 8004ed0:	6892      	ldr	r2, [r2, #8]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	3202      	adds	r2, #2
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8004ed6:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8004ed8:	4b3e      	ldr	r3, [pc, #248]	; (8004fd4 <rt_test_007_002_execute.lto_priv.0+0x174>)
 8004eda:	4848      	ldr	r0, [pc, #288]	; (8004ffc <rt_test_007_002_execute.lto_priv.0+0x19c>)
 8004edc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8004ee0:	f7fe fe46 	bl	8003b70 <chThdCreateStatic>
  test_set_step(2);
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8004ee8:	6120      	str	r0, [r4, #16]
 8004eea:	2330      	movs	r3, #48	; 0x30
 8004eec:	f383 8811 	msr	BASEPRI, r3
  if (++sp->cnt <= (cnt_t)0) {
 8004ef0:	4c43      	ldr	r4, [pc, #268]	; (8005000 <rt_test_007_002_execute.lto_priv.0+0x1a0>)
 8004ef2:	68a3      	ldr	r3, [r4, #8]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	60a3      	str	r3, [r4, #8]
 8004efa:	dd41      	ble.n	8004f80 <rt_test_007_002_execute.lto_priv.0+0x120>
 8004efc:	2100      	movs	r1, #0
 8004efe:	f381 8811 	msr	BASEPRI, r1
 8004f02:	2330      	movs	r3, #48	; 0x30
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	68a3      	ldr	r3, [r4, #8]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	428b      	cmp	r3, r1
 8004f0e:	60a3      	str	r3, [r4, #8]
 8004f10:	dd53      	ble.n	8004fba <rt_test_007_002_execute.lto_priv.0+0x15a>
 8004f12:	2100      	movs	r1, #0
 8004f14:	f381 8811 	msr	BASEPRI, r1
 8004f18:	2330      	movs	r3, #48	; 0x30
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	68a3      	ldr	r3, [r4, #8]
 8004f20:	3301      	adds	r3, #1
 8004f22:	428b      	cmp	r3, r1
 8004f24:	60a3      	str	r3, [r4, #8]
 8004f26:	dd41      	ble.n	8004fac <rt_test_007_002_execute.lto_priv.0+0x14c>
 8004f28:	2100      	movs	r1, #0
 8004f2a:	f381 8811 	msr	BASEPRI, r1
 8004f2e:	2330      	movs	r3, #48	; 0x30
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	68a3      	ldr	r3, [r4, #8]
 8004f36:	3301      	adds	r3, #1
 8004f38:	428b      	cmp	r3, r1
 8004f3a:	60a3      	str	r3, [r4, #8]
 8004f3c:	dd2f      	ble.n	8004f9e <rt_test_007_002_execute.lto_priv.0+0x13e>
 8004f3e:	2100      	movs	r1, #0
 8004f40:	f381 8811 	msr	BASEPRI, r1
 8004f44:	2330      	movs	r3, #48	; 0x30
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	68a3      	ldr	r3, [r4, #8]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	428b      	cmp	r3, r1
 8004f50:	60a3      	str	r3, [r4, #8]
 8004f52:	dd1d      	ble.n	8004f90 <rt_test_007_002_execute.lto_priv.0+0x130>
 8004f54:	2600      	movs	r6, #0
 8004f56:	f386 8811 	msr	BASEPRI, r6
 8004f5a:	4c1f      	ldr	r4, [pc, #124]	; (8004fd8 <rt_test_007_002_execute.lto_priv.0+0x178>)
 8004f5c:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8004f60:	f854 0b04 	ldr.w	r0, [r4], #4
 8004f64:	b118      	cbz	r0, 8004f6e <rt_test_007_002_execute.lto_priv.0+0x10e>
      chThdWait(threads[i]);
 8004f66:	f7ff fcfb 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8004f6a:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8004f6e:	42a5      	cmp	r5, r4
 8004f70:	d1f6      	bne.n	8004f60 <rt_test_007_002_execute.lto_priv.0+0x100>
    test_assert_sequence("ABCDE", "invalid sequence");
 8004f72:	4924      	ldr	r1, [pc, #144]	; (8005004 <rt_test_007_002_execute.lto_priv.0+0x1a4>)
 8004f74:	4824      	ldr	r0, [pc, #144]	; (8005008 <rt_test_007_002_execute.lto_priv.0+0x1a8>)
}
 8004f76:	b002      	add	sp, #8
 8004f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8004f7c:	f7fb bac8 	b.w	8000510 <__test_assert_sequence>
  ch_queue_t *p = qp->next;
 8004f80:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8004f82:	6803      	ldr	r3, [r0, #0]
 8004f84:	6023      	str	r3, [r4, #0]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&sp->queue)), MSG_OK);
 8004f86:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8004f88:	605c      	str	r4, [r3, #4]
 8004f8a:	f7fe fc79 	bl	8003880 <chSchWakeupS>
 8004f8e:	e7b5      	b.n	8004efc <rt_test_007_002_execute.lto_priv.0+0x9c>
  ch_queue_t *p = qp->next;
 8004f90:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8004f92:	6803      	ldr	r3, [r0, #0]
 8004f94:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 8004f96:	605c      	str	r4, [r3, #4]
 8004f98:	f7fe fc72 	bl	8003880 <chSchWakeupS>
 8004f9c:	e7da      	b.n	8004f54 <rt_test_007_002_execute.lto_priv.0+0xf4>
  ch_queue_t *p = qp->next;
 8004f9e:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8004fa0:	6803      	ldr	r3, [r0, #0]
 8004fa2:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 8004fa4:	605c      	str	r4, [r3, #4]
 8004fa6:	f7fe fc6b 	bl	8003880 <chSchWakeupS>
 8004faa:	e7c8      	b.n	8004f3e <rt_test_007_002_execute.lto_priv.0+0xde>
  ch_queue_t *p = qp->next;
 8004fac:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8004fae:	6803      	ldr	r3, [r0, #0]
 8004fb0:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 8004fb2:	605c      	str	r4, [r3, #4]
 8004fb4:	f7fe fc64 	bl	8003880 <chSchWakeupS>
 8004fb8:	e7b6      	b.n	8004f28 <rt_test_007_002_execute.lto_priv.0+0xc8>
  ch_queue_t *p = qp->next;
 8004fba:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8004fbc:	6803      	ldr	r3, [r0, #0]
 8004fbe:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 8004fc0:	605c      	str	r4, [r3, #4]
 8004fc2:	f7fe fc5d 	bl	8003880 <chSchWakeupS>
 8004fc6:	e7a4      	b.n	8004f12 <rt_test_007_002_execute.lto_priv.0+0xb2>
 8004fc8:	20000a90 	.word	0x20000a90
 8004fcc:	20000b74 	.word	0x20000b74
 8004fd0:	080151c4 	.word	0x080151c4
 8004fd4:	080014c1 	.word	0x080014c1
 8004fd8:	200016e4 	.word	0x200016e4
 8004fdc:	20000dd8 	.word	0x20000dd8
 8004fe0:	080151c8 	.word	0x080151c8
 8004fe4:	20000f88 	.word	0x20000f88
 8004fe8:	08015244 	.word	0x08015244
 8004fec:	20001138 	.word	0x20001138
 8004ff0:	08015240 	.word	0x08015240
 8004ff4:	200012e8 	.word	0x200012e8
 8004ff8:	0801524c 	.word	0x0801524c
 8004ffc:	20001498 	.word	0x20001498
 8005000:	20000dbc 	.word	0x20000dbc
 8005004:	08014f74 	.word	0x08014f74
 8005008:	08015248 	.word	0x08015248
 800500c:	00000000 	.word	0x00000000

08005010 <rt_test_007_003_execute.lto_priv.0>:
static void rt_test_007_003_execute(void) {
 8005010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8005014:	4d60      	ldr	r5, [pc, #384]	; (8005198 <rt_test_007_003_execute.lto_priv.0+0x188>)
 8005016:	2301      	movs	r3, #1
static void rt_test_007_003_execute(void) {
 8005018:	b082      	sub	sp, #8
  test_set_step(1);
 800501a:	602b      	str	r3, [r5, #0]
 800501c:	2630      	movs	r6, #48	; 0x30
 800501e:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8005022:	4c5e      	ldr	r4, [pc, #376]	; (800519c <rt_test_007_003_execute.lto_priv.0+0x18c>)
 8005024:	68a2      	ldr	r2, [r4, #8]
 8005026:	1e53      	subs	r3, r2, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	60a3      	str	r3, [r4, #8]
 800502c:	db0a      	blt.n	8005044 <rt_test_007_003_execute.lto_priv.0+0x34>
 800502e:	2300      	movs	r3, #0
 8005030:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8005034:	4b5a      	ldr	r3, [pc, #360]	; (80051a0 <rt_test_007_003_execute.lto_priv.0+0x190>)
 8005036:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8005038:	f240 1201 	movw	r2, #257	; 0x101
 800503c:	80aa      	strh	r2, [r5, #4]
}
 800503e:	b002      	add	sp, #8
 8005040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      sp->cnt++;
 8005044:	60a2      	str	r2, [r4, #8]
 8005046:	2300      	movs	r3, #0
 8005048:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	42a3      	cmp	r3, r4
 8005050:	d150      	bne.n	80050f4 <rt_test_007_003_execute.lto_priv.0+0xe4>
    test_assert(sem1.cnt == 0, "counter not zero");
 8005052:	68a7      	ldr	r7, [r4, #8]
 8005054:	2f00      	cmp	r7, #0
 8005056:	d155      	bne.n	8005104 <rt_test_007_003_execute.lto_priv.0+0xf4>
  return __sch_get_currthread();
 8005058:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80051a4 <rt_test_007_003_execute.lto_priv.0+0x194>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800505c:	4852      	ldr	r0, [pc, #328]	; (80051a8 <rt_test_007_003_execute.lto_priv.0+0x198>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800505e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8005062:	6892      	ldr	r2, [r2, #8]
 8005064:	9700      	str	r7, [sp, #0]
  test_set_step(2);
 8005066:	2302      	movs	r3, #2
 8005068:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800506a:	3a01      	subs	r2, #1
 800506c:	4b4f      	ldr	r3, [pc, #316]	; (80051ac <rt_test_007_003_execute.lto_priv.0+0x19c>)
 800506e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005072:	f7fe fd7d 	bl	8003b70 <chThdCreateStatic>
 8005076:	4b4e      	ldr	r3, [pc, #312]	; (80051b0 <rt_test_007_003_execute.lto_priv.0+0x1a0>)
 8005078:	6018      	str	r0, [r3, #0]
 800507a:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 800507e:	68a3      	ldr	r3, [r4, #8]
 8005080:	3b01      	subs	r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	60a3      	str	r3, [r4, #8]
 8005086:	db45      	blt.n	8005114 <rt_test_007_003_execute.lto_priv.0+0x104>
 8005088:	f04f 0a00 	mov.w	sl, #0
 800508c:	f38a 8811 	msr	BASEPRI, sl
 8005090:	4e47      	ldr	r6, [pc, #284]	; (80051b0 <rt_test_007_003_execute.lto_priv.0+0x1a0>)
 8005092:	f106 0914 	add.w	r9, r6, #20
    if (threads[i] != NULL) {
 8005096:	f856 0b04 	ldr.w	r0, [r6], #4
 800509a:	b118      	cbz	r0, 80050a4 <rt_test_007_003_execute.lto_priv.0+0x94>
      chThdWait(threads[i]);
 800509c:	f7ff fc60 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 80050a0:	f846 ac04 	str.w	sl, [r6, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80050a4:	45b1      	cmp	r9, r6
 80050a6:	d1f6      	bne.n	8005096 <rt_test_007_003_execute.lto_priv.0+0x86>
 80050a8:	b9f7      	cbnz	r7, 80050e8 <rt_test_007_003_execute.lto_priv.0+0xd8>
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	42a3      	cmp	r3, r4
 80050ae:	d121      	bne.n	80050f4 <rt_test_007_003_execute.lto_priv.0+0xe4>
 80050b0:	68a3      	ldr	r3, [r4, #8]
 80050b2:	bb3b      	cbnz	r3, 8005104 <rt_test_007_003_execute.lto_priv.0+0xf4>
  test_set_step(3);
 80050b4:	2303      	movs	r3, #3
 80050b6:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 80050b8:	f7fc feda 	bl	8001e70 <test_wait_tick>
 80050bc:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80051b4 <rt_test_007_003_execute.lto_priv.0+0x1a4>
 80050c0:	4607      	mov	r7, r0
 80050c2:	2641      	movs	r6, #65	; 0x41
 80050c4:	f04f 0930 	mov.w	r9, #48	; 0x30
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80050c8:	68eb      	ldr	r3, [r5, #12]
 80050ca:	4553      	cmp	r3, sl
 80050cc:	d202      	bcs.n	80050d4 <rt_test_007_003_execute.lto_priv.0+0xc4>
    *chtest.tokp++ = token;
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	60ea      	str	r2, [r5, #12]
 80050d2:	701e      	strb	r6, [r3, #0]
 80050d4:	f389 8811 	msr	BASEPRI, r9
 80050d8:	68a3      	ldr	r3, [r4, #8]
 80050da:	3b01      	subs	r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	60a3      	str	r3, [r4, #8]
 80050e0:	db27      	blt.n	8005132 <rt_test_007_003_execute.lto_priv.0+0x122>
 80050e2:	2300      	movs	r3, #0
 80050e4:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 80050e8:	4b2d      	ldr	r3, [pc, #180]	; (80051a0 <rt_test_007_003_execute.lto_priv.0+0x190>)
 80050ea:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80050ec:	f240 1201 	movw	r2, #257	; 0x101
 80050f0:	80aa      	strh	r2, [r5, #4]
  return true;
 80050f2:	e7a4      	b.n	800503e <rt_test_007_003_execute.lto_priv.0+0x2e>
  chtest.failure_message = msg;
 80050f4:	4b30      	ldr	r3, [pc, #192]	; (80051b8 <rt_test_007_003_execute.lto_priv.0+0x1a8>)
 80050f6:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80050f8:	f240 1201 	movw	r2, #257	; 0x101
 80050fc:	80aa      	strh	r2, [r5, #4]
}
 80050fe:	b002      	add	sp, #8
 8005100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.failure_message = msg;
 8005104:	4b2d      	ldr	r3, [pc, #180]	; (80051bc <rt_test_007_003_execute.lto_priv.0+0x1ac>)
 8005106:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8005108:	f240 1201 	movw	r2, #257	; 0x101
 800510c:	80aa      	strh	r2, [r5, #4]
 800510e:	b002      	add	sp, #8
 8005110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return __sch_get_currthread();
 8005114:	f8d8 300c 	ldr.w	r3, [r8, #12]
  p->prev       = qp->prev;
 8005118:	6862      	ldr	r2, [r4, #4]
    currtp->u.wtsemp = sp;
 800511a:	629c      	str	r4, [r3, #40]	; 0x28
 800511c:	e9c3 4200 	strd	r4, r2, [r3]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8005120:	f241 3188 	movw	r1, #5000	; 0x1388
  p->prev->next = p;
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	2005      	movs	r0, #5
  qp->prev      = p;
 8005128:	6063      	str	r3, [r4, #4]
 800512a:	f7fd fbf9 	bl	8002920 <chSchGoSleepTimeoutS>
 800512e:	4607      	mov	r7, r0
 8005130:	e7aa      	b.n	8005088 <rt_test_007_003_execute.lto_priv.0+0x78>
 8005132:	f8d8 300c 	ldr.w	r3, [r8, #12]
  p->prev       = qp->prev;
 8005136:	6862      	ldr	r2, [r4, #4]
  p->next       = qp;
 8005138:	601c      	str	r4, [r3, #0]
  p->prev       = qp->prev;
 800513a:	605a      	str	r2, [r3, #4]
    currtp->u.wtsemp = sp;
 800513c:	629c      	str	r4, [r3, #40]	; 0x28
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800513e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  p->prev->next = p;
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	2005      	movs	r0, #5
  qp->prev      = p;
 8005146:	6063      	str	r3, [r4, #4]
 8005148:	f7fd fbea 	bl	8002920 <chSchGoSleepTimeoutS>
 800514c:	2300      	movs	r3, #0
 800514e:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8005152:	3001      	adds	r0, #1
 8005154:	d1c8      	bne.n	80050e8 <rt_test_007_003_execute.lto_priv.0+0xd8>
 8005156:	6823      	ldr	r3, [r4, #0]
    for (i = 0; i < 5; i++) {
 8005158:	3601      	adds	r6, #1
 800515a:	42a3      	cmp	r3, r4
 800515c:	b2f6      	uxtb	r6, r6
 800515e:	d1c9      	bne.n	80050f4 <rt_test_007_003_execute.lto_priv.0+0xe4>
 8005160:	68a3      	ldr	r3, [r4, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1ce      	bne.n	8005104 <rt_test_007_003_execute.lto_priv.0+0xf4>
 8005166:	2e46      	cmp	r6, #70	; 0x46
 8005168:	d1ae      	bne.n	80050c8 <rt_test_007_003_execute.lto_priv.0+0xb8>
    test_assert_sequence("ABCDE", "invalid sequence");
 800516a:	4915      	ldr	r1, [pc, #84]	; (80051c0 <rt_test_007_003_execute.lto_priv.0+0x1b0>)
 800516c:	4815      	ldr	r0, [pc, #84]	; (80051c4 <rt_test_007_003_execute.lto_priv.0+0x1b4>)
 800516e:	f7fb f9cf 	bl	8000510 <__test_assert_sequence>
 8005172:	2800      	cmp	r0, #0
 8005174:	f47f af63 	bne.w	800503e <rt_test_007_003_execute.lto_priv.0+0x2e>
 8005178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 8005182:	1bdb      	subs	r3, r3, r7
 8005184:	2b13      	cmp	r3, #19
 8005186:	f67f af5a 	bls.w	800503e <rt_test_007_003_execute.lto_priv.0+0x2e>
  chtest.failure_message = msg;
 800518a:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <rt_test_007_003_execute.lto_priv.0+0x1b8>)
 800518c:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 800518e:	f240 1201 	movw	r2, #257	; 0x101
 8005192:	80aa      	strh	r2, [r5, #4]
    return __test_fail(msg);
 8005194:	e753      	b.n	800503e <rt_test_007_003_execute.lto_priv.0+0x2e>
 8005196:	bf00      	nop
 8005198:	20000b74 	.word	0x20000b74
 800519c:	20000dbc 	.word	0x20000dbc
 80051a0:	080150cc 	.word	0x080150cc
 80051a4:	20000a90 	.word	0x20000a90
 80051a8:	20000dd8 	.word	0x20000dd8
 80051ac:	08003531 	.word	0x08003531
 80051b0:	200016e4 	.word	0x200016e4
 80051b4:	20000b94 	.word	0x20000b94
 80051b8:	08015160 	.word	0x08015160
 80051bc:	08015170 	.word	0x08015170
 80051c0:	08014f74 	.word	0x08014f74
 80051c4:	08015248 	.word	0x08015248
 80051c8:	08015108 	.word	0x08015108
 80051cc:	00000000 	.word	0x00000000

080051d0 <rt_test_007_004_execute.lto_priv.0>:
static void rt_test_007_004_execute(void) {
 80051d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d4:	4f35      	ldr	r7, [pc, #212]	; (80052ac <rt_test_007_004_execute.lto_priv.0+0xdc>)
  test_set_step(1);
 80051d6:	4e36      	ldr	r6, [pc, #216]	; (80052b0 <rt_test_007_004_execute.lto_priv.0+0xe0>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 80051d8:	68fb      	ldr	r3, [r7, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80051da:	4836      	ldr	r0, [pc, #216]	; (80052b4 <rt_test_007_004_execute.lto_priv.0+0xe4>)
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <rt_test_007_004_execute.lto_priv.0+0xe8>)
static void rt_test_007_004_execute(void) {
 80051e0:	b082      	sub	sp, #8
  test_set_step(1);
 80051e2:	2101      	movs	r1, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80051e4:	9000      	str	r0, [sp, #0]
  test_set_step(1);
 80051e6:	6031      	str	r1, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80051e8:	440a      	add	r2, r1
 80051ea:	4834      	ldr	r0, [pc, #208]	; (80052bc <rt_test_007_004_execute.lto_priv.0+0xec>)
 80051ec:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80051f0:	f7fe fcbe 	bl	8003b70 <chThdCreateStatic>
 80051f4:	4a32      	ldr	r2, [pc, #200]	; (80052c0 <rt_test_007_004_execute.lto_priv.0+0xf0>)
  test_set_step(2);
 80051f6:	2302      	movs	r3, #2
 80051f8:	6033      	str	r3, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80051fa:	6010      	str	r0, [r2, #0]
 80051fc:	2330      	movs	r3, #48	; 0x30
 80051fe:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->cnt <= (cnt_t)0) {
 8005202:	4d30      	ldr	r5, [pc, #192]	; (80052c4 <rt_test_007_004_execute.lto_priv.0+0xf4>)
 8005204:	68ab      	ldr	r3, [r5, #8]
  tp->state = CH_STATE_READY;
 8005206:	f04f 0c00 	mov.w	ip, #0
 800520a:	1c98      	adds	r0, r3, #2
 800520c:	e001      	b.n	8005212 <rt_test_007_004_execute.lto_priv.0+0x42>
  while (n > (cnt_t)0) {
 800520e:	4298      	cmp	r0, r3
 8005210:	d019      	beq.n	8005246 <rt_test_007_004_execute.lto_priv.0+0x76>
    if (++sp->cnt <= (cnt_t)0) {
 8005212:	3301      	adds	r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	60ab      	str	r3, [r5, #8]
 8005218:	dcf9      	bgt.n	800520e <rt_test_007_004_execute.lto_priv.0+0x3e>
  ch_queue_t *p = qp->next;
 800521a:	682a      	ldr	r2, [r5, #0]
  qp->next       = p->next;
 800521c:	6814      	ldr	r4, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800521e:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8005220:	f8d2 e008 	ldr.w	lr, [r2, #8]
  qp->next       = p->next;
 8005224:	602c      	str	r4, [r5, #0]
  qp->next->prev = qp;
 8005226:	6065      	str	r5, [r4, #4]
  tp->state = CH_STATE_READY;
 8005228:	f882 c024 	strb.w	ip, [r2, #36]	; 0x24
    pqp = pqp->next;
 800522c:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800522e:	688c      	ldr	r4, [r1, #8]
 8005230:	4574      	cmp	r4, lr
 8005232:	d2fb      	bcs.n	800522c <rt_test_007_004_execute.lto_priv.0+0x5c>
  p->prev       = pqp->prev;
 8005234:	684c      	ldr	r4, [r1, #4]
  while (n > (cnt_t)0) {
 8005236:	4298      	cmp	r0, r3
 8005238:	e9c2 1400 	strd	r1, r4, [r2]
  p->prev->next = p;
 800523c:	6022      	str	r2, [r4, #0]
  pqp->prev     = p;
 800523e:	604a      	str	r2, [r1, #4]
      chSchReadyI(threadref(ch_queue_fifo_remove(&sp->queue)))->u.rdymsg = MSG_OK;
 8005240:	f8c2 c028 	str.w	ip, [r2, #40]	; 0x28
  while (n > (cnt_t)0) {
 8005244:	d1e5      	bne.n	8005212 <rt_test_007_004_execute.lto_priv.0+0x42>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6892      	ldr	r2, [r2, #8]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	429a      	cmp	r2, r3
 8005250:	d901      	bls.n	8005256 <rt_test_007_004_execute.lto_priv.0+0x86>
    __sch_reschedule_ahead();
 8005252:	f7fc fe7d 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8005256:	f04f 0800 	mov.w	r8, #0
 800525a:	f388 8811 	msr	BASEPRI, r8
 800525e:	4c18      	ldr	r4, [pc, #96]	; (80052c0 <rt_test_007_004_execute.lto_priv.0+0xf0>)
 8005260:	f104 0714 	add.w	r7, r4, #20
    if (threads[i] != NULL) {
 8005264:	f854 0b04 	ldr.w	r0, [r4], #4
 8005268:	b118      	cbz	r0, 8005272 <rt_test_007_004_execute.lto_priv.0+0xa2>
      chThdWait(threads[i]);
 800526a:	f7ff fb79 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 800526e:	f844 8c04 	str.w	r8, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005272:	42a7      	cmp	r7, r4
 8005274:	d1f6      	bne.n	8005264 <rt_test_007_004_execute.lto_priv.0+0x94>
 8005276:	2330      	movs	r3, #48	; 0x30
 8005278:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 800527c:	68ab      	ldr	r3, [r5, #8]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d109      	bne.n	8005296 <rt_test_007_004_execute.lto_priv.0+0xc6>
 8005282:	2300      	movs	r3, #0
 8005284:	f383 8811 	msr	BASEPRI, r3
    test_assert_sequence("A", "invalid sequence");
 8005288:	490f      	ldr	r1, [pc, #60]	; (80052c8 <rt_test_007_004_execute.lto_priv.0+0xf8>)
 800528a:	480a      	ldr	r0, [pc, #40]	; (80052b4 <rt_test_007_004_execute.lto_priv.0+0xe4>)
}
 800528c:	b002      	add	sp, #8
 800528e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("A", "invalid sequence");
 8005292:	f7fb b93d 	b.w	8000510 <__test_assert_sequence>
  chtest.failure_message = msg;
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <rt_test_007_004_execute.lto_priv.0+0xfc>)
 8005298:	60b3      	str	r3, [r6, #8]
  chtest.global_fail     = true;
 800529a:	f240 1201 	movw	r2, #257	; 0x101
 800529e:	80b2      	strh	r2, [r6, #4]
 80052a0:	2300      	movs	r3, #0
 80052a2:	f383 8811 	msr	BASEPRI, r3
}
 80052a6:	b002      	add	sp, #8
 80052a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ac:	20000a90 	.word	0x20000a90
 80052b0:	20000b74 	.word	0x20000b74
 80052b4:	080151c4 	.word	0x080151c4
 80052b8:	080014c1 	.word	0x080014c1
 80052bc:	20000dd8 	.word	0x20000dd8
 80052c0:	200016e4 	.word	0x200016e4
 80052c4:	20000dbc 	.word	0x20000dbc
 80052c8:	08014f74 	.word	0x08014f74
 80052cc:	0801525c 	.word	0x0801525c

080052d0 <rt_test_007_005_teardown.lto_priv.0>:
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	4c07      	ldr	r4, [pc, #28]	; (80052f0 <rt_test_007_005_teardown.lto_priv.0+0x20>)
 80052d4:	2600      	movs	r6, #0
 80052d6:	f104 0514 	add.w	r5, r4, #20
 80052da:	f854 0b04 	ldr.w	r0, [r4], #4
 80052de:	b118      	cbz	r0, 80052e8 <rt_test_007_005_teardown.lto_priv.0+0x18>
 80052e0:	f7ff fb3e 	bl	8004960 <chThdWait>
 80052e4:	f844 6c04 	str.w	r6, [r4, #-4]
 80052e8:	42ac      	cmp	r4, r5
 80052ea:	d1f6      	bne.n	80052da <rt_test_007_005_teardown.lto_priv.0+0xa>
 80052ec:	bd70      	pop	{r4, r5, r6, pc}
 80052ee:	bf00      	nop
 80052f0:	200016e4 	.word	0x200016e4
	...

08005300 <rt_test_007_006_teardown.lto_priv.0>:
static void rt_test_007_006_teardown(void) {
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	4c07      	ldr	r4, [pc, #28]	; (8005320 <rt_test_007_006_teardown.lto_priv.0+0x20>)
      threads[i] = NULL;
 8005304:	2600      	movs	r6, #0
 8005306:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 800530a:	f854 0b04 	ldr.w	r0, [r4], #4
 800530e:	b118      	cbz	r0, 8005318 <rt_test_007_006_teardown.lto_priv.0+0x18>
      chThdWait(threads[i]);
 8005310:	f7ff fb26 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8005314:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005318:	42ac      	cmp	r4, r5
 800531a:	d1f6      	bne.n	800530a <rt_test_007_006_teardown.lto_priv.0+0xa>
}
 800531c:	bd70      	pop	{r4, r5, r6, pc}
 800531e:	bf00      	nop
 8005320:	200016e4 	.word	0x200016e4
	...

08005330 <rt_test_008_001_execute.lto_priv.0>:
static void rt_test_008_001_execute(void) {
 8005330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return __sch_get_currthread();
 8005334:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8005418 <rt_test_008_001_execute.lto_priv.0+0xe8>
  test_set_step(2);
 8005338:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800541c <rt_test_008_001_execute.lto_priv.0+0xec>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800533c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8005340:	2302      	movs	r3, #2
 8005342:	f8c8 3000 	str.w	r3, [r8]
static void rt_test_008_001_execute(void) {
 8005346:	b083      	sub	sp, #12
 8005348:	6895      	ldr	r5, [r2, #8]
 800534a:	2330      	movs	r3, #48	; 0x30
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	4833      	ldr	r0, [pc, #204]	; (8005420 <rt_test_008_001_execute.lto_priv.0+0xf0>)
 8005352:	f7fe fe6d 	bl	8004030 <chMtxLockS>
 8005356:	2700      	movs	r7, #0
 8005358:	f387 8811 	msr	BASEPRI, r7
  test_set_step(3);
 800535c:	2303      	movs	r3, #3
 800535e:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8005362:	4b30      	ldr	r3, [pc, #192]	; (8005424 <rt_test_008_001_execute.lto_priv.0+0xf4>)
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	1c6a      	adds	r2, r5, #1
 8005368:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <rt_test_008_001_execute.lto_priv.0+0xf8>)
 800536a:	4830      	ldr	r0, [pc, #192]	; (800542c <rt_test_008_001_execute.lto_priv.0+0xfc>)
 800536c:	4c30      	ldr	r4, [pc, #192]	; (8005430 <rt_test_008_001_execute.lto_priv.0+0x100>)
 800536e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005372:	f7fe fbfd 	bl	8003b70 <chThdCreateStatic>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8005376:	4b2f      	ldr	r3, [pc, #188]	; (8005434 <rt_test_008_001_execute.lto_priv.0+0x104>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8005378:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	1caa      	adds	r2, r5, #2
 800537e:	4b2a      	ldr	r3, [pc, #168]	; (8005428 <rt_test_008_001_execute.lto_priv.0+0xf8>)
 8005380:	482d      	ldr	r0, [pc, #180]	; (8005438 <rt_test_008_001_execute.lto_priv.0+0x108>)
 8005382:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005386:	f7fe fbf3 	bl	8003b70 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800538a:	4b2c      	ldr	r3, [pc, #176]	; (800543c <rt_test_008_001_execute.lto_priv.0+0x10c>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800538c:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	1cea      	adds	r2, r5, #3
 8005392:	4b25      	ldr	r3, [pc, #148]	; (8005428 <rt_test_008_001_execute.lto_priv.0+0xf8>)
 8005394:	482a      	ldr	r0, [pc, #168]	; (8005440 <rt_test_008_001_execute.lto_priv.0+0x110>)
 8005396:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800539a:	f7fe fbe9 	bl	8003b70 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800539e:	4b29      	ldr	r3, [pc, #164]	; (8005444 <rt_test_008_001_execute.lto_priv.0+0x114>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80053a0:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	1d2a      	adds	r2, r5, #4
 80053a6:	4b20      	ldr	r3, [pc, #128]	; (8005428 <rt_test_008_001_execute.lto_priv.0+0xf8>)
 80053a8:	4827      	ldr	r0, [pc, #156]	; (8005448 <rt_test_008_001_execute.lto_priv.0+0x118>)
 80053aa:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80053ae:	f7fe fbdf 	bl	8003b70 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80053b2:	4b26      	ldr	r3, [pc, #152]	; (800544c <rt_test_008_001_execute.lto_priv.0+0x11c>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80053b4:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	1d6a      	adds	r2, r5, #5
 80053ba:	4b1b      	ldr	r3, [pc, #108]	; (8005428 <rt_test_008_001_execute.lto_priv.0+0xf8>)
 80053bc:	4824      	ldr	r0, [pc, #144]	; (8005450 <rt_test_008_001_execute.lto_priv.0+0x120>)
 80053be:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80053c2:	f7fe fbd5 	bl	8003b70 <chThdCreateStatic>
  test_set_step(4);
 80053c6:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80053c8:	6120      	str	r0, [r4, #16]
    chMtxUnlock(&m1);
 80053ca:	4815      	ldr	r0, [pc, #84]	; (8005420 <rt_test_008_001_execute.lto_priv.0+0xf0>)
  test_set_step(4);
 80053cc:	f8c8 3000 	str.w	r3, [r8]
    chMtxUnlock(&m1);
 80053d0:	f7fe fece 	bl	8004170 <chMtxUnlock>
 80053d4:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 80053d8:	f854 0b04 	ldr.w	r0, [r4], #4
 80053dc:	b118      	cbz	r0, 80053e6 <rt_test_008_001_execute.lto_priv.0+0xb6>
      chThdWait(threads[i]);
 80053de:	f7ff fabf 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 80053e2:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80053e6:	42b4      	cmp	r4, r6
 80053e8:	d1f6      	bne.n	80053d8 <rt_test_008_001_execute.lto_priv.0+0xa8>
 80053ea:	f8d9 300c 	ldr.w	r3, [r9, #12]
  if (!condition) {
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	42ab      	cmp	r3, r5
 80053f2:	d106      	bne.n	8005402 <rt_test_008_001_execute.lto_priv.0+0xd2>
    test_assert_sequence("ABCDE", "invalid sequence");
 80053f4:	4917      	ldr	r1, [pc, #92]	; (8005454 <rt_test_008_001_execute.lto_priv.0+0x124>)
 80053f6:	4818      	ldr	r0, [pc, #96]	; (8005458 <rt_test_008_001_execute.lto_priv.0+0x128>)
}
 80053f8:	b003      	add	sp, #12
 80053fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80053fe:	f7fb b887 	b.w	8000510 <__test_assert_sequence>
  chtest.failure_message = msg;
 8005402:	4b16      	ldr	r3, [pc, #88]	; (800545c <rt_test_008_001_execute.lto_priv.0+0x12c>)
 8005404:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8005408:	f240 1201 	movw	r2, #257	; 0x101
 800540c:	f8a8 2004 	strh.w	r2, [r8, #4]
}
 8005410:	b003      	add	sp, #12
 8005412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005416:	bf00      	nop
 8005418:	20000a90 	.word	0x20000a90
 800541c:	20000b74 	.word	0x20000b74
 8005420:	2000082c 	.word	0x2000082c
 8005424:	0801524c 	.word	0x0801524c
 8005428:	08004271 	.word	0x08004271
 800542c:	20000dd8 	.word	0x20000dd8
 8005430:	200016e4 	.word	0x200016e4
 8005434:	08015240 	.word	0x08015240
 8005438:	20000f88 	.word	0x20000f88
 800543c:	08015244 	.word	0x08015244
 8005440:	20001138 	.word	0x20001138
 8005444:	080151c8 	.word	0x080151c8
 8005448:	200012e8 	.word	0x200012e8
 800544c:	080151c4 	.word	0x080151c4
 8005450:	20001498 	.word	0x20001498
 8005454:	08014f74 	.word	0x08014f74
 8005458:	08015248 	.word	0x08015248
 800545c:	080151cc 	.word	0x080151cc

08005460 <rt_test_008_004_teardown.lto_priv.0>:
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	4c07      	ldr	r4, [pc, #28]	; (8005480 <rt_test_008_004_teardown.lto_priv.0+0x20>)
 8005464:	2600      	movs	r6, #0
 8005466:	f104 0514 	add.w	r5, r4, #20
 800546a:	f854 0b04 	ldr.w	r0, [r4], #4
 800546e:	b118      	cbz	r0, 8005478 <rt_test_008_004_teardown.lto_priv.0+0x18>
 8005470:	f7ff fa76 	bl	8004960 <chThdWait>
 8005474:	f844 6c04 	str.w	r6, [r4, #-4]
 8005478:	42ac      	cmp	r4, r5
 800547a:	d1f6      	bne.n	800546a <rt_test_008_004_teardown.lto_priv.0+0xa>
 800547c:	bd70      	pop	{r4, r5, r6, pc}
 800547e:	bf00      	nop
 8005480:	200016e4 	.word	0x200016e4
	...

08005490 <rt_test_008_007_execute.lto_priv.0>:
static void rt_test_008_007_execute(void) {
 8005490:	b5f0      	push	{r4, r5, r6, r7, lr}
  return __sch_get_currthread();
 8005492:	4d61      	ldr	r5, [pc, #388]	; (8005618 <rt_test_008_007_execute.lto_priv.0+0x188>)
  test_set_step(1);
 8005494:	4f61      	ldr	r7, [pc, #388]	; (800561c <rt_test_008_007_execute.lto_priv.0+0x18c>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005496:	68eb      	ldr	r3, [r5, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8005498:	4961      	ldr	r1, [pc, #388]	; (8005620 <rt_test_008_007_execute.lto_priv.0+0x190>)
 800549a:	689e      	ldr	r6, [r3, #8]
 800549c:	4861      	ldr	r0, [pc, #388]	; (8005624 <rt_test_008_007_execute.lto_priv.0+0x194>)
 800549e:	4b62      	ldr	r3, [pc, #392]	; (8005628 <rt_test_008_007_execute.lto_priv.0+0x198>)
 80054a0:	4c62      	ldr	r4, [pc, #392]	; (800562c <rt_test_008_007_execute.lto_priv.0+0x19c>)
static void rt_test_008_007_execute(void) {
 80054a2:	b083      	sub	sp, #12
  test_set_step(1);
 80054a4:	2201      	movs	r2, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80054a6:	9100      	str	r1, [sp, #0]
  test_set_step(1);
 80054a8:	603a      	str	r2, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80054aa:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80054ae:	18b2      	adds	r2, r6, r2
 80054b0:	f7fe fb5e 	bl	8003b70 <chThdCreateStatic>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80054b4:	4b5e      	ldr	r3, [pc, #376]	; (8005630 <rt_test_008_007_execute.lto_priv.0+0x1a0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80054b6:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80054b8:	1cb2      	adds	r2, r6, #2
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80054c0:	4b59      	ldr	r3, [pc, #356]	; (8005628 <rt_test_008_007_execute.lto_priv.0+0x198>)
 80054c2:	485c      	ldr	r0, [pc, #368]	; (8005634 <rt_test_008_007_execute.lto_priv.0+0x1a4>)
 80054c4:	f7fe fb54 	bl	8003b70 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80054c8:	4b5b      	ldr	r3, [pc, #364]	; (8005638 <rt_test_008_007_execute.lto_priv.0+0x1a8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80054ca:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80054cc:	1cf2      	adds	r2, r6, #3
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80054d4:	4b54      	ldr	r3, [pc, #336]	; (8005628 <rt_test_008_007_execute.lto_priv.0+0x198>)
 80054d6:	4859      	ldr	r0, [pc, #356]	; (800563c <rt_test_008_007_execute.lto_priv.0+0x1ac>)
 80054d8:	f7fe fb4a 	bl	8003b70 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80054dc:	4b58      	ldr	r3, [pc, #352]	; (8005640 <rt_test_008_007_execute.lto_priv.0+0x1b0>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80054de:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80054e0:	1d32      	adds	r2, r6, #4
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80054e8:	4b4f      	ldr	r3, [pc, #316]	; (8005628 <rt_test_008_007_execute.lto_priv.0+0x198>)
 80054ea:	4856      	ldr	r0, [pc, #344]	; (8005644 <rt_test_008_007_execute.lto_priv.0+0x1b4>)
 80054ec:	f7fe fb40 	bl	8003b70 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80054f0:	4b55      	ldr	r3, [pc, #340]	; (8005648 <rt_test_008_007_execute.lto_priv.0+0x1b8>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80054f2:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80054f4:	1d72      	adds	r2, r6, #5
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80054fc:	4b4a      	ldr	r3, [pc, #296]	; (8005628 <rt_test_008_007_execute.lto_priv.0+0x198>)
 80054fe:	4853      	ldr	r0, [pc, #332]	; (800564c <rt_test_008_007_execute.lto_priv.0+0x1bc>)
 8005500:	f7fe fb36 	bl	8003b70 <chThdCreateStatic>
  test_set_step(2);
 8005504:	2302      	movs	r3, #2
 8005506:	603b      	str	r3, [r7, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8005508:	6120      	str	r0, [r4, #16]
 800550a:	2330      	movs	r3, #48	; 0x30
 800550c:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8005510:	4b4f      	ldr	r3, [pc, #316]	; (8005650 <rt_test_008_007_execute.lto_priv.0+0x1c0>)
 8005512:	681a      	ldr	r2, [r3, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8005514:	429a      	cmp	r2, r3
 8005516:	d061      	beq.n	80055dc <rt_test_008_007_execute.lto_priv.0+0x14c>
  qp->next       = p->next;
 8005518:	6811      	ldr	r1, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800551a:	6896      	ldr	r6, [r2, #8]
  qp->next->prev = qp;
 800551c:	604b      	str	r3, [r1, #4]
    tp->u.rdymsg = MSG_OK;
 800551e:	2000      	movs	r0, #0
 8005520:	6290      	str	r0, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8005522:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005526:	6990      	ldr	r0, [r2, #24]
  qp->next       = p->next;
 8005528:	6019      	str	r1, [r3, #0]
    pqp = pqp->next;
 800552a:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800552c:	6884      	ldr	r4, [r0, #8]
 800552e:	42b4      	cmp	r4, r6
 8005530:	d2fb      	bcs.n	800552a <rt_test_008_007_execute.lto_priv.0+0x9a>
  p->prev       = pqp->prev;
 8005532:	6844      	ldr	r4, [r0, #4]
  p->next       = pqp;
 8005534:	6010      	str	r0, [r2, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8005536:	4299      	cmp	r1, r3
  p->prev       = pqp->prev;
 8005538:	6054      	str	r4, [r2, #4]
  p->prev->next = p;
 800553a:	6022      	str	r2, [r4, #0]
  pqp->prev     = p;
 800553c:	6042      	str	r2, [r0, #4]
 800553e:	d04d      	beq.n	80055dc <rt_test_008_007_execute.lto_priv.0+0x14c>
  qp->next       = p->next;
 8005540:	680a      	ldr	r2, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005542:	688e      	ldr	r6, [r1, #8]
  qp->next->prev = qp;
 8005544:	6053      	str	r3, [r2, #4]
    tp->u.rdymsg = MSG_OK;
 8005546:	2000      	movs	r0, #0
 8005548:	6288      	str	r0, [r1, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800554a:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800554e:	6988      	ldr	r0, [r1, #24]
  qp->next       = p->next;
 8005550:	601a      	str	r2, [r3, #0]
    pqp = pqp->next;
 8005552:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005554:	6884      	ldr	r4, [r0, #8]
 8005556:	42b4      	cmp	r4, r6
 8005558:	d2fb      	bcs.n	8005552 <rt_test_008_007_execute.lto_priv.0+0xc2>
  p->prev       = pqp->prev;
 800555a:	6844      	ldr	r4, [r0, #4]
  p->next       = pqp;
 800555c:	6008      	str	r0, [r1, #0]
  if (ch_queue_notempty(&cp->queue)) {
 800555e:	429a      	cmp	r2, r3
  p->prev       = pqp->prev;
 8005560:	604c      	str	r4, [r1, #4]
  p->prev->next = p;
 8005562:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 8005564:	6041      	str	r1, [r0, #4]
 8005566:	d039      	beq.n	80055dc <rt_test_008_007_execute.lto_priv.0+0x14c>
  qp->next       = p->next;
 8005568:	6811      	ldr	r1, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800556a:	6896      	ldr	r6, [r2, #8]
  qp->next->prev = qp;
 800556c:	604b      	str	r3, [r1, #4]
    tp->u.rdymsg = MSG_OK;
 800556e:	2000      	movs	r0, #0
 8005570:	6290      	str	r0, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8005572:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005576:	6990      	ldr	r0, [r2, #24]
  qp->next       = p->next;
 8005578:	6019      	str	r1, [r3, #0]
    pqp = pqp->next;
 800557a:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800557c:	6884      	ldr	r4, [r0, #8]
 800557e:	42b4      	cmp	r4, r6
 8005580:	d2fb      	bcs.n	800557a <rt_test_008_007_execute.lto_priv.0+0xea>
  p->prev       = pqp->prev;
 8005582:	6844      	ldr	r4, [r0, #4]
  p->next       = pqp;
 8005584:	6010      	str	r0, [r2, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8005586:	4299      	cmp	r1, r3
  p->prev       = pqp->prev;
 8005588:	6054      	str	r4, [r2, #4]
  p->prev->next = p;
 800558a:	6022      	str	r2, [r4, #0]
  pqp->prev     = p;
 800558c:	6042      	str	r2, [r0, #4]
 800558e:	d025      	beq.n	80055dc <rt_test_008_007_execute.lto_priv.0+0x14c>
  qp->next       = p->next;
 8005590:	680a      	ldr	r2, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005592:	688e      	ldr	r6, [r1, #8]
  qp->next->prev = qp;
 8005594:	6053      	str	r3, [r2, #4]
    tp->u.rdymsg = MSG_OK;
 8005596:	2000      	movs	r0, #0
 8005598:	6288      	str	r0, [r1, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800559a:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800559e:	6988      	ldr	r0, [r1, #24]
  qp->next       = p->next;
 80055a0:	601a      	str	r2, [r3, #0]
    pqp = pqp->next;
 80055a2:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80055a4:	6884      	ldr	r4, [r0, #8]
 80055a6:	42b4      	cmp	r4, r6
 80055a8:	d2fb      	bcs.n	80055a2 <rt_test_008_007_execute.lto_priv.0+0x112>
  p->prev       = pqp->prev;
 80055aa:	6844      	ldr	r4, [r0, #4]
  p->next       = pqp;
 80055ac:	6008      	str	r0, [r1, #0]
  if (ch_queue_notempty(&cp->queue)) {
 80055ae:	429a      	cmp	r2, r3
  p->prev       = pqp->prev;
 80055b0:	604c      	str	r4, [r1, #4]
  p->prev->next = p;
 80055b2:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 80055b4:	6041      	str	r1, [r0, #4]
 80055b6:	d011      	beq.n	80055dc <rt_test_008_007_execute.lto_priv.0+0x14c>
  qp->next       = p->next;
 80055b8:	6810      	ldr	r0, [r2, #0]
 80055ba:	6018      	str	r0, [r3, #0]
  qp->next->prev = qp;
 80055bc:	6043      	str	r3, [r0, #4]
    tp->u.rdymsg = MSG_OK;
 80055be:	2100      	movs	r1, #0
 80055c0:	6993      	ldr	r3, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80055c2:	6890      	ldr	r0, [r2, #8]
 80055c4:	6291      	str	r1, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80055c6:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    pqp = pqp->next;
 80055ca:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80055cc:	6899      	ldr	r1, [r3, #8]
 80055ce:	4281      	cmp	r1, r0
 80055d0:	d2fb      	bcs.n	80055ca <rt_test_008_007_execute.lto_priv.0+0x13a>
  p->prev       = pqp->prev;
 80055d2:	6859      	ldr	r1, [r3, #4]
 80055d4:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 80055d8:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 80055da:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80055dc:	682a      	ldr	r2, [r5, #0]
 80055de:	68eb      	ldr	r3, [r5, #12]
 80055e0:	6892      	ldr	r2, [r2, #8]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d901      	bls.n	80055ec <rt_test_008_007_execute.lto_priv.0+0x15c>
    __sch_reschedule_ahead();
 80055e8:	f7fc fcb2 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 80055ec:	2600      	movs	r6, #0
 80055ee:	f386 8811 	msr	BASEPRI, r6
 80055f2:	4c0e      	ldr	r4, [pc, #56]	; (800562c <rt_test_008_007_execute.lto_priv.0+0x19c>)
 80055f4:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 80055f8:	f854 0b04 	ldr.w	r0, [r4], #4
 80055fc:	b118      	cbz	r0, 8005606 <rt_test_008_007_execute.lto_priv.0+0x176>
      chThdWait(threads[i]);
 80055fe:	f7ff f9af 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8005602:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005606:	42a5      	cmp	r5, r4
 8005608:	d1f6      	bne.n	80055f8 <rt_test_008_007_execute.lto_priv.0+0x168>
    test_assert_sequence("ABCDE", "invalid sequence");
 800560a:	4912      	ldr	r1, [pc, #72]	; (8005654 <rt_test_008_007_execute.lto_priv.0+0x1c4>)
 800560c:	4812      	ldr	r0, [pc, #72]	; (8005658 <rt_test_008_007_execute.lto_priv.0+0x1c8>)
}
 800560e:	b003      	add	sp, #12
 8005610:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8005614:	f7fa bf7c 	b.w	8000510 <__test_assert_sequence>
 8005618:	20000a90 	.word	0x20000a90
 800561c:	20000b74 	.word	0x20000b74
 8005620:	0801524c 	.word	0x0801524c
 8005624:	20000dd8 	.word	0x20000dd8
 8005628:	08004331 	.word	0x08004331
 800562c:	200016e4 	.word	0x200016e4
 8005630:	08015240 	.word	0x08015240
 8005634:	20000f88 	.word	0x20000f88
 8005638:	08015244 	.word	0x08015244
 800563c:	20001138 	.word	0x20001138
 8005640:	080151c8 	.word	0x080151c8
 8005644:	200012e8 	.word	0x200012e8
 8005648:	080151c4 	.word	0x080151c4
 800564c:	20001498 	.word	0x20001498
 8005650:	20000800 	.word	0x20000800
 8005654:	08014f74 	.word	0x08014f74
 8005658:	08015248 	.word	0x08015248
 800565c:	00000000 	.word	0x00000000

08005660 <rt_test_008_008_execute.lto_priv.0>:
static void rt_test_008_008_execute(void) {
 8005660:	b5f0      	push	{r4, r5, r6, r7, lr}
  return __sch_get_currthread();
 8005662:	4e3c      	ldr	r6, [pc, #240]	; (8005754 <rt_test_008_008_execute.lto_priv.0+0xf4>)
  test_set_step(1);
 8005664:	4f3c      	ldr	r7, [pc, #240]	; (8005758 <rt_test_008_008_execute.lto_priv.0+0xf8>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005666:	68f3      	ldr	r3, [r6, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8005668:	493c      	ldr	r1, [pc, #240]	; (800575c <rt_test_008_008_execute.lto_priv.0+0xfc>)
 800566a:	689d      	ldr	r5, [r3, #8]
 800566c:	483c      	ldr	r0, [pc, #240]	; (8005760 <rt_test_008_008_execute.lto_priv.0+0x100>)
 800566e:	4b3d      	ldr	r3, [pc, #244]	; (8005764 <rt_test_008_008_execute.lto_priv.0+0x104>)
 8005670:	4c3d      	ldr	r4, [pc, #244]	; (8005768 <rt_test_008_008_execute.lto_priv.0+0x108>)
static void rt_test_008_008_execute(void) {
 8005672:	b083      	sub	sp, #12
  test_set_step(1);
 8005674:	2201      	movs	r2, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8005676:	9100      	str	r1, [sp, #0]
  test_set_step(1);
 8005678:	603a      	str	r2, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800567a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800567e:	18aa      	adds	r2, r5, r2
 8005680:	f7fe fa76 	bl	8003b70 <chThdCreateStatic>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8005684:	4b39      	ldr	r3, [pc, #228]	; (800576c <rt_test_008_008_execute.lto_priv.0+0x10c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8005686:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8005688:	1caa      	adds	r2, r5, #2
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005690:	4b34      	ldr	r3, [pc, #208]	; (8005764 <rt_test_008_008_execute.lto_priv.0+0x104>)
 8005692:	4837      	ldr	r0, [pc, #220]	; (8005770 <rt_test_008_008_execute.lto_priv.0+0x110>)
 8005694:	f7fe fa6c 	bl	8003b70 <chThdCreateStatic>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8005698:	4b36      	ldr	r3, [pc, #216]	; (8005774 <rt_test_008_008_execute.lto_priv.0+0x114>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800569a:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800569c:	1cea      	adds	r2, r5, #3
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80056a4:	4b2f      	ldr	r3, [pc, #188]	; (8005764 <rt_test_008_008_execute.lto_priv.0+0x104>)
 80056a6:	4834      	ldr	r0, [pc, #208]	; (8005778 <rt_test_008_008_execute.lto_priv.0+0x118>)
 80056a8:	f7fe fa62 	bl	8003b70 <chThdCreateStatic>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80056ac:	4b33      	ldr	r3, [pc, #204]	; (800577c <rt_test_008_008_execute.lto_priv.0+0x11c>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80056ae:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80056b0:	1d2a      	adds	r2, r5, #4
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80056b8:	4b2a      	ldr	r3, [pc, #168]	; (8005764 <rt_test_008_008_execute.lto_priv.0+0x104>)
 80056ba:	4831      	ldr	r0, [pc, #196]	; (8005780 <rt_test_008_008_execute.lto_priv.0+0x120>)
 80056bc:	f7fe fa58 	bl	8003b70 <chThdCreateStatic>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80056c0:	4b30      	ldr	r3, [pc, #192]	; (8005784 <rt_test_008_008_execute.lto_priv.0+0x124>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80056c2:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80056c4:	1d6a      	adds	r2, r5, #5
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80056cc:	4b25      	ldr	r3, [pc, #148]	; (8005764 <rt_test_008_008_execute.lto_priv.0+0x104>)
 80056ce:	482e      	ldr	r0, [pc, #184]	; (8005788 <rt_test_008_008_execute.lto_priv.0+0x128>)
 80056d0:	f7fe fa4e 	bl	8003b70 <chThdCreateStatic>
  test_set_step(2);
 80056d4:	2302      	movs	r3, #2
 80056d6:	603b      	str	r3, [r7, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80056d8:	6120      	str	r0, [r4, #16]
 80056da:	2330      	movs	r3, #48	; 0x30
 80056dc:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 80056e0:	482a      	ldr	r0, [pc, #168]	; (800578c <rt_test_008_008_execute.lto_priv.0+0x12c>)
 80056e2:	6801      	ldr	r1, [r0, #0]
  while (ch_queue_notempty(&cp->queue)) {
 80056e4:	4281      	cmp	r1, r0
 80056e6:	d017      	beq.n	8005718 <rt_test_008_008_execute.lto_priv.0+0xb8>
  tp->state = CH_STATE_READY;
 80056e8:	f04f 0c00 	mov.w	ip, #0
    chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 80056ec:	f06f 0701 	mvn.w	r7, #1
 80056f0:	460b      	mov	r3, r1
  qp->next       = p->next;
 80056f2:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80056f4:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80056f6:	689d      	ldr	r5, [r3, #8]
  qp->next       = p->next;
 80056f8:	6001      	str	r1, [r0, #0]
  qp->next->prev = qp;
 80056fa:	6048      	str	r0, [r1, #4]
  tp->state = CH_STATE_READY;
 80056fc:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
    pqp = pqp->next;
 8005700:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8005702:	6894      	ldr	r4, [r2, #8]
 8005704:	42ac      	cmp	r4, r5
 8005706:	d2fb      	bcs.n	8005700 <rt_test_008_008_execute.lto_priv.0+0xa0>
  p->prev       = pqp->prev;
 8005708:	6854      	ldr	r4, [r2, #4]
  while (ch_queue_notempty(&cp->queue)) {
 800570a:	4281      	cmp	r1, r0
 800570c:	e9c3 2400 	strd	r2, r4, [r3]
  p->prev->next = p;
 8005710:	6023      	str	r3, [r4, #0]
  pqp->prev     = p;
 8005712:	6053      	str	r3, [r2, #4]
    chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 8005714:	629f      	str	r7, [r3, #40]	; 0x28
  while (ch_queue_notempty(&cp->queue)) {
 8005716:	d1eb      	bne.n	80056f0 <rt_test_008_008_execute.lto_priv.0+0x90>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8005718:	6832      	ldr	r2, [r6, #0]
 800571a:	68f3      	ldr	r3, [r6, #12]
 800571c:	6892      	ldr	r2, [r2, #8]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	429a      	cmp	r2, r3
 8005722:	d901      	bls.n	8005728 <rt_test_008_008_execute.lto_priv.0+0xc8>
    __sch_reschedule_ahead();
 8005724:	f7fc fc14 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8005728:	2600      	movs	r6, #0
 800572a:	f386 8811 	msr	BASEPRI, r6
 800572e:	4c0e      	ldr	r4, [pc, #56]	; (8005768 <rt_test_008_008_execute.lto_priv.0+0x108>)
 8005730:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8005734:	f854 0b04 	ldr.w	r0, [r4], #4
 8005738:	b118      	cbz	r0, 8005742 <rt_test_008_008_execute.lto_priv.0+0xe2>
      chThdWait(threads[i]);
 800573a:	f7ff f911 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 800573e:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005742:	42a5      	cmp	r5, r4
 8005744:	d1f6      	bne.n	8005734 <rt_test_008_008_execute.lto_priv.0+0xd4>
    test_assert_sequence("ABCDE", "invalid sequence");
 8005746:	4912      	ldr	r1, [pc, #72]	; (8005790 <rt_test_008_008_execute.lto_priv.0+0x130>)
 8005748:	4812      	ldr	r0, [pc, #72]	; (8005794 <rt_test_008_008_execute.lto_priv.0+0x134>)
}
 800574a:	b003      	add	sp, #12
 800574c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8005750:	f7fa bede 	b.w	8000510 <__test_assert_sequence>
 8005754:	20000a90 	.word	0x20000a90
 8005758:	20000b74 	.word	0x20000b74
 800575c:	0801524c 	.word	0x0801524c
 8005760:	20000dd8 	.word	0x20000dd8
 8005764:	08004331 	.word	0x08004331
 8005768:	200016e4 	.word	0x200016e4
 800576c:	08015240 	.word	0x08015240
 8005770:	20000f88 	.word	0x20000f88
 8005774:	08015244 	.word	0x08015244
 8005778:	20001138 	.word	0x20001138
 800577c:	080151c8 	.word	0x080151c8
 8005780:	200012e8 	.word	0x200012e8
 8005784:	080151c4 	.word	0x080151c4
 8005788:	20001498 	.word	0x20001498
 800578c:	20000800 	.word	0x20000800
 8005790:	08014f74 	.word	0x08014f74
 8005794:	08015248 	.word	0x08015248
	...

080057a0 <rt_test_008_009_execute.lto_priv.0>:

static void rt_test_008_009_execute(void) {
 80057a0:	b570      	push	{r4, r5, r6, lr}
  return __sch_get_currthread();
 80057a2:	4b30      	ldr	r3, [pc, #192]	; (8005864 <rt_test_008_009_execute.lto_priv.0+0xc4>)
  }
  test_end_step(1);

  /* [8.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 80057a4:	4d30      	ldr	r5, [pc, #192]	; (8005868 <rt_test_008_009_execute.lto_priv.0+0xc8>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 80057a6:	68db      	ldr	r3, [r3, #12]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80057a8:	4830      	ldr	r0, [pc, #192]	; (800586c <rt_test_008_009_execute.lto_priv.0+0xcc>)
 80057aa:	689e      	ldr	r6, [r3, #8]
 80057ac:	4b30      	ldr	r3, [pc, #192]	; (8005870 <rt_test_008_009_execute.lto_priv.0+0xd0>)
 80057ae:	4c31      	ldr	r4, [pc, #196]	; (8005874 <rt_test_008_009_execute.lto_priv.0+0xd4>)
static void rt_test_008_009_execute(void) {
 80057b0:	b082      	sub	sp, #8
  test_set_step(2);
 80057b2:	2102      	movs	r1, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80057b4:	9000      	str	r0, [sp, #0]
 80057b6:	1c72      	adds	r2, r6, #1
  test_set_step(2);
 80057b8:	6029      	str	r1, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80057ba:	482f      	ldr	r0, [pc, #188]	; (8005878 <rt_test_008_009_execute.lto_priv.0+0xd8>)
 80057bc:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80057c0:	f7fe f9d6 	bl	8003b70 <chThdCreateStatic>

  /* [8.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 80057c4:	4a2d      	ldr	r2, [pc, #180]	; (800587c <rt_test_008_009_execute.lto_priv.0+0xdc>)
 80057c6:	9200      	str	r2, [sp, #0]
  test_set_step(3);
 80057c8:	2303      	movs	r3, #3
 80057ca:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80057cc:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 80057ce:	1cb2      	adds	r2, r6, #2
 80057d0:	4b2b      	ldr	r3, [pc, #172]	; (8005880 <rt_test_008_009_execute.lto_priv.0+0xe0>)
 80057d2:	482c      	ldr	r0, [pc, #176]	; (8005884 <rt_test_008_009_execute.lto_priv.0+0xe4>)
 80057d4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80057d8:	f7fe f9ca 	bl	8003b70 <chThdCreateStatic>

  /* [8.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 80057dc:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <rt_test_008_009_execute.lto_priv.0+0xe8>)
 80057de:	9200      	str	r2, [sp, #0]
  test_set_step(4);
 80057e0:	2304      	movs	r3, #4
 80057e2:	602b      	str	r3, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 80057e4:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 80057e6:	4b29      	ldr	r3, [pc, #164]	; (800588c <rt_test_008_009_execute.lto_priv.0+0xec>)
 80057e8:	4829      	ldr	r0, [pc, #164]	; (8005890 <rt_test_008_009_execute.lto_priv.0+0xf0>)
 80057ea:	1cf2      	adds	r2, r6, #3
 80057ec:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80057f0:	f7fe f9be 	bl	8003b70 <chThdCreateStatic>
  test_end_step(4);

  /* [8.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 80057f4:	2305      	movs	r3, #5
 80057f6:	602b      	str	r3, [r5, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 80057f8:	60a0      	str	r0, [r4, #8]
 80057fa:	2330      	movs	r3, #48	; 0x30
 80057fc:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8005800:	4c24      	ldr	r4, [pc, #144]	; (8005894 <rt_test_008_009_execute.lto_priv.0+0xf4>)
 8005802:	6820      	ldr	r0, [r4, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8005804:	42a0      	cmp	r0, r4
 8005806:	d005      	beq.n	8005814 <rt_test_008_009_execute.lto_priv.0+0x74>
  qp->next       = p->next;
 8005808:	6803      	ldr	r3, [r0, #0]
 800580a:	6023      	str	r3, [r4, #0]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&cp->queue)), MSG_OK);
 800580c:	2100      	movs	r1, #0
  qp->next->prev = qp;
 800580e:	605c      	str	r4, [r3, #4]
 8005810:	f7fe f836 	bl	8003880 <chSchWakeupS>
 8005814:	2100      	movs	r1, #0
 8005816:	f381 8811 	msr	BASEPRI, r1
    chCondSignal(&c1);
  }
  test_end_step(5);

  /* [8.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 800581a:	2306      	movs	r3, #6
 800581c:	602b      	str	r3, [r5, #0]
 800581e:	2330      	movs	r3, #48	; 0x30
 8005820:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8005824:	6820      	ldr	r0, [r4, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8005826:	42a0      	cmp	r0, r4
 8005828:	d004      	beq.n	8005834 <rt_test_008_009_execute.lto_priv.0+0x94>
  qp->next       = p->next;
 800582a:	6803      	ldr	r3, [r0, #0]
 800582c:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 800582e:	605c      	str	r4, [r3, #4]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&cp->queue)), MSG_OK);
 8005830:	f7fe f826 	bl	8003880 <chSchWakeupS>
 8005834:	2600      	movs	r6, #0
 8005836:	f386 8811 	msr	BASEPRI, r6
    chCondSignal(&c1);
  }
  test_end_step(6);

  /* [8.9.7] Checking the order of operations.*/
  test_set_step(7);
 800583a:	4c0e      	ldr	r4, [pc, #56]	; (8005874 <rt_test_008_009_execute.lto_priv.0+0xd4>)
 800583c:	2307      	movs	r3, #7
 800583e:	602b      	str	r3, [r5, #0]
 8005840:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8005844:	f854 0b04 	ldr.w	r0, [r4], #4
 8005848:	b118      	cbz	r0, 8005852 <rt_test_008_009_execute.lto_priv.0+0xb2>
      chThdWait(threads[i]);
 800584a:	f7ff f889 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 800584e:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005852:	42a5      	cmp	r5, r4
 8005854:	d1f6      	bne.n	8005844 <rt_test_008_009_execute.lto_priv.0+0xa4>
  {
    test_wait_threads();
    test_assert_sequence("ABC", "invalid sequence");
 8005856:	4910      	ldr	r1, [pc, #64]	; (8005898 <rt_test_008_009_execute.lto_priv.0+0xf8>)
 8005858:	4810      	ldr	r0, [pc, #64]	; (800589c <rt_test_008_009_execute.lto_priv.0+0xfc>)
  }
  test_end_step(7);
}
 800585a:	b002      	add	sp, #8
 800585c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8005860:	f7fa be56 	b.w	8000510 <__test_assert_sequence>
 8005864:	20000a90 	.word	0x20000a90
 8005868:	20000b74 	.word	0x20000b74
 800586c:	080151c4 	.word	0x080151c4
 8005870:	080043d1 	.word	0x080043d1
 8005874:	200016e4 	.word	0x200016e4
 8005878:	20000dd8 	.word	0x20000dd8
 800587c:	08015244 	.word	0x08015244
 8005880:	08004331 	.word	0x08004331
 8005884:	20000f88 	.word	0x20000f88
 8005888:	080151c8 	.word	0x080151c8
 800588c:	08004491 	.word	0x08004491
 8005890:	20001138 	.word	0x20001138
 8005894:	20000800 	.word	0x20000800
 8005898:	08014f74 	.word	0x08014f74
 800589c:	08014f88 	.word	0x08014f88

080058a0 <rt_test_009_001_execute.lto_priv.0>:
 * - [9.1.1] Starting the messenger thread.
 * - [9.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_009_001_execute(void) {
 80058a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return __sch_get_currthread();
 80058a4:	4f31      	ldr	r7, [pc, #196]	; (800596c <rt_test_009_001_execute.lto_priv.0+0xcc>)
  thread_t *tp;
  msg_t msg;

  /* [9.1.1] Starting the messenger thread.*/
  test_set_step(1);
 80058a6:	4e32      	ldr	r6, [pc, #200]	; (8005970 <rt_test_009_001_execute.lto_priv.0+0xd0>)
 80058a8:	68f9      	ldr	r1, [r7, #12]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80058aa:	4b32      	ldr	r3, [pc, #200]	; (8005974 <rt_test_009_001_execute.lto_priv.0+0xd4>)
 80058ac:	688a      	ldr	r2, [r1, #8]
 80058ae:	4832      	ldr	r0, [pc, #200]	; (8005978 <rt_test_009_001_execute.lto_priv.0+0xd8>)
static void rt_test_009_001_execute(void) {
 80058b0:	b085      	sub	sp, #20
  test_set_step(1);
 80058b2:	f04f 0901 	mov.w	r9, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80058b6:	9100      	str	r1, [sp, #0]
 80058b8:	444a      	add	r2, r9
  test_set_step(1);
 80058ba:	f8c6 9000 	str.w	r9, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80058be:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80058c2:	f7fe f955 	bl	8003b70 <chThdCreateStatic>
 80058c6:	4b2d      	ldr	r3, [pc, #180]	; (800597c <rt_test_009_001_execute.lto_priv.0+0xdc>)
  }
  test_end_step(1);

  /* [9.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 80058c8:	46b0      	mov	r8, r6
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80058ca:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 80058cc:	2302      	movs	r3, #2
 80058ce:	f848 3b20 	str.w	r3, [r8], #32
 80058d2:	f04f 0b04 	mov.w	fp, #4
 80058d6:	2530      	movs	r5, #48	; 0x30
 80058d8:	f385 8811 	msr	BASEPRI, r5
 80058dc:	68f9      	ldr	r1, [r7, #12]
 80058de:	460c      	mov	r4, r1
 80058e0:	f04f 0a00 	mov.w	sl, #0
 80058e4:	f854 0f30 	ldr.w	r0, [r4, #48]!
 80058e8:	42a0      	cmp	r0, r4
 80058ea:	d02d      	beq.n	8005948 <rt_test_009_001_execute.lto_priv.0+0xa8>
  qp->next       = p->next;
 80058ec:	6802      	ldr	r2, [r0, #0]
 80058ee:	630a      	str	r2, [r1, #48]	; 0x30
  tp->state = CH_STATE_SNDMSG;
 80058f0:	f04f 0c0d 	mov.w	ip, #13
  qp->next->prev = qp;
 80058f4:	6054      	str	r4, [r2, #4]
 80058f6:	f880 c024 	strb.w	ip, [r0, #36]	; 0x24
 80058fa:	f38a 8811 	msr	BASEPRI, sl
  return tp->u.sentmsg;
 80058fe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005900:	f385 8811 	msr	BASEPRI, r5
  chSchWakeupS(tp, msg);
 8005904:	4621      	mov	r1, r4
 8005906:	f7fd ffbb 	bl	8003880 <chSchWakeupS>
 800590a:	f38a 8811 	msr	BASEPRI, sl
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 800590e:	68f3      	ldr	r3, [r6, #12]
 8005910:	4543      	cmp	r3, r8
 8005912:	d202      	bcs.n	800591a <rt_test_009_001_execute.lto_priv.0+0x7a>
    *chtest.tokp++ = token;
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	60f2      	str	r2, [r6, #12]

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 8005918:	701c      	strb	r4, [r3, #0]
    for (i = 0; i < 4; i++) {
 800591a:	f1bb 0b01 	subs.w	fp, fp, #1
 800591e:	d1db      	bne.n	80058d8 <rt_test_009_001_execute.lto_priv.0+0x38>
 8005920:	4c16      	ldr	r4, [pc, #88]	; (800597c <rt_test_009_001_execute.lto_priv.0+0xdc>)
      threads[i] = NULL;
 8005922:	465d      	mov	r5, fp
 8005924:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 8005928:	f854 0b04 	ldr.w	r0, [r4], #4
 800592c:	b118      	cbz	r0, 8005936 <rt_test_009_001_execute.lto_priv.0+0x96>
      chThdWait(threads[i]);
 800592e:	f7ff f817 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8005932:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005936:	42a6      	cmp	r6, r4
 8005938:	d1f6      	bne.n	8005928 <rt_test_009_001_execute.lto_priv.0+0x88>
    }
    test_wait_threads();
    test_assert_sequence("ABCD", "invalid sequence");
 800593a:	4911      	ldr	r1, [pc, #68]	; (8005980 <rt_test_009_001_execute.lto_priv.0+0xe0>)
 800593c:	4811      	ldr	r0, [pc, #68]	; (8005984 <rt_test_009_001_execute.lto_priv.0+0xe4>)
  }
  test_end_step(2);
}
 800593e:	b005      	add	sp, #20
 8005940:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 8005944:	f7fa bde4 	b.w	8000510 <__test_assert_sequence>
  ch_priority_queue_t *p = pqp->next;
 8005948:	6838      	ldr	r0, [r7, #0]
  chSysSwitch(ntp, otp);
 800594a:	9103      	str	r1, [sp, #12]
  otp->state = newstate;
 800594c:	f04f 030e 	mov.w	r3, #14
 8005950:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8005954:	6802      	ldr	r2, [r0, #0]
 8005956:	603a      	str	r2, [r7, #0]
  pqp->next->prev = pqp;
 8005958:	6057      	str	r7, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 800595a:	f880 9024 	strb.w	r9, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 800595e:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8005960:	f7fa fcae 	bl	80002c0 <__port_switch>
  ch_queue_t *p = qp->next;
 8005964:	9903      	ldr	r1, [sp, #12]
 8005966:	6b08      	ldr	r0, [r1, #48]	; 0x30
}
 8005968:	e7c0      	b.n	80058ec <rt_test_009_001_execute.lto_priv.0+0x4c>
 800596a:	bf00      	nop
 800596c:	20000a90 	.word	0x20000a90
 8005970:	20000b74 	.word	0x20000b74
 8005974:	08001491 	.word	0x08001491
 8005978:	20000dd8 	.word	0x20000dd8
 800597c:	200016e4 	.word	0x200016e4
 8005980:	08014f74 	.word	0x08014f74
 8005984:	0801526c 	.word	0x0801526c
	...

08005990 <rt_test_010_004_execute.lto_priv.0>:
static void rt_test_010_004_execute(void) {
 8005990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005994:	4d55      	ldr	r5, [pc, #340]	; (8005aec <rt_test_010_004_execute.lto_priv.0+0x15c>)
 8005996:	2701      	movs	r7, #1
static void rt_test_010_004_execute(void) {
 8005998:	b082      	sub	sp, #8
  test_set_step(1);
 800599a:	602f      	str	r7, [r5, #0]
 800599c:	2230      	movs	r2, #48	; 0x30
 800599e:	f382 8811 	msr	BASEPRI, r2
 80059a2:	4c53      	ldr	r4, [pc, #332]	; (8005af0 <rt_test_010_004_execute.lto_priv.0+0x160>)
 80059a4:	68e1      	ldr	r1, [r4, #12]
 80059a6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80059a8:	f043 0305 	orr.w	r3, r3, #5
 80059ac:	2000      	movs	r0, #0
 80059ae:	638b      	str	r3, [r1, #56]	; 0x38
 80059b0:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80059b4:	2302      	movs	r3, #2
 80059b6:	68e6      	ldr	r6, [r4, #12]
 80059b8:	602b      	str	r3, [r5, #0]
 80059ba:	f382 8811 	msr	BASEPRI, r2
  m = currtp->epending & events;
 80059be:	6bb2      	ldr	r2, [r6, #56]	; 0x38
  if (m == (eventmask_t)0) {
 80059c0:	2a00      	cmp	r2, #0
 80059c2:	d057      	beq.n	8005a74 <rt_test_010_004_execute.lto_priv.0+0xe4>
  currtp->epending &= ~m;
 80059c4:	2300      	movs	r3, #0
 80059c6:	63b3      	str	r3, [r6, #56]	; 0x38
 80059c8:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 80059cc:	2a05      	cmp	r2, #5
 80059ce:	d149      	bne.n	8005a64 <rt_test_010_004_execute.lto_priv.0+0xd4>
 80059d0:	2630      	movs	r6, #48	; 0x30
 80059d2:	f386 8811 	msr	BASEPRI, r6
 80059d6:	68e2      	ldr	r2, [r4, #12]
  m = currtp->epending & events;
 80059d8:	6b91      	ldr	r1, [r2, #56]	; 0x38
  currtp->epending &= ~events;
 80059da:	6393      	str	r3, [r2, #56]	; 0x38
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	2900      	cmp	r1, #0
 80059e2:	d159      	bne.n	8005a98 <rt_test_010_004_execute.lto_priv.0+0x108>
  test_set_step(3);
 80059e4:	2303      	movs	r3, #3
 80059e6:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80059e8:	f7fc fa42 	bl	8001e70 <test_wait_tick>
 80059ec:	68e3      	ldr	r3, [r4, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	9300      	str	r3, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80059f2:	4607      	mov	r7, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80059f4:	4b3f      	ldr	r3, [pc, #252]	; (8005af4 <rt_test_010_004_execute.lto_priv.0+0x164>)
 80059f6:	4840      	ldr	r0, [pc, #256]	; (8005af8 <rt_test_010_004_execute.lto_priv.0+0x168>)
 80059f8:	3a01      	subs	r2, #1
 80059fa:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80059fe:	f7fe f8b7 	bl	8003b70 <chThdCreateStatic>
 8005a02:	4b3e      	ldr	r3, [pc, #248]	; (8005afc <rt_test_010_004_execute.lto_priv.0+0x16c>)
 8005a04:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8005a08:	6018      	str	r0, [r3, #0]
  test_set_step(4);
 8005a0a:	2304      	movs	r3, #4
 8005a0c:	602b      	str	r3, [r5, #0]
 8005a0e:	f386 8811 	msr	BASEPRI, r6
  m = currtp->epending & events;
 8005a12:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
  if (m == (eventmask_t)0) {
 8005a16:	2a00      	cmp	r2, #0
 8005a18:	d04c      	beq.n	8005ab4 <rt_test_010_004_execute.lto_priv.0+0x124>
  currtp->epending &= ~m;
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
 8005a20:	f381 8811 	msr	BASEPRI, r1
 8005a24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8005a2e:	1bd8      	subs	r0, r3, r7
 8005a30:	2813      	cmp	r0, #19
 8005a32:	d839      	bhi.n	8005aa8 <rt_test_010_004_execute.lto_priv.0+0x118>
 8005a34:	2a01      	cmp	r2, #1
 8005a36:	d152      	bne.n	8005ade <rt_test_010_004_execute.lto_priv.0+0x14e>
 8005a38:	2330      	movs	r3, #48	; 0x30
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	68e3      	ldr	r3, [r4, #12]
  m = currtp->epending & events;
 8005a40:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  currtp->epending &= ~events;
 8005a42:	6399      	str	r1, [r3, #56]	; 0x38
 8005a44:	f381 8811 	msr	BASEPRI, r1
 8005a48:	bb36      	cbnz	r6, 8005a98 <rt_test_010_004_execute.lto_priv.0+0x108>
 8005a4a:	4c2c      	ldr	r4, [pc, #176]	; (8005afc <rt_test_010_004_execute.lto_priv.0+0x16c>)
 8005a4c:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8005a50:	f854 0b04 	ldr.w	r0, [r4], #4
 8005a54:	b118      	cbz	r0, 8005a5e <rt_test_010_004_execute.lto_priv.0+0xce>
      chThdWait(threads[i]);
 8005a56:	f7fe ff83 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8005a5a:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005a5e:	42ac      	cmp	r4, r5
 8005a60:	d1f6      	bne.n	8005a50 <rt_test_010_004_execute.lto_priv.0+0xc0>
 8005a62:	e004      	b.n	8005a6e <rt_test_010_004_execute.lto_priv.0+0xde>
  chtest.failure_message = msg;
 8005a64:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <rt_test_010_004_execute.lto_priv.0+0x170>)
 8005a66:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8005a68:	f240 1201 	movw	r2, #257	; 0x101
 8005a6c:	80aa      	strh	r2, [r5, #4]
}
 8005a6e:	b002      	add	sp, #8
 8005a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  thread_t *otp = __instance_get_currthread(oip);
 8005a74:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8005a76:	6820      	ldr	r0, [r4, #0]
    currtp->u.ewmask = events;
 8005a78:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7c:	62b3      	str	r3, [r6, #40]	; 0x28
  otp->state = newstate;
 8005a7e:	230a      	movs	r3, #10
 8005a80:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8005a84:	6803      	ldr	r3, [r0, #0]
 8005a86:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8005a88:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8005a8a:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8005a8e:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8005a90:	f7fa fc16 	bl	80002c0 <__port_switch>
    m = currtp->epending & events;
 8005a94:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8005a96:	e795      	b.n	80059c4 <rt_test_010_004_execute.lto_priv.0+0x34>
  chtest.failure_message = msg;
 8005a98:	4b1a      	ldr	r3, [pc, #104]	; (8005b04 <rt_test_010_004_execute.lto_priv.0+0x174>)
 8005a9a:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8005a9c:	f240 1201 	movw	r2, #257	; 0x101
 8005aa0:	80aa      	strh	r2, [r5, #4]
 8005aa2:	b002      	add	sp, #8
 8005aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.failure_message = msg;
 8005aa8:	4b17      	ldr	r3, [pc, #92]	; (8005b08 <rt_test_010_004_execute.lto_priv.0+0x178>)
 8005aaa:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8005aac:	f240 1201 	movw	r2, #257	; 0x101
 8005ab0:	80aa      	strh	r2, [r5, #4]
 8005ab2:	e7dc      	b.n	8005a6e <rt_test_010_004_execute.lto_priv.0+0xde>
  thread_t *otp = __instance_get_currthread(oip);
 8005ab4:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8005ab6:	6820      	ldr	r0, [r4, #0]
    currtp->u.ewmask = events;
 8005ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8005abc:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  otp->state = newstate;
 8005ac0:	230a      	movs	r3, #10
 8005ac2:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8005ac6:	6803      	ldr	r3, [r0, #0]
 8005ac8:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8005aca:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8005ad2:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8005ad4:	f7fa fbf4 	bl	80002c0 <__port_switch>
    m = currtp->epending & events;
 8005ad8:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8005adc:	e79d      	b.n	8005a1a <rt_test_010_004_execute.lto_priv.0+0x8a>
  chtest.failure_message = msg;
 8005ade:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <rt_test_010_004_execute.lto_priv.0+0x17c>)
 8005ae0:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8005ae2:	f240 1201 	movw	r2, #257	; 0x101
 8005ae6:	80aa      	strh	r2, [r5, #4]
  return true;
 8005ae8:	e7c1      	b.n	8005a6e <rt_test_010_004_execute.lto_priv.0+0xde>
 8005aea:	bf00      	nop
 8005aec:	20000b74 	.word	0x20000b74
 8005af0:	20000a90 	.word	0x20000a90
 8005af4:	080035a1 	.word	0x080035a1
 8005af8:	20000dd8 	.word	0x20000dd8
 8005afc:	200016e4 	.word	0x200016e4
 8005b00:	08015274 	.word	0x08015274
 8005b04:	08015220 	.word	0x08015220
 8005b08:	08015108 	.word	0x08015108
 8005b0c:	0801522c 	.word	0x0801522c

08005b10 <rt_test_010_005_execute.lto_priv.0>:
static void rt_test_010_005_execute(void) {
 8005b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005b14:	4d54      	ldr	r5, [pc, #336]	; (8005c68 <rt_test_010_005_execute.lto_priv.0+0x158>)
 8005b16:	2701      	movs	r7, #1
static void rt_test_010_005_execute(void) {
 8005b18:	b082      	sub	sp, #8
  test_set_step(1);
 8005b1a:	602f      	str	r7, [r5, #0]
 8005b1c:	2230      	movs	r2, #48	; 0x30
 8005b1e:	f382 8811 	msr	BASEPRI, r2
 8005b22:	4c52      	ldr	r4, [pc, #328]	; (8005c6c <rt_test_010_005_execute.lto_priv.0+0x15c>)
 8005b24:	68e1      	ldr	r1, [r4, #12]
 8005b26:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8005b28:	f043 0305 	orr.w	r3, r3, #5
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	638b      	str	r3, [r1, #56]	; 0x38
 8005b30:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8005b34:	2302      	movs	r3, #2
 8005b36:	68e6      	ldr	r6, [r4, #12]
 8005b38:	602b      	str	r3, [r5, #0]
 8005b3a:	f382 8811 	msr	BASEPRI, r2
  if ((currtp->epending & events) != events) {
 8005b3e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8005b40:	f003 0205 	and.w	r2, r3, #5
 8005b44:	2a05      	cmp	r2, #5
 8005b46:	d00f      	beq.n	8005b68 <rt_test_010_005_execute.lto_priv.0+0x58>
  thread_t *otp = __instance_get_currthread(oip);
 8005b48:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8005b4a:	6820      	ldr	r0, [r4, #0]
    currtp->u.ewmask = events;
 8005b4c:	2305      	movs	r3, #5
 8005b4e:	62b3      	str	r3, [r6, #40]	; 0x28
  otp->state = newstate;
 8005b50:	230b      	movs	r3, #11
 8005b52:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8005b56:	6803      	ldr	r3, [r0, #0]
 8005b58:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8005b5a:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8005b5c:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8005b60:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8005b62:	f7fa fbad 	bl	80002c0 <__port_switch>
  currtp->epending &= ~events;
 8005b66:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8005b68:	f023 0305 	bic.w	r3, r3, #5
 8005b6c:	63b3      	str	r3, [r6, #56]	; 0x38
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	2630      	movs	r6, #48	; 0x30
 8005b76:	f386 8811 	msr	BASEPRI, r6
 8005b7a:	68e2      	ldr	r2, [r4, #12]
  m = currtp->epending & events;
 8005b7c:	6b91      	ldr	r1, [r2, #56]	; 0x38
  currtp->epending &= ~events;
 8005b7e:	6393      	str	r3, [r2, #56]	; 0x38
 8005b80:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8005b84:	2900      	cmp	r1, #0
 8005b86:	d167      	bne.n	8005c58 <rt_test_010_005_execute.lto_priv.0+0x148>
  test_set_step(3);
 8005b88:	2303      	movs	r3, #3
 8005b8a:	602b      	str	r3, [r5, #0]
 8005b8c:	f386 8811 	msr	BASEPRI, r6
 8005b90:	68e2      	ldr	r2, [r4, #12]
 8005b92:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005b94:	f043 0304 	orr.w	r3, r3, #4
 8005b98:	6393      	str	r3, [r2, #56]	; 0x38
 8005b9a:	f381 8811 	msr	BASEPRI, r1
  test_set_step(4);
 8005b9e:	2304      	movs	r3, #4
 8005ba0:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005ba2:	f7fc f965 	bl	8001e70 <test_wait_tick>
 8005ba6:	68e3      	ldr	r3, [r4, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	9300      	str	r3, [sp, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8005bac:	4607      	mov	r7, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005bae:	4b30      	ldr	r3, [pc, #192]	; (8005c70 <rt_test_010_005_execute.lto_priv.0+0x160>)
 8005bb0:	4830      	ldr	r0, [pc, #192]	; (8005c74 <rt_test_010_005_execute.lto_priv.0+0x164>)
 8005bb2:	3a01      	subs	r2, #1
 8005bb4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005bb8:	f7fd ffda 	bl	8003b70 <chThdCreateStatic>
 8005bbc:	4b2e      	ldr	r3, [pc, #184]	; (8005c78 <rt_test_010_005_execute.lto_priv.0+0x168>)
 8005bbe:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8005bc2:	6018      	str	r0, [r3, #0]
  test_set_step(5);
 8005bc4:	2205      	movs	r2, #5
 8005bc6:	602a      	str	r2, [r5, #0]
 8005bc8:	f386 8811 	msr	BASEPRI, r6
  if ((currtp->epending & events) != events) {
 8005bcc:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8005bd0:	ea03 0102 	and.w	r1, r3, r2
 8005bd4:	4291      	cmp	r1, r2
 8005bd6:	d124      	bne.n	8005c22 <rt_test_010_005_execute.lto_priv.0+0x112>
  currtp->epending &= ~events;
 8005bd8:	f023 0305 	bic.w	r3, r3, #5
 8005bdc:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
 8005be0:	2200      	movs	r2, #0
 8005be2:	f382 8811 	msr	BASEPRI, r2
 8005be6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8005bf0:	1bdb      	subs	r3, r3, r7
 8005bf2:	2b13      	cmp	r3, #19
 8005bf4:	d828      	bhi.n	8005c48 <rt_test_010_005_execute.lto_priv.0+0x138>
 8005bf6:	2330      	movs	r3, #48	; 0x30
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	68e3      	ldr	r3, [r4, #12]
  m = currtp->epending & events;
 8005bfe:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  currtp->epending &= ~events;
 8005c00:	639a      	str	r2, [r3, #56]	; 0x38
 8005c02:	f382 8811 	msr	BASEPRI, r2
 8005c06:	bb3e      	cbnz	r6, 8005c58 <rt_test_010_005_execute.lto_priv.0+0x148>
 8005c08:	4c1b      	ldr	r4, [pc, #108]	; (8005c78 <rt_test_010_005_execute.lto_priv.0+0x168>)
 8005c0a:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8005c0e:	f854 0b04 	ldr.w	r0, [r4], #4
 8005c12:	b118      	cbz	r0, 8005c1c <rt_test_010_005_execute.lto_priv.0+0x10c>
      chThdWait(threads[i]);
 8005c14:	f7fe fea4 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8005c18:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005c1c:	42a5      	cmp	r5, r4
 8005c1e:	d1f6      	bne.n	8005c0e <rt_test_010_005_execute.lto_priv.0+0xfe>
 8005c20:	e017      	b.n	8005c52 <rt_test_010_005_execute.lto_priv.0+0x142>
  thread_t *otp = __instance_get_currthread(oip);
 8005c22:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8005c24:	6820      	ldr	r0, [r4, #0]
    currtp->u.ewmask = events;
 8005c26:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
  otp->state = newstate;
 8005c2a:	230b      	movs	r3, #11
 8005c2c:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8005c30:	6803      	ldr	r3, [r0, #0]
 8005c32:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8005c34:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8005c3c:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8005c3e:	f7fa fb3f 	bl	80002c0 <__port_switch>
  currtp->epending &= ~events;
 8005c42:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
}
 8005c46:	e7c7      	b.n	8005bd8 <rt_test_010_005_execute.lto_priv.0+0xc8>
  chtest.failure_message = msg;
 8005c48:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <rt_test_010_005_execute.lto_priv.0+0x16c>)
 8005c4a:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8005c4c:	f240 1201 	movw	r2, #257	; 0x101
 8005c50:	80aa      	strh	r2, [r5, #4]
}
 8005c52:	b002      	add	sp, #8
 8005c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.failure_message = msg;
 8005c58:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <rt_test_010_005_execute.lto_priv.0+0x170>)
 8005c5a:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8005c5c:	f240 1201 	movw	r2, #257	; 0x101
 8005c60:	80aa      	strh	r2, [r5, #4]
 8005c62:	b002      	add	sp, #8
 8005c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c68:	20000b74 	.word	0x20000b74
 8005c6c:	20000a90 	.word	0x20000a90
 8005c70:	080035a1 	.word	0x080035a1
 8005c74:	20000dd8 	.word	0x20000dd8
 8005c78:	200016e4 	.word	0x200016e4
 8005c7c:	08015108 	.word	0x08015108
 8005c80:	08015220 	.word	0x08015220
	...

08005c90 <rt_test_010_007_execute.lto_priv.0>:

static void rt_test_010_007_execute(void) {
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [10.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8005c94:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005e54 <rt_test_010_007_execute.lto_priv.0+0x1c4>
 8005c98:	f04f 0901 	mov.w	r9, #1
static void rt_test_010_007_execute(void) {
 8005c9c:	b08f      	sub	sp, #60	; 0x3c
  test_set_step(1);
 8005c9e:	f8c8 9000 	str.w	r9, [r8]
 8005ca2:	2530      	movs	r5, #48	; 0x30
 8005ca4:	f385 8811 	msr	BASEPRI, r5
  elp->next     = esp->next;
 8005ca8:	4e6b      	ldr	r6, [pc, #428]	; (8005e58 <rt_test_010_007_execute.lto_priv.0+0x1c8>)
 8005caa:	4c6c      	ldr	r4, [pc, #432]	; (8005e5c <rt_test_010_007_execute.lto_priv.0+0x1cc>)
 8005cac:	6832      	ldr	r2, [r6, #0]
 8005cae:	68e3      	ldr	r3, [r4, #12]
  elp->listener = currtp;
 8005cb0:	930a      	str	r3, [sp, #40]	; 0x28
  esp->next     = elp;
 8005cb2:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
  elp->flags    = (eventflags_t)0;
 8005cb6:	2300      	movs	r3, #0
  elp->next     = esp->next;
 8005cb8:	9209      	str	r2, [sp, #36]	; 0x24
  elp->wflags   = wflags;
 8005cba:	f04f 32ff 	mov.w	r2, #4294967295
  elp->events   = events;
 8005cbe:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  elp->flags    = (eventflags_t)0;
 8005cc2:	930c      	str	r3, [sp, #48]	; 0x30
  esp->next     = elp;
 8005cc4:	f8c6 b000 	str.w	fp, [r6]
  elp->wflags   = wflags;
 8005cc8:	920d      	str	r2, [sp, #52]	; 0x34
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f385 8811 	msr	BASEPRI, r5
  elp->next     = esp->next;
 8005cd2:	4f63      	ldr	r7, [pc, #396]	; (8005e60 <rt_test_010_007_execute.lto_priv.0+0x1d0>)
  elp->flags    = (eventflags_t)0;
 8005cd4:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8005cd8:	68e2      	ldr	r2, [r4, #12]
  elp->listener = currtp;
 8005cda:	9205      	str	r2, [sp, #20]
  elp->next     = esp->next;
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	9204      	str	r2, [sp, #16]
  esp->next     = elp;
 8005ce0:	f10d 0a10 	add.w	sl, sp, #16
  elp->events   = events;
 8005ce4:	2204      	movs	r2, #4
  esp->next     = elp;
 8005ce6:	f8c7 a000 	str.w	sl, [r7]
  elp->events   = events;
 8005cea:	9206      	str	r2, [sp, #24]
 8005cec:	f383 8811 	msr	BASEPRI, r3
  test_end_step(1);

  /* [10.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	f8c8 2000 	str.w	r2, [r8]
 8005cf6:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8005cfa:	2008      	movs	r0, #8
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	f7fc fe0f 	bl	8002920 <chSchGoSleepTimeoutS>
 8005d02:	2300      	movs	r3, #0
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f385 8811 	msr	BASEPRI, r5
 8005d0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d12:	9202      	str	r2, [sp, #8]
 8005d14:	f383 8811 	msr	BASEPRI, r3
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005d18:	68e3      	ldr	r3, [r4, #12]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005d1a:	4852      	ldr	r0, [pc, #328]	; (8005e64 <rt_test_010_007_execute.lto_priv.0+0x1d4>)
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	4b52      	ldr	r3, [pc, #328]	; (8005e68 <rt_test_010_007_execute.lto_priv.0+0x1d8>)
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	3a01      	subs	r2, #1
 8005d24:	4b51      	ldr	r3, [pc, #324]	; (8005e6c <rt_test_010_007_execute.lto_priv.0+0x1dc>)
 8005d26:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8005d2a:	f7fd ff21 	bl	8003b70 <chThdCreateStatic>
 8005d2e:	4b50      	ldr	r3, [pc, #320]	; (8005e70 <rt_test_010_007_execute.lto_priv.0+0x1e0>)
  return __sch_get_currthread();
 8005d30:	68e2      	ldr	r2, [r4, #12]
 8005d32:	6018      	str	r0, [r3, #0]
  test_end_step(2);

  /* [10.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 8005d34:	2303      	movs	r3, #3
 8005d36:	f8c8 3000 	str.w	r3, [r8]
 8005d3a:	f385 8811 	msr	BASEPRI, r5
  if ((currtp->epending & events) != events) {
 8005d3e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005d40:	f003 0105 	and.w	r1, r3, #5
 8005d44:	2905      	cmp	r1, #5
 8005d46:	d011      	beq.n	8005d6c <rt_test_010_007_execute.lto_priv.0+0xdc>
  thread_t *otp = __instance_get_currthread(oip);
 8005d48:	68e1      	ldr	r1, [r4, #12]
  ch_priority_queue_t *p = pqp->next;
 8005d4a:	6820      	ldr	r0, [r4, #0]
    currtp->u.ewmask = events;
 8005d4c:	9203      	str	r2, [sp, #12]
 8005d4e:	2305      	movs	r3, #5
 8005d50:	6293      	str	r3, [r2, #40]	; 0x28
  otp->state = newstate;
 8005d52:	230b      	movs	r3, #11
 8005d54:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8005d58:	6803      	ldr	r3, [r0, #0]
 8005d5a:	6023      	str	r3, [r4, #0]
  pqp->next->prev = pqp;
 8005d5c:	605c      	str	r4, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8005d5e:	f880 9024 	strb.w	r9, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8005d62:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 8005d64:	f7fa faac 	bl	80002c0 <__port_switch>
  currtp->epending &= ~events;
 8005d68:	9a03      	ldr	r2, [sp, #12]
 8005d6a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005d6c:	f023 0305 	bic.w	r3, r3, #5
 8005d70:	6393      	str	r3, [r2, #56]	; 0x38
 8005d72:	2200      	movs	r2, #0
 8005d74:	f382 8811 	msr	BASEPRI, r2
 8005d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d7c:	9902      	ldr	r1, [sp, #8]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8005d84:	1a5b      	subs	r3, r3, r1
  if (!condition) {
 8005d86:	2b13      	cmp	r3, #19
 8005d88:	d844      	bhi.n	8005e14 <rt_test_010_007_execute.lto_priv.0+0x184>
 8005d8a:	2330      	movs	r3, #48	; 0x30
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	68e3      	ldr	r3, [r4, #12]
  m = currtp->epending & events;
 8005d92:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  currtp->epending &= ~events;
 8005d94:	639a      	str	r2, [r3, #56]	; 0x38
 8005d96:	f382 8811 	msr	BASEPRI, r2
 8005d9a:	2d00      	cmp	r5, #0
 8005d9c:	d144      	bne.n	8005e28 <rt_test_010_007_execute.lto_priv.0+0x198>
 8005d9e:	4c34      	ldr	r4, [pc, #208]	; (8005e70 <rt_test_010_007_execute.lto_priv.0+0x1e0>)
 8005da0:	f104 0914 	add.w	r9, r4, #20
    if (threads[i] != NULL) {
 8005da4:	f854 0b04 	ldr.w	r0, [r4], #4
 8005da8:	b118      	cbz	r0, 8005db2 <rt_test_010_007_execute.lto_priv.0+0x122>
      chThdWait(threads[i]);
 8005daa:	f7fe fdd9 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8005dae:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005db2:	454c      	cmp	r4, r9
 8005db4:	d1f6      	bne.n	8005da4 <rt_test_010_007_execute.lto_priv.0+0x114>
    test_wait_threads();
  }
  test_end_step(3);

  /* [10.7.4] Unregistering from the Event Sources.*/
  test_set_step(4);
 8005db6:	2304      	movs	r3, #4
 8005db8:	f8c8 3000 	str.w	r3, [r8]
 8005dbc:	2330      	movs	r3, #48	; 0x30
 8005dbe:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8005dc2:	4b25      	ldr	r3, [pc, #148]	; (8005e58 <rt_test_010_007_execute.lto_priv.0+0x1c8>)
}
 8005dc4:	e001      	b.n	8005dca <rt_test_010_007_execute.lto_priv.0+0x13a>
    if (p->next == elp) {
 8005dc6:	455b      	cmp	r3, fp
 8005dc8:	d038      	beq.n	8005e3c <rt_test_010_007_execute.lto_priv.0+0x1ac>
  while (p->next != (event_listener_t *)esp) {
 8005dca:	461a      	mov	r2, r3
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	42b3      	cmp	r3, r6
 8005dd0:	d1f9      	bne.n	8005dc6 <rt_test_010_007_execute.lto_priv.0+0x136>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	2330      	movs	r3, #48	; 0x30
 8005dda:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8005dde:	4b20      	ldr	r3, [pc, #128]	; (8005e60 <rt_test_010_007_execute.lto_priv.0+0x1d0>)
 8005de0:	e001      	b.n	8005de6 <rt_test_010_007_execute.lto_priv.0+0x156>
    if (p->next == elp) {
 8005de2:	4553      	cmp	r3, sl
 8005de4:	d02d      	beq.n	8005e42 <rt_test_010_007_execute.lto_priv.0+0x1b2>
  while (p->next != (event_listener_t *)esp) {
 8005de6:	461a      	mov	r2, r3
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	42bb      	cmp	r3, r7
 8005dec:	d1f9      	bne.n	8005de2 <rt_test_010_007_execute.lto_priv.0+0x152>
 8005dee:	2300      	movs	r3, #0
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	6833      	ldr	r3, [r6, #0]
 8005df6:	42b3      	cmp	r3, r6
 8005df8:	d102      	bne.n	8005e00 <rt_test_010_007_execute.lto_priv.0+0x170>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	42bb      	cmp	r3, r7
 8005dfe:	d010      	beq.n	8005e22 <rt_test_010_007_execute.lto_priv.0+0x192>
  chtest.failure_message = msg;
 8005e00:	4b1c      	ldr	r3, [pc, #112]	; (8005e74 <rt_test_010_007_execute.lto_priv.0+0x1e4>)
 8005e02:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8005e06:	f240 1201 	movw	r2, #257	; 0x101
 8005e0a:	f8a8 2004 	strh.w	r2, [r8, #4]
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
  test_end_step(4);
}
 8005e0e:	b00f      	add	sp, #60	; 0x3c
 8005e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chtest.failure_message = msg;
 8005e14:	4b18      	ldr	r3, [pc, #96]	; (8005e78 <rt_test_010_007_execute.lto_priv.0+0x1e8>)
 8005e16:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8005e1a:	f240 1201 	movw	r2, #257	; 0x101
 8005e1e:	f8a8 2004 	strh.w	r2, [r8, #4]
 8005e22:	b00f      	add	sp, #60	; 0x3c
 8005e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chtest.failure_message = msg;
 8005e28:	4b14      	ldr	r3, [pc, #80]	; (8005e7c <rt_test_010_007_execute.lto_priv.0+0x1ec>)
 8005e2a:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8005e2e:	f240 1201 	movw	r2, #257	; 0x101
 8005e32:	f8a8 2004 	strh.w	r2, [r8, #4]
 8005e36:	b00f      	add	sp, #60	; 0x3c
 8005e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p->next = elp->next;
 8005e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3e:	6013      	str	r3, [r2, #0]
      break;
 8005e40:	e7c7      	b.n	8005dd2 <rt_test_010_007_execute.lto_priv.0+0x142>
      p->next = elp->next;
 8005e42:	9b04      	ldr	r3, [sp, #16]
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	2300      	movs	r3, #0
 8005e48:	f383 8811 	msr	BASEPRI, r3
  if (!condition) {
 8005e4c:	6833      	ldr	r3, [r6, #0]
 8005e4e:	42b3      	cmp	r3, r6
 8005e50:	d0d3      	beq.n	8005dfa <rt_test_010_007_execute.lto_priv.0+0x16a>
 8005e52:	e7d5      	b.n	8005e00 <rt_test_010_007_execute.lto_priv.0+0x170>
 8005e54:	20000b74 	.word	0x20000b74
 8005e58:	20000808 	.word	0x20000808
 8005e5c:	20000a90 	.word	0x20000a90
 8005e60:	2000080c 	.word	0x2000080c
 8005e64:	20000dd8 	.word	0x20000dd8
 8005e68:	080151c4 	.word	0x080151c4
 8005e6c:	08003621 	.word	0x08003621
 8005e70:	200016e4 	.word	0x200016e4
 8005e74:	08014f64 	.word	0x08014f64
 8005e78:	08015108 	.word	0x08015108
 8005e7c:	08015220 	.word	0x08015220

08005e80 <rt_test_011_001_execute.lto_priv.0>:
 8005e80:	4b66      	ldr	r3, [pc, #408]	; (800601c <rt_test_011_001_execute.lto_priv.0+0x19c>)
static void rt_test_011_001_execute(void) {
 8005e82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005e86:	68da      	ldr	r2, [r3, #12]
  test_set_step(2);
 8005e88:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8006020 <rt_test_011_001_execute.lto_priv.0+0x1a0>
 8005e8c:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8005e90:	2302      	movs	r3, #2
 8005e92:	f8c8 3000 	str.w	r3, [r8]
 8005e96:	2330      	movs	r3, #48	; 0x30
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8006024 <rt_test_011_001_execute.lto_priv.0+0x1a4>
 8005ea0:	f109 000c 	add.w	r0, r9, #12
 8005ea4:	f7fe f8c4 	bl	8004030 <chMtxLockS>
 8005ea8:	2500      	movs	r5, #0
 8005eaa:	f385 8811 	msr	BASEPRI, r5
  while (H_NEXT(qp) != NULL) {
 8005eae:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8005eb2:	2c00      	cmp	r4, #0
 8005eb4:	f000 808a 	beq.w	8005fcc <rt_test_011_001_execute.lto_priv.0+0x14c>
  tpages = 0U;
 8005eb8:	462f      	mov	r7, r5
  n = 0U;
 8005eba:	462e      	mov	r6, r5
  while (H_NEXT(qp) != NULL) {
 8005ebc:	e9d4 4300 	ldrd	r4, r3, [r4]
 8005ec0:	429d      	cmp	r5, r3
    n++;
 8005ec2:	f106 0601 	add.w	r6, r6, #1
    tpages += pages;
 8005ec6:	441f      	add	r7, r3
 8005ec8:	bf38      	it	cc
 8005eca:	461d      	movcc	r5, r3
  while (H_NEXT(qp) != NULL) {
 8005ecc:	2c00      	cmp	r4, #0
 8005ece:	d1f5      	bne.n	8005ebc <rt_test_011_001_execute.lto_priv.0+0x3c>
  H_UNLOCK(heapp);
 8005ed0:	4855      	ldr	r0, [pc, #340]	; (8006028 <rt_test_011_001_execute.lto_priv.0+0x1a8>)
 8005ed2:	f7fe f94d 	bl	8004170 <chMtxUnlock>
 8005ed6:	2e01      	cmp	r6, #1
 8005ed8:	d17c      	bne.n	8005fd4 <rt_test_011_001_execute.lto_priv.0+0x154>
  test_set_step(3);
 8005eda:	2203      	movs	r2, #3
 8005edc:	f8c8 2000 	str.w	r2, [r8]
    threads[0] = chThdCreateFromHeap(&heap1,
 8005ee0:	4b52      	ldr	r3, [pc, #328]	; (800602c <rt_test_011_001_execute.lto_priv.0+0x1ac>)
 8005ee2:	4953      	ldr	r1, [pc, #332]	; (8006030 <rt_test_011_001_execute.lto_priv.0+0x1b0>)
 8005ee4:	4e53      	ldr	r6, [pc, #332]	; (8006034 <rt_test_011_001_execute.lto_priv.0+0x1b4>)
 8005ee6:	f10a 32ff 	add.w	r2, sl, #4294967295
 8005eea:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 8005eee:	f00d f9b7 	bl	8013260 <chThdCreateFromHeap.constprop.0>
 8005ef2:	6030      	str	r0, [r6, #0]
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d060      	beq.n	8005fba <rt_test_011_001_execute.lto_priv.0+0x13a>
  test_set_step(4);
 8005ef8:	2204      	movs	r2, #4
 8005efa:	f8c8 2000 	str.w	r2, [r8]
    threads[1] = chThdCreateFromHeap(&heap1,
 8005efe:	4b4e      	ldr	r3, [pc, #312]	; (8006038 <rt_test_011_001_execute.lto_priv.0+0x1b8>)
 8005f00:	494e      	ldr	r1, [pc, #312]	; (800603c <rt_test_011_001_execute.lto_priv.0+0x1bc>)
 8005f02:	f1aa 0202 	sub.w	r2, sl, #2
 8005f06:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 8005f0a:	f00d f9a9 	bl	8013260 <chThdCreateFromHeap.constprop.0>
 8005f0e:	6070      	str	r0, [r6, #4]
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d052      	beq.n	8005fba <rt_test_011_001_execute.lto_priv.0+0x13a>
  test_set_step(5);
 8005f14:	2005      	movs	r0, #5
 8005f16:	f8c8 0000 	str.w	r0, [r8]
    threads[2] = chThdCreateFromHeap(&heap1,
 8005f1a:	4b49      	ldr	r3, [pc, #292]	; (8006040 <rt_test_011_001_execute.lto_priv.0+0x1c0>)
 8005f1c:	4949      	ldr	r1, [pc, #292]	; (8006044 <rt_test_011_001_execute.lto_priv.0+0x1c4>)
 8005f1e:	f1aa 0203 	sub.w	r2, sl, #3
 8005f22:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005f26:	f00d f99b 	bl	8013260 <chThdCreateFromHeap.constprop.0>
 8005f2a:	60b0      	str	r0, [r6, #8]
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d15a      	bne.n	8005fe6 <rt_test_011_001_execute.lto_priv.0+0x166>
  test_set_step(6);
 8005f30:	2306      	movs	r3, #6
 8005f32:	f8c8 3000 	str.w	r3, [r8]
 8005f36:	f106 0a14 	add.w	sl, r6, #20
    if (threads[i] != NULL) {
 8005f3a:	f856 0b04 	ldr.w	r0, [r6], #4
 8005f3e:	b118      	cbz	r0, 8005f48 <rt_test_011_001_execute.lto_priv.0+0xc8>
      chThdWait(threads[i]);
 8005f40:	f7fe fd0e 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8005f44:	f846 4c04 	str.w	r4, [r6, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8005f48:	4556      	cmp	r6, sl
 8005f4a:	d1f6      	bne.n	8005f3a <rt_test_011_001_execute.lto_priv.0+0xba>
    test_assert_sequence("AB", "invalid sequence");
 8005f4c:	493e      	ldr	r1, [pc, #248]	; (8006048 <rt_test_011_001_execute.lto_priv.0+0x1c8>)
 8005f4e:	483f      	ldr	r0, [pc, #252]	; (800604c <rt_test_011_001_execute.lto_priv.0+0x1cc>)
 8005f50:	f7fa fade 	bl	8000510 <__test_assert_sequence>
 8005f54:	4604      	mov	r4, r0
 8005f56:	bbb8      	cbnz	r0, 8005fc8 <rt_test_011_001_execute.lto_priv.0+0x148>
  test_set_step(7);
 8005f58:	2307      	movs	r3, #7
 8005f5a:	f8c8 3000 	str.w	r3, [r8]
 8005f5e:	2330      	movs	r3, #48	; 0x30
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	4830      	ldr	r0, [pc, #192]	; (8006028 <rt_test_011_001_execute.lto_priv.0+0x1a8>)
 8005f66:	f7fe f863 	bl	8004030 <chMtxLockS>
 8005f6a:	f384 8811 	msr	BASEPRI, r4
  while (H_NEXT(qp) != NULL) {
 8005f6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d03f      	beq.n	8005ff6 <rt_test_011_001_execute.lto_priv.0+0x176>
  tpages = 0U;
 8005f76:	4626      	mov	r6, r4
  n = 0U;
 8005f78:	46a1      	mov	r9, r4
  while (H_NEXT(qp) != NULL) {
 8005f7a:	e9d3 3200 	ldrd	r3, r2, [r3]
 8005f7e:	4294      	cmp	r4, r2
    n++;
 8005f80:	f109 0901 	add.w	r9, r9, #1
    tpages += pages;
 8005f84:	4416      	add	r6, r2
 8005f86:	bf38      	it	cc
 8005f88:	4614      	movcc	r4, r2
  while (H_NEXT(qp) != NULL) {
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1f5      	bne.n	8005f7a <rt_test_011_001_execute.lto_priv.0+0xfa>
  H_UNLOCK(heapp);
 8005f8e:	4826      	ldr	r0, [pc, #152]	; (8006028 <rt_test_011_001_execute.lto_priv.0+0x1a8>)
 8005f90:	f7fe f8ee 	bl	8004170 <chMtxUnlock>
 8005f94:	f1b9 0f01 	cmp.w	r9, #1
 8005f98:	d130      	bne.n	8005ffc <rt_test_011_001_execute.lto_priv.0+0x17c>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8005f9a:	00f6      	lsls	r6, r6, #3
 8005f9c:	ebb6 0fc7 	cmp.w	r6, r7, lsl #3
 8005fa0:	d134      	bne.n	800600c <rt_test_011_001_execute.lto_priv.0+0x18c>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8005fa2:	00e4      	lsls	r4, r4, #3
 8005fa4:	ebb4 0fc5 	cmp.w	r4, r5, lsl #3
 8005fa8:	d00e      	beq.n	8005fc8 <rt_test_011_001_execute.lto_priv.0+0x148>
  chtest.failure_message = msg;
 8005faa:	4b29      	ldr	r3, [pc, #164]	; (8006050 <rt_test_011_001_execute.lto_priv.0+0x1d0>)
 8005fac:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8005fb0:	f240 1201 	movw	r2, #257	; 0x101
 8005fb4:	f8a8 2004 	strh.w	r2, [r8, #4]
    return __test_fail(msg);
 8005fb8:	e006      	b.n	8005fc8 <rt_test_011_001_execute.lto_priv.0+0x148>
  chtest.failure_message = msg;
 8005fba:	4b26      	ldr	r3, [pc, #152]	; (8006054 <rt_test_011_001_execute.lto_priv.0+0x1d4>)
 8005fbc:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8005fc0:	f240 1201 	movw	r2, #257	; 0x101
 8005fc4:	f8a8 2004 	strh.w	r2, [r8, #4]
}
 8005fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  H_UNLOCK(heapp);
 8005fcc:	f109 000c 	add.w	r0, r9, #12
 8005fd0:	f7fe f8ce 	bl	8004170 <chMtxUnlock>
  chtest.failure_message = msg;
 8005fd4:	4b20      	ldr	r3, [pc, #128]	; (8006058 <rt_test_011_001_execute.lto_priv.0+0x1d8>)
 8005fd6:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8005fda:	f240 1201 	movw	r2, #257	; 0x101
 8005fde:	f8a8 2004 	strh.w	r2, [r8, #4]
 8005fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.failure_message = msg;
 8005fe6:	4b1d      	ldr	r3, [pc, #116]	; (800605c <rt_test_011_001_execute.lto_priv.0+0x1dc>)
 8005fe8:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8005fec:	f240 1201 	movw	r2, #257	; 0x101
 8005ff0:	f8a8 2004 	strh.w	r2, [r8, #4]
  return true;
 8005ff4:	e7e8      	b.n	8005fc8 <rt_test_011_001_execute.lto_priv.0+0x148>
 8005ff6:	480c      	ldr	r0, [pc, #48]	; (8006028 <rt_test_011_001_execute.lto_priv.0+0x1a8>)
 8005ff8:	f7fe f8ba 	bl	8004170 <chMtxUnlock>
  chtest.failure_message = msg;
 8005ffc:	4b18      	ldr	r3, [pc, #96]	; (8006060 <rt_test_011_001_execute.lto_priv.0+0x1e0>)
 8005ffe:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8006002:	f240 1201 	movw	r2, #257	; 0x101
 8006006:	f8a8 2004 	strh.w	r2, [r8, #4]
  return true;
 800600a:	e7dd      	b.n	8005fc8 <rt_test_011_001_execute.lto_priv.0+0x148>
  chtest.failure_message = msg;
 800600c:	4b15      	ldr	r3, [pc, #84]	; (8006064 <rt_test_011_001_execute.lto_priv.0+0x1e4>)
 800600e:	f8c8 3008 	str.w	r3, [r8, #8]
  chtest.global_fail     = true;
 8006012:	f240 1201 	movw	r2, #257	; 0x101
 8006016:	f8a8 2004 	strh.w	r2, [r8, #4]
  return true;
 800601a:	e7d5      	b.n	8005fc8 <rt_test_011_001_execute.lto_priv.0+0x148>
 800601c:	20000a90 	.word	0x20000a90
 8006020:	20000b74 	.word	0x20000b74
 8006024:	20000bfc 	.word	0x20000bfc
 8006028:	20000c08 	.word	0x20000c08
 800602c:	080151c4 	.word	0x080151c4
 8006030:	0801528c 	.word	0x0801528c
 8006034:	200016e4 	.word	0x200016e4
 8006038:	080151c8 	.word	0x080151c8
 800603c:	080152bc 	.word	0x080152bc
 8006040:	08015244 	.word	0x08015244
 8006044:	080152c4 	.word	0x080152c4
 8006048:	08014f74 	.word	0x08014f74
 800604c:	080152e8 	.word	0x080152e8
 8006050:	08015320 	.word	0x08015320
 8006054:	080152a4 	.word	0x080152a4
 8006058:	08015294 	.word	0x08015294
 800605c:	080152cc 	.word	0x080152cc
 8006060:	080152ec 	.word	0x080152ec
 8006064:	08015304 	.word	0x08015304
	...

08006070 <rt_test_011_002_execute.lto_priv.0>:

static void rt_test_011_002_execute(void) {
 8006070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006074:	4b51      	ldr	r3, [pc, #324]	; (80061bc <rt_test_011_002_execute.lto_priv.0+0x14c>)
  unsigned i;
  tprio_t prio;

  /* [11.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8006076:	4f52      	ldr	r7, [pc, #328]	; (80061c0 <rt_test_011_002_execute.lto_priv.0+0x150>)
 8006078:	4a52      	ldr	r2, [pc, #328]	; (80061c4 <rt_test_011_002_execute.lto_priv.0+0x154>)
 800607a:	4d53      	ldr	r5, [pc, #332]	; (80061c8 <rt_test_011_002_execute.lto_priv.0+0x158>)
 800607c:	2101      	movs	r1, #1
 800607e:	6039      	str	r1, [r7, #0]
  {
    for (i = 0; i < 4; i++)
 8006080:	f103 060c 	add.w	r6, r3, #12
 8006084:	2430      	movs	r4, #48	; 0x30
 8006086:	2000      	movs	r0, #0
 8006088:	f384 8811 	msr	BASEPRI, r4
  php->next = mp->next;
 800608c:	6829      	ldr	r1, [r5, #0]
 800608e:	6011      	str	r1, [r2, #0]
  mp->next = php;
 8006090:	602a      	str	r2, [r5, #0]
 8006092:	f380 8811 	msr	BASEPRI, r0
 8006096:	42b3      	cmp	r3, r6
 8006098:	d002      	beq.n	80060a0 <rt_test_011_002_execute.lto_priv.0+0x30>
      chPoolFree(&mp1, wa[i]);
 800609a:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800609e:	e7f3      	b.n	8006088 <rt_test_011_002_execute.lto_priv.0+0x18>
  return __sch_get_currthread();
 80060a0:	4b4a      	ldr	r3, [pc, #296]	; (80061cc <rt_test_011_002_execute.lto_priv.0+0x15c>)
  test_end_step(2);

  /* [11.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80060a2:	4a4b      	ldr	r2, [pc, #300]	; (80061d0 <rt_test_011_002_execute.lto_priv.0+0x160>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 80060a4:	68d9      	ldr	r1, [r3, #12]
 80060a6:	484b      	ldr	r0, [pc, #300]	; (80061d4 <rt_test_011_002_execute.lto_priv.0+0x164>)
 80060a8:	688e      	ldr	r6, [r1, #8]
 80060aa:	4c4b      	ldr	r4, [pc, #300]	; (80061d8 <rt_test_011_002_execute.lto_priv.0+0x168>)
  test_set_step(3);
 80060ac:	2303      	movs	r3, #3
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80060ae:	1e71      	subs	r1, r6, #1
  test_set_step(3);
 80060b0:	603b      	str	r3, [r7, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80060b2:	f00d f88d 	bl	80131d0 <chThdCreateFromMemoryPool.constprop.0>
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80060b6:	1eb1      	subs	r1, r6, #2
 80060b8:	4a48      	ldr	r2, [pc, #288]	; (80061dc <rt_test_011_002_execute.lto_priv.0+0x16c>)
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80060ba:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80060bc:	4848      	ldr	r0, [pc, #288]	; (80061e0 <rt_test_011_002_execute.lto_priv.0+0x170>)
 80060be:	f00d f887 	bl	80131d0 <chThdCreateFromMemoryPool.constprop.0>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80060c2:	1ef1      	subs	r1, r6, #3
 80060c4:	4a47      	ldr	r2, [pc, #284]	; (80061e4 <rt_test_011_002_execute.lto_priv.0+0x174>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80060c6:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80060c8:	4847      	ldr	r0, [pc, #284]	; (80061e8 <rt_test_011_002_execute.lto_priv.0+0x178>)
 80060ca:	f00d f881 	bl	80131d0 <chThdCreateFromMemoryPool.constprop.0>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 80060ce:	1f31      	subs	r1, r6, #4
 80060d0:	4a46      	ldr	r2, [pc, #280]	; (80061ec <rt_test_011_002_execute.lto_priv.0+0x17c>)
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80060d2:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 80060d4:	4846      	ldr	r0, [pc, #280]	; (80061f0 <rt_test_011_002_execute.lto_priv.0+0x180>)
 80060d6:	f00d f87b 	bl	80131d0 <chThdCreateFromMemoryPool.constprop.0>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 80060da:	1f71      	subs	r1, r6, #5
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 80060dc:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 80060de:	4a45      	ldr	r2, [pc, #276]	; (80061f4 <rt_test_011_002_execute.lto_priv.0+0x184>)
 80060e0:	4845      	ldr	r0, [pc, #276]	; (80061f8 <rt_test_011_002_execute.lto_priv.0+0x188>)
 80060e2:	f00d f875 	bl	80131d0 <chThdCreateFromMemoryPool.constprop.0>
 80060e6:	4606      	mov	r6, r0
 80060e8:	6120      	str	r0, [r4, #16]
  test_end_step(3);

  /* [11.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 80060ea:	6820      	ldr	r0, [r4, #0]
  test_set_step(4);
 80060ec:	2304      	movs	r3, #4
 80060ee:	603b      	str	r3, [r7, #0]
    test_assert((threads[0] != NULL) &&
 80060f0:	b1a0      	cbz	r0, 800611c <rt_test_011_002_execute.lto_priv.0+0xac>
 80060f2:	6863      	ldr	r3, [r4, #4]
 80060f4:	b193      	cbz	r3, 800611c <rt_test_011_002_execute.lto_priv.0+0xac>
 80060f6:	68a3      	ldr	r3, [r4, #8]
 80060f8:	b183      	cbz	r3, 800611c <rt_test_011_002_execute.lto_priv.0+0xac>
 80060fa:	68e3      	ldr	r3, [r4, #12]
 80060fc:	b173      	cbz	r3, 800611c <rt_test_011_002_execute.lto_priv.0+0xac>
  if (!condition) {
 80060fe:	2e00      	cmp	r6, #0
 8006100:	d145      	bne.n	800618e <rt_test_011_002_execute.lto_priv.0+0x11e>
  }
  test_end_step(4);

  /* [11.2.5] Letting them run, free the memory then checking the
     execution sequence.*/
  test_set_step(5);
 8006102:	2305      	movs	r3, #5
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	f104 0810 	add.w	r8, r4, #16
    if (threads[i] != NULL) {
 800610a:	b110      	cbz	r0, 8006112 <rt_test_011_002_execute.lto_priv.0+0xa2>
      chThdWait(threads[i]);
 800610c:	f7fe fc28 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8006110:	6026      	str	r6, [r4, #0]
  for (i = 0; i < MAX_THREADS; i++)
 8006112:	4544      	cmp	r4, r8
 8006114:	d009      	beq.n	800612a <rt_test_011_002_execute.lto_priv.0+0xba>
    if (threads[i] != NULL) {
 8006116:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800611a:	e7f6      	b.n	800610a <rt_test_011_002_execute.lto_priv.0+0x9a>
  chtest.failure_message = msg;
 800611c:	4b37      	ldr	r3, [pc, #220]	; (80061fc <rt_test_011_002_execute.lto_priv.0+0x18c>)
 800611e:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8006120:	f240 1201 	movw	r2, #257	; 0x101
 8006124:	80ba      	strh	r2, [r7, #4]
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
  test_end_step(6);
}
 8006126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert_sequence("ABCD", "invalid sequence");
 800612a:	4935      	ldr	r1, [pc, #212]	; (8006200 <rt_test_011_002_execute.lto_priv.0+0x190>)
 800612c:	4835      	ldr	r0, [pc, #212]	; (8006204 <rt_test_011_002_execute.lto_priv.0+0x194>)
 800612e:	f7fa f9ef 	bl	8000510 <__test_assert_sequence>
 8006132:	4604      	mov	r4, r0
 8006134:	2800      	cmp	r0, #0
 8006136:	d1f6      	bne.n	8006126 <rt_test_011_002_execute.lto_priv.0+0xb6>
  test_set_step(6);
 8006138:	2306      	movs	r3, #6
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	2604      	movs	r6, #4
 800613e:	f04f 0830 	mov.w	r8, #48	; 0x30
 8006142:	f388 8811 	msr	BASEPRI, r8
  objp = mp->next;
 8006146:	6828      	ldr	r0, [r5, #0]
  if (objp != NULL) {
 8006148:	b340      	cbz	r0, 800619c <rt_test_011_002_execute.lto_priv.0+0x12c>
    mp->next = mp->next->next;
 800614a:	6803      	ldr	r3, [r0, #0]
 800614c:	602b      	str	r3, [r5, #0]
 800614e:	f384 8811 	msr	BASEPRI, r4
  if (!condition) {
 8006152:	b1a8      	cbz	r0, 8006180 <rt_test_011_002_execute.lto_priv.0+0x110>
    for (i = 0; i < 4; i++)
 8006154:	3e01      	subs	r6, #1
 8006156:	d1f4      	bne.n	8006142 <rt_test_011_002_execute.lto_priv.0+0xd2>
 8006158:	2330      	movs	r3, #48	; 0x30
 800615a:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 800615e:	6828      	ldr	r0, [r5, #0]
  if (objp != NULL) {
 8006160:	b318      	cbz	r0, 80061aa <rt_test_011_002_execute.lto_priv.0+0x13a>
    mp->next = mp->next->next;
 8006162:	6803      	ldr	r3, [r0, #0]
 8006164:	602b      	str	r3, [r5, #0]
 8006166:	2300      	movs	r3, #0
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	2800      	cmp	r0, #0
 800616e:	d0da      	beq.n	8006126 <rt_test_011_002_execute.lto_priv.0+0xb6>
  chtest.failure_message = msg;
 8006170:	4b25      	ldr	r3, [pc, #148]	; (8006208 <rt_test_011_002_execute.lto_priv.0+0x198>)
 8006172:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8006174:	f240 1201 	movw	r2, #257	; 0x101
 8006178:	80ba      	strh	r2, [r7, #4]
    return __test_fail(msg);
 800617a:	e7d4      	b.n	8006126 <rt_test_011_002_execute.lto_priv.0+0xb6>
 800617c:	f383 8811 	msr	BASEPRI, r3
  chtest.failure_message = msg;
 8006180:	4b22      	ldr	r3, [pc, #136]	; (800620c <rt_test_011_002_execute.lto_priv.0+0x19c>)
 8006182:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8006184:	f240 1201 	movw	r2, #257	; 0x101
 8006188:	80ba      	strh	r2, [r7, #4]
}
 800618a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chtest.failure_message = msg;
 800618e:	4b20      	ldr	r3, [pc, #128]	; (8006210 <rt_test_011_002_execute.lto_priv.0+0x1a0>)
 8006190:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8006192:	f240 1201 	movw	r2, #257	; 0x101
 8006196:	80ba      	strh	r2, [r7, #4]
 8006198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 800619c:	68eb      	ldr	r3, [r5, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0ec      	beq.n	800617c <rt_test_011_002_execute.lto_priv.0+0x10c>
    objp = mp->provider(mp->object_size, mp->align);
 80061a2:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 80061a6:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 80061a8:	e7d1      	b.n	800614e <rt_test_011_002_execute.lto_priv.0+0xde>
  else if (mp->provider != NULL) {
 80061aa:	68eb      	ldr	r3, [r5, #12]
 80061ac:	b11b      	cbz	r3, 80061b6 <rt_test_011_002_execute.lto_priv.0+0x146>
    objp = mp->provider(mp->object_size, mp->align);
 80061ae:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 80061b2:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 80061b4:	e7d7      	b.n	8006166 <rt_test_011_002_execute.lto_priv.0+0xf6>
 80061b6:	f386 8811 	msr	BASEPRI, r6
  if (!condition) {
 80061ba:	e7b4      	b.n	8006126 <rt_test_011_002_execute.lto_priv.0+0xb6>
 80061bc:	080161ec 	.word	0x080161ec
 80061c0:	20000b74 	.word	0x20000b74
 80061c4:	20000dd8 	.word	0x20000dd8
 80061c8:	20000c8c 	.word	0x20000c8c
 80061cc:	20000a90 	.word	0x20000a90
 80061d0:	080151c4 	.word	0x080151c4
 80061d4:	0801528c 	.word	0x0801528c
 80061d8:	200016e4 	.word	0x200016e4
 80061dc:	080151c8 	.word	0x080151c8
 80061e0:	080152bc 	.word	0x080152bc
 80061e4:	08015244 	.word	0x08015244
 80061e8:	080152c4 	.word	0x080152c4
 80061ec:	08015240 	.word	0x08015240
 80061f0:	08015340 	.word	0x08015340
 80061f4:	0801524c 	.word	0x0801524c
 80061f8:	08015348 	.word	0x08015348
 80061fc:	080152a4 	.word	0x080152a4
 8006200:	08014f74 	.word	0x08014f74
 8006204:	0801526c 	.word	0x0801526c
 8006208:	08015360 	.word	0x08015360
 800620c:	08015350 	.word	0x08015350
 8006210:	080152cc 	.word	0x080152cc
	...

08006220 <oslib_test_004_001_execute.lto_priv.0>:
 * - [4.1.3] Sending jobs with various timings.
 * - [4.1.4] Sending two null jobs to make threads exit.
 * .
 */

static void oslib_test_004_001_execute(void) {
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  thread_t *tp1, *tp2;

  /* [4.1.1] Initializing the Jobs Queue object.*/
  test_set_step(1);
 8006224:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 80063c8 <oslib_test_004_001_execute.lto_priv.0+0x1a8>
  mp->next = NULL;
 8006228:	4c68      	ldr	r4, [pc, #416]	; (80063cc <oslib_test_004_001_execute.lto_priv.0+0x1ac>)
  sp->cnt = n;
 800622a:	4e69      	ldr	r6, [pc, #420]	; (80063d0 <oslib_test_004_001_execute.lto_priv.0+0x1b0>)
 800622c:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 80063d4 <oslib_test_004_001_execute.lto_priv.0+0x1b4>
 8006230:	2301      	movs	r3, #1
 8006232:	2700      	movs	r7, #0
  mp->align = align;
 8006234:	2504      	movs	r5, #4
 8006236:	f8cb 3000 	str.w	r3, [fp]
  mp->object_size = size;
 800623a:	2308      	movs	r3, #8
 800623c:	e9c4 7303 	strd	r7, r3, [r4, #12]
  mp->provider = provider;
 8006240:	e9c4 5705 	strd	r5, r7, [r4, #20]
  qp->prev = qp;
 8006244:	e9c4 4400 	strd	r4, r4, [r4]
static void oslib_test_004_001_execute(void) {
 8006248:	b08d      	sub	sp, #52	; 0x34
 800624a:	60a7      	str	r7, [r4, #8]
 800624c:	f04f 0930 	mov.w	r9, #48	; 0x30
    tp->u.rdymsg = MSG_OK;
 8006250:	46b8      	mov	r8, r7
 8006252:	e00f      	b.n	8006274 <oslib_test_004_001_execute.lto_priv.0+0x54>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8006254:	f8da 2000 	ldr.w	r2, [sl]
 8006258:	f8da 300c 	ldr.w	r3, [sl, #12]
 800625c:	6892      	ldr	r2, [r2, #8]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	429a      	cmp	r2, r3
 8006262:	d901      	bls.n	8006268 <oslib_test_004_001_execute.lto_priv.0+0x48>
    __sch_reschedule_ahead();
 8006264:	f7fb fe74 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8006268:	f388 8811 	msr	BASEPRI, r8
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800626c:	6923      	ldr	r3, [r4, #16]
  while (n != 0U) {
 800626e:	3d01      	subs	r5, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8006270:	441e      	add	r6, r3
  while (n != 0U) {
 8006272:	d01c      	beq.n	80062ae <oslib_test_004_001_execute.lto_priv.0+0x8e>
 8006274:	f389 8811 	msr	BASEPRI, r9
  php->next = mp->next;
 8006278:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
  if (++sp->cnt <= (cnt_t)0) {
 800627c:	3301      	adds	r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006284:	6032      	str	r2, [r6, #0]
 8006286:	dce5      	bgt.n	8006254 <oslib_test_004_001_execute.lto_priv.0+0x34>
  ch_queue_t *p = qp->next;
 8006288:	6822      	ldr	r2, [r4, #0]
  qp->next       = p->next;
 800628a:	6813      	ldr	r3, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800628c:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800628e:	6890      	ldr	r0, [r2, #8]
  qp->next->prev = qp;
 8006290:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8006292:	6023      	str	r3, [r4, #0]
    tp->u.rdymsg = MSG_OK;
 8006294:	6297      	str	r7, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8006296:	f882 7024 	strb.w	r7, [r2, #36]	; 0x24
    pqp = pqp->next;
 800629a:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800629c:	688b      	ldr	r3, [r1, #8]
 800629e:	4283      	cmp	r3, r0
 80062a0:	d2fb      	bcs.n	800629a <oslib_test_004_001_execute.lto_priv.0+0x7a>
  p->prev       = pqp->prev;
 80062a2:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 80062a4:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 80062a6:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 80062a8:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 80062aa:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 80062ac:	e7d2      	b.n	8006254 <oslib_test_004_001_execute.lto_priv.0+0x34>
 80062ae:	f8da 200c 	ldr.w	r2, [sl, #12]
  mbp->buffer = buf;
 80062b2:	4b49      	ldr	r3, [pc, #292]	; (80063d8 <oslib_test_004_001_execute.lto_priv.0+0x1b8>)
  {
    thread_descriptor_t td1 = {
      .name  = "dispatcher1",
      .wbase = wa1Thread1,
      .wend  = THD_WORKING_AREA_END(wa1Thread1),
      .prio  = chThdGetPriorityX() - 1,
 80062b4:	6892      	ldr	r2, [r2, #8]
 80062b6:	61e3      	str	r3, [r4, #28]
 80062b8:	3a01      	subs	r2, #1
  mbp->wrptr  = buf;
 80062ba:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
    thread_descriptor_t td1 = {
 80062be:	9209      	str	r2, [sp, #36]	; 0x24
  mbp->top    = &buf[n];
 80062c0:	3310      	adds	r3, #16
 80062c2:	4a46      	ldr	r2, [pc, #280]	; (80063dc <oslib_test_004_001_execute.lto_priv.0+0x1bc>)
 80062c4:	6223      	str	r3, [r4, #32]
  qp->next = qp;
 80062c6:	4b46      	ldr	r3, [pc, #280]	; (80063e0 <oslib_test_004_001_execute.lto_priv.0+0x1c0>)
 80062c8:	9207      	str	r2, [sp, #28]
 80062ca:	f502 72f8 	add.w	r2, r2, #496	; 0x1f0
 80062ce:	9208      	str	r2, [sp, #32]
 80062d0:	f103 0208 	add.w	r2, r3, #8
  qp->prev = qp;
 80062d4:	e9c4 220f 	strd	r2, r2, [r4, #60]	; 0x3c
  test_set_step(2);
 80062d8:	2202      	movs	r2, #2
    thread_descriptor_t td1 = {
 80062da:	4f42      	ldr	r7, [pc, #264]	; (80063e4 <oslib_test_004_001_execute.lto_priv.0+0x1c4>)
  test_set_step(2);
 80062dc:	f8cb 2000 	str.w	r2, [fp]
    thread_descriptor_t td1 = {
 80062e0:	4a41      	ldr	r2, [pc, #260]	; (80063e8 <oslib_test_004_001_execute.lto_priv.0+0x1c8>)
  mbp->cnt    = (size_t)0;
 80062e2:	62e5      	str	r5, [r4, #44]	; 0x2c
 80062e4:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
  mbp->reset  = false;
 80062e8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 80062ec:	950b      	str	r5, [sp, #44]	; 0x2c
 80062ee:	9206      	str	r2, [sp, #24]
 80062f0:	970a      	str	r7, [sp, #40]	; 0x28
 80062f2:	2430      	movs	r4, #48	; 0x30
 80062f4:	f384 8811 	msr	BASEPRI, r4
  tp = chThdCreateSuspendedI(tdp);
 80062f8:	a806      	add	r0, sp, #24
 80062fa:	f7fd fbf1 	bl	8003ae0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 80062fe:	4629      	mov	r1, r5
  tp = chThdCreateSuspendedI(tdp);
 8006300:	4606      	mov	r6, r0
  chSchWakeupS(tp, MSG_OK);
 8006302:	f7fd fabd 	bl	8003880 <chSchWakeupS>
 8006306:	f385 8811 	msr	BASEPRI, r5
 800630a:	f8da 200c 	ldr.w	r2, [sl, #12]

    thread_descriptor_t td2 = {
      .name  = "dispatcher2",
      .wbase = wa2Thread1,
      .wend  = THD_WORKING_AREA_END(wa2Thread1),
      .prio  = chThdGetPriorityX() - 2,
 800630e:	6892      	ldr	r2, [r2, #8]
    thread_descriptor_t td2 = {
 8006310:	9704      	str	r7, [sp, #16]
      .prio  = chThdGetPriorityX() - 2,
 8006312:	3a02      	subs	r2, #2
    thread_descriptor_t td2 = {
 8006314:	9203      	str	r2, [sp, #12]
 8006316:	4a35      	ldr	r2, [pc, #212]	; (80063ec <oslib_test_004_001_execute.lto_priv.0+0x1cc>)
 8006318:	9201      	str	r2, [sp, #4]
 800631a:	f502 72f8 	add.w	r2, r2, #496	; 0x1f0
 800631e:	9202      	str	r2, [sp, #8]
 8006320:	4a33      	ldr	r2, [pc, #204]	; (80063f0 <oslib_test_004_001_execute.lto_priv.0+0x1d0>)
 8006322:	9505      	str	r5, [sp, #20]
 8006324:	9200      	str	r2, [sp, #0]
 8006326:	f384 8811 	msr	BASEPRI, r4
  tp = chThdCreateSuspendedI(tdp);
 800632a:	4668      	mov	r0, sp
 800632c:	f7fd fbd8 	bl	8003ae0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8006330:	4629      	mov	r1, r5
  tp = chThdCreateSuspendedI(tdp);
 8006332:	4607      	mov	r7, r0
  chSchWakeupS(tp, MSG_OK);
 8006334:	f7fd faa4 	bl	8003880 <chSchWakeupS>
 8006338:	f385 8811 	msr	BASEPRI, r5
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800633c:	4b28      	ldr	r3, [pc, #160]	; (80063e0 <oslib_test_004_001_execute.lto_priv.0+0x1c0>)
 800633e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80063f4 <oslib_test_004_001_execute.lto_priv.0+0x1d4>
    tp2 = chThdCreate(&td2);
  }
  test_end_step(2);

  /* [4.1.3] Sending jobs with various timings.*/
  test_set_step(3);
 8006342:	2203      	movs	r2, #3
 8006344:	f8cb 2000 	str.w	r2, [fp]
 8006348:	f04f 0961 	mov.w	r9, #97	; 0x61
 800634c:	f1a3 0534 	sub.w	r5, r3, #52	; 0x34
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8006350:	f1a3 0418 	sub.w	r4, r3, #24
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8006354:	f04f 31ff 	mov.w	r1, #4294967295
 8006358:	4628      	mov	r0, r5
 800635a:	f7fc fe79 	bl	8003050 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800635e:	2200      	movs	r2, #0
    unsigned i;
    job_descriptor_t *jdp;

    for (i = 0; i < 8; i++) {
      jdp = chJobGet(&jq);
      jdp->jobfunc = job_slow;
 8006360:	e9c0 8900 	strd	r8, r9, [r0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8006364:	4601      	mov	r1, r0
    for (i = 0; i < 8; i++) {
 8006366:	f109 0901 	add.w	r9, r9, #1
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800636a:	4620      	mov	r0, r4
 800636c:	f7fc fca8 	bl	8002cc0 <chMBPostTimeout>
 8006370:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8006374:	d1ee      	bne.n	8006354 <oslib_test_004_001_execute.lto_priv.0+0x134>
    }
  }
  test_end_step(3);

  /* [4.1.4] Sending two null jobs to make threads exit.*/
  test_set_step(4);
 8006376:	2304      	movs	r3, #4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8006378:	f04f 31ff 	mov.w	r1, #4294967295
 800637c:	4813      	ldr	r0, [pc, #76]	; (80063cc <oslib_test_004_001_execute.lto_priv.0+0x1ac>)
 800637e:	f8cb 3000 	str.w	r3, [fp]
 8006382:	f7fc fe65 	bl	8003050 <chGuardedPoolAllocTimeout>
  {
    job_descriptor_t *jdp;

    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
 8006386:	2400      	movs	r4, #0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8006388:	4622      	mov	r2, r4
    jdp->jobarg  = NULL;
 800638a:	e9c0 4400 	strd	r4, r4, [r0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800638e:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8006390:	4819      	ldr	r0, [pc, #100]	; (80063f8 <oslib_test_004_001_execute.lto_priv.0+0x1d8>)
 8006392:	f7fc fc95 	bl	8002cc0 <chMBPostTimeout>
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8006396:	f04f 31ff 	mov.w	r1, #4294967295
 800639a:	480c      	ldr	r0, [pc, #48]	; (80063cc <oslib_test_004_001_execute.lto_priv.0+0x1ac>)
 800639c:	f7fc fe58 	bl	8003050 <chGuardedPoolAllocTimeout>
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80063a0:	4622      	mov	r2, r4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80063a2:	4601      	mov	r1, r0
    chJobPost(&jq, jdp);
    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
    jdp->jobarg  = NULL;
 80063a4:	e9c0 4400 	strd	r4, r4, [r0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80063a8:	4813      	ldr	r0, [pc, #76]	; (80063f8 <oslib_test_004_001_execute.lto_priv.0+0x1d8>)
 80063aa:	f7fc fc89 	bl	8002cc0 <chMBPostTimeout>
    chJobPost(&jq, jdp);
    (void) chThdWait(tp1);
 80063ae:	4630      	mov	r0, r6
 80063b0:	f7fe fad6 	bl	8004960 <chThdWait>
    (void) chThdWait(tp2);
 80063b4:	4638      	mov	r0, r7
 80063b6:	f7fe fad3 	bl	8004960 <chThdWait>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 80063ba:	4910      	ldr	r1, [pc, #64]	; (80063fc <oslib_test_004_001_execute.lto_priv.0+0x1dc>)
 80063bc:	4810      	ldr	r0, [pc, #64]	; (8006400 <oslib_test_004_001_execute.lto_priv.0+0x1e0>)
  }
  test_end_step(4);
}
 80063be:	b00d      	add	sp, #52	; 0x34
 80063c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("abcdefgh", "unexpected tokens");
 80063c4:	f7fa b8a4 	b.w	8000510 <__test_assert_sequence>
 80063c8:	20000b74 	.word	0x20000b74
 80063cc:	20000c38 	.word	0x20000c38
 80063d0:	20000c18 	.word	0x20000c18
 80063d4:	20000a90 	.word	0x20000a90
 80063d8:	20000c9c 	.word	0x20000c9c
 80063dc:	20001730 	.word	0x20001730
 80063e0:	20000c6c 	.word	0x20000c6c
 80063e4:	08002fb1 	.word	0x08002fb1
 80063e8:	08015374 	.word	0x08015374
 80063ec:	20001920 	.word	0x20001920
 80063f0:	08015380 	.word	0x08015380
 80063f4:	08001ee1 	.word	0x08001ee1
 80063f8:	20000c54 	.word	0x20000c54
 80063fc:	08015090 	.word	0x08015090
 8006400:	080150c0 	.word	0x080150c0
	...

08006410 <oslib_test_005_001_execute.lto_priv.0>:
 *   emitted tokens.
 * - [5.1.3] Waiting for the thread to terminate-.
 * .
 */

static void oslib_test_005_001_execute(void) {
 8006410:	b570      	push	{r4, r5, r6, lr}
  return __sch_get_currthread();
 8006412:	4b3d      	ldr	r3, [pc, #244]	; (8006508 <oslib_test_005_001_execute.lto_priv.0+0xf8>)
  thread_t *tp;

  /* [5.1.1] Starting the dispatcher thread.*/
  test_set_step(1);
  {
    thread_descriptor_t td = {
 8006414:	4a3d      	ldr	r2, [pc, #244]	; (800650c <oslib_test_005_001_execute.lto_priv.0+0xfc>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	493d      	ldr	r1, [pc, #244]	; (8006510 <oslib_test_005_001_execute.lto_priv.0+0x100>)
      .name  = "dispatcher",
      .wbase = waThread1,
      .wend  = THD_WORKING_AREA_END(waThread1),
      .prio  = chThdGetPriorityX() + 1,
 800641a:	689b      	ldr	r3, [r3, #8]
  test_set_step(1);
 800641c:	4d3d      	ldr	r5, [pc, #244]	; (8006514 <oslib_test_005_001_execute.lto_priv.0+0x104>)
static void oslib_test_005_001_execute(void) {
 800641e:	b08a      	sub	sp, #40	; 0x28
    thread_descriptor_t td = {
 8006420:	f502 70f8 	add.w	r0, r2, #496	; 0x1f0
 8006424:	9104      	str	r1, [sp, #16]
 8006426:	493c      	ldr	r1, [pc, #240]	; (8006518 <oslib_test_005_001_execute.lto_priv.0+0x108>)
      .prio  = chThdGetPriorityX() + 1,
 8006428:	3301      	adds	r3, #1
  test_set_step(1);
 800642a:	2401      	movs	r4, #1
    thread_descriptor_t td = {
 800642c:	2600      	movs	r6, #0
 800642e:	9307      	str	r3, [sp, #28]
 8006430:	e9cd 2005 	strd	r2, r0, [sp, #20]
 8006434:	e9cd 1608 	strd	r1, r6, [sp, #32]
  test_set_step(1);
 8006438:	602c      	str	r4, [r5, #0]
 800643a:	2330      	movs	r3, #48	; 0x30
 800643c:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(tdp);
 8006440:	a804      	add	r0, sp, #16
 8006442:	f7fd fb4d 	bl	8003ae0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8006446:	4631      	mov	r1, r6
  tp = chThdCreateSuspendedI(tdp);
 8006448:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800644a:	f7fd fa19 	bl	8003880 <chSchWakeupS>
 800644e:	f386 8811 	msr	BASEPRI, r6
  }
  test_end_step(1);

  /* [5.1.2] Calling the default veneers, checking the result and the
     emitted tokens.*/
  test_set_step(2);
 8006452:	2302      	movs	r3, #2
 * @param[in] func      pointer to the function to be called
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect0(thread_t *tp, delegate_fn0_t func) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 8006454:	4a31      	ldr	r2, [pc, #196]	; (800651c <oslib_test_005_001_execute.lto_priv.0+0x10c>)
 8006456:	4932      	ldr	r1, [pc, #200]	; (8006520 <oslib_test_005_001_execute.lto_priv.0+0x110>)
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	4620      	mov	r0, r4
 800645c:	f7fb f948 	bl	80016f0 <chDelegateCallVeneer>
 8006460:	f245 53aa 	movw	r3, #21930	; 0x55aa
 8006464:	4298      	cmp	r0, r3
 8006466:	d148      	bne.n	80064fa <oslib_test_005_001_execute.lto_priv.0+0xea>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect1(thread_t *tp, delegate_fn1_t func,
                                          msg_t p1) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn1, func, p1);
 8006468:	4a2e      	ldr	r2, [pc, #184]	; (8006524 <oslib_test_005_001_execute.lto_priv.0+0x114>)
 800646a:	492f      	ldr	r1, [pc, #188]	; (8006528 <oslib_test_005_001_execute.lto_priv.0+0x118>)
 800646c:	2341      	movs	r3, #65	; 0x41
 800646e:	4620      	mov	r0, r4
 8006470:	f7fb f93e 	bl	80016f0 <chDelegateCallVeneer>
 8006474:	2841      	cmp	r0, #65	; 0x41
 8006476:	d140      	bne.n	80064fa <oslib_test_005_001_execute.lto_priv.0+0xea>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect2(thread_t *tp, delegate_fn2_t func,
                                          msg_t p1, msg_t p2) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn2, func, p1, p2);
 8006478:	2343      	movs	r3, #67	; 0x43
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	4a2b      	ldr	r2, [pc, #172]	; (800652c <oslib_test_005_001_execute.lto_priv.0+0x11c>)
 800647e:	492c      	ldr	r1, [pc, #176]	; (8006530 <oslib_test_005_001_execute.lto_priv.0+0x120>)
 8006480:	2342      	movs	r3, #66	; 0x42
 8006482:	4620      	mov	r0, r4
 8006484:	f7fb f934 	bl	80016f0 <chDelegateCallVeneer>
 8006488:	2842      	cmp	r0, #66	; 0x42
 800648a:	d136      	bne.n	80064fa <oslib_test_005_001_execute.lto_priv.0+0xea>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect3(thread_t *tp, delegate_fn3_t func,
                                          msg_t p1, msg_t p2, msg_t p3) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn3, func, p1, p2, p3);
 800648c:	2146      	movs	r1, #70	; 0x46
 800648e:	2345      	movs	r3, #69	; 0x45
 8006490:	e9cd 3100 	strd	r3, r1, [sp]
 8006494:	4a27      	ldr	r2, [pc, #156]	; (8006534 <oslib_test_005_001_execute.lto_priv.0+0x124>)
 8006496:	4928      	ldr	r1, [pc, #160]	; (8006538 <oslib_test_005_001_execute.lto_priv.0+0x128>)
 8006498:	2344      	movs	r3, #68	; 0x44
 800649a:	4620      	mov	r0, r4
 800649c:	f7fb f928 	bl	80016f0 <chDelegateCallVeneer>
 80064a0:	2844      	cmp	r0, #68	; 0x44
 80064a2:	d12a      	bne.n	80064fa <oslib_test_005_001_execute.lto_priv.0+0xea>
 */
static inline msg_t chDelegateCallDirect4(thread_t *tp, delegate_fn4_t func,
                                          msg_t p1, msg_t p2, msg_t p3,
                                          msg_t p4) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn4, func, p1, p2, p3, p4);
 80064a4:	214a      	movs	r1, #74	; 0x4a
 80064a6:	2249      	movs	r2, #73	; 0x49
 80064a8:	2348      	movs	r3, #72	; 0x48
 80064aa:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	4a22      	ldr	r2, [pc, #136]	; (800653c <oslib_test_005_001_execute.lto_priv.0+0x12c>)
 80064b2:	4923      	ldr	r1, [pc, #140]	; (8006540 <oslib_test_005_001_execute.lto_priv.0+0x130>)
 80064b4:	2347      	movs	r3, #71	; 0x47
 80064b6:	4620      	mov	r0, r4
 80064b8:	f7fb f91a 	bl	80016f0 <chDelegateCallVeneer>
 80064bc:	2847      	cmp	r0, #71	; 0x47
 80064be:	d11c      	bne.n	80064fa <oslib_test_005_001_execute.lto_priv.0+0xea>
  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 80064c0:	4a20      	ldr	r2, [pc, #128]	; (8006544 <oslib_test_005_001_execute.lto_priv.0+0x134>)
 80064c2:	4917      	ldr	r1, [pc, #92]	; (8006520 <oslib_test_005_001_execute.lto_priv.0+0x110>)
 80064c4:	4620      	mov	r0, r4
 80064c6:	f7fb f913 	bl	80016f0 <chDelegateCallVeneer>
 80064ca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80064ce:	4298      	cmp	r0, r3
 80064d0:	d113      	bne.n	80064fa <oslib_test_005_001_execute.lto_priv.0+0xea>
    test_assert(retval == (int)'G', "invalid return value");

    retval = chDelegateCallDirect0(tp, (delegate_fn0_t)dis_func_end);
    test_assert(retval == 0xAA55, "invalid return value");

    test_assert_sequence("0ABCDEFGHIJZ", "unexpected tokens");
 80064d2:	491d      	ldr	r1, [pc, #116]	; (8006548 <oslib_test_005_001_execute.lto_priv.0+0x138>)
 80064d4:	481d      	ldr	r0, [pc, #116]	; (800654c <oslib_test_005_001_execute.lto_priv.0+0x13c>)
 80064d6:	f7fa f81b 	bl	8000510 <__test_assert_sequence>
 80064da:	b998      	cbnz	r0, 8006504 <oslib_test_005_001_execute.lto_priv.0+0xf4>
  }
  test_end_step(2);

  /* [5.1.3] Waiting for the thread to terminate-.*/
  test_set_step(3);
 80064dc:	2303      	movs	r3, #3
  {
    msg_t msg = chThdWait(tp);
 80064de:	4620      	mov	r0, r4
  test_set_step(3);
 80064e0:	602b      	str	r3, [r5, #0]
    msg_t msg = chThdWait(tp);
 80064e2:	f7fe fa3d 	bl	8004960 <chThdWait>
 80064e6:	f640 73a5 	movw	r3, #4005	; 0xfa5
 80064ea:	4298      	cmp	r0, r3
 80064ec:	d00a      	beq.n	8006504 <oslib_test_005_001_execute.lto_priv.0+0xf4>
  chtest.failure_message = msg;
 80064ee:	4b18      	ldr	r3, [pc, #96]	; (8006550 <oslib_test_005_001_execute.lto_priv.0+0x140>)
 80064f0:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80064f2:	f240 1201 	movw	r2, #257	; 0x101
 80064f6:	80aa      	strh	r2, [r5, #4]
    return __test_fail(msg);
 80064f8:	e004      	b.n	8006504 <oslib_test_005_001_execute.lto_priv.0+0xf4>
  chtest.failure_message = msg;
 80064fa:	4b16      	ldr	r3, [pc, #88]	; (8006554 <oslib_test_005_001_execute.lto_priv.0+0x144>)
 80064fc:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80064fe:	f240 1201 	movw	r2, #257	; 0x101
 8006502:	80aa      	strh	r2, [r5, #4]
    test_assert(msg == 0x0FA5, "invalid exit code");
  }
  test_end_step(3);
}
 8006504:	b00a      	add	sp, #40	; 0x28
 8006506:	bd70      	pop	{r4, r5, r6, pc}
 8006508:	20000a90 	.word	0x20000a90
 800650c:	20001b10 	.word	0x20001b10
 8006510:	0801538c 	.word	0x0801538c
 8006514:	20000b74 	.word	0x20000b74
 8006518:	08003f31 	.word	0x08003f31
 800651c:	08000cb1 	.word	0x08000cb1
 8006520:	08000431 	.word	0x08000431
 8006524:	08000cd1 	.word	0x08000cd1
 8006528:	08000441 	.word	0x08000441
 800652c:	08000cf1 	.word	0x08000cf1
 8006530:	08000461 	.word	0x08000461
 8006534:	08000d21 	.word	0x08000d21
 8006538:	08000481 	.word	0x08000481
 800653c:	08000d61 	.word	0x08000d61
 8006540:	080004a1 	.word	0x080004a1
 8006544:	08000db1 	.word	0x08000db1
 8006548:	08015090 	.word	0x08015090
 800654c:	080153b0 	.word	0x080153b0
 8006550:	080153c0 	.word	0x080153c0
 8006554:	08015398 	.word	0x08015398
	...

08006560 <dyn_create_object_heap.lto_priv.0>:

#if CH_FACTORY_REQUIRES_HEAP || defined(__DOXYGEN__)
static dyn_element_t *dyn_create_object_heap(const char *name,
                                             dyn_list_t *dlp,
                                             size_t size,
                                             unsigned align) {
 8006560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  dyn_element_t *p = dlp->next;
 8006564:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8006566:	42a1      	cmp	r1, r4
                                             unsigned align) {
 8006568:	460e      	mov	r6, r1
 800656a:	4605      	mov	r5, r0
 800656c:	4617      	mov	r7, r2
 800656e:	4698      	mov	r8, r3
  while (p != (dyn_element_t *)dlp) {
 8006570:	d103      	bne.n	800657a <dyn_create_object_heap.lto_priv.0+0x1a>
 8006572:	e00e      	b.n	8006592 <dyn_create_object_heap.lto_priv.0+0x32>
    p = p->next;
 8006574:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8006576:	42a6      	cmp	r6, r4
 8006578:	d00b      	beq.n	8006592 <dyn_create_object_heap.lto_priv.0+0x32>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800657a:	f104 0008 	add.w	r0, r4, #8
 800657e:	2208      	movs	r2, #8
 8006580:	4629      	mov	r1, r5
 8006582:	f00e fca9 	bl	8014ed8 <strncmp>
 8006586:	2800      	cmp	r0, #0
 8006588:	d1f4      	bne.n	8006574 <dyn_create_object_heap.lto_priv.0+0x14>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 800658a:	b114      	cbz	r4, 8006592 <dyn_create_object_heap.lto_priv.0+0x32>
    return NULL;
 800658c:	2000      	movs	r0, #0

  /* Updating factory list.*/
  dlp->next = dep;

  return dep;
}
 800658e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dep = (dyn_element_t *)chHeapAllocAligned(NULL, size, align);
 8006592:	4642      	mov	r2, r8
 8006594:	4639      	mov	r1, r7
 8006596:	2000      	movs	r0, #0
 8006598:	f7fe f8f2 	bl	8004780 <chHeapAllocAligned>
  if (dep == NULL) {
 800659c:	2800      	cmp	r0, #0
 800659e:	d0f5      	beq.n	800658c <dyn_create_object_heap.lto_priv.0+0x2c>
  copy_name(name, dep->name);
 80065a0:	f100 0208 	add.w	r2, r0, #8
  i = CH_CFG_FACTORY_MAX_NAMES_LENGTH;
 80065a4:	f105 0108 	add.w	r1, r5, #8
    c = *sp++;
 80065a8:	f815 3b01 	ldrb.w	r3, [r5], #1
    *dp++ = c;
 80065ac:	f802 3b01 	strb.w	r3, [r2], #1
  } while ((c != (char)0) && (i > 0U));
 80065b0:	b10b      	cbz	r3, 80065b6 <dyn_create_object_heap.lto_priv.0+0x56>
 80065b2:	42a9      	cmp	r1, r5
 80065b4:	d1f8      	bne.n	80065a8 <dyn_create_object_heap.lto_priv.0+0x48>
  dep->next = dlp->next;
 80065b6:	6833      	ldr	r3, [r6, #0]
  dep->refs = (ucnt_t)1;
 80065b8:	2201      	movs	r2, #1
  dep->next = dlp->next;
 80065ba:	e9c0 3200 	strd	r3, r2, [r0]
  dlp->next = dep;
 80065be:	6030      	str	r0, [r6, #0]
}
 80065c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080065d0 <chFactoryReleaseObject>:
 *
 * @param[in] rop       registered object reference
 *
 * @api
 */
void chFactoryReleaseObject(registered_object_t *rop) {
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	4604      	mov	r4, r0
 80065d4:	2330      	movs	r3, #48	; 0x30
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	4d15      	ldr	r5, [pc, #84]	; (8006630 <chFactoryReleaseObject+0x60>)
 80065dc:	4628      	mov	r0, r5
 80065de:	f7fd fd27 	bl	8004030 <chMtxLockS>
 80065e2:	2300      	movs	r3, #0
 80065e4:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 80065e8:	6863      	ldr	r3, [r4, #4]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80065ee:	b99b      	cbnz	r3, 8006618 <chFactoryReleaseObject+0x48>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 80065f0:	f105 0210 	add.w	r2, r5, #16
 80065f4:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 80065f6:	4619      	mov	r1, r3
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d011      	beq.n	8006622 <chFactoryReleaseObject+0x52>
    if (prev->next == element) {
 80065fe:	429c      	cmp	r4, r3
 8006600:	d1f9      	bne.n	80065f6 <chFactoryReleaseObject+0x26>
      prev->next = element->next;
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	600b      	str	r3, [r1, #0]
 8006606:	2330      	movs	r3, #48	; 0x30
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	696b      	ldr	r3, [r5, #20]
 800660e:	6023      	str	r3, [r4, #0]
 8006610:	2300      	movs	r3, #0
  mp->next = php;
 8006612:	616c      	str	r4, [r5, #20]
 8006614:	f383 8811 	msr	BASEPRI, r3
  dyn_release_object_pool(&rop->element,
                          &ch_factory.obj_list,
                          &ch_factory.obj_pool);

  F_UNLOCK();
}
 8006618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800661c:	4804      	ldr	r0, [pc, #16]	; (8006630 <chFactoryReleaseObject+0x60>)
 800661e:	f7fd bda7 	b.w	8004170 <chMtxUnlock>
 8006622:	2330      	movs	r3, #48	; 0x30
 8006624:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8006628:	2300      	movs	r3, #0
 800662a:	696a      	ldr	r2, [r5, #20]
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	deff      	udf	#255	; 0xff
 8006630:	20000b18 	.word	0x20000b18
	...

08006640 <chFactoryReleaseBuffer>:
 *
 * @param[in] dbp       dynamic buffer object reference
 *
 * @api
 */
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8006640:	b510      	push	{r4, lr}
 8006642:	2330      	movs	r3, #48	; 0x30
 8006644:	4604      	mov	r4, r0
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	480f      	ldr	r0, [pc, #60]	; (8006688 <chFactoryReleaseBuffer+0x48>)
 800664c:	f7fd fcf0 	bl	8004030 <chMtxLockS>
 8006650:	2300      	movs	r3, #0
 8006652:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 8006656:	6863      	ldr	r3, [r4, #4]
 8006658:	3b01      	subs	r3, #1
 800665a:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800665c:	b95b      	cbnz	r3, 8006676 <chFactoryReleaseBuffer+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800665e:	4b0b      	ldr	r3, [pc, #44]	; (800668c <chFactoryReleaseBuffer+0x4c>)
 8006660:	4618      	mov	r0, r3
 8006662:	e001      	b.n	8006668 <chFactoryReleaseBuffer+0x28>
    if (prev->next == element) {
 8006664:	4284      	cmp	r4, r0
 8006666:	d00b      	beq.n	8006680 <chFactoryReleaseBuffer+0x40>
  while (prev->next != (dyn_element_t *)dlp) {
 8006668:	4602      	mov	r2, r0
 800666a:	6800      	ldr	r0, [r0, #0]
 800666c:	4298      	cmp	r0, r3
 800666e:	d1f9      	bne.n	8006664 <chFactoryReleaseBuffer+0x24>
  return NULL;
 8006670:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8006672:	f7fe f905 	bl	8004880 <chHeapFree>
  F_LOCK();

  dyn_release_object_heap(&dbp->element, &ch_factory.buf_list);

  F_UNLOCK();
}
 8006676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800667a:	4803      	ldr	r0, [pc, #12]	; (8006688 <chFactoryReleaseBuffer+0x48>)
 800667c:	f7fd bd78 	b.w	8004170 <chMtxUnlock>
      prev->next = element->next;
 8006680:	6803      	ldr	r3, [r0, #0]
 8006682:	6013      	str	r3, [r2, #0]
      return element;
 8006684:	e7f5      	b.n	8006672 <chFactoryReleaseBuffer+0x32>
 8006686:	bf00      	nop
 8006688:	20000b18 	.word	0x20000b18
 800668c:	20000b3c 	.word	0x20000b3c

08006690 <chFactoryReleaseSemaphore>:
 *
 * @param[in] dsp       dynamic semaphore object reference
 *
 * @api
 */
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4604      	mov	r4, r0
 8006694:	2330      	movs	r3, #48	; 0x30
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	4d15      	ldr	r5, [pc, #84]	; (80066f0 <chFactoryReleaseSemaphore+0x60>)
 800669c:	4628      	mov	r0, r5
 800669e:	f7fd fcc7 	bl	8004030 <chMtxLockS>
 80066a2:	2300      	movs	r3, #0
 80066a4:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 80066a8:	6863      	ldr	r3, [r4, #4]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80066ae:	b99b      	cbnz	r3, 80066d8 <chFactoryReleaseSemaphore+0x48>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 80066b0:	f105 0228 	add.w	r2, r5, #40	; 0x28
 80066b4:	4613      	mov	r3, r2
  while (prev->next != (dyn_element_t *)dlp) {
 80066b6:	4619      	mov	r1, r3
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d011      	beq.n	80066e2 <chFactoryReleaseSemaphore+0x52>
    if (prev->next == element) {
 80066be:	429c      	cmp	r4, r3
 80066c0:	d1f9      	bne.n	80066b6 <chFactoryReleaseSemaphore+0x26>
      prev->next = element->next;
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	600b      	str	r3, [r1, #0]
 80066c6:	2330      	movs	r3, #48	; 0x30
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80066ce:	6023      	str	r3, [r4, #0]
 80066d0:	2300      	movs	r3, #0
  mp->next = php;
 80066d2:	62ec      	str	r4, [r5, #44]	; 0x2c
 80066d4:	f383 8811 	msr	BASEPRI, r3
  dyn_release_object_pool(&dsp->element,
                          &ch_factory.sem_list,
                          &ch_factory.sem_pool);

  F_UNLOCK();
}
 80066d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 80066dc:	4804      	ldr	r0, [pc, #16]	; (80066f0 <chFactoryReleaseSemaphore+0x60>)
 80066de:	f7fd bd47 	b.w	8004170 <chMtxUnlock>
 80066e2:	2330      	movs	r3, #48	; 0x30
 80066e4:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 80066e8:	2300      	movs	r3, #0
 80066ea:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	deff      	udf	#255	; 0xff
 80066f0:	20000b18 	.word	0x20000b18
	...

08006700 <chFactoryReleaseMailbox>:
 *
 * @param[in] dmp       dynamic mailbox object reference
 *
 * @api
 */
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8006700:	b510      	push	{r4, lr}
 8006702:	2330      	movs	r3, #48	; 0x30
 8006704:	4604      	mov	r4, r0
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	480f      	ldr	r0, [pc, #60]	; (8006748 <chFactoryReleaseMailbox+0x48>)
 800670c:	f7fd fc90 	bl	8004030 <chMtxLockS>
 8006710:	2300      	movs	r3, #0
 8006712:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 8006716:	6863      	ldr	r3, [r4, #4]
 8006718:	3b01      	subs	r3, #1
 800671a:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800671c:	b95b      	cbnz	r3, 8006736 <chFactoryReleaseMailbox+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800671e:	4b0b      	ldr	r3, [pc, #44]	; (800674c <chFactoryReleaseMailbox+0x4c>)
 8006720:	4618      	mov	r0, r3
 8006722:	e001      	b.n	8006728 <chFactoryReleaseMailbox+0x28>
    if (prev->next == element) {
 8006724:	4284      	cmp	r4, r0
 8006726:	d00b      	beq.n	8006740 <chFactoryReleaseMailbox+0x40>
  while (prev->next != (dyn_element_t *)dlp) {
 8006728:	4602      	mov	r2, r0
 800672a:	6800      	ldr	r0, [r0, #0]
 800672c:	4298      	cmp	r0, r3
 800672e:	d1f9      	bne.n	8006724 <chFactoryReleaseMailbox+0x24>
  return NULL;
 8006730:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8006732:	f7fe f8a5 	bl	8004880 <chHeapFree>
  F_LOCK();

  dyn_release_object_heap(&dmp->element, &ch_factory.mbx_list);

  F_UNLOCK();
}
 8006736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800673a:	4803      	ldr	r0, [pc, #12]	; (8006748 <chFactoryReleaseMailbox+0x48>)
 800673c:	f7fd bd18 	b.w	8004170 <chMtxUnlock>
      prev->next = element->next;
 8006740:	6803      	ldr	r3, [r0, #0]
 8006742:	6013      	str	r3, [r2, #0]
      return element;
 8006744:	e7f5      	b.n	8006732 <chFactoryReleaseMailbox+0x32>
 8006746:	bf00      	nop
 8006748:	20000b18 	.word	0x20000b18
 800674c:	20000b54 	.word	0x20000b54

08006750 <chFactoryReleaseObjectsFIFO>:
 *
 * @param[in] dofp      dynamic "objects FIFO" object reference
 *
 * @api
 */
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 8006750:	b510      	push	{r4, lr}
 8006752:	2330      	movs	r3, #48	; 0x30
 8006754:	4604      	mov	r4, r0
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	480f      	ldr	r0, [pc, #60]	; (8006798 <chFactoryReleaseObjectsFIFO+0x48>)
 800675c:	f7fd fc68 	bl	8004030 <chMtxLockS>
 8006760:	2300      	movs	r3, #0
 8006762:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 8006766:	6863      	ldr	r3, [r4, #4]
 8006768:	3b01      	subs	r3, #1
 800676a:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800676c:	b95b      	cbnz	r3, 8006786 <chFactoryReleaseObjectsFIFO+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800676e:	4b0b      	ldr	r3, [pc, #44]	; (800679c <chFactoryReleaseObjectsFIFO+0x4c>)
 8006770:	4618      	mov	r0, r3
 8006772:	e001      	b.n	8006778 <chFactoryReleaseObjectsFIFO+0x28>
    if (prev->next == element) {
 8006774:	4284      	cmp	r4, r0
 8006776:	d00b      	beq.n	8006790 <chFactoryReleaseObjectsFIFO+0x40>
  while (prev->next != (dyn_element_t *)dlp) {
 8006778:	4602      	mov	r2, r0
 800677a:	6800      	ldr	r0, [r0, #0]
 800677c:	4298      	cmp	r0, r3
 800677e:	d1f9      	bne.n	8006774 <chFactoryReleaseObjectsFIFO+0x24>
  return NULL;
 8006780:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 8006782:	f7fe f87d 	bl	8004880 <chHeapFree>
  F_LOCK();

  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);

  F_UNLOCK();
}
 8006786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 800678a:	4803      	ldr	r0, [pc, #12]	; (8006798 <chFactoryReleaseObjectsFIFO+0x48>)
 800678c:	f7fd bcf0 	b.w	8004170 <chMtxUnlock>
      prev->next = element->next;
 8006790:	6803      	ldr	r3, [r0, #0]
 8006792:	6013      	str	r3, [r2, #0]
      return element;
 8006794:	e7f5      	b.n	8006782 <chFactoryReleaseObjectsFIFO+0x32>
 8006796:	bf00      	nop
 8006798:	20000b18 	.word	0x20000b18
 800679c:	20000b58 	.word	0x20000b58

080067a0 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 80067a0:	b510      	push	{r4, lr}
 80067a2:	2330      	movs	r3, #48	; 0x30
 80067a4:	4604      	mov	r4, r0
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	480f      	ldr	r0, [pc, #60]	; (80067e8 <chFactoryReleasePipe+0x48>)
 80067ac:	f7fd fc40 	bl	8004030 <chMtxLockS>
 80067b0:	2300      	movs	r3, #0
 80067b2:	f383 8811 	msr	BASEPRI, r3
  dep->refs--;
 80067b6:	6863      	ldr	r3, [r4, #4]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 80067bc:	b95b      	cbnz	r3, 80067d6 <chFactoryReleasePipe+0x36>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 80067be:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <chFactoryReleasePipe+0x4c>)
 80067c0:	4618      	mov	r0, r3
 80067c2:	e001      	b.n	80067c8 <chFactoryReleasePipe+0x28>
    if (prev->next == element) {
 80067c4:	4284      	cmp	r4, r0
 80067c6:	d00b      	beq.n	80067e0 <chFactoryReleasePipe+0x40>
  while (prev->next != (dyn_element_t *)dlp) {
 80067c8:	4602      	mov	r2, r0
 80067ca:	6800      	ldr	r0, [r0, #0]
 80067cc:	4298      	cmp	r0, r3
 80067ce:	d1f9      	bne.n	80067c4 <chFactoryReleasePipe+0x24>
  return NULL;
 80067d0:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 80067d2:	f7fe f855 	bl	8004880 <chHeapFree>
  F_LOCK();

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);

  F_UNLOCK();
}
 80067d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 80067da:	4803      	ldr	r0, [pc, #12]	; (80067e8 <chFactoryReleasePipe+0x48>)
 80067dc:	f7fd bcc8 	b.w	8004170 <chMtxUnlock>
      prev->next = element->next;
 80067e0:	6803      	ldr	r3, [r0, #0]
 80067e2:	6013      	str	r3, [r2, #0]
      return element;
 80067e4:	e7f5      	b.n	80067d2 <chFactoryReleasePipe+0x32>
 80067e6:	bf00      	nop
 80067e8:	20000b18 	.word	0x20000b18
 80067ec:	20000b5c 	.word	0x20000b5c

080067f0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80067f0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 80067f4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80067f6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80067fa:	2300      	movs	r3, #0
 80067fc:	f383 8811 	msr	BASEPRI, r3
}
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
	...

08006810 <__test_assert>:
  if (!condition) {
 8006810:	b108      	cbz	r0, 8006816 <__test_assert+0x6>
  return false;
 8006812:	2000      	movs	r0, #0
}
 8006814:	4770      	bx	lr
  chtest.global_fail     = true;
 8006816:	4b03      	ldr	r3, [pc, #12]	; (8006824 <__test_assert+0x14>)
 8006818:	f240 1201 	movw	r2, #257	; 0x101
 800681c:	809a      	strh	r2, [r3, #4]
  chtest.failure_message = msg;
 800681e:	6099      	str	r1, [r3, #8]
    return __test_fail(msg);
 8006820:	2001      	movs	r0, #1
 8006822:	4770      	bx	lr
 8006824:	20000b74 	.word	0x20000b74
	...

08006830 <oslib_test_002_001_execute.lto_priv.0>:
static void oslib_test_002_001_execute(void) {
 8006830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8006834:	4db7      	ldr	r5, [pc, #732]	; (8006b14 <oslib_test_002_001_execute.lto_priv.0+0x2e4>)
 8006836:	2301      	movs	r3, #1
static void oslib_test_002_001_execute(void) {
 8006838:	b085      	sub	sp, #20
  test_set_step(1);
 800683a:	602b      	str	r3, [r5, #0]
 800683c:	2630      	movs	r6, #48	; 0x30
 800683e:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8006842:	4cb5      	ldr	r4, [pc, #724]	; (8006b18 <oslib_test_002_001_execute.lto_priv.0+0x2e8>)
 8006844:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006848:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800684a:	6923      	ldr	r3, [r4, #16]
 800684c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  if (!condition) {
 8006850:	2b04      	cmp	r3, #4
 8006852:	f040 810d 	bne.w	8006a70 <oslib_test_002_001_execute.lto_priv.0+0x240>
 8006856:	f04f 0800 	mov.w	r8, #0
 800685a:	f388 8811 	msr	BASEPRI, r8
  test_set_step(2);
 800685e:	2302      	movs	r3, #2
 8006860:	602b      	str	r3, [r5, #0]
    chMBReset(&mb1);
 8006862:	f00c fc5d 	bl	8013120 <chMBReset.constprop.0>
 8006866:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 800686a:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800686e:	6927      	ldr	r7, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8006870:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006872:	ebc7 07a3 	rsb	r7, r7, r3, asr #2
 8006876:	2f04      	cmp	r7, #4
 8006878:	f040 8105 	bne.w	8006a86 <oslib_test_002_001_execute.lto_priv.0+0x256>
 800687c:	f388 8811 	msr	BASEPRI, r8
 8006880:	f386 8811 	msr	BASEPRI, r6
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	f040 810f 	bne.w	8006aaa <oslib_test_002_001_execute.lto_priv.0+0x27a>
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f386 8811 	msr	BASEPRI, r6
 8006894:	6821      	ldr	r1, [r4, #0]
 8006896:	68a2      	ldr	r2, [r4, #8]
 8006898:	4291      	cmp	r1, r2
 800689a:	f040 80fe 	bne.w	8006a9a <oslib_test_002_001_execute.lto_priv.0+0x26a>
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f386 8811 	msr	BASEPRI, r6
 80068a6:	6821      	ldr	r1, [r4, #0]
 80068a8:	68e2      	ldr	r2, [r4, #12]
 80068aa:	4291      	cmp	r1, r2
 80068ac:	f040 810d 	bne.w	8006aca <oslib_test_002_001_execute.lto_priv.0+0x29a>
 80068b0:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 80068b4:	2203      	movs	r2, #3
 80068b6:	602a      	str	r2, [r5, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 80068b8:	4619      	mov	r1, r3
 80068ba:	f04f 32ff 	mov.w	r2, #4294967295
 80068be:	4620      	mov	r0, r4
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	f7fc f9fd 	bl	8002cc0 <chMBPostTimeout>
 80068c6:	3002      	adds	r0, #2
 80068c8:	9b01      	ldr	r3, [sp, #4]
 80068ca:	f040 80f8 	bne.w	8006abe <oslib_test_002_001_execute.lto_priv.0+0x28e>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 80068ce:	f04f 31ff 	mov.w	r1, #4294967295
 80068d2:	4618      	mov	r0, r3
 80068d4:	9301      	str	r3, [sp, #4]
 80068d6:	f00c fbc3 	bl	8013060 <chMBPostAheadTimeout.constprop.0>
 80068da:	3002      	adds	r0, #2
 80068dc:	f040 80ef 	bne.w	8006abe <oslib_test_002_001_execute.lto_priv.0+0x28e>
 80068e0:	f386 8811 	msr	BASEPRI, r6
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 80068e4:	f04f 32ff 	mov.w	r2, #4294967295
 80068e8:	a903      	add	r1, sp, #12
 80068ea:	4620      	mov	r0, r4
 80068ec:	f7fc fa50 	bl	8002d90 <chMBFetchTimeoutS>
 80068f0:	9b01      	ldr	r3, [sp, #4]
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	3002      	adds	r0, #2
 80068f8:	f040 80e1 	bne.w	8006abe <oslib_test_002_001_execute.lto_priv.0+0x28e>
  mbp->reset = false;
 80068fc:	7523      	strb	r3, [r4, #20]
  test_set_step(4);
 80068fe:	602f      	str	r7, [r5, #0]
 8006900:	2642      	movs	r6, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006902:	4631      	mov	r1, r6
 8006904:	f04f 32ff 	mov.w	r2, #4294967295
 8006908:	4620      	mov	r0, r4
    for (i = 0; i < MB_SIZE - 1; i++) {
 800690a:	3601      	adds	r6, #1
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800690c:	f7fc f9d8 	bl	8002cc0 <chMBPostTimeout>
 8006910:	2800      	cmp	r0, #0
 8006912:	f040 80e2 	bne.w	8006ada <oslib_test_002_001_execute.lto_priv.0+0x2aa>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8006916:	2e45      	cmp	r6, #69	; 0x45
 8006918:	d1f3      	bne.n	8006902 <oslib_test_002_001_execute.lto_priv.0+0xd2>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 800691a:	f04f 31ff 	mov.w	r1, #4294967295
 800691e:	2041      	movs	r0, #65	; 0x41
 8006920:	f00c fb9e 	bl	8013060 <chMBPostAheadTimeout.constprop.0>
 8006924:	4606      	mov	r6, r0
 8006926:	2800      	cmp	r0, #0
 8006928:	f040 80d7 	bne.w	8006ada <oslib_test_002_001_execute.lto_priv.0+0x2aa>
  test_set_step(5);
 800692c:	2305      	movs	r3, #5
 800692e:	602b      	str	r3, [r5, #0]
 8006930:	f04f 0930 	mov.w	r9, #48	; 0x30
 8006934:	f389 8811 	msr	BASEPRI, r9
  return (size_t)(mbp->top - mbp->buffer);
 8006938:	e9d4 2300 	ldrd	r2, r3, [r4]
 800693c:	1a9b      	subs	r3, r3, r2
 800693e:	6922      	ldr	r2, [r4, #16]
 8006940:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8006944:	f040 80cf 	bne.w	8006ae6 <oslib_test_002_001_execute.lto_priv.0+0x2b6>
 8006948:	f380 8811 	msr	BASEPRI, r0
 800694c:	f389 8811 	msr	BASEPRI, r9
  return mbp->cnt;
 8006950:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8006954:	f1b8 0f04 	cmp.w	r8, #4
 8006958:	f040 80cd 	bne.w	8006af6 <oslib_test_002_001_execute.lto_priv.0+0x2c6>
 800695c:	f380 8811 	msr	BASEPRI, r0
 8006960:	f389 8811 	msr	BASEPRI, r9
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8006964:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8006968:	1ac7      	subs	r7, r0, r3
 800696a:	4278      	negs	r0, r7
 800696c:	4178      	adcs	r0, r7
 800696e:	496b      	ldr	r1, [pc, #428]	; (8006b1c <oslib_test_002_001_execute.lto_priv.0+0x2ec>)
 8006970:	f7ff ff4e 	bl	8006810 <__test_assert>
 8006974:	2800      	cmp	r0, #0
 8006976:	f040 80c6 	bne.w	8006b06 <oslib_test_002_001_execute.lto_priv.0+0x2d6>
 800697a:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 800697e:	2306      	movs	r3, #6
 8006980:	4f65      	ldr	r7, [pc, #404]	; (8006b18 <oslib_test_002_001_execute.lto_priv.0+0x2e8>)
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8006982:	4e67      	ldr	r6, [pc, #412]	; (8006b20 <oslib_test_002_001_execute.lto_priv.0+0x2f0>)
 8006984:	602b      	str	r3, [r5, #0]
 8006986:	f389 8811 	msr	BASEPRI, r9
 800698a:	f04f 32ff 	mov.w	r2, #4294967295
 800698e:	a903      	add	r1, sp, #12
 8006990:	4638      	mov	r0, r7
 8006992:	f7fc f9fd 	bl	8002d90 <chMBFetchTimeoutS>
 8006996:	2200      	movs	r2, #0
 8006998:	f382 8811 	msr	BASEPRI, r2
  if (!condition) {
 800699c:	2800      	cmp	r0, #0
 800699e:	f040 809c 	bne.w	8006ada <oslib_test_002_001_execute.lto_priv.0+0x2aa>
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 80069a2:	68eb      	ldr	r3, [r5, #12]
 80069a4:	42b3      	cmp	r3, r6
 80069a6:	d203      	bcs.n	80069b0 <oslib_test_002_001_execute.lto_priv.0+0x180>
      test_emit_token(msg2);
 80069a8:	9a03      	ldr	r2, [sp, #12]
    *chtest.tokp++ = token;
 80069aa:	1c59      	adds	r1, r3, #1
 80069ac:	60e9      	str	r1, [r5, #12]
 80069ae:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MB_SIZE; i++) {
 80069b0:	f1b8 0801 	subs.w	r8, r8, #1
 80069b4:	d1e7      	bne.n	8006986 <oslib_test_002_001_execute.lto_priv.0+0x156>
    test_assert_sequence("ABCD", "wrong get sequence");
 80069b6:	495b      	ldr	r1, [pc, #364]	; (8006b24 <oslib_test_002_001_execute.lto_priv.0+0x2f4>)
 80069b8:	485b      	ldr	r0, [pc, #364]	; (8006b28 <oslib_test_002_001_execute.lto_priv.0+0x2f8>)
 80069ba:	f7f9 fda9 	bl	8000510 <__test_assert_sequence>
 80069be:	2800      	cmp	r0, #0
 80069c0:	d15e      	bne.n	8006a80 <oslib_test_002_001_execute.lto_priv.0+0x250>
  test_set_step(7);
 80069c2:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 80069c4:	2146      	movs	r1, #70	; 0x46
 80069c6:	4854      	ldr	r0, [pc, #336]	; (8006b18 <oslib_test_002_001_execute.lto_priv.0+0x2e8>)
  test_set_step(7);
 80069c8:	602b      	str	r3, [r5, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 80069ca:	f04f 32ff 	mov.w	r2, #4294967295
 80069ce:	f7fc f977 	bl	8002cc0 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80069d2:	fab0 f080 	clz	r0, r0
 80069d6:	4955      	ldr	r1, [pc, #340]	; (8006b2c <oslib_test_002_001_execute.lto_priv.0+0x2fc>)
 80069d8:	0940      	lsrs	r0, r0, #5
 80069da:	f7ff ff19 	bl	8006810 <__test_assert>
 80069de:	2800      	cmp	r0, #0
 80069e0:	d14e      	bne.n	8006a80 <oslib_test_002_001_execute.lto_priv.0+0x250>
 80069e2:	2630      	movs	r6, #48	; 0x30
 80069e4:	f386 8811 	msr	BASEPRI, r6
 80069e8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ec:	a903      	add	r1, sp, #12
 80069ee:	484a      	ldr	r0, [pc, #296]	; (8006b18 <oslib_test_002_001_execute.lto_priv.0+0x2e8>)
 80069f0:	f7fc f9ce 	bl	8002d90 <chMBFetchTimeoutS>
 80069f4:	f388 8811 	msr	BASEPRI, r8
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80069f8:	fab0 f080 	clz	r0, r0
 80069fc:	494b      	ldr	r1, [pc, #300]	; (8006b2c <oslib_test_002_001_execute.lto_priv.0+0x2fc>)
 80069fe:	0940      	lsrs	r0, r0, #5
 8006a00:	f7ff ff06 	bl	8006810 <__test_assert>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d13b      	bne.n	8006a80 <oslib_test_002_001_execute.lto_priv.0+0x250>
  test_set_step(8);
 8006a08:	2308      	movs	r3, #8
 8006a0a:	602b      	str	r3, [r5, #0]
 8006a0c:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8006a10:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a14:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006a16:	6923      	ldr	r3, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8006a18:	4945      	ldr	r1, [pc, #276]	; (8006b30 <oslib_test_002_001_execute.lto_priv.0+0x300>)
 8006a1a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8006a1e:	1f1d      	subs	r5, r3, #4
 8006a20:	4268      	negs	r0, r5
 8006a22:	4168      	adcs	r0, r5
 8006a24:	f7ff fef4 	bl	8006810 <__test_assert>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d16f      	bne.n	8006b0c <oslib_test_002_001_execute.lto_priv.0+0x2dc>
 8006a2c:	f388 8811 	msr	BASEPRI, r8
 8006a30:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8006a34:	6920      	ldr	r0, [r4, #16]
 8006a36:	493f      	ldr	r1, [pc, #252]	; (8006b34 <oslib_test_002_001_execute.lto_priv.0+0x304>)
 8006a38:	fab0 f080 	clz	r0, r0
 8006a3c:	0940      	lsrs	r0, r0, #5
 8006a3e:	f7ff fee7 	bl	8006810 <__test_assert>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d162      	bne.n	8006b0c <oslib_test_002_001_execute.lto_priv.0+0x2dc>
 8006a46:	f388 8811 	msr	BASEPRI, r8
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8006a4a:	68a0      	ldr	r0, [r4, #8]
 8006a4c:	6825      	ldr	r5, [r4, #0]
 8006a4e:	493a      	ldr	r1, [pc, #232]	; (8006b38 <oslib_test_002_001_execute.lto_priv.0+0x308>)
 8006a50:	1b42      	subs	r2, r0, r5
 8006a52:	4250      	negs	r0, r2
 8006a54:	4150      	adcs	r0, r2
 8006a56:	f7ff fedb 	bl	8006810 <__test_assert>
 8006a5a:	b988      	cbnz	r0, 8006a80 <oslib_test_002_001_execute.lto_priv.0+0x250>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8006a5c:	68e0      	ldr	r0, [r4, #12]
 8006a5e:	4937      	ldr	r1, [pc, #220]	; (8006b3c <oslib_test_002_001_execute.lto_priv.0+0x30c>)
 8006a60:	1b43      	subs	r3, r0, r5
 8006a62:	4258      	negs	r0, r3
 8006a64:	4158      	adcs	r0, r3
}
 8006a66:	b005      	add	sp, #20
 8006a68:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8006a6c:	f7ff bed0 	b.w	8006810 <__test_assert>
  chtest.failure_message = msg;
 8006a70:	4b33      	ldr	r3, [pc, #204]	; (8006b40 <oslib_test_002_001_execute.lto_priv.0+0x310>)
 8006a72:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006a74:	f240 1201 	movw	r2, #257	; 0x101
 8006a78:	80aa      	strh	r2, [r5, #4]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f383 8811 	msr	BASEPRI, r3
}
 8006a80:	b005      	add	sp, #20
 8006a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8006a86:	4b2a      	ldr	r3, [pc, #168]	; (8006b30 <oslib_test_002_001_execute.lto_priv.0+0x300>)
 8006a88:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006a8a:	f240 1201 	movw	r2, #257	; 0x101
 8006a8e:	80aa      	strh	r2, [r5, #4]
 8006a90:	f388 8811 	msr	BASEPRI, r8
 8006a94:	b005      	add	sp, #20
 8006a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8006a9a:	4a27      	ldr	r2, [pc, #156]	; (8006b38 <oslib_test_002_001_execute.lto_priv.0+0x308>)
 8006a9c:	60aa      	str	r2, [r5, #8]
  chtest.global_fail     = true;
 8006a9e:	f240 1101 	movw	r1, #257	; 0x101
 8006aa2:	80a9      	strh	r1, [r5, #4]
 8006aa4:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8006aa8:	e7ea      	b.n	8006a80 <oslib_test_002_001_execute.lto_priv.0+0x250>
  chtest.failure_message = msg;
 8006aaa:	4b22      	ldr	r3, [pc, #136]	; (8006b34 <oslib_test_002_001_execute.lto_priv.0+0x304>)
 8006aac:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006aae:	f240 1201 	movw	r2, #257	; 0x101
 8006ab2:	80aa      	strh	r2, [r5, #4]
 8006ab4:	f388 8811 	msr	BASEPRI, r8
}
 8006ab8:	b005      	add	sp, #20
 8006aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  chtest.failure_message = msg;
 8006abe:	4b21      	ldr	r3, [pc, #132]	; (8006b44 <oslib_test_002_001_execute.lto_priv.0+0x314>)
 8006ac0:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006ac2:	f240 1201 	movw	r2, #257	; 0x101
 8006ac6:	80aa      	strh	r2, [r5, #4]
 8006ac8:	e7da      	b.n	8006a80 <oslib_test_002_001_execute.lto_priv.0+0x250>
  chtest.failure_message = msg;
 8006aca:	4a1c      	ldr	r2, [pc, #112]	; (8006b3c <oslib_test_002_001_execute.lto_priv.0+0x30c>)
 8006acc:	60aa      	str	r2, [r5, #8]
  chtest.global_fail     = true;
 8006ace:	f240 1101 	movw	r1, #257	; 0x101
 8006ad2:	80a9      	strh	r1, [r5, #4]
 8006ad4:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8006ad8:	e7d2      	b.n	8006a80 <oslib_test_002_001_execute.lto_priv.0+0x250>
  chtest.failure_message = msg;
 8006ada:	4b14      	ldr	r3, [pc, #80]	; (8006b2c <oslib_test_002_001_execute.lto_priv.0+0x2fc>)
 8006adc:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006ade:	f240 1201 	movw	r2, #257	; 0x101
 8006ae2:	80aa      	strh	r2, [r5, #4]
 8006ae4:	e7cc      	b.n	8006a80 <oslib_test_002_001_execute.lto_priv.0+0x250>
  chtest.failure_message = msg;
 8006ae6:	4b18      	ldr	r3, [pc, #96]	; (8006b48 <oslib_test_002_001_execute.lto_priv.0+0x318>)
 8006ae8:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006aea:	f240 1201 	movw	r2, #257	; 0x101
 8006aee:	80aa      	strh	r2, [r5, #4]
 8006af0:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8006af4:	e7c4      	b.n	8006a80 <oslib_test_002_001_execute.lto_priv.0+0x250>
  chtest.failure_message = msg;
 8006af6:	4b15      	ldr	r3, [pc, #84]	; (8006b4c <oslib_test_002_001_execute.lto_priv.0+0x31c>)
 8006af8:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006afa:	f240 1201 	movw	r2, #257	; 0x101
 8006afe:	80aa      	strh	r2, [r5, #4]
 8006b00:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8006b04:	e7bc      	b.n	8006a80 <oslib_test_002_001_execute.lto_priv.0+0x250>
 8006b06:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8006b0a:	e7b9      	b.n	8006a80 <oslib_test_002_001_execute.lto_priv.0+0x250>
 8006b0c:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8006b10:	e7b6      	b.n	8006a80 <oslib_test_002_001_execute.lto_priv.0+0x250>
 8006b12:	bf00      	nop
 8006b14:	20000b74 	.word	0x20000b74
 8006b18:	2000084c 	.word	0x2000084c
 8006b1c:	08015460 	.word	0x08015460
 8006b20:	20000b94 	.word	0x20000b94
 8006b24:	08015478 	.word	0x08015478
 8006b28:	0801526c 	.word	0x0801526c
 8006b2c:	080150cc 	.word	0x080150cc
 8006b30:	080153d4 	.word	0x080153d4
 8006b34:	080153e0 	.word	0x080153e0
 8006b38:	080153ec 	.word	0x080153ec
 8006b3c:	08015410 	.word	0x08015410
 8006b40:	08014fd8 	.word	0x08014fd8
 8006b44:	08015434 	.word	0x08015434
 8006b48:	08015448 	.word	0x08015448
 8006b4c:	08015454 	.word	0x08015454

08006b50 <oslib_test_002_002_execute.lto_priv.0>:
static void oslib_test_002_002_execute(void) {
 8006b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8006b54:	4dbd      	ldr	r5, [pc, #756]	; (8006e4c <oslib_test_002_002_execute.lto_priv.0+0x2fc>)
 8006b56:	2101      	movs	r1, #1
static void oslib_test_002_002_execute(void) {
 8006b58:	b082      	sub	sp, #8
  test_set_step(1);
 8006b5a:	6029      	str	r1, [r5, #0]
 8006b5c:	2030      	movs	r0, #48	; 0x30
 8006b5e:	f380 8811 	msr	BASEPRI, r0
  return (size_t)(mbp->top - mbp->buffer);
 8006b62:	4cbb      	ldr	r4, [pc, #748]	; (8006e50 <oslib_test_002_002_execute.lto_priv.0+0x300>)
 8006b64:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b68:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006b6a:	6923      	ldr	r3, [r4, #16]
 8006b6c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  if (!condition) {
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	f040 8196 	bne.w	8006ea2 <oslib_test_002_002_execute.lto_priv.0+0x352>
 8006b76:	f04f 0c00 	mov.w	ip, #0
 8006b7a:	f38c 8811 	msr	BASEPRI, ip
  test_set_step(2);
 8006b7e:	2302      	movs	r3, #2
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	f380 8811 	msr	BASEPRI, r0
  return (bool)(qp->next != qp);
 8006b86:	4626      	mov	r6, r4
  mbp->reset = true;
 8006b88:	7521      	strb	r1, [r4, #20]
 8006b8a:	f856 1f18 	ldr.w	r1, [r6, #24]!
  mbp->wrptr = mbp->buffer;
 8006b8e:	6823      	ldr	r3, [r4, #0]
  mbp->cnt   = (size_t)0;
 8006b90:	f8c4 c010 	str.w	ip, [r4, #16]
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (ch_queue_notempty(&tqp->queue)) {
 8006b94:	42b1      	cmp	r1, r6
  mbp->rdptr = mbp->buffer;
 8006b96:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8006b9a:	d016      	beq.n	8006bca <oslib_test_002_002_execute.lto_priv.0+0x7a>
  tp->u.rdymsg = msg;
 8006b9c:	f06f 0e01 	mvn.w	lr, #1
 8006ba0:	460b      	mov	r3, r1
  qp->next       = p->next;
 8006ba2:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8006ba4:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8006ba6:	689f      	ldr	r7, [r3, #8]
  qp->next       = p->next;
 8006ba8:	61a1      	str	r1, [r4, #24]
  qp->next->prev = qp;
 8006baa:	604e      	str	r6, [r1, #4]
 8006bac:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8006bb0:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
    pqp = pqp->next;
 8006bb4:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8006bb6:	6890      	ldr	r0, [r2, #8]
 8006bb8:	42b8      	cmp	r0, r7
 8006bba:	d2fb      	bcs.n	8006bb4 <oslib_test_002_002_execute.lto_priv.0+0x64>
  p->prev       = pqp->prev;
 8006bbc:	6850      	ldr	r0, [r2, #4]
 8006bbe:	42b1      	cmp	r1, r6
 8006bc0:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8006bc4:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8006bc6:	6053      	str	r3, [r2, #4]
 8006bc8:	d1ea      	bne.n	8006ba0 <oslib_test_002_002_execute.lto_priv.0+0x50>
  return (bool)(qp->next != qp);
 8006bca:	6a21      	ldr	r1, [r4, #32]
 8006bcc:	4fa1      	ldr	r7, [pc, #644]	; (8006e54 <oslib_test_002_002_execute.lto_priv.0+0x304>)
 8006bce:	42b9      	cmp	r1, r7
 8006bd0:	d019      	beq.n	8006c06 <oslib_test_002_002_execute.lto_priv.0+0xb6>
 8006bd2:	f06f 0801 	mvn.w	r8, #1
 8006bd6:	f04f 0e00 	mov.w	lr, #0
 8006bda:	460b      	mov	r3, r1
  qp->next       = p->next;
 8006bdc:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8006bde:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8006be0:	6898      	ldr	r0, [r3, #8]
  qp->next       = p->next;
 8006be2:	6221      	str	r1, [r4, #32]
  qp->next->prev = qp;
 8006be4:	604f      	str	r7, [r1, #4]
 8006be6:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8006bea:	f883 e024 	strb.w	lr, [r3, #36]	; 0x24
    pqp = pqp->next;
 8006bee:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8006bf0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006bf4:	4584      	cmp	ip, r0
 8006bf6:	d2fa      	bcs.n	8006bee <oslib_test_002_002_execute.lto_priv.0+0x9e>
  p->prev       = pqp->prev;
 8006bf8:	6850      	ldr	r0, [r2, #4]
 8006bfa:	42b9      	cmp	r1, r7
 8006bfc:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 8006c00:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 8006c02:	6053      	str	r3, [r2, #4]
 8006c04:	d1e9      	bne.n	8006bda <oslib_test_002_002_execute.lto_priv.0+0x8a>
 8006c06:	2100      	movs	r1, #0
 8006c08:	f381 8811 	msr	BASEPRI, r1
 8006c0c:	2030      	movs	r0, #48	; 0x30
 8006c0e:	f380 8811 	msr	BASEPRI, r0
  return (size_t)(mbp->top - mbp->buffer);
 8006c12:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006c16:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006c18:	6923      	ldr	r3, [r4, #16]
 8006c1a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	f040 814a 	bne.w	8006eb8 <oslib_test_002_002_execute.lto_priv.0+0x368>
 8006c24:	f381 8811 	msr	BASEPRI, r1
 8006c28:	f380 8811 	msr	BASEPRI, r0
 8006c2c:	6923      	ldr	r3, [r4, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f040 8154 	bne.w	8006edc <oslib_test_002_002_execute.lto_priv.0+0x38c>
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f380 8811 	msr	BASEPRI, r0
 8006c3c:	6821      	ldr	r1, [r4, #0]
 8006c3e:	68a2      	ldr	r2, [r4, #8]
 8006c40:	4291      	cmp	r1, r2
 8006c42:	f040 8143 	bne.w	8006ecc <oslib_test_002_002_execute.lto_priv.0+0x37c>
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f380 8811 	msr	BASEPRI, r0
 8006c4e:	6821      	ldr	r1, [r4, #0]
 8006c50:	68e2      	ldr	r2, [r4, #12]
 8006c52:	4291      	cmp	r1, r2
 8006c54:	f040 8154 	bne.w	8006f00 <oslib_test_002_002_execute.lto_priv.0+0x3b0>
 8006c58:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8006c5c:	2203      	movs	r2, #3
  mbp->reset = false;
 8006c5e:	7523      	strb	r3, [r4, #20]
 8006c60:	602a      	str	r2, [r5, #0]
 8006c62:	f04f 0c42 	mov.w	ip, #66	; 0x42
 8006c66:	4698      	mov	r8, r3
 8006c68:	f380 8811 	msr	BASEPRI, r0
  if (mbp->reset) {
 8006c6c:	f894 e014 	ldrb.w	lr, [r4, #20]
 8006c70:	f1be 0f00 	cmp.w	lr, #0
 8006c74:	f040 815c 	bne.w	8006f30 <oslib_test_002_002_execute.lto_priv.0+0x3e0>
  return (size_t)(mbp->top - mbp->buffer);
 8006c78:	e9d4 1900 	ldrd	r1, r9, [r4]
  return mbp->cnt;
 8006c7c:	6922      	ldr	r2, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8006c7e:	eba9 0a01 	sub.w	sl, r9, r1
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8006c82:	ebb2 0faa 	cmp.w	r2, sl, asr #2
 8006c86:	f000 8133 	beq.w	8006ef0 <oslib_test_002_002_execute.lto_priv.0+0x3a0>
    *mbp->wrptr++ = msg;
 8006c8a:	f8d4 a008 	ldr.w	sl, [r4, #8]
    mbp->cnt++;
 8006c8e:	3201      	adds	r2, #1
    *mbp->wrptr++ = msg;
 8006c90:	f10a 0e04 	add.w	lr, sl, #4
 8006c94:	f8c4 e008 	str.w	lr, [r4, #8]
 8006c98:	f8ca c000 	str.w	ip, [sl]
    mbp->cnt++;
 8006c9c:	6122      	str	r2, [r4, #16]
  return (bool)(qp->next != qp);
 8006c9e:	6a22      	ldr	r2, [r4, #32]
    if (mbp->wrptr >= mbp->top) {
 8006ca0:	45f1      	cmp	r9, lr
      mbp->wrptr = mbp->buffer;
 8006ca2:	bf88      	it	hi
 8006ca4:	68a1      	ldrhi	r1, [r4, #8]
 8006ca6:	60a1      	str	r1, [r4, #8]
  if (ch_queue_notempty(&tqp->queue)) {
 8006ca8:	42ba      	cmp	r2, r7
 8006caa:	d016      	beq.n	8006cda <oslib_test_002_002_execute.lto_priv.0+0x18a>
  qp->next       = p->next;
 8006cac:	6811      	ldr	r1, [r2, #0]
 8006cae:	6221      	str	r1, [r4, #32]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8006cb0:	f8d2 e018 	ldr.w	lr, [r2, #24]
  qp->next->prev = qp;
 8006cb4:	604f      	str	r7, [r1, #4]
  } while (unlikely(pqp->prio >= p->prio));
 8006cb6:	6891      	ldr	r1, [r2, #8]
 8006cb8:	6293      	str	r3, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8006cba:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    pqp = pqp->next;
 8006cbe:	f8de e000 	ldr.w	lr, [lr]
  } while (unlikely(pqp->prio >= p->prio));
 8006cc2:	f8de 9008 	ldr.w	r9, [lr, #8]
 8006cc6:	4589      	cmp	r9, r1
 8006cc8:	d2f9      	bcs.n	8006cbe <oslib_test_002_002_execute.lto_priv.0+0x16e>
  p->prev       = pqp->prev;
 8006cca:	f8de 1004 	ldr.w	r1, [lr, #4]
  p->next       = pqp;
 8006cce:	f8c2 e000 	str.w	lr, [r2]
  p->prev       = pqp->prev;
 8006cd2:	6051      	str	r1, [r2, #4]
  p->prev->next = p;
 8006cd4:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 8006cd6:	f8ce 2004 	str.w	r2, [lr, #4]
 8006cda:	f388 8811 	msr	BASEPRI, r8
    for (i = 0; i < MB_SIZE - 1; i++) {
 8006cde:	f10c 0c01 	add.w	ip, ip, #1
 8006ce2:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
 8006ce6:	d1bf      	bne.n	8006c68 <oslib_test_002_002_execute.lto_priv.0+0x118>
 8006ce8:	2730      	movs	r7, #48	; 0x30
 8006cea:	f387 8811 	msr	BASEPRI, r7
    msg1 = chMBPostAheadI(&mb1, 'A');
 8006cee:	2041      	movs	r0, #65	; 0x41
 8006cf0:	f00c f976 	bl	8012fe0 <chMBPostAheadI.constprop.0>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	f040 80fa 	bne.w	8006ef4 <oslib_test_002_002_execute.lto_priv.0+0x3a4>
  test_set_step(4);
 8006d00:	2304      	movs	r3, #4
 8006d02:	602b      	str	r3, [r5, #0]
 8006d04:	f387 8811 	msr	BASEPRI, r7
 8006d08:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d0c:	1a9b      	subs	r3, r3, r2
 8006d0e:	6922      	ldr	r2, [r4, #16]
 8006d10:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8006d14:	f040 80fc 	bne.w	8006f10 <oslib_test_002_002_execute.lto_priv.0+0x3c0>
 8006d18:	f380 8811 	msr	BASEPRI, r0
 8006d1c:	f387 8811 	msr	BASEPRI, r7
  return mbp->cnt;
 8006d20:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8006d24:	f1b8 0f04 	cmp.w	r8, #4
 8006d28:	f040 80fa 	bne.w	8006f20 <oslib_test_002_002_execute.lto_priv.0+0x3d0>
 8006d2c:	f380 8811 	msr	BASEPRI, r0
 8006d30:	f387 8811 	msr	BASEPRI, r7
 8006d34:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	f040 80fd 	bne.w	8006f38 <oslib_test_002_002_execute.lto_priv.0+0x3e8>
 8006d3e:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 8006d42:	2305      	movs	r3, #5
 8006d44:	46bc      	mov	ip, r7
  if (chtest.tokp < &chtest.tokens_buffer[TEST_CFG_MAX_TOKENS]) {
 8006d46:	4f44      	ldr	r7, [pc, #272]	; (8006e58 <oslib_test_002_002_execute.lto_priv.0+0x308>)
 8006d48:	602b      	str	r3, [r5, #0]
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	f38c 8811 	msr	BASEPRI, ip
  if (mbp->reset) {
 8006d50:	7d23      	ldrb	r3, [r4, #20]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f040 80ec 	bne.w	8006f30 <oslib_test_002_002_execute.lto_priv.0+0x3e0>
 8006d58:	6923      	ldr	r3, [r4, #16]
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80e9 	beq.w	8006f32 <oslib_test_002_002_execute.lto_priv.0+0x3e2>
    *msgp = *mbp->rdptr++;
 8006d60:	68e1      	ldr	r1, [r4, #12]
 8006d62:	f8d1 e000 	ldr.w	lr, [r1]
 8006d66:	f8cd e004 	str.w	lr, [sp, #4]
    if (mbp->rdptr >= mbp->top) {
 8006d6a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    *msgp = *mbp->rdptr++;
 8006d6e:	3104      	adds	r1, #4
    mbp->cnt--;
 8006d70:	3b01      	subs	r3, #1
    if (mbp->rdptr >= mbp->top) {
 8006d72:	4571      	cmp	r1, lr
    mbp->cnt--;
 8006d74:	6123      	str	r3, [r4, #16]
  return (bool)(qp->next != qp);
 8006d76:	69a3      	ldr	r3, [r4, #24]
    *msgp = *mbp->rdptr++;
 8006d78:	60e1      	str	r1, [r4, #12]
      mbp->rdptr = mbp->buffer;
 8006d7a:	bf24      	itt	cs
 8006d7c:	6821      	ldrcs	r1, [r4, #0]
 8006d7e:	60e1      	strcs	r1, [r4, #12]
 8006d80:	42b3      	cmp	r3, r6
 8006d82:	d016      	beq.n	8006db2 <oslib_test_002_002_execute.lto_priv.0+0x262>
  qp->next       = p->next;
 8006d84:	6819      	ldr	r1, [r3, #0]
 8006d86:	61a1      	str	r1, [r4, #24]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8006d88:	f8d3 e018 	ldr.w	lr, [r3, #24]
  qp->next->prev = qp;
 8006d8c:	604e      	str	r6, [r1, #4]
  } while (unlikely(pqp->prio >= p->prio));
 8006d8e:	6899      	ldr	r1, [r3, #8]
 8006d90:	6298      	str	r0, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8006d92:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
    pqp = pqp->next;
 8006d96:	f8de e000 	ldr.w	lr, [lr]
  } while (unlikely(pqp->prio >= p->prio));
 8006d9a:	f8de 9008 	ldr.w	r9, [lr, #8]
 8006d9e:	4589      	cmp	r9, r1
 8006da0:	d2f9      	bcs.n	8006d96 <oslib_test_002_002_execute.lto_priv.0+0x246>
  p->prev       = pqp->prev;
 8006da2:	f8de 1004 	ldr.w	r1, [lr, #4]
  p->next       = pqp;
 8006da6:	f8c3 e000 	str.w	lr, [r3]
  p->prev       = pqp->prev;
 8006daa:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 8006dac:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8006dae:	f8ce 3004 	str.w	r3, [lr, #4]
 8006db2:	f382 8811 	msr	BASEPRI, r2
 8006db6:	68e9      	ldr	r1, [r5, #12]
 8006db8:	42b9      	cmp	r1, r7
 8006dba:	d203      	bcs.n	8006dc4 <oslib_test_002_002_execute.lto_priv.0+0x274>
    *chtest.tokp++ = token;
 8006dbc:	1c4b      	adds	r3, r1, #1
 8006dbe:	60eb      	str	r3, [r5, #12]
      test_emit_token(msg2);
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	700b      	strb	r3, [r1, #0]
    for (i = 0; i < MB_SIZE; i++) {
 8006dc4:	f1b8 0801 	subs.w	r8, r8, #1
 8006dc8:	d1c0      	bne.n	8006d4c <oslib_test_002_002_execute.lto_priv.0+0x1fc>
    test_assert_sequence("ABCD", "wrong get sequence");
 8006dca:	4924      	ldr	r1, [pc, #144]	; (8006e5c <oslib_test_002_002_execute.lto_priv.0+0x30c>)
 8006dcc:	4824      	ldr	r0, [pc, #144]	; (8006e60 <oslib_test_002_002_execute.lto_priv.0+0x310>)
 8006dce:	f7f9 fb9f 	bl	8000510 <__test_assert_sequence>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d16d      	bne.n	8006eb2 <oslib_test_002_002_execute.lto_priv.0+0x362>
  test_set_step(6);
 8006dd6:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006dd8:	481d      	ldr	r0, [pc, #116]	; (8006e50 <oslib_test_002_002_execute.lto_priv.0+0x300>)
  test_set_step(6);
 8006dda:	602b      	str	r3, [r5, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8006ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8006de0:	2146      	movs	r1, #70	; 0x46
 8006de2:	f7fb ff6d 	bl	8002cc0 <chMBPostTimeout>
  if (!condition) {
 8006de6:	2800      	cmp	r0, #0
 8006de8:	f040 8084 	bne.w	8006ef4 <oslib_test_002_002_execute.lto_priv.0+0x3a4>
 8006dec:	2630      	movs	r6, #48	; 0x30
 8006dee:	f386 8811 	msr	BASEPRI, r6
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 8006df2:	f04f 32ff 	mov.w	r2, #4294967295
 8006df6:	a901      	add	r1, sp, #4
 8006df8:	4815      	ldr	r0, [pc, #84]	; (8006e50 <oslib_test_002_002_execute.lto_priv.0+0x300>)
 8006dfa:	f7fb ffc9 	bl	8002d90 <chMBFetchTimeoutS>
 8006dfe:	f388 8811 	msr	BASEPRI, r8
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006e02:	fab0 f080 	clz	r0, r0
 8006e06:	4917      	ldr	r1, [pc, #92]	; (8006e64 <oslib_test_002_002_execute.lto_priv.0+0x314>)
 8006e08:	0940      	lsrs	r0, r0, #5
 8006e0a:	f7ff fd01 	bl	8006810 <__test_assert>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d14f      	bne.n	8006eb2 <oslib_test_002_002_execute.lto_priv.0+0x362>
  test_set_step(7);
 8006e12:	2307      	movs	r3, #7
 8006e14:	602b      	str	r3, [r5, #0]
 8006e16:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8006e1a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006e1e:	1a9a      	subs	r2, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006e20:	6923      	ldr	r3, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8006e22:	4911      	ldr	r1, [pc, #68]	; (8006e68 <oslib_test_002_002_execute.lto_priv.0+0x318>)
 8006e24:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8006e28:	1f1d      	subs	r5, r3, #4
 8006e2a:	4268      	negs	r0, r5
 8006e2c:	4168      	adcs	r0, r5
 8006e2e:	f7ff fcef 	bl	8006810 <__test_assert>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	f040 8088 	bne.w	8006f48 <oslib_test_002_002_execute.lto_priv.0+0x3f8>
 8006e38:	f388 8811 	msr	BASEPRI, r8
 8006e3c:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8006e40:	6920      	ldr	r0, [r4, #16]
 8006e42:	490a      	ldr	r1, [pc, #40]	; (8006e6c <oslib_test_002_002_execute.lto_priv.0+0x31c>)
 8006e44:	fab0 f080 	clz	r0, r0
 8006e48:	0940      	lsrs	r0, r0, #5
 8006e4a:	e011      	b.n	8006e70 <oslib_test_002_002_execute.lto_priv.0+0x320>
 8006e4c:	20000b74 	.word	0x20000b74
 8006e50:	2000084c 	.word	0x2000084c
 8006e54:	2000086c 	.word	0x2000086c
 8006e58:	20000b94 	.word	0x20000b94
 8006e5c:	08015478 	.word	0x08015478
 8006e60:	0801526c 	.word	0x0801526c
 8006e64:	080150cc 	.word	0x080150cc
 8006e68:	080153d4 	.word	0x080153d4
 8006e6c:	080153e0 	.word	0x080153e0
 8006e70:	f7ff fcce 	bl	8006810 <__test_assert>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d167      	bne.n	8006f48 <oslib_test_002_002_execute.lto_priv.0+0x3f8>
 8006e78:	f388 8811 	msr	BASEPRI, r8
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8006e7c:	68a0      	ldr	r0, [r4, #8]
 8006e7e:	6825      	ldr	r5, [r4, #0]
 8006e80:	4933      	ldr	r1, [pc, #204]	; (8006f50 <oslib_test_002_002_execute.lto_priv.0+0x400>)
 8006e82:	1b42      	subs	r2, r0, r5
 8006e84:	4250      	negs	r0, r2
 8006e86:	4150      	adcs	r0, r2
 8006e88:	f7ff fcc2 	bl	8006810 <__test_assert>
 8006e8c:	b988      	cbnz	r0, 8006eb2 <oslib_test_002_002_execute.lto_priv.0+0x362>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8006e8e:	68e0      	ldr	r0, [r4, #12]
 8006e90:	4930      	ldr	r1, [pc, #192]	; (8006f54 <oslib_test_002_002_execute.lto_priv.0+0x404>)
 8006e92:	1b43      	subs	r3, r0, r5
 8006e94:	4258      	negs	r0, r3
 8006e96:	4158      	adcs	r0, r3
}
 8006e98:	b002      	add	sp, #8
 8006e9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8006e9e:	f7ff bcb7 	b.w	8006810 <__test_assert>
  chtest.failure_message = msg;
 8006ea2:	4b2d      	ldr	r3, [pc, #180]	; (8006f58 <oslib_test_002_002_execute.lto_priv.0+0x408>)
 8006ea4:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006ea6:	f240 1201 	movw	r2, #257	; 0x101
 8006eaa:	80aa      	strh	r2, [r5, #4]
 8006eac:	2300      	movs	r3, #0
 8006eae:	f383 8811 	msr	BASEPRI, r3
}
 8006eb2:	b002      	add	sp, #8
 8006eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.failure_message = msg;
 8006eb8:	4b28      	ldr	r3, [pc, #160]	; (8006f5c <oslib_test_002_002_execute.lto_priv.0+0x40c>)
 8006eba:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006ebc:	f240 1201 	movw	r2, #257	; 0x101
 8006ec0:	80aa      	strh	r2, [r5, #4]
 8006ec2:	f381 8811 	msr	BASEPRI, r1
 8006ec6:	b002      	add	sp, #8
 8006ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.failure_message = msg;
 8006ecc:	4a20      	ldr	r2, [pc, #128]	; (8006f50 <oslib_test_002_002_execute.lto_priv.0+0x400>)
 8006ece:	60aa      	str	r2, [r5, #8]
  chtest.global_fail     = true;
 8006ed0:	f240 1101 	movw	r1, #257	; 0x101
 8006ed4:	80a9      	strh	r1, [r5, #4]
 8006ed6:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8006eda:	e7ea      	b.n	8006eb2 <oslib_test_002_002_execute.lto_priv.0+0x362>
  chtest.failure_message = msg;
 8006edc:	4b20      	ldr	r3, [pc, #128]	; (8006f60 <oslib_test_002_002_execute.lto_priv.0+0x410>)
 8006ede:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006ee0:	f240 1201 	movw	r2, #257	; 0x101
 8006ee4:	80aa      	strh	r2, [r5, #4]
 8006ee6:	f381 8811 	msr	BASEPRI, r1
}
 8006eea:	b002      	add	sp, #8
 8006eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef0:	f38e 8811 	msr	BASEPRI, lr
  chtest.failure_message = msg;
 8006ef4:	4b1b      	ldr	r3, [pc, #108]	; (8006f64 <oslib_test_002_002_execute.lto_priv.0+0x414>)
 8006ef6:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006ef8:	f240 1201 	movw	r2, #257	; 0x101
 8006efc:	80aa      	strh	r2, [r5, #4]
 8006efe:	e7d8      	b.n	8006eb2 <oslib_test_002_002_execute.lto_priv.0+0x362>
  chtest.failure_message = msg;
 8006f00:	4a14      	ldr	r2, [pc, #80]	; (8006f54 <oslib_test_002_002_execute.lto_priv.0+0x404>)
 8006f02:	60aa      	str	r2, [r5, #8]
  chtest.global_fail     = true;
 8006f04:	f240 1101 	movw	r1, #257	; 0x101
 8006f08:	80a9      	strh	r1, [r5, #4]
 8006f0a:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8006f0e:	e7d0      	b.n	8006eb2 <oslib_test_002_002_execute.lto_priv.0+0x362>
  chtest.failure_message = msg;
 8006f10:	4b15      	ldr	r3, [pc, #84]	; (8006f68 <oslib_test_002_002_execute.lto_priv.0+0x418>)
 8006f12:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006f14:	f240 1201 	movw	r2, #257	; 0x101
 8006f18:	80aa      	strh	r2, [r5, #4]
 8006f1a:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8006f1e:	e7c8      	b.n	8006eb2 <oslib_test_002_002_execute.lto_priv.0+0x362>
  chtest.failure_message = msg;
 8006f20:	4b12      	ldr	r3, [pc, #72]	; (8006f6c <oslib_test_002_002_execute.lto_priv.0+0x41c>)
 8006f22:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006f24:	f240 1201 	movw	r2, #257	; 0x101
 8006f28:	80aa      	strh	r2, [r5, #4]
 8006f2a:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8006f2e:	e7c0      	b.n	8006eb2 <oslib_test_002_002_execute.lto_priv.0+0x362>
 8006f30:	2300      	movs	r3, #0
 8006f32:	f383 8811 	msr	BASEPRI, r3
bool __test_assert(bool condition, const char *msg) {
 8006f36:	e7dd      	b.n	8006ef4 <oslib_test_002_002_execute.lto_priv.0+0x3a4>
  chtest.failure_message = msg;
 8006f38:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <oslib_test_002_002_execute.lto_priv.0+0x420>)
 8006f3a:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8006f3c:	f240 1201 	movw	r2, #257	; 0x101
 8006f40:	80aa      	strh	r2, [r5, #4]
 8006f42:	f380 8811 	msr	BASEPRI, r0
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8006f46:	e7b4      	b.n	8006eb2 <oslib_test_002_002_execute.lto_priv.0+0x362>
 8006f48:	f388 8811 	msr	BASEPRI, r8
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8006f4c:	e7b1      	b.n	8006eb2 <oslib_test_002_002_execute.lto_priv.0+0x362>
 8006f4e:	bf00      	nop
 8006f50:	080153ec 	.word	0x080153ec
 8006f54:	08015410 	.word	0x08015410
 8006f58:	08014fd8 	.word	0x08014fd8
 8006f5c:	080153d4 	.word	0x080153d4
 8006f60:	080153e0 	.word	0x080153e0
 8006f64:	080150cc 	.word	0x080150cc
 8006f68:	08015448 	.word	0x08015448
 8006f6c:	08015454 	.word	0x08015454
 8006f70:	08015460 	.word	0x08015460
	...

08006f80 <oslib_test_003_001_execute.lto_priv.0>:
static void oslib_test_003_001_execute(void) {
 8006f80:	b5f0      	push	{r4, r5, r6, r7, lr}
  test_set_step(1);
 8006f82:	4d60      	ldr	r5, [pc, #384]	; (8007104 <oslib_test_003_001_execute.lto_priv.0+0x184>)
 8006f84:	2701      	movs	r7, #1
static void oslib_test_003_001_execute(void) {
 8006f86:	b085      	sub	sp, #20
  test_set_step(1);
 8006f88:	602f      	str	r7, [r5, #0]
 8006f8a:	2630      	movs	r6, #48	; 0x30
 8006f8c:	f386 8811 	msr	BASEPRI, r6
 8006f90:	4c5d      	ldr	r4, [pc, #372]	; (8007108 <oslib_test_003_001_execute.lto_priv.0+0x188>)
 8006f92:	f104 0020 	add.w	r0, r4, #32
 8006f96:	f7fd f84b 	bl	8004030 <chMtxLockS>
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f382 8811 	msr	BASEPRI, r2
  pp->wrptr = pp->buffer;
 8006fa0:	6823      	ldr	r3, [r4, #0]
  pp->reset = true;
 8006fa2:	7527      	strb	r7, [r4, #20]
  pp->rdptr = pp->buffer;
 8006fa4:	e9c4 3302 	strd	r3, r3, [r4, #8]
  pp->cnt   = (size_t)0;
 8006fa8:	6122      	str	r2, [r4, #16]
 8006faa:	f386 8811 	msr	BASEPRI, r6
  if (*trp != NULL) {
 8006fae:	69a3      	ldr	r3, [r4, #24]
 8006fb0:	b183      	cbz	r3, 8006fd4 <oslib_test_003_001_execute.lto_priv.0+0x54>
    tp->u.rdymsg = msg;
 8006fb2:	f06f 0101 	mvn.w	r1, #1
 8006fb6:	6299      	str	r1, [r3, #40]	; 0x28
  } while (unlikely(pqp->prio >= p->prio));
 8006fb8:	6898      	ldr	r0, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8006fba:	6999      	ldr	r1, [r3, #24]
    *trp = NULL;
 8006fbc:	61a2      	str	r2, [r4, #24]
  tp->state = CH_STATE_READY;
 8006fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    pqp = pqp->next;
 8006fc2:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8006fc4:	688a      	ldr	r2, [r1, #8]
 8006fc6:	4282      	cmp	r2, r0
 8006fc8:	d2fb      	bcs.n	8006fc2 <oslib_test_003_001_execute.lto_priv.0+0x42>
  p->prev       = pqp->prev;
 8006fca:	684a      	ldr	r2, [r1, #4]
 8006fcc:	e9c3 1200 	strd	r1, r2, [r3]
  p->prev->next = p;
 8006fd0:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 8006fd2:	604b      	str	r3, [r1, #4]
  if (*trp != NULL) {
 8006fd4:	69e3      	ldr	r3, [r4, #28]
 8006fd6:	b18b      	cbz	r3, 8006ffc <oslib_test_003_001_execute.lto_priv.0+0x7c>
    tp->u.rdymsg = msg;
 8006fd8:	f06f 0201 	mvn.w	r2, #1
    *trp = NULL;
 8006fdc:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
 8006fde:	629a      	str	r2, [r3, #40]	; 0x28
  } while (unlikely(pqp->prio >= p->prio));
 8006fe0:	6898      	ldr	r0, [r3, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8006fe2:	699a      	ldr	r2, [r3, #24]
    *trp = NULL;
 8006fe4:	61e1      	str	r1, [r4, #28]
  tp->state = CH_STATE_READY;
 8006fe6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 8006fea:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8006fec:	6891      	ldr	r1, [r2, #8]
 8006fee:	4281      	cmp	r1, r0
 8006ff0:	d2fb      	bcs.n	8006fea <oslib_test_003_001_execute.lto_priv.0+0x6a>
  p->prev       = pqp->prev;
 8006ff2:	6851      	ldr	r1, [r2, #4]
 8006ff4:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 8006ff8:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8006ffa:	6053      	str	r3, [r2, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8006ffc:	4b43      	ldr	r3, [pc, #268]	; (800710c <oslib_test_003_001_execute.lto_priv.0+0x18c>)
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	6892      	ldr	r2, [r2, #8]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	429a      	cmp	r2, r3
 8007008:	d901      	bls.n	800700e <oslib_test_003_001_execute.lto_priv.0+0x8e>
    __sch_reschedule_ahead();
 800700a:	f7fa ffa1 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 800700e:	2300      	movs	r3, #0
 8007010:	f383 8811 	msr	BASEPRI, r3
  PC_UNLOCK(pp);
 8007014:	483e      	ldr	r0, [pc, #248]	; (8007110 <oslib_test_003_001_execute.lto_priv.0+0x190>)
 8007016:	f7fd f8ab 	bl	8004170 <chMtxUnlock>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800701a:	6822      	ldr	r2, [r4, #0]
 800701c:	68e3      	ldr	r3, [r4, #12]
 800701e:	4293      	cmp	r3, r2
 8007020:	d006      	beq.n	8007030 <oslib_test_003_001_execute.lto_priv.0+0xb0>
 8007022:	4b3c      	ldr	r3, [pc, #240]	; (8007114 <oslib_test_003_001_execute.lto_priv.0+0x194>)
  chtest.failure_message = msg;
 8007024:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 8007026:	f240 1201 	movw	r2, #257	; 0x101
 800702a:	80aa      	strh	r2, [r5, #4]
}
 800702c:	b005      	add	sp, #20
 800702e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8007030:	68a1      	ldr	r1, [r4, #8]
 8007032:	428b      	cmp	r3, r1
 8007034:	d1f5      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 8007036:	6923      	ldr	r3, [r4, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1f2      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
  if (pp->reset) {
 800703c:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(2);
 800703e:	2202      	movs	r2, #2
 8007040:	602a      	str	r2, [r5, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d037      	beq.n	80070b6 <oslib_test_003_001_execute.lto_priv.0+0x136>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8007046:	6923      	ldr	r3, [r4, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1ea      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
  if (pp->reset) {
 800704c:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(3);
 800704e:	2203      	movs	r2, #3
 8007050:	602a      	str	r2, [r5, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d03d      	beq.n	80070d2 <oslib_test_003_001_execute.lto_priv.0+0x152>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	428b      	cmp	r3, r1
 800705a:	d1e2      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {

  pp->reset = false;
 800705c:	2200      	movs	r2, #0
  test_set_step(5);
 800705e:	2305      	movs	r3, #5
 8007060:	2010      	movs	r0, #16
 8007062:	7522      	strb	r2, [r4, #20]
 8007064:	602b      	str	r3, [r5, #0]
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 8007066:	f00c fabb 	bl	80135e0 <chPipeWriteTimeout.part.0.constprop.0>
  if (!condition) {
 800706a:	2810      	cmp	r0, #16
 800706c:	d142      	bne.n	80070f4 <oslib_test_003_001_execute.lto_priv.0+0x174>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800706e:	6822      	ldr	r2, [r4, #0]
 8007070:	68e3      	ldr	r3, [r4, #12]
 8007072:	4293      	cmp	r3, r2
 8007074:	d1d5      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 8007076:	68a2      	ldr	r2, [r4, #8]
 8007078:	4293      	cmp	r3, r2
 800707a:	d1d2      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800707c:	6921      	ldr	r1, [r4, #16]
 800707e:	2910      	cmp	r1, #16
 8007080:	d1cf      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
  if (pp->reset) {
 8007082:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(6);
 8007084:	2206      	movs	r2, #6
 8007086:	602a      	str	r2, [r5, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d139      	bne.n	8007100 <oslib_test_003_001_execute.lto_priv.0+0x180>
 800708c:	4668      	mov	r0, sp
 800708e:	f00c fa37 	bl	8013500 <chPipeReadTimeout.part.0.constprop.0>
 8007092:	2810      	cmp	r0, #16
 8007094:	d134      	bne.n	8007100 <oslib_test_003_001_execute.lto_priv.0+0x180>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8007096:	6822      	ldr	r2, [r4, #0]
 8007098:	68e3      	ldr	r3, [r4, #12]
 800709a:	4293      	cmp	r3, r2
 800709c:	d1c1      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800709e:	68a2      	ldr	r2, [r4, #8]
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d1be      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 80070a4:	6927      	ldr	r7, [r4, #16]
 80070a6:	2f00      	cmp	r7, #0
 80070a8:	d1bb      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 80070aa:	4b1b      	ldr	r3, [pc, #108]	; (8007118 <oslib_test_003_001_execute.lto_priv.0+0x198>)
 80070ac:	9a00      	ldr	r2, [sp, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d03a      	beq.n	8007128 <oslib_test_003_001_execute.lto_priv.0+0x1a8>
 80070b2:	4b1a      	ldr	r3, [pc, #104]	; (800711c <oslib_test_003_001_execute.lto_priv.0+0x19c>)
 80070b4:	e7b6      	b.n	8007024 <oslib_test_003_001_execute.lto_priv.0+0xa4>
 80070b6:	2010      	movs	r0, #16
 80070b8:	f00c fa92 	bl	80135e0 <chPipeWriteTimeout.part.0.constprop.0>
 80070bc:	b108      	cbz	r0, 80070c2 <oslib_test_003_001_execute.lto_priv.0+0x142>
 80070be:	4b18      	ldr	r3, [pc, #96]	; (8007120 <oslib_test_003_001_execute.lto_priv.0+0x1a0>)
 80070c0:	e7b0      	b.n	8007024 <oslib_test_003_001_execute.lto_priv.0+0xa4>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	68e3      	ldr	r3, [r4, #12]
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d1ab      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 80070ca:	68a1      	ldr	r1, [r4, #8]
 80070cc:	4299      	cmp	r1, r3
 80070ce:	d1a8      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 80070d0:	e7b9      	b.n	8007046 <oslib_test_003_001_execute.lto_priv.0+0xc6>
 80070d2:	2110      	movs	r1, #16
 80070d4:	4668      	mov	r0, sp
 80070d6:	f00c fa13 	bl	8013500 <chPipeReadTimeout.part.0.constprop.0>
 80070da:	2800      	cmp	r0, #0
 80070dc:	d1ef      	bne.n	80070be <oslib_test_003_001_execute.lto_priv.0+0x13e>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80070de:	6822      	ldr	r2, [r4, #0]
 80070e0:	68e3      	ldr	r3, [r4, #12]
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d19d      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 80070e6:	68a2      	ldr	r2, [r4, #8]
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d19a      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 80070ec:	6923      	ldr	r3, [r4, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d197      	bne.n	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 80070f2:	e7b3      	b.n	800705c <oslib_test_003_001_execute.lto_priv.0+0xdc>
  chtest.failure_message = msg;
 80070f4:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <oslib_test_003_001_execute.lto_priv.0+0x1a4>)
 80070f6:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 80070f8:	f240 1201 	movw	r2, #257	; 0x101
 80070fc:	80aa      	strh	r2, [r5, #4]
 80070fe:	e795      	b.n	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
 8007100:	4b08      	ldr	r3, [pc, #32]	; (8007124 <oslib_test_003_001_execute.lto_priv.0+0x1a4>)
 8007102:	e78f      	b.n	8007024 <oslib_test_003_001_execute.lto_priv.0+0xa4>
 8007104:	20000b74 	.word	0x20000b74
 8007108:	20000884 	.word	0x20000884
 800710c:	20000a90 	.word	0x20000a90
 8007110:	200008a4 	.word	0x200008a4
 8007114:	08014fc4 	.word	0x08014fc4
 8007118:	33323130 	.word	0x33323130
 800711c:	08015498 	.word	0x08015498
 8007120:	0801548c 	.word	0x0801548c
 8007124:	08014fd8 	.word	0x08014fd8
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8007128:	4aad      	ldr	r2, [pc, #692]	; (80073e0 <oslib_test_003_001_execute.lto_priv.0+0x460>)
 800712a:	9901      	ldr	r1, [sp, #4]
 800712c:	4291      	cmp	r1, r2
 800712e:	ab01      	add	r3, sp, #4
 8007130:	d1bf      	bne.n	80070b2 <oslib_test_003_001_execute.lto_priv.0+0x132>
 8007132:	f102 6230 	add.w	r2, r2, #184549376	; 0xb000000
 8007136:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800713a:	f502 2230 	add.w	r2, r2, #720896	; 0xb0000
 800713e:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8007142:	4291      	cmp	r1, r2
 8007144:	d1b5      	bne.n	80070b2 <oslib_test_003_001_execute.lto_priv.0+0x132>
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	4ba6      	ldr	r3, [pc, #664]	; (80073e4 <oslib_test_003_001_execute.lto_priv.0+0x464>)
 800714a:	429a      	cmp	r2, r3
 800714c:	d1b1      	bne.n	80070b2 <oslib_test_003_001_execute.lto_priv.0+0x132>
  if (pp->reset) {
 800714e:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(7);
 8007150:	2207      	movs	r2, #7
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8007152:	2600      	movs	r6, #0
  test_set_step(7);
 8007154:	602a      	str	r2, [r5, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1cc      	bne.n	80070f4 <oslib_test_003_001_execute.lto_priv.0+0x174>
 800715a:	2004      	movs	r0, #4
 800715c:	f00c fa40 	bl	80135e0 <chPipeWriteTimeout.part.0.constprop.0>
  if (!condition) {
 8007160:	2804      	cmp	r0, #4
 8007162:	d1c7      	bne.n	80070f4 <oslib_test_003_001_execute.lto_priv.0+0x174>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8007164:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007168:	4293      	cmp	r3, r2
 800716a:	f43f af5a 	beq.w	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800716e:	6822      	ldr	r2, [r4, #0]
 8007170:	4293      	cmp	r3, r2
 8007172:	f47f af56 	bne.w	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 8007176:	6923      	ldr	r3, [r4, #16]
 8007178:	2b04      	cmp	r3, #4
 800717a:	f47f af52 	bne.w	8007022 <oslib_test_003_001_execute.lto_priv.0+0xa2>
 800717e:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(8);
 8007180:	2208      	movs	r2, #8
 8007182:	602a      	str	r2, [r5, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1b5      	bne.n	80070f4 <oslib_test_003_001_execute.lto_priv.0+0x174>
 8007188:	200c      	movs	r0, #12
 800718a:	f00c fa29 	bl	80135e0 <chPipeWriteTimeout.part.0.constprop.0>
 800718e:	280c      	cmp	r0, #12
 8007190:	d1b0      	bne.n	80070f4 <oslib_test_003_001_execute.lto_priv.0+0x174>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8007192:	6822      	ldr	r2, [r4, #0]
 8007194:	68e3      	ldr	r3, [r4, #12]
 8007196:	4293      	cmp	r3, r2
 8007198:	f000 80ee 	beq.w	8007378 <oslib_test_003_001_execute.lto_priv.0+0x3f8>
 800719c:	2000      	movs	r0, #0
 800719e:	4992      	ldr	r1, [pc, #584]	; (80073e8 <oslib_test_003_001_execute.lto_priv.0+0x468>)
 80071a0:	f7ff fb36 	bl	8006810 <__test_assert>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	f47f af41 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
  if (pp->reset) {
 80071aa:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(9);
 80071ac:	2209      	movs	r2, #9
 80071ae:	602a      	str	r2, [r5, #0]
 80071b0:	b91b      	cbnz	r3, 80071ba <oslib_test_003_001_execute.lto_priv.0+0x23a>
 80071b2:	2104      	movs	r1, #4
 80071b4:	4668      	mov	r0, sp
 80071b6:	f00c f9a3 	bl	8013500 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == 4, "wrong size");
 80071ba:	f1a0 0e04 	sub.w	lr, r0, #4
 80071be:	f1de 0000 	rsbs	r0, lr, #0
 80071c2:	eb40 000e 	adc.w	r0, r0, lr
 80071c6:	4989      	ldr	r1, [pc, #548]	; (80073ec <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 80071c8:	f7ff fb22 	bl	8006810 <__test_assert>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	f47f af2d 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	68e2      	ldr	r2, [r4, #12]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d003      	beq.n	80071e2 <oslib_test_003_001_execute.lto_priv.0+0x262>
 80071da:	68a2      	ldr	r2, [r4, #8]
 80071dc:	4293      	cmp	r3, r2
 80071de:	f000 80f7 	beq.w	80073d0 <oslib_test_003_001_execute.lto_priv.0+0x450>
 80071e2:	4981      	ldr	r1, [pc, #516]	; (80073e8 <oslib_test_003_001_execute.lto_priv.0+0x468>)
 80071e4:	f7ff fb14 	bl	8006810 <__test_assert>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	f47f af1f 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 80071ee:	9800      	ldr	r0, [sp, #0]
 80071f0:	4b7f      	ldr	r3, [pc, #508]	; (80073f0 <oslib_test_003_001_execute.lto_priv.0+0x470>)
 80071f2:	1ac1      	subs	r1, r0, r3
 80071f4:	4248      	negs	r0, r1
 80071f6:	4148      	adcs	r0, r1
 80071f8:	497e      	ldr	r1, [pc, #504]	; (80073f4 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 80071fa:	f7ff fb09 	bl	8006810 <__test_assert>
 80071fe:	2800      	cmp	r0, #0
 8007200:	f47f af14 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
 8007204:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(10);
 8007206:	220a      	movs	r2, #10
 8007208:	602a      	str	r2, [r5, #0]
 800720a:	b91b      	cbnz	r3, 8007214 <oslib_test_003_001_execute.lto_priv.0+0x294>
 800720c:	210c      	movs	r1, #12
 800720e:	4668      	mov	r0, sp
 8007210:	f00c f976 	bl	8013500 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 8007214:	f1a0 020c 	sub.w	r2, r0, #12
 8007218:	4250      	negs	r0, r2
 800721a:	4150      	adcs	r0, r2
 800721c:	4973      	ldr	r1, [pc, #460]	; (80073ec <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 800721e:	f7ff faf7 	bl	8006810 <__test_assert>
 8007222:	2800      	cmp	r0, #0
 8007224:	f47f af02 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8007228:	6822      	ldr	r2, [r4, #0]
 800722a:	68e3      	ldr	r3, [r4, #12]
 800722c:	4293      	cmp	r3, r2
 800722e:	f000 80c6 	beq.w	80073be <oslib_test_003_001_execute.lto_priv.0+0x43e>
 8007232:	496d      	ldr	r1, [pc, #436]	; (80073e8 <oslib_test_003_001_execute.lto_priv.0+0x468>)
 8007234:	f7ff faec 	bl	8006810 <__test_assert>
 8007238:	2800      	cmp	r0, #0
 800723a:	f47f aef7 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 800723e:	4669      	mov	r1, sp
 8007240:	486d      	ldr	r0, [pc, #436]	; (80073f8 <oslib_test_003_001_execute.lto_priv.0+0x478>)
 8007242:	220c      	movs	r2, #12
 8007244:	f00d fe38 	bl	8014eb8 <memcmp>
 8007248:	fab0 f080 	clz	r0, r0
 800724c:	4969      	ldr	r1, [pc, #420]	; (80073f4 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 800724e:	0940      	lsrs	r0, r0, #5
 8007250:	f7ff fade 	bl	8006810 <__test_assert>
 8007254:	2800      	cmp	r0, #0
 8007256:	f47f aee9 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
  if (pp->reset) {
 800725a:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(11);
 800725c:	220b      	movs	r2, #11
 800725e:	602a      	str	r2, [r5, #0]
 8007260:	b913      	cbnz	r3, 8007268 <oslib_test_003_001_execute.lto_priv.0+0x2e8>
 8007262:	2005      	movs	r0, #5
 8007264:	f00c f9bc 	bl	80135e0 <chPipeWriteTimeout.part.0.constprop.0>
    test_assert(n == 5, "wrong size");
 8007268:	1f43      	subs	r3, r0, #5
 800726a:	4258      	negs	r0, r3
 800726c:	4158      	adcs	r0, r3
 800726e:	495f      	ldr	r1, [pc, #380]	; (80073ec <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 8007270:	f7ff face 	bl	8006810 <__test_assert>
 8007274:	2800      	cmp	r0, #0
 8007276:	f47f aed9 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800727a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800727e:	4293      	cmp	r3, r2
 8007280:	d003      	beq.n	800728a <oslib_test_003_001_execute.lto_priv.0+0x30a>
 8007282:	6822      	ldr	r2, [r4, #0]
 8007284:	4293      	cmp	r3, r2
 8007286:	f000 8092 	beq.w	80073ae <oslib_test_003_001_execute.lto_priv.0+0x42e>
 800728a:	4957      	ldr	r1, [pc, #348]	; (80073e8 <oslib_test_003_001_execute.lto_priv.0+0x468>)
 800728c:	f7ff fac0 	bl	8006810 <__test_assert>
 8007290:	2800      	cmp	r0, #0
 8007292:	f47f aecb 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
  if (pp->reset) {
 8007296:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(12);
 8007298:	220c      	movs	r2, #12
 800729a:	602a      	str	r2, [r5, #0]
 800729c:	b91b      	cbnz	r3, 80072a6 <oslib_test_003_001_execute.lto_priv.0+0x326>
 800729e:	2105      	movs	r1, #5
 80072a0:	4668      	mov	r0, sp
 80072a2:	f00c f92d 	bl	8013500 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == 5, "wrong size");
 80072a6:	f1a0 0c05 	sub.w	ip, r0, #5
 80072aa:	f1dc 0000 	rsbs	r0, ip, #0
 80072ae:	eb40 000c 	adc.w	r0, r0, ip
 80072b2:	494e      	ldr	r1, [pc, #312]	; (80073ec <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 80072b4:	f7ff faac 	bl	8006810 <__test_assert>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	f47f aeb7 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80072be:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d06b      	beq.n	800739e <oslib_test_003_001_execute.lto_priv.0+0x41e>
 80072c6:	4948      	ldr	r1, [pc, #288]	; (80073e8 <oslib_test_003_001_execute.lto_priv.0+0x468>)
 80072c8:	f7ff faa2 	bl	8006810 <__test_assert>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	f47f aead 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 80072d2:	4669      	mov	r1, sp
 80072d4:	4848      	ldr	r0, [pc, #288]	; (80073f8 <oslib_test_003_001_execute.lto_priv.0+0x478>)
 80072d6:	2205      	movs	r2, #5
 80072d8:	f00d fdee 	bl	8014eb8 <memcmp>
 80072dc:	fab0 f080 	clz	r0, r0
 80072e0:	4944      	ldr	r1, [pc, #272]	; (80073f4 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 80072e2:	0940      	lsrs	r0, r0, #5
 80072e4:	f7ff fa94 	bl	8006810 <__test_assert>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	f47f ae9f 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
  if (pp->reset) {
 80072ee:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(13);
 80072f0:	220d      	movs	r2, #13
 80072f2:	602a      	str	r2, [r5, #0]
 80072f4:	b913      	cbnz	r3, 80072fc <oslib_test_003_001_execute.lto_priv.0+0x37c>
 80072f6:	2010      	movs	r0, #16
 80072f8:	f00c f972 	bl	80135e0 <chPipeWriteTimeout.part.0.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 80072fc:	f1a0 0110 	sub.w	r1, r0, #16
 8007300:	4248      	negs	r0, r1
 8007302:	4148      	adcs	r0, r1
 8007304:	4939      	ldr	r1, [pc, #228]	; (80073ec <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 8007306:	f7ff fa83 	bl	8006810 <__test_assert>
 800730a:	2800      	cmp	r0, #0
 800730c:	f47f ae8e 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8007310:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007314:	4293      	cmp	r3, r2
 8007316:	d039      	beq.n	800738c <oslib_test_003_001_execute.lto_priv.0+0x40c>
 8007318:	4933      	ldr	r1, [pc, #204]	; (80073e8 <oslib_test_003_001_execute.lto_priv.0+0x468>)
 800731a:	f7ff fa79 	bl	8006810 <__test_assert>
 800731e:	2800      	cmp	r0, #0
 8007320:	f47f ae84 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
  if (pp->reset) {
 8007324:	7d23      	ldrb	r3, [r4, #20]
  test_set_step(14);
 8007326:	220e      	movs	r2, #14
 8007328:	602a      	str	r2, [r5, #0]
 800732a:	b923      	cbnz	r3, 8007336 <oslib_test_003_001_execute.lto_priv.0+0x3b6>
 800732c:	2110      	movs	r1, #16
 800732e:	4668      	mov	r0, sp
 8007330:	f00c f8e6 	bl	8013500 <chPipeReadTimeout.part.0.constprop.0>
 8007334:	4607      	mov	r7, r0
    test_assert(n == PIPE_SIZE, "wrong size");
 8007336:	f1a7 0310 	sub.w	r3, r7, #16
 800733a:	4258      	negs	r0, r3
 800733c:	4158      	adcs	r0, r3
 800733e:	492b      	ldr	r1, [pc, #172]	; (80073ec <oslib_test_003_001_execute.lto_priv.0+0x46c>)
 8007340:	f7ff fa66 	bl	8006810 <__test_assert>
 8007344:	2800      	cmp	r0, #0
 8007346:	f47f ae71 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800734a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800734e:	4293      	cmp	r3, r2
 8007350:	d054      	beq.n	80073fc <oslib_test_003_001_execute.lto_priv.0+0x47c>
 8007352:	4925      	ldr	r1, [pc, #148]	; (80073e8 <oslib_test_003_001_execute.lto_priv.0+0x468>)
 8007354:	4630      	mov	r0, r6
 8007356:	f7ff fa5b 	bl	8006810 <__test_assert>
 800735a:	2800      	cmp	r0, #0
 800735c:	f47f ae66 	bne.w	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8007360:	4669      	mov	r1, sp
 8007362:	2210      	movs	r2, #16
 8007364:	4824      	ldr	r0, [pc, #144]	; (80073f8 <oslib_test_003_001_execute.lto_priv.0+0x478>)
 8007366:	f00d fda7 	bl	8014eb8 <memcmp>
 800736a:	fab0 f080 	clz	r0, r0
 800736e:	4921      	ldr	r1, [pc, #132]	; (80073f4 <oslib_test_003_001_execute.lto_priv.0+0x474>)
 8007370:	0940      	lsrs	r0, r0, #5
 8007372:	f7ff fa4d 	bl	8006810 <__test_assert>
 8007376:	e659      	b.n	800702c <oslib_test_003_001_execute.lto_priv.0+0xac>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8007378:	68a2      	ldr	r2, [r4, #8]
 800737a:	4293      	cmp	r3, r2
 800737c:	f47f af0e 	bne.w	800719c <oslib_test_003_001_execute.lto_priv.0+0x21c>
 8007380:	6920      	ldr	r0, [r4, #16]
 8007382:	f1a0 0310 	sub.w	r3, r0, #16
 8007386:	4258      	negs	r0, r3
 8007388:	4158      	adcs	r0, r3
 800738a:	e708      	b.n	800719e <oslib_test_003_001_execute.lto_priv.0+0x21e>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800738c:	6822      	ldr	r2, [r4, #0]
 800738e:	4293      	cmp	r3, r2
 8007390:	d0c2      	beq.n	8007318 <oslib_test_003_001_execute.lto_priv.0+0x398>
 8007392:	6920      	ldr	r0, [r4, #16]
 8007394:	f1a0 0210 	sub.w	r2, r0, #16
 8007398:	4250      	negs	r0, r2
 800739a:	4150      	adcs	r0, r2
 800739c:	e7bc      	b.n	8007318 <oslib_test_003_001_execute.lto_priv.0+0x398>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800739e:	6822      	ldr	r2, [r4, #0]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d090      	beq.n	80072c6 <oslib_test_003_001_execute.lto_priv.0+0x346>
 80073a4:	6920      	ldr	r0, [r4, #16]
 80073a6:	fab0 f080 	clz	r0, r0
 80073aa:	0940      	lsrs	r0, r0, #5
 80073ac:	e78b      	b.n	80072c6 <oslib_test_003_001_execute.lto_priv.0+0x346>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 80073ae:	6920      	ldr	r0, [r4, #16]
 80073b0:	f1a0 0e05 	sub.w	lr, r0, #5
 80073b4:	f1de 0000 	rsbs	r0, lr, #0
 80073b8:	eb40 000e 	adc.w	r0, r0, lr
 80073bc:	e765      	b.n	800728a <oslib_test_003_001_execute.lto_priv.0+0x30a>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80073be:	68a2      	ldr	r2, [r4, #8]
 80073c0:	4293      	cmp	r3, r2
 80073c2:	f47f af36 	bne.w	8007232 <oslib_test_003_001_execute.lto_priv.0+0x2b2>
 80073c6:	6920      	ldr	r0, [r4, #16]
 80073c8:	fab0 f080 	clz	r0, r0
 80073cc:	0940      	lsrs	r0, r0, #5
 80073ce:	e730      	b.n	8007232 <oslib_test_003_001_execute.lto_priv.0+0x2b2>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 80073d0:	6920      	ldr	r0, [r4, #16]
 80073d2:	f1a0 0c0c 	sub.w	ip, r0, #12
 80073d6:	f1dc 0000 	rsbs	r0, ip, #0
 80073da:	eb40 000c 	adc.w	r0, r0, ip
 80073de:	e700      	b.n	80071e2 <oslib_test_003_001_execute.lto_priv.0+0x262>
 80073e0:	37363534 	.word	0x37363534
 80073e4:	46454443 	.word	0x46454443
 80073e8:	08014fc4 	.word	0x08014fc4
 80073ec:	08014fd8 	.word	0x08014fd8
 80073f0:	33323130 	.word	0x33323130
 80073f4:	08015498 	.word	0x08015498
 80073f8:	08016158 	.word	0x08016158
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80073fc:	6822      	ldr	r2, [r4, #0]
 80073fe:	4293      	cmp	r3, r2
 8007400:	d0a7      	beq.n	8007352 <oslib_test_003_001_execute.lto_priv.0+0x3d2>
 8007402:	6926      	ldr	r6, [r4, #16]
 8007404:	fab6 f686 	clz	r6, r6
 8007408:	0976      	lsrs	r6, r6, #5
 800740a:	e7a2      	b.n	8007352 <oslib_test_003_001_execute.lto_priv.0+0x3d2>
 800740c:	0000      	movs	r0, r0
	...

08007410 <oslib_test_008_001_execute.lto_priv.0>:

static void oslib_test_008_001_execute(void) {
 8007410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  void *p1, *p2, *p3;
  size_t n, sz;

  /* [8.1.1] Testing initial conditions, the heap must not be
     fragmented and one free block present.*/
  test_set_step(1);
 8007414:	4fcb      	ldr	r7, [pc, #812]	; (8007744 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 8007416:	2301      	movs	r3, #1
 8007418:	603b      	str	r3, [r7, #0]
static void oslib_test_008_001_execute(void) {
 800741a:	b082      	sub	sp, #8
 800741c:	2330      	movs	r3, #48	; 0x30
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>
 8007426:	f108 000c 	add.w	r0, r8, #12
 800742a:	f7fc fe01 	bl	8004030 <chMtxLockS>
 800742e:	2500      	movs	r5, #0
 8007430:	f385 8811 	msr	BASEPRI, r5
  while (H_NEXT(qp) != NULL) {
 8007434:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007438:	2c00      	cmp	r4, #0
 800743a:	f000 81b4 	beq.w	80077a6 <oslib_test_008_001_execute.lto_priv.0+0x396>
  n = 0U;
 800743e:	462e      	mov	r6, r5
  while (H_NEXT(qp) != NULL) {
 8007440:	e9d4 4300 	ldrd	r4, r3, [r4]
    n++;
 8007444:	3601      	adds	r6, #1
    tpages += pages;
 8007446:	441d      	add	r5, r3
  while (H_NEXT(qp) != NULL) {
 8007448:	2c00      	cmp	r4, #0
 800744a:	d1f9      	bne.n	8007440 <oslib_test_008_001_execute.lto_priv.0+0x30>
  H_UNLOCK(heapp);
 800744c:	48bf      	ldr	r0, [pc, #764]	; (800774c <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800744e:	f7fc fe8f 	bl	8004170 <chMtxUnlock>
 8007452:	2e01      	cmp	r6, #1
 8007454:	f040 81aa 	bne.w	80077ac <oslib_test_008_001_execute.lto_priv.0+0x39c>
  }
  test_end_step(1);

  /* [8.1.2] Trying to allocate an block bigger than available space,
     an error is expected.*/
  test_set_step(2);
 8007458:	2302      	movs	r3, #2
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 800745a:	48bb      	ldr	r0, [pc, #748]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 800745c:	603b      	str	r3, [r7, #0]
 800745e:	2208      	movs	r2, #8
 8007460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007464:	f7fd f98c 	bl	8004780 <chHeapAllocAligned>
 8007468:	2800      	cmp	r0, #0
 800746a:	f040 81a7 	bne.w	80077bc <oslib_test_008_001_execute.lto_priv.0+0x3ac>
  }
  test_end_step(2);

  /* [8.1.3] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(3);
 800746e:	2303      	movs	r3, #3
 8007470:	48b5      	ldr	r0, [pc, #724]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	2208      	movs	r2, #8
 8007476:	2110      	movs	r1, #16
 8007478:	f7fd f982 	bl	8004780 <chHeapAllocAligned>
 800747c:	2800      	cmp	r0, #0
 800747e:	f000 81a5 	beq.w	80077cc <oslib_test_008_001_execute.lto_priv.0+0x3bc>
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
    chHeapFree(p1);
 8007482:	f7fd f9fd 	bl	8004880 <chHeapFree>
  }
  test_end_step(3);

  /* [8.1.4] Using chHeapStatus() to assess the heap state. There must
     be at least one free block of sufficient size.*/
  test_set_step(4);
 8007486:	2304      	movs	r3, #4
 8007488:	603b      	str	r3, [r7, #0]
 800748a:	2330      	movs	r3, #48	; 0x30
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	48ae      	ldr	r0, [pc, #696]	; (800774c <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 8007492:	f7fc fdcd 	bl	8004030 <chMtxLockS>
 8007496:	f384 8811 	msr	BASEPRI, r4
  while (H_NEXT(qp) != NULL) {
 800749a:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800749e:	2e00      	cmp	r6, #0
 80074a0:	f000 819a 	beq.w	80077d8 <oslib_test_008_001_execute.lto_priv.0+0x3c8>
  tpages = 0U;
 80074a4:	4622      	mov	r2, r4
  n = 0U;
 80074a6:	46a2      	mov	sl, r4
  while (H_NEXT(qp) != NULL) {
 80074a8:	e9d6 6300 	ldrd	r6, r3, [r6]
 80074ac:	429c      	cmp	r4, r3
    n++;
 80074ae:	f10a 0a01 	add.w	sl, sl, #1
    tpages += pages;
 80074b2:	441a      	add	r2, r3
 80074b4:	bf38      	it	cc
 80074b6:	461c      	movcc	r4, r3
  while (H_NEXT(qp) != NULL) {
 80074b8:	2e00      	cmp	r6, #0
 80074ba:	d1f5      	bne.n	80074a8 <oslib_test_008_001_execute.lto_priv.0+0x98>
  H_UNLOCK(heapp);
 80074bc:	48a3      	ldr	r0, [pc, #652]	; (800774c <oslib_test_008_001_execute.lto_priv.0+0x33c>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 80074be:	ea4f 09c2 	mov.w	r9, r2, lsl #3
  H_UNLOCK(heapp);
 80074c2:	f7fc fe55 	bl	8004170 <chMtxUnlock>
 80074c6:	f1ba 0f01 	cmp.w	sl, #1
  {
    size_t total_size, largest_size;

    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 80074ca:	f8cd a004 	str.w	sl, [sp, #4]
 80074ce:	f040 8186 	bne.w	80077de <oslib_test_008_001_execute.lto_priv.0+0x3ce>
 80074d2:	f1b9 0f0f 	cmp.w	r9, #15
 80074d6:	f240 8188 	bls.w	80077ea <oslib_test_008_001_execute.lto_priv.0+0x3da>
 80074da:	ebb9 0fc4 	cmp.w	r9, r4, lsl #3
 80074de:	f040 8184 	bne.w	80077ea <oslib_test_008_001_execute.lto_priv.0+0x3da>
    test_assert(total_size == largest_size, "unexpected heap state");
  }
  test_end_step(4);

  /* [8.1.5] Allocating then freeing in the same order.*/
  test_set_step(5);
 80074e2:	2305      	movs	r3, #5
 80074e4:	2208      	movs	r2, #8
 80074e6:	2110      	movs	r1, #16
 80074e8:	4897      	ldr	r0, [pc, #604]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	f7fd f948 	bl	8004780 <chHeapAllocAligned>
 80074f0:	2208      	movs	r2, #8
 80074f2:	4682      	mov	sl, r0
 80074f4:	2110      	movs	r1, #16
 80074f6:	4894      	ldr	r0, [pc, #592]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 80074f8:	f7fd f942 	bl	8004780 <chHeapAllocAligned>
 80074fc:	2208      	movs	r2, #8
 80074fe:	2110      	movs	r1, #16
 8007500:	4681      	mov	r9, r0
 8007502:	4891      	ldr	r0, [pc, #580]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 8007504:	f7fd f93c 	bl	8004780 <chHeapAllocAligned>
 8007508:	4604      	mov	r4, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);                                 /* Does not merge.*/
 800750a:	4650      	mov	r0, sl
 800750c:	f7fd f9b8 	bl	8004880 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 8007510:	4648      	mov	r0, r9
 8007512:	f7fd f9b5 	bl	8004880 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 8007516:	4620      	mov	r0, r4
 8007518:	f7fd f9b2 	bl	8004880 <chHeapFree>
 800751c:	2330      	movs	r3, #48	; 0x30
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	488a      	ldr	r0, [pc, #552]	; (800774c <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 8007524:	f7fc fd84 	bl	8004030 <chMtxLockS>
 8007528:	f386 8811 	msr	BASEPRI, r6
  while (H_NEXT(qp) != NULL) {
 800752c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007530:	2c00      	cmp	r4, #0
 8007532:	f000 8138 	beq.w	80077a6 <oslib_test_008_001_execute.lto_priv.0+0x396>
  n = 0U;
 8007536:	46b1      	mov	r9, r6
    tpages += pages;
 8007538:	6863      	ldr	r3, [r4, #4]
  while (H_NEXT(qp) != NULL) {
 800753a:	6824      	ldr	r4, [r4, #0]
    n++;
 800753c:	f109 0901 	add.w	r9, r9, #1
    tpages += pages;
 8007540:	441e      	add	r6, r3
  while (H_NEXT(qp) != NULL) {
 8007542:	2c00      	cmp	r4, #0
 8007544:	d1f8      	bne.n	8007538 <oslib_test_008_001_execute.lto_priv.0+0x128>
  H_UNLOCK(heapp);
 8007546:	4881      	ldr	r0, [pc, #516]	; (800774c <oslib_test_008_001_execute.lto_priv.0+0x33c>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8007548:	00f6      	lsls	r6, r6, #3
 800754a:	9601      	str	r6, [sp, #4]
  H_UNLOCK(heapp);
 800754c:	f7fc fe10 	bl	8004170 <chMtxUnlock>
 8007550:	f1b9 0f01 	cmp.w	r9, #1
 8007554:	f040 812a 	bne.w	80077ac <oslib_test_008_001_execute.lto_priv.0+0x39c>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
  }
  test_end_step(5);

  /* [8.1.6] Allocating then freeing in reverse order.*/
  test_set_step(6);
 8007558:	2306      	movs	r3, #6
 800755a:	2208      	movs	r2, #8
 800755c:	2110      	movs	r1, #16
 800755e:	487a      	ldr	r0, [pc, #488]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 8007560:	603b      	str	r3, [r7, #0]
 8007562:	f7fd f90d 	bl	8004780 <chHeapAllocAligned>
 8007566:	2208      	movs	r2, #8
 8007568:	4606      	mov	r6, r0
 800756a:	2110      	movs	r1, #16
 800756c:	4876      	ldr	r0, [pc, #472]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 800756e:	f7fd f907 	bl	8004780 <chHeapAllocAligned>
 8007572:	2208      	movs	r2, #8
 8007574:	2110      	movs	r1, #16
 8007576:	4681      	mov	r9, r0
 8007578:	4873      	ldr	r0, [pc, #460]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 800757a:	f7fd f901 	bl	8004780 <chHeapAllocAligned>
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p3 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p3);                                 /* Merges forward.*/
 800757e:	f7fd f97f 	bl	8004880 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 8007582:	4648      	mov	r0, r9
 8007584:	f7fd f97c 	bl	8004880 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 8007588:	4630      	mov	r0, r6
 800758a:	f7fd f979 	bl	8004880 <chHeapFree>
 800758e:	2330      	movs	r3, #48	; 0x30
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	486d      	ldr	r0, [pc, #436]	; (800774c <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 8007596:	f7fc fd4b 	bl	8004030 <chMtxLockS>
 800759a:	f384 8811 	msr	BASEPRI, r4
  while (H_NEXT(qp) != NULL) {
 800759e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 80075a2:	2e00      	cmp	r6, #0
 80075a4:	f000 80ff 	beq.w	80077a6 <oslib_test_008_001_execute.lto_priv.0+0x396>
  n = 0U;
 80075a8:	46a1      	mov	r9, r4
    tpages += pages;
 80075aa:	6873      	ldr	r3, [r6, #4]
  while (H_NEXT(qp) != NULL) {
 80075ac:	6836      	ldr	r6, [r6, #0]
    n++;
 80075ae:	f109 0901 	add.w	r9, r9, #1
    tpages += pages;
 80075b2:	441c      	add	r4, r3
  while (H_NEXT(qp) != NULL) {
 80075b4:	2e00      	cmp	r6, #0
 80075b6:	d1f8      	bne.n	80075aa <oslib_test_008_001_execute.lto_priv.0+0x19a>
  H_UNLOCK(heapp);
 80075b8:	4864      	ldr	r0, [pc, #400]	; (800774c <oslib_test_008_001_execute.lto_priv.0+0x33c>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 80075ba:	00e4      	lsls	r4, r4, #3
 80075bc:	9401      	str	r4, [sp, #4]
  H_UNLOCK(heapp);
 80075be:	f7fc fdd7 	bl	8004170 <chMtxUnlock>
 80075c2:	f1b9 0f01 	cmp.w	r9, #1
 80075c6:	f040 80f1 	bne.w	80077ac <oslib_test_008_001_execute.lto_priv.0+0x39c>
  }
  test_end_step(6);

  /* [8.1.7] Small fragments handling. Checking the behavior when
     allocating blocks with size not multiple of alignment unit.*/
  test_set_step(7);
 80075ca:	2307      	movs	r3, #7
 80075cc:	2208      	movs	r2, #8
 80075ce:	2111      	movs	r1, #17
 80075d0:	485d      	ldr	r0, [pc, #372]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	f7fd f8d4 	bl	8004780 <chHeapAllocAligned>
 80075d8:	2208      	movs	r2, #8
 80075da:	4604      	mov	r4, r0
 80075dc:	2110      	movs	r1, #16
 80075de:	485a      	ldr	r0, [pc, #360]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 80075e0:	f7fd f8ce 	bl	8004780 <chHeapAllocAligned>
 80075e4:	4681      	mov	r9, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE + 1);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);
 80075e6:	4620      	mov	r0, r4
 80075e8:	f7fd f94a 	bl	8004880 <chHeapFree>
 80075ec:	2330      	movs	r3, #48	; 0x30
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	4856      	ldr	r0, [pc, #344]	; (800774c <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 80075f4:	f7fc fd1c 	bl	8004030 <chMtxLockS>
 80075f8:	f386 8811 	msr	BASEPRI, r6
  while (H_NEXT(qp) != NULL) {
 80075fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007600:	2c00      	cmp	r4, #0
 8007602:	f000 80f8 	beq.w	80077f6 <oslib_test_008_001_execute.lto_priv.0+0x3e6>
  n = 0U;
 8007606:	46b2      	mov	sl, r6
    tpages += pages;
 8007608:	6863      	ldr	r3, [r4, #4]
  while (H_NEXT(qp) != NULL) {
 800760a:	6824      	ldr	r4, [r4, #0]
    n++;
 800760c:	f10a 0a01 	add.w	sl, sl, #1
    tpages += pages;
 8007610:	441e      	add	r6, r3
  while (H_NEXT(qp) != NULL) {
 8007612:	2c00      	cmp	r4, #0
 8007614:	d1f8      	bne.n	8007608 <oslib_test_008_001_execute.lto_priv.0+0x1f8>
  H_UNLOCK(heapp);
 8007616:	484d      	ldr	r0, [pc, #308]	; (800774c <oslib_test_008_001_execute.lto_priv.0+0x33c>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8007618:	00f6      	lsls	r6, r6, #3
 800761a:	9601      	str	r6, [sp, #4]
  H_UNLOCK(heapp);
 800761c:	f7fc fda8 	bl	8004170 <chMtxUnlock>
 8007620:	f1ba 0f02 	cmp.w	sl, #2
 8007624:	f040 80ea 	bne.w	80077fc <oslib_test_008_001_execute.lto_priv.0+0x3ec>
 8007628:	2208      	movs	r2, #8
 800762a:	2110      	movs	r1, #16
 800762c:	4846      	ldr	r0, [pc, #280]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 800762e:	f7fd f8a7 	bl	8004780 <chHeapAllocAligned>
 8007632:	2330      	movs	r3, #48	; 0x30
 8007634:	4606      	mov	r6, r0
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	4844      	ldr	r0, [pc, #272]	; (800774c <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 800763c:	f7fc fcf8 	bl	8004030 <chMtxLockS>
 8007640:	f384 8811 	msr	BASEPRI, r4
  while (H_NEXT(qp) != NULL) {
 8007644:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 80dd 	beq.w	8007808 <oslib_test_008_001_execute.lto_priv.0+0x3f8>
  n = 0U;
 800764e:	46a0      	mov	r8, r4
    tpages += pages;
 8007650:	685a      	ldr	r2, [r3, #4]
  while (H_NEXT(qp) != NULL) {
 8007652:	681b      	ldr	r3, [r3, #0]
    n++;
 8007654:	f108 0801 	add.w	r8, r8, #1
    tpages += pages;
 8007658:	4414      	add	r4, r2
  while (H_NEXT(qp) != NULL) {
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1f8      	bne.n	8007650 <oslib_test_008_001_execute.lto_priv.0+0x240>
  H_UNLOCK(heapp);
 800765e:	483b      	ldr	r0, [pc, #236]	; (800774c <oslib_test_008_001_execute.lto_priv.0+0x33c>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8007660:	00e4      	lsls	r4, r4, #3
 8007662:	9401      	str	r4, [sp, #4]
  H_UNLOCK(heapp);
 8007664:	f7fc fd84 	bl	8004170 <chMtxUnlock>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    /* Note, the first situation happens when the alignment size is smaller
       than the header size, the second in the other cases.*/
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 8007668:	f1b8 0f01 	cmp.w	r8, #1
 800766c:	f040 80d0 	bne.w	8007810 <oslib_test_008_001_execute.lto_priv.0+0x400>
 8007670:	ac01      	add	r4, sp, #4
                (chHeapStatus(&test_heap, &n, NULL) == 2), "heap fragmented");
    chHeapFree(p2);
 8007672:	4648      	mov	r0, r9
 8007674:	f7fd f904 	bl	8004880 <chHeapFree>
    chHeapFree(p1);
 8007678:	4630      	mov	r0, r6
 800767a:	f7fd f901 	bl	8004880 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800767e:	2200      	movs	r2, #0
 8007680:	4621      	mov	r1, r4
 8007682:	4831      	ldr	r0, [pc, #196]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 8007684:	f7fc fdbc 	bl	8004200 <chHeapStatus>
 8007688:	f1a0 0001 	sub.w	r0, r0, #1
 800768c:	fab0 f080 	clz	r0, r0
 8007690:	492f      	ldr	r1, [pc, #188]	; (8007750 <oslib_test_008_001_execute.lto_priv.0+0x340>)
 8007692:	0940      	lsrs	r0, r0, #5
 8007694:	f7ff f8bc 	bl	8006810 <__test_assert>
 8007698:	4680      	mov	r8, r0
 800769a:	2800      	cmp	r0, #0
 800769c:	f040 808b 	bne.w	80077b6 <oslib_test_008_001_execute.lto_priv.0+0x3a6>
  }
  test_end_step(7);

  /* [8.1.8] Skipping a fragment, the first fragment in the list is too
     small so the allocator must pick the second one.*/
  test_set_step(8);
 80076a0:	2608      	movs	r6, #8
 80076a2:	4632      	mov	r2, r6
 80076a4:	2110      	movs	r1, #16
 80076a6:	4828      	ldr	r0, [pc, #160]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 80076a8:	603e      	str	r6, [r7, #0]
 80076aa:	f7fd f869 	bl	8004780 <chHeapAllocAligned>
 80076ae:	4632      	mov	r2, r6
 80076b0:	2110      	movs	r1, #16
 80076b2:	4682      	mov	sl, r0
 80076b4:	4824      	ldr	r0, [pc, #144]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 80076b6:	f7fd f863 	bl	8004780 <chHeapAllocAligned>
 80076ba:	4681      	mov	r9, r0
  {
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    p2 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    chHeapFree(p1);
 80076bc:	4650      	mov	r0, sl
 80076be:	f7fd f8df 	bl	8004880 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 80076c2:	4642      	mov	r2, r8
 80076c4:	4621      	mov	r1, r4
 80076c6:	4820      	ldr	r0, [pc, #128]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 80076c8:	f7fc fd9a 	bl	8004200 <chHeapStatus>
 80076cc:	1e81      	subs	r1, r0, #2
 80076ce:	4248      	negs	r0, r1
 80076d0:	4148      	adcs	r0, r1
 80076d2:	4920      	ldr	r1, [pc, #128]	; (8007754 <oslib_test_008_001_execute.lto_priv.0+0x344>)
 80076d4:	f7ff f89c 	bl	8006810 <__test_assert>
 80076d8:	4680      	mov	r8, r0
 80076da:	2800      	cmp	r0, #0
 80076dc:	d16b      	bne.n	80077b6 <oslib_test_008_001_execute.lto_priv.0+0x3a6>
 80076de:	4632      	mov	r2, r6
 80076e0:	2120      	movs	r1, #32
 80076e2:	4819      	ldr	r0, [pc, #100]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 80076e4:	f7fd f84c 	bl	8004780 <chHeapAllocAligned>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE * 2); /* Skips first fragment.*/
    chHeapFree(p1);
 80076e8:	f7fd f8ca 	bl	8004880 <chHeapFree>
    chHeapFree(p2);
 80076ec:	4648      	mov	r0, r9
 80076ee:	f7fd f8c7 	bl	8004880 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80076f2:	4642      	mov	r2, r8
 80076f4:	4621      	mov	r1, r4
 80076f6:	4814      	ldr	r0, [pc, #80]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 80076f8:	f7fc fd82 	bl	8004200 <chHeapStatus>
 80076fc:	1e42      	subs	r2, r0, #1
 80076fe:	4250      	negs	r0, r2
 8007700:	4150      	adcs	r0, r2
 8007702:	4913      	ldr	r1, [pc, #76]	; (8007750 <oslib_test_008_001_execute.lto_priv.0+0x340>)
 8007704:	f7ff f884 	bl	8006810 <__test_assert>
 8007708:	4602      	mov	r2, r0
 800770a:	2800      	cmp	r0, #0
 800770c:	d153      	bne.n	80077b6 <oslib_test_008_001_execute.lto_priv.0+0x3a6>
  }
  test_end_step(8);

  /* [8.1.9] Allocating the whole available space.*/
  test_set_step(9);
 800770e:	2309      	movs	r3, #9
  {
    (void)chHeapStatus(&test_heap, &n, NULL);
 8007710:	4621      	mov	r1, r4
 8007712:	480d      	ldr	r0, [pc, #52]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
  test_set_step(9);
 8007714:	603b      	str	r3, [r7, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 8007716:	f7fc fd73 	bl	8004200 <chHeapStatus>
 800771a:	4632      	mov	r2, r6
 800771c:	9901      	ldr	r1, [sp, #4]
 800771e:	480a      	ldr	r0, [pc, #40]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 8007720:	f7fd f82e 	bl	8004780 <chHeapAllocAligned>
    p1 = chHeapAlloc(&test_heap, n);
    test_assert(p1 != NULL, "allocation failed");
 8007724:	4680      	mov	r8, r0
 8007726:	3800      	subs	r0, #0
 8007728:	490b      	ldr	r1, [pc, #44]	; (8007758 <oslib_test_008_001_execute.lto_priv.0+0x348>)
 800772a:	bf18      	it	ne
 800772c:	2001      	movne	r0, #1
 800772e:	f7ff f86f 	bl	8006810 <__test_assert>
 8007732:	4602      	mov	r2, r0
 8007734:	2800      	cmp	r0, #0
 8007736:	d13e      	bne.n	80077b6 <oslib_test_008_001_execute.lto_priv.0+0x3a6>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 8007738:	4601      	mov	r1, r0
 800773a:	4803      	ldr	r0, [pc, #12]	; (8007748 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 800773c:	f7fc fd60 	bl	8004200 <chHeapStatus>
 8007740:	e00c      	b.n	800775c <oslib_test_008_001_execute.lto_priv.0+0x34c>
 8007742:	bf00      	nop
 8007744:	20000b74 	.word	0x20000b74
 8007748:	20001648 	.word	0x20001648
 800774c:	20001654 	.word	0x20001654
 8007750:	08015294 	.word	0x08015294
 8007754:	08015504 	.word	0x08015504
 8007758:	080154c4 	.word	0x080154c4
 800775c:	fab0 f080 	clz	r0, r0
 8007760:	4930      	ldr	r1, [pc, #192]	; (8007824 <oslib_test_008_001_execute.lto_priv.0+0x414>)
 8007762:	0940      	lsrs	r0, r0, #5
 8007764:	f7ff f854 	bl	8006810 <__test_assert>
 8007768:	4606      	mov	r6, r0
 800776a:	bb20      	cbnz	r0, 80077b6 <oslib_test_008_001_execute.lto_priv.0+0x3a6>
    chHeapFree(p1);
 800776c:	4640      	mov	r0, r8
 800776e:	f7fd f887 	bl	8004880 <chHeapFree>
  }
  test_end_step(9);

  /* [8.1.10] Testing final conditions. The heap geometry must be the
     same than the one registered at beginning.*/
  test_set_step(10);
 8007772:	230a      	movs	r3, #10
  {
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8007774:	4621      	mov	r1, r4
 8007776:	482c      	ldr	r0, [pc, #176]	; (8007828 <oslib_test_008_001_execute.lto_priv.0+0x418>)
  test_set_step(10);
 8007778:	603b      	str	r3, [r7, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800777a:	4632      	mov	r2, r6
 800777c:	f7fc fd40 	bl	8004200 <chHeapStatus>
 8007780:	1e43      	subs	r3, r0, #1
 8007782:	4258      	negs	r0, r3
 8007784:	4158      	adcs	r0, r3
 8007786:	4929      	ldr	r1, [pc, #164]	; (800782c <oslib_test_008_001_execute.lto_priv.0+0x41c>)
 8007788:	f7ff f842 	bl	8006810 <__test_assert>
 800778c:	b998      	cbnz	r0, 80077b6 <oslib_test_008_001_execute.lto_priv.0+0x3a6>
    test_assert(n == sz, "size changed");
 800778e:	9b01      	ldr	r3, [sp, #4]
 8007790:	4927      	ldr	r1, [pc, #156]	; (8007830 <oslib_test_008_001_execute.lto_priv.0+0x420>)
 8007792:	ebb3 0fc5 	cmp.w	r3, r5, lsl #3
 8007796:	bf0c      	ite	eq
 8007798:	2001      	moveq	r0, #1
 800779a:	2000      	movne	r0, #0
  }
  test_end_step(10);
}
 800779c:	b002      	add	sp, #8
 800779e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(n == sz, "size changed");
 80077a2:	f7ff b835 	b.w	8006810 <__test_assert>
 80077a6:	4823      	ldr	r0, [pc, #140]	; (8007834 <oslib_test_008_001_execute.lto_priv.0+0x424>)
 80077a8:	f7fc fce2 	bl	8004170 <chMtxUnlock>
  chtest.failure_message = msg;
 80077ac:	4b1f      	ldr	r3, [pc, #124]	; (800782c <oslib_test_008_001_execute.lto_priv.0+0x41c>)
 80077ae:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 80077b0:	f240 1201 	movw	r2, #257	; 0x101
 80077b4:	80ba      	strh	r2, [r7, #4]
}
 80077b6:	b002      	add	sp, #8
 80077b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.failure_message = msg;
 80077bc:	4b1e      	ldr	r3, [pc, #120]	; (8007838 <oslib_test_008_001_execute.lto_priv.0+0x428>)
 80077be:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 80077c0:	f240 1201 	movw	r2, #257	; 0x101
 80077c4:	80ba      	strh	r2, [r7, #4]
 80077c6:	b002      	add	sp, #8
 80077c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chtest.failure_message = msg;
 80077cc:	4b1b      	ldr	r3, [pc, #108]	; (800783c <oslib_test_008_001_execute.lto_priv.0+0x42c>)
 80077ce:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 80077d0:	f240 1201 	movw	r2, #257	; 0x101
 80077d4:	80ba      	strh	r2, [r7, #4]
 80077d6:	e7ee      	b.n	80077b6 <oslib_test_008_001_execute.lto_priv.0+0x3a6>
 80077d8:	4816      	ldr	r0, [pc, #88]	; (8007834 <oslib_test_008_001_execute.lto_priv.0+0x424>)
 80077da:	f7fc fcc9 	bl	8004170 <chMtxUnlock>
  chtest.failure_message = msg;
 80077de:	4b18      	ldr	r3, [pc, #96]	; (8007840 <oslib_test_008_001_execute.lto_priv.0+0x430>)
 80077e0:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 80077e2:	f240 1201 	movw	r2, #257	; 0x101
 80077e6:	80ba      	strh	r2, [r7, #4]
 80077e8:	e7e5      	b.n	80077b6 <oslib_test_008_001_execute.lto_priv.0+0x3a6>
  chtest.failure_message = msg;
 80077ea:	4b16      	ldr	r3, [pc, #88]	; (8007844 <oslib_test_008_001_execute.lto_priv.0+0x434>)
 80077ec:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 80077ee:	f240 1201 	movw	r2, #257	; 0x101
 80077f2:	80ba      	strh	r2, [r7, #4]
 80077f4:	e7df      	b.n	80077b6 <oslib_test_008_001_execute.lto_priv.0+0x3a6>
 80077f6:	480f      	ldr	r0, [pc, #60]	; (8007834 <oslib_test_008_001_execute.lto_priv.0+0x424>)
 80077f8:	f7fc fcba 	bl	8004170 <chMtxUnlock>
  chtest.failure_message = msg;
 80077fc:	4b12      	ldr	r3, [pc, #72]	; (8007848 <oslib_test_008_001_execute.lto_priv.0+0x438>)
 80077fe:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 8007800:	f240 1201 	movw	r2, #257	; 0x101
 8007804:	80ba      	strh	r2, [r7, #4]
 8007806:	e7d6      	b.n	80077b6 <oslib_test_008_001_execute.lto_priv.0+0x3a6>
 8007808:	480a      	ldr	r0, [pc, #40]	; (8007834 <oslib_test_008_001_execute.lto_priv.0+0x424>)
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800780a:	9401      	str	r4, [sp, #4]
  H_UNLOCK(heapp);
 800780c:	f7fc fcb0 	bl	8004170 <chMtxUnlock>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 8007810:	ac01      	add	r4, sp, #4
 8007812:	4805      	ldr	r0, [pc, #20]	; (8007828 <oslib_test_008_001_execute.lto_priv.0+0x418>)
 8007814:	2200      	movs	r2, #0
 8007816:	4621      	mov	r1, r4
 8007818:	f7fc fcf2 	bl	8004200 <chHeapStatus>
 800781c:	2802      	cmp	r0, #2
 800781e:	d1c5      	bne.n	80077ac <oslib_test_008_001_execute.lto_priv.0+0x39c>
 8007820:	e727      	b.n	8007672 <oslib_test_008_001_execute.lto_priv.0+0x262>
 8007822:	bf00      	nop
 8007824:	080153d4 	.word	0x080153d4
 8007828:	20001648 	.word	0x20001648
 800782c:	08015294 	.word	0x08015294
 8007830:	08015514 	.word	0x08015514
 8007834:	20001654 	.word	0x20001654
 8007838:	080154ac 	.word	0x080154ac
 800783c:	080154c4 	.word	0x080154c4
 8007840:	080154d8 	.word	0x080154d8
 8007844:	080154ec 	.word	0x080154ec
 8007848:	08015504 	.word	0x08015504
 800784c:	00000000 	.word	0x00000000

08007850 <test_printf>:
 * @param[in] fmt       formatting string
 * @return              The number of bytes written.
 *
 * @api
 */
int test_printf(const char *fmt, ...) {
 8007850:	b40f      	push	{r0, r1, r2, r3}
 8007852:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007856:	b087      	sub	sp, #28
 8007858:	ab10      	add	r3, sp, #64	; 0x40
 800785a:	f853 4b04 	ldr.w	r4, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800785e:	9302      	str	r3, [sp, #8]
    c = *fmt++;
 8007860:	4627      	mov	r7, r4
 8007862:	f817 0b01 	ldrb.w	r0, [r7], #1
    if (c == '\0') {
 8007866:	2800      	cmp	r0, #0
 8007868:	f000 81fc 	beq.w	8007c64 <test_printf+0x414>
 800786c:	4d89      	ldr	r5, [pc, #548]	; (8007a94 <test_printf+0x244>)
  n = 0;
 800786e:	f04f 0b00 	mov.w	fp, #0
 8007872:	4699      	mov	r9, r3
 8007874:	e00a      	b.n	800788c <test_printf+0x3c>
  if (chtest.putchar != NULL) {
 8007876:	6a2b      	ldr	r3, [r5, #32]
 8007878:	b103      	cbz	r3, 800787c <test_printf+0x2c>
    chtest.putchar(c);
 800787a:	4798      	blx	r3
      n++;
 800787c:	f10b 0b01 	add.w	fp, fp, #1
      continue;
 8007880:	463c      	mov	r4, r7
    c = *fmt++;
 8007882:	4627      	mov	r7, r4
 8007884:	f817 0b01 	ldrb.w	r0, [r7], #1
    if (c == '\0') {
 8007888:	2800      	cmp	r0, #0
 800788a:	d072      	beq.n	8007972 <test_printf+0x122>
    if (c != '%') {
 800788c:	2825      	cmp	r0, #37	; 0x25
 800788e:	d1f2      	bne.n	8007876 <test_printf+0x26>
    if (*fmt == '-') {
 8007890:	7863      	ldrb	r3, [r4, #1]
 8007892:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8007894:	bf04      	itt	eq
 8007896:	1ca7      	addeq	r7, r4, #2
      left_align = true;
 8007898:	f04f 0c01 	moveq.w	ip, #1
    if (*fmt == '+') {
 800789c:	783b      	ldrb	r3, [r7, #0]
    left_align = false;
 800789e:	bf18      	it	ne
 80078a0:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '+') {
 80078a4:	2b2b      	cmp	r3, #43	; 0x2b
    if (*fmt == '0') {
 80078a6:	bf03      	ittte	eq
 80078a8:	787b      	ldrbeq	r3, [r7, #1]
      do_sign = true;
 80078aa:	2601      	moveq	r6, #1
      fmt++;
 80078ac:	3701      	addeq	r7, #1
    do_sign = false;
 80078ae:	2600      	movne	r6, #0
    if (*fmt == '0') {
 80078b0:	2b30      	cmp	r3, #48	; 0x30
      fmt++;
 80078b2:	bf03      	ittte	eq
 80078b4:	3701      	addeq	r7, #1
      filler = '0';
 80078b6:	4698      	moveq	r8, r3
    if ( *fmt == '*') {
 80078b8:	783b      	ldrbeq	r3, [r7, #0]
    filler = ' ';
 80078ba:	f04f 0820 	movne.w	r8, #32
    if ( *fmt == '*') {
 80078be:	2b2a      	cmp	r3, #42	; 0x2a
 80078c0:	d147      	bne.n	8007952 <test_printf+0x102>
      width = va_arg(ap, int);
 80078c2:	f859 2b04 	ldr.w	r2, [r9], #4
      c = *fmt++;
 80078c6:	787b      	ldrb	r3, [r7, #1]
 80078c8:	1cbc      	adds	r4, r7, #2
    if (c == '.') {
 80078ca:	2b2e      	cmp	r3, #46	; 0x2e
 80078cc:	f000 8096 	beq.w	80079fc <test_printf+0x1ac>
    precision = 0;
 80078d0:	2000      	movs	r0, #0
    if ((c == 'l') || (c == 'L')) {
 80078d2:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 80078d6:	294c      	cmp	r1, #76	; 0x4c
 80078d8:	d051      	beq.n	800797e <test_printf+0x12e>
    switch (c) {
 80078da:	f1a3 0744 	sub.w	r7, r3, #68	; 0x44
 80078de:	2f34      	cmp	r7, #52	; 0x34
 80078e0:	f200 8096 	bhi.w	8007a10 <test_printf+0x1c0>
 80078e4:	e8df f017 	tbh	[pc, r7, lsl #1]
 80078e8:	009400d8 	.word	0x009400d8
 80078ec:	00940094 	.word	0x00940094
 80078f0:	00d80094 	.word	0x00d80094
 80078f4:	00940094 	.word	0x00940094
 80078f8:	00940094 	.word	0x00940094
 80078fc:	01430094 	.word	0x01430094
 8007900:	0094010a 	.word	0x0094010a
 8007904:	00940094 	.word	0x00940094
 8007908:	01b30094 	.word	0x01b30094
 800790c:	00940094 	.word	0x00940094
 8007910:	0094010a 	.word	0x0094010a
 8007914:	00940094 	.word	0x00940094
 8007918:	00940094 	.word	0x00940094
 800791c:	00940094 	.word	0x00940094
 8007920:	00940094 	.word	0x00940094
 8007924:	01650094 	.word	0x01650094
 8007928:	009400d8 	.word	0x009400d8
 800792c:	00940094 	.word	0x00940094
 8007930:	00d80094 	.word	0x00d80094
 8007934:	00940094 	.word	0x00940094
 8007938:	00940094 	.word	0x00940094
 800793c:	01430094 	.word	0x01430094
 8007940:	0094010a 	.word	0x0094010a
 8007944:	01460094 	.word	0x01460094
 8007948:	01b30094 	.word	0x01b30094
 800794c:	00940094 	.word	0x00940094
 8007950:	010a      	.short	0x010a
        c = *fmt++;
 8007952:	1c7c      	adds	r4, r7, #1
        if (c == '\0') {
 8007954:	b16b      	cbz	r3, 8007972 <test_printf+0x122>
      width = 0;
 8007956:	2200      	movs	r2, #0
        if ((c >= '0') && (c <= '9')) {
 8007958:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800795c:	b2c9      	uxtb	r1, r1
 800795e:	2909      	cmp	r1, #9
          width = width * 10 + c;
 8007960:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if ((c >= '0') && (c <= '9')) {
 8007964:	d8b1      	bhi.n	80078ca <test_printf+0x7a>
        c = *fmt++;
 8007966:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 800796a:	eb01 0240 	add.w	r2, r1, r0, lsl #1
        if (c == '\0') {
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1f2      	bne.n	8007958 <test_printf+0x108>
  formatted_bytes = test_vprintf(fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8007972:	4658      	mov	r0, fp
 8007974:	b007      	add	sp, #28
 8007976:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797a:	b004      	add	sp, #16
 800797c:	4770      	bx	lr
      c = *fmt++;
 800797e:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == '\0') {
 8007982:	2b00      	cmp	r3, #0
 8007984:	d0f5      	beq.n	8007972 <test_printf+0x122>
    switch (c) {
 8007986:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 800798a:	2934      	cmp	r1, #52	; 0x34
 800798c:	d840      	bhi.n	8007a10 <test_printf+0x1c0>
 800798e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007992:	0083      	.short	0x0083
 8007994:	003f003f 	.word	0x003f003f
 8007998:	003f003f 	.word	0x003f003f
 800799c:	003f0083 	.word	0x003f0083
 80079a0:	003f003f 	.word	0x003f003f
 80079a4:	003f003f 	.word	0x003f003f
 80079a8:	00b500ee 	.word	0x00b500ee
 80079ac:	003f003f 	.word	0x003f003f
 80079b0:	003f003f 	.word	0x003f003f
 80079b4:	003f015e 	.word	0x003f015e
 80079b8:	00b5003f 	.word	0x00b5003f
 80079bc:	003f003f 	.word	0x003f003f
 80079c0:	003f003f 	.word	0x003f003f
 80079c4:	003f003f 	.word	0x003f003f
 80079c8:	003f003f 	.word	0x003f003f
 80079cc:	003f003f 	.word	0x003f003f
 80079d0:	00830110 	.word	0x00830110
 80079d4:	003f003f 	.word	0x003f003f
 80079d8:	003f003f 	.word	0x003f003f
 80079dc:	003f0083 	.word	0x003f0083
 80079e0:	003f003f 	.word	0x003f003f
 80079e4:	003f003f 	.word	0x003f003f
 80079e8:	00b500ee 	.word	0x00b500ee
 80079ec:	003f003f 	.word	0x003f003f
 80079f0:	003f00f1 	.word	0x003f00f1
 80079f4:	003f015e 	.word	0x003f015e
 80079f8:	00b5003f 	.word	0x00b5003f
      c = *fmt++;
 80079fc:	7823      	ldrb	r3, [r4, #0]
      if (c == '\0') {
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d0b7      	beq.n	8007972 <test_printf+0x122>
      if (c == '*') {
 8007a02:	2b2a      	cmp	r3, #42	; 0x2a
 8007a04:	d134      	bne.n	8007a70 <test_printf+0x220>
        c = *fmt++;
 8007a06:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 8007a08:	f859 0b04 	ldr.w	r0, [r9], #4
        c = *fmt++;
 8007a0c:	3402      	adds	r4, #2
 8007a0e:	e760      	b.n	80078d2 <test_printf+0x82>
      *p++ = c;
 8007a10:	3a01      	subs	r2, #1
 8007a12:	f88d 300c 	strb.w	r3, [sp, #12]
    if (width < 0) {
 8007a16:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
    if (left_align == false) {
 8007a1a:	f1bc 0f00 	cmp.w	ip, #0
 8007a1e:	f040 80d5 	bne.w	8007bcc <test_printf+0x37c>
    if (width < 0) {
 8007a22:	2a00      	cmp	r2, #0
      width = -width;
 8007a24:	f1c7 0700 	rsb	r7, r7, #0
    if (width < 0) {
 8007a28:	f8cd c004 	str.w	ip, [sp, #4]
 8007a2c:	f300 80fc 	bgt.w	8007c28 <test_printf+0x3d8>
    if (left_align == false) {
 8007a30:	f10d 0a0c 	add.w	sl, sp, #12
 8007a34:	9b01      	ldr	r3, [sp, #4]
 8007a36:	4656      	mov	r6, sl
 8007a38:	449a      	add	sl, r3
  if (chtest.putchar != NULL) {
 8007a3a:	6a2b      	ldr	r3, [r5, #32]
      test_putchar(*s++);
 8007a3c:	3601      	adds	r6, #1
  if (chtest.putchar != NULL) {
 8007a3e:	b113      	cbz	r3, 8007a46 <test_printf+0x1f6>
    chtest.putchar(c);
 8007a40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007a44:	4798      	blx	r3
    while (--i >= 0) {
 8007a46:	ebaa 0306 	sub.w	r3, sl, r6
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	daf5      	bge.n	8007a3a <test_printf+0x1ea>
      n++;
 8007a4e:	9b01      	ldr	r3, [sp, #4]
 8007a50:	f10b 0b01 	add.w	fp, fp, #1
 8007a54:	445b      	add	r3, fp
 8007a56:	469b      	mov	fp, r3
    while (width) {
 8007a58:	2f00      	cmp	r7, #0
 8007a5a:	f43f af12 	beq.w	8007882 <test_printf+0x32>
 8007a5e:	463e      	mov	r6, r7
  if (chtest.putchar != NULL) {
 8007a60:	6a2b      	ldr	r3, [r5, #32]
    chtest.putchar(c);
 8007a62:	4640      	mov	r0, r8
  if (chtest.putchar != NULL) {
 8007a64:	b103      	cbz	r3, 8007a68 <test_printf+0x218>
    chtest.putchar(c);
 8007a66:	4798      	blx	r3
    while (width) {
 8007a68:	3e01      	subs	r6, #1
 8007a6a:	d1f9      	bne.n	8007a60 <test_printf+0x210>
      n++;
 8007a6c:	44bb      	add	fp, r7
 8007a6e:	e708      	b.n	8007882 <test_printf+0x32>
      c = *fmt++;
 8007a70:	3401      	adds	r4, #1
    precision = 0;
 8007a72:	2000      	movs	r0, #0
        while ((c >= '0') && (c <= '9')) {
 8007a74:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007a78:	b2c9      	uxtb	r1, r1
 8007a7a:	2909      	cmp	r1, #9
          precision = precision * 10 + c;
 8007a7c:	eb00 0780 	add.w	r7, r0, r0, lsl #2
        while ((c >= '0') && (c <= '9')) {
 8007a80:	f63f af27 	bhi.w	80078d2 <test_printf+0x82>
          c = *fmt++;
 8007a84:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 8007a88:	eb01 0047 	add.w	r0, r1, r7, lsl #1
          if (c == '\0') {
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1f1      	bne.n	8007a74 <test_printf+0x224>
 8007a90:	e76f      	b.n	8007972 <test_printf+0x122>
 8007a92:	bf00      	nop
 8007a94:	20000b74 	.word	0x20000b74
        arg = va_arg(ap, int);
 8007a98:	f859 0b04 	ldr.w	r0, [r9], #4
      if (arg < 0) {
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	f2c0 80bb 	blt.w	8007c18 <test_printf+0x3c8>
        if (do_sign) {
 8007aa2:	2e00      	cmp	r6, #0
 8007aa4:	f000 80db 	beq.w	8007c5e <test_printf+0x40e>
          *p++ = '+';
 8007aa8:	232b      	movs	r3, #43	; 0x2b
 8007aaa:	f88d 300c 	strb.w	r3, [sp, #12]
 8007aae:	f10d 070d 	add.w	r7, sp, #13
 8007ab2:	ab03      	add	r3, sp, #12
  q = p + MAX_FILLER;
 8007ab4:	f107 010b 	add.w	r1, r7, #11
 8007ab8:	9101      	str	r1, [sp, #4]
 8007aba:	460e      	mov	r6, r1
    c = (int)(l % (long)radix);
 8007abc:	496e      	ldr	r1, [pc, #440]	; (8007c78 <test_printf+0x428>)
 8007abe:	fba1 e100 	umull	lr, r1, r1, r0
 8007ac2:	08c9      	lsrs	r1, r1, #3
 8007ac4:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
 8007ac8:	468e      	mov	lr, r1
 8007aca:	eba0 014a 	sub.w	r1, r0, sl, lsl #1
    c += '0';
 8007ace:	3130      	adds	r1, #48	; 0x30
    *--q = (char)c;
 8007ad0:	b2c9      	uxtb	r1, r1
  } while (ll != 0);
 8007ad2:	4670      	mov	r0, lr
    *--q = (char)c;
 8007ad4:	f806 1d01 	strb.w	r1, [r6, #-1]!
  } while (ll != 0);
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d1ef      	bne.n	8007abc <test_printf+0x26c>
  i = (int)(p + MAX_FILLER - q);
 8007adc:	9801      	ldr	r0, [sp, #4]
 8007ade:	1b80      	subs	r0, r0, r6
 8007ae0:	4438      	add	r0, r7
 8007ae2:	e001      	b.n	8007ae8 <test_printf+0x298>
    *p++ = *q++;
 8007ae4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ae8:	f807 1b01 	strb.w	r1, [r7], #1
  } while (--i);
 8007aec:	42b8      	cmp	r0, r7
 8007aee:	d1f9      	bne.n	8007ae4 <test_printf+0x294>
    i = (int)(p - s);
 8007af0:	1ac0      	subs	r0, r0, r3
        i--;
 8007af2:	1e41      	subs	r1, r0, #1
    width -= i;
 8007af4:	1a12      	subs	r2, r2, r0
        i--;
 8007af6:	9101      	str	r1, [sp, #4]
    s = tmpbuf;
 8007af8:	469a      	mov	sl, r3
 8007afa:	e02a      	b.n	8007b52 <test_printf+0x302>
      radix = 16;
 8007afc:	f04f 0e10 	mov.w	lr, #16
        arg = va_arg(ap, unsigned int);
 8007b00:	f859 3b04 	ldr.w	r3, [r9], #4
    switch (c) {
 8007b04:	f10d 0017 	add.w	r0, sp, #23
 8007b08:	e000      	b.n	8007b0c <test_printf+0x2bc>
 8007b0a:	4630      	mov	r0, r6
    c = (int)(l % (long)radix);
 8007b0c:	fb93 f7fe 	sdiv	r7, r3, lr
 8007b10:	fb0e 3317 	mls	r3, lr, r7, r3
    c += '0';
 8007b14:	f103 0130 	add.w	r1, r3, #48	; 0x30
    if (c > '9') {
 8007b18:	2939      	cmp	r1, #57	; 0x39
      c += ('A' - '0') - 10;
 8007b1a:	bfc8      	it	gt
 8007b1c:	f103 0137 	addgt.w	r1, r3, #55	; 0x37
    *--q = (char)c;
 8007b20:	b2c9      	uxtb	r1, r1
 8007b22:	1e46      	subs	r6, r0, #1
 8007b24:	f800 1c01 	strb.w	r1, [r0, #-1]
    l /= radix;
 8007b28:	463b      	mov	r3, r7
  } while (ll != 0);
 8007b2a:	2f00      	cmp	r7, #0
 8007b2c:	d1ed      	bne.n	8007b0a <test_printf+0x2ba>
  i = (int)(p + MAX_FILLER - q);
 8007b2e:	f10d 0317 	add.w	r3, sp, #23
 8007b32:	1b9e      	subs	r6, r3, r6
 8007b34:	ab03      	add	r3, sp, #12
 8007b36:	f10d 0e17 	add.w	lr, sp, #23
 8007b3a:	461f      	mov	r7, r3
 8007b3c:	e001      	b.n	8007b42 <test_printf+0x2f2>
    *p++ = *q++;
 8007b3e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007b42:	f807 1b01 	strb.w	r1, [r7], #1
  } while (--i);
 8007b46:	4586      	cmp	lr, r0
 8007b48:	d1f9      	bne.n	8007b3e <test_printf+0x2ee>
        i--;
 8007b4a:	1e71      	subs	r1, r6, #1
    width -= i;
 8007b4c:	1b92      	subs	r2, r2, r6
        i--;
 8007b4e:	9101      	str	r1, [sp, #4]
    s = tmpbuf;
 8007b50:	469a      	mov	sl, r3
    if (width < 0) {
 8007b52:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
    if (left_align == false) {
 8007b56:	f1bc 0f00 	cmp.w	ip, #0
 8007b5a:	d103      	bne.n	8007b64 <test_printf+0x314>
    if (width < 0) {
 8007b5c:	2a00      	cmp	r2, #0
      width = -width;
 8007b5e:	f1c7 0700 	rsb	r7, r7, #0
    if (width < 0) {
 8007b62:	dc36      	bgt.n	8007bd2 <test_printf+0x382>
    while (--i >= 0) {
 8007b64:	9b01      	ldr	r3, [sp, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f6bf af64 	bge.w	8007a34 <test_printf+0x1e4>
 8007b6c:	e774      	b.n	8007a58 <test_printf+0x208>
      radix = 8;
 8007b6e:	f04f 0e08 	mov.w	lr, #8
 8007b72:	e7c5      	b.n	8007b00 <test_printf+0x2b0>
      if ((s = va_arg(ap, char *)) == NULL) {
 8007b74:	f859 ab04 	ldr.w	sl, [r9], #4
 8007b78:	f1ba 0f00 	cmp.w	sl, #0
 8007b7c:	d06a      	beq.n	8007c54 <test_printf+0x404>
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 8007b7e:	f89a 1000 	ldrb.w	r1, [sl]
      if (precision == 0) {
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d154      	bne.n	8007c30 <test_printf+0x3e0>
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 8007b86:	2900      	cmp	r1, #0
 8007b88:	d055      	beq.n	8007c36 <test_printf+0x3e6>
 8007b8a:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8007b8e:	4651      	mov	r1, sl
 8007b90:	e001      	b.n	8007b96 <test_printf+0x346>
 8007b92:	42c6      	cmn	r6, r0
 8007b94:	d405      	bmi.n	8007ba2 <test_printf+0x352>
 8007b96:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007b9a:	ebaa 0601 	sub.w	r6, sl, r1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f7      	bne.n	8007b92 <test_printf+0x342>
    i = (int)(p - s);
 8007ba2:	eba1 010a 	sub.w	r1, r1, sl
        i--;
 8007ba6:	1e4b      	subs	r3, r1, #1
    width -= i;
 8007ba8:	1a52      	subs	r2, r2, r1
        i--;
 8007baa:	9301      	str	r3, [sp, #4]
      filler = ' ';
 8007bac:	f04f 0820 	mov.w	r8, #32
 8007bb0:	e7cf      	b.n	8007b52 <test_printf+0x302>
      *p++ = va_arg(ap, int);
 8007bb2:	f859 3b04 	ldr.w	r3, [r9], #4
 8007bb6:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8007bba:	3a01      	subs	r2, #1
      filler = ' ';
 8007bbc:	f04f 0820 	mov.w	r8, #32
    if (width < 0) {
 8007bc0:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
    if (left_align == false) {
 8007bc4:	f1bc 0f00 	cmp.w	ip, #0
 8007bc8:	f43f af2b 	beq.w	8007a22 <test_printf+0x1d2>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	e72e      	b.n	8007a30 <test_printf+0x1e0>
      width = -width;
 8007bd2:	463e      	mov	r6, r7
      if (((*s == '-') || (*s == '+')) && (filler == '0')) {
 8007bd4:	f89a 0000 	ldrb.w	r0, [sl]
 8007bd8:	282d      	cmp	r0, #45	; 0x2d
 8007bda:	d00e      	beq.n	8007bfa <test_printf+0x3aa>
 8007bdc:	282b      	cmp	r0, #43	; 0x2b
 8007bde:	d00c      	beq.n	8007bfa <test_printf+0x3aa>
  if (chtest.putchar != NULL) {
 8007be0:	6a2a      	ldr	r2, [r5, #32]
    chtest.putchar(c);
 8007be2:	4640      	mov	r0, r8
  if (chtest.putchar != NULL) {
 8007be4:	b102      	cbz	r2, 8007be8 <test_printf+0x398>
    chtest.putchar(c);
 8007be6:	4790      	blx	r2
      } while (++width != 0);
 8007be8:	3701      	adds	r7, #1
 8007bea:	d1f9      	bne.n	8007be0 <test_printf+0x390>
    while (--i >= 0) {
 8007bec:	9b01      	ldr	r3, [sp, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	ebab 0b06 	sub.w	fp, fp, r6
 8007bf4:	f6bf af1e 	bge.w	8007a34 <test_printf+0x1e4>
 8007bf8:	e643      	b.n	8007882 <test_printf+0x32>
      if (((*s == '-') || (*s == '+')) && (filler == '0')) {
 8007bfa:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8007bfe:	d1ef      	bne.n	8007be0 <test_printf+0x390>
  if (chtest.putchar != NULL) {
 8007c00:	6a2a      	ldr	r2, [r5, #32]
        test_putchar(*s++);
 8007c02:	f10a 0a01 	add.w	sl, sl, #1
  if (chtest.putchar != NULL) {
 8007c06:	b10a      	cbz	r2, 8007c0c <test_printf+0x3bc>
    chtest.putchar(c);
 8007c08:	4790      	blx	r2
  if (chtest.putchar != NULL) {
 8007c0a:	6a2a      	ldr	r2, [r5, #32]
    while (--i >= 0) {
 8007c0c:	9b01      	ldr	r3, [sp, #4]
 8007c0e:	3b01      	subs	r3, #1
        n++;
 8007c10:	f10b 0b01 	add.w	fp, fp, #1
    while (--i >= 0) {
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	e7e4      	b.n	8007be2 <test_printf+0x392>
        *p++ = '-';
 8007c18:	232d      	movs	r3, #45	; 0x2d
 8007c1a:	f88d 300c 	strb.w	r3, [sp, #12]
        arg = -arg;
 8007c1e:	4240      	negs	r0, r0
        *p++ = '-';
 8007c20:	f10d 070d 	add.w	r7, sp, #13
 8007c24:	ab03      	add	r3, sp, #12
 8007c26:	e745      	b.n	8007ab4 <test_printf+0x264>
      width = -width;
 8007c28:	463e      	mov	r6, r7
    if (width < 0) {
 8007c2a:	f10d 0a0c 	add.w	sl, sp, #12
 8007c2e:	e7d1      	b.n	8007bd4 <test_printf+0x384>
      for (p = s; (*p != '\0') && (--precision >= 0); p++) {
 8007c30:	b109      	cbz	r1, 8007c36 <test_printf+0x3e6>
 8007c32:	3801      	subs	r0, #1
 8007c34:	d5ab      	bpl.n	8007b8e <test_printf+0x33e>
    if (width < 0) {
 8007c36:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
    if (left_align == false) {
 8007c3a:	f1bc 0f00 	cmp.w	ip, #0
 8007c3e:	d103      	bne.n	8007c48 <test_printf+0x3f8>
    if (width < 0) {
 8007c40:	2a00      	cmp	r2, #0
      width = -width;
 8007c42:	f1c7 0700 	rsb	r7, r7, #0
    if (width < 0) {
 8007c46:	dc0f      	bgt.n	8007c68 <test_printf+0x418>
    if (left_align == false) {
 8007c48:	f04f 0820 	mov.w	r8, #32
 8007c4c:	e704      	b.n	8007a58 <test_printf+0x208>
    switch (c) {
 8007c4e:	f04f 0e0a 	mov.w	lr, #10
 8007c52:	e755      	b.n	8007b00 <test_printf+0x2b0>
        s = "(null)";
 8007c54:	f8df a024 	ldr.w	sl, [pc, #36]	; 8007c7c <test_printf+0x42c>
      if (precision == 0) {
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d096      	beq.n	8007b8a <test_printf+0x33a>
 8007c5c:	e7e9      	b.n	8007c32 <test_printf+0x3e2>
    p = tmpbuf;
 8007c5e:	ab03      	add	r3, sp, #12
 8007c60:	461f      	mov	r7, r3
 8007c62:	e727      	b.n	8007ab4 <test_printf+0x264>
  n = 0;
 8007c64:	4683      	mov	fp, r0
  return formatted_bytes;
 8007c66:	e684      	b.n	8007972 <test_printf+0x122>
    if (width < 0) {
 8007c68:	f04f 33ff 	mov.w	r3, #4294967295
      width = -width;
 8007c6c:	463e      	mov	r6, r7
    if (width < 0) {
 8007c6e:	f04f 0820 	mov.w	r8, #32
 8007c72:	9301      	str	r3, [sp, #4]
 8007c74:	e7ae      	b.n	8007bd4 <test_printf+0x384>
 8007c76:	bf00      	nop
 8007c78:	cccccccd 	.word	0xcccccccd
 8007c7c:	08015524 	.word	0x08015524

08007c80 <rt_test_001_001_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.1.1] Prints the version string.
 * .
 */

static void rt_test_001_001_execute(void) {
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @api
 */
static inline void test_print(const char *msgp) {

  test_printf("%s", msgp);
 8007c82:	4d26      	ldr	r5, [pc, #152]	; (8007d1c <rt_test_001_001_execute.lto_priv.0+0x9c>)

  /* [1.1.1] Prints the version string.*/
  test_set_step(1);
 8007c84:	4b26      	ldr	r3, [pc, #152]	; (8007d20 <rt_test_001_001_execute.lto_priv.0+0xa0>)
 *
 * @api
 */
static inline void test_println(const char *msgp) {

  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007c86:	4c27      	ldr	r4, [pc, #156]	; (8007d24 <rt_test_001_001_execute.lto_priv.0+0xa4>)
  test_printf("%s", msgp);
 8007c88:	4927      	ldr	r1, [pc, #156]	; (8007d28 <rt_test_001_001_execute.lto_priv.0+0xa8>)
  test_printf("%u", n);
 8007c8a:	4f28      	ldr	r7, [pc, #160]	; (8007d2c <rt_test_001_001_execute.lto_priv.0+0xac>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007c8c:	4e28      	ldr	r6, [pc, #160]	; (8007d30 <rt_test_001_001_execute.lto_priv.0+0xb0>)
 8007c8e:	2201      	movs	r2, #1
  test_printf("%s", msgp);
 8007c90:	4628      	mov	r0, r5
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	f7ff fddc 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007c98:	4926      	ldr	r1, [pc, #152]	; (8007d34 <rt_test_001_001_execute.lto_priv.0+0xb4>)
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f7ff fdd8 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007ca0:	4925      	ldr	r1, [pc, #148]	; (8007d38 <rt_test_001_001_execute.lto_priv.0+0xb8>)
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f7ff fdd4 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007ca8:	4924      	ldr	r1, [pc, #144]	; (8007d3c <rt_test_001_001_execute.lto_priv.0+0xbc>)
 8007caa:	4620      	mov	r0, r4
 8007cac:	f7ff fdd0 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007cb0:	4923      	ldr	r1, [pc, #140]	; (8007d40 <rt_test_001_001_execute.lto_priv.0+0xc0>)
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f7ff fdcc 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007cb8:	4922      	ldr	r1, [pc, #136]	; (8007d44 <rt_test_001_001_execute.lto_priv.0+0xc4>)
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f7ff fdc8 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007cc0:	4921      	ldr	r1, [pc, #132]	; (8007d48 <rt_test_001_001_execute.lto_priv.0+0xc8>)
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f7ff fdc4 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007cc8:	4920      	ldr	r1, [pc, #128]	; (8007d4c <rt_test_001_001_execute.lto_priv.0+0xcc>)
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f7ff fdc0 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007cd0:	491f      	ldr	r1, [pc, #124]	; (8007d50 <rt_test_001_001_execute.lto_priv.0+0xd0>)
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f7ff fdbc 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007cd8:	2104      	movs	r1, #4
 8007cda:	4638      	mov	r0, r7
 8007cdc:	f7ff fdb8 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f7ff fdb4 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007ce8:	491a      	ldr	r1, [pc, #104]	; (8007d54 <rt_test_001_001_execute.lto_priv.0+0xd4>)
 8007cea:	4628      	mov	r0, r5
 8007cec:	f7ff fdb0 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007cf0:	2108      	movs	r1, #8
 8007cf2:	4638      	mov	r0, r7
 8007cf4:	f7ff fdac 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f7ff fda8 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007d00:	4915      	ldr	r1, [pc, #84]	; (8007d58 <rt_test_001_001_execute.lto_priv.0+0xd8>)
 8007d02:	4628      	mov	r0, r5
 8007d04:	f7ff fda4 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007d08:	2108      	movs	r1, #8
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	f7ff fda0 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007d10:	4631      	mov	r1, r6
 8007d12:	4620      	mov	r0, r4
    test_printn(PORT_WORKING_AREA_ALIGN);
    test_println("");
#endif
  }
  test_end_step(1);
}
 8007d14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d18:	f7ff bd9a 	b.w	8007850 <test_printf>
 8007d1c:	08015558 	.word	0x08015558
 8007d20:	20000b74 	.word	0x20000b74
 8007d24:	0801dcbc 	.word	0x0801dcbc
 8007d28:	0801552c 	.word	0x0801552c
 8007d2c:	08015650 	.word	0x08015650
 8007d30:	0801dcd4 	.word	0x0801dcd4
 8007d34:	0801555c 	.word	0x0801555c
 8007d38:	08015568 	.word	0x08015568
 8007d3c:	08015594 	.word	0x08015594
 8007d40:	080155a0 	.word	0x080155a0
 8007d44:	080155cc 	.word	0x080155cc
 8007d48:	080155e0 	.word	0x080155e0
 8007d4c:	0801560c 	.word	0x0801560c
 8007d50:	08015624 	.word	0x08015624
 8007d54:	08015654 	.word	0x08015654
 8007d58:	08015680 	.word	0x08015680
 8007d5c:	00000000 	.word	0x00000000

08007d60 <oslib_test_001_001_execute.lto_priv.0>:
 8007d60:	f7ff bf8e 	b.w	8007c80 <rt_test_001_001_execute.lto_priv.0>
	...

08007d70 <rt_test_001_002_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.2.1] Prints the version string.
 * .
 */

static void rt_test_001_002_execute(void) {
 8007d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d72:	4c22      	ldr	r4, [pc, #136]	; (8007dfc <rt_test_001_002_execute.lto_priv.0+0x8c>)

  /* [1.2.1] Prints the version string.*/
  test_set_step(1);
 8007d74:	4b22      	ldr	r3, [pc, #136]	; (8007e00 <rt_test_001_002_execute.lto_priv.0+0x90>)
  test_printf("%s", msgp);
 8007d76:	4d23      	ldr	r5, [pc, #140]	; (8007e04 <rt_test_001_002_execute.lto_priv.0+0x94>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007d78:	4923      	ldr	r1, [pc, #140]	; (8007e08 <rt_test_001_002_execute.lto_priv.0+0x98>)
  test_printf("%u", n);
 8007d7a:	4f24      	ldr	r7, [pc, #144]	; (8007e0c <rt_test_001_002_execute.lto_priv.0+0x9c>)
 8007d7c:	2601      	movs	r6, #1
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007d7e:	4620      	mov	r0, r4
 8007d80:	601e      	str	r6, [r3, #0]
 8007d82:	f7ff fd65 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007d86:	4922      	ldr	r1, [pc, #136]	; (8007e10 <rt_test_001_002_execute.lto_priv.0+0xa0>)
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f7ff fd61 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007d8e:	4631      	mov	r1, r6
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007d90:	4e20      	ldr	r6, [pc, #128]	; (8007e14 <rt_test_001_002_execute.lto_priv.0+0xa4>)
  test_printf("%u", n);
 8007d92:	4638      	mov	r0, r7
 8007d94:	f7ff fd5c 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007d98:	4631      	mov	r1, r6
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f7ff fd58 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007da0:	491d      	ldr	r1, [pc, #116]	; (8007e18 <rt_test_001_002_execute.lto_priv.0+0xa8>)
 8007da2:	4628      	mov	r0, r5
 8007da4:	f7ff fd54 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007da8:	491c      	ldr	r1, [pc, #112]	; (8007e1c <rt_test_001_002_execute.lto_priv.0+0xac>)
 8007daa:	4620      	mov	r0, r4
 8007dac:	f7ff fd50 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007db0:	491b      	ldr	r1, [pc, #108]	; (8007e20 <rt_test_001_002_execute.lto_priv.0+0xb0>)
 8007db2:	4628      	mov	r0, r5
 8007db4:	f7ff fd4c 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007db8:	2107      	movs	r1, #7
 8007dba:	4638      	mov	r0, r7
 8007dbc:	f7ff fd48 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007dc0:	4631      	mov	r1, r6
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f7ff fd44 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007dc8:	4916      	ldr	r1, [pc, #88]	; (8007e24 <rt_test_001_002_execute.lto_priv.0+0xb4>)
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f7ff fd40 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	f7ff fd3c 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f7ff fd38 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007de0:	4911      	ldr	r1, [pc, #68]	; (8007e28 <rt_test_001_002_execute.lto_priv.0+0xb8>)
 8007de2:	4628      	mov	r0, r5
 8007de4:	f7ff fd34 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007de8:	2104      	movs	r1, #4
 8007dea:	4638      	mov	r0, r7
 8007dec:	f7ff fd30 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007df0:	4631      	mov	r1, r6
 8007df2:	4620      	mov	r0, r4
    test_print("--- Patch Number:                       ");
    test_printn(CH_KERNEL_PATCH);
    test_println("");
  }
  test_end_step(1);
}
 8007df4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007df8:	f7ff bd2a 	b.w	8007850 <test_printf>
 8007dfc:	0801dcbc 	.word	0x0801dcbc
 8007e00:	20000b74 	.word	0x20000b74
 8007e04:	08015558 	.word	0x08015558
 8007e08:	080156ac 	.word	0x080156ac
 8007e0c:	08015650 	.word	0x08015650
 8007e10:	080156e0 	.word	0x080156e0
 8007e14:	0801dcd4 	.word	0x0801dcd4
 8007e18:	0801570c 	.word	0x0801570c
 8007e1c:	08015738 	.word	0x08015738
 8007e20:	08015740 	.word	0x08015740
 8007e24:	0801576c 	.word	0x0801576c
 8007e28:	08015798 	.word	0x08015798
 8007e2c:	00000000 	.word	0x00000000

08007e30 <rt_test_001_003_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8007e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_printf("%s", msgp);
 8007e34:	4fc5      	ldr	r7, [pc, #788]	; (800814c <rt_test_001_003_execute.lto_priv.0+0x31c>)

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8007e36:	4bc6      	ldr	r3, [pc, #792]	; (8008150 <rt_test_001_003_execute.lto_priv.0+0x320>)
  test_printf("%u", n);
 8007e38:	4ec6      	ldr	r6, [pc, #792]	; (8008154 <rt_test_001_003_execute.lto_priv.0+0x324>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007e3a:	4dc7      	ldr	r5, [pc, #796]	; (8008158 <rt_test_001_003_execute.lto_priv.0+0x328>)
 8007e3c:	4cc7      	ldr	r4, [pc, #796]	; (800815c <rt_test_001_003_execute.lto_priv.0+0x32c>)
  test_printf("%s", msgp);
 8007e3e:	49c8      	ldr	r1, [pc, #800]	; (8008160 <rt_test_001_003_execute.lto_priv.0+0x330>)
 8007e40:	f04f 0801 	mov.w	r8, #1
 8007e44:	4638      	mov	r0, r7
 8007e46:	f8c3 8000 	str.w	r8, [r3]
 8007e4a:	f7ff fd01 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007e4e:	2120      	movs	r1, #32
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7ff fcfd 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007e56:	4629      	mov	r1, r5
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f7ff fcf9 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007e5e:	49c1      	ldr	r1, [pc, #772]	; (8008164 <rt_test_001_003_execute.lto_priv.0+0x334>)
 8007e60:	4638      	mov	r0, r7
 8007e62:	f7ff fcf5 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007e66:	f242 7110 	movw	r1, #10000	; 0x2710
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f7ff fcf0 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007e70:	4629      	mov	r1, r5
 8007e72:	4620      	mov	r0, r4
 8007e74:	f7ff fcec 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007e78:	49bb      	ldr	r1, [pc, #748]	; (8008168 <rt_test_001_003_execute.lto_priv.0+0x338>)
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	f7ff fce8 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007e80:	2120      	movs	r1, #32
 8007e82:	4630      	mov	r0, r6
 8007e84:	f7ff fce4 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007e88:	4629      	mov	r1, r5
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f7ff fce0 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007e90:	49b6      	ldr	r1, [pc, #728]	; (800816c <rt_test_001_003_execute.lto_priv.0+0x33c>)
 8007e92:	4638      	mov	r0, r7
 8007e94:	f7ff fcdc 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007e98:	2120      	movs	r1, #32
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7ff fcd8 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f7ff fcd4 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007ea8:	49b1      	ldr	r1, [pc, #708]	; (8008170 <rt_test_001_003_execute.lto_priv.0+0x340>)
 8007eaa:	4638      	mov	r0, r7
 8007eac:	f7ff fcd0 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007eb0:	2102      	movs	r1, #2
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff fccc 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007eb8:	4629      	mov	r1, r5
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f7ff fcc8 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007ec0:	49ac      	ldr	r1, [pc, #688]	; (8008174 <rt_test_001_003_execute.lto_priv.0+0x344>)
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	f7ff fcc4 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f7ff fcc0 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f7ff fcbc 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007ed8:	49a7      	ldr	r1, [pc, #668]	; (8008178 <rt_test_001_003_execute.lto_priv.0+0x348>)
 8007eda:	4638      	mov	r0, r7
 8007edc:	f7ff fcb8 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f7ff fcb4 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007ee8:	4629      	mov	r1, r5
 8007eea:	4620      	mov	r0, r4
 8007eec:	f7ff fcb0 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007ef0:	49a2      	ldr	r1, [pc, #648]	; (800817c <rt_test_001_003_execute.lto_priv.0+0x34c>)
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	f7ff fcac 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4630      	mov	r0, r6
 8007efc:	f7ff fca8 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007f00:	4629      	mov	r1, r5
 8007f02:	4620      	mov	r0, r4
 8007f04:	f7ff fca4 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007f08:	499d      	ldr	r1, [pc, #628]	; (8008180 <rt_test_001_003_execute.lto_priv.0+0x350>)
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	f7ff fca0 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007f10:	4641      	mov	r1, r8
 8007f12:	4630      	mov	r0, r6
 8007f14:	f7ff fc9c 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007f18:	4629      	mov	r1, r5
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f7ff fc98 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007f20:	4998      	ldr	r1, [pc, #608]	; (8008184 <rt_test_001_003_execute.lto_priv.0+0x354>)
 8007f22:	4638      	mov	r0, r7
 8007f24:	f7ff fc94 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007f28:	4641      	mov	r1, r8
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f7ff fc90 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007f30:	4629      	mov	r1, r5
 8007f32:	4620      	mov	r0, r4
 8007f34:	f7ff fc8c 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007f38:	4993      	ldr	r1, [pc, #588]	; (8008188 <rt_test_001_003_execute.lto_priv.0+0x358>)
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	f7ff fc88 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007f40:	4641      	mov	r1, r8
 8007f42:	4630      	mov	r0, r6
 8007f44:	f7ff fc84 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007f48:	4629      	mov	r1, r5
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f7ff fc80 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007f50:	498e      	ldr	r1, [pc, #568]	; (800818c <rt_test_001_003_execute.lto_priv.0+0x35c>)
 8007f52:	4638      	mov	r0, r7
 8007f54:	f7ff fc7c 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007f58:	4641      	mov	r1, r8
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7ff fc78 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007f60:	4629      	mov	r1, r5
 8007f62:	4620      	mov	r0, r4
 8007f64:	f7ff fc74 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007f68:	4989      	ldr	r1, [pc, #548]	; (8008190 <rt_test_001_003_execute.lto_priv.0+0x360>)
 8007f6a:	4638      	mov	r0, r7
 8007f6c:	f7ff fc70 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007f70:	4641      	mov	r1, r8
 8007f72:	4630      	mov	r0, r6
 8007f74:	f7ff fc6c 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007f78:	4629      	mov	r1, r5
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f7ff fc68 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007f80:	4984      	ldr	r1, [pc, #528]	; (8008194 <rt_test_001_003_execute.lto_priv.0+0x364>)
 8007f82:	4638      	mov	r0, r7
 8007f84:	f7ff fc64 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007f88:	2100      	movs	r1, #0
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f7ff fc60 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007f90:	4629      	mov	r1, r5
 8007f92:	4620      	mov	r0, r4
 8007f94:	f7ff fc5c 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007f98:	497f      	ldr	r1, [pc, #508]	; (8008198 <rt_test_001_003_execute.lto_priv.0+0x368>)
 8007f9a:	4638      	mov	r0, r7
 8007f9c:	f7ff fc58 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007fa0:	4641      	mov	r1, r8
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7ff fc54 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4620      	mov	r0, r4
 8007fac:	f7ff fc50 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007fb0:	497a      	ldr	r1, [pc, #488]	; (800819c <rt_test_001_003_execute.lto_priv.0+0x36c>)
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	f7ff fc4c 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007fb8:	2100      	movs	r1, #0
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f7ff fc48 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f7ff fc44 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007fc8:	4975      	ldr	r1, [pc, #468]	; (80081a0 <rt_test_001_003_execute.lto_priv.0+0x370>)
 8007fca:	4638      	mov	r0, r7
 8007fcc:	f7ff fc40 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007fd0:	4641      	mov	r1, r8
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f7ff fc3c 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f7ff fc38 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007fe0:	4970      	ldr	r1, [pc, #448]	; (80081a4 <rt_test_001_003_execute.lto_priv.0+0x374>)
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	f7ff fc34 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8007fe8:	4641      	mov	r1, r8
 8007fea:	4630      	mov	r0, r6
 8007fec:	f7ff fc30 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f7ff fc2c 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8007ff8:	496b      	ldr	r1, [pc, #428]	; (80081a8 <rt_test_001_003_execute.lto_priv.0+0x378>)
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	f7ff fc28 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008000:	4641      	mov	r1, r8
 8008002:	4630      	mov	r0, r6
 8008004:	f7ff fc24 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008008:	4629      	mov	r1, r5
 800800a:	4620      	mov	r0, r4
 800800c:	f7ff fc20 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008010:	4966      	ldr	r1, [pc, #408]	; (80081ac <rt_test_001_003_execute.lto_priv.0+0x37c>)
 8008012:	4638      	mov	r0, r7
 8008014:	f7ff fc1c 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008018:	4641      	mov	r1, r8
 800801a:	4630      	mov	r0, r6
 800801c:	f7ff fc18 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008020:	4629      	mov	r1, r5
 8008022:	4620      	mov	r0, r4
 8008024:	f7ff fc14 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008028:	4961      	ldr	r1, [pc, #388]	; (80081b0 <rt_test_001_003_execute.lto_priv.0+0x380>)
 800802a:	4638      	mov	r0, r7
 800802c:	f7ff fc10 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008030:	4641      	mov	r1, r8
 8008032:	4630      	mov	r0, r6
 8008034:	f7ff fc0c 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008038:	4629      	mov	r1, r5
 800803a:	4620      	mov	r0, r4
 800803c:	f7ff fc08 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008040:	495c      	ldr	r1, [pc, #368]	; (80081b4 <rt_test_001_003_execute.lto_priv.0+0x384>)
 8008042:	4638      	mov	r0, r7
 8008044:	f7ff fc04 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008048:	2100      	movs	r1, #0
 800804a:	4630      	mov	r0, r6
 800804c:	f7ff fc00 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008050:	4629      	mov	r1, r5
 8008052:	4620      	mov	r0, r4
 8008054:	f7ff fbfc 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008058:	4957      	ldr	r1, [pc, #348]	; (80081b8 <rt_test_001_003_execute.lto_priv.0+0x388>)
 800805a:	4638      	mov	r0, r7
 800805c:	f7ff fbf8 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008060:	4641      	mov	r1, r8
 8008062:	4630      	mov	r0, r6
 8008064:	f7ff fbf4 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008068:	4629      	mov	r1, r5
 800806a:	4620      	mov	r0, r4
 800806c:	f7ff fbf0 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008070:	4952      	ldr	r1, [pc, #328]	; (80081bc <rt_test_001_003_execute.lto_priv.0+0x38c>)
 8008072:	4638      	mov	r0, r7
 8008074:	f7ff fbec 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008078:	2100      	movs	r1, #0
 800807a:	4630      	mov	r0, r6
 800807c:	f7ff fbe8 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008080:	4629      	mov	r1, r5
 8008082:	4620      	mov	r0, r4
 8008084:	f7ff fbe4 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008088:	494d      	ldr	r1, [pc, #308]	; (80081c0 <rt_test_001_003_execute.lto_priv.0+0x390>)
 800808a:	4638      	mov	r0, r7
 800808c:	f7ff fbe0 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008090:	2100      	movs	r1, #0
 8008092:	4630      	mov	r0, r6
 8008094:	f7ff fbdc 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008098:	4629      	mov	r1, r5
 800809a:	4620      	mov	r0, r4
 800809c:	f7ff fbd8 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 80080a0:	4948      	ldr	r1, [pc, #288]	; (80081c4 <rt_test_001_003_execute.lto_priv.0+0x394>)
 80080a2:	4638      	mov	r0, r7
 80080a4:	f7ff fbd4 	bl	8007850 <test_printf>
  test_printf("%u", n);
 80080a8:	2100      	movs	r1, #0
 80080aa:	4630      	mov	r0, r6
 80080ac:	f7ff fbd0 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80080b0:	4629      	mov	r1, r5
 80080b2:	4620      	mov	r0, r4
 80080b4:	f7ff fbcc 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 80080b8:	4943      	ldr	r1, [pc, #268]	; (80081c8 <rt_test_001_003_execute.lto_priv.0+0x398>)
 80080ba:	4638      	mov	r0, r7
 80080bc:	f7ff fbc8 	bl	8007850 <test_printf>
  test_printf("%u", n);
 80080c0:	2100      	movs	r1, #0
 80080c2:	4630      	mov	r0, r6
 80080c4:	f7ff fbc4 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80080c8:	4629      	mov	r1, r5
 80080ca:	4620      	mov	r0, r4
 80080cc:	f7ff fbc0 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 80080d0:	493e      	ldr	r1, [pc, #248]	; (80081cc <rt_test_001_003_execute.lto_priv.0+0x39c>)
 80080d2:	4638      	mov	r0, r7
 80080d4:	f7ff fbbc 	bl	8007850 <test_printf>
  test_printf("%u", n);
 80080d8:	21ff      	movs	r1, #255	; 0xff
 80080da:	4630      	mov	r0, r6
 80080dc:	f7ff fbb8 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80080e0:	4629      	mov	r1, r5
 80080e2:	4620      	mov	r0, r4
 80080e4:	f7ff fbb4 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 80080e8:	4939      	ldr	r1, [pc, #228]	; (80081d0 <rt_test_001_003_execute.lto_priv.0+0x3a0>)
 80080ea:	4638      	mov	r0, r7
 80080ec:	f7ff fbb0 	bl	8007850 <test_printf>
  test_printf("%u", n);
 80080f0:	2180      	movs	r1, #128	; 0x80
 80080f2:	4630      	mov	r0, r6
 80080f4:	f7ff fbac 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80080f8:	4629      	mov	r1, r5
 80080fa:	4620      	mov	r0, r4
 80080fc:	f7ff fba8 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008100:	4934      	ldr	r1, [pc, #208]	; (80081d4 <rt_test_001_003_execute.lto_priv.0+0x3a4>)
 8008102:	4638      	mov	r0, r7
 8008104:	f7ff fba4 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008108:	2100      	movs	r1, #0
 800810a:	4630      	mov	r0, r6
 800810c:	f7ff fba0 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008110:	4629      	mov	r1, r5
 8008112:	4620      	mov	r0, r4
 8008114:	f7ff fb9c 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008118:	492f      	ldr	r1, [pc, #188]	; (80081d8 <rt_test_001_003_execute.lto_priv.0+0x3a8>)
 800811a:	4638      	mov	r0, r7
 800811c:	f7ff fb98 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008120:	2100      	movs	r1, #0
 8008122:	4630      	mov	r0, r6
 8008124:	f7ff fb94 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008128:	4629      	mov	r1, r5
 800812a:	4620      	mov	r0, r4
 800812c:	f7ff fb90 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008130:	492a      	ldr	r1, [pc, #168]	; (80081dc <rt_test_001_003_execute.lto_priv.0+0x3ac>)
 8008132:	4638      	mov	r0, r7
 8008134:	f7ff fb8c 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008138:	2100      	movs	r1, #0
 800813a:	4630      	mov	r0, r6
 800813c:	f7ff fb88 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008140:	4629      	mov	r1, r5
 8008142:	4620      	mov	r0, r4
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
    test_printn(CH_DBG_THREADS_PROFILING);
    test_println("");
  }
  test_end_step(1);
}
 8008144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008148:	f7ff bb82 	b.w	8007850 <test_printf>
 800814c:	08015558 	.word	0x08015558
 8008150:	20000b74 	.word	0x20000b74
 8008154:	08015650 	.word	0x08015650
 8008158:	0801dcd4 	.word	0x0801dcd4
 800815c:	0801dcbc 	.word	0x0801dcbc
 8008160:	080157c4 	.word	0x080157c4
 8008164:	080157f0 	.word	0x080157f0
 8008168:	0801581c 	.word	0x0801581c
 800816c:	08015848 	.word	0x08015848
 8008170:	08015874 	.word	0x08015874
 8008174:	080158a0 	.word	0x080158a0
 8008178:	080158cc 	.word	0x080158cc
 800817c:	080158f8 	.word	0x080158f8
 8008180:	08015924 	.word	0x08015924
 8008184:	08015950 	.word	0x08015950
 8008188:	0801597c 	.word	0x0801597c
 800818c:	080159a8 	.word	0x080159a8
 8008190:	080159d4 	.word	0x080159d4
 8008194:	08015a00 	.word	0x08015a00
 8008198:	08015a2c 	.word	0x08015a2c
 800819c:	08015a58 	.word	0x08015a58
 80081a0:	08015a84 	.word	0x08015a84
 80081a4:	08015ab0 	.word	0x08015ab0
 80081a8:	08015adc 	.word	0x08015adc
 80081ac:	08015b08 	.word	0x08015b08
 80081b0:	08015b34 	.word	0x08015b34
 80081b4:	08015b60 	.word	0x08015b60
 80081b8:	08015b8c 	.word	0x08015b8c
 80081bc:	08015bb8 	.word	0x08015bb8
 80081c0:	08015be4 	.word	0x08015be4
 80081c4:	08015c10 	.word	0x08015c10
 80081c8:	08015c3c 	.word	0x08015c3c
 80081cc:	08015c68 	.word	0x08015c68
 80081d0:	08015c94 	.word	0x08015c94
 80081d4:	08015cc0 	.word	0x08015cc0
 80081d8:	08015cec 	.word	0x08015cec
 80081dc:	08015d18 	.word	0x08015d18

080081e0 <rt_test_012_001_execute.lto_priv.0>:
static void rt_test_012_001_execute(void) {
 80081e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 80081e4:	4b1f      	ldr	r3, [pc, #124]	; (8008264 <rt_test_012_001_execute.lto_priv.0+0x84>)
  test_set_step(1);
 80081e6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008268 <rt_test_012_001_execute.lto_priv.0+0x88>
  return chThdGetSelfX()->hdr.pqueue.prio;
 80081ea:	68db      	ldr	r3, [r3, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 80081ec:	4c1f      	ldr	r4, [pc, #124]	; (800826c <rt_test_012_001_execute.lto_priv.0+0x8c>)
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	4b1f      	ldr	r3, [pc, #124]	; (8008270 <rt_test_012_001_execute.lto_priv.0+0x90>)
static void rt_test_012_001_execute(void) {
 80081f2:	b082      	sub	sp, #8
  test_set_step(1);
 80081f4:	2001      	movs	r0, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 80081f6:	2700      	movs	r7, #0
 80081f8:	3a01      	subs	r2, #1
 80081fa:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
  test_set_step(1);
 80081fe:	f8c8 0000 	str.w	r0, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008202:	9700      	str	r7, [sp, #0]
 8008204:	481b      	ldr	r0, [pc, #108]	; (8008274 <rt_test_012_001_execute.lto_priv.0+0x94>)
 8008206:	f7fb fcb3 	bl	8003b70 <chThdCreateStatic>
  test_set_step(2);
 800820a:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800820c:	6020      	str	r0, [r4, #0]
  test_set_step(2);
 800820e:	f8c8 3000 	str.w	r3, [r8]
    n = msg_loop_test(threads[0]);
 8008212:	f7fb fad5 	bl	80037c0 <msg_loop_test>
 8008216:	f104 0514 	add.w	r5, r4, #20
 800821a:	4606      	mov	r6, r0
 800821c:	f854 0b04 	ldr.w	r0, [r4], #4
 8008220:	b118      	cbz	r0, 800822a <rt_test_012_001_execute.lto_priv.0+0x4a>
      chThdWait(threads[i]);
 8008222:	f7fc fb9d 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 8008226:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800822a:	42ac      	cmp	r4, r5
 800822c:	d1f6      	bne.n	800821c <rt_test_012_001_execute.lto_priv.0+0x3c>
  test_set_step(3);
 800822e:	2303      	movs	r3, #3
  test_printf("%s", msgp);
 8008230:	4911      	ldr	r1, [pc, #68]	; (8008278 <rt_test_012_001_execute.lto_priv.0+0x98>)
 8008232:	4812      	ldr	r0, [pc, #72]	; (800827c <rt_test_012_001_execute.lto_priv.0+0x9c>)
 8008234:	f8c8 3000 	str.w	r3, [r8]
 8008238:	f7ff fb0a 	bl	8007850 <test_printf>
  test_printf("%u", n);
 800823c:	4631      	mov	r1, r6
 800823e:	4810      	ldr	r0, [pc, #64]	; (8008280 <rt_test_012_001_execute.lto_priv.0+0xa0>)
 8008240:	f7ff fb06 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008244:	490f      	ldr	r1, [pc, #60]	; (8008284 <rt_test_012_001_execute.lto_priv.0+0xa4>)
 8008246:	480d      	ldr	r0, [pc, #52]	; (800827c <rt_test_012_001_execute.lto_priv.0+0x9c>)
 8008248:	f7ff fb02 	bl	8007850 <test_printf>
  test_printf("%u", n);
 800824c:	0071      	lsls	r1, r6, #1
 800824e:	480c      	ldr	r0, [pc, #48]	; (8008280 <rt_test_012_001_execute.lto_priv.0+0xa0>)
 8008250:	f7ff fafe 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008254:	490c      	ldr	r1, [pc, #48]	; (8008288 <rt_test_012_001_execute.lto_priv.0+0xa8>)
 8008256:	480d      	ldr	r0, [pc, #52]	; (800828c <rt_test_012_001_execute.lto_priv.0+0xac>)
}
 8008258:	b002      	add	sp, #8
 800825a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800825e:	f7ff baf7 	b.w	8007850 <test_printf>
 8008262:	bf00      	nop
 8008264:	20000a90 	.word	0x20000a90
 8008268:	20000b74 	.word	0x20000b74
 800826c:	200016e4 	.word	0x200016e4
 8008270:	08003a71 	.word	0x08003a71
 8008274:	20000dd8 	.word	0x20000dd8
 8008278:	08015d44 	.word	0x08015d44
 800827c:	08015558 	.word	0x08015558
 8008280:	08015650 	.word	0x08015650
 8008284:	08015d54 	.word	0x08015d54
 8008288:	08015d60 	.word	0x08015d60
 800828c:	0801dcbc 	.word	0x0801dcbc

08008290 <rt_test_012_002_execute.lto_priv.0>:
static void rt_test_012_002_execute(void) {
 8008290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 8008294:	4b1f      	ldr	r3, [pc, #124]	; (8008314 <rt_test_012_002_execute.lto_priv.0+0x84>)
  test_set_step(1);
 8008296:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008318 <rt_test_012_002_execute.lto_priv.0+0x88>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800829a:	68db      	ldr	r3, [r3, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800829c:	4c1f      	ldr	r4, [pc, #124]	; (800831c <rt_test_012_002_execute.lto_priv.0+0x8c>)
 800829e:	689a      	ldr	r2, [r3, #8]
 80082a0:	4b1f      	ldr	r3, [pc, #124]	; (8008320 <rt_test_012_002_execute.lto_priv.0+0x90>)
static void rt_test_012_002_execute(void) {
 80082a2:	b082      	sub	sp, #8
  test_set_step(1);
 80082a4:	2001      	movs	r0, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80082a6:	2700      	movs	r7, #0
 80082a8:	3201      	adds	r2, #1
 80082aa:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
  test_set_step(1);
 80082ae:	f8c8 0000 	str.w	r0, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80082b2:	9700      	str	r7, [sp, #0]
 80082b4:	481b      	ldr	r0, [pc, #108]	; (8008324 <rt_test_012_002_execute.lto_priv.0+0x94>)
 80082b6:	f7fb fc5b 	bl	8003b70 <chThdCreateStatic>
  test_set_step(2);
 80082ba:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80082bc:	6020      	str	r0, [r4, #0]
  test_set_step(2);
 80082be:	f8c8 3000 	str.w	r3, [r8]
    n = msg_loop_test(threads[0]);
 80082c2:	f7fb fa7d 	bl	80037c0 <msg_loop_test>
 80082c6:	f104 0514 	add.w	r5, r4, #20
 80082ca:	4606      	mov	r6, r0
    if (threads[i] != NULL) {
 80082cc:	f854 0b04 	ldr.w	r0, [r4], #4
 80082d0:	b118      	cbz	r0, 80082da <rt_test_012_002_execute.lto_priv.0+0x4a>
      chThdWait(threads[i]);
 80082d2:	f7fc fb45 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 80082d6:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80082da:	42ac      	cmp	r4, r5
 80082dc:	d1f6      	bne.n	80082cc <rt_test_012_002_execute.lto_priv.0+0x3c>
  test_set_step(3);
 80082de:	2303      	movs	r3, #3
  test_printf("%s", msgp);
 80082e0:	4911      	ldr	r1, [pc, #68]	; (8008328 <rt_test_012_002_execute.lto_priv.0+0x98>)
 80082e2:	4812      	ldr	r0, [pc, #72]	; (800832c <rt_test_012_002_execute.lto_priv.0+0x9c>)
 80082e4:	f8c8 3000 	str.w	r3, [r8]
 80082e8:	f7ff fab2 	bl	8007850 <test_printf>
  test_printf("%u", n);
 80082ec:	4631      	mov	r1, r6
 80082ee:	4810      	ldr	r0, [pc, #64]	; (8008330 <rt_test_012_002_execute.lto_priv.0+0xa0>)
 80082f0:	f7ff faae 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 80082f4:	490f      	ldr	r1, [pc, #60]	; (8008334 <rt_test_012_002_execute.lto_priv.0+0xa4>)
 80082f6:	480d      	ldr	r0, [pc, #52]	; (800832c <rt_test_012_002_execute.lto_priv.0+0x9c>)
 80082f8:	f7ff faaa 	bl	8007850 <test_printf>
  test_printf("%u", n);
 80082fc:	0071      	lsls	r1, r6, #1
 80082fe:	480c      	ldr	r0, [pc, #48]	; (8008330 <rt_test_012_002_execute.lto_priv.0+0xa0>)
 8008300:	f7ff faa6 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008304:	490c      	ldr	r1, [pc, #48]	; (8008338 <rt_test_012_002_execute.lto_priv.0+0xa8>)
 8008306:	480d      	ldr	r0, [pc, #52]	; (800833c <rt_test_012_002_execute.lto_priv.0+0xac>)
}
 8008308:	b002      	add	sp, #8
 800830a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800830e:	f7ff ba9f 	b.w	8007850 <test_printf>
 8008312:	bf00      	nop
 8008314:	20000a90 	.word	0x20000a90
 8008318:	20000b74 	.word	0x20000b74
 800831c:	200016e4 	.word	0x200016e4
 8008320:	08003a71 	.word	0x08003a71
 8008324:	20000dd8 	.word	0x20000dd8
 8008328:	08015d44 	.word	0x08015d44
 800832c:	08015558 	.word	0x08015558
 8008330:	08015650 	.word	0x08015650
 8008334:	08015d54 	.word	0x08015d54
 8008338:	08015d60 	.word	0x08015d60
 800833c:	0801dcbc 	.word	0x0801dcbc

08008340 <rt_test_012_003_execute.lto_priv.0>:
static void rt_test_012_003_execute(void) {
 8008340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 8008344:	4e37      	ldr	r6, [pc, #220]	; (8008424 <rt_test_012_003_execute.lto_priv.0+0xe4>)
  test_set_step(1);
 8008346:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8008428 <rt_test_012_003_execute.lto_priv.0+0xe8>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800834a:	68f3      	ldr	r3, [r6, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800834c:	4837      	ldr	r0, [pc, #220]	; (800842c <rt_test_012_003_execute.lto_priv.0+0xec>)
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	4c37      	ldr	r4, [pc, #220]	; (8008430 <rt_test_012_003_execute.lto_priv.0+0xf0>)
static void rt_test_012_003_execute(void) {
 8008352:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008354:	2500      	movs	r5, #0
  test_set_step(1);
 8008356:	2301      	movs	r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008358:	441a      	add	r2, r3
  test_set_step(1);
 800835a:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800835e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008362:	4b34      	ldr	r3, [pc, #208]	; (8008434 <rt_test_012_003_execute.lto_priv.0+0xf4>)
 8008364:	9500      	str	r5, [sp, #0]
 8008366:	f7fb fc03 	bl	8003b70 <chThdCreateStatic>
  test_set_step(2);
 800836a:	2302      	movs	r3, #2
 800836c:	f8c8 3000 	str.w	r3, [r8]
 8008370:	68f3      	ldr	r3, [r6, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008372:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8008374:	689a      	ldr	r2, [r3, #8]
 8008376:	4830      	ldr	r0, [pc, #192]	; (8008438 <rt_test_012_003_execute.lto_priv.0+0xf8>)
 8008378:	4b30      	ldr	r3, [pc, #192]	; (800843c <rt_test_012_003_execute.lto_priv.0+0xfc>)
 800837a:	9500      	str	r5, [sp, #0]
 800837c:	3a02      	subs	r2, #2
 800837e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008382:	f7fb fbf5 	bl	8003b70 <chThdCreateStatic>
 8008386:	68f3      	ldr	r3, [r6, #12]
 8008388:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	482c      	ldr	r0, [pc, #176]	; (8008440 <rt_test_012_003_execute.lto_priv.0+0x100>)
 800838e:	4b2b      	ldr	r3, [pc, #172]	; (800843c <rt_test_012_003_execute.lto_priv.0+0xfc>)
 8008390:	9500      	str	r5, [sp, #0]
 8008392:	3a03      	subs	r2, #3
 8008394:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008398:	f7fb fbea 	bl	8003b70 <chThdCreateStatic>
 800839c:	68f3      	ldr	r3, [r6, #12]
 800839e:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	4828      	ldr	r0, [pc, #160]	; (8008444 <rt_test_012_003_execute.lto_priv.0+0x104>)
 80083a4:	4b25      	ldr	r3, [pc, #148]	; (800843c <rt_test_012_003_execute.lto_priv.0+0xfc>)
 80083a6:	9500      	str	r5, [sp, #0]
 80083a8:	3a04      	subs	r2, #4
 80083aa:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80083ae:	f7fb fbdf 	bl	8003b70 <chThdCreateStatic>
 80083b2:	68f3      	ldr	r3, [r6, #12]
 80083b4:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	4823      	ldr	r0, [pc, #140]	; (8008448 <rt_test_012_003_execute.lto_priv.0+0x108>)
 80083ba:	4b20      	ldr	r3, [pc, #128]	; (800843c <rt_test_012_003_execute.lto_priv.0+0xfc>)
 80083bc:	9500      	str	r5, [sp, #0]
 80083be:	3a05      	subs	r2, #5
 80083c0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80083c4:	f7fb fbd4 	bl	8003b70 <chThdCreateStatic>
  test_set_step(3);
 80083c8:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80083ca:	6120      	str	r0, [r4, #16]
    n = msg_loop_test(threads[0]);
 80083cc:	6820      	ldr	r0, [r4, #0]
  test_set_step(3);
 80083ce:	f8c8 3000 	str.w	r3, [r8]
    n = msg_loop_test(threads[0]);
 80083d2:	f7fb f9f5 	bl	80037c0 <msg_loop_test>
 80083d6:	f104 0614 	add.w	r6, r4, #20
 80083da:	4607      	mov	r7, r0
    if (threads[i] != NULL) {
 80083dc:	f854 0b04 	ldr.w	r0, [r4], #4
 80083e0:	b118      	cbz	r0, 80083ea <rt_test_012_003_execute.lto_priv.0+0xaa>
      chThdWait(threads[i]);
 80083e2:	f7fc fabd 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 80083e6:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80083ea:	42b4      	cmp	r4, r6
 80083ec:	d1f6      	bne.n	80083dc <rt_test_012_003_execute.lto_priv.0+0x9c>
  test_set_step(4);
 80083ee:	2304      	movs	r3, #4
  test_printf("%s", msgp);
 80083f0:	4916      	ldr	r1, [pc, #88]	; (800844c <rt_test_012_003_execute.lto_priv.0+0x10c>)
 80083f2:	4817      	ldr	r0, [pc, #92]	; (8008450 <rt_test_012_003_execute.lto_priv.0+0x110>)
 80083f4:	f8c8 3000 	str.w	r3, [r8]
 80083f8:	f7ff fa2a 	bl	8007850 <test_printf>
  test_printf("%u", n);
 80083fc:	4639      	mov	r1, r7
 80083fe:	4815      	ldr	r0, [pc, #84]	; (8008454 <rt_test_012_003_execute.lto_priv.0+0x114>)
 8008400:	f7ff fa26 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008404:	4914      	ldr	r1, [pc, #80]	; (8008458 <rt_test_012_003_execute.lto_priv.0+0x118>)
 8008406:	4812      	ldr	r0, [pc, #72]	; (8008450 <rt_test_012_003_execute.lto_priv.0+0x110>)
 8008408:	f7ff fa22 	bl	8007850 <test_printf>
  test_printf("%u", n);
 800840c:	0079      	lsls	r1, r7, #1
 800840e:	4811      	ldr	r0, [pc, #68]	; (8008454 <rt_test_012_003_execute.lto_priv.0+0x114>)
 8008410:	f7ff fa1e 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008414:	4911      	ldr	r1, [pc, #68]	; (800845c <rt_test_012_003_execute.lto_priv.0+0x11c>)
 8008416:	4812      	ldr	r0, [pc, #72]	; (8008460 <rt_test_012_003_execute.lto_priv.0+0x120>)
}
 8008418:	b002      	add	sp, #8
 800841a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800841e:	f7ff ba17 	b.w	8007850 <test_printf>
 8008422:	bf00      	nop
 8008424:	20000a90 	.word	0x20000a90
 8008428:	20000b74 	.word	0x20000b74
 800842c:	20000dd8 	.word	0x20000dd8
 8008430:	200016e4 	.word	0x200016e4
 8008434:	08003a71 	.word	0x08003a71
 8008438:	20000f88 	.word	0x20000f88
 800843c:	08001531 	.word	0x08001531
 8008440:	20001138 	.word	0x20001138
 8008444:	200012e8 	.word	0x200012e8
 8008448:	20001498 	.word	0x20001498
 800844c:	08015d44 	.word	0x08015d44
 8008450:	08015558 	.word	0x08015558
 8008454:	08015650 	.word	0x08015650
 8008458:	08015d54 	.word	0x08015d54
 800845c:	08015d60 	.word	0x08015d60
 8008460:	0801dcbc 	.word	0x0801dcbc
	...

08008470 <rt_test_012_004_execute.lto_priv.0>:
static void rt_test_012_004_execute(void) {
 8008470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return __sch_get_currthread();
 8008474:	4b39      	ldr	r3, [pc, #228]	; (800855c <rt_test_012_004_execute.lto_priv.0+0xec>)
  test_set_step(1);
 8008476:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8008560 <rt_test_012_004_execute.lto_priv.0+0xf0>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800847a:	68db      	ldr	r3, [r3, #12]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800847c:	4839      	ldr	r0, [pc, #228]	; (8008564 <rt_test_012_004_execute.lto_priv.0+0xf4>)
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	4b39      	ldr	r3, [pc, #228]	; (8008568 <rt_test_012_004_execute.lto_priv.0+0xf8>)
static void rt_test_012_004_execute(void) {
 8008482:	b082      	sub	sp, #8
  test_set_step(1);
 8008484:	2701      	movs	r7, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8008486:	2500      	movs	r5, #0
 8008488:	9500      	str	r5, [sp, #0]
 800848a:	443a      	add	r2, r7
 800848c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
  test_set_step(1);
 8008490:	f8ca 7000 	str.w	r7, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8008494:	f7fb fb6c 	bl	8003b70 <chThdCreateStatic>
 8008498:	4b34      	ldr	r3, [pc, #208]	; (800856c <rt_test_012_004_execute.lto_priv.0+0xfc>)
 800849a:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 800849c:	2302      	movs	r3, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800849e:	4604      	mov	r4, r0
  test_set_step(2);
 80084a0:	f8ca 3000 	str.w	r3, [sl]
 80084a4:	2630      	movs	r6, #48	; 0x30
 80084a6:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80084aa:	2008      	movs	r0, #8
 80084ac:	4639      	mov	r1, r7
 80084ae:	f7fa fa37 	bl	8002920 <chSchGoSleepTimeoutS>
 80084b2:	f385 8811 	msr	BASEPRI, r5
 80084b6:	f386 8811 	msr	BASEPRI, r6
 80084ba:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80084be:	f8d8 9024 	ldr.w	r9, [r8, #36]	; 0x24
 80084c2:	f385 8811 	msr	BASEPRI, r5
      chSchWakeupS(tp, MSG_OK);
 80084c6:	462f      	mov	r7, r5
 80084c8:	f386 8811 	msr	BASEPRI, r6
 80084cc:	2100      	movs	r1, #0
 80084ce:	4620      	mov	r0, r4
 80084d0:	f7fb f9d6 	bl	8003880 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80084d4:	4620      	mov	r0, r4
 80084d6:	2100      	movs	r1, #0
 80084d8:	f7fb f9d2 	bl	8003880 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80084dc:	4620      	mov	r0, r4
 80084de:	2100      	movs	r1, #0
 80084e0:	f7fb f9ce 	bl	8003880 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 80084e4:	2100      	movs	r1, #0
 80084e6:	4620      	mov	r0, r4
 80084e8:	f7fb f9ca 	bl	8003880 <chSchWakeupS>
 80084ec:	f387 8811 	msr	BASEPRI, r7
 80084f0:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 80084f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80084f8:	eba3 0309 	sub.w	r3, r3, r9
 80084fc:	4293      	cmp	r3, r2
      n += 4;
 80084fe:	f105 0504 	add.w	r5, r5, #4
    } while (chVTIsSystemTimeWithinX(start, end));
 8008502:	d9e1      	bls.n	80084c8 <rt_test_012_004_execute.lto_priv.0+0x58>
  test_set_step(3);
 8008504:	2303      	movs	r3, #3
 8008506:	f8ca 3000 	str.w	r3, [sl]
 800850a:	f386 8811 	msr	BASEPRI, r6
    chSchWakeupS(tp, MSG_TIMEOUT);
 800850e:	f04f 31ff 	mov.w	r1, #4294967295
 8008512:	4620      	mov	r0, r4
 8008514:	f7fb f9b4 	bl	8003880 <chSchWakeupS>
 8008518:	f387 8811 	msr	BASEPRI, r7
 800851c:	4c13      	ldr	r4, [pc, #76]	; (800856c <rt_test_012_004_execute.lto_priv.0+0xfc>)
      threads[i] = NULL;
 800851e:	2700      	movs	r7, #0
 8008520:	f104 0614 	add.w	r6, r4, #20
    if (threads[i] != NULL) {
 8008524:	f854 0b04 	ldr.w	r0, [r4], #4
 8008528:	b118      	cbz	r0, 8008532 <rt_test_012_004_execute.lto_priv.0+0xc2>
      chThdWait(threads[i]);
 800852a:	f7fc fa19 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 800852e:	f844 7c04 	str.w	r7, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8008532:	42a6      	cmp	r6, r4
 8008534:	d1f6      	bne.n	8008524 <rt_test_012_004_execute.lto_priv.0+0xb4>
  test_set_step(4);
 8008536:	2304      	movs	r3, #4
  test_printf("%s", msgp);
 8008538:	490d      	ldr	r1, [pc, #52]	; (8008570 <rt_test_012_004_execute.lto_priv.0+0x100>)
 800853a:	480e      	ldr	r0, [pc, #56]	; (8008574 <rt_test_012_004_execute.lto_priv.0+0x104>)
 800853c:	f8ca 3000 	str.w	r3, [sl]
 8008540:	f7ff f986 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008544:	0069      	lsls	r1, r5, #1
 8008546:	480c      	ldr	r0, [pc, #48]	; (8008578 <rt_test_012_004_execute.lto_priv.0+0x108>)
 8008548:	f7ff f982 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800854c:	490b      	ldr	r1, [pc, #44]	; (800857c <rt_test_012_004_execute.lto_priv.0+0x10c>)
 800854e:	480c      	ldr	r0, [pc, #48]	; (8008580 <rt_test_012_004_execute.lto_priv.0+0x110>)
}
 8008550:	b002      	add	sp, #8
 8008552:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008556:	f7ff b97b 	b.w	8007850 <test_printf>
 800855a:	bf00      	nop
 800855c:	20000a90 	.word	0x20000a90
 8008560:	20000b74 	.word	0x20000b74
 8008564:	20000dd8 	.word	0x20000dd8
 8008568:	080015c1 	.word	0x080015c1
 800856c:	200016e4 	.word	0x200016e4
 8008570:	08015d44 	.word	0x08015d44
 8008574:	08015558 	.word	0x08015558
 8008578:	08015650 	.word	0x08015650
 800857c:	08015d60 	.word	0x08015d60
 8008580:	0801dcbc 	.word	0x0801dcbc
	...

08008590 <rt_test_012_005_execute.lto_priv.0>:
  return __sch_get_currthread();
 8008590:	4b23      	ldr	r3, [pc, #140]	; (8008620 <rt_test_012_005_execute.lto_priv.0+0x90>)
static void rt_test_012_005_execute(void) {
 8008592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 8008596:	68db      	ldr	r3, [r3, #12]
  test_set_step(1);
 8008598:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8008624 <rt_test_012_005_execute.lto_priv.0+0x94>
  tprio_t prio = chThdGetPriorityX() - 1;
 800859c:	689d      	ldr	r5, [r3, #8]
  test_set_step(1);
 800859e:	2101      	movs	r1, #1
static void rt_test_012_005_execute(void) {
 80085a0:	b082      	sub	sp, #8
  test_set_step(1);
 80085a2:	f8c9 1000 	str.w	r1, [r9]
  tprio_t prio = chThdGetPriorityX() - 1;
 80085a6:	3d01      	subs	r5, #1
 80085a8:	2630      	movs	r6, #48	; 0x30
 80085aa:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80085ae:	2008      	movs	r0, #8
 80085b0:	f7fa f9b6 	bl	8002920 <chSchGoSleepTimeoutS>
 80085b4:	2400      	movs	r4, #0
 80085b6:	f384 8811 	msr	BASEPRI, r4
 80085ba:	f386 8811 	msr	BASEPRI, r6
 80085be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085c2:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80085c6:	f384 8811 	msr	BASEPRI, r4
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80085ca:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8008628 <rt_test_012_005_execute.lto_priv.0+0x98>
 80085ce:	4e17      	ldr	r6, [pc, #92]	; (800862c <rt_test_012_005_execute.lto_priv.0+0x9c>)
 80085d0:	4627      	mov	r7, r4
 80085d2:	4653      	mov	r3, sl
 80085d4:	462a      	mov	r2, r5
 80085d6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80085da:	9700      	str	r7, [sp, #0]
 80085dc:	4630      	mov	r0, r6
 80085de:	f7fb fac7 	bl	8003b70 <chThdCreateStatic>
 80085e2:	f7fc f9bd 	bl	8004960 <chThdWait>
 80085e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 80085ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80085ee:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80085f0:	eba0 0008 	sub.w	r0, r0, r8
 80085f4:	4298      	cmp	r0, r3
      n++;
 80085f6:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80085fa:	d9ea      	bls.n	80085d2 <rt_test_012_005_execute.lto_priv.0+0x42>
  test_set_step(2);
 80085fc:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 80085fe:	490c      	ldr	r1, [pc, #48]	; (8008630 <rt_test_012_005_execute.lto_priv.0+0xa0>)
 8008600:	480c      	ldr	r0, [pc, #48]	; (8008634 <rt_test_012_005_execute.lto_priv.0+0xa4>)
 8008602:	f8c9 3000 	str.w	r3, [r9]
 8008606:	f7ff f923 	bl	8007850 <test_printf>
  test_printf("%u", n);
 800860a:	4621      	mov	r1, r4
 800860c:	480a      	ldr	r0, [pc, #40]	; (8008638 <rt_test_012_005_execute.lto_priv.0+0xa8>)
 800860e:	f7ff f91f 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008612:	490a      	ldr	r1, [pc, #40]	; (800863c <rt_test_012_005_execute.lto_priv.0+0xac>)
 8008614:	480a      	ldr	r0, [pc, #40]	; (8008640 <rt_test_012_005_execute.lto_priv.0+0xb0>)
}
 8008616:	b002      	add	sp, #8
 8008618:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	f7ff b918 	b.w	8007850 <test_printf>
 8008620:	20000a90 	.word	0x20000a90
 8008624:	20000b74 	.word	0x20000b74
 8008628:	08001531 	.word	0x08001531
 800862c:	20000dd8 	.word	0x20000dd8
 8008630:	08015d44 	.word	0x08015d44
 8008634:	08015558 	.word	0x08015558
 8008638:	08015650 	.word	0x08015650
 800863c:	08015d6c 	.word	0x08015d6c
 8008640:	0801dcbc 	.word	0x0801dcbc
	...

08008650 <rt_test_012_006_execute.lto_priv.0>:
  return __sch_get_currthread();
 8008650:	4b2c      	ldr	r3, [pc, #176]	; (8008704 <rt_test_012_006_execute.lto_priv.0+0xb4>)
static void rt_test_012_006_execute(void) {
 8008652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 8008656:	68db      	ldr	r3, [r3, #12]
  test_set_step(1);
 8008658:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008708 <rt_test_012_006_execute.lto_priv.0+0xb8>
  tprio_t prio = chThdGetPriorityX() + 1;
 800865c:	689e      	ldr	r6, [r3, #8]
  test_set_step(1);
 800865e:	2101      	movs	r1, #1
static void rt_test_012_006_execute(void) {
 8008660:	b082      	sub	sp, #8
  test_set_step(1);
 8008662:	f8ca 1000 	str.w	r1, [sl]
  tprio_t prio = chThdGetPriorityX() + 1;
 8008666:	440e      	add	r6, r1
 8008668:	2530      	movs	r5, #48	; 0x30
 800866a:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800866e:	2008      	movs	r0, #8
 8008670:	f7fa f956 	bl	8002920 <chSchGoSleepTimeoutS>
 8008674:	2400      	movs	r4, #0
 8008676:	f384 8811 	msr	BASEPRI, r4
 800867a:	f385 8811 	msr	BASEPRI, r5
 800867e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008682:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 8008686:	f384 8811 	msr	BASEPRI, r4
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800868a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800870c <rt_test_012_006_execute.lto_priv.0+0xbc>
 800868e:	4f20      	ldr	r7, [pc, #128]	; (8008710 <rt_test_012_006_execute.lto_priv.0+0xc0>)
 8008690:	4625      	mov	r5, r4
 8008692:	e00c      	b.n	80086ae <rt_test_012_006_execute.lto_priv.0+0x5e>
 8008694:	f385 8811 	msr	BASEPRI, r5
 8008698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800869c:	f242 720f 	movw	r2, #9999	; 0x270f
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	eba3 0309 	sub.w	r3, r3, r9
 80086a6:	4293      	cmp	r3, r2
      n++;
 80086a8:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80086ac:	d817      	bhi.n	80086de <rt_test_012_006_execute.lto_priv.0+0x8e>
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80086ae:	4632      	mov	r2, r6
 80086b0:	9500      	str	r5, [sp, #0]
 80086b2:	4643      	mov	r3, r8
 80086b4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80086b8:	4638      	mov	r0, r7
 80086ba:	f7fb fa59 	bl	8003b70 <chThdCreateStatic>
 80086be:	2230      	movs	r2, #48	; 0x30
 80086c0:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 80086c4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80086c8:	3a01      	subs	r2, #1
 80086ca:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80086ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80086d0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80086d4:	2b0f      	cmp	r3, #15
 80086d6:	d1dd      	bne.n	8008694 <rt_test_012_006_execute.lto_priv.0+0x44>
 80086d8:	f7fc f922 	bl	8004920 <chThdRelease.part.0>
 80086dc:	e7dc      	b.n	8008698 <rt_test_012_006_execute.lto_priv.0+0x48>
  test_set_step(2);
 80086de:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 80086e0:	490c      	ldr	r1, [pc, #48]	; (8008714 <rt_test_012_006_execute.lto_priv.0+0xc4>)
 80086e2:	480d      	ldr	r0, [pc, #52]	; (8008718 <rt_test_012_006_execute.lto_priv.0+0xc8>)
 80086e4:	f8ca 3000 	str.w	r3, [sl]
 80086e8:	f7ff f8b2 	bl	8007850 <test_printf>
  test_printf("%u", n);
 80086ec:	4621      	mov	r1, r4
 80086ee:	480b      	ldr	r0, [pc, #44]	; (800871c <rt_test_012_006_execute.lto_priv.0+0xcc>)
 80086f0:	f7ff f8ae 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80086f4:	490a      	ldr	r1, [pc, #40]	; (8008720 <rt_test_012_006_execute.lto_priv.0+0xd0>)
 80086f6:	480b      	ldr	r0, [pc, #44]	; (8008724 <rt_test_012_006_execute.lto_priv.0+0xd4>)
}
 80086f8:	b002      	add	sp, #8
 80086fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086fe:	f7ff b8a7 	b.w	8007850 <test_printf>
 8008702:	bf00      	nop
 8008704:	20000a90 	.word	0x20000a90
 8008708:	20000b74 	.word	0x20000b74
 800870c:	08001531 	.word	0x08001531
 8008710:	20000dd8 	.word	0x20000dd8
 8008714:	08015d44 	.word	0x08015d44
 8008718:	08015558 	.word	0x08015558
 800871c:	08015650 	.word	0x08015650
 8008720:	08015d6c 	.word	0x08015d6c
 8008724:	0801dcbc 	.word	0x0801dcbc
	...

08008730 <rt_test_012_007_execute.lto_priv.0>:
static void rt_test_012_007_execute(void) {
 8008730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 8008734:	4f51      	ldr	r7, [pc, #324]	; (800887c <rt_test_012_007_execute.lto_priv.0+0x14c>)
  test_set_step(1);
 8008736:	4e52      	ldr	r6, [pc, #328]	; (8008880 <rt_test_012_007_execute.lto_priv.0+0x150>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8008738:	68fb      	ldr	r3, [r7, #12]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800873a:	4852      	ldr	r0, [pc, #328]	; (8008884 <rt_test_012_007_execute.lto_priv.0+0x154>)
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	4b52      	ldr	r3, [pc, #328]	; (8008888 <rt_test_012_007_execute.lto_priv.0+0x158>)
 8008740:	4d52      	ldr	r5, [pc, #328]	; (800888c <rt_test_012_007_execute.lto_priv.0+0x15c>)
static void rt_test_012_007_execute(void) {
 8008742:	b082      	sub	sp, #8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8008744:	2400      	movs	r4, #0
  test_set_step(1);
 8008746:	f04f 0801 	mov.w	r8, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800874a:	3205      	adds	r2, #5
 800874c:	9400      	str	r4, [sp, #0]
 800874e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
  test_set_step(1);
 8008752:	f8c6 8000 	str.w	r8, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8008756:	f7fb fa0b 	bl	8003b70 <chThdCreateStatic>
 800875a:	68fb      	ldr	r3, [r7, #12]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	9400      	str	r4, [sp, #0]
 8008760:	4b49      	ldr	r3, [pc, #292]	; (8008888 <rt_test_012_007_execute.lto_priv.0+0x158>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8008762:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8008764:	3204      	adds	r2, #4
 8008766:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800876a:	4849      	ldr	r0, [pc, #292]	; (8008890 <rt_test_012_007_execute.lto_priv.0+0x160>)
 800876c:	f7fb fa00 	bl	8003b70 <chThdCreateStatic>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8008774:	689a      	ldr	r2, [r3, #8]
 8008776:	4847      	ldr	r0, [pc, #284]	; (8008894 <rt_test_012_007_execute.lto_priv.0+0x164>)
 8008778:	4b43      	ldr	r3, [pc, #268]	; (8008888 <rt_test_012_007_execute.lto_priv.0+0x158>)
 800877a:	9400      	str	r4, [sp, #0]
 800877c:	3203      	adds	r2, #3
 800877e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008782:	f7fb f9f5 	bl	8003b70 <chThdCreateStatic>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	4842      	ldr	r0, [pc, #264]	; (8008898 <rt_test_012_007_execute.lto_priv.0+0x168>)
 800878e:	4b3e      	ldr	r3, [pc, #248]	; (8008888 <rt_test_012_007_execute.lto_priv.0+0x158>)
 8008790:	9400      	str	r4, [sp, #0]
 8008792:	3202      	adds	r2, #2
 8008794:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008798:	f7fb f9ea 	bl	8003b70 <chThdCreateStatic>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 80087a0:	689a      	ldr	r2, [r3, #8]
 80087a2:	483e      	ldr	r0, [pc, #248]	; (800889c <rt_test_012_007_execute.lto_priv.0+0x16c>)
 80087a4:	4b38      	ldr	r3, [pc, #224]	; (8008888 <rt_test_012_007_execute.lto_priv.0+0x158>)
 80087a6:	9400      	str	r4, [sp, #0]
 80087a8:	4442      	add	r2, r8
 80087aa:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80087ae:	f7fb f9df 	bl	8003b70 <chThdCreateStatic>
  test_set_step(2);
 80087b2:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 80087b4:	6128      	str	r0, [r5, #16]
  test_set_step(2);
 80087b6:	6033      	str	r3, [r6, #0]
 80087b8:	2530      	movs	r5, #48	; 0x30
 80087ba:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80087be:	2008      	movs	r0, #8
 80087c0:	4641      	mov	r1, r8
 80087c2:	f7fa f8ad 	bl	8002920 <chSchGoSleepTimeoutS>
 80087c6:	f384 8811 	msr	BASEPRI, r4
 80087ca:	f385 8811 	msr	BASEPRI, r5
 80087ce:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80087d2:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 80087d6:	f384 8811 	msr	BASEPRI, r4
 80087da:	4f31      	ldr	r7, [pc, #196]	; (80088a0 <rt_test_012_007_execute.lto_priv.0+0x170>)
 80087dc:	2100      	movs	r1, #0
 80087de:	4638      	mov	r0, r7
 80087e0:	f00a fd96 	bl	8013310 <chSemResetWithMessage.constprop.0>
 80087e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 80087e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80087ea:	eba3 0308 	sub.w	r3, r3, r8
 80087ee:	4293      	cmp	r3, r2
      n++;
 80087f0:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80087f4:	d9f2      	bls.n	80087dc <rt_test_012_007_execute.lto_priv.0+0xac>
  test_set_step(3);
 80087f6:	4d25      	ldr	r5, [pc, #148]	; (800888c <rt_test_012_007_execute.lto_priv.0+0x15c>)
 80087f8:	2303      	movs	r3, #3
 80087fa:	6033      	str	r3, [r6, #0]
  for (i = 0; i < MAX_THREADS; i++)
 80087fc:	f105 0714 	add.w	r7, r5, #20
 8008800:	462b      	mov	r3, r5
 8008802:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008806:	2000      	movs	r0, #0
    if (threads[i])
 8008808:	f853 2b04 	ldr.w	r2, [r3], #4
 800880c:	b14a      	cbz	r2, 8008822 <rt_test_012_007_execute.lto_priv.0+0xf2>
 800880e:	f38c 8811 	msr	BASEPRI, ip
  tp->flags |= CH_FLAG_TERMINATE;
 8008812:	f892 1025 	ldrb.w	r1, [r2, #37]	; 0x25
 8008816:	f041 0104 	orr.w	r1, r1, #4
 800881a:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
 800881e:	f380 8811 	msr	BASEPRI, r0
  for (i = 0; i < MAX_THREADS; i++)
 8008822:	42bb      	cmp	r3, r7
 8008824:	d1f0      	bne.n	8008808 <rt_test_012_007_execute.lto_priv.0+0xd8>
 8008826:	481e      	ldr	r0, [pc, #120]	; (80088a0 <rt_test_012_007_execute.lto_priv.0+0x170>)
 8008828:	2100      	movs	r1, #0
 800882a:	f00a fd71 	bl	8013310 <chSemResetWithMessage.constprop.0>
      threads[i] = NULL;
 800882e:	f04f 0800 	mov.w	r8, #0
    if (threads[i] != NULL) {
 8008832:	f855 0b04 	ldr.w	r0, [r5], #4
 8008836:	b118      	cbz	r0, 8008840 <rt_test_012_007_execute.lto_priv.0+0x110>
      chThdWait(threads[i]);
 8008838:	f7fc f892 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 800883c:	f845 8c04 	str.w	r8, [r5, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8008840:	42bd      	cmp	r5, r7
 8008842:	d1f6      	bne.n	8008832 <rt_test_012_007_execute.lto_priv.0+0x102>
  test_set_step(4);
 8008844:	2304      	movs	r3, #4
  test_printf("%s", msgp);
 8008846:	4917      	ldr	r1, [pc, #92]	; (80088a4 <rt_test_012_007_execute.lto_priv.0+0x174>)
 8008848:	4817      	ldr	r0, [pc, #92]	; (80088a8 <rt_test_012_007_execute.lto_priv.0+0x178>)
 800884a:	6033      	str	r3, [r6, #0]
 800884c:	f7ff f800 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008850:	4621      	mov	r1, r4
 8008852:	4816      	ldr	r0, [pc, #88]	; (80088ac <rt_test_012_007_execute.lto_priv.0+0x17c>)
 8008854:	f7fe fffc 	bl	8007850 <test_printf>
    test_printn(n * 6);
 8008858:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  test_printf("%s", msgp);
 800885c:	4914      	ldr	r1, [pc, #80]	; (80088b0 <rt_test_012_007_execute.lto_priv.0+0x180>)
 800885e:	4812      	ldr	r0, [pc, #72]	; (80088a8 <rt_test_012_007_execute.lto_priv.0+0x178>)
 8008860:	f7fe fff6 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008864:	0061      	lsls	r1, r4, #1
 8008866:	4811      	ldr	r0, [pc, #68]	; (80088ac <rt_test_012_007_execute.lto_priv.0+0x17c>)
 8008868:	f7fe fff2 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800886c:	4911      	ldr	r1, [pc, #68]	; (80088b4 <rt_test_012_007_execute.lto_priv.0+0x184>)
 800886e:	4812      	ldr	r0, [pc, #72]	; (80088b8 <rt_test_012_007_execute.lto_priv.0+0x188>)
}
 8008870:	b002      	add	sp, #8
 8008872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008876:	f7fe bfeb 	b.w	8007850 <test_printf>
 800887a:	bf00      	nop
 800887c:	20000a90 	.word	0x20000a90
 8008880:	20000b74 	.word	0x20000b74
 8008884:	20000dd8 	.word	0x20000dd8
 8008888:	08001601 	.word	0x08001601
 800888c:	200016e4 	.word	0x200016e4
 8008890:	20000f88 	.word	0x20000f88
 8008894:	20001138 	.word	0x20001138
 8008898:	200012e8 	.word	0x200012e8
 800889c:	20001498 	.word	0x20001498
 80088a0:	20000dc8 	.word	0x20000dc8
 80088a4:	08015d44 	.word	0x08015d44
 80088a8:	08015558 	.word	0x08015558
 80088ac:	08015650 	.word	0x08015650
 80088b0:	08015d78 	.word	0x08015d78
 80088b4:	08015d60 	.word	0x08015d60
 80088b8:	0801dcbc 	.word	0x0801dcbc
 80088bc:	00000000 	.word	0x00000000

080088c0 <rt_test_012_008_execute.lto_priv.0>:
static void rt_test_012_008_execute(void) {
 80088c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return __sch_get_currthread();
 80088c4:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80089cc <rt_test_012_008_execute.lto_priv.0+0x10c>
  test_set_step(1);
 80088c8:	4e41      	ldr	r6, [pc, #260]	; (80089d0 <rt_test_012_008_execute.lto_priv.0+0x110>)
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80088ca:	4c42      	ldr	r4, [pc, #264]	; (80089d4 <rt_test_012_008_execute.lto_priv.0+0x114>)
static void rt_test_012_008_execute(void) {
 80088cc:	b084      	sub	sp, #16
  test_set_step(1);
 80088ce:	2301      	movs	r3, #1
    n = 0;
 80088d0:	2500      	movs	r5, #0
  test_set_step(1);
 80088d2:	6033      	str	r3, [r6, #0]
    n = 0;
 80088d4:	9503      	str	r5, [sp, #12]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80088d6:	f7f9 facb 	bl	8001e70 <test_wait_tick>
  return chThdGetSelfX()->hdr.pqueue.prio;
 80088da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088de:	483e      	ldr	r0, [pc, #248]	; (80089d8 <rt_test_012_008_execute.lto_priv.0+0x118>)
 80088e0:	689a      	ldr	r2, [r3, #8]
 80088e2:	4b3e      	ldr	r3, [pc, #248]	; (80089dc <rt_test_012_008_execute.lto_priv.0+0x11c>)
 80088e4:	af03      	add	r7, sp, #12
 80088e6:	9700      	str	r7, [sp, #0]
 80088e8:	3a01      	subs	r2, #1
 80088ea:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80088ee:	f7fb f93f 	bl	8003b70 <chThdCreateStatic>
 80088f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088f6:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80088f8:	689a      	ldr	r2, [r3, #8]
 80088fa:	4839      	ldr	r0, [pc, #228]	; (80089e0 <rt_test_012_008_execute.lto_priv.0+0x120>)
 80088fc:	4b37      	ldr	r3, [pc, #220]	; (80089dc <rt_test_012_008_execute.lto_priv.0+0x11c>)
 80088fe:	9700      	str	r7, [sp, #0]
 8008900:	3a01      	subs	r2, #1
 8008902:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008906:	f7fb f933 	bl	8003b70 <chThdCreateStatic>
 800890a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800890e:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008910:	689a      	ldr	r2, [r3, #8]
 8008912:	4834      	ldr	r0, [pc, #208]	; (80089e4 <rt_test_012_008_execute.lto_priv.0+0x124>)
 8008914:	4b31      	ldr	r3, [pc, #196]	; (80089dc <rt_test_012_008_execute.lto_priv.0+0x11c>)
 8008916:	9700      	str	r7, [sp, #0]
 8008918:	3a01      	subs	r2, #1
 800891a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800891e:	f7fb f927 	bl	8003b70 <chThdCreateStatic>
 8008922:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008926:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008928:	689a      	ldr	r2, [r3, #8]
 800892a:	482f      	ldr	r0, [pc, #188]	; (80089e8 <rt_test_012_008_execute.lto_priv.0+0x128>)
 800892c:	4b2b      	ldr	r3, [pc, #172]	; (80089dc <rt_test_012_008_execute.lto_priv.0+0x11c>)
 800892e:	9700      	str	r7, [sp, #0]
 8008930:	3a01      	subs	r2, #1
 8008932:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008936:	f7fb f91b 	bl	8003b70 <chThdCreateStatic>
 800893a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800893e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008940:	689a      	ldr	r2, [r3, #8]
 8008942:	482a      	ldr	r0, [pc, #168]	; (80089ec <rt_test_012_008_execute.lto_priv.0+0x12c>)
 8008944:	4b25      	ldr	r3, [pc, #148]	; (80089dc <rt_test_012_008_execute.lto_priv.0+0x11c>)
 8008946:	9700      	str	r7, [sp, #0]
 8008948:	3a01      	subs	r2, #1
 800894a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800894e:	f7fb f90f 	bl	8003b70 <chThdCreateStatic>
  test_set_step(2);
 8008952:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008954:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8008956:	6033      	str	r3, [r6, #0]
 8008958:	f04f 0830 	mov.w	r8, #48	; 0x30
 800895c:	f388 8811 	msr	BASEPRI, r8
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8008960:	f242 7110 	movw	r1, #10000	; 0x2710
 8008964:	2008      	movs	r0, #8
 8008966:	f7f9 ffdb 	bl	8002920 <chSchGoSleepTimeoutS>
 800896a:	f385 8811 	msr	BASEPRI, r5
  for (i = 0; i < MAX_THREADS; i++)
 800896e:	f104 0714 	add.w	r7, r4, #20
 8008972:	4640      	mov	r0, r8
 8008974:	4623      	mov	r3, r4
    if (threads[i])
 8008976:	f853 2b04 	ldr.w	r2, [r3], #4
 800897a:	b14a      	cbz	r2, 8008990 <rt_test_012_008_execute.lto_priv.0+0xd0>
 800897c:	f380 8811 	msr	BASEPRI, r0
 8008980:	f892 1025 	ldrb.w	r1, [r2, #37]	; 0x25
 8008984:	f041 0104 	orr.w	r1, r1, #4
 8008988:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
 800898c:	f385 8811 	msr	BASEPRI, r5
  for (i = 0; i < MAX_THREADS; i++)
 8008990:	42bb      	cmp	r3, r7
 8008992:	d1f0      	bne.n	8008976 <rt_test_012_008_execute.lto_priv.0+0xb6>
      threads[i] = NULL;
 8008994:	2500      	movs	r5, #0
    if (threads[i] != NULL) {
 8008996:	f854 0b04 	ldr.w	r0, [r4], #4
 800899a:	b118      	cbz	r0, 80089a4 <rt_test_012_008_execute.lto_priv.0+0xe4>
      chThdWait(threads[i]);
 800899c:	f7fb ffe0 	bl	8004960 <chThdWait>
      threads[i] = NULL;
 80089a0:	f844 5c04 	str.w	r5, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80089a4:	42bc      	cmp	r4, r7
 80089a6:	d1f6      	bne.n	8008996 <rt_test_012_008_execute.lto_priv.0+0xd6>
  test_set_step(3);
 80089a8:	2303      	movs	r3, #3
  test_printf("%s", msgp);
 80089aa:	4911      	ldr	r1, [pc, #68]	; (80089f0 <rt_test_012_008_execute.lto_priv.0+0x130>)
 80089ac:	4811      	ldr	r0, [pc, #68]	; (80089f4 <rt_test_012_008_execute.lto_priv.0+0x134>)
 80089ae:	6033      	str	r3, [r6, #0]
 80089b0:	f7fe ff4e 	bl	8007850 <test_printf>
  test_printf("%u", n);
 80089b4:	9903      	ldr	r1, [sp, #12]
 80089b6:	4810      	ldr	r0, [pc, #64]	; (80089f8 <rt_test_012_008_execute.lto_priv.0+0x138>)
 80089b8:	f7fe ff4a 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80089bc:	490f      	ldr	r1, [pc, #60]	; (80089fc <rt_test_012_008_execute.lto_priv.0+0x13c>)
 80089be:	4810      	ldr	r0, [pc, #64]	; (8008a00 <rt_test_012_008_execute.lto_priv.0+0x140>)
 80089c0:	f7fe ff46 	bl	8007850 <test_printf>
}
 80089c4:	b004      	add	sp, #16
 80089c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ca:	bf00      	nop
 80089cc:	20000a90 	.word	0x20000a90
 80089d0:	20000b74 	.word	0x20000b74
 80089d4:	200016e4 	.word	0x200016e4
 80089d8:	20000dd8 	.word	0x20000dd8
 80089dc:	08001671 	.word	0x08001671
 80089e0:	20000f88 	.word	0x20000f88
 80089e4:	20001138 	.word	0x20001138
 80089e8:	200012e8 	.word	0x200012e8
 80089ec:	20001498 	.word	0x20001498
 80089f0:	08015d44 	.word	0x08015d44
 80089f4:	08015558 	.word	0x08015558
 80089f8:	08015650 	.word	0x08015650
 80089fc:	08015d60 	.word	0x08015d60
 8008a00:	0801dcbc 	.word	0x0801dcbc
	...

08008a10 <rt_test_012_009_execute.lto_priv.0>:
static void rt_test_012_009_execute(void) {
 8008a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8008a14:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8008ab8 <rt_test_012_009_execute.lto_priv.0+0xa8>
 8008a18:	2101      	movs	r1, #1
 8008a1a:	f8ca 1000 	str.w	r1, [sl]
 8008a1e:	f04f 0830 	mov.w	r8, #48	; 0x30
 8008a22:	f388 8811 	msr	BASEPRI, r8
 8008a26:	2008      	movs	r0, #8
 8008a28:	f7f9 ff7a 	bl	8002920 <chSchGoSleepTimeoutS>
 8008a2c:	f04f 0b00 	mov.w	fp, #0
 8008a30:	f38b 8811 	msr	BASEPRI, fp
 8008a34:	f388 8811 	msr	BASEPRI, r8
 8008a38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a3c:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 8008a40:	f38b 8811 	msr	BASEPRI, fp
    end = chTimeAddX(start, TIME_MS2I(1000));
 8008a44:	4e1d      	ldr	r6, [pc, #116]	; (8008abc <rt_test_012_009_execute.lto_priv.0+0xac>)
 8008a46:	4f1e      	ldr	r7, [pc, #120]	; (8008ac0 <rt_test_012_009_execute.lto_priv.0+0xb0>)
 8008a48:	4d1e      	ldr	r5, [pc, #120]	; (8008ac4 <rt_test_012_009_execute.lto_priv.0+0xb4>)
 8008a4a:	f388 8811 	msr	BASEPRI, r8
  vtp->par     = par;
 8008a4e:	2400      	movs	r4, #0
  vt_enqueue(vtlp, vtp, delay);
 8008a50:	4630      	mov	r0, r6
 8008a52:	2101      	movs	r1, #1
  vtp->func    = vtfunc;
 8008a54:	e9c6 7403 	strd	r7, r4, [r6, #12]
  vtp->reload  = (sysinterval_t)0;
 8008a58:	6174      	str	r4, [r6, #20]
  vt_enqueue(vtlp, vtp, delay);
 8008a5a:	f00a fd01 	bl	8013460 <vt_enqueue.constprop.0>
 8008a5e:	f242 7110 	movw	r1, #10000	; 0x2710
 8008a62:	4628      	mov	r0, r5
  vtp->func    = vtfunc;
 8008a64:	e9c5 7403 	strd	r7, r4, [r5, #12]
  vtp->reload  = (sysinterval_t)0;
 8008a68:	616c      	str	r4, [r5, #20]
  vt_enqueue(vtlp, vtp, delay);
 8008a6a:	f00a fcf9 	bl	8013460 <vt_enqueue.constprop.0>
      chVTDoResetI(&vt1);
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f7f9 f9a6 	bl	8001dc0 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8008a74:	4628      	mov	r0, r5
 8008a76:	f7f9 f9a3 	bl	8001dc0 <chVTDoResetI>
 8008a7a:	f384 8811 	msr	BASEPRI, r4
 8008a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8008a82:	f242 720f 	movw	r2, #9999	; 0x270f
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	eba3 0309 	sub.w	r3, r3, r9
 8008a8c:	4293      	cmp	r3, r2
      n++;
 8008a8e:	f10b 0b01 	add.w	fp, fp, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008a92:	d9da      	bls.n	8008a4a <rt_test_012_009_execute.lto_priv.0+0x3a>
  test_set_step(2);
 8008a94:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 8008a96:	490c      	ldr	r1, [pc, #48]	; (8008ac8 <rt_test_012_009_execute.lto_priv.0+0xb8>)
 8008a98:	480c      	ldr	r0, [pc, #48]	; (8008acc <rt_test_012_009_execute.lto_priv.0+0xbc>)
 8008a9a:	f8ca 3000 	str.w	r3, [sl]
 8008a9e:	f7fe fed7 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008aa2:	ea4f 014b 	mov.w	r1, fp, lsl #1
 8008aa6:	480a      	ldr	r0, [pc, #40]	; (8008ad0 <rt_test_012_009_execute.lto_priv.0+0xc0>)
 8008aa8:	f7fe fed2 	bl	8007850 <test_printf>
}
 8008aac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008ab0:	4908      	ldr	r1, [pc, #32]	; (8008ad4 <rt_test_012_009_execute.lto_priv.0+0xc4>)
 8008ab2:	4809      	ldr	r0, [pc, #36]	; (8008ad8 <rt_test_012_009_execute.lto_priv.0+0xc8>)
 8008ab4:	f7fe becc 	b.w	8007850 <test_printf>
 8008ab8:	20000b74 	.word	0x20000b74
 8008abc:	200016fc 	.word	0x200016fc
 8008ac0:	08000b11 	.word	0x08000b11
 8008ac4:	20001714 	.word	0x20001714
 8008ac8:	08015d44 	.word	0x08015d44
 8008acc:	08015558 	.word	0x08015558
 8008ad0:	08015650 	.word	0x08015650
 8008ad4:	08015d8c 	.word	0x08015d8c
 8008ad8:	0801dcbc 	.word	0x0801dcbc
 8008adc:	00000000 	.word	0x00000000

08008ae0 <rt_test_012_010_execute.lto_priv.0>:
static void rt_test_012_010_execute(void) {
 8008ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8008ae4:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8008cb8 <rt_test_012_010_execute.lto_priv.0+0x1d8>
 8008ae8:	4c74      	ldr	r4, [pc, #464]	; (8008cbc <rt_test_012_010_execute.lto_priv.0+0x1dc>)
  return __sch_get_currthread();
 8008aea:	4f75      	ldr	r7, [pc, #468]	; (8008cc0 <rt_test_012_010_execute.lto_priv.0+0x1e0>)
 8008aec:	2301      	movs	r3, #1
 8008aee:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 8008af2:	f7f9 f9bd 	bl	8001e70 <test_wait_tick>
    n = 0;
 8008af6:	f04f 0800 	mov.w	r8, #0
    start = test_wait_tick();
 8008afa:	4681      	mov	r9, r0
 8008afc:	2630      	movs	r6, #48	; 0x30
 8008afe:	4645      	mov	r5, r8
 8008b00:	e044      	b.n	8008b8c <rt_test_012_010_execute.lto_priv.0+0xac>
 8008b02:	f385 8811 	msr	BASEPRI, r5
 8008b06:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8008b0a:	68a3      	ldr	r3, [r4, #8]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	60a3      	str	r3, [r4, #8]
 8008b12:	db6b      	blt.n	8008bec <rt_test_012_010_execute.lto_priv.0+0x10c>
 8008b14:	f385 8811 	msr	BASEPRI, r5
 8008b18:	f386 8811 	msr	BASEPRI, r6
  if (++sp->cnt <= (cnt_t)0) {
 8008b1c:	68a3      	ldr	r3, [r4, #8]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	60a3      	str	r3, [r4, #8]
 8008b24:	dd5a      	ble.n	8008bdc <rt_test_012_010_execute.lto_priv.0+0xfc>
 8008b26:	f385 8811 	msr	BASEPRI, r5
 8008b2a:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8008b2e:	68a3      	ldr	r3, [r4, #8]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	60a3      	str	r3, [r4, #8]
 8008b36:	f2c0 8098 	blt.w	8008c6a <rt_test_012_010_execute.lto_priv.0+0x18a>
 8008b3a:	f385 8811 	msr	BASEPRI, r5
 8008b3e:	f386 8811 	msr	BASEPRI, r6
  if (++sp->cnt <= (cnt_t)0) {
 8008b42:	68a3      	ldr	r3, [r4, #8]
 8008b44:	3301      	adds	r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	60a3      	str	r3, [r4, #8]
 8008b4a:	dd3f      	ble.n	8008bcc <rt_test_012_010_execute.lto_priv.0+0xec>
 8008b4c:	f385 8811 	msr	BASEPRI, r5
 8008b50:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8008b54:	68a3      	ldr	r3, [r4, #8]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	60a3      	str	r3, [r4, #8]
 8008b5c:	db70      	blt.n	8008c40 <rt_test_012_010_execute.lto_priv.0+0x160>
 8008b5e:	f385 8811 	msr	BASEPRI, r5
 8008b62:	f386 8811 	msr	BASEPRI, r6
  if (++sp->cnt <= (cnt_t)0) {
 8008b66:	68a3      	ldr	r3, [r4, #8]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	60a3      	str	r3, [r4, #8]
 8008b6e:	dd25      	ble.n	8008bbc <rt_test_012_010_execute.lto_priv.0+0xdc>
 8008b70:	f385 8811 	msr	BASEPRI, r5
 8008b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8008b78:	f242 720f 	movw	r2, #9999	; 0x270f
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	eba3 0309 	sub.w	r3, r3, r9
 8008b82:	4293      	cmp	r3, r2
      n++;
 8008b84:	f108 0801 	add.w	r8, r8, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008b88:	f200 8084 	bhi.w	8008c94 <rt_test_012_010_execute.lto_priv.0+0x1b4>
 8008b8c:	f386 8811 	msr	BASEPRI, r6
  if (--sp->cnt < (cnt_t)0) {
 8008b90:	68a3      	ldr	r3, [r4, #8]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	60a3      	str	r3, [r4, #8]
 8008b98:	db3d      	blt.n	8008c16 <rt_test_012_010_execute.lto_priv.0+0x136>
 8008b9a:	f385 8811 	msr	BASEPRI, r5
 8008b9e:	f386 8811 	msr	BASEPRI, r6
  if (++sp->cnt <= (cnt_t)0) {
 8008ba2:	68a3      	ldr	r3, [r4, #8]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	60a3      	str	r3, [r4, #8]
 8008baa:	dcaa      	bgt.n	8008b02 <rt_test_012_010_execute.lto_priv.0+0x22>
  ch_queue_t *p = qp->next;
 8008bac:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8008bae:	6803      	ldr	r3, [r0, #0]
 8008bb0:	6023      	str	r3, [r4, #0]
    chSchWakeupS(threadref(ch_queue_fifo_remove(&sp->queue)), MSG_OK);
 8008bb2:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8008bb4:	605c      	str	r4, [r3, #4]
 8008bb6:	f7fa fe63 	bl	8003880 <chSchWakeupS>
 8008bba:	e7a2      	b.n	8008b02 <rt_test_012_010_execute.lto_priv.0+0x22>
  ch_queue_t *p = qp->next;
 8008bbc:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8008bbe:	6803      	ldr	r3, [r0, #0]
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8008bc4:	605c      	str	r4, [r3, #4]
 8008bc6:	f7fa fe5b 	bl	8003880 <chSchWakeupS>
 8008bca:	e7d1      	b.n	8008b70 <rt_test_012_010_execute.lto_priv.0+0x90>
  ch_queue_t *p = qp->next;
 8008bcc:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8008bce:	6803      	ldr	r3, [r0, #0]
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8008bd4:	605c      	str	r4, [r3, #4]
 8008bd6:	f7fa fe53 	bl	8003880 <chSchWakeupS>
 8008bda:	e7b7      	b.n	8008b4c <rt_test_012_010_execute.lto_priv.0+0x6c>
  ch_queue_t *p = qp->next;
 8008bdc:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 8008bde:	6803      	ldr	r3, [r0, #0]
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8008be4:	605c      	str	r4, [r3, #4]
 8008be6:	f7fa fe4b 	bl	8003880 <chSchWakeupS>
 8008bea:	e79c      	b.n	8008b26 <rt_test_012_010_execute.lto_priv.0+0x46>
 8008bec:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 8008bee:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 8008bf0:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 8008bf2:	604b      	str	r3, [r1, #4]
  ch_priority_queue_t *p = pqp->next;
 8008bf4:	6838      	ldr	r0, [r7, #0]
    currtp->u.wtsemp = sp;
 8008bf6:	628c      	str	r4, [r1, #40]	; 0x28
  p->prev->next = p;
 8008bf8:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8008bfa:	2305      	movs	r3, #5
 8008bfc:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8008c00:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 8008c02:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 8008c04:	603b      	str	r3, [r7, #0]
  pqp->next->prev = pqp;
 8008c06:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8008c0e:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8008c10:	f7f7 fb56 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 8008c14:	e77e      	b.n	8008b14 <rt_test_012_010_execute.lto_priv.0+0x34>
 8008c16:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 8008c18:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 8008c1a:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 8008c1c:	604b      	str	r3, [r1, #4]
  ch_priority_queue_t *p = pqp->next;
 8008c1e:	6838      	ldr	r0, [r7, #0]
    currtp->u.wtsemp = sp;
 8008c20:	628c      	str	r4, [r1, #40]	; 0x28
  p->prev->next = p;
 8008c22:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8008c24:	2305      	movs	r3, #5
 8008c26:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8008c2a:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 8008c2c:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 8008c2e:	603b      	str	r3, [r7, #0]
  pqp->next->prev = pqp;
 8008c30:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8008c32:	2301      	movs	r3, #1
 8008c34:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8008c38:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8008c3a:	f7f7 fb41 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 8008c3e:	e7ac      	b.n	8008b9a <rt_test_012_010_execute.lto_priv.0+0xba>
 8008c40:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 8008c42:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 8008c44:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 8008c46:	604b      	str	r3, [r1, #4]
  ch_priority_queue_t *p = pqp->next;
 8008c48:	6838      	ldr	r0, [r7, #0]
    currtp->u.wtsemp = sp;
 8008c4a:	628c      	str	r4, [r1, #40]	; 0x28
  p->prev->next = p;
 8008c4c:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8008c4e:	2305      	movs	r3, #5
 8008c50:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8008c54:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 8008c56:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 8008c58:	603b      	str	r3, [r7, #0]
  pqp->next->prev = pqp;
 8008c5a:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8008c62:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8008c64:	f7f7 fb2c 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 8008c68:	e779      	b.n	8008b5e <rt_test_012_010_execute.lto_priv.0+0x7e>
 8008c6a:	68f9      	ldr	r1, [r7, #12]
  p->prev       = qp->prev;
 8008c6c:	6863      	ldr	r3, [r4, #4]
  p->next       = qp;
 8008c6e:	600c      	str	r4, [r1, #0]
  p->prev       = qp->prev;
 8008c70:	604b      	str	r3, [r1, #4]
  ch_priority_queue_t *p = pqp->next;
 8008c72:	6838      	ldr	r0, [r7, #0]
    currtp->u.wtsemp = sp;
 8008c74:	628c      	str	r4, [r1, #40]	; 0x28
  p->prev->next = p;
 8008c76:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8008c78:	2305      	movs	r3, #5
 8008c7a:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8008c7e:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 8008c80:	6061      	str	r1, [r4, #4]
  pqp->next       = p->next;
 8008c82:	603b      	str	r3, [r7, #0]
  pqp->next->prev = pqp;
 8008c84:	605f      	str	r7, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8008c86:	2301      	movs	r3, #1
 8008c88:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8008c8c:	60f8      	str	r0, [r7, #12]
  chSysSwitch(ntp, otp);
 8008c8e:	f7f7 fb17 	bl	80002c0 <__port_switch>
    return currtp->u.rdymsg;
 8008c92:	e752      	b.n	8008b3a <rt_test_012_010_execute.lto_priv.0+0x5a>
  test_set_step(2);
 8008c94:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 8008c96:	490b      	ldr	r1, [pc, #44]	; (8008cc4 <rt_test_012_010_execute.lto_priv.0+0x1e4>)
 8008c98:	480b      	ldr	r0, [pc, #44]	; (8008cc8 <rt_test_012_010_execute.lto_priv.0+0x1e8>)
 8008c9a:	f8ca 3000 	str.w	r3, [sl]
 8008c9e:	f7fe fdd7 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008ca2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8008ca6:	4809      	ldr	r0, [pc, #36]	; (8008ccc <rt_test_012_010_execute.lto_priv.0+0x1ec>)
 8008ca8:	f7fe fdd2 	bl	8007850 <test_printf>
}
 8008cac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008cb0:	4907      	ldr	r1, [pc, #28]	; (8008cd0 <rt_test_012_010_execute.lto_priv.0+0x1f0>)
 8008cb2:	4808      	ldr	r0, [pc, #32]	; (8008cd4 <rt_test_012_010_execute.lto_priv.0+0x1f4>)
 8008cb4:	f7fe bdcc 	b.w	8007850 <test_printf>
 8008cb8:	20000b74 	.word	0x20000b74
 8008cbc:	20000dc8 	.word	0x20000dc8
 8008cc0:	20000a90 	.word	0x20000a90
 8008cc4:	08015d44 	.word	0x08015d44
 8008cc8:	08015558 	.word	0x08015558
 8008ccc:	08015650 	.word	0x08015650
 8008cd0:	08015d98 	.word	0x08015d98
 8008cd4:	0801dcbc 	.word	0x0801dcbc
	...

08008ce0 <rt_test_012_011_execute.lto_priv.0>:

static void rt_test_012_011_execute(void) {
 8008ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t n;

  /* [12.11.1] A mutex is locked and unlocked. The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 8008ce4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8008d9c <rt_test_012_011_execute.lto_priv.0+0xbc>
 8008ce8:	2101      	movs	r1, #1
 8008cea:	f8c9 1000 	str.w	r1, [r9]
 8008cee:	2530      	movs	r5, #48	; 0x30
 8008cf0:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8008cf4:	2008      	movs	r0, #8
 8008cf6:	f7f9 fe13 	bl	8002920 <chSchGoSleepTimeoutS>
 8008cfa:	2700      	movs	r7, #0
 8008cfc:	f387 8811 	msr	BASEPRI, r7
 8008d00:	f385 8811 	msr	BASEPRI, r5
 8008d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d08:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8008d0c:	f387 8811 	msr	BASEPRI, r7
 8008d10:	4c23      	ldr	r4, [pc, #140]	; (8008da0 <rt_test_012_011_execute.lto_priv.0+0xc0>)
 8008d12:	463e      	mov	r6, r7
 8008d14:	f385 8811 	msr	BASEPRI, r5
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f7fb f989 	bl	8004030 <chMtxLockS>
 8008d1e:	f386 8811 	msr	BASEPRI, r6
    n = 0;
    start = test_wait_tick();
    end = chTimeAddX(start, TIME_MS2I(1000));
    do {
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008d22:	4620      	mov	r0, r4
 8008d24:	f7fb fa24 	bl	8004170 <chMtxUnlock>
 8008d28:	f385 8811 	msr	BASEPRI, r5
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f7fb f97f 	bl	8004030 <chMtxLockS>
 8008d32:	f386 8811 	msr	BASEPRI, r6
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008d36:	4620      	mov	r0, r4
 8008d38:	f7fb fa1a 	bl	8004170 <chMtxUnlock>
 8008d3c:	f385 8811 	msr	BASEPRI, r5
 8008d40:	4620      	mov	r0, r4
 8008d42:	f7fb f975 	bl	8004030 <chMtxLockS>
 8008d46:	f386 8811 	msr	BASEPRI, r6
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f7fb fa10 	bl	8004170 <chMtxUnlock>
 8008d50:	f385 8811 	msr	BASEPRI, r5
 8008d54:	4620      	mov	r0, r4
 8008d56:	f7fb f96b 	bl	8004030 <chMtxLockS>
 8008d5a:	f386 8811 	msr	BASEPRI, r6
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f7fb fa06 	bl	8004170 <chMtxUnlock>
 8008d64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8008d68:	f242 720f 	movw	r2, #9999	; 0x270f
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	eba3 0308 	sub.w	r3, r3, r8
 8008d72:	4293      	cmp	r3, r2
      n++;
 8008d74:	f107 0701 	add.w	r7, r7, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008d78:	d9cc      	bls.n	8008d14 <rt_test_012_011_execute.lto_priv.0+0x34>
  }
  test_end_step(1);

  /* [12.11.2] The score is printed.*/
  test_set_step(2);
 8008d7a:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 8008d7c:	4909      	ldr	r1, [pc, #36]	; (8008da4 <rt_test_012_011_execute.lto_priv.0+0xc4>)
 8008d7e:	480a      	ldr	r0, [pc, #40]	; (8008da8 <rt_test_012_011_execute.lto_priv.0+0xc8>)
 8008d80:	f8c9 3000 	str.w	r3, [r9]
 8008d84:	f7fe fd64 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008d88:	00b9      	lsls	r1, r7, #2
 8008d8a:	4808      	ldr	r0, [pc, #32]	; (8008dac <rt_test_012_011_execute.lto_priv.0+0xcc>)
 8008d8c:	f7fe fd60 	bl	8007850 <test_printf>
    test_print("--- Score : ");
    test_printn(n * 4);
    test_println(" lock+unlock/S");
  }
  test_end_step(2);
}
 8008d90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008d94:	4906      	ldr	r1, [pc, #24]	; (8008db0 <rt_test_012_011_execute.lto_priv.0+0xd0>)
 8008d96:	4807      	ldr	r0, [pc, #28]	; (8008db4 <rt_test_012_011_execute.lto_priv.0+0xd4>)
 8008d98:	f7fe bd5a 	b.w	8007850 <test_printf>
 8008d9c:	20000b74 	.word	0x20000b74
 8008da0:	20000cac 	.word	0x20000cac
 8008da4:	08015d44 	.word	0x08015d44
 8008da8:	08015558 	.word	0x08015558
 8008dac:	08015650 	.word	0x08015650
 8008db0:	08015da8 	.word	0x08015da8
 8008db4:	0801dcbc 	.word	0x0801dcbc
	...

08008dc0 <rt_test_012_012_execute.lto_priv.0>:
 * - [12.12.8] The size of an event listener is printed.
 * - [12.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_012_012_execute(void) {
 8008dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_printf("%s", msgp);
 8008dc4:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8008ed4 <rt_test_012_012_execute.lto_priv.0+0x114>

  /* [12.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8008dc8:	4f43      	ldr	r7, [pc, #268]	; (8008ed8 <rt_test_012_012_execute.lto_priv.0+0x118>)
  test_printf("%u", n);
 8008dca:	4e44      	ldr	r6, [pc, #272]	; (8008edc <rt_test_012_012_execute.lto_priv.0+0x11c>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008dcc:	4d44      	ldr	r5, [pc, #272]	; (8008ee0 <rt_test_012_012_execute.lto_priv.0+0x120>)
 8008dce:	4c45      	ldr	r4, [pc, #276]	; (8008ee4 <rt_test_012_012_execute.lto_priv.0+0x124>)
  test_printf("%s", msgp);
 8008dd0:	4945      	ldr	r1, [pc, #276]	; (8008ee8 <rt_test_012_012_execute.lto_priv.0+0x128>)
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	f7fe fd3a 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008ddc:	2188      	movs	r1, #136	; 0x88
 8008dde:	4630      	mov	r0, r6
 8008de0:	f7fe fd36 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008de4:	4629      	mov	r1, r5
 8008de6:	4620      	mov	r0, r4
 8008de8:	f7fe fd32 	bl	8007850 <test_printf>
    test_println(" bytes");
  }
  test_end_step(1);

  /* [12.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 8008dec:	2302      	movs	r3, #2
  test_printf("%s", msgp);
 8008dee:	493f      	ldr	r1, [pc, #252]	; (8008eec <rt_test_012_012_execute.lto_priv.0+0x12c>)
 8008df0:	603b      	str	r3, [r7, #0]
 8008df2:	4640      	mov	r0, r8
 8008df4:	f7fe fd2c 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008df8:	2148      	movs	r1, #72	; 0x48
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f7fe fd28 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008e00:	4629      	mov	r1, r5
 8008e02:	4620      	mov	r0, r4
 8008e04:	f7fe fd24 	bl	8007850 <test_printf>
    test_println(" bytes");
  }
  test_end_step(2);

  /* [12.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8008e08:	2303      	movs	r3, #3
  test_printf("%s", msgp);
 8008e0a:	4939      	ldr	r1, [pc, #228]	; (8008ef0 <rt_test_012_012_execute.lto_priv.0+0x130>)
 8008e0c:	603b      	str	r3, [r7, #0]
 8008e0e:	4640      	mov	r0, r8
 8008e10:	f7fe fd1e 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008e14:	2118      	movs	r1, #24
 8008e16:	4630      	mov	r0, r6
 8008e18:	f7fe fd1a 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f7fe fd16 	bl	8007850 <test_printf>
    test_println(" bytes");
  }
  test_end_step(3);

  /* [12.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 8008e24:	f04f 0904 	mov.w	r9, #4
  test_printf("%s", msgp);
 8008e28:	4932      	ldr	r1, [pc, #200]	; (8008ef4 <rt_test_012_012_execute.lto_priv.0+0x134>)
 8008e2a:	f8c7 9000 	str.w	r9, [r7]
 8008e2e:	4640      	mov	r0, r8
 8008e30:	f7fe fd0e 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008e34:	210c      	movs	r1, #12
 8008e36:	4630      	mov	r0, r6
 8008e38:	f7fe fd0a 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f7fe fd06 	bl	8007850 <test_printf>
#endif
  }
  test_end_step(4);

  /* [12.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 8008e44:	2305      	movs	r3, #5
  test_printf("%s", msgp);
 8008e46:	492c      	ldr	r1, [pc, #176]	; (8008ef8 <rt_test_012_012_execute.lto_priv.0+0x138>)
 8008e48:	603b      	str	r3, [r7, #0]
 8008e4a:	4640      	mov	r0, r8
 8008e4c:	f7fe fd00 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008e50:	2110      	movs	r1, #16
 8008e52:	4630      	mov	r0, r6
 8008e54:	f7fe fcfc 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008e58:	4629      	mov	r1, r5
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f7fe fcf8 	bl	8007850 <test_printf>
#endif
  }
  test_end_step(5);

  /* [12.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8008e60:	2306      	movs	r3, #6
  test_printf("%s", msgp);
 8008e62:	4926      	ldr	r1, [pc, #152]	; (8008efc <rt_test_012_012_execute.lto_priv.0+0x13c>)
 8008e64:	603b      	str	r3, [r7, #0]
 8008e66:	4640      	mov	r0, r8
 8008e68:	f7fe fcf2 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008e6c:	2108      	movs	r1, #8
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f7fe fcee 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008e74:	4629      	mov	r1, r5
 8008e76:	4620      	mov	r0, r4
 8008e78:	f7fe fcea 	bl	8007850 <test_printf>
#endif
  }
  test_end_step(6);

  /* [12.12.7] The size of an event source is printed.*/
  test_set_step(7);
 8008e7c:	2307      	movs	r3, #7
  test_printf("%s", msgp);
 8008e7e:	4920      	ldr	r1, [pc, #128]	; (8008f00 <rt_test_012_012_execute.lto_priv.0+0x140>)
 8008e80:	603b      	str	r3, [r7, #0]
 8008e82:	4640      	mov	r0, r8
 8008e84:	f7fe fce4 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008e88:	4649      	mov	r1, r9
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7fe fce0 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008e90:	4629      	mov	r1, r5
 8008e92:	4620      	mov	r0, r4
 8008e94:	f7fe fcdc 	bl	8007850 <test_printf>
#endif
  }
  test_end_step(7);

  /* [12.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8008e98:	2308      	movs	r3, #8
  test_printf("%s", msgp);
 8008e9a:	491a      	ldr	r1, [pc, #104]	; (8008f04 <rt_test_012_012_execute.lto_priv.0+0x144>)
 8008e9c:	603b      	str	r3, [r7, #0]
 8008e9e:	4640      	mov	r0, r8
 8008ea0:	f7fe fcd6 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008ea4:	2114      	movs	r1, #20
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7fe fcd2 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008eac:	4629      	mov	r1, r5
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f7fe fcce 	bl	8007850 <test_printf>
#endif
  }
  test_end_step(8);

  /* [12.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8008eb4:	2309      	movs	r3, #9
  test_printf("%s", msgp);
 8008eb6:	4914      	ldr	r1, [pc, #80]	; (8008f08 <rt_test_012_012_execute.lto_priv.0+0x148>)
 8008eb8:	603b      	str	r3, [r7, #0]
 8008eba:	4640      	mov	r0, r8
 8008ebc:	f7fe fcc8 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008ec0:	2128      	movs	r1, #40	; 0x28
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f7fe fcc4 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008ec8:	4629      	mov	r1, r5
 8008eca:	4620      	mov	r0, r4
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
#endif
  }
  test_end_step(9);
}
 8008ecc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ed0:	f7fe bcbe 	b.w	8007850 <test_printf>
 8008ed4:	08015558 	.word	0x08015558
 8008ed8:	20000b74 	.word	0x20000b74
 8008edc:	08015650 	.word	0x08015650
 8008ee0:	08015dc8 	.word	0x08015dc8
 8008ee4:	0801dcbc 	.word	0x0801dcbc
 8008ee8:	08015db8 	.word	0x08015db8
 8008eec:	08015dd0 	.word	0x08015dd0
 8008ef0:	08015de0 	.word	0x08015de0
 8008ef4:	08015df0 	.word	0x08015df0
 8008ef8:	08015e00 	.word	0x08015e00
 8008efc:	08015e10 	.word	0x08015e10
 8008f00:	08015e20 	.word	0x08015e20
 8008f04:	08015e30 	.word	0x08015e30
 8008f08:	08015e40 	.word	0x08015e40
 8008f0c:	00000000 	.word	0x00000000

08008f10 <oslib_test_001_002_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.2.1] Prints the version string.
 * .
 */

static void oslib_test_001_002_execute(void) {
 8008f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f14:	4c23      	ldr	r4, [pc, #140]	; (8008fa4 <oslib_test_001_002_execute.lto_priv.0+0x94>)

  /* [1.2.1] Prints the version string.*/
  test_set_step(1);
 8008f16:	4b24      	ldr	r3, [pc, #144]	; (8008fa8 <oslib_test_001_002_execute.lto_priv.0+0x98>)
  test_printf("%s", msgp);
 8008f18:	4d24      	ldr	r5, [pc, #144]	; (8008fac <oslib_test_001_002_execute.lto_priv.0+0x9c>)
  test_printf("%u", n);
 8008f1a:	4f25      	ldr	r7, [pc, #148]	; (8008fb0 <oslib_test_001_002_execute.lto_priv.0+0xa0>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008f1c:	4925      	ldr	r1, [pc, #148]	; (8008fb4 <oslib_test_001_002_execute.lto_priv.0+0xa4>)
 8008f1e:	4e26      	ldr	r6, [pc, #152]	; (8008fb8 <oslib_test_001_002_execute.lto_priv.0+0xa8>)
 8008f20:	f04f 0801 	mov.w	r8, #1
 8008f24:	4620      	mov	r0, r4
 8008f26:	f8c3 8000 	str.w	r8, [r3]
 8008f2a:	f7fe fc91 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008f2e:	4923      	ldr	r1, [pc, #140]	; (8008fbc <oslib_test_001_002_execute.lto_priv.0+0xac>)
 8008f30:	4628      	mov	r0, r5
 8008f32:	f7fe fc8d 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008f36:	4641      	mov	r1, r8
 8008f38:	4638      	mov	r0, r7
 8008f3a:	f7fe fc89 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008f3e:	4631      	mov	r1, r6
 8008f40:	4620      	mov	r0, r4
 8008f42:	f7fe fc85 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008f46:	491e      	ldr	r1, [pc, #120]	; (8008fc0 <oslib_test_001_002_execute.lto_priv.0+0xb0>)
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f7fe fc81 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008f4e:	491d      	ldr	r1, [pc, #116]	; (8008fc4 <oslib_test_001_002_execute.lto_priv.0+0xb4>)
 8008f50:	4620      	mov	r0, r4
 8008f52:	f7fe fc7d 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008f56:	491c      	ldr	r1, [pc, #112]	; (8008fc8 <oslib_test_001_002_execute.lto_priv.0+0xb8>)
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f7fe fc79 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008f5e:	4641      	mov	r1, r8
 8008f60:	4638      	mov	r0, r7
 8008f62:	f7fe fc75 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008f66:	4631      	mov	r1, r6
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f7fe fc71 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008f6e:	4917      	ldr	r1, [pc, #92]	; (8008fcc <oslib_test_001_002_execute.lto_priv.0+0xbc>)
 8008f70:	4628      	mov	r0, r5
 8008f72:	f7fe fc6d 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008f76:	2103      	movs	r1, #3
 8008f78:	4638      	mov	r0, r7
 8008f7a:	f7fe fc69 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008f7e:	4631      	mov	r1, r6
 8008f80:	4620      	mov	r0, r4
 8008f82:	f7fe fc65 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8008f86:	4912      	ldr	r1, [pc, #72]	; (8008fd0 <oslib_test_001_002_execute.lto_priv.0+0xc0>)
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f7fe fc61 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008f8e:	4641      	mov	r1, r8
 8008f90:	4638      	mov	r0, r7
 8008f92:	f7fe fc5d 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008f96:	4631      	mov	r1, r6
 8008f98:	4620      	mov	r0, r4
    test_print("--- Patch Number:                       ");
    test_printn(CH_OSLIB_PATCH);
    test_println("");
  }
  test_end_step(1);
}
 8008f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9e:	f7fe bc57 	b.w	8007850 <test_printf>
 8008fa2:	bf00      	nop
 8008fa4:	0801dcbc 	.word	0x0801dcbc
 8008fa8:	20000b74 	.word	0x20000b74
 8008fac:	08015558 	.word	0x08015558
 8008fb0:	08015650 	.word	0x08015650
 8008fb4:	08015e50 	.word	0x08015e50
 8008fb8:	0801dcd4 	.word	0x0801dcd4
 8008fbc:	080156e0 	.word	0x080156e0
 8008fc0:	0801570c 	.word	0x0801570c
 8008fc4:	08015e84 	.word	0x08015e84
 8008fc8:	08015740 	.word	0x08015740
 8008fcc:	0801576c 	.word	0x0801576c
 8008fd0:	08015798 	.word	0x08015798
	...

08008fe0 <oslib_test_001_003_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void oslib_test_001_003_execute(void) {
 8008fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_printf("%s", msgp);
 8008fe4:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8009178 <oslib_test_001_003_execute.lto_priv.0+0x198>

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8008fe8:	4b64      	ldr	r3, [pc, #400]	; (800917c <oslib_test_001_003_execute.lto_priv.0+0x19c>)
  test_printf("%u", n);
 8008fea:	4e65      	ldr	r6, [pc, #404]	; (8009180 <oslib_test_001_003_execute.lto_priv.0+0x1a0>)
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8008fec:	4d65      	ldr	r5, [pc, #404]	; (8009184 <oslib_test_001_003_execute.lto_priv.0+0x1a4>)
 8008fee:	4c66      	ldr	r4, [pc, #408]	; (8009188 <oslib_test_001_003_execute.lto_priv.0+0x1a8>)
  test_printf("%s", msgp);
 8008ff0:	4966      	ldr	r1, [pc, #408]	; (800918c <oslib_test_001_003_execute.lto_priv.0+0x1ac>)
 8008ff2:	2701      	movs	r7, #1
 8008ff4:	4640      	mov	r0, r8
 8008ff6:	601f      	str	r7, [r3, #0]
 8008ff8:	f7fe fc2a 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8008ffc:	4639      	mov	r1, r7
 8008ffe:	4630      	mov	r0, r6
 8009000:	f7fe fc26 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009004:	4629      	mov	r1, r5
 8009006:	4620      	mov	r0, r4
 8009008:	f7fe fc22 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 800900c:	4960      	ldr	r1, [pc, #384]	; (8009190 <oslib_test_001_003_execute.lto_priv.0+0x1b0>)
 800900e:	4640      	mov	r0, r8
 8009010:	f7fe fc1e 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8009014:	4639      	mov	r1, r7
 8009016:	4630      	mov	r0, r6
 8009018:	f7fe fc1a 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800901c:	4629      	mov	r1, r5
 800901e:	4620      	mov	r0, r4
 8009020:	f7fe fc16 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8009024:	495b      	ldr	r1, [pc, #364]	; (8009194 <oslib_test_001_003_execute.lto_priv.0+0x1b4>)
 8009026:	4640      	mov	r0, r8
 8009028:	f7fe fc12 	bl	8007850 <test_printf>
  test_printf("%u", n);
 800902c:	4639      	mov	r1, r7
 800902e:	4630      	mov	r0, r6
 8009030:	f7fe fc0e 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009034:	4629      	mov	r1, r5
 8009036:	4620      	mov	r0, r4
 8009038:	f7fe fc0a 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 800903c:	4956      	ldr	r1, [pc, #344]	; (8009198 <oslib_test_001_003_execute.lto_priv.0+0x1b8>)
 800903e:	4640      	mov	r0, r8
 8009040:	f7fe fc06 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8009044:	4639      	mov	r1, r7
 8009046:	4630      	mov	r0, r6
 8009048:	f7fe fc02 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800904c:	4629      	mov	r1, r5
 800904e:	4620      	mov	r0, r4
 8009050:	f7fe fbfe 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8009054:	4951      	ldr	r1, [pc, #324]	; (800919c <oslib_test_001_003_execute.lto_priv.0+0x1bc>)
 8009056:	4640      	mov	r0, r8
 8009058:	f7fe fbfa 	bl	8007850 <test_printf>
  test_printf("%u", n);
 800905c:	4639      	mov	r1, r7
 800905e:	4630      	mov	r0, r6
 8009060:	f7fe fbf6 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009064:	4629      	mov	r1, r5
 8009066:	4620      	mov	r0, r4
 8009068:	f7fe fbf2 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 800906c:	494c      	ldr	r1, [pc, #304]	; (80091a0 <oslib_test_001_003_execute.lto_priv.0+0x1c0>)
 800906e:	4640      	mov	r0, r8
 8009070:	f7fe fbee 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8009074:	4639      	mov	r1, r7
 8009076:	4630      	mov	r0, r6
 8009078:	f7fe fbea 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800907c:	4629      	mov	r1, r5
 800907e:	4620      	mov	r0, r4
 8009080:	f7fe fbe6 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8009084:	4947      	ldr	r1, [pc, #284]	; (80091a4 <oslib_test_001_003_execute.lto_priv.0+0x1c4>)
 8009086:	4640      	mov	r0, r8
 8009088:	f7fe fbe2 	bl	8007850 <test_printf>
  test_printf("%u", n);
 800908c:	4639      	mov	r1, r7
 800908e:	4630      	mov	r0, r6
 8009090:	f7fe fbde 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009094:	4629      	mov	r1, r5
 8009096:	4620      	mov	r0, r4
 8009098:	f7fe fbda 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 800909c:	4942      	ldr	r1, [pc, #264]	; (80091a8 <oslib_test_001_003_execute.lto_priv.0+0x1c8>)
 800909e:	4640      	mov	r0, r8
 80090a0:	f7fe fbd6 	bl	8007850 <test_printf>
  test_printf("%u", n);
 80090a4:	4639      	mov	r1, r7
 80090a6:	4630      	mov	r0, r6
 80090a8:	f7fe fbd2 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80090ac:	4629      	mov	r1, r5
 80090ae:	4620      	mov	r0, r4
 80090b0:	f7fe fbce 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 80090b4:	493d      	ldr	r1, [pc, #244]	; (80091ac <oslib_test_001_003_execute.lto_priv.0+0x1cc>)
 80090b6:	4640      	mov	r0, r8
 80090b8:	f7fe fbca 	bl	8007850 <test_printf>
  test_printf("%u", n);
 80090bc:	4639      	mov	r1, r7
 80090be:	4630      	mov	r0, r6
 80090c0:	f7fe fbc6 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80090c4:	4629      	mov	r1, r5
 80090c6:	4620      	mov	r0, r4
 80090c8:	f7fe fbc2 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 80090cc:	4938      	ldr	r1, [pc, #224]	; (80091b0 <oslib_test_001_003_execute.lto_priv.0+0x1d0>)
 80090ce:	4640      	mov	r0, r8
 80090d0:	f7fe fbbe 	bl	8007850 <test_printf>
  test_printf("%u", n);
 80090d4:	2108      	movs	r1, #8
 80090d6:	4630      	mov	r0, r6
 80090d8:	f7fe fbba 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80090dc:	4629      	mov	r1, r5
 80090de:	4620      	mov	r0, r4
 80090e0:	f7fe fbb6 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 80090e4:	4933      	ldr	r1, [pc, #204]	; (80091b4 <oslib_test_001_003_execute.lto_priv.0+0x1d4>)
 80090e6:	4640      	mov	r0, r8
 80090e8:	f7fe fbb2 	bl	8007850 <test_printf>
  test_printf("%u", n);
 80090ec:	4639      	mov	r1, r7
 80090ee:	4630      	mov	r0, r6
 80090f0:	f7fe fbae 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 80090f4:	4629      	mov	r1, r5
 80090f6:	4620      	mov	r0, r4
 80090f8:	f7fe fbaa 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 80090fc:	492e      	ldr	r1, [pc, #184]	; (80091b8 <oslib_test_001_003_execute.lto_priv.0+0x1d8>)
 80090fe:	4640      	mov	r0, r8
 8009100:	f7fe fba6 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8009104:	4639      	mov	r1, r7
 8009106:	4630      	mov	r0, r6
 8009108:	f7fe fba2 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800910c:	4629      	mov	r1, r5
 800910e:	4620      	mov	r0, r4
 8009110:	f7fe fb9e 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8009114:	4929      	ldr	r1, [pc, #164]	; (80091bc <oslib_test_001_003_execute.lto_priv.0+0x1dc>)
 8009116:	4640      	mov	r0, r8
 8009118:	f7fe fb9a 	bl	8007850 <test_printf>
  test_printf("%u", n);
 800911c:	4639      	mov	r1, r7
 800911e:	4630      	mov	r0, r6
 8009120:	f7fe fb96 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009124:	4629      	mov	r1, r5
 8009126:	4620      	mov	r0, r4
 8009128:	f7fe fb92 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 800912c:	4924      	ldr	r1, [pc, #144]	; (80091c0 <oslib_test_001_003_execute.lto_priv.0+0x1e0>)
 800912e:	4640      	mov	r0, r8
 8009130:	f7fe fb8e 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8009134:	4639      	mov	r1, r7
 8009136:	4630      	mov	r0, r6
 8009138:	f7fe fb8a 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800913c:	4629      	mov	r1, r5
 800913e:	4620      	mov	r0, r4
 8009140:	f7fe fb86 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 8009144:	491f      	ldr	r1, [pc, #124]	; (80091c4 <oslib_test_001_003_execute.lto_priv.0+0x1e4>)
 8009146:	4640      	mov	r0, r8
 8009148:	f7fe fb82 	bl	8007850 <test_printf>
  test_printf("%u", n);
 800914c:	4639      	mov	r1, r7
 800914e:	4630      	mov	r0, r6
 8009150:	f7fe fb7e 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 8009154:	4629      	mov	r1, r5
 8009156:	4620      	mov	r0, r4
 8009158:	f7fe fb7a 	bl	8007850 <test_printf>
  test_printf("%s", msgp);
 800915c:	491a      	ldr	r1, [pc, #104]	; (80091c8 <oslib_test_001_003_execute.lto_priv.0+0x1e8>)
 800915e:	4640      	mov	r0, r8
 8009160:	f7fe fb76 	bl	8007850 <test_printf>
  test_printf("%u", n);
 8009164:	4639      	mov	r1, r7
 8009166:	4630      	mov	r0, r6
 8009168:	f7fe fb72 	bl	8007850 <test_printf>
  test_printf("%s" TEST_CFG_EOL_STRING, msgp);
 800916c:	4629      	mov	r1, r5
 800916e:	4620      	mov	r0, r4
    test_print("--- CH_CFG_FACTORY_PIPES:               ");
    test_printn(CH_CFG_FACTORY_PIPES);
    test_println("");
  }
  test_end_step(1);
}
 8009170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009174:	f7fe bb6c 	b.w	8007850 <test_printf>
 8009178:	08015558 	.word	0x08015558
 800917c:	20000b74 	.word	0x20000b74
 8009180:	08015650 	.word	0x08015650
 8009184:	0801dcd4 	.word	0x0801dcd4
 8009188:	0801dcbc 	.word	0x0801dcbc
 800918c:	08015e8c 	.word	0x08015e8c
 8009190:	08015eb8 	.word	0x08015eb8
 8009194:	08015ee4 	.word	0x08015ee4
 8009198:	08015f10 	.word	0x08015f10
 800919c:	08015f3c 	.word	0x08015f3c
 80091a0:	08015f68 	.word	0x08015f68
 80091a4:	08015f94 	.word	0x08015f94
 80091a8:	08015fc0 	.word	0x08015fc0
 80091ac:	08015fec 	.word	0x08015fec
 80091b0:	08016018 	.word	0x08016018
 80091b4:	08016044 	.word	0x08016044
 80091b8:	08016070 	.word	0x08016070
 80091bc:	0801609c 	.word	0x0801609c
 80091c0:	080160c8 	.word	0x080160c8
 80091c4:	080160f4 	.word	0x080160f4
 80091c8:	08016120 	.word	0x08016120
 80091cc:	00000000 	.word	0x00000000

080091d0 <modp_poly_rec_res>:
 * solve_NTRU_binary_depth1().
 */
static void
modp_poly_rec_res(uint32_t *f, unsigned logn,
	uint32_t p, uint32_t p0i, uint32_t R2)
{
 80091d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t hn, u;

	hn = (size_t)1 << (logn - 1);
 80091d4:	3901      	subs	r1, #1
 80091d6:	f04f 0e04 	mov.w	lr, #4
 80091da:	f1a0 0c04 	sub.w	ip, r0, #4
 80091de:	fa0e fe01 	lsl.w	lr, lr, r1
{
 80091e2:	9c06      	ldr	r4, [sp, #24]
	for (u = 0; u < hn; u ++) {
 80091e4:	f1c0 0508 	rsb	r5, r0, #8
 80091e8:	44e6      	add	lr, ip
 80091ea:	f1c0 000c 	rsb	r0, r0, #12
	z = (uint64_t)a * (uint64_t)b;
 80091ee:	f855 101c 	ldr.w	r1, [r5, ip, lsl #1]
 80091f2:	f850 601c 	ldr.w	r6, [r0, ip, lsl #1]
 80091f6:	fba1 6806 	umull	r6, r8, r1, r6
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 80091fa:	fba6 1703 	umull	r1, r7, r6, r3
 80091fe:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009202:	fba1 1702 	umull	r1, r7, r1, r2
	d = (uint32_t)((z + w) >> 31) - p;
 8009206:	1989      	adds	r1, r1, r6
 8009208:	eb47 0608 	adc.w	r6, r7, r8
 800920c:	0fc9      	lsrs	r1, r1, #31
 800920e:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8009212:	1a89      	subs	r1, r1, r2
	d += p & -(d >> 31);
 8009214:	ea02 76e1 	and.w	r6, r2, r1, asr #31
 8009218:	4431      	add	r1, r6
	z = (uint64_t)a * (uint64_t)b;
 800921a:	fba1 1804 	umull	r1, r8, r1, r4
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800921e:	fba1 6703 	umull	r6, r7, r1, r3
 8009222:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8009226:	fba6 6702 	umull	r6, r7, r6, r2
	d = (uint32_t)((z + w) >> 31) - p;
 800922a:	1871      	adds	r1, r6, r1
 800922c:	eb47 0608 	adc.w	r6, r7, r8
 8009230:	0fc9      	lsrs	r1, r1, #31
 8009232:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8009236:	1a89      	subs	r1, r1, r2
	d += p & -(d >> 31);
 8009238:	ea02 76e1 	and.w	r6, r2, r1, asr #31
 800923c:	4431      	add	r1, r6
		uint32_t w0, w1;

		w0 = f[(u << 1) + 0];
		w1 = f[(u << 1) + 1];
		f[u] = modp_montymul(modp_montymul(w0, w1, p, p0i), R2, p, p0i);
 800923e:	f84c 1f04 	str.w	r1, [ip, #4]!
	for (u = 0; u < hn; u ++) {
 8009242:	45e6      	cmp	lr, ip
 8009244:	d1d3      	bne.n	80091ee <modp_poly_rec_res+0x1e>
	}
}
 8009246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800924a:	bf00      	nop
 800924c:	0000      	movs	r0, r0
	...

08009250 <zint_finish_mod>:
	 * First pass: compare a (assumed nonnegative) with m. Note that
	 * if the top word uses 32 bits, subtracting m must yield a
	 * value less than 2^31 since a < 2*m.
	 */
	cc = 0;
	for (u = 0; u < len; u ++) {
 8009250:	b349      	cbz	r1, 80092a6 <zint_finish_mod+0x56>
{
 8009252:	b570      	push	{r4, r5, r6, lr}
 8009254:	3804      	subs	r0, #4
 8009256:	f1a2 0e04 	sub.w	lr, r2, #4
 800925a:	461c      	mov	r4, r3
 800925c:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
	for (u = 0; u < len; u ++) {
 8009260:	4675      	mov	r5, lr
 8009262:	4603      	mov	r3, r0
	cc = 0;
 8009264:	2100      	movs	r1, #0
		cc = (a[u] - m[u] - cc) >> 31;
 8009266:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800926a:	f855 6f04 	ldr.w	r6, [r5, #4]!
 800926e:	1a52      	subs	r2, r2, r1
 8009270:	1b92      	subs	r2, r2, r6
	for (u = 0; u < len; u ++) {
 8009272:	459c      	cmp	ip, r3
		cc = (a[u] - m[u] - cc) >> 31;
 8009274:	ea4f 71d2 	mov.w	r1, r2, lsr #31
	for (u = 0; u < len; u ++) {
 8009278:	d1f5      	bne.n	8009266 <zint_finish_mod+0x16>
	 * In the loop below, we conditionally subtract either m or -m
	 * from a. Word xm is a word of m (if neg = 0) or -m (if neg = 1);
	 * but if neg = 0 and cc = 1, then ym = 0 and it forces mw to 0.
	 */
	xm = -neg >> 1;
	ym = -(neg | (1 - cc));
 800927a:	f1c1 0101 	rsb	r1, r1, #1
 800927e:	4321      	orrs	r1, r4
	xm = -neg >> 1;
 8009280:	4265      	negs	r5, r4
	ym = -(neg | (1 - cc));
 8009282:	4249      	negs	r1, r1
	xm = -neg >> 1;
 8009284:	086d      	lsrs	r5, r5, #1
	cc = neg;
	for (u = 0; u < len; u ++) {
		uint32_t aw, mw;

		aw = a[u];
		mw = (m[u] ^ xm) & ym;
 8009286:	f85e 2f04 	ldr.w	r2, [lr, #4]!
 800928a:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800928e:	406a      	eors	r2, r5
 8009290:	1b1b      	subs	r3, r3, r4
 8009292:	400a      	ands	r2, r1
		aw = aw - mw - cc;
 8009294:	1a9b      	subs	r3, r3, r2
		a[u] = aw & 0x7FFFFFFF;
 8009296:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
	for (u = 0; u < len; u ++) {
 800929a:	4584      	cmp	ip, r0
		a[u] = aw & 0x7FFFFFFF;
 800929c:	6002      	str	r2, [r0, #0]
		cc = aw >> 31;
 800929e:	ea4f 74d3 	mov.w	r4, r3, lsr #31
	for (u = 0; u < len; u ++) {
 80092a2:	d1f0      	bne.n	8009286 <zint_finish_mod+0x36>
	}
}
 80092a4:	bd70      	pop	{r4, r5, r6, pc}
 80092a6:	4770      	bx	lr
	...

080092b0 <zint_co_reduce_mod>:
 * (a*ya+b*yb)/(2^31) mod m. Modulus m must be odd; m0i = -1/m[0] mod 2^31.
 */
static void
zint_co_reduce_mod(uint32_t *a, uint32_t *b, const uint32_t *m, size_t len,
	uint32_t m0i, int64_t xa, int64_t xb, int64_t ya, int64_t yb)
{
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	b08f      	sub	sp, #60	; 0x3c
 80092b6:	4683      	mov	fp, r0
	/*
	 * These are actually four combined Montgomery multiplications.
	 */
	cca = 0;
	ccb = 0;
	fa = ((a[0] * (uint32_t)xa + b[0] * (uint32_t)xb) * m0i) & 0x7FFFFFFF;
 80092b8:	680c      	ldr	r4, [r1, #0]
{
 80092ba:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80092bc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80092be:	910c      	str	r1, [sp, #48]	; 0x30
 80092c0:	468a      	mov	sl, r1
	fa = ((a[0] * (uint32_t)xa + b[0] * (uint32_t)xb) * m0i) & 0x7FFFFFFF;
 80092c2:	f8db 1000 	ldr.w	r1, [fp]
{
 80092c6:	900b      	str	r0, [sp, #44]	; 0x2c
 80092c8:	4696      	mov	lr, r2
 80092ca:	9818      	ldr	r0, [sp, #96]	; 0x60
 80092cc:	920d      	str	r2, [sp, #52]	; 0x34
	fa = ((a[0] * (uint32_t)xa + b[0] * (uint32_t)xb) * m0i) & 0x7FFFFFFF;
 80092ce:	fb05 f204 	mul.w	r2, r5, r4
 80092d2:	fb07 2201 	mla	r2, r7, r1, r2
{
 80092d6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80092d8:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
 80092dc:	9505      	str	r5, [sp, #20]
	fa = ((a[0] * (uint32_t)xa + b[0] * (uint32_t)xb) * m0i) & 0x7FFFFFFF;
 80092de:	fb00 f202 	mul.w	r2, r0, r2
 80092e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80092e6:	9201      	str	r2, [sp, #4]
	fb = ((a[0] * (uint32_t)ya + b[0] * (uint32_t)yb) * m0i) & 0x7FFFFFFF;
 80092e8:	fb06 f204 	mul.w	r2, r6, r4
 80092ec:	fb0c 2201 	mla	r2, ip, r1, r2
 80092f0:	fb00 f202 	mul.w	r2, r0, r2
 80092f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80092f8:	9202      	str	r2, [sp, #8]
{
 80092fa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80092fc:	9204      	str	r2, [sp, #16]
 80092fe:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009300:	9206      	str	r2, [sp, #24]
 8009302:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009304:	9208      	str	r2, [sp, #32]
 8009306:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009308:	9609      	str	r6, [sp, #36]	; 0x24
 800930a:	9703      	str	r7, [sp, #12]
 800930c:	f8cd c01c 	str.w	ip, [sp, #28]
 8009310:	920a      	str	r2, [sp, #40]	; 0x28
	for (u = 0; u < len; u ++) {
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d06e      	beq.n	80093f6 <zint_co_reduce_mod+0x146>
	ccb = 0;
 8009318:	2200      	movs	r2, #0
 800931a:	f1ae 0804 	sub.w	r8, lr, #4
 800931e:	4615      	mov	r5, r2
	cca = 0;
 8009320:	4694      	mov	ip, r2
 8009322:	4617      	mov	r7, r2
	for (u = 0; u < len; u ++) {
 8009324:	4691      	mov	r9, r2
 8009326:	e003      	b.n	8009330 <zint_co_reduce_mod+0x80>
		uint32_t wa, wb;
		uint64_t za, zb;

		wa = a[u];
 8009328:	f85b 1f04 	ldr.w	r1, [fp, #4]!
		wb = b[u];
 800932c:	f85a 4f04 	ldr.w	r4, [sl, #4]!
		za = wa * (uint64_t)xa + wb * (uint64_t)xb
 8009330:	9b05      	ldr	r3, [sp, #20]
 8009332:	9806      	ldr	r0, [sp, #24]
			+ m[u] * (uint64_t)fa + (uint64_t)cca;
 8009334:	f858 ef04 	ldr.w	lr, [r8, #4]!
		za = wa * (uint64_t)xa + wb * (uint64_t)xb
 8009338:	fba4 6303 	umull	r6, r3, r4, r3
			+ m[u] * (uint64_t)fa + (uint64_t)cca;
 800933c:	eb16 060c 	adds.w	r6, r6, ip
		za = wa * (uint64_t)xa + wb * (uint64_t)xb
 8009340:	fb04 3c00 	mla	ip, r4, r0, r3
 8009344:	9b03      	ldr	r3, [sp, #12]
 8009346:	fba1 0303 	umull	r0, r3, r1, r3
			+ m[u] * (uint64_t)fa + (uint64_t)cca;
 800934a:	eb4c 0c07 	adc.w	ip, ip, r7
 800934e:	1830      	adds	r0, r6, r0
		za = wa * (uint64_t)xa + wb * (uint64_t)xb
 8009350:	9e04      	ldr	r6, [sp, #16]
 8009352:	fb01 3306 	mla	r3, r1, r6, r3
			+ m[u] * (uint64_t)fa + (uint64_t)cca;
 8009356:	eb43 070c 	adc.w	r7, r3, ip
 800935a:	9b01      	ldr	r3, [sp, #4]
 800935c:	fbee 0703 	umlal	r0, r7, lr, r3
		zb = wa * (uint64_t)ya + wb * (uint64_t)yb
 8009360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009362:	fba4 3603 	umull	r3, r6, r4, r3
			+ m[u] * (uint64_t)fb + (uint64_t)ccb;
 8009366:	189b      	adds	r3, r3, r2
		zb = wa * (uint64_t)ya + wb * (uint64_t)yb
 8009368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800936a:	fb04 6602 	mla	r6, r4, r2, r6
 800936e:	9a07      	ldr	r2, [sp, #28]
 8009370:	fba1 4202 	umull	r4, r2, r1, r2
			+ m[u] * (uint64_t)fb + (uint64_t)ccb;
 8009374:	eb46 0605 	adc.w	r6, r6, r5
 8009378:	191b      	adds	r3, r3, r4
		zb = wa * (uint64_t)ya + wb * (uint64_t)yb
 800937a:	9c08      	ldr	r4, [sp, #32]
 800937c:	fb01 2204 	mla	r2, r1, r4, r2
			+ m[u] * (uint64_t)fb + (uint64_t)ccb;
 8009380:	eb42 0506 	adc.w	r5, r2, r6
 8009384:	9a02      	ldr	r2, [sp, #8]
		if (u > 0) {
			a[u - 1] = (uint32_t)za & 0x7FFFFFFF;
			b[u - 1] = (uint32_t)zb & 0x7FFFFFFF;
		}
		cca = *(int64_t *)&za >> 31;
 8009386:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
 800938a:	ea4c 0c47 	orr.w	ip, ip, r7, lsl #1
			a[u - 1] = (uint32_t)za & 0x7FFFFFFF;
 800938e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
		cca = *(int64_t *)&za >> 31;
 8009392:	17ff      	asrs	r7, r7, #31
			+ m[u] * (uint64_t)fb + (uint64_t)ccb;
 8009394:	fbee 3502 	umlal	r3, r5, lr, r2
		if (u > 0) {
 8009398:	f1b9 0f00 	cmp.w	r9, #0
 800939c:	d005      	beq.n	80093aa <zint_co_reduce_mod+0xfa>
			b[u - 1] = (uint32_t)zb & 0x7FFFFFFF;
 800939e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
			a[u - 1] = (uint32_t)za & 0x7FFFFFFF;
 80093a2:	f84b 0c04 	str.w	r0, [fp, #-4]
			b[u - 1] = (uint32_t)zb & 0x7FFFFFFF;
 80093a6:	f84a 2c04 	str.w	r2, [sl, #-4]
		ccb = *(int64_t *)&zb >> 31;
 80093aa:	0fda      	lsrs	r2, r3, #31
	for (u = 0; u < len; u ++) {
 80093ac:	9b00      	ldr	r3, [sp, #0]
 80093ae:	f109 0901 	add.w	r9, r9, #1
 80093b2:	454b      	cmp	r3, r9
		ccb = *(int64_t *)&zb >> 31;
 80093b4:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80093b8:	ea4f 75e5 	mov.w	r5, r5, asr #31
	for (u = 0; u < len; u ++) {
 80093bc:	d1b4      	bne.n	8009328 <zint_co_reduce_mod+0x78>
	}
	a[len - 1] = (uint32_t)cca;
 80093be:	4661      	mov	r1, ip
	 *   -m <= b < 2*m
	 * (this is a case of Montgomery reduction)
	 * The top words of 'a' and 'b' may have a 32-th bit set.
	 * We want to add or subtract the modulus, as required.
	 */
	zint_finish_mod(a, len, m, (uint32_t)((uint64_t)cca >> 63));
 80093c0:	0ffb      	lsrs	r3, r7, #31
	zint_finish_mod(b, len, m, (uint32_t)((uint64_t)ccb >> 63));
 80093c2:	0fed      	lsrs	r5, r5, #31
	a[len - 1] = (uint32_t)cca;
 80093c4:	9c00      	ldr	r4, [sp, #0]
 80093c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	b[len - 1] = (uint32_t)ccb;
 80093c8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	a[len - 1] = (uint32_t)cca;
 80093ca:	f104 4080 	add.w	r0, r4, #1073741824	; 0x40000000
 80093ce:	3801      	subs	r0, #1
 80093d0:	f846 1020 	str.w	r1, [r6, r0, lsl #2]
	b[len - 1] = (uint32_t)ccb;
 80093d4:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
	zint_finish_mod(a, len, m, (uint32_t)((uint64_t)cca >> 63));
 80093d8:	4630      	mov	r0, r6
 80093da:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80093dc:	4621      	mov	r1, r4
 80093de:	4632      	mov	r2, r6
 80093e0:	f7ff ff36 	bl	8009250 <zint_finish_mod>
	zint_finish_mod(b, len, m, (uint32_t)((uint64_t)ccb >> 63));
 80093e4:	462b      	mov	r3, r5
 80093e6:	4632      	mov	r2, r6
 80093e8:	4621      	mov	r1, r4
 80093ea:	4638      	mov	r0, r7
}
 80093ec:	b00f      	add	sp, #60	; 0x3c
 80093ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	zint_finish_mod(b, len, m, (uint32_t)((uint64_t)ccb >> 63));
 80093f2:	f7ff bf2d 	b.w	8009250 <zint_finish_mod>
	for (u = 0; u < len; u ++) {
 80093f6:	9900      	ldr	r1, [sp, #0]
 80093f8:	460d      	mov	r5, r1
 80093fa:	460b      	mov	r3, r1
 80093fc:	460a      	mov	r2, r1
 80093fe:	e7e1      	b.n	80093c4 <zint_co_reduce_mod+0x114>

08009400 <poly_sub_scaled>:
 */
static void
poly_sub_scaled(uint32_t *restrict F, size_t Flen, size_t Fstride,
	const uint32_t *restrict f, size_t flen, size_t fstride,
	const int32_t *restrict k, uint32_t sch, uint32_t scl, unsigned logn)
{
 8009400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009404:	b093      	sub	sp, #76	; 0x4c
 8009406:	460d      	mov	r5, r1
 8009408:	9311      	str	r3, [sp, #68]	; 0x44
 800940a:	0093      	lsls	r3, r2, #2
 800940c:	9307      	str	r3, [sp, #28]
 800940e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009410:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009412:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8009416:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8009418:	9109      	str	r1, [sp, #36]	; 0x24
				x = F;
				kf = -kf;
			} else {
				x += Fstride;
			}
			y += fstride;
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	9305      	str	r3, [sp, #20]
{
 800941e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009420:	900d      	str	r0, [sp, #52]	; 0x34
 8009422:	3b04      	subs	r3, #4
	ysign = -(y[ylen - 1] >> 30) >> 1;
 8009424:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8009428:	930e      	str	r3, [sp, #56]	; 0x38
	n = MKN(logn);
 800942a:	2301      	movs	r3, #1
 800942c:	fa03 f402 	lsl.w	r4, r3, r2
	ysign = -(y[ylen - 1] >> 30) >> 1;
 8009430:	eb0a 0301 	add.w	r3, sl, r1
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4431      	add	r1, r6
 8009438:	9308      	str	r3, [sp, #32]
 800943a:	008b      	lsls	r3, r1, #2
 800943c:	930a      	str	r3, [sp, #40]	; 0x28
 800943e:	2302      	movs	r3, #2
 8009440:	4093      	lsls	r3, r2
 8009442:	930f      	str	r3, [sp, #60]	; 0x3c
			if (u + v == n - 1) {
 8009444:	1e63      	subs	r3, r4, #1
 8009446:	9306      	str	r3, [sp, #24]
		tw = wy >> (31 - scl);
 8009448:	9b20      	ldr	r3, [sp, #128]	; 0x80
	n = MKN(logn);
 800944a:	9410      	str	r4, [sp, #64]	; 0x40
		tw = wy >> (31 - scl);
 800944c:	f1c3 031f 	rsb	r3, r3, #31
 8009450:	900c      	str	r0, [sp, #48]	; 0x30
			if (u + v == n - 1) {
 8009452:	9404      	str	r4, [sp, #16]
		tw = wy >> (31 - scl);
 8009454:	930b      	str	r3, [sp, #44]	; 0x2c
 8009456:	eba5 0b06 	sub.w	fp, r5, r6
		kf = -k[u];
 800945a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800945c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800945e:	f853 7f04 	ldr.w	r7, [r3, #4]!
 8009462:	930e      	str	r3, [sp, #56]	; 0x38
 8009464:	9b04      	ldr	r3, [sp, #16]
		y = f;
 8009466:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800946a:	1a9b      	subs	r3, r3, r2
 800946c:	9302      	str	r3, [sp, #8]
		x = F + u * Fstride;
 800946e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009470:	9303      	str	r3, [sp, #12]
		kf = -k[u];
 8009472:	427f      	negs	r7, r7
	if (ylen == 0) {
 8009474:	f1ba 0f00 	cmp.w	sl, #0
 8009478:	d040      	beq.n	80094fc <poly_sub_scaled+0xfc>
	ysign = -(y[ylen - 1] >> 30) >> 1;
 800947a:	9b08      	ldr	r3, [sp, #32]
	for (u = sch; u < xlen; u ++) {
 800947c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	ysign = -(y[ylen - 1] >> 30) >> 1;
 800947e:	f859 3003 	ldr.w	r3, [r9, r3]
 8009482:	ea4f 7e93 	mov.w	lr, r3, lsr #30
	for (u = sch; u < xlen; u ++) {
 8009486:	9b09      	ldr	r3, [sp, #36]	; 0x24
	ysign = -(y[ylen - 1] >> 30) >> 1;
 8009488:	f1ce 0e00 	rsb	lr, lr, #0
	for (u = sch; u < xlen; u ++) {
 800948c:	4293      	cmp	r3, r2
	ysign = -(y[ylen - 1] >> 30) >> 1;
 800948e:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (u = sch; u < xlen; u ++) {
 8009492:	d933      	bls.n	80094fc <poly_sub_scaled+0xfc>
 8009494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009496:	9b03      	ldr	r3, [sp, #12]
	tw = 0;
 8009498:	e9cd 9e00 	strd	r9, lr, [sp]
		z = (uint64_t)((int64_t)wys * (int64_t)k + (int64_t)x[u] + cc);
 800949c:	2400      	movs	r4, #0
	tw = 0;
 800949e:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 80094a2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80094a6:	189d      	adds	r5, r3, r2
		z = (uint64_t)((int64_t)wys * (int64_t)k + (int64_t)x[u] + cc);
 80094a8:	ea4f 78e7 	mov.w	r8, r7, asr #31
	cc = 0;
 80094ac:	4622      	mov	r2, r4
	tw = 0;
 80094ae:	46a4      	mov	ip, r4
		wy = v < ylen ? y[v] : ysign;
 80094b0:	45a2      	cmp	sl, r4
 80094b2:	bf8a      	itet	hi
 80094b4:	9b00      	ldrhi	r3, [sp, #0]
 80094b6:	9b01      	ldrls	r3, [sp, #4]
 80094b8:	f853 3024 	ldrhi.w	r3, [r3, r4, lsl #2]
		z = (uint64_t)((int64_t)wys * (int64_t)k + (int64_t)x[u] + cc);
 80094bc:	f855 6f04 	ldr.w	r6, [r5, #4]!
		wys = ((wy << scl) & 0x7FFFFFFF) | tw;
 80094c0:	fa03 f00e 	lsl.w	r0, r3, lr
 80094c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80094c8:	ea40 000c 	orr.w	r0, r0, ip
		tw = wy >> (31 - scl);
 80094cc:	fa23 fc09 	lsr.w	ip, r3, r9
		z = (uint64_t)((int64_t)wys * (int64_t)k + (int64_t)x[u] + cc);
 80094d0:	fba0 3107 	umull	r3, r1, r0, r7
 80094d4:	199b      	adds	r3, r3, r6
 80094d6:	fb00 1108 	mla	r1, r0, r8, r1
 80094da:	f141 0100 	adc.w	r1, r1, #0
	for (u = sch; u < xlen; u ++) {
 80094de:	3401      	adds	r4, #1
		z = (uint64_t)((int64_t)wys * (int64_t)k + (int64_t)x[u] + cc);
 80094e0:	189b      	adds	r3, r3, r2
 80094e2:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
		x[u] = (uint32_t)z & 0x7FFFFFFF;
 80094e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
	for (u = sch; u < xlen; u ++) {
 80094ea:	45a3      	cmp	fp, r4
		ccu = (uint32_t)(z >> 31);
 80094ec:	ea4f 73d3 	mov.w	r3, r3, lsr #31
		x[u] = (uint32_t)z & 0x7FFFFFFF;
 80094f0:	602a      	str	r2, [r5, #0]
		ccu = (uint32_t)(z >> 31);
 80094f2:	ea43 0241 	orr.w	r2, r3, r1, lsl #1
	for (u = sch; u < xlen; u ++) {
 80094f6:	d1db      	bne.n	80094b0 <poly_sub_scaled+0xb0>
 80094f8:	f8dd 9000 	ldr.w	r9, [sp]
			if (u + v == n - 1) {
 80094fc:	9b02      	ldr	r3, [sp, #8]
 80094fe:	9a06      	ldr	r2, [sp, #24]
 8009500:	4293      	cmp	r3, r2
 8009502:	d018      	beq.n	8009536 <poly_sub_scaled+0x136>
				x += Fstride;
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	9a07      	ldr	r2, [sp, #28]
 8009508:	4413      	add	r3, r2
 800950a:	9303      	str	r3, [sp, #12]
			y += fstride;
 800950c:	9a05      	ldr	r2, [sp, #20]
		for (v = 0; v < n; v ++) {
 800950e:	9b02      	ldr	r3, [sp, #8]
			y += fstride;
 8009510:	4491      	add	r9, r2
		for (v = 0; v < n; v ++) {
 8009512:	9a04      	ldr	r2, [sp, #16]
 8009514:	3301      	adds	r3, #1
 8009516:	429a      	cmp	r2, r3
 8009518:	9302      	str	r3, [sp, #8]
 800951a:	d1ab      	bne.n	8009474 <poly_sub_scaled+0x74>
	for (u = 0; u < n; u ++) {
 800951c:	4613      	mov	r3, r2
 800951e:	9907      	ldr	r1, [sp, #28]
 8009520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009522:	440a      	add	r2, r1
 8009524:	920c      	str	r2, [sp, #48]	; 0x30
 8009526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009528:	3301      	adds	r3, #1
 800952a:	429a      	cmp	r2, r3
 800952c:	9304      	str	r3, [sp, #16]
 800952e:	d194      	bne.n	800945a <poly_sub_scaled+0x5a>
		}
	}
}
 8009530:	b013      	add	sp, #76	; 0x4c
 8009532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				x = F;
 8009536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009538:	9303      	str	r3, [sp, #12]
				kf = -kf;
 800953a:	427f      	negs	r7, r7
 800953c:	e7e6      	b.n	800950c <poly_sub_scaled+0x10c>
 800953e:	bf00      	nop

08009540 <modp_NTT2_ext.part.0>:
modp_NTT2_ext(uint32_t *a, size_t stride, const uint32_t *gm, unsigned logn,
 8009540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	b08b      	sub	sp, #44	; 0x2c
 8009546:	9007      	str	r0, [sp, #28]
 8009548:	9208      	str	r2, [sp, #32]
 800954a:	4610      	mov	r0, r2
	n = (size_t)1 << logn;
 800954c:	2201      	movs	r2, #1
 800954e:	fa02 f903 	lsl.w	r9, r2, r3
modp_NTT2_ext(uint32_t *a, size_t stride, const uint32_t *gm, unsigned logn,
 8009552:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009556:	9f15      	ldr	r7, [sp, #84]	; 0x54
	n = (size_t)1 << logn;
 8009558:	f8cd 9018 	str.w	r9, [sp, #24]
	for (m = 1; m < n; m <<= 1) {
 800955c:	2b00      	cmp	r3, #0
 800955e:	d05a      	beq.n	8009616 <modp_NTT2_ext.part.0+0xd6>
 8009560:	1f03      	subs	r3, r0, #4
 8009562:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8009566:	9205      	str	r2, [sp, #20]
 8009568:	9309      	str	r3, [sp, #36]	; 0x24
 800956a:	46be      	mov	lr, r7
		ht = t >> 1;
 800956c:	464b      	mov	r3, r9
 800956e:	ea4f 0959 	mov.w	r9, r9, lsr #1
			r2 = r1 + ht * stride;
 8009572:	fb0a f209 	mul.w	r2, sl, r9
 8009576:	9202      	str	r2, [sp, #8]
 8009578:	9a05      	ldr	r2, [sp, #20]
 800957a:	9908      	ldr	r1, [sp, #32]
 800957c:	9e07      	ldr	r6, [sp, #28]
 800957e:	fb03 f30a 	mul.w	r3, r3, sl
 8009582:	9304      	str	r3, [sp, #16]
 8009584:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8009588:	3b01      	subs	r3, #1
 800958a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800958e:	9301      	str	r3, [sp, #4]
 8009590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009596:	9303      	str	r3, [sp, #12]
			s = gm[m + u];
 8009598:	9b01      	ldr	r3, [sp, #4]
 800959a:	f853 7f04 	ldr.w	r7, [r3, #4]!
 800959e:	9301      	str	r3, [sp, #4]
			r2 = r1 + ht * stride;
 80095a0:	9b02      	ldr	r3, [sp, #8]
 80095a2:	eb03 0c06 	add.w	ip, r3, r6
			for (v = 0; v < ht; v ++, r1 += stride, r2 += stride) {
 80095a6:	f1b9 0f00 	cmp.w	r9, #0
 80095aa:	d028      	beq.n	80095fe <modp_NTT2_ext.part.0+0xbe>
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 80095ac:	2000      	movs	r0, #0
			for (v = 0; v < ht; v ++, r1 += stride, r2 += stride) {
 80095ae:	4605      	mov	r5, r0
	z = (uint64_t)a * (uint64_t)b;
 80095b0:	f85c 3000 	ldr.w	r3, [ip, r0]
				x = *r1;
 80095b4:	5832      	ldr	r2, [r6, r0]
	z = (uint64_t)a * (uint64_t)b;
 80095b6:	fba7 1403 	umull	r1, r4, r7, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 80095ba:	fba1 3b0e 	umull	r3, fp, r1, lr
 80095be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095c2:	fba3 3b08 	umull	r3, fp, r3, r8
	d = (uint32_t)((z + w) >> 31) - p;
 80095c6:	185b      	adds	r3, r3, r1
 80095c8:	eb4b 0b04 	adc.w	fp, fp, r4
 80095cc:	0fdb      	lsrs	r3, r3, #31
 80095ce:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 80095d2:	eba3 0308 	sub.w	r3, r3, r8
	d += p & -(d >> 31);
 80095d6:	ea08 71e3 	and.w	r1, r8, r3, asr #31
 80095da:	440b      	add	r3, r1
	d = a + b - p;
 80095dc:	eba2 0108 	sub.w	r1, r2, r8
 80095e0:	4419      	add	r1, r3
	d = a - b;
 80095e2:	1ad2      	subs	r2, r2, r3
	d += p & -(d >> 31);
 80095e4:	ea08 73e1 	and.w	r3, r8, r1, asr #31
 80095e8:	4419      	add	r1, r3
			for (v = 0; v < ht; v ++, r1 += stride, r2 += stride) {
 80095ea:	3501      	adds	r5, #1
	d += p & -(d >> 31);
 80095ec:	ea08 73e2 	and.w	r3, r8, r2, asr #31
 80095f0:	441a      	add	r2, r3
			for (v = 0; v < ht; v ++, r1 += stride, r2 += stride) {
 80095f2:	45a9      	cmp	r9, r5
				*r1 = modp_add(x, y, p);
 80095f4:	5031      	str	r1, [r6, r0]
				*r2 = modp_sub(x, y, p);
 80095f6:	f84c 2000 	str.w	r2, [ip, r0]
			for (v = 0; v < ht; v ++, r1 += stride, r2 += stride) {
 80095fa:	4450      	add	r0, sl
 80095fc:	d1d8      	bne.n	80095b0 <modp_NTT2_ext.part.0+0x70>
		for (u = 0, v1 = 0; u < m; u ++, v1 += t) {
 80095fe:	9b04      	ldr	r3, [sp, #16]
 8009600:	9a01      	ldr	r2, [sp, #4]
 8009602:	441e      	add	r6, r3
 8009604:	9b03      	ldr	r3, [sp, #12]
 8009606:	4293      	cmp	r3, r2
 8009608:	d1c6      	bne.n	8009598 <modp_NTT2_ext.part.0+0x58>
	for (m = 1; m < n; m <<= 1) {
 800960a:	9b05      	ldr	r3, [sp, #20]
 800960c:	9a06      	ldr	r2, [sp, #24]
 800960e:	005b      	lsls	r3, r3, #1
 8009610:	429a      	cmp	r2, r3
 8009612:	9305      	str	r3, [sp, #20]
 8009614:	d8aa      	bhi.n	800956c <modp_NTT2_ext.part.0+0x2c>
}
 8009616:	b00b      	add	sp, #44	; 0x2c
 8009618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961c:	0000      	movs	r0, r0
	...

08009620 <modp_iNTT2_ext.part.0>:
modp_iNTT2_ext(uint32_t *a, size_t stride, const uint32_t *igm, unsigned logn,
 8009620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	b08d      	sub	sp, #52	; 0x34
 8009626:	ea4f 0981 	mov.w	r9, r1, lsl #2
 800962a:	9208      	str	r2, [sp, #32]
	n = (size_t)1 << logn;
 800962c:	2201      	movs	r2, #1
modp_iNTT2_ext(uint32_t *a, size_t stride, const uint32_t *igm, unsigned logn,
 800962e:	9007      	str	r0, [sp, #28]
	n = (size_t)1 << logn;
 8009630:	fa02 f003 	lsl.w	r0, r2, r3
modp_iNTT2_ext(uint32_t *a, size_t stride, const uint32_t *igm, unsigned logn,
 8009634:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 8009638:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 800963c:	930b      	str	r3, [sp, #44]	; 0x2c
	n = (size_t)1 << logn;
 800963e:	900a      	str	r0, [sp, #40]	; 0x28
	for (m = n; m > 1; m >>= 1) {
 8009640:	2b00      	cmp	r3, #0
 8009642:	d05b      	beq.n	80096fc <modp_iNTT2_ext.part.0+0xdc>
 8009644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009646:	9305      	str	r3, [sp, #20]
 8009648:	9b08      	ldr	r3, [sp, #32]
	t = 1;
 800964a:	9206      	str	r2, [sp, #24]
 800964c:	3b04      	subs	r3, #4
 800964e:	9309      	str	r3, [sp, #36]	; 0x24
		hm = m >> 1;
 8009650:	9b05      	ldr	r3, [sp, #20]
 8009652:	9a06      	ldr	r2, [sp, #24]
 8009654:	9808      	ldr	r0, [sp, #32]
 8009656:	9f07      	ldr	r7, [sp, #28]
 8009658:	085b      	lsrs	r3, r3, #1
 800965a:	4619      	mov	r1, r3
 800965c:	9305      	str	r3, [sp, #20]
		dt = t << 1;
 800965e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009662:	3b01      	subs	r3, #1
 8009664:	4690      	mov	r8, r2
 8009666:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800966a:	0052      	lsls	r2, r2, #1
 800966c:	9301      	str	r3, [sp, #4]
			r2 = r1 + t * stride;
 800966e:	fb09 f308 	mul.w	r3, r9, r8
 8009672:	9302      	str	r3, [sp, #8]
 8009674:	fb09 f302 	mul.w	r3, r9, r2
 8009678:	9304      	str	r3, [sp, #16]
 800967a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		dt = t << 1;
 800967c:	9206      	str	r2, [sp, #24]
		for (u = 0, v1 = 0; u < hm; u ++, v1 += dt) {
 800967e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009682:	9303      	str	r3, [sp, #12]
			s = igm[hm + u];
 8009684:	9b01      	ldr	r3, [sp, #4]
 8009686:	f853 cf04 	ldr.w	ip, [r3, #4]!
 800968a:	9301      	str	r3, [sp, #4]
			r2 = r1 + t * stride;
 800968c:	9b02      	ldr	r3, [sp, #8]
 800968e:	eb03 0e07 	add.w	lr, r3, r7
			for (v = 0; v < t; v ++, r1 += stride, r2 += stride) {
 8009692:	f1b8 0f00 	cmp.w	r8, #0
 8009696:	d028      	beq.n	80096ea <modp_iNTT2_ext.part.0+0xca>
 8009698:	2400      	movs	r4, #0
 800969a:	4626      	mov	r6, r4
				y = *r2;
 800969c:	f85e 3004 	ldr.w	r3, [lr, r4]
				x = *r1;
 80096a0:	593a      	ldr	r2, [r7, r4]
	d = a - b;
 80096a2:	1ad1      	subs	r1, r2, r3
	d = a + b - p;
 80096a4:	441a      	add	r2, r3
	d += p & -(d >> 31);
 80096a6:	ea0a 73e1 	and.w	r3, sl, r1, asr #31
 80096aa:	4419      	add	r1, r3
	z = (uint64_t)a * (uint64_t)b;
 80096ac:	fba1 010c 	umull	r0, r1, r1, ip
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 80096b0:	fba0 350b 	umull	r3, r5, r0, fp
 80096b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096b8:	fba3 350a 	umull	r3, r5, r3, sl
	d = (uint32_t)((z + w) >> 31) - p;
 80096bc:	181b      	adds	r3, r3, r0
 80096be:	eb45 0501 	adc.w	r5, r5, r1
	d = a + b - p;
 80096c2:	eba2 020a 	sub.w	r2, r2, sl
	d = (uint32_t)((z + w) >> 31) - p;
 80096c6:	0fdb      	lsrs	r3, r3, #31
 80096c8:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
	d += p & -(d >> 31);
 80096cc:	ea0a 71e2 	and.w	r1, sl, r2, asr #31
	d = (uint32_t)((z + w) >> 31) - p;
 80096d0:	eba3 030a 	sub.w	r3, r3, sl
	d += p & -(d >> 31);
 80096d4:	440a      	add	r2, r1
				*r1 = modp_add(x, y, p);
 80096d6:	513a      	str	r2, [r7, r4]
			for (v = 0; v < t; v ++, r1 += stride, r2 += stride) {
 80096d8:	3601      	adds	r6, #1
	d += p & -(d >> 31);
 80096da:	ea0a 72e3 	and.w	r2, sl, r3, asr #31
 80096de:	4413      	add	r3, r2
			for (v = 0; v < t; v ++, r1 += stride, r2 += stride) {
 80096e0:	45b0      	cmp	r8, r6
				*r2 = modp_montymul(
 80096e2:	f84e 3004 	str.w	r3, [lr, r4]
			for (v = 0; v < t; v ++, r1 += stride, r2 += stride) {
 80096e6:	444c      	add	r4, r9
 80096e8:	d1d8      	bne.n	800969c <modp_iNTT2_ext.part.0+0x7c>
		for (u = 0, v1 = 0; u < hm; u ++, v1 += dt) {
 80096ea:	9b04      	ldr	r3, [sp, #16]
 80096ec:	9a01      	ldr	r2, [sp, #4]
 80096ee:	441f      	add	r7, r3
 80096f0:	9b03      	ldr	r3, [sp, #12]
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d1c6      	bne.n	8009684 <modp_iNTT2_ext.part.0+0x64>
	for (m = n; m > 1; m >>= 1) {
 80096f6:	9b05      	ldr	r3, [sp, #20]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d1a9      	bne.n	8009650 <modp_iNTT2_ext.part.0+0x30>
	ni = (uint32_t)1 << (31 - logn);
 80096fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009700:	9807      	ldr	r0, [sp, #28]
 8009702:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8009706:	2200      	movs	r2, #0
	ni = (uint32_t)1 << (31 - logn);
 8009708:	40d9      	lsrs	r1, r3
	z = (uint64_t)a * (uint64_t)b;
 800970a:	6805      	ldr	r5, [r0, #0]
 800970c:	fba1 5705 	umull	r5, r7, r1, r5
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8009710:	fba5 360b 	umull	r3, r6, r5, fp
 8009714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009718:	fba3 360a 	umull	r3, r6, r3, sl
	d = (uint32_t)((z + w) >> 31) - p;
 800971c:	195b      	adds	r3, r3, r5
 800971e:	eb46 0507 	adc.w	r5, r6, r7
 8009722:	0fdb      	lsrs	r3, r3, #31
 8009724:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8009728:	eba3 030a 	sub.w	r3, r3, sl
	for (k = 0, r = a; k < n; k ++, r += stride) {
 800972c:	3201      	adds	r2, #1
	d += p & -(d >> 31);
 800972e:	ea0a 75e3 	and.w	r5, sl, r3, asr #31
 8009732:	442b      	add	r3, r5
	for (k = 0, r = a; k < n; k ++, r += stride) {
 8009734:	4294      	cmp	r4, r2
		*r = modp_montymul(*r, ni, p, p0i);
 8009736:	6003      	str	r3, [r0, #0]
	for (k = 0, r = a; k < n; k ++, r += stride) {
 8009738:	4448      	add	r0, r9
 800973a:	d1e6      	bne.n	800970a <modp_iNTT2_ext.part.0+0xea>
}
 800973c:	b00d      	add	sp, #52	; 0x34
 800973e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009742:	bf00      	nop
	...

08009750 <process_block>:

__attribute__((naked))
static void
process_block(uint64_t *A __attribute__((unused)))
{
	__asm__ (
 8009750:	e92d 5dfe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 8009754:	b0ba      	sub	sp, #232	; 0xe8
 8009756:	f110 0108 	adds.w	r1, r0, #8
 800975a:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
 800975e:	43d2      	mvns	r2, r2
 8009760:	43db      	mvns	r3, r3
 8009762:	43e4      	mvns	r4, r4
 8009764:	43ed      	mvns	r5, r5
 8009766:	c13c      	stmia	r1!, {r2, r3, r4, r5}
 8009768:	f110 0140 	adds.w	r1, r0, #64	; 0x40
 800976c:	e891 000c 	ldmia.w	r1, {r2, r3}
 8009770:	43d2      	mvns	r2, r2
 8009772:	43db      	mvns	r3, r3
 8009774:	c10c      	stmia	r1!, {r2, r3}
 8009776:	f110 0160 	adds.w	r1, r0, #96	; 0x60
 800977a:	e891 000c 	ldmia.w	r1, {r2, r3}
 800977e:	43d2      	mvns	r2, r2
 8009780:	43db      	mvns	r3, r3
 8009782:	c10c      	stmia	r1!, {r2, r3}
 8009784:	f110 0188 	adds.w	r1, r0, #136	; 0x88
 8009788:	e891 000c 	ldmia.w	r1, {r2, r3}
 800978c:	43d2      	mvns	r2, r2
 800978e:	43db      	mvns	r3, r3
 8009790:	c10c      	stmia	r1!, {r2, r3}
 8009792:	f110 01a0 	adds.w	r1, r0, #160	; 0xa0
 8009796:	e891 000c 	ldmia.w	r1, {r2, r3}
 800979a:	43d2      	mvns	r2, r2
 800979c:	43db      	mvns	r3, r3
 800979e:	c10c      	stmia	r1!, {r2, r3}
 80097a0:	4049      	eors	r1, r1
 80097a2:	9100      	str	r1, [sp, #0]

080097a4 <.process_block_loop>:
 80097a4:	e8b0 01fe 	ldmia.w	r0!, {r1, r2, r3, r4, r5, r6, r7, r8}
 80097a8:	3008      	adds	r0, #8
 80097aa:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 80097ae:	ea91 010a 	eors.w	r1, r1, sl
 80097b2:	ea92 020b 	eors.w	r2, r2, fp
 80097b6:	ea93 030c 	eors.w	r3, r3, ip
 80097ba:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 80097be:	ea94 040a 	eors.w	r4, r4, sl
 80097c2:	ea95 050b 	eors.w	r5, r5, fp
 80097c6:	ea96 060c 	eors.w	r6, r6, ip
 80097ca:	e8b0 0c00 	ldmia.w	r0!, {sl, fp}
 80097ce:	ea97 070a 	eors.w	r7, r7, sl
 80097d2:	ea98 080b 	eors.w	r8, r8, fp
 80097d6:	3008      	adds	r0, #8
 80097d8:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 80097dc:	ea91 010a 	eors.w	r1, r1, sl
 80097e0:	ea92 020b 	eors.w	r2, r2, fp
 80097e4:	ea93 030c 	eors.w	r3, r3, ip
 80097e8:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 80097ec:	ea94 040a 	eors.w	r4, r4, sl
 80097f0:	ea95 050b 	eors.w	r5, r5, fp
 80097f4:	ea96 060c 	eors.w	r6, r6, ip
 80097f8:	e8b0 0c00 	ldmia.w	r0!, {sl, fp}
 80097fc:	ea97 070a 	eors.w	r7, r7, sl
 8009800:	ea98 080b 	eors.w	r8, r8, fp
 8009804:	3008      	adds	r0, #8
 8009806:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 800980a:	ea91 010a 	eors.w	r1, r1, sl
 800980e:	ea92 020b 	eors.w	r2, r2, fp
 8009812:	ea93 030c 	eors.w	r3, r3, ip
 8009816:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 800981a:	ea94 040a 	eors.w	r4, r4, sl
 800981e:	ea95 050b 	eors.w	r5, r5, fp
 8009822:	ea96 060c 	eors.w	r6, r6, ip
 8009826:	e8b0 0c00 	ldmia.w	r0!, {sl, fp}
 800982a:	ea97 070a 	eors.w	r7, r7, sl
 800982e:	ea98 080b 	eors.w	r8, r8, fp
 8009832:	3008      	adds	r0, #8
 8009834:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 8009838:	ea91 010a 	eors.w	r1, r1, sl
 800983c:	ea92 020b 	eors.w	r2, r2, fp
 8009840:	ea93 030c 	eors.w	r3, r3, ip
 8009844:	e8b0 1c00 	ldmia.w	r0!, {sl, fp, ip}
 8009848:	ea94 040a 	eors.w	r4, r4, sl
 800984c:	ea95 050b 	eors.w	r5, r5, fp
 8009850:	ea96 060c 	eors.w	r6, r6, ip
 8009854:	e8b0 0c00 	ldmia.w	r0!, {sl, fp}
 8009858:	ea97 070a 	eors.w	r7, r7, sl
 800985c:	ea98 080b 	eors.w	r8, r8, fp
 8009860:	e8b0 0c00 	ldmia.w	r0!, {sl, fp}
 8009864:	38c8      	subs	r0, #200	; 0xc8
 8009866:	f8d0 c020 	ldr.w	ip, [r0, #32]
 800986a:	ea9a 0a0c 	eors.w	sl, sl, ip
 800986e:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 8009872:	ea9b 0b0c 	eors.w	fp, fp, ip
 8009876:	f8d0 c048 	ldr.w	ip, [r0, #72]	; 0x48
 800987a:	ea9a 0a0c 	eors.w	sl, sl, ip
 800987e:	f8d0 c04c 	ldr.w	ip, [r0, #76]	; 0x4c
 8009882:	ea9b 0b0c 	eors.w	fp, fp, ip
 8009886:	f8d0 c070 	ldr.w	ip, [r0, #112]	; 0x70
 800988a:	ea9a 0a0c 	eors.w	sl, sl, ip
 800988e:	f8d0 c074 	ldr.w	ip, [r0, #116]	; 0x74
 8009892:	ea9b 0b0c 	eors.w	fp, fp, ip
 8009896:	f8d0 c098 	ldr.w	ip, [r0, #152]	; 0x98
 800989a:	ea9a 0a0c 	eors.w	sl, sl, ip
 800989e:	f8d0 c09c 	ldr.w	ip, [r0, #156]	; 0x9c
 80098a2:	ea9b 0b0c 	eors.w	fp, fp, ip
 80098a6:	f8cd b004 	str.w	fp, [sp, #4]
 80098aa:	46d4      	mov	ip, sl
 80098ac:	ea9a 0a43 	eors.w	sl, sl, r3, lsl #1
 80098b0:	ea9a 7ad4 	eors.w	sl, sl, r4, lsr #31
 80098b4:	ea9b 0b44 	eors.w	fp, fp, r4, lsl #1
 80098b8:	ea9b 7bd3 	eors.w	fp, fp, r3, lsr #31
 80098bc:	ea93 0347 	eors.w	r3, r3, r7, lsl #1
 80098c0:	ea93 73d8 	eors.w	r3, r3, r8, lsr #31
 80098c4:	ea94 0448 	eors.w	r4, r4, r8, lsl #1
 80098c8:	ea94 74d7 	eors.w	r4, r4, r7, lsr #31
 80098cc:	ea97 0741 	eors.w	r7, r7, r1, lsl #1
 80098d0:	ea97 77d2 	eors.w	r7, r7, r2, lsr #31
 80098d4:	ea98 0842 	eors.w	r8, r8, r2, lsl #1
 80098d8:	ea98 78d1 	eors.w	r8, r8, r1, lsr #31
 80098dc:	ea91 0145 	eors.w	r1, r1, r5, lsl #1
 80098e0:	ea91 71d6 	eors.w	r1, r1, r6, lsr #31
 80098e4:	ea92 0246 	eors.w	r2, r2, r6, lsl #1
 80098e8:	ea92 72d5 	eors.w	r2, r2, r5, lsr #31
 80098ec:	ea95 054c 	eors.w	r5, r5, ip, lsl #1
 80098f0:	ea96 76dc 	eors.w	r6, r6, ip, lsr #31
 80098f4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80098f8:	ea95 75dc 	eors.w	r5, r5, ip, lsr #31
 80098fc:	ea96 064c 	eors.w	r6, r6, ip, lsl #1
 8009900:	f20d 0c04 	addw	ip, sp, #4
 8009904:	e88c 01f8 	stmia.w	ip, {r3, r4, r5, r6, r7, r8}
 8009908:	f20d 0c20 	addw	ip, sp, #32
 800990c:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8009910:	ea95 050a 	eors.w	r5, r5, sl
 8009914:	ea96 060b 	eors.w	r6, r6, fp
 8009918:	ea97 0301 	eors.w	r3, r7, r1
 800991c:	ea98 0402 	eors.w	r4, r8, r2
 8009920:	ea4f 0743 	mov.w	r7, r3, lsl #1
 8009924:	ea47 77d4 	orr.w	r7, r7, r4, lsr #31
 8009928:	ea4f 0844 	mov.w	r8, r4, lsl #1
 800992c:	ea48 78d3 	orr.w	r8, r8, r3, lsr #31
 8009930:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 8009934:	3018      	adds	r0, #24
 8009936:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 800993a:	ea95 030a 	eors.w	r3, r5, sl
 800993e:	ea96 040b 	eors.w	r4, r6, fp
 8009942:	ea4f 1504 	mov.w	r5, r4, lsl #4
 8009946:	ea45 7513 	orr.w	r5, r5, r3, lsr #28
 800994a:	ea4f 1603 	mov.w	r6, r3, lsl #4
 800994e:	ea46 7614 	orr.w	r6, r6, r4, lsr #28
 8009952:	ea97 0301 	eors.w	r3, r7, r1
 8009956:	ea98 0402 	eors.w	r4, r8, r2
 800995a:	ea4f 3704 	mov.w	r7, r4, lsl #12
 800995e:	ea47 5713 	orr.w	r7, r7, r3, lsr #20
 8009962:	ea4f 3803 	mov.w	r8, r3, lsl #12
 8009966:	ea48 5814 	orr.w	r8, r8, r4, lsr #20
 800996a:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 800996e:	3018      	adds	r0, #24
 8009970:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8009974:	ea95 030a 	eors.w	r3, r5, sl
 8009978:	ea96 040b 	eors.w	r4, r6, fp
 800997c:	ea4f 05c3 	mov.w	r5, r3, lsl #3
 8009980:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 8009984:	ea4f 06c4 	mov.w	r6, r4, lsl #3
 8009988:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800998c:	ea97 0301 	eors.w	r3, r7, r1
 8009990:	ea98 0402 	eors.w	r4, r8, r2
 8009994:	ea4f 2783 	mov.w	r7, r3, lsl #10
 8009998:	ea47 5794 	orr.w	r7, r7, r4, lsr #22
 800999c:	ea4f 2884 	mov.w	r8, r4, lsl #10
 80099a0:	ea48 5893 	orr.w	r8, r8, r3, lsr #22
 80099a4:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 80099a8:	3018      	adds	r0, #24
 80099aa:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 80099ae:	ea95 030a 	eors.w	r3, r5, sl
 80099b2:	ea96 040b 	eors.w	r4, r6, fp
 80099b6:	ea4f 2544 	mov.w	r5, r4, lsl #9
 80099ba:	ea45 55d3 	orr.w	r5, r5, r3, lsr #23
 80099be:	ea4f 2643 	mov.w	r6, r3, lsl #9
 80099c2:	ea46 56d4 	orr.w	r6, r6, r4, lsr #23
 80099c6:	ea97 0301 	eors.w	r3, r7, r1
 80099ca:	ea98 0402 	eors.w	r4, r8, r2
 80099ce:	ea4f 3744 	mov.w	r7, r4, lsl #13
 80099d2:	ea47 47d3 	orr.w	r7, r7, r3, lsr #19
 80099d6:	ea4f 3843 	mov.w	r8, r3, lsl #13
 80099da:	ea48 48d4 	orr.w	r8, r8, r4, lsr #19
 80099de:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 80099e2:	3018      	adds	r0, #24
 80099e4:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 80099e8:	ea95 030a 	eors.w	r3, r5, sl
 80099ec:	ea96 040b 	eors.w	r4, r6, fp
 80099f0:	ea4f 4583 	mov.w	r5, r3, lsl #18
 80099f4:	ea45 3594 	orr.w	r5, r5, r4, lsr #14
 80099f8:	ea4f 4684 	mov.w	r6, r4, lsl #18
 80099fc:	ea46 3693 	orr.w	r6, r6, r3, lsr #14
 8009a00:	ea97 0301 	eors.w	r3, r7, r1
 8009a04:	ea98 0402 	eors.w	r4, r8, r2
 8009a08:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8009a0c:	ea47 7794 	orr.w	r7, r7, r4, lsr #30
 8009a10:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8009a14:	ea48 7893 	orr.w	r8, r8, r3, lsr #30
 8009a18:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 8009a1c:	f20d 0504 	addw	r5, sp, #4
 8009a20:	cd1e      	ldmia	r5!, {r1, r2, r3, r4}
 8009a22:	38a0      	subs	r0, #160	; 0xa0
 8009a24:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8009a28:	ea95 0a01 	eors.w	sl, r5, r1
 8009a2c:	ea96 0b02 	eors.w	fp, r6, r2
 8009a30:	ea4f 758b 	mov.w	r5, fp, lsl #30
 8009a34:	ea45 059a 	orr.w	r5, r5, sl, lsr #2
 8009a38:	ea4f 768a 	mov.w	r6, sl, lsl #30
 8009a3c:	ea46 069b 	orr.w	r6, r6, fp, lsr #2
 8009a40:	ea97 0a03 	eors.w	sl, r7, r3
 8009a44:	ea98 0b04 	eors.w	fp, r8, r4
 8009a48:	ea4f 770a 	mov.w	r7, sl, lsl #28
 8009a4c:	ea47 171b 	orr.w	r7, r7, fp, lsr #4
 8009a50:	ea4f 780b 	mov.w	r8, fp, lsl #28
 8009a54:	ea48 181a 	orr.w	r8, r8, sl, lsr #4
 8009a58:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 8009a5c:	3018      	adds	r0, #24
 8009a5e:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8009a62:	ea95 0a01 	eors.w	sl, r5, r1
 8009a66:	ea96 0b02 	eors.w	fp, r6, r2
 8009a6a:	ea4f 158a 	mov.w	r5, sl, lsl #6
 8009a6e:	ea45 659b 	orr.w	r5, r5, fp, lsr #26
 8009a72:	ea4f 168b 	mov.w	r6, fp, lsl #6
 8009a76:	ea46 669a 	orr.w	r6, r6, sl, lsr #26
 8009a7a:	ea97 0a03 	eors.w	sl, r7, r3
 8009a7e:	ea98 0b04 	eors.w	fp, r8, r4
 8009a82:	ea4f 57cb 	mov.w	r7, fp, lsl #23
 8009a86:	ea47 275a 	orr.w	r7, r7, sl, lsr #9
 8009a8a:	ea4f 58ca 	mov.w	r8, sl, lsl #23
 8009a8e:	ea48 285b 	orr.w	r8, r8, fp, lsr #9
 8009a92:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 8009a96:	3018      	adds	r0, #24
 8009a98:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8009a9c:	ea95 0a01 	eors.w	sl, r5, r1
 8009aa0:	ea96 0b02 	eors.w	fp, r6, r2
 8009aa4:	ea4f 25cb 	mov.w	r5, fp, lsl #11
 8009aa8:	ea45 555a 	orr.w	r5, r5, sl, lsr #21
 8009aac:	ea4f 26ca 	mov.w	r6, sl, lsl #11
 8009ab0:	ea46 565b 	orr.w	r6, r6, fp, lsr #21
 8009ab4:	ea97 0a03 	eors.w	sl, r7, r3
 8009ab8:	ea98 0b04 	eors.w	fp, r8, r4
 8009abc:	ea4f 674a 	mov.w	r7, sl, lsl #25
 8009ac0:	ea47 17db 	orr.w	r7, r7, fp, lsr #7
 8009ac4:	ea4f 684b 	mov.w	r8, fp, lsl #25
 8009ac8:	ea48 18da 	orr.w	r8, r8, sl, lsr #7
 8009acc:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 8009ad0:	3018      	adds	r0, #24
 8009ad2:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8009ad6:	ea95 0a01 	eors.w	sl, r5, r1
 8009ada:	ea96 0b02 	eors.w	fp, r6, r2
 8009ade:	ea4f 35ca 	mov.w	r5, sl, lsl #15
 8009ae2:	ea45 455b 	orr.w	r5, r5, fp, lsr #17
 8009ae6:	ea4f 36cb 	mov.w	r6, fp, lsl #15
 8009aea:	ea46 465a 	orr.w	r6, r6, sl, lsr #17
 8009aee:	ea97 0a03 	eors.w	sl, r7, r3
 8009af2:	ea98 0b04 	eors.w	fp, r8, r4
 8009af6:	ea4f 574a 	mov.w	r7, sl, lsl #21
 8009afa:	ea47 27db 	orr.w	r7, r7, fp, lsr #11
 8009afe:	ea4f 584b 	mov.w	r8, fp, lsl #21
 8009b02:	ea48 28da 	orr.w	r8, r8, sl, lsr #11
 8009b06:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 8009b0a:	3018      	adds	r0, #24
 8009b0c:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8009b10:	ea95 0a01 	eors.w	sl, r5, r1
 8009b14:	ea96 0b02 	eors.w	fp, r6, r2
 8009b18:	ea4f 754b 	mov.w	r5, fp, lsl #29
 8009b1c:	ea45 05da 	orr.w	r5, r5, sl, lsr #3
 8009b20:	ea4f 764a 	mov.w	r6, sl, lsl #29
 8009b24:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8009b28:	ea97 0a03 	eors.w	sl, r7, r3
 8009b2c:	ea98 0b04 	eors.w	fp, r8, r4
 8009b30:	ea4f 670b 	mov.w	r7, fp, lsl #24
 8009b34:	ea47 271a 	orr.w	r7, r7, sl, lsr #8
 8009b38:	ea4f 680a 	mov.w	r8, sl, lsl #24
 8009b3c:	ea48 281b 	orr.w	r8, r8, fp, lsr #8
 8009b40:	e8ac 01e0 	stmia.w	ip!, {r5, r6, r7, r8}
 8009b44:	9905      	ldr	r1, [sp, #20]
 8009b46:	9a06      	ldr	r2, [sp, #24]
 8009b48:	38a0      	subs	r0, #160	; 0xa0
 8009b4a:	c860      	ldmia	r0!, {r5, r6}
 8009b4c:	ea95 0301 	eors.w	r3, r5, r1
 8009b50:	ea96 0402 	eors.w	r4, r6, r2
 8009b54:	ea4f 65c3 	mov.w	r5, r3, lsl #27
 8009b58:	ea45 1554 	orr.w	r5, r5, r4, lsr #5
 8009b5c:	ea4f 66c4 	mov.w	r6, r4, lsl #27
 8009b60:	ea46 1653 	orr.w	r6, r6, r3, lsr #5
 8009b64:	e8ac 0060 	stmia.w	ip!, {r5, r6}
 8009b68:	3020      	adds	r0, #32
 8009b6a:	c860      	ldmia	r0!, {r5, r6}
 8009b6c:	ea95 0301 	eors.w	r3, r5, r1
 8009b70:	ea96 0402 	eors.w	r4, r6, r2
 8009b74:	ea4f 5503 	mov.w	r5, r3, lsl #20
 8009b78:	ea45 3514 	orr.w	r5, r5, r4, lsr #12
 8009b7c:	ea4f 5604 	mov.w	r6, r4, lsl #20
 8009b80:	ea46 3613 	orr.w	r6, r6, r3, lsr #12
 8009b84:	e8ac 0060 	stmia.w	ip!, {r5, r6}
 8009b88:	3020      	adds	r0, #32
 8009b8a:	c860      	ldmia	r0!, {r5, r6}
 8009b8c:	ea95 0301 	eors.w	r3, r5, r1
 8009b90:	ea96 0402 	eors.w	r4, r6, r2
 8009b94:	ea4f 15c4 	mov.w	r5, r4, lsl #7
 8009b98:	ea45 6553 	orr.w	r5, r5, r3, lsr #25
 8009b9c:	ea4f 16c3 	mov.w	r6, r3, lsl #7
 8009ba0:	ea46 6654 	orr.w	r6, r6, r4, lsr #25
 8009ba4:	e8ac 0060 	stmia.w	ip!, {r5, r6}
 8009ba8:	3020      	adds	r0, #32
 8009baa:	c860      	ldmia	r0!, {r5, r6}
 8009bac:	ea95 0301 	eors.w	r3, r5, r1
 8009bb0:	ea96 0402 	eors.w	r4, r6, r2
 8009bb4:	ea4f 2503 	mov.w	r5, r3, lsl #8
 8009bb8:	ea45 6514 	orr.w	r5, r5, r4, lsr #24
 8009bbc:	ea4f 2604 	mov.w	r6, r4, lsl #8
 8009bc0:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 8009bc4:	e8ac 0060 	stmia.w	ip!, {r5, r6}
 8009bc8:	3020      	adds	r0, #32
 8009bca:	c860      	ldmia	r0!, {r5, r6}
 8009bcc:	ea95 0301 	eors.w	r3, r5, r1
 8009bd0:	ea96 0402 	eors.w	r4, r6, r2
 8009bd4:	ea4f 3583 	mov.w	r5, r3, lsl #14
 8009bd8:	ea45 4594 	orr.w	r5, r5, r4, lsr #18
 8009bdc:	ea4f 3684 	mov.w	r6, r4, lsl #14
 8009be0:	ea46 4693 	orr.w	r6, r6, r3, lsr #18
 8009be4:	e8ac 0060 	stmia.w	ip!, {r5, r6}
 8009be8:	38c8      	subs	r0, #200	; 0xc8
 8009bea:	9908      	ldr	r1, [sp, #32]
 8009bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bf0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8009bf2:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8009bf4:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8009bf6:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8009bf8:	f8dd 80ac 	ldr.w	r8, [sp, #172]	; 0xac
 8009bfc:	f8dd a0e0 	ldr.w	sl, [sp, #224]	; 0xe0
 8009c00:	f8dd b0e4 	ldr.w	fp, [sp, #228]	; 0xe4
 8009c04:	ea53 0c05 	orrs.w	ip, r3, r5
 8009c08:	ea9c 0c01 	eors.w	ip, ip, r1
 8009c0c:	f8c0 c000 	str.w	ip, [r0]
 8009c10:	ea54 0c06 	orrs.w	ip, r4, r6
 8009c14:	ea9c 0c02 	eors.w	ip, ip, r2
 8009c18:	f8c0 c004 	str.w	ip, [r0, #4]
 8009c1c:	ea77 0c05 	orns	ip, r7, r5
 8009c20:	ea9c 0c03 	eors.w	ip, ip, r3
 8009c24:	f8c0 c008 	str.w	ip, [r0, #8]
 8009c28:	ea78 0c06 	orns	ip, r8, r6
 8009c2c:	ea9c 0c04 	eors.w	ip, ip, r4
 8009c30:	f8c0 c00c 	str.w	ip, [r0, #12]
 8009c34:	ea17 0c0a 	ands.w	ip, r7, sl
 8009c38:	ea9c 0c05 	eors.w	ip, ip, r5
 8009c3c:	f8c0 c010 	str.w	ip, [r0, #16]
 8009c40:	ea18 0c0b 	ands.w	ip, r8, fp
 8009c44:	ea9c 0c06 	eors.w	ip, ip, r6
 8009c48:	f8c0 c014 	str.w	ip, [r0, #20]
 8009c4c:	ea51 0c0a 	orrs.w	ip, r1, sl
 8009c50:	ea9c 0c07 	eors.w	ip, ip, r7
 8009c54:	f8c0 c018 	str.w	ip, [r0, #24]
 8009c58:	ea52 0c0b 	orrs.w	ip, r2, fp
 8009c5c:	ea9c 0c08 	eors.w	ip, ip, r8
 8009c60:	f8c0 c01c 	str.w	ip, [r0, #28]
 8009c64:	ea11 0c03 	ands.w	ip, r1, r3
 8009c68:	ea9c 0c0a 	eors.w	ip, ip, sl
 8009c6c:	f8c0 c020 	str.w	ip, [r0, #32]
 8009c70:	ea12 0c04 	ands.w	ip, r2, r4
 8009c74:	ea9c 0c0b 	eors.w	ip, ip, fp
 8009c78:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 8009c7c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009c7e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009c80:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8009c82:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 8009c84:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009c86:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8009c88:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8009c8a:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009c8e:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
 8009c92:	f8dd b0b4 	ldr.w	fp, [sp, #180]	; 0xb4
 8009c96:	ea53 0c05 	orrs.w	ip, r3, r5
 8009c9a:	ea9c 0c01 	eors.w	ip, ip, r1
 8009c9e:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
 8009ca2:	ea54 0c06 	orrs.w	ip, r4, r6
 8009ca6:	ea9c 0c02 	eors.w	ip, ip, r2
 8009caa:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
 8009cae:	ea17 0c05 	ands.w	ip, r7, r5
 8009cb2:	ea9c 0c03 	eors.w	ip, ip, r3
 8009cb6:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
 8009cba:	ea18 0c06 	ands.w	ip, r8, r6
 8009cbe:	ea9c 0c04 	eors.w	ip, ip, r4
 8009cc2:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
 8009cc6:	ea77 0c0a 	orns	ip, r7, sl
 8009cca:	ea9c 0c05 	eors.w	ip, ip, r5
 8009cce:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
 8009cd2:	ea78 0c0b 	orns	ip, r8, fp
 8009cd6:	ea9c 0c06 	eors.w	ip, ip, r6
 8009cda:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
 8009cde:	ea51 0c0a 	orrs.w	ip, r1, sl
 8009ce2:	ea9c 0c07 	eors.w	ip, ip, r7
 8009ce6:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
 8009cea:	ea52 0c0b 	orrs.w	ip, r2, fp
 8009cee:	ea9c 0c08 	eors.w	ip, ip, r8
 8009cf2:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
 8009cf6:	ea11 0c03 	ands.w	ip, r1, r3
 8009cfa:	ea9c 0c0a 	eors.w	ip, ip, sl
 8009cfe:	f8c0 c048 	str.w	ip, [r0, #72]	; 0x48
 8009d02:	ea12 0c04 	ands.w	ip, r2, r4
 8009d06:	ea9c 0c0b 	eors.w	ip, ip, fp
 8009d0a:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
 8009d0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009d14:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8009d16:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8009d18:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8009d1a:	9f36      	ldr	r7, [sp, #216]	; 0xd8
 8009d1c:	f8dd 80dc 	ldr.w	r8, [sp, #220]	; 0xdc
 8009d20:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8009d24:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8009d28:	ea53 0c05 	orrs.w	ip, r3, r5
 8009d2c:	ea9c 0c01 	eors.w	ip, ip, r1
 8009d30:	f8c0 c050 	str.w	ip, [r0, #80]	; 0x50
 8009d34:	ea54 0c06 	orrs.w	ip, r4, r6
 8009d38:	ea9c 0c02 	eors.w	ip, ip, r2
 8009d3c:	f8c0 c054 	str.w	ip, [r0, #84]	; 0x54
 8009d40:	ea17 0c05 	ands.w	ip, r7, r5
 8009d44:	ea9c 0c03 	eors.w	ip, ip, r3
 8009d48:	f8c0 c058 	str.w	ip, [r0, #88]	; 0x58
 8009d4c:	ea18 0c06 	ands.w	ip, r8, r6
 8009d50:	ea9c 0c04 	eors.w	ip, ip, r4
 8009d54:	f8c0 c05c 	str.w	ip, [r0, #92]	; 0x5c
 8009d58:	ea3a 0c07 	bics.w	ip, sl, r7
 8009d5c:	ea9c 0c05 	eors.w	ip, ip, r5
 8009d60:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
 8009d64:	ea3b 0c08 	bics.w	ip, fp, r8
 8009d68:	ea9c 0c06 	eors.w	ip, ip, r6
 8009d6c:	f8c0 c064 	str.w	ip, [r0, #100]	; 0x64
 8009d70:	43ff      	mvns	r7, r7
 8009d72:	ea7f 0808 	mvns.w	r8, r8
 8009d76:	ea51 0c0a 	orrs.w	ip, r1, sl
 8009d7a:	ea9c 0c07 	eors.w	ip, ip, r7
 8009d7e:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
 8009d82:	ea52 0c0b 	orrs.w	ip, r2, fp
 8009d86:	ea9c 0c08 	eors.w	ip, ip, r8
 8009d8a:	f8c0 c06c 	str.w	ip, [r0, #108]	; 0x6c
 8009d8e:	ea11 0c03 	ands.w	ip, r1, r3
 8009d92:	ea9c 0c0a 	eors.w	ip, ip, sl
 8009d96:	f8c0 c070 	str.w	ip, [r0, #112]	; 0x70
 8009d9a:	ea12 0c04 	ands.w	ip, r2, r4
 8009d9e:	ea9c 0c0b 	eors.w	ip, ip, fp
 8009da2:	f8c0 c074 	str.w	ip, [r0, #116]	; 0x74
 8009da6:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8009da8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8009daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009dae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009db0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8009db2:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8009db4:	f8dd 80a4 	ldr.w	r8, [sp, #164]	; 0xa4
 8009db8:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 8009dbc:	f8dd b0bc 	ldr.w	fp, [sp, #188]	; 0xbc
 8009dc0:	ea13 0c05 	ands.w	ip, r3, r5
 8009dc4:	ea9c 0c01 	eors.w	ip, ip, r1
 8009dc8:	f8c0 c078 	str.w	ip, [r0, #120]	; 0x78
 8009dcc:	ea14 0c06 	ands.w	ip, r4, r6
 8009dd0:	ea9c 0c02 	eors.w	ip, ip, r2
 8009dd4:	f8c0 c07c 	str.w	ip, [r0, #124]	; 0x7c
 8009dd8:	ea57 0c05 	orrs.w	ip, r7, r5
 8009ddc:	ea9c 0c03 	eors.w	ip, ip, r3
 8009de0:	f8c0 c080 	str.w	ip, [r0, #128]	; 0x80
 8009de4:	ea58 0c06 	orrs.w	ip, r8, r6
 8009de8:	ea9c 0c04 	eors.w	ip, ip, r4
 8009dec:	f8c0 c084 	str.w	ip, [r0, #132]	; 0x84
 8009df0:	ea7a 0c07 	orns	ip, sl, r7
 8009df4:	ea9c 0c05 	eors.w	ip, ip, r5
 8009df8:	f8c0 c088 	str.w	ip, [r0, #136]	; 0x88
 8009dfc:	ea7b 0c08 	orns	ip, fp, r8
 8009e00:	ea9c 0c06 	eors.w	ip, ip, r6
 8009e04:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
 8009e08:	43ff      	mvns	r7, r7
 8009e0a:	ea7f 0808 	mvns.w	r8, r8
 8009e0e:	ea11 0c0a 	ands.w	ip, r1, sl
 8009e12:	ea9c 0c07 	eors.w	ip, ip, r7
 8009e16:	f8c0 c090 	str.w	ip, [r0, #144]	; 0x90
 8009e1a:	ea12 0c0b 	ands.w	ip, r2, fp
 8009e1e:	ea9c 0c08 	eors.w	ip, ip, r8
 8009e22:	f8c0 c094 	str.w	ip, [r0, #148]	; 0x94
 8009e26:	ea51 0c03 	orrs.w	ip, r1, r3
 8009e2a:	ea9c 0c0a 	eors.w	ip, ip, sl
 8009e2e:	f8c0 c098 	str.w	ip, [r0, #152]	; 0x98
 8009e32:	ea52 0c04 	orrs.w	ip, r2, r4
 8009e36:	ea9c 0c0b 	eors.w	ip, ip, fp
 8009e3a:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
 8009e3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e40:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009e42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e44:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8009e46:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 8009e48:	9e35      	ldr	r6, [sp, #212]	; 0xd4
 8009e4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009e4c:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8009e50:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009e54:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8009e58:	ea35 0c03 	bics.w	ip, r5, r3
 8009e5c:	ea9c 0c01 	eors.w	ip, ip, r1
 8009e60:	f8c0 c0a0 	str.w	ip, [r0, #160]	; 0xa0
 8009e64:	ea36 0c04 	bics.w	ip, r6, r4
 8009e68:	ea9c 0c02 	eors.w	ip, ip, r2
 8009e6c:	f8c0 c0a4 	str.w	ip, [r0, #164]	; 0xa4
 8009e70:	ea11 0c03 	ands.w	ip, r1, r3
 8009e74:	ea9c 0c0a 	eors.w	ip, ip, sl
 8009e78:	f8c0 c0c0 	str.w	ip, [r0, #192]	; 0xc0
 8009e7c:	ea12 0c04 	ands.w	ip, r2, r4
 8009e80:	ea9c 0c0b 	eors.w	ip, ip, fp
 8009e84:	f8c0 c0c4 	str.w	ip, [r0, #196]	; 0xc4
 8009e88:	43db      	mvns	r3, r3
 8009e8a:	43e4      	mvns	r4, r4
 8009e8c:	ea57 0c05 	orrs.w	ip, r7, r5
 8009e90:	ea9c 0c03 	eors.w	ip, ip, r3
 8009e94:	f8c0 c0a8 	str.w	ip, [r0, #168]	; 0xa8
 8009e98:	ea58 0c06 	orrs.w	ip, r8, r6
 8009e9c:	ea9c 0c04 	eors.w	ip, ip, r4
 8009ea0:	f8c0 c0ac 	str.w	ip, [r0, #172]	; 0xac
 8009ea4:	ea17 0c0a 	ands.w	ip, r7, sl
 8009ea8:	ea9c 0c05 	eors.w	ip, ip, r5
 8009eac:	f8c0 c0b0 	str.w	ip, [r0, #176]	; 0xb0
 8009eb0:	ea18 0c0b 	ands.w	ip, r8, fp
 8009eb4:	ea9c 0c06 	eors.w	ip, ip, r6
 8009eb8:	f8c0 c0b4 	str.w	ip, [r0, #180]	; 0xb4
 8009ebc:	ea51 0c0a 	orrs.w	ip, r1, sl
 8009ec0:	ea9c 0c07 	eors.w	ip, ip, r7
 8009ec4:	f8c0 c0b8 	str.w	ip, [r0, #184]	; 0xb8
 8009ec8:	ea52 0c0b 	orrs.w	ip, r2, fp
 8009ecc:	ea9c 0c08 	eors.w	ip, ip, r8
 8009ed0:	f8c0 c0bc 	str.w	ip, [r0, #188]	; 0xbc
 8009ed4:	9900      	ldr	r1, [sp, #0]
 8009ed6:	a21b      	add	r2, pc, #108	; (adr r2, 8009f44 <.process_block_RC>)
 8009ed8:	1852      	adds	r2, r2, r1
 8009eda:	e892 0018 	ldmia.w	r2, {r3, r4}
 8009ede:	e890 0060 	ldmia.w	r0, {r5, r6}
 8009ee2:	405d      	eors	r5, r3
 8009ee4:	4066      	eors	r6, r4
 8009ee6:	e880 0060 	stmia.w	r0, {r5, r6}
 8009eea:	3108      	adds	r1, #8
 8009eec:	9100      	str	r1, [sp, #0]
 8009eee:	29c0      	cmp	r1, #192	; 0xc0
 8009ef0:	f4ff ac58 	bcc.w	80097a4 <.process_block_loop>
 8009ef4:	f110 0108 	adds.w	r1, r0, #8
 8009ef8:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
 8009efc:	43d2      	mvns	r2, r2
 8009efe:	43db      	mvns	r3, r3
 8009f00:	43e4      	mvns	r4, r4
 8009f02:	43ed      	mvns	r5, r5
 8009f04:	c13c      	stmia	r1!, {r2, r3, r4, r5}
 8009f06:	f110 0140 	adds.w	r1, r0, #64	; 0x40
 8009f0a:	e891 000c 	ldmia.w	r1, {r2, r3}
 8009f0e:	43d2      	mvns	r2, r2
 8009f10:	43db      	mvns	r3, r3
 8009f12:	c10c      	stmia	r1!, {r2, r3}
 8009f14:	f110 0160 	adds.w	r1, r0, #96	; 0x60
 8009f18:	e891 000c 	ldmia.w	r1, {r2, r3}
 8009f1c:	43d2      	mvns	r2, r2
 8009f1e:	43db      	mvns	r3, r3
 8009f20:	c10c      	stmia	r1!, {r2, r3}
 8009f22:	f110 0188 	adds.w	r1, r0, #136	; 0x88
 8009f26:	e891 000c 	ldmia.w	r1, {r2, r3}
 8009f2a:	43d2      	mvns	r2, r2
 8009f2c:	43db      	mvns	r3, r3
 8009f2e:	c10c      	stmia	r1!, {r2, r3}
 8009f30:	f110 01a0 	adds.w	r1, r0, #160	; 0xa0
 8009f34:	e891 000c 	ldmia.w	r1, {r2, r3}
 8009f38:	43d2      	mvns	r2, r2
 8009f3a:	43db      	mvns	r3, r3
 8009f3c:	c10c      	stmia	r1!, {r2, r3}
 8009f3e:	b03a      	add	sp, #232	; 0xe8
 8009f40:	e8bd 9dfe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, pc}

08009f44 <.process_block_RC>:
 8009f44:	00000001 	.word	0x00000001
 8009f48:	00000000 	.word	0x00000000
 8009f4c:	00008082 	.word	0x00008082
 8009f50:	00000000 	.word	0x00000000
 8009f54:	0000808a 	.word	0x0000808a
 8009f58:	80000000 	.word	0x80000000
 8009f5c:	80008000 	.word	0x80008000
 8009f60:	80000000 	.word	0x80000000
 8009f64:	0000808b 	.word	0x0000808b
 8009f68:	00000000 	.word	0x00000000
 8009f6c:	80000001 	.word	0x80000001
 8009f70:	00000000 	.word	0x00000000
 8009f74:	80008081 	.word	0x80008081
 8009f78:	80000000 	.word	0x80000000
 8009f7c:	00008009 	.word	0x00008009
 8009f80:	80000000 	.word	0x80000000
 8009f84:	0000008a 	.word	0x0000008a
 8009f88:	00000000 	.word	0x00000000
 8009f8c:	00000088 	.word	0x00000088
 8009f90:	00000000 	.word	0x00000000
 8009f94:	80008009 	.word	0x80008009
 8009f98:	00000000 	.word	0x00000000
 8009f9c:	8000000a 	.word	0x8000000a
 8009fa0:	00000000 	.word	0x00000000
 8009fa4:	8000808b 	.word	0x8000808b
 8009fa8:	00000000 	.word	0x00000000
 8009fac:	0000008b 	.word	0x0000008b
 8009fb0:	80000000 	.word	0x80000000
 8009fb4:	00008089 	.word	0x00008089
 8009fb8:	80000000 	.word	0x80000000
 8009fbc:	00008003 	.word	0x00008003
 8009fc0:	80000000 	.word	0x80000000
 8009fc4:	00008002 	.word	0x00008002
 8009fc8:	80000000 	.word	0x80000000
 8009fcc:	00000080 	.word	0x00000080
 8009fd0:	80000000 	.word	0x80000000
 8009fd4:	0000800a 	.word	0x0000800a
 8009fd8:	00000000 	.word	0x00000000
 8009fdc:	8000000a 	.word	0x8000000a
 8009fe0:	80000000 	.word	0x80000000
 8009fe4:	80008081 	.word	0x80008081
 8009fe8:	80000000 	.word	0x80000000
 8009fec:	00008080 	.word	0x00008080
 8009ff0:	80000000 	.word	0x80000000
 8009ff4:	80000001 	.word	0x80000001
 8009ff8:	00000000 	.word	0x00000000
 8009ffc:	80008008 	.word	0x80008008
 800a000:	80000000 	.word	0x80000000
	...

0800a010 <falcon_inner_i_shake256_inject>:
}

/* see inner.h */
void
Zf(i_shake256_inject)(inner_shake256_context *sc, const uint8_t *in, size_t len)
{
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t dptr;

	dptr = (size_t)sc->dptr;
 800a012:	f8d0 70c8 	ldr.w	r7, [r0, #200]	; 0xc8
{
 800a016:	4605      	mov	r5, r0
	while (len > 0) {
 800a018:	b302      	cbz	r2, 800a05c <falcon_inner_i_shake256_inject+0x4c>
 800a01a:	460e      	mov	r6, r1
 800a01c:	4614      	mov	r4, r2
		size_t clen, u;

		clen = 136 - dptr;
 800a01e:	f1c7 0088 	rsb	r0, r7, #136	; 0x88
 800a022:	42a0      	cmp	r0, r4
 800a024:	bf28      	it	cs
 800a026:	4620      	movcs	r0, r4
		if (clen > len) {
			clen = len;
		}
		for (u = 0; u < clen; u ++) {
 800a028:	b180      	cbz	r0, 800a04c <falcon_inner_i_shake256_inject+0x3c>
 800a02a:	f107 3cff 	add.w	ip, r7, #4294967295
 800a02e:	f106 3eff 	add.w	lr, r6, #4294967295
 800a032:	44ac      	add	ip, r5
 800a034:	eb0e 0100 	add.w	r1, lr, r0
			sc->st.dbuf[dptr + u] ^= in[u];
 800a038:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
 800a03c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
		for (u = 0; u < clen; u ++) {
 800a040:	458e      	cmp	lr, r1
			sc->st.dbuf[dptr + u] ^= in[u];
 800a042:	ea83 0302 	eor.w	r3, r3, r2
 800a046:	f88c 3000 	strb.w	r3, [ip]
		for (u = 0; u < clen; u ++) {
 800a04a:	d1f5      	bne.n	800a038 <falcon_inner_i_shake256_inject+0x28>
		}
		dptr += clen;
 800a04c:	4407      	add	r7, r0
		in += clen;
		len -= clen;
		if (dptr == 136) {
 800a04e:	2f88      	cmp	r7, #136	; 0x88
		in += clen;
 800a050:	4406      	add	r6, r0
		len -= clen;
 800a052:	eba4 0400 	sub.w	r4, r4, r0
		if (dptr == 136) {
 800a056:	d005      	beq.n	800a064 <falcon_inner_i_shake256_inject+0x54>
	while (len > 0) {
 800a058:	2c00      	cmp	r4, #0
 800a05a:	d1e0      	bne.n	800a01e <falcon_inner_i_shake256_inject+0xe>
			process_block(sc->st.A);
			dptr = 0;
		}
	}
	sc->dptr = dptr;
 800a05c:	2300      	movs	r3, #0
 800a05e:	e9c5 7332 	strd	r7, r3, [r5, #200]	; 0xc8
}
 800a062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			process_block(sc->st.A);
 800a064:	4628      	mov	r0, r5
 800a066:	f7ff fb73 	bl	8009750 <process_block>
			dptr = 0;
 800a06a:	2700      	movs	r7, #0
	while (len > 0) {
 800a06c:	2c00      	cmp	r4, #0
 800a06e:	d1d6      	bne.n	800a01e <falcon_inner_i_shake256_inject+0xe>
 800a070:	e7f4      	b.n	800a05c <falcon_inner_i_shake256_inject+0x4c>
 800a072:	bf00      	nop
	...

0800a080 <mq_div_12289>:
	 * After the shift, result may still be larger than q, but it
	 * will be lower than 2*q, so a conditional subtraction works.
	 */

	z = x * y;
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a080:	4bae      	ldr	r3, [pc, #696]	; (800a33c <mq_div_12289+0x2bc>)
 800a082:	fb01 f303 	mul.w	r3, r1, r3
 800a086:	b29b      	uxth	r3, r3
 800a088:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a08c:	eb03 3302 	add.w	r3, r3, r2, lsl #12
	z = x * y;
 800a090:	f642 22c8 	movw	r2, #10952	; 0x2ac8
	 * When adding z and w, the result will have its low 16 bits
	 * equal to 0. Since x, y and z are lower than q, the sum will
	 * be no more than (2^15 - 1) * q + (q - 1)^2, which will
	 * fit on 29 bits.
	 */
	z = (z + w) >> 16;
 800a094:	fb02 3101 	mla	r1, r2, r1, r3
	/*
	 * After the shift, analysis shows that the value will be less
	 * than 2q. We do a subtraction then conditional subtraction to
	 * ensure the result is in the expected range.
	 */
	z -= Q;
 800a098:	f46f 5240 	mvn.w	r2, #12288	; 0x3000
	z += Q & -(z >> 31);
 800a09c:	f243 0301 	movw	r3, #12289	; 0x3001
	z -= Q;
 800a0a0:	eb02 4111 	add.w	r1, r2, r1, lsr #16
	z += Q & -(z >> 31);
 800a0a4:	ea03 72e1 	and.w	r2, r3, r1, asr #31
 800a0a8:	4411      	add	r1, r2
/*
 * Divide x by y modulo q = 12289.
 */
static inline uint32_t
mq_div_12289(uint32_t x, uint32_t y)
{
 800a0aa:	b530      	push	{r4, r5, lr}
	z = x * y;
 800a0ac:	fb01 f401 	mul.w	r4, r1, r1
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a0b0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a0b4:	ebc4 3202 	rsb	r2, r4, r2, lsl #12
 800a0b8:	b292      	uxth	r2, r2
 800a0ba:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800a0be:	eb02 3c05 	add.w	ip, r2, r5, lsl #12
	z = (z + w) >> 16;
 800a0c2:	44a4      	add	ip, r4
	z -= Q;
 800a0c4:	ebc3 4c1c 	rsb	ip, r3, ip, lsr #16
	z += Q & -(z >> 31);
 800a0c8:	ea03 72ec 	and.w	r2, r3, ip, asr #31
 800a0cc:	4494      	add	ip, r2
	z = x * y;
 800a0ce:	fb0c f401 	mul.w	r4, ip, r1
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a0d2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a0d6:	ebc4 3202 	rsb	r2, r4, r2, lsl #12
 800a0da:	b292      	uxth	r2, r2
 800a0dc:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800a0e0:	eb02 3205 	add.w	r2, r2, r5, lsl #12
	z = (z + w) >> 16;
 800a0e4:	4422      	add	r2, r4
	z -= Q;
 800a0e6:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
	z += Q & -(z >> 31);
 800a0ea:	ea03 74e2 	and.w	r4, r3, r2, asr #31
 800a0ee:	4422      	add	r2, r4
	z = x * y;
 800a0f0:	fb0c fc02 	mul.w	ip, ip, r2
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a0f4:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 800a0f8:	ebcc 3404 	rsb	r4, ip, r4, lsl #12
 800a0fc:	b2a4      	uxth	r4, r4
 800a0fe:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800a102:	eb04 3e05 	add.w	lr, r4, r5, lsl #12
	z = (z + w) >> 16;
 800a106:	44e6      	add	lr, ip
	z -= Q;
 800a108:	ebc3 4e1e 	rsb	lr, r3, lr, lsr #16
	z += Q & -(z >> 31);
 800a10c:	ea03 74ee 	and.w	r4, r3, lr, asr #31
 800a110:	44a6      	add	lr, r4
	z = x * y;
 800a112:	fb0e fe0e 	mul.w	lr, lr, lr
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a116:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800a11a:	ebce 3404 	rsb	r4, lr, r4, lsl #12
 800a11e:	b2a4      	uxth	r4, r4
 800a120:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800a124:	eb04 3c05 	add.w	ip, r4, r5, lsl #12
	z = (z + w) >> 16;
 800a128:	44f4      	add	ip, lr
	z -= Q;
 800a12a:	ebc3 4c1c 	rsb	ip, r3, ip, lsr #16
	z += Q & -(z >> 31);
 800a12e:	ea03 74ec 	and.w	r4, r3, ip, asr #31
 800a132:	44a4      	add	ip, r4
	z = x * y;
 800a134:	fb0c fc0c 	mul.w	ip, ip, ip
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a138:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 800a13c:	ebcc 3404 	rsb	r4, ip, r4, lsl #12
 800a140:	b2a4      	uxth	r4, r4
 800a142:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800a146:	eb04 3405 	add.w	r4, r4, r5, lsl #12
	z = (z + w) >> 16;
 800a14a:	4464      	add	r4, ip
	z -= Q;
 800a14c:	ebc3 4414 	rsb	r4, r3, r4, lsr #16
	z += Q & -(z >> 31);
 800a150:	ea03 75e4 	and.w	r5, r3, r4, asr #31
 800a154:	442c      	add	r4, r5
	z = x * y;
 800a156:	fb04 f404 	mul.w	r4, r4, r4
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a15a:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 800a15e:	ebc4 3c0c 	rsb	ip, r4, ip, lsl #12
 800a162:	fa1f fc8c 	uxth.w	ip, ip
 800a166:	eb0c 054c 	add.w	r5, ip, ip, lsl #1
 800a16a:	eb0c 3e05 	add.w	lr, ip, r5, lsl #12
	z = (z + w) >> 16;
 800a16e:	44a6      	add	lr, r4
	z -= Q;
 800a170:	ebc3 4e1e 	rsb	lr, r3, lr, lsr #16
	z += Q & -(z >> 31);
 800a174:	ea03 74ee 	and.w	r4, r3, lr, asr #31
 800a178:	44a6      	add	lr, r4
	z = x * y;
 800a17a:	fb0e fe0e 	mul.w	lr, lr, lr
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a17e:	eb0e 0c4e 	add.w	ip, lr, lr, lsl #1
 800a182:	ebce 3c0c 	rsb	ip, lr, ip, lsl #12
 800a186:	fa1f fc8c 	uxth.w	ip, ip
 800a18a:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 800a18e:	eb0c 3c04 	add.w	ip, ip, r4, lsl #12
	z = (z + w) >> 16;
 800a192:	44f4      	add	ip, lr
	z -= Q;
 800a194:	ebc3 4c1c 	rsb	ip, r3, ip, lsr #16
	z += Q & -(z >> 31);
 800a198:	ea03 74ec 	and.w	r4, r3, ip, asr #31
 800a19c:	44a4      	add	ip, r4
	z = x * y;
 800a19e:	fb0c fc0c 	mul.w	ip, ip, ip
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a1a2:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 800a1a6:	ebcc 3404 	rsb	r4, ip, r4, lsl #12
 800a1aa:	b2a4      	uxth	r4, r4
 800a1ac:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800a1b0:	eb04 3405 	add.w	r4, r4, r5, lsl #12
	z = (z + w) >> 16;
 800a1b4:	4464      	add	r4, ip
	z -= Q;
 800a1b6:	ebc3 4414 	rsb	r4, r3, r4, lsr #16
	z += Q & -(z >> 31);
 800a1ba:	ea03 75e4 	and.w	r5, r3, r4, asr #31
 800a1be:	442c      	add	r4, r5
	z = x * y;
 800a1c0:	fb04 f202 	mul.w	r2, r4, r2
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a1c4:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 800a1c8:	ebc2 3c0c 	rsb	ip, r2, ip, lsl #12
 800a1cc:	fa1f fc8c 	uxth.w	ip, ip
 800a1d0:	eb0c 054c 	add.w	r5, ip, ip, lsl #1
 800a1d4:	eb0c 3c05 	add.w	ip, ip, r5, lsl #12
	z = (z + w) >> 16;
 800a1d8:	4494      	add	ip, r2
	z -= Q;
 800a1da:	ebc3 4c1c 	rsb	ip, r3, ip, lsr #16
	z += Q & -(z >> 31);
 800a1de:	ea03 72ec 	and.w	r2, r3, ip, asr #31
 800a1e2:	4494      	add	ip, r2
	z = x * y;
 800a1e4:	fb04 f40c 	mul.w	r4, r4, ip
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a1e8:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800a1ec:	ebc4 3e0e 	rsb	lr, r4, lr, lsl #12
 800a1f0:	fa1f fe8e 	uxth.w	lr, lr
 800a1f4:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
 800a1f8:	eb0e 3e02 	add.w	lr, lr, r2, lsl #12
	z = (z + w) >> 16;
 800a1fc:	44a6      	add	lr, r4
	z -= Q;
 800a1fe:	ebc3 4e1e 	rsb	lr, r3, lr, lsr #16
	z += Q & -(z >> 31);
 800a202:	ea03 72ee 	and.w	r2, r3, lr, asr #31
 800a206:	4496      	add	lr, r2
	z = x * y;
 800a208:	fb0e f40e 	mul.w	r4, lr, lr
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a20c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a210:	ebc4 3202 	rsb	r2, r4, r2, lsl #12
 800a214:	b292      	uxth	r2, r2
 800a216:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800a21a:	eb02 3205 	add.w	r2, r2, r5, lsl #12
	z = (z + w) >> 16;
 800a21e:	4422      	add	r2, r4
	z -= Q;
 800a220:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
	z += Q & -(z >> 31);
 800a224:	ea03 74e2 	and.w	r4, r3, r2, asr #31
 800a228:	4422      	add	r2, r4
	z = x * y;
 800a22a:	fb02 f202 	mul.w	r2, r2, r2
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a22e:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 800a232:	ebc2 3404 	rsb	r4, r2, r4, lsl #12
 800a236:	b2a4      	uxth	r4, r4
 800a238:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800a23c:	eb04 3405 	add.w	r4, r4, r5, lsl #12
	z = (z + w) >> 16;
 800a240:	4414      	add	r4, r2
	z -= Q;
 800a242:	ebc3 4414 	rsb	r4, r3, r4, lsr #16
	z += Q & -(z >> 31);
 800a246:	ea03 72e4 	and.w	r2, r3, r4, asr #31
 800a24a:	4414      	add	r4, r2
	z = x * y;
 800a24c:	fb0c f404 	mul.w	r4, ip, r4
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a250:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a254:	ebc4 3202 	rsb	r2, r4, r2, lsl #12
 800a258:	b292      	uxth	r2, r2
 800a25a:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 800a25e:	eb02 3c0c 	add.w	ip, r2, ip, lsl #12
	z = (z + w) >> 16;
 800a262:	44a4      	add	ip, r4
	z -= Q;
 800a264:	ebc3 4c1c 	rsb	ip, r3, ip, lsr #16
	z += Q & -(z >> 31);
 800a268:	ea03 72ec 	and.w	r2, r3, ip, asr #31
 800a26c:	4494      	add	ip, r2
	z = x * y;
 800a26e:	fb0c fc0c 	mul.w	ip, ip, ip
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a272:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 800a276:	ebcc 3202 	rsb	r2, ip, r2, lsl #12
 800a27a:	b292      	uxth	r2, r2
 800a27c:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 800a280:	eb02 3204 	add.w	r2, r2, r4, lsl #12
	z = (z + w) >> 16;
 800a284:	4462      	add	r2, ip
	z -= Q;
 800a286:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
	z += Q & -(z >> 31);
 800a28a:	ea03 74e2 	and.w	r4, r3, r2, asr #31
 800a28e:	4422      	add	r2, r4
	z = x * y;
 800a290:	fb02 f202 	mul.w	r2, r2, r2
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a294:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 800a298:	ebc2 3404 	rsb	r4, r2, r4, lsl #12
 800a29c:	b2a4      	uxth	r4, r4
 800a29e:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 800a2a2:	eb04 340c 	add.w	r4, r4, ip, lsl #12
	z = (z + w) >> 16;
 800a2a6:	4414      	add	r4, r2
	z -= Q;
 800a2a8:	ebc3 4414 	rsb	r4, r3, r4, lsr #16
	z += Q & -(z >> 31);
 800a2ac:	ea03 72e4 	and.w	r2, r3, r4, asr #31
 800a2b0:	4414      	add	r4, r2
	z = x * y;
 800a2b2:	fb0e f404 	mul.w	r4, lr, r4
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a2b6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a2ba:	ebc4 3202 	rsb	r2, r4, r2, lsl #12
 800a2be:	b292      	uxth	r2, r2
 800a2c0:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 800a2c4:	eb02 320c 	add.w	r2, r2, ip, lsl #12
	z = (z + w) >> 16;
 800a2c8:	4422      	add	r2, r4
	z -= Q;
 800a2ca:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
	z += Q & -(z >> 31);
 800a2ce:	ea03 74e2 	and.w	r4, r3, r2, asr #31
 800a2d2:	4422      	add	r2, r4
	z = x * y;
 800a2d4:	fb02 f202 	mul.w	r2, r2, r2
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a2d8:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 800a2dc:	ebc2 3404 	rsb	r4, r2, r4, lsl #12
 800a2e0:	b2a4      	uxth	r4, r4
 800a2e2:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 800a2e6:	eb04 340c 	add.w	r4, r4, ip, lsl #12
	z = (z + w) >> 16;
 800a2ea:	4414      	add	r4, r2
	z -= Q;
 800a2ec:	ebc3 4414 	rsb	r4, r3, r4, lsr #16
	z += Q & -(z >> 31);
 800a2f0:	ea03 72e4 	and.w	r2, r3, r4, asr #31
 800a2f4:	4414      	add	r4, r2
	z = x * y;
 800a2f6:	fb04 f101 	mul.w	r1, r4, r1
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a2fa:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a2fe:	ebc1 3202 	rsb	r2, r1, r2, lsl #12
 800a302:	b292      	uxth	r2, r2
 800a304:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 800a308:	eb02 3204 	add.w	r2, r2, r4, lsl #12
	z = (z + w) >> 16;
 800a30c:	440a      	add	r2, r1
	z -= Q;
 800a30e:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
	z += Q & -(z >> 31);
 800a312:	ea03 71e2 	and.w	r1, r3, r2, asr #31
 800a316:	440a      	add	r2, r1
	z = x * y;
 800a318:	fb00 f202 	mul.w	r2, r0, r2
	w = ((z * Q0I) & 0xFFFF) * Q;
 800a31c:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800a320:	ebc2 3000 	rsb	r0, r2, r0, lsl #12
 800a324:	b280      	uxth	r0, r0
 800a326:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800a32a:	eb00 3001 	add.w	r0, r0, r1, lsl #12
	z = (z + w) >> 16;
 800a32e:	4410      	add	r0, r2
	z -= Q;
 800a330:	ebc3 4010 	rsb	r0, r3, r0, lsr #16
	z += Q & -(z >> 31);
 800a334:	ea03 73e0 	and.w	r3, r3, r0, asr #31
	/*
	 * Final multiplication with x, which is not in Montgomery
	 * representation, computes the correct division result.
	 */
	return mq_montymul(y18, x);
}
 800a338:	4418      	add	r0, r3
 800a33a:	bd30      	pop	{r4, r5, pc}
 800a33c:	08055538 	.word	0x08055538

0800a340 <oslib_test_008_002_execute>:
 *   is freed using chHeapFree(), must not fail.
 * - [8.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_008_002_execute(void) {
 800a340:	b538      	push	{r3, r4, r5, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [8.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 800a342:	4d18      	ldr	r5, [pc, #96]	; (800a3a4 <oslib_test_008_002_execute+0x64>)
 800a344:	2301      	movs	r3, #1
 800a346:	602b      	str	r3, [r5, #0]
 800a348:	2330      	movs	r3, #48	; 0x30
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	4816      	ldr	r0, [pc, #88]	; (800a3a8 <oslib_test_008_002_execute+0x68>)
 800a350:	f7f9 fe6e 	bl	8004030 <chMtxLockS>
 800a354:	2300      	movs	r3, #0
 800a356:	f383 8811 	msr	BASEPRI, r3
  qp = &heapp->header;
 800a35a:	4c14      	ldr	r4, [pc, #80]	; (800a3ac <oslib_test_008_002_execute+0x6c>)
  while (H_NEXT(qp) != NULL) {
 800a35c:	6824      	ldr	r4, [r4, #0]
 800a35e:	2c00      	cmp	r4, #0
 800a360:	d1fc      	bne.n	800a35c <oslib_test_008_002_execute+0x1c>
  H_UNLOCK(heapp);
 800a362:	4811      	ldr	r0, [pc, #68]	; (800a3a8 <oslib_test_008_002_execute+0x68>)
 800a364:	f7f9 ff04 	bl	8004170 <chMtxUnlock>
 800a368:	4811      	ldr	r0, [pc, #68]	; (800a3b0 <oslib_test_008_002_execute+0x70>)
 800a36a:	2208      	movs	r2, #8
 800a36c:	2110      	movs	r1, #16
 800a36e:	f7fa fa07 	bl	8004780 <chHeapAllocAligned>
  if (!condition) {
 800a372:	b158      	cbz	r0, 800a38c <oslib_test_008_002_execute+0x4c>
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
    chHeapFree(p1);
 800a374:	f7fa fa84 	bl	8004880 <chHeapFree>
  }
  test_end_step(1);

  /* [8.2.2] Testing allocation failure.*/
  test_set_step(2);
 800a378:	2302      	movs	r3, #2
 800a37a:	2208      	movs	r2, #8
 800a37c:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800a380:	4620      	mov	r0, r4
 800a382:	602b      	str	r3, [r5, #0]
 800a384:	f7fa f9fc 	bl	8004780 <chHeapAllocAligned>
 800a388:	b930      	cbnz	r0, 800a398 <oslib_test_008_002_execute+0x58>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  }
  test_end_step(2);
}
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
  chtest.failure_message = msg;
 800a38c:	4b09      	ldr	r3, [pc, #36]	; (800a3b4 <oslib_test_008_002_execute+0x74>)
 800a38e:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 800a390:	f240 1201 	movw	r2, #257	; 0x101
 800a394:	80aa      	strh	r2, [r5, #4]
 800a396:	bd38      	pop	{r3, r4, r5, pc}
  chtest.failure_message = msg;
 800a398:	4b07      	ldr	r3, [pc, #28]	; (800a3b8 <oslib_test_008_002_execute+0x78>)
 800a39a:	60ab      	str	r3, [r5, #8]
  chtest.global_fail     = true;
 800a39c:	f240 1201 	movw	r2, #257	; 0x101
 800a3a0:	80aa      	strh	r2, [r5, #4]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	20000b74 	.word	0x20000b74
 800a3a8:	20000ba8 	.word	0x20000ba8
 800a3ac:	20000ba0 	.word	0x20000ba0
 800a3b0:	20001648 	.word	0x20001648
 800a3b4:	080154c4 	.word	0x080154c4
 800a3b8:	080154ac 	.word	0x080154ac
 800a3bc:	00000000 	.word	0x00000000

0800a3c0 <oslib_test_009_005_teardown>:
 * - [9.5.6] Retrieving the dynamic objects FIFO by name again, must
 *   not exist.
 * .
 */

static void oslib_test_009_005_teardown(void) {
 800a3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c4:	2330      	movs	r3, #48	; 0x30
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	4e25      	ldr	r6, [pc, #148]	; (800a460 <oslib_test_009_005_teardown+0xa0>)
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f7f9 fe2f 	bl	8004030 <chMtxLockS>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a3d8:	f856 4f40 	ldr.w	r4, [r6, #64]!
  while (p != (dyn_element_t *)dlp) {
 800a3dc:	42b4      	cmp	r4, r6
 800a3de:	d039      	beq.n	800a454 <oslib_test_009_005_teardown+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a3e0:	4f20      	ldr	r7, [pc, #128]	; (800a464 <oslib_test_009_005_teardown+0xa4>)
 800a3e2:	e002      	b.n	800a3ea <oslib_test_009_005_teardown+0x2a>
    p = p->next;
 800a3e4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a3e6:	42b4      	cmp	r4, r6
 800a3e8:	d034      	beq.n	800a454 <oslib_test_009_005_teardown+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a3ea:	f104 0008 	add.w	r0, r4, #8
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	f7f5 ffce 	bl	8000390 <strcmp>
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d1f4      	bne.n	800a3e4 <oslib_test_009_005_teardown+0x24>
  if (dep != NULL) {
 800a3fa:	b35c      	cbz	r4, 800a454 <oslib_test_009_005_teardown+0x94>
    dep->refs++;
 800a3fc:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800a3fe:	4818      	ldr	r0, [pc, #96]	; (800a460 <oslib_test_009_005_teardown+0xa0>)
    dep->refs++;
 800a400:	3301      	adds	r3, #1
 800a402:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800a404:	f7f9 feb4 	bl	8004170 <chMtxUnlock>
  dyn_objects_fifo_t *dofp;

  dofp = chFactoryFindObjectsFIFO("myfifo");
  if (dofp != NULL) {
    while (dofp->element.refs > 0U) {
 800a408:	6863      	ldr	r3, [r4, #4]
 800a40a:	b1f3      	cbz	r3, 800a44a <oslib_test_009_005_teardown+0x8a>
 800a40c:	4f14      	ldr	r7, [pc, #80]	; (800a460 <oslib_test_009_005_teardown+0xa0>)
 800a40e:	f04f 0830 	mov.w	r8, #48	; 0x30
 800a412:	f388 8811 	msr	BASEPRI, r8
 800a416:	4638      	mov	r0, r7
 800a418:	f7f9 fe0a 	bl	8004030 <chMtxLockS>
 800a41c:	f385 8811 	msr	BASEPRI, r5
  dep->refs--;
 800a420:	6863      	ldr	r3, [r4, #4]
 800a422:	3b01      	subs	r3, #1
 800a424:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800a426:	b953      	cbnz	r3, 800a43e <oslib_test_009_005_teardown+0x7e>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800a428:	480f      	ldr	r0, [pc, #60]	; (800a468 <oslib_test_009_005_teardown+0xa8>)
 800a42a:	e001      	b.n	800a430 <oslib_test_009_005_teardown+0x70>
    if (prev->next == element) {
 800a42c:	4284      	cmp	r4, r0
 800a42e:	d00e      	beq.n	800a44e <oslib_test_009_005_teardown+0x8e>
  while (prev->next != (dyn_element_t *)dlp) {
 800a430:	4603      	mov	r3, r0
 800a432:	6800      	ldr	r0, [r0, #0]
 800a434:	42b0      	cmp	r0, r6
 800a436:	d1f9      	bne.n	800a42c <oslib_test_009_005_teardown+0x6c>
  return NULL;
 800a438:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800a43a:	f7fa fa21 	bl	8004880 <chHeapFree>
  F_UNLOCK();
 800a43e:	4638      	mov	r0, r7
 800a440:	f7f9 fe96 	bl	8004170 <chMtxUnlock>
 800a444:	6863      	ldr	r3, [r4, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1e3      	bne.n	800a412 <oslib_test_009_005_teardown+0x52>
      chFactoryReleaseObjectsFIFO(dofp);
    }
  }
}
 800a44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      prev->next = element->next;
 800a44e:	6822      	ldr	r2, [r4, #0]
 800a450:	601a      	str	r2, [r3, #0]
      return element;
 800a452:	e7f2      	b.n	800a43a <oslib_test_009_005_teardown+0x7a>
 800a454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  F_UNLOCK();
 800a458:	4801      	ldr	r0, [pc, #4]	; (800a460 <oslib_test_009_005_teardown+0xa0>)
 800a45a:	f7f9 be89 	b.w	8004170 <chMtxUnlock>
 800a45e:	bf00      	nop
 800a460:	20000b18 	.word	0x20000b18
 800a464:	08016200 	.word	0x08016200
 800a468:	20000b58 	.word	0x20000b58
 800a46c:	00000000 	.word	0x00000000

0800a470 <oslib_test_009_001_teardown>:
static void oslib_test_009_001_teardown(void) {
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	2330      	movs	r3, #48	; 0x30
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	4d15      	ldr	r5, [pc, #84]	; (800a4d0 <oslib_test_009_001_teardown+0x60>)
 800a47a:	4628      	mov	r0, r5
 800a47c:	f7f9 fdd8 	bl	8004030 <chMtxLockS>
 800a480:	2300      	movs	r3, #0
 800a482:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a486:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800a48a:	42ac      	cmp	r4, r5
 800a48c:	d01b      	beq.n	800a4c6 <oslib_test_009_001_teardown+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a48e:	4e11      	ldr	r6, [pc, #68]	; (800a4d4 <oslib_test_009_001_teardown+0x64>)
 800a490:	e002      	b.n	800a498 <oslib_test_009_001_teardown+0x28>
    p = p->next;
 800a492:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a494:	42ac      	cmp	r4, r5
 800a496:	d016      	beq.n	800a4c6 <oslib_test_009_001_teardown+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a498:	f104 0008 	add.w	r0, r4, #8
 800a49c:	4631      	mov	r1, r6
 800a49e:	f7f5 ff77 	bl	8000390 <strcmp>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d1f5      	bne.n	800a492 <oslib_test_009_001_teardown+0x22>
  if (dep != NULL) {
 800a4a6:	b174      	cbz	r4, 800a4c6 <oslib_test_009_001_teardown+0x56>
    dep->refs++;
 800a4a8:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800a4aa:	4809      	ldr	r0, [pc, #36]	; (800a4d0 <oslib_test_009_001_teardown+0x60>)
    dep->refs++;
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800a4b0:	f7f9 fe5e 	bl	8004170 <chMtxUnlock>
    while (rop->element.refs > 0U) {
 800a4b4:	6863      	ldr	r3, [r4, #4]
 800a4b6:	b12b      	cbz	r3, 800a4c4 <oslib_test_009_001_teardown+0x54>
      chFactoryReleaseObject(rop);
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f7fc f889 	bl	80065d0 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 800a4be:	6863      	ldr	r3, [r4, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1f9      	bne.n	800a4b8 <oslib_test_009_001_teardown+0x48>
}
 800a4c4:	bd70      	pop	{r4, r5, r6, pc}
 800a4c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4ca:	4801      	ldr	r0, [pc, #4]	; (800a4d0 <oslib_test_009_001_teardown+0x60>)
 800a4cc:	f7f9 be50 	b.w	8004170 <chMtxUnlock>
 800a4d0:	20000b18 	.word	0x20000b18
 800a4d4:	08016208 	.word	0x08016208
	...

0800a4e0 <oslib_test_009_002_teardown>:
static void oslib_test_009_002_teardown(void) {
 800a4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e4:	2330      	movs	r3, #48	; 0x30
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	4e25      	ldr	r6, [pc, #148]	; (800a580 <oslib_test_009_002_teardown+0xa0>)
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f7f9 fd9f 	bl	8004030 <chMtxLockS>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a4f8:	f856 4f24 	ldr.w	r4, [r6, #36]!
  while (p != (dyn_element_t *)dlp) {
 800a4fc:	42b4      	cmp	r4, r6
 800a4fe:	d039      	beq.n	800a574 <oslib_test_009_002_teardown+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a500:	4f20      	ldr	r7, [pc, #128]	; (800a584 <oslib_test_009_002_teardown+0xa4>)
 800a502:	e002      	b.n	800a50a <oslib_test_009_002_teardown+0x2a>
    p = p->next;
 800a504:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a506:	42b4      	cmp	r4, r6
 800a508:	d034      	beq.n	800a574 <oslib_test_009_002_teardown+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a50a:	f104 0008 	add.w	r0, r4, #8
 800a50e:	4639      	mov	r1, r7
 800a510:	f7f5 ff3e 	bl	8000390 <strcmp>
 800a514:	4605      	mov	r5, r0
 800a516:	2800      	cmp	r0, #0
 800a518:	d1f4      	bne.n	800a504 <oslib_test_009_002_teardown+0x24>
  if (dep != NULL) {
 800a51a:	b35c      	cbz	r4, 800a574 <oslib_test_009_002_teardown+0x94>
    dep->refs++;
 800a51c:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800a51e:	4818      	ldr	r0, [pc, #96]	; (800a580 <oslib_test_009_002_teardown+0xa0>)
    dep->refs++;
 800a520:	3301      	adds	r3, #1
 800a522:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800a524:	f7f9 fe24 	bl	8004170 <chMtxUnlock>
    while (dbp->element.refs > 0U) {
 800a528:	6863      	ldr	r3, [r4, #4]
 800a52a:	b1f3      	cbz	r3, 800a56a <oslib_test_009_002_teardown+0x8a>
 800a52c:	4f14      	ldr	r7, [pc, #80]	; (800a580 <oslib_test_009_002_teardown+0xa0>)
 800a52e:	f04f 0830 	mov.w	r8, #48	; 0x30
 800a532:	f388 8811 	msr	BASEPRI, r8
 800a536:	4638      	mov	r0, r7
 800a538:	f7f9 fd7a 	bl	8004030 <chMtxLockS>
 800a53c:	f385 8811 	msr	BASEPRI, r5
  dep->refs--;
 800a540:	6863      	ldr	r3, [r4, #4]
 800a542:	3b01      	subs	r3, #1
 800a544:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800a546:	b953      	cbnz	r3, 800a55e <oslib_test_009_002_teardown+0x7e>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800a548:	480f      	ldr	r0, [pc, #60]	; (800a588 <oslib_test_009_002_teardown+0xa8>)
 800a54a:	e001      	b.n	800a550 <oslib_test_009_002_teardown+0x70>
    if (prev->next == element) {
 800a54c:	4284      	cmp	r4, r0
 800a54e:	d00e      	beq.n	800a56e <oslib_test_009_002_teardown+0x8e>
  while (prev->next != (dyn_element_t *)dlp) {
 800a550:	4603      	mov	r3, r0
 800a552:	6800      	ldr	r0, [r0, #0]
 800a554:	42b0      	cmp	r0, r6
 800a556:	d1f9      	bne.n	800a54c <oslib_test_009_002_teardown+0x6c>
  return NULL;
 800a558:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800a55a:	f7fa f991 	bl	8004880 <chHeapFree>
  F_UNLOCK();
 800a55e:	4638      	mov	r0, r7
 800a560:	f7f9 fe06 	bl	8004170 <chMtxUnlock>
 800a564:	6863      	ldr	r3, [r4, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1e3      	bne.n	800a532 <oslib_test_009_002_teardown+0x52>
}
 800a56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      prev->next = element->next;
 800a56e:	6822      	ldr	r2, [r4, #0]
 800a570:	601a      	str	r2, [r3, #0]
      return element;
 800a572:	e7f2      	b.n	800a55a <oslib_test_009_002_teardown+0x7a>
 800a574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  F_UNLOCK();
 800a578:	4801      	ldr	r0, [pc, #4]	; (800a580 <oslib_test_009_002_teardown+0xa0>)
 800a57a:	f7f9 bdf9 	b.w	8004170 <chMtxUnlock>
 800a57e:	bf00      	nop
 800a580:	20000b18 	.word	0x20000b18
 800a584:	08016210 	.word	0x08016210
 800a588:	20000b3c 	.word	0x20000b3c
 800a58c:	00000000 	.word	0x00000000

0800a590 <oslib_test_009_004_teardown>:
static void oslib_test_009_004_teardown(void) {
 800a590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a594:	2330      	movs	r3, #48	; 0x30
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	4e25      	ldr	r6, [pc, #148]	; (800a630 <oslib_test_009_004_teardown+0xa0>)
 800a59c:	4630      	mov	r0, r6
 800a59e:	f7f9 fd47 	bl	8004030 <chMtxLockS>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a5a8:	f856 4f3c 	ldr.w	r4, [r6, #60]!
  while (p != (dyn_element_t *)dlp) {
 800a5ac:	42b4      	cmp	r4, r6
 800a5ae:	d039      	beq.n	800a624 <oslib_test_009_004_teardown+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a5b0:	4f20      	ldr	r7, [pc, #128]	; (800a634 <oslib_test_009_004_teardown+0xa4>)
 800a5b2:	e002      	b.n	800a5ba <oslib_test_009_004_teardown+0x2a>
    p = p->next;
 800a5b4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a5b6:	42b4      	cmp	r4, r6
 800a5b8:	d034      	beq.n	800a624 <oslib_test_009_004_teardown+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a5ba:	f104 0008 	add.w	r0, r4, #8
 800a5be:	4639      	mov	r1, r7
 800a5c0:	f7f5 fee6 	bl	8000390 <strcmp>
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d1f4      	bne.n	800a5b4 <oslib_test_009_004_teardown+0x24>
  if (dep != NULL) {
 800a5ca:	b35c      	cbz	r4, 800a624 <oslib_test_009_004_teardown+0x94>
    dep->refs++;
 800a5cc:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800a5ce:	4818      	ldr	r0, [pc, #96]	; (800a630 <oslib_test_009_004_teardown+0xa0>)
    dep->refs++;
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800a5d4:	f7f9 fdcc 	bl	8004170 <chMtxUnlock>
    while (dmp->element.refs > 0U) {
 800a5d8:	6863      	ldr	r3, [r4, #4]
 800a5da:	b1f3      	cbz	r3, 800a61a <oslib_test_009_004_teardown+0x8a>
 800a5dc:	4f14      	ldr	r7, [pc, #80]	; (800a630 <oslib_test_009_004_teardown+0xa0>)
 800a5de:	f04f 0830 	mov.w	r8, #48	; 0x30
 800a5e2:	f388 8811 	msr	BASEPRI, r8
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	f7f9 fd22 	bl	8004030 <chMtxLockS>
 800a5ec:	f385 8811 	msr	BASEPRI, r5
  dep->refs--;
 800a5f0:	6863      	ldr	r3, [r4, #4]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800a5f6:	b953      	cbnz	r3, 800a60e <oslib_test_009_004_teardown+0x7e>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800a5f8:	480f      	ldr	r0, [pc, #60]	; (800a638 <oslib_test_009_004_teardown+0xa8>)
 800a5fa:	e001      	b.n	800a600 <oslib_test_009_004_teardown+0x70>
    if (prev->next == element) {
 800a5fc:	4284      	cmp	r4, r0
 800a5fe:	d00e      	beq.n	800a61e <oslib_test_009_004_teardown+0x8e>
  while (prev->next != (dyn_element_t *)dlp) {
 800a600:	4603      	mov	r3, r0
 800a602:	6800      	ldr	r0, [r0, #0]
 800a604:	42b0      	cmp	r0, r6
 800a606:	d1f9      	bne.n	800a5fc <oslib_test_009_004_teardown+0x6c>
  return NULL;
 800a608:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800a60a:	f7fa f939 	bl	8004880 <chHeapFree>
  F_UNLOCK();
 800a60e:	4638      	mov	r0, r7
 800a610:	f7f9 fdae 	bl	8004170 <chMtxUnlock>
 800a614:	6863      	ldr	r3, [r4, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1e3      	bne.n	800a5e2 <oslib_test_009_004_teardown+0x52>
}
 800a61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      prev->next = element->next;
 800a61e:	6822      	ldr	r2, [r4, #0]
 800a620:	601a      	str	r2, [r3, #0]
      return element;
 800a622:	e7f2      	b.n	800a60a <oslib_test_009_004_teardown+0x7a>
 800a624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  F_UNLOCK();
 800a628:	4801      	ldr	r0, [pc, #4]	; (800a630 <oslib_test_009_004_teardown+0xa0>)
 800a62a:	f7f9 bda1 	b.w	8004170 <chMtxUnlock>
 800a62e:	bf00      	nop
 800a630:	20000b18 	.word	0x20000b18
 800a634:	08016218 	.word	0x08016218
 800a638:	20000b54 	.word	0x20000b54
 800a63c:	00000000 	.word	0x00000000

0800a640 <oslib_test_009_006_teardown>:
 *   trigger an assertion.
 * - [9.6.6] Retrieving the dynamic pipe by name again, must not exist.
 * .
 */

static void oslib_test_009_006_teardown(void) {
 800a640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a644:	2330      	movs	r3, #48	; 0x30
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	4e25      	ldr	r6, [pc, #148]	; (800a6e0 <oslib_test_009_006_teardown+0xa0>)
 800a64c:	4630      	mov	r0, r6
 800a64e:	f7f9 fcef 	bl	8004030 <chMtxLockS>
 800a652:	2300      	movs	r3, #0
 800a654:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a658:	f856 4f44 	ldr.w	r4, [r6, #68]!
  while (p != (dyn_element_t *)dlp) {
 800a65c:	42b4      	cmp	r4, r6
 800a65e:	d039      	beq.n	800a6d4 <oslib_test_009_006_teardown+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a660:	4f20      	ldr	r7, [pc, #128]	; (800a6e4 <oslib_test_009_006_teardown+0xa4>)
 800a662:	e002      	b.n	800a66a <oslib_test_009_006_teardown+0x2a>
    p = p->next;
 800a664:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a666:	42b4      	cmp	r4, r6
 800a668:	d034      	beq.n	800a6d4 <oslib_test_009_006_teardown+0x94>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a66a:	f104 0008 	add.w	r0, r4, #8
 800a66e:	4639      	mov	r1, r7
 800a670:	f7f5 fe8e 	bl	8000390 <strcmp>
 800a674:	4605      	mov	r5, r0
 800a676:	2800      	cmp	r0, #0
 800a678:	d1f4      	bne.n	800a664 <oslib_test_009_006_teardown+0x24>
  if (dep != NULL) {
 800a67a:	b35c      	cbz	r4, 800a6d4 <oslib_test_009_006_teardown+0x94>
    dep->refs++;
 800a67c:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800a67e:	4818      	ldr	r0, [pc, #96]	; (800a6e0 <oslib_test_009_006_teardown+0xa0>)
    dep->refs++;
 800a680:	3301      	adds	r3, #1
 800a682:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800a684:	f7f9 fd74 	bl	8004170 <chMtxUnlock>
  dyn_pipe_t *dpp;

  dpp = chFactoryFindPipe("mypipe");
  if (dpp != NULL) {
    while (dpp->element.refs > 0U) {
 800a688:	6863      	ldr	r3, [r4, #4]
 800a68a:	b1f3      	cbz	r3, 800a6ca <oslib_test_009_006_teardown+0x8a>
 800a68c:	4f14      	ldr	r7, [pc, #80]	; (800a6e0 <oslib_test_009_006_teardown+0xa0>)
 800a68e:	f04f 0830 	mov.w	r8, #48	; 0x30
 800a692:	f388 8811 	msr	BASEPRI, r8
 800a696:	4638      	mov	r0, r7
 800a698:	f7f9 fcca 	bl	8004030 <chMtxLockS>
 800a69c:	f385 8811 	msr	BASEPRI, r5
  dep->refs--;
 800a6a0:	6863      	ldr	r3, [r4, #4]
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 800a6a6:	b953      	cbnz	r3, 800a6be <oslib_test_009_006_teardown+0x7e>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 800a6a8:	480f      	ldr	r0, [pc, #60]	; (800a6e8 <oslib_test_009_006_teardown+0xa8>)
 800a6aa:	e001      	b.n	800a6b0 <oslib_test_009_006_teardown+0x70>
    if (prev->next == element) {
 800a6ac:	4284      	cmp	r4, r0
 800a6ae:	d00e      	beq.n	800a6ce <oslib_test_009_006_teardown+0x8e>
  while (prev->next != (dyn_element_t *)dlp) {
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	6800      	ldr	r0, [r0, #0]
 800a6b4:	42b0      	cmp	r0, r6
 800a6b6:	d1f9      	bne.n	800a6ac <oslib_test_009_006_teardown+0x6c>
  return NULL;
 800a6b8:	2000      	movs	r0, #0
    chHeapFree((void *)dep);
 800a6ba:	f7fa f8e1 	bl	8004880 <chHeapFree>
  F_UNLOCK();
 800a6be:	4638      	mov	r0, r7
 800a6c0:	f7f9 fd56 	bl	8004170 <chMtxUnlock>
 800a6c4:	6863      	ldr	r3, [r4, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1e3      	bne.n	800a692 <oslib_test_009_006_teardown+0x52>
      chFactoryReleasePipe(dpp);
    }
  }
}
 800a6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      prev->next = element->next;
 800a6ce:	6822      	ldr	r2, [r4, #0]
 800a6d0:	601a      	str	r2, [r3, #0]
      return element;
 800a6d2:	e7f2      	b.n	800a6ba <oslib_test_009_006_teardown+0x7a>
 800a6d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  F_UNLOCK();
 800a6d8:	4801      	ldr	r0, [pc, #4]	; (800a6e0 <oslib_test_009_006_teardown+0xa0>)
 800a6da:	f7f9 bd49 	b.w	8004170 <chMtxUnlock>
 800a6de:	bf00      	nop
 800a6e0:	20000b18 	.word	0x20000b18
 800a6e4:	08016220 	.word	0x08016220
 800a6e8:	20000b5c 	.word	0x20000b5c
 800a6ec:	00000000 	.word	0x00000000

0800a6f0 <oslib_test_009_001_execute>:
static void oslib_test_009_001_execute(void) {
 800a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800a6f2:	4f4b      	ldr	r7, [pc, #300]	; (800a820 <oslib_test_009_001_execute+0x130>)
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	603b      	str	r3, [r7, #0]
 800a6f8:	2330      	movs	r3, #48	; 0x30
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	4d49      	ldr	r5, [pc, #292]	; (800a824 <oslib_test_009_001_execute+0x134>)
 800a700:	4628      	mov	r0, r5
 800a702:	f7f9 fc95 	bl	8004030 <chMtxLockS>
 800a706:	2300      	movs	r3, #0
 800a708:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a70c:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800a710:	42ac      	cmp	r4, r5
 800a712:	d018      	beq.n	800a746 <oslib_test_009_001_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a714:	4e44      	ldr	r6, [pc, #272]	; (800a828 <oslib_test_009_001_execute+0x138>)
 800a716:	e002      	b.n	800a71e <oslib_test_009_001_execute+0x2e>
    p = p->next;
 800a718:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a71a:	42ac      	cmp	r4, r5
 800a71c:	d013      	beq.n	800a746 <oslib_test_009_001_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a71e:	f104 0008 	add.w	r0, r4, #8
 800a722:	4631      	mov	r1, r6
 800a724:	f7f5 fe34 	bl	8000390 <strcmp>
 800a728:	2800      	cmp	r0, #0
 800a72a:	d1f5      	bne.n	800a718 <oslib_test_009_001_execute+0x28>
  if (dep != NULL) {
 800a72c:	b15c      	cbz	r4, 800a746 <oslib_test_009_001_execute+0x56>
    dep->refs++;
 800a72e:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800a730:	483c      	ldr	r0, [pc, #240]	; (800a824 <oslib_test_009_001_execute+0x134>)
    dep->refs++;
 800a732:	3301      	adds	r3, #1
 800a734:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800a736:	f7f9 fd1b 	bl	8004170 <chMtxUnlock>
  chtest.failure_message = msg;
 800a73a:	4b3c      	ldr	r3, [pc, #240]	; (800a82c <oslib_test_009_001_execute+0x13c>)
 800a73c:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a73e:	f240 1201 	movw	r2, #257	; 0x101
 800a742:	80ba      	strh	r2, [r7, #4]
}
 800a744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a746:	4837      	ldr	r0, [pc, #220]	; (800a824 <oslib_test_009_001_execute+0x134>)
 800a748:	f7f9 fd12 	bl	8004170 <chMtxUnlock>
  test_set_step(2);
 800a74c:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 800a74e:	4838      	ldr	r0, [pc, #224]	; (800a830 <oslib_test_009_001_execute+0x140>)
  test_set_step(2);
 800a750:	603b      	str	r3, [r7, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 800a752:	f008 fb25 	bl	8012da0 <chFactoryRegisterObject.constprop.0>
  if (!condition) {
 800a756:	4604      	mov	r4, r0
 800a758:	2800      	cmp	r0, #0
 800a75a:	d03d      	beq.n	800a7d8 <oslib_test_009_001_execute+0xe8>
  test_set_step(3);
 800a75c:	2503      	movs	r5, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800a75e:	4835      	ldr	r0, [pc, #212]	; (800a834 <oslib_test_009_001_execute+0x144>)
  test_set_step(3);
 800a760:	603d      	str	r5, [r7, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800a762:	f008 fb1d 	bl	8012da0 <chFactoryRegisterObject.constprop.0>
 800a766:	2800      	cmp	r0, #0
 800a768:	d13c      	bne.n	800a7e4 <oslib_test_009_001_execute+0xf4>
  test_set_step(4);
 800a76a:	2304      	movs	r3, #4
 800a76c:	603b      	str	r3, [r7, #0]
    rop1 = chFactoryFindObject("myobj");
 800a76e:	f008 fae7 	bl	8012d40 <chFactoryFindObject.constprop.0>
 800a772:	2800      	cmp	r0, #0
 800a774:	d03c      	beq.n	800a7f0 <oslib_test_009_001_execute+0x100>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 800a776:	6901      	ldr	r1, [r0, #16]
 800a778:	680a      	ldr	r2, [r1, #0]
 800a77a:	f245 56aa 	movw	r6, #21930	; 0x55aa
 800a77e:	42b2      	cmp	r2, r6
 800a780:	d142      	bne.n	800a808 <oslib_test_009_001_execute+0x118>
 800a782:	4284      	cmp	r4, r0
 800a784:	d13a      	bne.n	800a7fc <oslib_test_009_001_execute+0x10c>
 800a786:	6863      	ldr	r3, [r4, #4]
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d137      	bne.n	800a7fc <oslib_test_009_001_execute+0x10c>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 800a78c:	6065      	str	r5, [r4, #4]
 800a78e:	680b      	ldr	r3, [r1, #0]
 800a790:	4293      	cmp	r3, r2
 800a792:	d139      	bne.n	800a808 <oslib_test_009_001_execute+0x118>
    chFactoryReleaseObject(rop2);
 800a794:	f7fb ff1c 	bl	80065d0 <chFactoryReleaseObject>
 800a798:	6863      	ldr	r3, [r4, #4]
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d13a      	bne.n	800a814 <oslib_test_009_001_execute+0x124>
    chFactoryReleaseObject(rop1);
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f7fb ff16 	bl	80065d0 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 800a7a4:	6860      	ldr	r0, [r4, #4]
 800a7a6:	4924      	ldr	r1, [pc, #144]	; (800a838 <oslib_test_009_001_execute+0x148>)
 800a7a8:	1e43      	subs	r3, r0, #1
 800a7aa:	4258      	negs	r0, r3
 800a7ac:	4158      	adcs	r0, r3
 800a7ae:	f7fc f82f 	bl	8006810 <__test_assert>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d1c6      	bne.n	800a744 <oslib_test_009_001_execute+0x54>
    chFactoryReleaseObject(rop);
 800a7b6:	4620      	mov	r0, r4
  test_set_step(5);
 800a7b8:	2305      	movs	r3, #5
 800a7ba:	603b      	str	r3, [r7, #0]
    chFactoryReleaseObject(rop);
 800a7bc:	f7fb ff08 	bl	80065d0 <chFactoryReleaseObject>
  test_set_step(6);
 800a7c0:	2306      	movs	r3, #6
 800a7c2:	603b      	str	r3, [r7, #0]
    rop = chFactoryFindObject("myobj");
 800a7c4:	f008 fabc 	bl	8012d40 <chFactoryFindObject.constprop.0>
    test_assert(rop == NULL, "found");
 800a7c8:	fab0 f080 	clz	r0, r0
}
 800a7cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(rop == NULL, "found");
 800a7d0:	4916      	ldr	r1, [pc, #88]	; (800a82c <oslib_test_009_001_execute+0x13c>)
 800a7d2:	0940      	lsrs	r0, r0, #5
 800a7d4:	f7fc b81c 	b.w	8006810 <__test_assert>
  chtest.failure_message = msg;
 800a7d8:	4b18      	ldr	r3, [pc, #96]	; (800a83c <oslib_test_009_001_execute+0x14c>)
 800a7da:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a7dc:	f240 1201 	movw	r2, #257	; 0x101
 800a7e0:	80ba      	strh	r2, [r7, #4]
}
 800a7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a7e4:	4b16      	ldr	r3, [pc, #88]	; (800a840 <oslib_test_009_001_execute+0x150>)
 800a7e6:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a7e8:	f240 1201 	movw	r2, #257	; 0x101
 800a7ec:	80ba      	strh	r2, [r7, #4]
 800a7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a7f0:	4b14      	ldr	r3, [pc, #80]	; (800a844 <oslib_test_009_001_execute+0x154>)
 800a7f2:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a7f4:	f240 1201 	movw	r2, #257	; 0x101
 800a7f8:	80ba      	strh	r2, [r7, #4]
 800a7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a7fc:	4b12      	ldr	r3, [pc, #72]	; (800a848 <oslib_test_009_001_execute+0x158>)
 800a7fe:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a800:	f240 1201 	movw	r2, #257	; 0x101
 800a804:	80ba      	strh	r2, [r7, #4]
 800a806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a808:	4b10      	ldr	r3, [pc, #64]	; (800a84c <oslib_test_009_001_execute+0x15c>)
 800a80a:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a80c:	f240 1201 	movw	r2, #257	; 0x101
 800a810:	80ba      	strh	r2, [r7, #4]
 800a812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800a814:	4b08      	ldr	r3, [pc, #32]	; (800a838 <oslib_test_009_001_execute+0x148>)
 800a816:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a818:	f240 1201 	movw	r2, #257	; 0x101
 800a81c:	80ba      	strh	r2, [r7, #4]
 800a81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a820:	20000b74 	.word	0x20000b74
 800a824:	20000b18 	.word	0x20000b18
 800a828:	08016208 	.word	0x08016208
 800a82c:	0801624c 	.word	0x0801624c
 800a830:	200008d8 	.word	0x200008d8
 800a834:	200008d4 	.word	0x200008d4
 800a838:	08016280 	.word	0x08016280
 800a83c:	08016228 	.word	0x08016228
 800a840:	08016238 	.word	0x08016238
 800a844:	08016248 	.word	0x08016248
 800a848:	08016264 	.word	0x08016264
 800a84c:	08016254 	.word	0x08016254

0800a850 <oslib_test_009_002_execute>:
static void oslib_test_009_002_execute(void) {
 800a850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800a854:	4f59      	ldr	r7, [pc, #356]	; (800a9bc <oslib_test_009_002_execute+0x16c>)
 800a856:	2301      	movs	r3, #1
 800a858:	603b      	str	r3, [r7, #0]
 800a85a:	2330      	movs	r3, #48	; 0x30
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	4d57      	ldr	r5, [pc, #348]	; (800a9c0 <oslib_test_009_002_execute+0x170>)
 800a862:	4628      	mov	r0, r5
 800a864:	f7f9 fbe4 	bl	8004030 <chMtxLockS>
 800a868:	2300      	movs	r3, #0
 800a86a:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a86e:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 800a872:	42ac      	cmp	r4, r5
 800a874:	d019      	beq.n	800a8aa <oslib_test_009_002_execute+0x5a>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a876:	4e53      	ldr	r6, [pc, #332]	; (800a9c4 <oslib_test_009_002_execute+0x174>)
 800a878:	e002      	b.n	800a880 <oslib_test_009_002_execute+0x30>
    p = p->next;
 800a87a:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a87c:	42ac      	cmp	r4, r5
 800a87e:	d014      	beq.n	800a8aa <oslib_test_009_002_execute+0x5a>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a880:	f104 0008 	add.w	r0, r4, #8
 800a884:	4631      	mov	r1, r6
 800a886:	f7f5 fd83 	bl	8000390 <strcmp>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d1f5      	bne.n	800a87a <oslib_test_009_002_execute+0x2a>
  if (dep != NULL) {
 800a88e:	b164      	cbz	r4, 800a8aa <oslib_test_009_002_execute+0x5a>
    dep->refs++;
 800a890:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800a892:	484b      	ldr	r0, [pc, #300]	; (800a9c0 <oslib_test_009_002_execute+0x170>)
    dep->refs++;
 800a894:	3301      	adds	r3, #1
 800a896:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800a898:	f7f9 fc6a 	bl	8004170 <chMtxUnlock>
  chtest.failure_message = msg;
 800a89c:	4b4a      	ldr	r3, [pc, #296]	; (800a9c8 <oslib_test_009_002_execute+0x178>)
 800a89e:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a8a0:	f240 1201 	movw	r2, #257	; 0x101
 800a8a4:	80ba      	strh	r2, [r7, #4]
}
 800a8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8aa:	4845      	ldr	r0, [pc, #276]	; (800a9c0 <oslib_test_009_002_execute+0x170>)
 800a8ac:	f7f9 fc60 	bl	8004170 <chMtxUnlock>
  test_set_step(2);
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	603b      	str	r3, [r7, #0]
 800a8b4:	2630      	movs	r6, #48	; 0x30
 800a8b6:	f386 8811 	msr	BASEPRI, r6
 800a8ba:	4841      	ldr	r0, [pc, #260]	; (800a9c0 <oslib_test_009_002_execute+0x170>)
 800a8bc:	f7f9 fbb8 	bl	8004030 <chMtxLockS>
 800a8c0:	2500      	movs	r5, #0
 800a8c2:	f385 8811 	msr	BASEPRI, r5
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800a8c6:	4941      	ldr	r1, [pc, #260]	; (800a9cc <oslib_test_009_002_execute+0x17c>)
 800a8c8:	483e      	ldr	r0, [pc, #248]	; (800a9c4 <oslib_test_009_002_execute+0x174>)
 800a8ca:	2308      	movs	r3, #8
 800a8cc:	2290      	movs	r2, #144	; 0x90
 800a8ce:	f7fb fe47 	bl	8006560 <dyn_create_object_heap.lto_priv.0>
  if (dbp != NULL) {
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	b348      	cbz	r0, 800a92a <oslib_test_009_002_execute+0xda>
    memset((void *)(dbp + 1), 0, size);
 800a8d6:	2280      	movs	r2, #128	; 0x80
 800a8d8:	4629      	mov	r1, r5
 800a8da:	f104 0010 	add.w	r0, r4, #16
 800a8de:	f00a f985 	bl	8014bec <memset>
  test_set_step(3);
 800a8e2:	f04f 0803 	mov.w	r8, #3
  F_UNLOCK();
 800a8e6:	4836      	ldr	r0, [pc, #216]	; (800a9c0 <oslib_test_009_002_execute+0x170>)
 800a8e8:	f7f9 fc42 	bl	8004170 <chMtxUnlock>
 800a8ec:	f8c7 8000 	str.w	r8, [r7]
 800a8f0:	f386 8811 	msr	BASEPRI, r6
 800a8f4:	4832      	ldr	r0, [pc, #200]	; (800a9c0 <oslib_test_009_002_execute+0x170>)
 800a8f6:	f7f9 fb9b 	bl	8004030 <chMtxLockS>
 800a8fa:	f385 8811 	msr	BASEPRI, r5
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800a8fe:	4933      	ldr	r1, [pc, #204]	; (800a9cc <oslib_test_009_002_execute+0x17c>)
 800a900:	4830      	ldr	r0, [pc, #192]	; (800a9c4 <oslib_test_009_002_execute+0x174>)
 800a902:	2308      	movs	r3, #8
 800a904:	2290      	movs	r2, #144	; 0x90
 800a906:	f7fb fe2b 	bl	8006560 <dyn_create_object_heap.lto_priv.0>
  if (dbp != NULL) {
 800a90a:	b1c0      	cbz	r0, 800a93e <oslib_test_009_002_execute+0xee>
    memset((void *)(dbp + 1), 0, size);
 800a90c:	2280      	movs	r2, #128	; 0x80
 800a90e:	4629      	mov	r1, r5
 800a910:	3010      	adds	r0, #16
 800a912:	f00a f96b 	bl	8014bec <memset>
  F_UNLOCK();
 800a916:	482a      	ldr	r0, [pc, #168]	; (800a9c0 <oslib_test_009_002_execute+0x170>)
 800a918:	f7f9 fc2a 	bl	8004170 <chMtxUnlock>
  chtest.failure_message = msg;
 800a91c:	4b2c      	ldr	r3, [pc, #176]	; (800a9d0 <oslib_test_009_002_execute+0x180>)
 800a91e:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a920:	f240 1201 	movw	r2, #257	; 0x101
 800a924:	80ba      	strh	r2, [r7, #4]
}
 800a926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a92a:	4825      	ldr	r0, [pc, #148]	; (800a9c0 <oslib_test_009_002_execute+0x170>)
 800a92c:	f7f9 fc20 	bl	8004170 <chMtxUnlock>
  chtest.failure_message = msg;
 800a930:	4b28      	ldr	r3, [pc, #160]	; (800a9d4 <oslib_test_009_002_execute+0x184>)
 800a932:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a934:	f240 1201 	movw	r2, #257	; 0x101
 800a938:	80ba      	strh	r2, [r7, #4]
 800a93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a93e:	4820      	ldr	r0, [pc, #128]	; (800a9c0 <oslib_test_009_002_execute+0x170>)
 800a940:	f7f9 fc16 	bl	8004170 <chMtxUnlock>
  test_set_step(4);
 800a944:	2304      	movs	r3, #4
 800a946:	603b      	str	r3, [r7, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 800a948:	f008 f9ca 	bl	8012ce0 <chFactoryFindBuffer.constprop.0>
  if (!condition) {
 800a94c:	4605      	mov	r5, r0
 800a94e:	b340      	cbz	r0, 800a9a2 <oslib_test_009_002_execute+0x152>
 800a950:	42a5      	cmp	r5, r4
 800a952:	d120      	bne.n	800a996 <oslib_test_009_002_execute+0x146>
 800a954:	686b      	ldr	r3, [r5, #4]
 800a956:	2b02      	cmp	r3, #2
 800a958:	d11d      	bne.n	800a996 <oslib_test_009_002_execute+0x146>
 800a95a:	f8c5 8004 	str.w	r8, [r5, #4]
    chFactoryReleaseBuffer(dbp2);
 800a95e:	f7fb fe6f 	bl	8006640 <chFactoryReleaseBuffer>
 800a962:	686b      	ldr	r3, [r5, #4]
 800a964:	2b02      	cmp	r3, #2
 800a966:	d122      	bne.n	800a9ae <oslib_test_009_002_execute+0x15e>
    chFactoryReleaseBuffer(dbp1);
 800a968:	4628      	mov	r0, r5
 800a96a:	f7fb fe69 	bl	8006640 <chFactoryReleaseBuffer>
 800a96e:	686b      	ldr	r3, [r5, #4]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d11c      	bne.n	800a9ae <oslib_test_009_002_execute+0x15e>
  test_set_step(5);
 800a974:	2305      	movs	r3, #5
    chFactoryReleaseBuffer(dbp);
 800a976:	4628      	mov	r0, r5
  test_set_step(5);
 800a978:	603b      	str	r3, [r7, #0]
    chFactoryReleaseBuffer(dbp);
 800a97a:	f7fb fe61 	bl	8006640 <chFactoryReleaseBuffer>
  test_set_step(6);
 800a97e:	2306      	movs	r3, #6
 800a980:	603b      	str	r3, [r7, #0]
    dbp = chFactoryFindBuffer("mybuf");
 800a982:	f008 f9ad 	bl	8012ce0 <chFactoryFindBuffer.constprop.0>
 800a986:	2800      	cmp	r0, #0
 800a988:	d08d      	beq.n	800a8a6 <oslib_test_009_002_execute+0x56>
  chtest.failure_message = msg;
 800a98a:	4b0f      	ldr	r3, [pc, #60]	; (800a9c8 <oslib_test_009_002_execute+0x178>)
 800a98c:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a98e:	f240 1201 	movw	r2, #257	; 0x101
 800a992:	80ba      	strh	r2, [r7, #4]
    return __test_fail(msg);
 800a994:	e787      	b.n	800a8a6 <oslib_test_009_002_execute+0x56>
  chtest.failure_message = msg;
 800a996:	4b10      	ldr	r3, [pc, #64]	; (800a9d8 <oslib_test_009_002_execute+0x188>)
 800a998:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a99a:	f240 1201 	movw	r2, #257	; 0x101
 800a99e:	80ba      	strh	r2, [r7, #4]
  return true;
 800a9a0:	e781      	b.n	800a8a6 <oslib_test_009_002_execute+0x56>
  chtest.failure_message = msg;
 800a9a2:	4b0e      	ldr	r3, [pc, #56]	; (800a9dc <oslib_test_009_002_execute+0x18c>)
 800a9a4:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a9a6:	f240 1201 	movw	r2, #257	; 0x101
 800a9aa:	80ba      	strh	r2, [r7, #4]
  return true;
 800a9ac:	e77b      	b.n	800a8a6 <oslib_test_009_002_execute+0x56>
  chtest.failure_message = msg;
 800a9ae:	4b0c      	ldr	r3, [pc, #48]	; (800a9e0 <oslib_test_009_002_execute+0x190>)
 800a9b0:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800a9b2:	f240 1201 	movw	r2, #257	; 0x101
 800a9b6:	80ba      	strh	r2, [r7, #4]
  return true;
 800a9b8:	e775      	b.n	800a8a6 <oslib_test_009_002_execute+0x56>
 800a9ba:	bf00      	nop
 800a9bc:	20000b74 	.word	0x20000b74
 800a9c0:	20000b18 	.word	0x20000b18
 800a9c4:	08016210 	.word	0x08016210
 800a9c8:	0801624c 	.word	0x0801624c
 800a9cc:	20000b3c 	.word	0x20000b3c
 800a9d0:	08016294 	.word	0x08016294
 800a9d4:	080162a0 	.word	0x080162a0
 800a9d8:	08016264 	.word	0x08016264
 800a9dc:	08016248 	.word	0x08016248
 800a9e0:	08016280 	.word	0x08016280
	...

0800a9f0 <oslib_test_009_003_teardown>:
static void oslib_test_009_003_teardown(void) {
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	2330      	movs	r3, #48	; 0x30
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	4d15      	ldr	r5, [pc, #84]	; (800aa50 <oslib_test_009_003_teardown+0x60>)
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	f7f9 fb18 	bl	8004030 <chMtxLockS>
 800aa00:	2300      	movs	r3, #0
 800aa02:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800aa06:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800aa0a:	42ac      	cmp	r4, r5
 800aa0c:	d01b      	beq.n	800aa46 <oslib_test_009_003_teardown+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800aa0e:	4e11      	ldr	r6, [pc, #68]	; (800aa54 <oslib_test_009_003_teardown+0x64>)
 800aa10:	e002      	b.n	800aa18 <oslib_test_009_003_teardown+0x28>
    p = p->next;
 800aa12:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800aa14:	42ac      	cmp	r4, r5
 800aa16:	d016      	beq.n	800aa46 <oslib_test_009_003_teardown+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800aa18:	f104 0008 	add.w	r0, r4, #8
 800aa1c:	4631      	mov	r1, r6
 800aa1e:	f7f5 fcb7 	bl	8000390 <strcmp>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d1f5      	bne.n	800aa12 <oslib_test_009_003_teardown+0x22>
  if (dep != NULL) {
 800aa26:	b174      	cbz	r4, 800aa46 <oslib_test_009_003_teardown+0x56>
    dep->refs++;
 800aa28:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800aa2a:	4809      	ldr	r0, [pc, #36]	; (800aa50 <oslib_test_009_003_teardown+0x60>)
    dep->refs++;
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800aa30:	f7f9 fb9e 	bl	8004170 <chMtxUnlock>
    while (dsp->element.refs > 0U) {
 800aa34:	6863      	ldr	r3, [r4, #4]
 800aa36:	b12b      	cbz	r3, 800aa44 <oslib_test_009_003_teardown+0x54>
      chFactoryReleaseSemaphore(dsp);
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f7fb fe29 	bl	8006690 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 800aa3e:	6863      	ldr	r3, [r4, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1f9      	bne.n	800aa38 <oslib_test_009_003_teardown+0x48>
}
 800aa44:	bd70      	pop	{r4, r5, r6, pc}
 800aa46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa4a:	4801      	ldr	r0, [pc, #4]	; (800aa50 <oslib_test_009_003_teardown+0x60>)
 800aa4c:	f7f9 bb90 	b.w	8004170 <chMtxUnlock>
 800aa50:	20000b18 	.word	0x20000b18
 800aa54:	080162b0 	.word	0x080162b0
	...

0800aa60 <oslib_test_009_003_execute>:
static void oslib_test_009_003_execute(void) {
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800aa62:	4f3e      	ldr	r7, [pc, #248]	; (800ab5c <oslib_test_009_003_execute+0xfc>)
 800aa64:	2301      	movs	r3, #1
 800aa66:	603b      	str	r3, [r7, #0]
 800aa68:	2330      	movs	r3, #48	; 0x30
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	4d3c      	ldr	r5, [pc, #240]	; (800ab60 <oslib_test_009_003_execute+0x100>)
 800aa70:	4628      	mov	r0, r5
 800aa72:	f7f9 fadd 	bl	8004030 <chMtxLockS>
 800aa76:	2300      	movs	r3, #0
 800aa78:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800aa7c:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800aa80:	42ac      	cmp	r4, r5
 800aa82:	d018      	beq.n	800aab6 <oslib_test_009_003_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800aa84:	4e37      	ldr	r6, [pc, #220]	; (800ab64 <oslib_test_009_003_execute+0x104>)
 800aa86:	e002      	b.n	800aa8e <oslib_test_009_003_execute+0x2e>
    p = p->next;
 800aa88:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800aa8a:	42ac      	cmp	r4, r5
 800aa8c:	d013      	beq.n	800aab6 <oslib_test_009_003_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800aa8e:	f104 0008 	add.w	r0, r4, #8
 800aa92:	4631      	mov	r1, r6
 800aa94:	f7f5 fc7c 	bl	8000390 <strcmp>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d1f5      	bne.n	800aa88 <oslib_test_009_003_execute+0x28>
  if (dep != NULL) {
 800aa9c:	b15c      	cbz	r4, 800aab6 <oslib_test_009_003_execute+0x56>
    dep->refs++;
 800aa9e:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800aaa0:	482f      	ldr	r0, [pc, #188]	; (800ab60 <oslib_test_009_003_execute+0x100>)
    dep->refs++;
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800aaa6:	f7f9 fb63 	bl	8004170 <chMtxUnlock>
  chtest.failure_message = msg;
 800aaaa:	4b2f      	ldr	r3, [pc, #188]	; (800ab68 <oslib_test_009_003_execute+0x108>)
 800aaac:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800aaae:	f240 1201 	movw	r2, #257	; 0x101
 800aab2:	80ba      	strh	r2, [r7, #4]
}
 800aab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aab6:	482a      	ldr	r0, [pc, #168]	; (800ab60 <oslib_test_009_003_execute+0x100>)
 800aab8:	f7f9 fb5a 	bl	8004170 <chMtxUnlock>
  test_set_step(2);
 800aabc:	2302      	movs	r3, #2
 800aabe:	603b      	str	r3, [r7, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 800aac0:	f008 f8ae 	bl	8012c20 <chFactoryCreateSemaphore.constprop.0>
  if (!condition) {
 800aac4:	4604      	mov	r4, r0
 800aac6:	b358      	cbz	r0, 800ab20 <oslib_test_009_003_execute+0xc0>
  test_set_step(3);
 800aac8:	2503      	movs	r5, #3
 800aaca:	603d      	str	r5, [r7, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 800aacc:	f008 f8a8 	bl	8012c20 <chFactoryCreateSemaphore.constprop.0>
 800aad0:	bb60      	cbnz	r0, 800ab2c <oslib_test_009_003_execute+0xcc>
  test_set_step(4);
 800aad2:	2304      	movs	r3, #4
 800aad4:	603b      	str	r3, [r7, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 800aad6:	f008 f873 	bl	8012bc0 <chFactoryFindSemaphore.constprop.0>
 800aada:	b368      	cbz	r0, 800ab38 <oslib_test_009_003_execute+0xd8>
 800aadc:	4284      	cmp	r4, r0
 800aade:	d131      	bne.n	800ab44 <oslib_test_009_003_execute+0xe4>
 800aae0:	6863      	ldr	r3, [r4, #4]
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d12e      	bne.n	800ab44 <oslib_test_009_003_execute+0xe4>
 800aae6:	6065      	str	r5, [r4, #4]
    chFactoryReleaseSemaphore(dsp2);
 800aae8:	f7fb fdd2 	bl	8006690 <chFactoryReleaseSemaphore>
 800aaec:	6863      	ldr	r3, [r4, #4]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d12e      	bne.n	800ab50 <oslib_test_009_003_execute+0xf0>
    chFactoryReleaseSemaphore(dsp1);
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f7fb fdcc 	bl	8006690 <chFactoryReleaseSemaphore>
 800aaf8:	6863      	ldr	r3, [r4, #4]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d128      	bne.n	800ab50 <oslib_test_009_003_execute+0xf0>
  test_set_step(5);
 800aafe:	2305      	movs	r3, #5
    chFactoryReleaseSemaphore(dsp);
 800ab00:	4620      	mov	r0, r4
  test_set_step(5);
 800ab02:	603b      	str	r3, [r7, #0]
    chFactoryReleaseSemaphore(dsp);
 800ab04:	f7fb fdc4 	bl	8006690 <chFactoryReleaseSemaphore>
  test_set_step(6);
 800ab08:	2306      	movs	r3, #6
 800ab0a:	603b      	str	r3, [r7, #0]
    dsp = chFactoryFindSemaphore("mysem");
 800ab0c:	f008 f858 	bl	8012bc0 <chFactoryFindSemaphore.constprop.0>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d0cf      	beq.n	800aab4 <oslib_test_009_003_execute+0x54>
  chtest.failure_message = msg;
 800ab14:	4b14      	ldr	r3, [pc, #80]	; (800ab68 <oslib_test_009_003_execute+0x108>)
 800ab16:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ab18:	f240 1201 	movw	r2, #257	; 0x101
 800ab1c:	80ba      	strh	r2, [r7, #4]
}
 800ab1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ab20:	4b12      	ldr	r3, [pc, #72]	; (800ab6c <oslib_test_009_003_execute+0x10c>)
 800ab22:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ab24:	f240 1201 	movw	r2, #257	; 0x101
 800ab28:	80ba      	strh	r2, [r7, #4]
 800ab2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ab2c:	4b10      	ldr	r3, [pc, #64]	; (800ab70 <oslib_test_009_003_execute+0x110>)
 800ab2e:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ab30:	f240 1201 	movw	r2, #257	; 0x101
 800ab34:	80ba      	strh	r2, [r7, #4]
 800ab36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ab38:	4b0e      	ldr	r3, [pc, #56]	; (800ab74 <oslib_test_009_003_execute+0x114>)
 800ab3a:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ab3c:	f240 1201 	movw	r2, #257	; 0x101
 800ab40:	80ba      	strh	r2, [r7, #4]
 800ab42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ab44:	4b0c      	ldr	r3, [pc, #48]	; (800ab78 <oslib_test_009_003_execute+0x118>)
 800ab46:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ab48:	f240 1201 	movw	r2, #257	; 0x101
 800ab4c:	80ba      	strh	r2, [r7, #4]
 800ab4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ab50:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <oslib_test_009_003_execute+0x11c>)
 800ab52:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ab54:	f240 1201 	movw	r2, #257	; 0x101
 800ab58:	80ba      	strh	r2, [r7, #4]
 800ab5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab5c:	20000b74 	.word	0x20000b74
 800ab60:	20000b18 	.word	0x20000b18
 800ab64:	080162b0 	.word	0x080162b0
 800ab68:	0801624c 	.word	0x0801624c
 800ab6c:	080162a0 	.word	0x080162a0
 800ab70:	08016294 	.word	0x08016294
 800ab74:	08016248 	.word	0x08016248
 800ab78:	08016264 	.word	0x08016264
 800ab7c:	08016280 	.word	0x08016280

0800ab80 <oslib_test_009_004_execute>:
static void oslib_test_009_004_execute(void) {
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800ab82:	4f3e      	ldr	r7, [pc, #248]	; (800ac7c <oslib_test_009_004_execute+0xfc>)
 800ab84:	2301      	movs	r3, #1
 800ab86:	603b      	str	r3, [r7, #0]
 800ab88:	2330      	movs	r3, #48	; 0x30
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	4d3c      	ldr	r5, [pc, #240]	; (800ac80 <oslib_test_009_004_execute+0x100>)
 800ab90:	4628      	mov	r0, r5
 800ab92:	f7f9 fa4d 	bl	8004030 <chMtxLockS>
 800ab96:	2300      	movs	r3, #0
 800ab98:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800ab9c:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 800aba0:	42ac      	cmp	r4, r5
 800aba2:	d018      	beq.n	800abd6 <oslib_test_009_004_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800aba4:	4e37      	ldr	r6, [pc, #220]	; (800ac84 <oslib_test_009_004_execute+0x104>)
 800aba6:	e002      	b.n	800abae <oslib_test_009_004_execute+0x2e>
    p = p->next;
 800aba8:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800abaa:	42ac      	cmp	r4, r5
 800abac:	d013      	beq.n	800abd6 <oslib_test_009_004_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800abae:	f104 0008 	add.w	r0, r4, #8
 800abb2:	4631      	mov	r1, r6
 800abb4:	f7f5 fbec 	bl	8000390 <strcmp>
 800abb8:	2800      	cmp	r0, #0
 800abba:	d1f5      	bne.n	800aba8 <oslib_test_009_004_execute+0x28>
  if (dep != NULL) {
 800abbc:	b15c      	cbz	r4, 800abd6 <oslib_test_009_004_execute+0x56>
    dep->refs++;
 800abbe:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800abc0:	482f      	ldr	r0, [pc, #188]	; (800ac80 <oslib_test_009_004_execute+0x100>)
    dep->refs++;
 800abc2:	3301      	adds	r3, #1
 800abc4:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800abc6:	f7f9 fad3 	bl	8004170 <chMtxUnlock>
  chtest.failure_message = msg;
 800abca:	4b2f      	ldr	r3, [pc, #188]	; (800ac88 <oslib_test_009_004_execute+0x108>)
 800abcc:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800abce:	f240 1201 	movw	r2, #257	; 0x101
 800abd2:	80ba      	strh	r2, [r7, #4]
}
 800abd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abd6:	482a      	ldr	r0, [pc, #168]	; (800ac80 <oslib_test_009_004_execute+0x100>)
 800abd8:	f7f9 faca 	bl	8004170 <chMtxUnlock>
  test_set_step(2);
 800abdc:	2302      	movs	r3, #2
 800abde:	603b      	str	r3, [r7, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 800abe0:	f007 ffbe 	bl	8012b60 <chFactoryCreateMailbox.constprop.0>
  if (!condition) {
 800abe4:	4604      	mov	r4, r0
 800abe6:	b358      	cbz	r0, 800ac40 <oslib_test_009_004_execute+0xc0>
  test_set_step(3);
 800abe8:	2503      	movs	r5, #3
 800abea:	603d      	str	r5, [r7, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 800abec:	f007 ffb8 	bl	8012b60 <chFactoryCreateMailbox.constprop.0>
 800abf0:	bb60      	cbnz	r0, 800ac4c <oslib_test_009_004_execute+0xcc>
  test_set_step(4);
 800abf2:	2304      	movs	r3, #4
 800abf4:	603b      	str	r3, [r7, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 800abf6:	f007 ff83 	bl	8012b00 <chFactoryFindMailbox.constprop.0>
 800abfa:	b368      	cbz	r0, 800ac58 <oslib_test_009_004_execute+0xd8>
 800abfc:	4284      	cmp	r4, r0
 800abfe:	d131      	bne.n	800ac64 <oslib_test_009_004_execute+0xe4>
 800ac00:	6863      	ldr	r3, [r4, #4]
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	d12e      	bne.n	800ac64 <oslib_test_009_004_execute+0xe4>
 800ac06:	6065      	str	r5, [r4, #4]
    chFactoryReleaseMailbox(dmp2);
 800ac08:	f7fb fd7a 	bl	8006700 <chFactoryReleaseMailbox>
 800ac0c:	6863      	ldr	r3, [r4, #4]
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d12e      	bne.n	800ac70 <oslib_test_009_004_execute+0xf0>
    chFactoryReleaseMailbox(dmp1);
 800ac12:	4620      	mov	r0, r4
 800ac14:	f7fb fd74 	bl	8006700 <chFactoryReleaseMailbox>
 800ac18:	6863      	ldr	r3, [r4, #4]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d128      	bne.n	800ac70 <oslib_test_009_004_execute+0xf0>
  test_set_step(5);
 800ac1e:	2305      	movs	r3, #5
    chFactoryReleaseMailbox(dmp);
 800ac20:	4620      	mov	r0, r4
  test_set_step(5);
 800ac22:	603b      	str	r3, [r7, #0]
    chFactoryReleaseMailbox(dmp);
 800ac24:	f7fb fd6c 	bl	8006700 <chFactoryReleaseMailbox>
  test_set_step(6);
 800ac28:	2306      	movs	r3, #6
 800ac2a:	603b      	str	r3, [r7, #0]
    dmp = chFactoryFindMailbox("mymbx");
 800ac2c:	f007 ff68 	bl	8012b00 <chFactoryFindMailbox.constprop.0>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d0cf      	beq.n	800abd4 <oslib_test_009_004_execute+0x54>
  chtest.failure_message = msg;
 800ac34:	4b14      	ldr	r3, [pc, #80]	; (800ac88 <oslib_test_009_004_execute+0x108>)
 800ac36:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ac38:	f240 1201 	movw	r2, #257	; 0x101
 800ac3c:	80ba      	strh	r2, [r7, #4]
}
 800ac3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ac40:	4b12      	ldr	r3, [pc, #72]	; (800ac8c <oslib_test_009_004_execute+0x10c>)
 800ac42:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ac44:	f240 1201 	movw	r2, #257	; 0x101
 800ac48:	80ba      	strh	r2, [r7, #4]
 800ac4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ac4c:	4b10      	ldr	r3, [pc, #64]	; (800ac90 <oslib_test_009_004_execute+0x110>)
 800ac4e:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ac50:	f240 1201 	movw	r2, #257	; 0x101
 800ac54:	80ba      	strh	r2, [r7, #4]
 800ac56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ac58:	4b0e      	ldr	r3, [pc, #56]	; (800ac94 <oslib_test_009_004_execute+0x114>)
 800ac5a:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ac5c:	f240 1201 	movw	r2, #257	; 0x101
 800ac60:	80ba      	strh	r2, [r7, #4]
 800ac62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ac64:	4b0c      	ldr	r3, [pc, #48]	; (800ac98 <oslib_test_009_004_execute+0x118>)
 800ac66:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ac68:	f240 1201 	movw	r2, #257	; 0x101
 800ac6c:	80ba      	strh	r2, [r7, #4]
 800ac6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ac70:	4b0a      	ldr	r3, [pc, #40]	; (800ac9c <oslib_test_009_004_execute+0x11c>)
 800ac72:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ac74:	f240 1201 	movw	r2, #257	; 0x101
 800ac78:	80ba      	strh	r2, [r7, #4]
 800ac7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac7c:	20000b74 	.word	0x20000b74
 800ac80:	20000b18 	.word	0x20000b18
 800ac84:	08016218 	.word	0x08016218
 800ac88:	0801624c 	.word	0x0801624c
 800ac8c:	080162a0 	.word	0x080162a0
 800ac90:	08016294 	.word	0x08016294
 800ac94:	08016248 	.word	0x08016248
 800ac98:	08016264 	.word	0x08016264
 800ac9c:	08016280 	.word	0x08016280

0800aca0 <oslib_test_009_005_execute>:
static void oslib_test_009_005_execute(void) {
 800aca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800aca2:	4f3e      	ldr	r7, [pc, #248]	; (800ad9c <oslib_test_009_005_execute+0xfc>)
 800aca4:	2301      	movs	r3, #1
 800aca6:	603b      	str	r3, [r7, #0]
 800aca8:	2330      	movs	r3, #48	; 0x30
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	4d3c      	ldr	r5, [pc, #240]	; (800ada0 <oslib_test_009_005_execute+0x100>)
 800acb0:	4628      	mov	r0, r5
 800acb2:	f7f9 f9bd 	bl	8004030 <chMtxLockS>
 800acb6:	2300      	movs	r3, #0
 800acb8:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800acbc:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 800acc0:	42ac      	cmp	r4, r5
 800acc2:	d018      	beq.n	800acf6 <oslib_test_009_005_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800acc4:	4e37      	ldr	r6, [pc, #220]	; (800ada4 <oslib_test_009_005_execute+0x104>)
 800acc6:	e002      	b.n	800acce <oslib_test_009_005_execute+0x2e>
    p = p->next;
 800acc8:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800acca:	42ac      	cmp	r4, r5
 800accc:	d013      	beq.n	800acf6 <oslib_test_009_005_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800acce:	f104 0008 	add.w	r0, r4, #8
 800acd2:	4631      	mov	r1, r6
 800acd4:	f7f5 fb5c 	bl	8000390 <strcmp>
 800acd8:	2800      	cmp	r0, #0
 800acda:	d1f5      	bne.n	800acc8 <oslib_test_009_005_execute+0x28>
  if (dep != NULL) {
 800acdc:	b15c      	cbz	r4, 800acf6 <oslib_test_009_005_execute+0x56>
    dep->refs++;
 800acde:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800ace0:	482f      	ldr	r0, [pc, #188]	; (800ada0 <oslib_test_009_005_execute+0x100>)
    dep->refs++;
 800ace2:	3301      	adds	r3, #1
 800ace4:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800ace6:	f7f9 fa43 	bl	8004170 <chMtxUnlock>
  chtest.failure_message = msg;
 800acea:	4b2f      	ldr	r3, [pc, #188]	; (800ada8 <oslib_test_009_005_execute+0x108>)
 800acec:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800acee:	f240 1201 	movw	r2, #257	; 0x101
 800acf2:	80ba      	strh	r2, [r7, #4]
}
 800acf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acf6:	482a      	ldr	r0, [pc, #168]	; (800ada0 <oslib_test_009_005_execute+0x100>)
 800acf8:	f7f9 fa3a 	bl	8004170 <chMtxUnlock>
  test_set_step(2);
 800acfc:	2302      	movs	r3, #2
 800acfe:	603b      	str	r3, [r7, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800ad00:	f007 fe7e 	bl	8012a00 <chFactoryCreateObjectsFIFO.constprop.0>
  if (!condition) {
 800ad04:	4604      	mov	r4, r0
 800ad06:	b358      	cbz	r0, 800ad60 <oslib_test_009_005_execute+0xc0>
  test_set_step(3);
 800ad08:	2503      	movs	r5, #3
 800ad0a:	603d      	str	r5, [r7, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800ad0c:	f007 fe78 	bl	8012a00 <chFactoryCreateObjectsFIFO.constprop.0>
 800ad10:	bb60      	cbnz	r0, 800ad6c <oslib_test_009_005_execute+0xcc>
  test_set_step(4);
 800ad12:	2304      	movs	r3, #4
 800ad14:	603b      	str	r3, [r7, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 800ad16:	f007 fe43 	bl	80129a0 <chFactoryFindObjectsFIFO.constprop.0>
 800ad1a:	b368      	cbz	r0, 800ad78 <oslib_test_009_005_execute+0xd8>
 800ad1c:	4284      	cmp	r4, r0
 800ad1e:	d131      	bne.n	800ad84 <oslib_test_009_005_execute+0xe4>
 800ad20:	6863      	ldr	r3, [r4, #4]
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d12e      	bne.n	800ad84 <oslib_test_009_005_execute+0xe4>
 800ad26:	6065      	str	r5, [r4, #4]
    chFactoryReleaseObjectsFIFO(dofp2);
 800ad28:	f7fb fd12 	bl	8006750 <chFactoryReleaseObjectsFIFO>
 800ad2c:	6863      	ldr	r3, [r4, #4]
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d12e      	bne.n	800ad90 <oslib_test_009_005_execute+0xf0>
    chFactoryReleaseObjectsFIFO(dofp1);
 800ad32:	4620      	mov	r0, r4
 800ad34:	f7fb fd0c 	bl	8006750 <chFactoryReleaseObjectsFIFO>
 800ad38:	6863      	ldr	r3, [r4, #4]
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d128      	bne.n	800ad90 <oslib_test_009_005_execute+0xf0>
  test_set_step(5);
 800ad3e:	2305      	movs	r3, #5
    chFactoryReleaseObjectsFIFO(dofp);
 800ad40:	4620      	mov	r0, r4
  test_set_step(5);
 800ad42:	603b      	str	r3, [r7, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 800ad44:	f7fb fd04 	bl	8006750 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 800ad48:	2306      	movs	r3, #6
 800ad4a:	603b      	str	r3, [r7, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 800ad4c:	f007 fe28 	bl	80129a0 <chFactoryFindObjectsFIFO.constprop.0>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d0cf      	beq.n	800acf4 <oslib_test_009_005_execute+0x54>
  chtest.failure_message = msg;
 800ad54:	4b14      	ldr	r3, [pc, #80]	; (800ada8 <oslib_test_009_005_execute+0x108>)
 800ad56:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ad58:	f240 1201 	movw	r2, #257	; 0x101
 800ad5c:	80ba      	strh	r2, [r7, #4]
}
 800ad5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ad60:	4b12      	ldr	r3, [pc, #72]	; (800adac <oslib_test_009_005_execute+0x10c>)
 800ad62:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ad64:	f240 1201 	movw	r2, #257	; 0x101
 800ad68:	80ba      	strh	r2, [r7, #4]
 800ad6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ad6c:	4b10      	ldr	r3, [pc, #64]	; (800adb0 <oslib_test_009_005_execute+0x110>)
 800ad6e:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ad70:	f240 1201 	movw	r2, #257	; 0x101
 800ad74:	80ba      	strh	r2, [r7, #4]
 800ad76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ad78:	4b0e      	ldr	r3, [pc, #56]	; (800adb4 <oslib_test_009_005_execute+0x114>)
 800ad7a:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ad7c:	f240 1201 	movw	r2, #257	; 0x101
 800ad80:	80ba      	strh	r2, [r7, #4]
 800ad82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ad84:	4b0c      	ldr	r3, [pc, #48]	; (800adb8 <oslib_test_009_005_execute+0x118>)
 800ad86:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ad88:	f240 1201 	movw	r2, #257	; 0x101
 800ad8c:	80ba      	strh	r2, [r7, #4]
 800ad8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ad90:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <oslib_test_009_005_execute+0x11c>)
 800ad92:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ad94:	f240 1201 	movw	r2, #257	; 0x101
 800ad98:	80ba      	strh	r2, [r7, #4]
 800ad9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad9c:	20000b74 	.word	0x20000b74
 800ada0:	20000b18 	.word	0x20000b18
 800ada4:	08016200 	.word	0x08016200
 800ada8:	0801624c 	.word	0x0801624c
 800adac:	080162a0 	.word	0x080162a0
 800adb0:	08016294 	.word	0x08016294
 800adb4:	08016248 	.word	0x08016248
 800adb8:	08016264 	.word	0x08016264
 800adbc:	08016280 	.word	0x08016280

0800adc0 <oslib_test_009_006_execute>:

static void oslib_test_009_006_execute(void) {
 800adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_pipe_t *dpp;

  /* [9.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 800adc2:	4f3e      	ldr	r7, [pc, #248]	; (800aebc <oslib_test_009_006_execute+0xfc>)
 800adc4:	2301      	movs	r3, #1
 800adc6:	603b      	str	r3, [r7, #0]
 800adc8:	2330      	movs	r3, #48	; 0x30
 800adca:	f383 8811 	msr	BASEPRI, r3
 800adce:	4d3c      	ldr	r5, [pc, #240]	; (800aec0 <oslib_test_009_006_execute+0x100>)
 800add0:	4628      	mov	r0, r5
 800add2:	f7f9 f92d 	bl	8004030 <chMtxLockS>
 800add6:	2300      	movs	r3, #0
 800add8:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800addc:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 800ade0:	42ac      	cmp	r4, r5
 800ade2:	d018      	beq.n	800ae16 <oslib_test_009_006_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800ade4:	4e37      	ldr	r6, [pc, #220]	; (800aec4 <oslib_test_009_006_execute+0x104>)
 800ade6:	e002      	b.n	800adee <oslib_test_009_006_execute+0x2e>
    p = p->next;
 800ade8:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800adea:	42ac      	cmp	r4, r5
 800adec:	d013      	beq.n	800ae16 <oslib_test_009_006_execute+0x56>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800adee:	f104 0008 	add.w	r0, r4, #8
 800adf2:	4631      	mov	r1, r6
 800adf4:	f7f5 facc 	bl	8000390 <strcmp>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d1f5      	bne.n	800ade8 <oslib_test_009_006_execute+0x28>
  if (dep != NULL) {
 800adfc:	b15c      	cbz	r4, 800ae16 <oslib_test_009_006_execute+0x56>
    dep->refs++;
 800adfe:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800ae00:	482f      	ldr	r0, [pc, #188]	; (800aec0 <oslib_test_009_006_execute+0x100>)
    dep->refs++;
 800ae02:	3301      	adds	r3, #1
 800ae04:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800ae06:	f7f9 f9b3 	bl	8004170 <chMtxUnlock>
  chtest.failure_message = msg;
 800ae0a:	4b2f      	ldr	r3, [pc, #188]	; (800aec8 <oslib_test_009_006_execute+0x108>)
 800ae0c:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ae0e:	f240 1201 	movw	r2, #257	; 0x101
 800ae12:	80ba      	strh	r2, [r7, #4]
  {
    dpp = chFactoryFindPipe("mypipe");
    test_assert(dpp == NULL, "found");
  }
  test_end_step(6);
}
 800ae14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae16:	482a      	ldr	r0, [pc, #168]	; (800aec0 <oslib_test_009_006_execute+0x100>)
 800ae18:	f7f9 f9aa 	bl	8004170 <chMtxUnlock>
  test_set_step(2);
 800ae1c:	2302      	movs	r3, #2
 800ae1e:	603b      	str	r3, [r7, #0]
    dpp = chFactoryCreatePipe("mypipe", 16U);
 800ae20:	f007 fd86 	bl	8012930 <chFactoryCreatePipe.constprop.0>
  if (!condition) {
 800ae24:	4604      	mov	r4, r0
 800ae26:	b358      	cbz	r0, 800ae80 <oslib_test_009_006_execute+0xc0>
  test_set_step(3);
 800ae28:	2503      	movs	r5, #3
 800ae2a:	603d      	str	r5, [r7, #0]
    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 800ae2c:	f007 fd80 	bl	8012930 <chFactoryCreatePipe.constprop.0>
 800ae30:	bb60      	cbnz	r0, 800ae8c <oslib_test_009_006_execute+0xcc>
  test_set_step(4);
 800ae32:	2304      	movs	r3, #4
 800ae34:	603b      	str	r3, [r7, #0]
    dpp1 = chFactoryFindPipe("mypipe");
 800ae36:	f007 fd4b 	bl	80128d0 <chFactoryFindPipe.constprop.0>
 800ae3a:	b368      	cbz	r0, 800ae98 <oslib_test_009_006_execute+0xd8>
 800ae3c:	4284      	cmp	r4, r0
 800ae3e:	d131      	bne.n	800aea4 <oslib_test_009_006_execute+0xe4>
 800ae40:	6863      	ldr	r3, [r4, #4]
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d12e      	bne.n	800aea4 <oslib_test_009_006_execute+0xe4>
 800ae46:	6065      	str	r5, [r4, #4]
    chFactoryReleasePipe(dpp2);
 800ae48:	f7fb fcaa 	bl	80067a0 <chFactoryReleasePipe>
 800ae4c:	6863      	ldr	r3, [r4, #4]
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d12e      	bne.n	800aeb0 <oslib_test_009_006_execute+0xf0>
    chFactoryReleasePipe(dpp1);
 800ae52:	4620      	mov	r0, r4
 800ae54:	f7fb fca4 	bl	80067a0 <chFactoryReleasePipe>
 800ae58:	6863      	ldr	r3, [r4, #4]
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d128      	bne.n	800aeb0 <oslib_test_009_006_execute+0xf0>
  test_set_step(5);
 800ae5e:	2305      	movs	r3, #5
    chFactoryReleasePipe(dpp);
 800ae60:	4620      	mov	r0, r4
  test_set_step(5);
 800ae62:	603b      	str	r3, [r7, #0]
    chFactoryReleasePipe(dpp);
 800ae64:	f7fb fc9c 	bl	80067a0 <chFactoryReleasePipe>
  test_set_step(6);
 800ae68:	2306      	movs	r3, #6
 800ae6a:	603b      	str	r3, [r7, #0]
    dpp = chFactoryFindPipe("mypipe");
 800ae6c:	f007 fd30 	bl	80128d0 <chFactoryFindPipe.constprop.0>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d0cf      	beq.n	800ae14 <oslib_test_009_006_execute+0x54>
  chtest.failure_message = msg;
 800ae74:	4b14      	ldr	r3, [pc, #80]	; (800aec8 <oslib_test_009_006_execute+0x108>)
 800ae76:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ae78:	f240 1201 	movw	r2, #257	; 0x101
 800ae7c:	80ba      	strh	r2, [r7, #4]
}
 800ae7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ae80:	4b12      	ldr	r3, [pc, #72]	; (800aecc <oslib_test_009_006_execute+0x10c>)
 800ae82:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ae84:	f240 1201 	movw	r2, #257	; 0x101
 800ae88:	80ba      	strh	r2, [r7, #4]
 800ae8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ae8c:	4b10      	ldr	r3, [pc, #64]	; (800aed0 <oslib_test_009_006_execute+0x110>)
 800ae8e:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ae90:	f240 1201 	movw	r2, #257	; 0x101
 800ae94:	80ba      	strh	r2, [r7, #4]
 800ae96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800ae98:	4b0e      	ldr	r3, [pc, #56]	; (800aed4 <oslib_test_009_006_execute+0x114>)
 800ae9a:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800ae9c:	f240 1201 	movw	r2, #257	; 0x101
 800aea0:	80ba      	strh	r2, [r7, #4]
 800aea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800aea4:	4b0c      	ldr	r3, [pc, #48]	; (800aed8 <oslib_test_009_006_execute+0x118>)
 800aea6:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800aea8:	f240 1201 	movw	r2, #257	; 0x101
 800aeac:	80ba      	strh	r2, [r7, #4]
 800aeae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chtest.failure_message = msg;
 800aeb0:	4b0a      	ldr	r3, [pc, #40]	; (800aedc <oslib_test_009_006_execute+0x11c>)
 800aeb2:	60bb      	str	r3, [r7, #8]
  chtest.global_fail     = true;
 800aeb4:	f240 1201 	movw	r2, #257	; 0x101
 800aeb8:	80ba      	strh	r2, [r7, #4]
 800aeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aebc:	20000b74 	.word	0x20000b74
 800aec0:	20000b18 	.word	0x20000b18
 800aec4:	08016220 	.word	0x08016220
 800aec8:	0801624c 	.word	0x0801624c
 800aecc:	080162a0 	.word	0x080162a0
 800aed0:	08016294 	.word	0x08016294
 800aed4:	08016248 	.word	0x08016248
 800aed8:	08016264 	.word	0x08016264
 800aedc:	08016280 	.word	0x08016280

0800aee0 <falcon_inner_prng_refill>:
 *
 * The block counter is XORed into the first 8 bytes of the IV.
 */
void
Zf(prng_refill)(prng *p)
{
 800aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	b0a3      	sub	sp, #140	; 0x8c
		uint32_t state[16];
		size_t v;
		int i;

		memcpy(&state[0], CW, sizeof CW);
		memcpy(&state[4], p->state.d, 48);
 800aee6:	f500 7202 	add.w	r2, r0, #520	; 0x208
	cc = *(uint64_t *)(p->state.d + 48);
 800aeea:	f8d0 123c 	ldr.w	r1, [r0, #572]	; 0x23c
		memcpy(&state[4], p->state.d, 48);
 800aeee:	920c      	str	r2, [sp, #48]	; 0x30
	cc = *(uint64_t *)(p->state.d + 48);
 800aef0:	f8d0 2238 	ldr.w	r2, [r0, #568]	; 0x238
 800aef4:	9210      	str	r2, [sp, #64]	; 0x40
 800aef6:	e9cd 2107 	strd	r2, r1, [sp, #28]
	for (u = 0; u < 8; u ++) {
 800aefa:	2200      	movs	r2, #0
 800aefc:	920a      	str	r2, [sp, #40]	; 0x28
 800aefe:	f500 720e 	add.w	r2, r0, #568	; 0x238
 800af02:	920d      	str	r2, [sp, #52]	; 0x34
 800af04:	f500 730b 	add.w	r3, r0, #556	; 0x22c
 800af08:	f500 7201 	add.w	r2, r0, #516	; 0x204
{
 800af0c:	900b      	str	r0, [sp, #44]	; 0x2c
	cc = *(uint64_t *)(p->state.d + 48);
 800af0e:	9111      	str	r1, [sp, #68]	; 0x44
		memcpy(&state[4], p->state.d, 48);
 800af10:	9009      	str	r0, [sp, #36]	; 0x24
 800af12:	920f      	str	r2, [sp, #60]	; 0x3c
 800af14:	930e      	str	r3, [sp, #56]	; 0x38
 800af16:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800af18:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800af1a:	ae16      	add	r6, sp, #88	; 0x58
 800af1c:	6820      	ldr	r0, [r4, #0]
 800af1e:	6861      	ldr	r1, [r4, #4]
 800af20:	68a2      	ldr	r2, [r4, #8]
 800af22:	68e3      	ldr	r3, [r4, #12]
 800af24:	4635      	mov	r5, r6
 800af26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800af28:	3410      	adds	r4, #16
 800af2a:	42bc      	cmp	r4, r7
 800af2c:	462e      	mov	r6, r5
 800af2e:	d1f5      	bne.n	800af1c <falcon_inner_prng_refill+0x3c>
		state[14] ^= (uint32_t)cc;
 800af30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800af32:	9a07      	ldr	r2, [sp, #28]
 800af34:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800af36:	9818      	ldr	r0, [sp, #96]	; 0x60
 800af38:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800af3a:	9103      	str	r1, [sp, #12]
 800af3c:	ea82 0703 	eor.w	r7, r2, r3
		state[15] ^= (uint32_t)(cc >> 32);
 800af40:	9a08      	ldr	r2, [sp, #32]
 800af42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af44:	991c      	ldr	r1, [sp, #112]	; 0x70
 800af46:	f8dd e078 	ldr.w	lr, [sp, #120]	; 0x78
 800af4a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800af4c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800af4e:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 800af52:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800b1b8 <falcon_inner_prng_refill+0x2d8>
 800af56:	f8df a264 	ldr.w	sl, [pc, #612]	; 800b1bc <falcon_inner_prng_refill+0x2dc>
 800af5a:	f8df b264 	ldr.w	fp, [pc, #612]	; 800b1c0 <falcon_inner_prng_refill+0x2e0>
 800af5e:	4053      	eors	r3, r2
 800af60:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800af62:	9304      	str	r3, [sp, #16]
 800af64:	f04f 080a 	mov.w	r8, #10
 800af68:	e9cd 0501 	strd	r0, r5, [sp, #4]
 800af6c:	f8cd 8014 	str.w	r8, [sp, #20]
 800af70:	4608      	mov	r0, r1
 800af72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800af74:	f8df 824c 	ldr.w	r8, [pc, #588]	; 800b1c4 <falcon_inner_prng_refill+0x2e4>
 800af78:	4611      	mov	r1, r2
 800af7a:	9a04      	ldr	r2, [sp, #16]
		state[b] = (state[b] <<  7) | (state[b] >> 25); \
	} while (0)

			QROUND( 0,  4,  8, 12);
			QROUND( 1,  5,  9, 13);
			QROUND( 2,  6, 10, 14);
 800af7c:	9d01      	ldr	r5, [sp, #4]
 800af7e:	44a9      	add	r9, r5
			QROUND( 3,  7, 11, 15);
 800af80:	9d02      	ldr	r5, [sp, #8]
			QROUND( 0,  4,  8, 12);
 800af82:	449b      	add	fp, r3
			QROUND( 1,  5,  9, 13);
 800af84:	44a2      	add	sl, r4
			QROUND( 3,  7, 11, 15);
 800af86:	44a8      	add	r8, r5
			QROUND( 0,  4,  8, 12);
 800af88:	ea8b 0e0e 	eor.w	lr, fp, lr
			QROUND( 1,  5,  9, 13);
 800af8c:	9d03      	ldr	r5, [sp, #12]
 800af8e:	ea8a 0c0c 	eor.w	ip, sl, ip
			QROUND( 0,  4,  8, 12);
 800af92:	eb06 463e 	add.w	r6, r6, lr, ror #16
			QROUND( 1,  5,  9, 13);
 800af96:	eb05 453c 	add.w	r5, r5, ip, ror #16
			QROUND( 0,  4,  8, 12);
 800af9a:	4073      	eors	r3, r6
 800af9c:	9303      	str	r3, [sp, #12]
			QROUND( 1,  5,  9, 13);
 800af9e:	ea84 0305 	eor.w	r3, r4, r5
 800afa2:	9304      	str	r3, [sp, #16]
			QROUND( 0,  4,  8, 12);
 800afa4:	9b03      	ldr	r3, [sp, #12]
			QROUND( 2,  6, 10, 14);
 800afa6:	9c01      	ldr	r4, [sp, #4]
			QROUND( 1,  5,  9, 13);
 800afa8:	9506      	str	r5, [sp, #24]
			QROUND( 2,  6, 10, 14);
 800afaa:	ea89 0707 	eor.w	r7, r9, r7
 800afae:	eb00 4037 	add.w	r0, r0, r7, ror #16
			QROUND( 0,  4,  8, 12);
 800afb2:	eb0b 5b33 	add.w	fp, fp, r3, ror #20
			QROUND( 1,  5,  9, 13);
 800afb6:	9b04      	ldr	r3, [sp, #16]
			QROUND( 3,  7, 11, 15);
 800afb8:	9d02      	ldr	r5, [sp, #8]
			QROUND( 1,  5,  9, 13);
 800afba:	9301      	str	r3, [sp, #4]
			QROUND( 2,  6, 10, 14);
 800afbc:	4044      	eors	r4, r0
			QROUND( 3,  7, 11, 15);
 800afbe:	ea88 0202 	eor.w	r2, r8, r2
 800afc2:	eb01 4132 	add.w	r1, r1, r2, ror #16
			QROUND( 1,  5,  9, 13);
 800afc6:	eb0a 5a33 	add.w	sl, sl, r3, ror #20
			QROUND( 2,  6, 10, 14);
 800afca:	9404      	str	r4, [sp, #16]
			QROUND( 0,  4,  8, 12);
 800afcc:	9b03      	ldr	r3, [sp, #12]
			QROUND( 2,  6, 10, 14);
 800afce:	eb09 5934 	add.w	r9, r9, r4, ror #20
			QROUND( 0,  4,  8, 12);
 800afd2:	ea8b 4e3e 	eor.w	lr, fp, lr, ror #16
			QROUND( 1,  5,  9, 13);
 800afd6:	9c06      	ldr	r4, [sp, #24]
			QROUND( 3,  7, 11, 15);
 800afd8:	404d      	eors	r5, r1
			QROUND( 1,  5,  9, 13);
 800afda:	ea8a 4c3c 	eor.w	ip, sl, ip, ror #16
			QROUND( 0,  4,  8, 12);
 800afde:	eb06 663e 	add.w	r6, r6, lr, ror #24
			QROUND( 3,  7, 11, 15);
 800afe2:	eb08 5835 	add.w	r8, r8, r5, ror #20
			QROUND( 1,  5,  9, 13);
 800afe6:	eb04 643c 	add.w	r4, r4, ip, ror #24
			QROUND( 0,  4,  8, 12);
 800afea:	ea86 5333 	eor.w	r3, r6, r3, ror #20
			QROUND( 1,  5,  9, 13);
 800afee:	e9cd 3402 	strd	r3, r4, [sp, #8]
			QROUND( 3,  7, 11, 15);
 800aff2:	ea88 4232 	eor.w	r2, r8, r2, ror #16
			QROUND( 1,  5,  9, 13);
 800aff6:	9b01      	ldr	r3, [sp, #4]
			QROUND( 3,  7, 11, 15);
 800aff8:	eb01 6132 	add.w	r1, r1, r2, ror #24
			QROUND( 1,  5,  9, 13);
 800affc:	ea84 5433 	eor.w	r4, r4, r3, ror #20
			QROUND( 3,  7, 11, 15);
 800b000:	ea81 5535 	eor.w	r5, r1, r5, ror #20
			QROUND( 2,  6, 10, 14);
 800b004:	ea89 4737 	eor.w	r7, r9, r7, ror #16
			QROUND( 0,  5, 10, 15);
 800b008:	eb0b 6b74 	add.w	fp, fp, r4, ror #25
			QROUND( 1,  6, 11, 12);
			QROUND( 2,  7,  8, 13);
 800b00c:	eb09 6975 	add.w	r9, r9, r5, ror #25
 800b010:	f8cd 9004 	str.w	r9, [sp, #4]
			QROUND( 0,  5, 10, 15);
 800b014:	ea8b 6232 	eor.w	r2, fp, r2, ror #24
			QROUND( 3,  4,  9, 14);
 800b018:	f8dd 9008 	ldr.w	r9, [sp, #8]
			QROUND( 0,  5, 10, 15);
 800b01c:	9202      	str	r2, [sp, #8]
			QROUND( 2,  7,  8, 13);
 800b01e:	9a01      	ldr	r2, [sp, #4]
			QROUND( 2,  6, 10, 14);
 800b020:	9b04      	ldr	r3, [sp, #16]
			QROUND( 2,  7,  8, 13);
 800b022:	ea82 6c3c 	eor.w	ip, r2, ip, ror #24
			QROUND( 0,  5, 10, 15);
 800b026:	9a02      	ldr	r2, [sp, #8]
			QROUND( 2,  6, 10, 14);
 800b028:	eb00 6037 	add.w	r0, r0, r7, ror #24
 800b02c:	ea80 5333 	eor.w	r3, r0, r3, ror #20
			QROUND( 3,  4,  9, 14);
 800b030:	eb08 6879 	add.w	r8, r8, r9, ror #25
			QROUND( 0,  5, 10, 15);
 800b034:	eb00 4032 	add.w	r0, r0, r2, ror #16
			QROUND( 3,  4,  9, 14);
 800b038:	9a03      	ldr	r2, [sp, #12]
 800b03a:	ea88 6737 	eor.w	r7, r8, r7, ror #24
 800b03e:	eb02 4237 	add.w	r2, r2, r7, ror #16
			QROUND( 1,  6, 11, 12);
 800b042:	eb0a 6a73 	add.w	sl, sl, r3, ror #25
			QROUND( 3,  4,  9, 14);
 800b046:	ea82 6979 	eor.w	r9, r2, r9, ror #25
 800b04a:	9203      	str	r2, [sp, #12]
			QROUND( 1,  6, 11, 12);
 800b04c:	ea8a 6e3e 	eor.w	lr, sl, lr, ror #24
			QROUND( 3,  4,  9, 14);
 800b050:	464a      	mov	r2, r9
			QROUND( 1,  6, 11, 12);
 800b052:	eb01 413e 	add.w	r1, r1, lr, ror #16
			QROUND( 2,  7,  8, 13);
 800b056:	f8dd 9004 	ldr.w	r9, [sp, #4]
			QROUND( 3,  4,  9, 14);
 800b05a:	9206      	str	r2, [sp, #24]
			QROUND( 2,  7,  8, 13);
 800b05c:	eb06 463c 	add.w	r6, r6, ip, ror #16
			QROUND( 0,  5, 10, 15);
 800b060:	ea80 6474 	eor.w	r4, r0, r4, ror #25
			QROUND( 3,  4,  9, 14);
 800b064:	eb08 5832 	add.w	r8, r8, r2, ror #20
			QROUND( 0,  5, 10, 15);
 800b068:	9a02      	ldr	r2, [sp, #8]
			QROUND( 1,  6, 11, 12);
 800b06a:	ea81 6373 	eor.w	r3, r1, r3, ror #25
			QROUND( 2,  7,  8, 13);
 800b06e:	ea86 6575 	eor.w	r5, r6, r5, ror #25
			QROUND( 0,  5, 10, 15);
 800b072:	eb0b 5b34 	add.w	fp, fp, r4, ror #20
 800b076:	ea8b 4232 	eor.w	r2, fp, r2, ror #16
			QROUND( 1,  6, 11, 12);
 800b07a:	eb0a 5a33 	add.w	sl, sl, r3, ror #20
			QROUND( 2,  7,  8, 13);
 800b07e:	eb09 5935 	add.w	r9, r9, r5, ror #20
			QROUND( 1,  6, 11, 12);
 800b082:	ea8a 4e3e 	eor.w	lr, sl, lr, ror #16
			QROUND( 2,  7,  8, 13);
 800b086:	ea89 4c3c 	eor.w	ip, r9, ip, ror #16
			QROUND( 0,  5, 10, 15);
 800b08a:	9201      	str	r2, [sp, #4]
 800b08c:	eb00 6032 	add.w	r0, r0, r2, ror #24
			QROUND( 3,  4,  9, 14);
 800b090:	9a03      	ldr	r2, [sp, #12]
 800b092:	ea88 4737 	eor.w	r7, r8, r7, ror #16
			QROUND( 1,  6, 11, 12);
 800b096:	eb01 613e 	add.w	r1, r1, lr, ror #24
			QROUND( 2,  7,  8, 13);
 800b09a:	eb06 663c 	add.w	r6, r6, ip, ror #24
			QROUND( 3,  4,  9, 14);
 800b09e:	eb02 6237 	add.w	r2, r2, r7, ror #24
			QROUND( 1,  6, 11, 12);
 800b0a2:	ea81 5333 	eor.w	r3, r1, r3, ror #20
			QROUND( 2,  7,  8, 13);
 800b0a6:	ea86 5535 	eor.w	r5, r6, r5, ror #20
			QROUND( 3,  4,  9, 14);
 800b0aa:	9203      	str	r2, [sp, #12]
			QROUND( 1,  6, 11, 12);
 800b0ac:	9302      	str	r3, [sp, #8]
			QROUND( 2,  7,  8, 13);
 800b0ae:	9504      	str	r5, [sp, #16]
			QROUND( 1,  6, 11, 12);
 800b0b0:	9d02      	ldr	r5, [sp, #8]
			QROUND( 3,  4,  9, 14);
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	9a06      	ldr	r2, [sp, #24]
			QROUND( 1,  6, 11, 12);
 800b0b6:	ea4f 6575 	mov.w	r5, r5, ror #25
			QROUND( 3,  4,  9, 14);
 800b0ba:	ea83 5332 	eor.w	r3, r3, r2, ror #20
			QROUND( 0,  5, 10, 15);
 800b0be:	9a01      	ldr	r2, [sp, #4]
			QROUND( 1,  6, 11, 12);
 800b0c0:	9501      	str	r5, [sp, #4]
			QROUND( 2,  7,  8, 13);
 800b0c2:	9d04      	ldr	r5, [sp, #16]
 800b0c4:	ea4f 6575 	mov.w	r5, r5, ror #25
 800b0c8:	9502      	str	r5, [sp, #8]
		for (i = 0; i < 10; i ++) {
 800b0ca:	9d05      	ldr	r5, [sp, #20]
			QROUND( 0,  5, 10, 15);
 800b0cc:	ea80 5434 	eor.w	r4, r0, r4, ror #20
		for (i = 0; i < 10; i ++) {
 800b0d0:	3d01      	subs	r5, #1
			QROUND( 0,  5, 10, 15);
 800b0d2:	ea4f 6232 	mov.w	r2, r2, ror #24
 800b0d6:	ea4f 6474 	mov.w	r4, r4, ror #25
			QROUND( 1,  6, 11, 12);
 800b0da:	ea4f 6e3e 	mov.w	lr, lr, ror #24
			QROUND( 2,  7,  8, 13);
 800b0de:	ea4f 6c3c 	mov.w	ip, ip, ror #24
			QROUND( 3,  4,  9, 14);
 800b0e2:	ea4f 6737 	mov.w	r7, r7, ror #24
 800b0e6:	ea4f 6373 	mov.w	r3, r3, ror #25
		for (i = 0; i < 10; i ++) {
 800b0ea:	9505      	str	r5, [sp, #20]
 800b0ec:	f47f af46 	bne.w	800af7c <falcon_inner_prng_refill+0x9c>
 800b0f0:	9204      	str	r2, [sp, #16]
 800b0f2:	460a      	mov	r2, r1
 800b0f4:	4601      	mov	r1, r0
 800b0f6:	911c      	str	r1, [sp, #112]	; 0x70
#undef QROUND

		}

		for (v = 0; v < 4; v ++) {
			state[v] += CW[v];
 800b0f8:	4930      	ldr	r1, [pc, #192]	; (800b1bc <falcon_inner_prng_refill+0x2dc>)
 800b0fa:	9417      	str	r4, [sp, #92]	; 0x5c
 800b0fc:	4451      	add	r1, sl
 800b0fe:	9113      	str	r1, [sp, #76]	; 0x4c
 800b100:	492d      	ldr	r1, [pc, #180]	; (800b1b8 <falcon_inner_prng_refill+0x2d8>)
 800b102:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800b106:	4449      	add	r1, r9
 800b108:	e9dd 0501 	ldrd	r0, r5, [sp, #4]
 800b10c:	9114      	str	r1, [sp, #80]	; 0x50
 800b10e:	492d      	ldr	r1, [pc, #180]	; (800b1c4 <falcon_inner_prng_refill+0x2e4>)
 800b110:	9018      	str	r0, [sp, #96]	; 0x60
 800b112:	e9cd 2e1d 	strd	r2, lr, [sp, #116]	; 0x74
 800b116:	4a2a      	ldr	r2, [pc, #168]	; (800b1c0 <falcon_inner_prng_refill+0x2e0>)
 800b118:	9803      	ldr	r0, [sp, #12]
 800b11a:	901b      	str	r0, [sp, #108]	; 0x6c
 800b11c:	4441      	add	r1, r8
 800b11e:	445a      	add	r2, fp
 800b120:	9115      	str	r1, [sp, #84]	; 0x54
 800b122:	9904      	ldr	r1, [sp, #16]
 800b124:	9121      	str	r1, [sp, #132]	; 0x84
 800b126:	e9cd 5619 	strd	r5, r6, [sp, #100]	; 0x64
 800b12a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b12c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b12e:	9720      	str	r7, [sp, #128]	; 0x80
 800b130:	9316      	str	r3, [sp, #88]	; 0x58
 800b132:	9212      	str	r2, [sp, #72]	; 0x48
		}
		for (v = 4; v < 14; v ++) {
 800b134:	ac16      	add	r4, sp, #88	; 0x58
 800b136:	4619      	mov	r1, r3
 800b138:	e000      	b.n	800b13c <falcon_inner_prng_refill+0x25c>
			state[v] += ((uint32_t *)p->state.d)[v - 4];
 800b13a:	6821      	ldr	r1, [r4, #0]
 800b13c:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800b140:	440b      	add	r3, r1
		for (v = 4; v < 14; v ++) {
 800b142:	4285      	cmp	r5, r0
			state[v] += ((uint32_t *)p->state.d)[v - 4];
 800b144:	f844 3b04 	str.w	r3, [r4], #4
		for (v = 4; v < 14; v ++) {
 800b148:	d1f7      	bne.n	800b13a <falcon_inner_prng_refill+0x25a>
		}
		state[14] += ((uint32_t *)p->state.d)[10]
			^ (uint32_t)cc;
 800b14a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b14c:	9b07      	ldr	r3, [sp, #28]
 800b14e:	f8d0 1230 	ldr.w	r1, [r0, #560]	; 0x230
		state[15] += ((uint32_t *)p->state.d)[11]
 800b152:	9c04      	ldr	r4, [sp, #16]
			^ (uint32_t)cc;
 800b154:	4059      	eors	r1, r3
			^ (uint32_t)(cc >> 32);
		cc ++;
 800b156:	3301      	adds	r3, #1
 800b158:	9307      	str	r3, [sp, #28]
			^ (uint32_t)(cc >> 32);
 800b15a:	f8d0 3234 	ldr.w	r3, [r0, #564]	; 0x234
 800b15e:	9808      	ldr	r0, [sp, #32]
 800b160:	ea83 0300 	eor.w	r3, r3, r0
		state[15] += ((uint32_t *)p->state.d)[11]
 800b164:	4423      	add	r3, r4
 800b166:	9321      	str	r3, [sp, #132]	; 0x84
		cc ++;
 800b168:	f140 0300 	adc.w	r3, r0, #0
 800b16c:	9308      	str	r3, [sp, #32]
		state[14] += ((uint32_t *)p->state.d)[10]
 800b16e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b170:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b172:	440b      	add	r3, r1
 800b174:	9320      	str	r3, [sp, #128]	; 0x80

		/*
		 * We mimic the interleaving that is used in the AVX2
		 * implementation.
		 */
		for (v = 0; v < 16; v ++) {
 800b176:	9905      	ldr	r1, [sp, #20]
 800b178:	ab12      	add	r3, sp, #72	; 0x48
 800b17a:	e001      	b.n	800b180 <falcon_inner_prng_refill+0x2a0>
			((uint32_t *)p->buf.d)[u + (v << 3)] = state[v];
 800b17c:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800b180:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		for (v = 0; v < 16; v ++) {
 800b184:	3108      	adds	r1, #8
 800b186:	2980      	cmp	r1, #128	; 0x80
 800b188:	d1f8      	bne.n	800b17c <falcon_inner_prng_refill+0x29c>
	for (u = 0; u < 8; u ++) {
 800b18a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b18c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b18e:	3301      	adds	r3, #1
 800b190:	3204      	adds	r2, #4
 800b192:	2b08      	cmp	r3, #8
 800b194:	930a      	str	r3, [sp, #40]	; 0x28
 800b196:	9209      	str	r2, [sp, #36]	; 0x24
 800b198:	f47f aebd 	bne.w	800af16 <falcon_inner_prng_refill+0x36>
		cc ++;
 800b19c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b19e:	9a11      	ldr	r2, [sp, #68]	; 0x44
		}
	}
	*(uint64_t *)(p->state.d + 48) = cc;
 800b1a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
		cc ++;
 800b1a2:	3308      	adds	r3, #8
 800b1a4:	f142 0200 	adc.w	r2, r2, #0


	p->ptr = 0;
 800b1a8:	2100      	movs	r1, #0
	*(uint64_t *)(p->state.d + 48) = cc;
 800b1aa:	e9c0 328e 	strd	r3, r2, [r0, #568]	; 0x238
	p->ptr = 0;
 800b1ae:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
 800b1b2:	b023      	add	sp, #140	; 0x8c
 800b1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b8:	79622d32 	.word	0x79622d32
 800b1bc:	3320646e 	.word	0x3320646e
 800b1c0:	61707865 	.word	0x61707865
 800b1c4:	6b206574 	.word	0x6b206574
	...

0800b1d0 <poly_small_mkgauss.constprop.0>:
/*
 * Generate a random polynomial with a Gaussian distribution. This function
 * also makes sure that the resultant of the polynomial with phi is odd.
 */
static void
poly_small_mkgauss(RNG_CONTEXT *rng, int8_t *f, unsigned logn)
 800b1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d4:	b08b      	sub	sp, #44	; 0x2c
 800b1d6:	1e42      	subs	r2, r0, #1
 800b1d8:	9204      	str	r2, [sp, #16]
 800b1da:	f200 12ff 	addw	r2, r0, #511	; 0x1ff
 800b1de:	9205      	str	r2, [sp, #20]
 800b1e0:	f1c0 0301 	rsb	r3, r0, #1
{
	size_t n, u;
	unsigned mod2;

	n = MKN(logn);
	mod2 = 0;
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	4e51      	ldr	r6, [pc, #324]	; (800b32c <poly_small_mkgauss.constprop.0+0x15c>)
poly_small_mkgauss(RNG_CONTEXT *rng, int8_t *f, unsigned logn)
 800b1e8:	9006      	str	r0, [sp, #24]
	mod2 = 0;
 800b1ea:	9202      	str	r2, [sp, #8]
 800b1ec:	9307      	str	r3, [sp, #28]
 800b1ee:	9b07      	ldr	r3, [sp, #28]
 800b1f0:	9a04      	ldr	r2, [sp, #16]
void
Zf(i_shake256_extract)(inner_shake256_context *sc, uint8_t *out, size_t len)
{
	size_t dptr;

	dptr = (size_t)sc->dptr;
 800b1f2:	f8d6 40c8 	ldr.w	r4, [r6, #200]	; 0xc8
 800b1f6:	4413      	add	r3, r2
 800b1f8:	9303      	str	r3, [sp, #12]
 800b1fa:	2302      	movs	r3, #2
 800b1fc:	9301      	str	r3, [sp, #4]
	val = 0;
 800b1fe:	f04f 0800 	mov.w	r8, #0
 800b202:	f10d 0a20 	add.w	sl, sp, #32
 800b206:	2708      	movs	r7, #8
 800b208:	e00d      	b.n	800b226 <poly_small_mkgauss.constprop.0+0x56>

		if (dptr == 136) {
			process_block(sc->st.A);
			dptr = 0;
		}
		clen = 136 - dptr;
 800b20a:	f1c4 0588 	rsb	r5, r4, #136	; 0x88
		if (clen > len) {
			clen = len;
		}
		len -= clen;
		memcpy(out, sc->st.dbuf + dptr, clen);
 800b20e:	1931      	adds	r1, r6, r4
 800b210:	42bd      	cmp	r5, r7
 800b212:	bf28      	it	cs
 800b214:	463d      	movcs	r5, r7
 800b216:	4650      	mov	r0, sl
 800b218:	462a      	mov	r2, r5
		len -= clen;
 800b21a:	1b7f      	subs	r7, r7, r5
		memcpy(out, sc->st.dbuf + dptr, clen);
 800b21c:	f009 fd32 	bl	8014c84 <memcpy>
		dptr += clen;
 800b220:	442c      	add	r4, r5
		out += clen;
 800b222:	44aa      	add	sl, r5
	while (len > 0) {
 800b224:	b147      	cbz	r7, 800b238 <poly_small_mkgauss.constprop.0+0x68>
		if (dptr == 136) {
 800b226:	2c88      	cmp	r4, #136	; 0x88
 800b228:	d1ef      	bne.n	800b20a <poly_small_mkgauss.constprop.0+0x3a>
			process_block(sc->st.A);
 800b22a:	4630      	mov	r0, r6
 800b22c:	f7fe fa90 	bl	8009750 <process_block>
 800b230:	4625      	mov	r5, r4
 800b232:	4631      	mov	r1, r6
			dptr = 0;
 800b234:	2400      	movs	r4, #0
 800b236:	e7eb      	b.n	800b210 <poly_small_mkgauss.constprop.0+0x40>
	}
	sc->dptr = dptr;
 800b238:	e9c6 4732 	strd	r4, r7, [r6, #200]	; 0xc8
	return r;
 800b23c:	e9dd 3708 	ldrd	r3, r7, [sp, #32]
		f = (uint32_t)((r - gauss_1024_12289[0]) >> 63);
 800b240:	4a3b      	ldr	r2, [pc, #236]	; (800b330 <poly_small_mkgauss.constprop.0+0x160>)
 800b242:	189b      	adds	r3, r3, r2
 800b244:	4b3b      	ldr	r3, [pc, #236]	; (800b334 <poly_small_mkgauss.constprop.0+0x164>)
		r &= ~((uint64_t)1 << 63);
 800b246:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
		f = (uint32_t)((r - gauss_1024_12289[0]) >> 63);
 800b24a:	eb43 0a0a 	adc.w	sl, r3, sl
		neg = (uint32_t)(r >> 63);
 800b24e:	0fff      	lsrs	r7, r7, #31
		f = (uint32_t)((r - gauss_1024_12289[0]) >> 63);
 800b250:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800b254:	f10d 0920 	add.w	r9, sp, #32
 800b258:	2508      	movs	r5, #8
 800b25a:	e00e      	b.n	800b27a <poly_small_mkgauss.constprop.0+0xaa>
		clen = 136 - dptr;
 800b25c:	f1c4 0b88 	rsb	fp, r4, #136	; 0x88
		memcpy(out, sc->st.dbuf + dptr, clen);
 800b260:	1931      	adds	r1, r6, r4
 800b262:	45ab      	cmp	fp, r5
 800b264:	bf28      	it	cs
 800b266:	46ab      	movcs	fp, r5
 800b268:	4648      	mov	r0, r9
 800b26a:	465a      	mov	r2, fp
		len -= clen;
 800b26c:	eba5 050b 	sub.w	r5, r5, fp
		memcpy(out, sc->st.dbuf + dptr, clen);
 800b270:	f009 fd08 	bl	8014c84 <memcpy>
		dptr += clen;
 800b274:	445c      	add	r4, fp
		out += clen;
 800b276:	44d9      	add	r9, fp
	while (len > 0) {
 800b278:	b145      	cbz	r5, 800b28c <poly_small_mkgauss.constprop.0+0xbc>
		if (dptr == 136) {
 800b27a:	2c88      	cmp	r4, #136	; 0x88
 800b27c:	d1ee      	bne.n	800b25c <poly_small_mkgauss.constprop.0+0x8c>
			process_block(sc->st.A);
 800b27e:	4630      	mov	r0, r6
 800b280:	f7fe fa66 	bl	8009750 <process_block>
 800b284:	46a3      	mov	fp, r4
 800b286:	4631      	mov	r1, r6
			dptr = 0;
 800b288:	2400      	movs	r4, #0
 800b28a:	e7ea      	b.n	800b262 <poly_small_mkgauss.constprop.0+0x92>
	return r;
 800b28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b28e:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b292:	4829      	ldr	r0, [pc, #164]	; (800b338 <poly_small_mkgauss.constprop.0+0x168>)
		r &= ~((uint64_t)1 << 63);
 800b294:	4a29      	ldr	r2, [pc, #164]	; (800b33c <poly_small_mkgauss.constprop.0+0x16c>)
	sc->dptr = dptr;
 800b296:	e9c6 4532 	strd	r4, r5, [r6, #200]	; 0xc8
 800b29a:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800b29e:	4b28      	ldr	r3, [pc, #160]	; (800b340 <poly_small_mkgauss.constprop.0+0x170>)
		for (k = 1; k < (sizeof gauss_1024_12289)
 800b2a0:	2101      	movs	r1, #1
			t = (uint32_t)((r - gauss_1024_12289[k]) >> 63) ^ 1;
 800b2a2:	ebbc 0303 	subs.w	r3, ip, r3
 800b2a6:	eb6e 0202 	sbc.w	r2, lr, r2
 800b2aa:	43d2      	mvns	r2, r2
 800b2ac:	0fd2      	lsrs	r2, r2, #31
			v |= k & -(t & (f ^ 1));
 800b2ae:	f08a 0301 	eor.w	r3, sl, #1
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	425b      	negs	r3, r3
 800b2b6:	400b      	ands	r3, r1
			/ (sizeof gauss_1024_12289[0]); k ++)
 800b2b8:	3101      	adds	r1, #1
		for (k = 1; k < (sizeof gauss_1024_12289)
 800b2ba:	291b      	cmp	r1, #27
			v |= k & -(t & (f ^ 1));
 800b2bc:	ea45 0503 	orr.w	r5, r5, r3
		for (k = 1; k < (sizeof gauss_1024_12289)
 800b2c0:	d109      	bne.n	800b2d6 <poly_small_mkgauss.constprop.0+0x106>
		v = (v ^ -neg) + neg;
 800b2c2:	427b      	negs	r3, r7
 800b2c4:	406b      	eors	r3, r5
 800b2c6:	443b      	add	r3, r7
		val += *(int32_t *)&v;
 800b2c8:	4498      	add	r8, r3
	for (u = 0; u < g; u ++) {
 800b2ca:	9b01      	ldr	r3, [sp, #4]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d008      	beq.n	800b2e2 <poly_small_mkgauss.constprop.0+0x112>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	9301      	str	r3, [sp, #4]
 800b2d4:	e795      	b.n	800b202 <poly_small_mkgauss.constprop.0+0x32>
			t = (uint32_t)((r - gauss_1024_12289[k]) >> 63) ^ 1;
 800b2d6:	f850 3f08 	ldr.w	r3, [r0, #8]!
			f |= t;
 800b2da:	ea4a 0a02 	orr.w	sl, sl, r2
			t = (uint32_t)((r - gauss_1024_12289[k]) >> 63) ^ 1;
 800b2de:	6842      	ldr	r2, [r0, #4]
 800b2e0:	e7df      	b.n	800b2a2 <poly_small_mkgauss.constprop.0+0xd2>
		 * We need the coefficient to fit within -127..+127;
		 * realistically, this is always the case except for
		 * the very low degrees (N = 2 or 4), for which there
		 * is no real security anyway.
		 */
		if (s < -127 || s > 127) {
 800b2e2:	f108 037f 	add.w	r3, r8, #127	; 0x7f
 800b2e6:	2bfe      	cmp	r3, #254	; 0xfe
 800b2e8:	d887      	bhi.n	800b1fa <poly_small_mkgauss.constprop.0+0x2a>
		/*
		 * We need the sum of all coefficients to be 1; otherwise,
		 * the resultant of the polynomial with X^N+1 will be even,
		 * and the binary GCD will fail.
		 */
		if (u == n - 1) {
 800b2ea:	9a03      	ldr	r2, [sp, #12]
 800b2ec:	f240 13ff 	movw	r3, #511	; 0x1ff
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d10b      	bne.n	800b30c <poly_small_mkgauss.constprop.0+0x13c>
			if ((mod2 ^ (unsigned)(s & 1)) == 0) {
 800b2f4:	9a02      	ldr	r2, [sp, #8]
 800b2f6:	f008 0301 	and.w	r3, r8, #1
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	f43f af7d 	beq.w	800b1fa <poly_small_mkgauss.constprop.0+0x2a>
				goto restart;
			}
		} else {
			mod2 ^= (unsigned)(s & 1);
		}
		f[u] = (int8_t)s;
 800b300:	9b06      	ldr	r3, [sp, #24]
 800b302:	f883 81ff 	strb.w	r8, [r3, #511]	; 0x1ff
	}
}
 800b306:	b00b      	add	sp, #44	; 0x2c
 800b308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		f[u] = (int8_t)s;
 800b30c:	9b04      	ldr	r3, [sp, #16]
			mod2 ^= (unsigned)(s & 1);
 800b30e:	9a02      	ldr	r2, [sp, #8]
		f[u] = (int8_t)s;
 800b310:	f803 8f01 	strb.w	r8, [r3, #1]!
			mod2 ^= (unsigned)(s & 1);
 800b314:	f008 0801 	and.w	r8, r8, #1
 800b318:	ea82 0208 	eor.w	r2, r2, r8
 800b31c:	9202      	str	r2, [sp, #8]
	for (u = 0; u < n; u ++) {
 800b31e:	9a05      	ldr	r2, [sp, #20]
		f[u] = (int8_t)s;
 800b320:	9304      	str	r3, [sp, #16]
	for (u = 0; u < n; u ++) {
 800b322:	429a      	cmp	r2, r3
 800b324:	f47f af63 	bne.w	800b1ee <poly_small_mkgauss.constprop.0+0x1e>
 800b328:	e7ed      	b.n	800b306 <poly_small_mkgauss.constprop.0+0x136>
 800b32a:	bf00      	nop
 800b32c:	200036e0 	.word	0x200036e0
 800b330:	d20d54a8 	.word	0xd20d54a8
 800b334:	ee2ec827 	.word	0xee2ec827
 800b338:	0801d4f8 	.word	0x0801d4f8
 800b33c:	590c40f6 	.word	0x590c40f6
 800b340:	3ff5f974 	.word	0x3ff5f974
	...

0800b350 <zint_bezout.constprop.0>:
zint_bezout(uint32_t *restrict u, uint32_t *restrict v,
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	b0a9      	sub	sp, #164	; 0xa4
 800b356:	e9cd 011d 	strd	r0, r1, [sp, #116]	; 0x74
 800b35a:	921f      	str	r2, [sp, #124]	; 0x7c
	if (len == 0) {
 800b35c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b35e:	b91b      	cbnz	r3, 800b368 <zint_bezout.constprop.0+0x18>
		return 0;
 800b360:	9817      	ldr	r0, [sp, #92]	; 0x5c
}
 800b362:	b029      	add	sp, #164	; 0xa4
 800b364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	x0i = modp_ninv31(x[0]);
 800b368:	680c      	ldr	r4, [r1, #0]
	y0i = modp_ninv31(y[0]);
 800b36a:	6815      	ldr	r5, [r2, #0]
 800b36c:	4617      	mov	r7, r2
	y = 2 - p;
 800b36e:	f1c4 0202 	rsb	r2, r4, #2
	y *= 2 - p * y;
 800b372:	fb02 f004 	mul.w	r0, r2, r4
 800b376:	461e      	mov	r6, r3
 800b378:	f1c0 0002 	rsb	r0, r0, #2
	y = 2 - p;
 800b37c:	f1c5 0302 	rsb	r3, r5, #2
	y *= 2 - p * y;
 800b380:	fb00 f202 	mul.w	r2, r0, r2
 800b384:	fb03 f005 	mul.w	r0, r3, r5
 800b388:	f1c0 0002 	rsb	r0, r0, #2
 800b38c:	fb00 f303 	mul.w	r3, r0, r3
	y *= 2 - p * y;
 800b390:	fb02 f004 	mul.w	r0, r2, r4
 800b394:	f1c0 0002 	rsb	r0, r0, #2
 800b398:	fb00 f202 	mul.w	r2, r0, r2
 800b39c:	fb03 f005 	mul.w	r0, r3, r5
 800b3a0:	f1c0 0002 	rsb	r0, r0, #2
 800b3a4:	fb00 f303 	mul.w	r3, r0, r3
	y *= 2 - p * y;
 800b3a8:	fb02 f004 	mul.w	r0, r2, r4
 800b3ac:	f1c0 0002 	rsb	r0, r0, #2
 800b3b0:	fb00 f202 	mul.w	r2, r0, r2
 800b3b4:	fb03 f005 	mul.w	r0, r3, r5
 800b3b8:	f1c0 0002 	rsb	r0, r0, #2
 800b3bc:	fb00 f303 	mul.w	r3, r0, r3
	y *= 2 - p * y;
 800b3c0:	fb02 f004 	mul.w	r0, r2, r4
 800b3c4:	3802      	subs	r0, #2
	return (uint32_t)0x7FFFFFFF & -y;
 800b3c6:	fb00 f202 	mul.w	r2, r0, r2
 800b3ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b3ce:	9222      	str	r2, [sp, #136]	; 0x88
	y *= 2 - p * y;
 800b3d0:	fb03 f205 	mul.w	r2, r3, r5
 800b3d4:	3a02      	subs	r2, #2
	return (uint32_t)0x7FFFFFFF & -y;
 800b3d6:	fb02 f303 	mul.w	r3, r2, r3
	a = v1 + len;
 800b3da:	9a32      	ldr	r2, [sp, #200]	; 0xc8
	return (uint32_t)0x7FFFFFFF & -y;
 800b3dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
	a = v1 + len;
 800b3e0:	eb02 09c6 	add.w	r9, r2, r6, lsl #3
	return (uint32_t)0x7FFFFFFF & -y;
 800b3e4:	9321      	str	r3, [sp, #132]	; 0x84
	v1 = u1 + len;
 800b3e6:	00b3      	lsls	r3, r6, #2
	memcpy(a, x, len * sizeof *x);
 800b3e8:	469b      	mov	fp, r3
 800b3ea:	461a      	mov	r2, r3
	b = a + len;
 800b3ec:	eb09 0a86 	add.w	sl, r9, r6, lsl #2
	memcpy(a, x, len * sizeof *x);
 800b3f0:	4648      	mov	r0, r9
 800b3f2:	4688      	mov	r8, r1
	v1 = u1 + len;
 800b3f4:	9327      	str	r3, [sp, #156]	; 0x9c
	a = v1 + len;
 800b3f6:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
	b = a + len;
 800b3fa:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
	memcpy(a, x, len * sizeof *x);
 800b3fe:	f009 fc41 	bl	8014c84 <memcpy>
	memcpy(b, y, len * sizeof *y);
 800b402:	4639      	mov	r1, r7
 800b404:	465a      	mov	r2, fp
 800b406:	4650      	mov	r0, sl
 800b408:	f009 fc3c 	bl	8014c84 <memcpy>
	u0[0] = 1;
 800b40c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b40e:	2301      	movs	r3, #1
	memset(u0 + 1, 0, (len - 1) * sizeof *u0);
 800b410:	1e72      	subs	r2, r6, #1
	u0[0] = 1;
 800b412:	f840 3b04 	str.w	r3, [r0], #4
	memset(u0 + 1, 0, (len - 1) * sizeof *u0);
 800b416:	0092      	lsls	r2, r2, #2
 800b418:	2100      	movs	r1, #0
 800b41a:	f009 fbe7 	bl	8014bec <memset>
	memset(v0, 0, len * sizeof *v0);
 800b41e:	465a      	mov	r2, fp
 800b420:	2100      	movs	r1, #0
 800b422:	48b9      	ldr	r0, [pc, #740]	; (800b708 <zint_bezout.constprop.0+0x3b8>)
 800b424:	f009 fbe2 	bl	8014bec <memset>
	memcpy(u1, y, len * sizeof *u1);
 800b428:	9832      	ldr	r0, [sp, #200]	; 0xc8
	v1 = u1 + len;
 800b42a:	eb00 0386 	add.w	r3, r0, r6, lsl #2
	memcpy(u1, y, len * sizeof *u1);
 800b42e:	4639      	mov	r1, r7
 800b430:	465a      	mov	r2, fp
	v1 = u1 + len;
 800b432:	461f      	mov	r7, r3
 800b434:	9320      	str	r3, [sp, #128]	; 0x80
	memcpy(u1, y, len * sizeof *u1);
 800b436:	f009 fc25 	bl	8014c84 <memcpy>
	memcpy(v1, x, len * sizeof *v1);
 800b43a:	465a      	mov	r2, fp
 800b43c:	4641      	mov	r1, r8
 800b43e:	4638      	mov	r0, r7
 800b440:	f009 fc20 	bl	8014c84 <memcpy>
	v1[0] --;
 800b444:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800b446:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800b448:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800b44c:	3b01      	subs	r3, #1
 800b44e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
	for (num = 62 * (uint32_t)len + 30; num >= 30; num -= 30) {
 800b452:	ebc6 1346 	rsb	r3, r6, r6, lsl #5
 800b456:	005b      	lsls	r3, r3, #1
 800b458:	331e      	adds	r3, #30
 800b45a:	2b1d      	cmp	r3, #29
 800b45c:	9319      	str	r3, [sp, #100]	; 0x64
 800b45e:	f240 8221 	bls.w	800b8a4 <zint_bezout.constprop.0+0x554>
	a[len - 1] = (uint32_t)cca;
 800b462:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 800b466:	3b01      	subs	r3, #1
 800b468:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
 800b46c:	3204      	adds	r2, #4
 800b46e:	9224      	str	r2, [sp, #144]	; 0x90
 800b470:	eb09 0283 	add.w	r2, r9, r3, lsl #2
	b[len - 1] = (uint32_t)ccb;
 800b474:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800b478:	931a      	str	r3, [sp, #104]	; 0x68
 800b47a:	f1a9 0304 	sub.w	r3, r9, #4
 800b47e:	9325      	str	r3, [sp, #148]	; 0x94
 800b480:	f1aa 0304 	sub.w	r3, sl, #4
	a[len - 1] = (uint32_t)cca;
 800b484:	9223      	str	r2, [sp, #140]	; 0x8c
 800b486:	9326      	str	r3, [sp, #152]	; 0x98
		b1 = 0;
 800b488:	2700      	movs	r7, #0
		c1 = (uint32_t)-1;
 800b48a:	f04f 3eff 	mov.w	lr, #4294967295
			c0 &= (((aw | bw) + 0x7FFFFFFF) >> 31) - (uint32_t)1;
 800b48e:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 800b492:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
		b0 = 0;
 800b496:	46bc      	mov	ip, r7
		a1 = 0;
 800b498:	46b8      	mov	r8, r7
		c0 = (uint32_t)-1;
 800b49a:	4671      	mov	r1, lr
		a0 = 0;
 800b49c:	463e      	mov	r6, r7
			c0 &= (((aw | bw) + 0x7FFFFFFF) >> 31) - (uint32_t)1;
 800b49e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b4a2:	e000      	b.n	800b4a6 <zint_bezout.constprop.0+0x156>
 800b4a4:	4619      	mov	r1, r3
			aw = a[j];
 800b4a6:	f859 0d04 	ldr.w	r0, [r9, #-4]!
			bw = b[j];
 800b4aa:	f85a 2d04 	ldr.w	r2, [sl, #-4]!
			a0 ^= (a0 ^ aw) & c0;
 800b4ae:	ea80 0406 	eor.w	r4, r0, r6
 800b4b2:	400c      	ands	r4, r1
			c0 &= (((aw | bw) + 0x7FFFFFFF) >> 31) - (uint32_t)1;
 800b4b4:	ea40 0302 	orr.w	r3, r0, r2
			a0 ^= (a0 ^ aw) & c0;
 800b4b8:	4066      	eors	r6, r4
			b0 ^= (b0 ^ bw) & c0;
 800b4ba:	ea82 040c 	eor.w	r4, r2, ip
			b1 ^= (b1 ^ bw) & c1;
 800b4be:	407a      	eors	r2, r7
 800b4c0:	ea02 020e 	and.w	r2, r2, lr
			c0 &= (((aw | bw) + 0x7FFFFFFF) >> 31) - (uint32_t)1;
 800b4c4:	445b      	add	r3, fp
			b1 ^= (b1 ^ bw) & c1;
 800b4c6:	4057      	eors	r7, r2
		while (j -- > 0) {
 800b4c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
			a1 ^= (a1 ^ aw) & c1;
 800b4ca:	ea80 0508 	eor.w	r5, r0, r8
			c0 &= (((aw | bw) + 0x7FFFFFFF) >> 31) - (uint32_t)1;
 800b4ce:	0fdb      	lsrs	r3, r3, #31
			a1 ^= (a1 ^ aw) & c1;
 800b4d0:	ea05 050e 	and.w	r5, r5, lr
			c0 &= (((aw | bw) + 0x7FFFFFFF) >> 31) - (uint32_t)1;
 800b4d4:	3b01      	subs	r3, #1
			b0 ^= (b0 ^ bw) & c0;
 800b4d6:	400c      	ands	r4, r1
		while (j -- > 0) {
 800b4d8:	4591      	cmp	r9, r2
			a1 ^= (a1 ^ aw) & c1;
 800b4da:	ea88 0805 	eor.w	r8, r8, r5
			c0 &= (((aw | bw) + 0x7FFFFFFF) >> 31) - (uint32_t)1;
 800b4de:	ea03 0301 	and.w	r3, r3, r1
			b0 ^= (b0 ^ bw) & c0;
 800b4e2:	ea8c 0c04 	eor.w	ip, ip, r4
 800b4e6:	468e      	mov	lr, r1
		while (j -- > 0) {
 800b4e8:	d1dc      	bne.n	800b4a4 <zint_bezout.constprop.0+0x154>
		a_lo = a[0];
 800b4ea:	4605      	mov	r5, r0
 800b4ec:	901b      	str	r0, [sp, #108]	; 0x6c
		a0 &= ~c1;
 800b4ee:	ea26 0001 	bic.w	r0, r6, r1
		a1 |= a0 & c1;
 800b4f2:	400e      	ands	r6, r1
		b0 &= ~c1;
 800b4f4:	ea2c 0301 	bic.w	r3, ip, r1
		a1 |= a0 & c1;
 800b4f8:	ea46 0608 	orr.w	r6, r6, r8
		a_hi = ((uint64_t)a0 << 31) + a1;
 800b4fc:	07c4      	lsls	r4, r0, #31
		b1 |= b0 & c1;
 800b4fe:	ea0c 0101 	and.w	r1, ip, r1
		a_hi = ((uint64_t)a0 << 31) + a1;
 800b502:	19a4      	adds	r4, r4, r6
		b1 |= b0 & c1;
 800b504:	ea41 0107 	orr.w	r1, r1, r7
		b_hi = ((uint64_t)b0 << 31) + b1;
 800b508:	ea4f 7bc3 	mov.w	fp, r3, lsl #31
		a_hi = ((uint64_t)a0 << 31) + a1;
 800b50c:	ea4f 0050 	mov.w	r0, r0, lsr #1
		b_hi = ((uint64_t)b0 << 31) + b1;
 800b510:	ea4f 0653 	mov.w	r6, r3, lsr #1
		b_lo = b[0];
 800b514:	9a18      	ldr	r2, [sp, #96]	; 0x60
		pb = 0;
 800b516:	f04f 0300 	mov.w	r3, #0
		a_hi = ((uint64_t)a0 << 31) + a1;
 800b51a:	f140 0000 	adc.w	r0, r0, #0
		b_hi = ((uint64_t)b0 << 31) + b1;
 800b51e:	eb1b 0b01 	adds.w	fp, fp, r1
		qb = 1;
 800b522:	f04f 0101 	mov.w	r1, #1
		pa = 1;
 800b526:	e9cd 1312 	strd	r1, r3, [sp, #72]	; 0x48
		qa = 0;
 800b52a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
		b_lo = b[0];
 800b52e:	6812      	ldr	r2, [r2, #0]
 800b530:	921c      	str	r2, [sp, #112]	; 0x70
		b_hi = ((uint64_t)b0 << 31) + b1;
 800b532:	f146 0600 	adc.w	r6, r6, #0
		pb = 0;
 800b536:	9314      	str	r3, [sp, #80]	; 0x50
		qb = 1;
 800b538:	910f      	str	r1, [sp, #60]	; 0x3c
		b_lo = b[0];
 800b53a:	920b      	str	r2, [sp, #44]	; 0x2c
		a_lo = a[0];
 800b53c:	46a8      	mov	r8, r5
		pb = 0;
 800b53e:	9315      	str	r3, [sp, #84]	; 0x54
		qb = 1;
 800b540:	9310      	str	r3, [sp, #64]	; 0x40
		for (i = 0; i < 31; i ++) {
 800b542:	9311      	str	r3, [sp, #68]	; 0x44
			rz = b_hi - a_hi;
 800b544:	ebbb 0304 	subs.w	r3, fp, r4
			oa = (a_lo >> i) & 1;
 800b548:	9f11      	ldr	r7, [sp, #68]	; 0x44
			ob = (b_lo >> i) & 1;
 800b54a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
			pa -= qa & -(int64_t)cAB;
 800b54e:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
			rz = b_hi - a_hi;
 800b552:	eb66 0200 	sbc.w	r2, r6, r0
				& (a_hi ^ rz))) >> 63);
 800b556:	ea82 0500 	eor.w	r5, r2, r0
			rt = (uint32_t)((rz ^ ((a_hi ^ b_hi)
 800b55a:	ea86 0100 	eor.w	r1, r6, r0
			oa = (a_lo >> i) & 1;
 800b55e:	fa28 f307 	lsr.w	r3, r8, r7
				& (a_hi ^ rz))) >> 63);
 800b562:	4029      	ands	r1, r5
			rt = (uint32_t)((rz ^ ((a_hi ^ b_hi)
 800b564:	4051      	eors	r1, r2
			ob = (b_lo >> i) & 1;
 800b566:	fa2a fe07 	lsr.w	lr, sl, r7
			oa = (a_lo >> i) & 1;
 800b56a:	f003 0301 	and.w	r3, r3, #1
			ob = (b_lo >> i) & 1;
 800b56e:	463a      	mov	r2, r7
			cAB = oa & ob & rt;
 800b570:	ea0e 0e03 	and.w	lr, lr, r3
		for (i = 0; i < 31; i ++) {
 800b574:	3201      	adds	r2, #1
 800b576:	9211      	str	r2, [sp, #68]	; 0x44
			cAB = oa & ob & rt;
 800b578:	ea0e 72d1 	and.w	r2, lr, r1, lsr #31
			cA = cAB | (oa ^ 1);
 800b57c:	f083 0301 	eor.w	r3, r3, #1
			cBA = oa & ob & ~rt;
 800b580:	ea2e 7ed1 	bic.w	lr, lr, r1, lsr #31
			a_lo -= b_lo & -cAB;
 800b584:	4251      	negs	r1, r2
			cA = cAB | (oa ^ 1);
 800b586:	4313      	orrs	r3, r2
			a_hi -= b_hi & -(uint64_t)cAB;
 800b588:	ea01 070b 	and.w	r7, r1, fp
 800b58c:	1be7      	subs	r7, r4, r7
			cA = cAB | (oa ^ 1);
 800b58e:	930c      	str	r3, [sp, #48]	; 0x30
			a_hi -= b_hi & -(uint64_t)cAB;
 800b590:	ea01 0506 	and.w	r5, r1, r6
			pa -= qa & -(int64_t)cAB;
 800b594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			a_hi -= b_hi & -(uint64_t)cAB;
 800b596:	eb60 0505 	sbc.w	r5, r0, r5
			pa -= qa & -(int64_t)cAB;
 800b59a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b59c:	ea01 0403 	and.w	r4, r1, r3
 800b5a0:	1b04      	subs	r4, r0, r4
 800b5a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b5a4:	ea01 0900 	and.w	r9, r1, r0
 800b5a8:	eb6c 0909 	sbc.w	r9, ip, r9
			pb -= qb & -(int64_t)cAB;
 800b5ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b5ae:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
			a_hi -= b_hi & -(uint64_t)cAB;
 800b5b2:	460a      	mov	r2, r1
			pb -= qb & -(int64_t)cAB;
 800b5b4:	4002      	ands	r2, r0
 800b5b6:	ea01 000c 	and.w	r0, r1, ip
 800b5ba:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800b5be:	ebbc 0000 	subs.w	r0, ip, r0
 800b5c2:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
			a_lo -= b_lo & -cAB;
 800b5c6:	4653      	mov	r3, sl
			pb -= qb & -(int64_t)cAB;
 800b5c8:	eb6c 0202 	sbc.w	r2, ip, r2
			a_lo -= b_lo & -cAB;
 800b5cc:	4019      	ands	r1, r3
			b_hi -= a_hi & -(uint64_t)cBA;
 800b5ce:	f1de 0c00 	rsbs	ip, lr, #0
			a_lo -= b_lo & -cAB;
 800b5d2:	eba8 0101 	sub.w	r1, r8, r1
			b_hi -= a_hi & -(uint64_t)cBA;
 800b5d6:	eb6a 0a0a 	sbc.w	sl, sl, sl
 800b5da:	ea0c 0807 	and.w	r8, ip, r7
 800b5de:	ebbb 0808 	subs.w	r8, fp, r8
			b_lo -= a_lo & -cBA;
 800b5e2:	46e6      	mov	lr, ip
			qa -= pa & -(int64_t)cBA;
 800b5e4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800b5e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			b_hi -= a_hi & -(uint64_t)cBA;
 800b5ea:	ea0a 0c05 	and.w	ip, sl, r5
 800b5ee:	eb66 0c0c 	sbc.w	ip, r6, ip
			qa -= pa & -(int64_t)cBA;
 800b5f2:	ea04 060e 	and.w	r6, r4, lr
 800b5f6:	ebbb 0606 	subs.w	r6, fp, r6
 800b5fa:	ea09 0b0a 	and.w	fp, r9, sl
 800b5fe:	eb63 0b0b 	sbc.w	fp, r3, fp
			qb -= pb & -(int64_t)cBA;
 800b602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
			qa -= pa & -(int64_t)cBA;
 800b604:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
			qb -= pb & -(int64_t)cBA;
 800b608:	ea00 0b0e 	and.w	fp, r0, lr
 800b60c:	ebb3 030b 	subs.w	r3, r3, fp
 800b610:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800b614:	930f      	str	r3, [sp, #60]	; 0x3c
 800b616:	ea02 0a0a 	and.w	sl, r2, sl
			b_lo -= a_lo & -cBA;
 800b61a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			qb -= pb & -(int64_t)cBA;
 800b61c:	eb6b 0a0a 	sbc.w	sl, fp, sl
			pa += pa & ((int64_t)cA - 1);
 800b620:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
			qb -= pb & -(int64_t)cBA;
 800b624:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
			b_lo -= a_lo & -cBA;
 800b628:	ea0e 0e01 	and.w	lr, lr, r1
			pa += pa & ((int64_t)cA - 1);
 800b62c:	f11b 3aff 	adds.w	sl, fp, #4294967295
			b_lo -= a_lo & -cBA;
 800b630:	eba3 0e0e 	sub.w	lr, r3, lr
 800b634:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
			a_lo += a_lo & (cA - 1);
 800b638:	46d6      	mov	lr, sl
			pa += pa & ((int64_t)cA - 1);
 800b63a:	ea04 0b0e 	and.w	fp, r4, lr
 800b63e:	f04f 0300 	mov.w	r3, #0
 800b642:	f143 3aff 	adc.w	sl, r3, #4294967295
 800b646:	eb14 040b 	adds.w	r4, r4, fp
 800b64a:	9412      	str	r4, [sp, #72]	; 0x48
 800b64c:	ea09 040a 	and.w	r4, r9, sl
 800b650:	eb49 0404 	adc.w	r4, r9, r4
 800b654:	9413      	str	r4, [sp, #76]	; 0x4c
			pb += pb & ((int64_t)cA - 1);
 800b656:	ea00 040e 	and.w	r4, r0, lr
 800b65a:	1903      	adds	r3, r0, r4
 800b65c:	ea02 000a 	and.w	r0, r2, sl
 800b660:	9314      	str	r3, [sp, #80]	; 0x50
 800b662:	eb42 0300 	adc.w	r3, r2, r0
 800b666:	9315      	str	r3, [sp, #84]	; 0x54
			a_hi ^= (a_hi ^ (a_hi >> 1)) & -(uint64_t)cA;
 800b668:	087a      	lsrs	r2, r7, #1
 800b66a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b66c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800b670:	425b      	negs	r3, r3
 800b672:	ea82 0207 	eor.w	r2, r2, r7
 800b676:	ea02 0203 	and.w	r2, r2, r3
 800b67a:	ea87 0402 	eor.w	r4, r7, r2
			b_hi ^= (b_hi ^ (b_hi >> 1)) & ((uint64_t)cA - 1);
 800b67e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800b682:	ea42 72cc 	orr.w	r2, r2, ip, lsl #31
 800b686:	ea82 0208 	eor.w	r2, r2, r8
 800b68a:	ea02 020e 	and.w	r2, r2, lr
			a_lo += a_lo & (cA - 1);
 800b68e:	ea0e 0e01 	and.w	lr, lr, r1
			b_hi ^= (b_hi ^ (b_hi >> 1)) & ((uint64_t)cA - 1);
 800b692:	ea88 0b02 	eor.w	fp, r8, r2
			a_lo += a_lo & (cA - 1);
 800b696:	eb01 080e 	add.w	r8, r1, lr
			qa += qa & -(int64_t)cA;
 800b69a:	ea06 0103 	and.w	r1, r6, r3
			a_hi ^= (a_hi ^ (a_hi >> 1)) & -(uint64_t)cA;
 800b69e:	eb62 0202 	sbc.w	r2, r2, r2
			qa += qa & -(int64_t)cA;
 800b6a2:	1870      	adds	r0, r6, r1
 800b6a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b6a6:	900d      	str	r0, [sp, #52]	; 0x34
 800b6a8:	ea06 0102 	and.w	r1, r6, r2
 800b6ac:	eb46 0601 	adc.w	r6, r6, r1
			a_hi ^= (a_hi ^ (a_hi >> 1)) & -(uint64_t)cA;
 800b6b0:	ea85 0055 	eor.w	r0, r5, r5, lsr #1
			qa += qa & -(int64_t)cA;
 800b6b4:	960e      	str	r6, [sp, #56]	; 0x38
			qb += qb & -(int64_t)cA;
 800b6b6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
			a_hi ^= (a_hi ^ (a_hi >> 1)) & -(uint64_t)cA;
 800b6b8:	4010      	ands	r0, r2
			qb += qb & -(int64_t)cA;
 800b6ba:	ea06 0103 	and.w	r1, r6, r3
			a_hi ^= (a_hi ^ (a_hi >> 1)) & -(uint64_t)cA;
 800b6be:	4068      	eors	r0, r5
			qb += qb & -(int64_t)cA;
 800b6c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b6c2:	1876      	adds	r6, r6, r1
 800b6c4:	960f      	str	r6, [sp, #60]	; 0x3c
 800b6c6:	ea02 0205 	and.w	r2, r2, r5
			b_lo += b_lo & -cA;
 800b6ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
			qb += qb & -(int64_t)cA;
 800b6cc:	eb45 0502 	adc.w	r5, r5, r2
		for (i = 0; i < 31; i ++) {
 800b6d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
			qb += qb & -(int64_t)cA;
 800b6d2:	9510      	str	r5, [sp, #64]	; 0x40
			b_lo += b_lo & -cA;
 800b6d4:	400b      	ands	r3, r1
			b_hi ^= (b_hi ^ (b_hi >> 1)) & ((uint64_t)cA - 1);
 800b6d6:	ea8c 065c 	eor.w	r6, ip, ip, lsr #1
			b_lo += b_lo & -cA;
 800b6da:	18cb      	adds	r3, r1, r3
			b_hi ^= (b_hi ^ (b_hi >> 1)) & ((uint64_t)cA - 1);
 800b6dc:	ea06 060a 	and.w	r6, r6, sl
		for (i = 0; i < 31; i ++) {
 800b6e0:	2a1f      	cmp	r2, #31
			b_lo += b_lo & -cA;
 800b6e2:	930b      	str	r3, [sp, #44]	; 0x2c
			b_hi ^= (b_hi ^ (b_hi >> 1)) & ((uint64_t)cA - 1);
 800b6e4:	ea8c 0606 	eor.w	r6, ip, r6
		for (i = 0; i < 31; i ++) {
 800b6e8:	f47f af2c 	bne.w	800b544 <zint_bezout.constprop.0+0x1f4>
	ccb = 0;
 800b6ec:	2300      	movs	r3, #0
	for (u = 0; u < len; u ++) {
 800b6ee:	e9dd 461b 	ldrd	r4, r6, [sp, #108]	; 0x6c
		zb = wa * (uint64_t)ya + wb * (uint64_t)yb + (uint64_t)ccb;
 800b6f2:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 800b6f6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
	for (u = 0; u < len; u ++) {
 800b6fa:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	ccb = 0;
 800b6fe:	4618      	mov	r0, r3
	cca = 0;
 800b700:	461d      	mov	r5, r3
 800b702:	469c      	mov	ip, r3
	for (u = 0; u < len; u ++) {
 800b704:	461f      	mov	r7, r3
 800b706:	e005      	b.n	800b714 <zint_bezout.constprop.0+0x3c4>
 800b708:	2000c8e0 	.word	0x2000c8e0
		wa = a[u];
 800b70c:	f858 4f04 	ldr.w	r4, [r8, #4]!
		wb = b[u];
 800b710:	f85e 6f04 	ldr.w	r6, [lr, #4]!
		za = wa * (uint64_t)xa + wb * (uint64_t)xb + (uint64_t)cca;
 800b714:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b716:	fba4 ba02 	umull	fp, sl, r4, r2
 800b71a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b71c:	fb04 aa02 	mla	sl, r4, r2, sl
 800b720:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b722:	fba6 2102 	umull	r2, r1, r6, r2
 800b726:	eb1b 0202 	adds.w	r2, fp, r2
 800b72a:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 800b72e:	fb06 110b 	mla	r1, r6, fp, r1
 800b732:	eb4a 0101 	adc.w	r1, sl, r1
 800b736:	1952      	adds	r2, r2, r5
 800b738:	eb4c 0101 	adc.w	r1, ip, r1
		cca = *(int64_t *)&za >> 31;
 800b73c:	0fd5      	lsrs	r5, r2, #31
 800b73e:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
 800b742:	ea4f 7ce1 	mov.w	ip, r1, asr #31
		zb = wa * (uint64_t)ya + wb * (uint64_t)yb + (uint64_t)ccb;
 800b746:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b748:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800b74c:	fba4 1a01 	umull	r1, sl, r4, r1
 800b750:	fb04 a40b 	mla	r4, r4, fp, sl
 800b754:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800b758:	fba6 ba0a 	umull	fp, sl, r6, sl
 800b75c:	eb11 010b 	adds.w	r1, r1, fp
 800b760:	fb06 aa09 	mla	sl, r6, r9, sl
 800b764:	eb44 040a 	adc.w	r4, r4, sl
 800b768:	18c9      	adds	r1, r1, r3
			a[u - 1] = (uint32_t)za & 0x7FFFFFFF;
 800b76a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		zb = wa * (uint64_t)ya + wb * (uint64_t)yb + (uint64_t)ccb;
 800b76e:	eb40 0404 	adc.w	r4, r0, r4
		if (u > 0) {
 800b772:	b12f      	cbz	r7, 800b780 <zint_bezout.constprop.0+0x430>
			b[u - 1] = (uint32_t)zb & 0x7FFFFFFF;
 800b774:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
			a[u - 1] = (uint32_t)za & 0x7FFFFFFF;
 800b778:	f848 2c04 	str.w	r2, [r8, #-4]
			b[u - 1] = (uint32_t)zb & 0x7FFFFFFF;
 800b77c:	f84e 3c04 	str.w	r3, [lr, #-4]
	for (u = 0; u < len; u ++) {
 800b780:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b782:	3701      	adds	r7, #1
		ccb = *(int64_t *)&zb >> 31;
 800b784:	0fcb      	lsrs	r3, r1, #31
	for (u = 0; u < len; u ++) {
 800b786:	42ba      	cmp	r2, r7
		ccb = *(int64_t *)&zb >> 31;
 800b788:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 800b78c:	ea4f 70e4 	mov.w	r0, r4, asr #31
	for (u = 0; u < len; u ++) {
 800b790:	d1bc      	bne.n	800b70c <zint_bezout.constprop.0+0x3bc>
	b[len - 1] = (uint32_t)ccb;
 800b792:	9a1a      	ldr	r2, [sp, #104]	; 0x68
	a[len - 1] = (uint32_t)cca;
 800b794:	9e23      	ldr	r6, [sp, #140]	; 0x8c
	nega = (uint32_t)((uint64_t)cca >> 63);
 800b796:	ea4f 71dc 	mov.w	r1, ip, lsr #31
	a[len - 1] = (uint32_t)cca;
 800b79a:	6035      	str	r5, [r6, #0]
	b[len - 1] = (uint32_t)ccb;
 800b79c:	6013      	str	r3, [r2, #0]
 800b79e:	9a25      	ldr	r2, [sp, #148]	; 0x94
	negb = (uint32_t)((uint64_t)ccb >> 63);
 800b7a0:	0fc5      	lsrs	r5, r0, #31
	a[len - 1] = (uint32_t)cca;
 800b7a2:	46b9      	mov	r9, r7
	m = -ctl >> 1;
 800b7a4:	ea4f 005c 	mov.w	r0, ip, lsr #1
	cc = ctl;
 800b7a8:	460b      	mov	r3, r1
		aw = (aw ^ m) + cc;
 800b7aa:	f852 4f04 	ldr.w	r4, [r2, #4]!
 800b7ae:	4044      	eors	r4, r0
 800b7b0:	4423      	add	r3, r4
		a[u] = aw & 0x7FFFFFFF;
 800b7b2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
	for (u = 0; u < len; u ++) {
 800b7b6:	4296      	cmp	r6, r2
		a[u] = aw & 0x7FFFFFFF;
 800b7b8:	6014      	str	r4, [r2, #0]
		cc = aw >> 31;
 800b7ba:	ea4f 73d3 	mov.w	r3, r3, lsr #31
	for (u = 0; u < len; u ++) {
 800b7be:	d1f4      	bne.n	800b7aa <zint_bezout.constprop.0+0x45a>
	m = -ctl >> 1;
 800b7c0:	4268      	negs	r0, r5
 800b7c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
	cc = ctl;
 800b7c4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
	m = -ctl >> 1;
 800b7c6:	0840      	lsrs	r0, r0, #1
	cc = ctl;
 800b7c8:	462b      	mov	r3, r5
		aw = (aw ^ m) + cc;
 800b7ca:	f852 4f04 	ldr.w	r4, [r2, #4]!
 800b7ce:	4044      	eors	r4, r0
 800b7d0:	4423      	add	r3, r4
		a[u] = aw & 0x7FFFFFFF;
 800b7d2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
	for (u = 0; u < len; u ++) {
 800b7d6:	4296      	cmp	r6, r2
		a[u] = aw & 0x7FFFFFFF;
 800b7d8:	6014      	str	r4, [r2, #0]
		cc = aw >> 31;
 800b7da:	ea4f 73d3 	mov.w	r3, r3, lsr #31
	for (u = 0; u < len; u ++) {
 800b7de:	d1f4      	bne.n	800b7ca <zint_bezout.constprop.0+0x47a>
		zint_co_reduce_mod(u0, u1, y, len, y0i, pa, pb, qa, qb);
 800b7e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7e2:	9300      	str	r3, [sp, #0]
	for (num = 62 * (uint32_t)len + 30; num >= 30; num -= 30) {
 800b7e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
		pa -= (pa + pa) & -(int64_t)(r & 1);
 800b7e6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800b7e8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
		pb -= (pb + pb) & -(int64_t)(r & 1);
 800b7ea:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
	for (num = 62 * (uint32_t)len + 30; num >= 30; num -= 30) {
 800b7ee:	3b1e      	subs	r3, #30
		pa -= (pa + pa) & -(int64_t)(r & 1);
 800b7f0:	1920      	adds	r0, r4, r4
	for (num = 62 * (uint32_t)len + 30; num >= 30; num -= 30) {
 800b7f2:	9319      	str	r3, [sp, #100]	; 0x64
		pa -= (pa + pa) & -(int64_t)(r & 1);
 800b7f4:	f1c1 0300 	rsb	r3, r1, #0
 800b7f8:	eb46 0206 	adc.w	r2, r6, r6
 800b7fc:	4018      	ands	r0, r3
 800b7fe:	1a20      	subs	r0, r4, r0
 800b800:	ea02 0203 	and.w	r2, r2, r3
 800b804:	eb66 0702 	sbc.w	r7, r6, r2
		pb -= (pb + pb) & -(int64_t)(r & 1);
 800b808:	9a14      	ldr	r2, [sp, #80]	; 0x50
		zint_co_reduce_mod(u0, u1, y, len, y0i, pa, pb, qa, qb);
 800b80a:	900b      	str	r0, [sp, #44]	; 0x2c
		pb -= (pb + pb) & -(int64_t)(r & 1);
 800b80c:	1894      	adds	r4, r2, r2
 800b80e:	eb4c 060c 	adc.w	r6, ip, ip
		zint_co_reduce_mod(u0, u1, y, len, y0i, pa, pb, qa, qb);
 800b812:	e9cd 0702 	strd	r0, r7, [sp, #8]
		pb -= (pb + pb) & -(int64_t)(r & 1);
 800b816:	401c      	ands	r4, r3
		qa -= (qa + qa) & -(int64_t)(r >> 1);
 800b818:	980d      	ldr	r0, [sp, #52]	; 0x34
		pb -= (pb + pb) & -(int64_t)(r & 1);
 800b81a:	1b14      	subs	r4, r2, r4
 800b81c:	ea06 0603 	and.w	r6, r6, r3
 800b820:	eb6c 0606 	sbc.w	r6, ip, r6
		qa -= (qa + qa) & -(int64_t)(r >> 1);
 800b824:	426b      	negs	r3, r5
 800b826:	1801      	adds	r1, r0, r0
 800b828:	ea01 0503 	and.w	r5, r1, r3
 800b82c:	990e      	ldr	r1, [sp, #56]	; 0x38
		qb -= (qb + qb) & -(int64_t)(r >> 1);
 800b82e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
		zint_co_reduce_mod(u0, u1, y, len, y0i, pa, pb, qa, qb);
 800b832:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
		qa -= (qa + qa) & -(int64_t)(r >> 1);
 800b834:	eb41 0801 	adc.w	r8, r1, r1
 800b838:	ea08 0803 	and.w	r8, r8, r3
 800b83c:	1b45      	subs	r5, r0, r5
 800b83e:	eb61 0808 	sbc.w	r8, r1, r8
		qb -= (qb + qb) & -(int64_t)(r >> 1);
 800b842:	990f      	ldr	r1, [sp, #60]	; 0x3c
		zint_co_reduce_mod(u0, u1, y, len, y0i, pa, pb, qa, qb);
 800b844:	981d      	ldr	r0, [sp, #116]	; 0x74
		qb -= (qb + qb) & -(int64_t)(r >> 1);
 800b846:	eb11 0a01 	adds.w	sl, r1, r1
 800b84a:	eb4c 0b0c 	adc.w	fp, ip, ip
 800b84e:	ea0a 0a03 	and.w	sl, sl, r3
 800b852:	ebb1 0a0a 	subs.w	sl, r1, sl
 800b856:	ea0b 0b03 	and.w	fp, fp, r3
 800b85a:	eb6c 0b0b 	sbc.w	fp, ip, fp
		zint_co_reduce_mod(u0, u1, y, len, y0i, pa, pb, qa, qb);
 800b85e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 800b860:	464b      	mov	r3, r9
 800b862:	e9cd 4604 	strd	r4, r6, [sp, #16]
 800b866:	e9cd 5806 	strd	r5, r8, [sp, #24]
 800b86a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b86e:	f7fd fd1f 	bl	80092b0 <zint_co_reduce_mod>
		zint_co_reduce_mod(v0, v1, x, len, x0i, pa, pb, qa, qb);
 800b872:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b874:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b876:	9200      	str	r2, [sp, #0]
 800b878:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800b87c:	464b      	mov	r3, r9
 800b87e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b882:	e9cd 5806 	strd	r5, r8, [sp, #24]
 800b886:	e9cd 4604 	strd	r4, r6, [sp, #16]
 800b88a:	4814      	ldr	r0, [pc, #80]	; (800b8dc <zint_bezout.constprop.0+0x58c>)
 800b88c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b88e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b890:	f7fd fd0e 	bl	80092b0 <zint_co_reduce_mod>
	for (num = 62 * (uint32_t)len + 30; num >= 30; num -= 30) {
 800b894:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b896:	2b1d      	cmp	r3, #29
 800b898:	f63f adf6 	bhi.w	800b488 <zint_bezout.constprop.0+0x138>
	return (int)((1 - ((rc | -rc) >> 31)) & x[0] & y[0]);
 800b89c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b89e:	681c      	ldr	r4, [r3, #0]
 800b8a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b8a2:	681d      	ldr	r5, [r3, #0]
	rc = a[0] ^ 1;
 800b8a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b8a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (j = 1; j < len; j ++) {
 800b8ac:	2b01      	cmp	r3, #1
	rc = a[0] ^ 1;
 800b8ae:	f082 0201 	eor.w	r2, r2, #1
	for (j = 1; j < len; j ++) {
 800b8b2:	d009      	beq.n	800b8c8 <zint_bezout.constprop.0+0x578>
 800b8b4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800b8b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b8b8:	1f08      	subs	r0, r1, #4
 800b8ba:	4418      	add	r0, r3
		rc |= a[j];
 800b8bc:	f853 1f04 	ldr.w	r1, [r3, #4]!
	for (j = 1; j < len; j ++) {
 800b8c0:	4298      	cmp	r0, r3
		rc |= a[j];
 800b8c2:	ea42 0201 	orr.w	r2, r2, r1
	for (j = 1; j < len; j ++) {
 800b8c6:	d1f9      	bne.n	800b8bc <zint_bezout.constprop.0+0x56c>
	return (int)((1 - ((rc | -rc) >> 31)) & x[0] & y[0]);
 800b8c8:	4250      	negs	r0, r2
 800b8ca:	4310      	orrs	r0, r2
 800b8cc:	17c0      	asrs	r0, r0, #31
 800b8ce:	402c      	ands	r4, r5
 800b8d0:	3001      	adds	r0, #1
 800b8d2:	4020      	ands	r0, r4
}
 800b8d4:	b029      	add	sp, #164	; 0xa4
 800b8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8da:	bf00      	nop
 800b8dc:	2000c8e0 	.word	0x2000c8e0

0800b8e0 <_read_r>:
  return len;
#else
  (void)file;
  (void)ptr;
  (void)len;
  __errno_r(r)  = EINVAL;
 800b8e0:	2316      	movs	r3, #22
 800b8e2:	6003      	str	r3, [r0, #0]
  return -1;
#endif
}
 800b8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	0000      	movs	r0, r0
	...

0800b8f0 <_lseek_r>:
  (void)file;
  (void)ptr;
  (void)dir;

  return 0;
}
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	4770      	bx	lr
	...

0800b900 <_write_r>:
    return -1;
  }
  sdWrite(&STDOUT_SD, (uint8_t *)ptr, (size_t)len);
#endif
  return len;
}
 800b900:	4618      	mov	r0, r3
 800b902:	4770      	bx	lr
	...

0800b910 <_close_r>:
int _close_r(struct _reent *r, int file) {
  (void)r;
  (void)file;

  return 0;
}
 800b910:	2000      	movs	r0, #0
 800b912:	4770      	bx	lr
	...

0800b920 <_sbrk_r>:

/***************************************************************************/

__attribute__((used))
caddr_t _sbrk_r(struct _reent *r, int incr) {
 800b920:	4602      	mov	r2, r0
 800b922:	2330      	movs	r3, #48	; 0x30
 800b924:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.basemem + offset, align);
 800b928:	4b0b      	ldr	r3, [pc, #44]	; (800b958 <_sbrk_r+0x38>)
 800b92a:	6818      	ldr	r0, [r3, #0]
  if ((next > ch_memcore.topmem) || (next < ch_memcore.basemem)) {
 800b92c:	f8d3 c004 	ldr.w	ip, [r3, #4]
  next = p + size;
 800b930:	4401      	add	r1, r0
  if ((next > ch_memcore.topmem) || (next < ch_memcore.basemem)) {
 800b932:	4561      	cmp	r1, ip
 800b934:	d807      	bhi.n	800b946 <_sbrk_r+0x26>
 800b936:	4288      	cmp	r0, r1
 800b938:	d805      	bhi.n	800b946 <_sbrk_r+0x26>
  ch_memcore.basemem = next;
 800b93a:	6019      	str	r1, [r3, #0]
 800b93c:	2300      	movs	r3, #0
 800b93e:	f383 8811 	msr	BASEPRI, r3
  void *p;

  chDbgCheck(incr >= 0);

  p = chCoreAllocFromBase((size_t)incr, 1U, 0U);
  if (p == NULL) {
 800b942:	b118      	cbz	r0, 800b94c <_sbrk_r+0x2c>
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 800b944:	4770      	bx	lr
 800b946:	2300      	movs	r3, #0
 800b948:	f383 8811 	msr	BASEPRI, r3
    __errno_r(r)  = ENOMEM;
 800b94c:	230c      	movs	r3, #12
 800b94e:	6013      	str	r3, [r2, #0]
    return (caddr_t)-1;
 800b950:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	20000b60 	.word	0x20000b60
 800b95c:	00000000 	.word	0x00000000

0800b960 <_fstat_r>:

/***************************************************************************/

__attribute__((used))
int _fstat_r(struct _reent *r, int file, struct stat * st) {
 800b960:	b508      	push	{r3, lr}
 800b962:	4613      	mov	r3, r2
  (void)r;
  (void)file;

  memset(st, 0, sizeof(*st));
 800b964:	2100      	movs	r1, #0
 800b966:	2258      	movs	r2, #88	; 0x58
 800b968:	4618      	mov	r0, r3
 800b96a:	f009 f93f 	bl	8014bec <memset>
  st->st_mode = S_IFCHR;
 800b96e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b972:	6042      	str	r2, [r0, #4]
  return 0;
}
 800b974:	2000      	movs	r0, #0
 800b976:	bd08      	pop	{r3, pc}
	...

0800b980 <_isatty_r>:
int _isatty_r(struct _reent *r, int fd) {
  (void)r;
  (void)fd;

  return 1;
}
 800b980:	2001      	movs	r0, #1
 800b982:	4770      	bx	lr
	...

0800b990 <_exit>:
  __ASM volatile ("cpsid i" : : : "memory");
 800b990:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 800b992:	4904      	ldr	r1, [pc, #16]	; (800b9a4 <_exit+0x14>)
  ch_system.state = ch_sys_halted;
 800b994:	4b04      	ldr	r3, [pc, #16]	; (800b9a8 <_exit+0x18>)
  currcore->dbg.panic_msg = reason;
 800b996:	4805      	ldr	r0, [pc, #20]	; (800b9ac <_exit+0x1c>)
 800b998:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
  ch_system.state = ch_sys_halted;
 800b99c:	2203      	movs	r2, #3
 800b99e:	701a      	strb	r2, [r3, #0]
  while (true) {
 800b9a0:	e7fe      	b.n	800b9a0 <_exit+0x10>
 800b9a2:	bf00      	nop
 800b9a4:	20000a90 	.word	0x20000a90
 800b9a8:	20000b68 	.word	0x20000b68
 800b9ac:	080162b8 	.word	0x080162b8

0800b9b0 <_kill>:
 800b9b0:	b672      	cpsid	i
  currcore->dbg.panic_msg = reason;
 800b9b2:	4904      	ldr	r1, [pc, #16]	; (800b9c4 <_kill+0x14>)
  ch_system.state = ch_sys_halted;
 800b9b4:	4b04      	ldr	r3, [pc, #16]	; (800b9c8 <_kill+0x18>)
  currcore->dbg.panic_msg = reason;
 800b9b6:	4805      	ldr	r0, [pc, #20]	; (800b9cc <_kill+0x1c>)
 800b9b8:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
  ch_system.state = ch_sys_halted;
 800b9bc:	2203      	movs	r2, #3
 800b9be:	701a      	strb	r2, [r3, #0]
  while (true) {
 800b9c0:	e7fe      	b.n	800b9c0 <_kill+0x10>
 800b9c2:	bf00      	nop
 800b9c4:	20000a90 	.word	0x20000a90
 800b9c8:	20000b68 	.word	0x20000b68
 800b9cc:	080162c0 	.word	0x080162c0

0800b9d0 <_getpid>:
__attribute__((used))
int _getpid(void) {

  return 1;
  abort();
}
 800b9d0:	2001      	movs	r0, #1
 800b9d2:	4770      	bx	lr
	...

0800b9e0 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 800b9e0:	4bb2      	ldr	r3, [pc, #712]	; (800bcac <main+0x2cc>)
  PWR->CR |= PWR_CR_DBP;
 800b9e2:	48b3      	ldr	r0, [pc, #716]	; (800bcb0 <main+0x2d0>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 800b9e4:	691a      	ldr	r2, [r3, #16]
 800b9e6:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 800b9ea:	ea6f 52d2 	mvn.w	r2, r2, lsr #23

/*
 * Application entry point.
 */

int main(void) {
 800b9ee:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800b9f2:	611a      	str	r2, [r3, #16]
 800b9f4:	691a      	ldr	r2, [r3, #16]
 800b9f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9fa:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800b9fc:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 800ba00:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 800ba02:	695a      	ldr	r2, [r3, #20]
 800ba04:	615c      	str	r4, [r3, #20]
 800ba06:	2100      	movs	r1, #0
 800ba08:	695a      	ldr	r2, [r3, #20]
 800ba0a:	6159      	str	r1, [r3, #20]
 800ba0c:	695a      	ldr	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800ba0e:	6a1a      	ldr	r2, [r3, #32]
 800ba10:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 800ba14:	621a      	str	r2, [r3, #32]
 800ba16:	6a1a      	ldr	r2, [r3, #32]
 800ba18:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800ba1c:	621a      	str	r2, [r3, #32]
 800ba1e:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 800ba20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba22:	625c      	str	r4, [r3, #36]	; 0x24
 800ba24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba26:	6259      	str	r1, [r3, #36]	; 0x24
 800ba28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(true);
 800ba2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ba30:	641a      	str	r2, [r3, #64]	; 0x40
 800ba32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ba34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ba38:	661a      	str	r2, [r3, #96]	; 0x60
 800ba3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 800ba3c:	6802      	ldr	r2, [r0, #0]
 800ba3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba42:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800ba44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba46:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800ba4a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800ba4e:	b089      	sub	sp, #36	; 0x24
 800ba50:	d003      	beq.n	800ba5a <main+0x7a>
    RCC->BDCR = RCC_BDCR_BDRST;
 800ba52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ba56:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800ba58:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 800ba5a:	4995      	ldr	r1, [pc, #596]	; (800bcb0 <main+0x2d0>)
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800ba5c:	4b95      	ldr	r3, [pc, #596]	; (800bcb4 <main+0x2d4>)
 800ba5e:	684a      	ldr	r2, [r1, #4]
  sdObjectInit(&SD1, NULL, notify1);
 800ba60:	f8df 8254 	ldr.w	r8, [pc, #596]	; 800bcb8 <main+0x2d8>
 800ba64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ba68:	604a      	str	r2, [r1, #4]
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ba6a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 800ba6e:	2240      	movs	r2, #64	; 0x40
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800ba70:	20c0      	movs	r0, #192	; 0xc0
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ba72:	2120      	movs	r1, #32
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800ba74:	2570      	movs	r5, #112	; 0x70
 800ba76:	f883 531c 	strb.w	r5, [r3, #796]	; 0x31c
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ba7a:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  sdObjectInit(&SD2, NULL, notify2);
 800ba7e:	4d8f      	ldr	r5, [pc, #572]	; (800bcbc <main+0x2dc>)
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ba80:	601c      	str	r4, [r3, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800ba82:	f883 0325 	strb.w	r0, [r3, #805]	; 0x325
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ba86:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ba8a:	6059      	str	r1, [r3, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800ba8c:	f883 0326 	strb.w	r0, [r3, #806]	; 0x326
  sdObjectInit(&SD1, NULL, notify1);
 800ba90:	498b      	ldr	r1, [pc, #556]	; (800bcc0 <main+0x2e0>)
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800ba92:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 800ba96:	4640      	mov	r0, r8
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ba98:	605a      	str	r2, [r3, #4]
 800ba9a:	f007 fe19 	bl	80136d0 <sdObjectInit.constprop.0>
  SD1.usart = USART1;
 800ba9e:	4a89      	ldr	r2, [pc, #548]	; (800bcc4 <main+0x2e4>)
  SD1.clock = STM32_PCLK2;
 800baa0:	4b89      	ldr	r3, [pc, #548]	; (800bcc8 <main+0x2e8>)
  sdObjectInit(&SD2, NULL, notify2);
 800baa2:	498a      	ldr	r1, [pc, #552]	; (800bccc <main+0x2ec>)
 800baa4:	4628      	mov	r0, r5
  SD1.clock = STM32_PCLK2;
 800baa6:	e9c8 231d 	strd	r2, r3, [r8, #116]	; 0x74
  sdObjectInit(&SD2, NULL, notify2);
 800baaa:	f007 fe11 	bl	80136d0 <sdObjectInit.constprop.0>
  ST_ENABLE_CLOCK();
 800baae:	4b7f      	ldr	r3, [pc, #508]	; (800bcac <main+0x2cc>)
  SD2.usart = USART2;
 800bab0:	4887      	ldr	r0, [pc, #540]	; (800bcd0 <main+0x2f0>)
 800bab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bab4:	6768      	str	r0, [r5, #116]	; 0x74
 800bab6:	f042 0201 	orr.w	r2, r2, #1
 800baba:	641a      	str	r2, [r3, #64]	; 0x40
 800babc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  ST_ENABLE_STOP();
 800babe:	4985      	ldr	r1, [pc, #532]	; (800bcd4 <main+0x2f4>)
  ST_ENABLE_CLOCK();
 800bac0:	f042 0201 	orr.w	r2, r2, #1
 800bac4:	661a      	str	r2, [r3, #96]	; 0x60
 800bac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  ST_ENABLE_STOP();
 800bac8:	688b      	ldr	r3, [r1, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800baca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
 800bace:	f043 0301 	orr.w	r3, r3, #1
 800bad2:	608b      	str	r3, [r1, #8]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800bad4:	f04f 30ff 	mov.w	r0, #4294967295
  STM32_ST_TIM->CCMR1  = 0;
 800bad8:	2300      	movs	r3, #0
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800bada:	2101      	movs	r1, #1
  tmp->cumulative = (rttime_t)0;
 800badc:	2600      	movs	r6, #0
 800bade:	2700      	movs	r7, #0
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800bae0:	f242 04cf 	movw	r4, #8399	; 0x20cf
 800bae4:	6294      	str	r4, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800bae6:	62d0      	str	r0, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800bae8:	6193      	str	r3, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800baea:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800baec:	60d3      	str	r3, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 800baee:	6053      	str	r3, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800baf0:	6151      	str	r1, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800baf2:	6011      	str	r1, [r2, #0]
 800baf4:	e9cd 6706 	strd	r6, r7, [sp, #24]
  ch_system.state = ch_sys_initializing;
 800baf8:	4f77      	ldr	r7, [pc, #476]	; (800bcd8 <main+0x2f8>)
  tmp->worst      = (rtcnt_t)0;
 800bafa:	e9cd 0302 	strd	r0, r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 800bafe:	e9cd 3304 	strd	r3, r3, [sp, #16]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 800bb02:	e9c7 3301 	strd	r3, r3, [r7, #4]
  SD2.clock = STM32_PCLK1;
 800bb06:	4b75      	ldr	r3, [pc, #468]	; (800bcdc <main+0x2fc>)
 800bb08:	7039      	strb	r1, [r7, #0]
}
 800bb0a:	2604      	movs	r6, #4
 800bb0c:	67ab      	str	r3, [r5, #120]	; 0x78
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 800bb0e:	a802      	add	r0, sp, #8
 800bb10:	f7f8 fa5e 	bl	8003fd0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800bb14:	a802      	add	r0, sp, #8
 800bb16:	f7f8 fa63 	bl	8003fe0 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 800bb1a:	3e01      	subs	r6, #1
 800bb1c:	d1f7      	bne.n	800bb0e <main+0x12e>
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800bb1e:	4a70      	ldr	r2, [pc, #448]	; (800bce0 <main+0x300>)
  qp->next = qp;
 800bb20:	4b70      	ldr	r3, [pc, #448]	; (800bce4 <main+0x304>)
  ch_memcore.basemem = __heap_base__;
 800bb22:	4871      	ldr	r0, [pc, #452]	; (800bce8 <main+0x308>)
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 800bb24:	4c71      	ldr	r4, [pc, #452]	; (800bcec <main+0x30c>)
  mp->owner = NULL;
 800bb26:	6156      	str	r6, [r2, #20]
 800bb28:	f102 010c 	add.w	r1, r2, #12
  qp->prev = qp;
 800bb2c:	e9c2 1103 	strd	r1, r1, [r2, #12]
  mp->provider = provider;
 800bb30:	496f      	ldr	r1, [pc, #444]	; (800bcf0 <main+0x310>)
 800bb32:	6219      	str	r1, [r3, #32]
 800bb34:	6399      	str	r1, [r3, #56]	; 0x38
  dlp->next = (dyn_element_t *)dlp;
 800bb36:	f103 0110 	add.w	r1, r3, #16
 800bb3a:	6119      	str	r1, [r3, #16]
  mp->align = align;
 800bb3c:	2104      	movs	r1, #4
 800bb3e:	61d9      	str	r1, [r3, #28]
 800bb40:	6359      	str	r1, [r3, #52]	; 0x34
 800bb42:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bb46:	6259      	str	r1, [r3, #36]	; 0x24
 800bb48:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800bb4c:	6299      	str	r1, [r3, #40]	; 0x28
 800bb4e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bb52:	63d9      	str	r1, [r3, #60]	; 0x3c
 800bb54:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800bb58:	6419      	str	r1, [r3, #64]	; 0x40
 800bb5a:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800bb5e:	6459      	str	r1, [r3, #68]	; 0x44
  tcp->offset = tm.best;
 800bb60:	9902      	ldr	r1, [sp, #8]
 800bb62:	60b9      	str	r1, [r7, #8]
 800bb64:	4963      	ldr	r1, [pc, #396]	; (800bcf4 <main+0x314>)
 800bb66:	6001      	str	r1, [r0, #0]
  ch_memcore.topmem  = __heap_end__;
 800bb68:	4963      	ldr	r1, [pc, #396]	; (800bcf8 <main+0x318>)
 800bb6a:	6041      	str	r1, [r0, #4]
 800bb6c:	4963      	ldr	r1, [pc, #396]	; (800bcfc <main+0x31c>)
 800bb6e:	6011      	str	r1, [r2, #0]
  H_PAGES(&default_heap.header) = 0;
 800bb70:	e9c2 6601 	strd	r6, r6, [r2, #4]

  /* Core associated to this instance.*/
  oip->core_id = core_id;

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 800bb74:	4a62      	ldr	r2, [pc, #392]	; (800bd00 <main+0x320>)
 800bb76:	63a2      	str	r2, [r4, #56]	; 0x38
  mp->object_size = size;
 800bb78:	2214      	movs	r2, #20
 800bb7a:	619a      	str	r2, [r3, #24]
 800bb7c:	221c      	movs	r2, #28
 800bb7e:	e9c3 3300 	strd	r3, r3, [r3]
 800bb82:	609e      	str	r6, [r3, #8]
  mp->next = NULL;
 800bb84:	615e      	str	r6, [r3, #20]
 800bb86:	62de      	str	r6, [r3, #44]	; 0x2c
  ch_system.instances[core_id] = oip;
 800bb88:	607c      	str	r4, [r7, #4]
  oip->core_id = core_id;
 800bb8a:	6326      	str	r6, [r4, #48]	; 0x30
  mp->object_size = size;
 800bb8c:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800bb8e:	2030      	movs	r0, #48	; 0x30
 800bb90:	f380 8811 	msr	BASEPRI, r0
  __ASM volatile ("cpsie i" : : : "memory");
 800bb94:	b662      	cpsie	i
  pqp->prio = (tprio_t)0;
 800bb96:	e9c4 4601 	strd	r4, r6, [r4, #4]
  tp->epending          = (eventmask_t)0;
 800bb9a:	e9c4 661d 	strd	r6, r6, [r4, #116]	; 0x74
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bb9e:	4b59      	ldr	r3, [pc, #356]	; (800bd04 <main+0x324>)
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 800bba0:	6366      	str	r6, [r4, #52]	; 0x34

  ch_dlist_init(&vtlp->dlist);
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 800bba2:	61e6      	str	r6, [r4, #28]
 800bba4:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800bba6:	4a58      	ldr	r2, [pc, #352]	; (800bd08 <main+0x328>)
  tp->owner             = oip;
 800bba8:	6564      	str	r4, [r4, #84]	; 0x54
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bbaa:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
 800bbae:	ea01 010c 	and.w	r1, r1, ip
  reg_value  =  (reg_value                                   |
 800bbb2:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800bbb4:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800bbb6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800bbba:	4954      	ldr	r1, [pc, #336]	; (800bd0c <main+0x32c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800bbbc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800bbc0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800bbc4:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbc6:	f04f 0c20 	mov.w	ip, #32
 800bbca:	f042 0201 	orr.w	r2, r2, #1
 800bbce:	600a      	str	r2, [r1, #0]
 800bbd0:	f883 c01f 	strb.w	ip, [r3, #31]
 800bbd4:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800bbd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  dlhp->next  = dlhp;
 800bbdc:	f104 0110 	add.w	r1, r4, #16
 800bbe0:	f8d3 e024 	ldr.w	lr, [r3, #36]	; 0x24
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    thread_descriptor_t idle_descriptor = {
 800bbe4:	4a4a      	ldr	r2, [pc, #296]	; (800bd10 <main+0x330>)
  pqp->next = pqp;
 800bbe6:	6024      	str	r4, [r4, #0]
  dlhp->prev  = dlhp;
 800bbe8:	e9c4 1104 	strd	r1, r1, [r4, #16]
  tp->hdr.pqueue.prio   = prio;
 800bbec:	2180      	movs	r1, #128	; 0x80
 800bbee:	6461      	str	r1, [r4, #68]	; 0x44
  tp->realprio          = prio;
 800bbf0:	67e1      	str	r1, [r4, #124]	; 0x7c
  p->next       = qp;
 800bbf2:	f104 0128 	add.w	r1, r4, #40	; 0x28
  p->prev       = qp->prev;
 800bbf6:	e9c4 1113 	strd	r1, r1, [r4, #76]	; 0x4c
  p->prev->next = p;
 800bbfa:	f104 014c 	add.w	r1, r4, #76	; 0x4c
  qp->prev      = p;
 800bbfe:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
  dlhp->delta = (sysinterval_t)-1;
 800bc02:	f04f 30ff 	mov.w	r0, #4294967295
  qp->next = qp;
 800bc06:	f104 016c 	add.w	r1, r4, #108	; 0x6c
  oip->rlist.current->state = CH_STATE_CURRENT;
 800bc0a:	2301      	movs	r3, #1
  qp->prev = qp;
 800bc0c:	e9c4 111b 	strd	r1, r1, [r4, #108]	; 0x6c
  dlhp->delta = (sysinterval_t)-1;
 800bc10:	61a0      	str	r0, [r4, #24]
  tp->name              = name;
 800bc12:	4940      	ldr	r1, [pc, #256]	; (800bd14 <main+0x334>)
 800bc14:	65a1      	str	r1, [r4, #88]	; 0x58
  lp->next = lp;
 800bc16:	f104 0068 	add.w	r0, r4, #104	; 0x68
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 800bc1a:	46f2      	mov	sl, lr
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 800bc1c:	f104 093c 	add.w	r9, r4, #60	; 0x3c
    thread_descriptor_t idle_descriptor = {
 800bc20:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 800bd18 <main+0x338>
 800bc24:	493d      	ldr	r1, [pc, #244]	; (800bd1c <main+0x33c>)
 800bc26:	66a0      	str	r0, [r4, #104]	; 0x68
 800bc28:	46b3      	mov	fp, r6
 800bc2a:	e9c4 ab08 	strd	sl, fp, [r4, #32]
 800bc2e:	f502 7c98 	add.w	ip, r2, #304	; 0x130
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 800bc32:	a802      	add	r0, sp, #8
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
 800bc34:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 800bc38:	f8c4 900c 	str.w	r9, [r4, #12]
  oip->rlist.current->state = CH_STATE_CURRENT;
 800bc3c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  tp->refs              = (trefs_t)1;
 800bc40:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
  oip->rlist.current->wabase = oicp->mainthread_base;
 800bc44:	65e6      	str	r6, [r4, #92]	; 0x5c
    thread_descriptor_t idle_descriptor = {
 800bc46:	9106      	str	r1, [sp, #24]
 800bc48:	9305      	str	r3, [sp, #20]
 800bc4a:	e9cd e202 	strd	lr, r2, [sp, #8]
 800bc4e:	f8cd c010 	str.w	ip, [sp, #16]
 800bc52:	9607      	str	r6, [sp, #28]
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 800bc54:	f7f7 ff44 	bl	8003ae0 <chThdCreateSuspendedI>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800bc58:	6983      	ldr	r3, [r0, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800bc5a:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
 800bc5c:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
    pqp = pqp->next;
 800bc60:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800bc62:	689a      	ldr	r2, [r3, #8]
 800bc64:	428a      	cmp	r2, r1
 800bc66:	d2fb      	bcs.n	800bc60 <main+0x280>
  p->prev       = pqp->prev;
 800bc68:	685a      	ldr	r2, [r3, #4]
  p->next       = pqp;
 800bc6a:	6003      	str	r3, [r0, #0]
  p->prev       = pqp->prev;
 800bc6c:	6042      	str	r2, [r0, #4]
  p->prev->next = p;
 800bc6e:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 800bc70:	6058      	str	r0, [r3, #4]
  ch_system.state = ch_sys_running;
 800bc72:	2302      	movs	r3, #2
 800bc74:	703b      	strb	r3, [r7, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800bc76:	2300      	movs	r3, #0
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	2330      	movs	r3, #48	; 0x30
 800bc7e:	f383 8811 	msr	BASEPRI, r3
  if (sdp->state == SD_STOP) {
 800bc82:	f898 3008 	ldrb.w	r3, [r8, #8]
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	f000 80a1 	beq.w	800bdce <main+0x3ee>
  usart_init(sdp, config);
 800bc8c:	4924      	ldr	r1, [pc, #144]	; (800bd20 <main+0x340>)
 800bc8e:	480a      	ldr	r0, [pc, #40]	; (800bcb8 <main+0x2d8>)
 800bc90:	f7f5 ff16 	bl	8001ac0 <usart_init.lto_priv.0>
    sdp->state = SD_READY;
 800bc94:	2302      	movs	r3, #2
 800bc96:	f888 3008 	strb.w	r3, [r8, #8]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f383 8811 	msr	BASEPRI, r3
 800bca0:	2330      	movs	r3, #48	; 0x30
 800bca2:	f383 8811 	msr	BASEPRI, r3
  if (sdp->state == SD_STOP) {
 800bca6:	7a2b      	ldrb	r3, [r5, #8]
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	e03b      	b.n	800bd24 <main+0x344>
 800bcac:	40023800 	.word	0x40023800
 800bcb0:	40007000 	.word	0x40007000
 800bcb4:	e000e100 	.word	0xe000e100
 800bcb8:	20000938 	.word	0x20000938
 800bcbc:	200009b8 	.word	0x200009b8
 800bcc0:	080003c1 	.word	0x080003c1
 800bcc4:	40011000 	.word	0x40011000
 800bcc8:	0501bd00 	.word	0x0501bd00
 800bccc:	080003d1 	.word	0x080003d1
 800bcd0:	40004400 	.word	0x40004400
 800bcd4:	e0042000 	.word	0xe0042000
 800bcd8:	20000b68 	.word	0x20000b68
 800bcdc:	0280de80 	.word	0x0280de80
 800bce0:	20000b9c 	.word	0x20000b9c
 800bce4:	20000b18 	.word	0x20000b18
 800bce8:	20000b60 	.word	0x20000b60
 800bcec:	20000a90 	.word	0x20000a90
 800bcf0:	080004d1 	.word	0x080004d1
 800bcf4:	20018350 	.word	0x20018350
 800bcf8:	20020000 	.word	0x20020000
 800bcfc:	080003f1 	.word	0x080003f1
 800bd00:	08019374 	.word	0x08019374
 800bd04:	e000ed00 	.word	0xe000ed00
 800bd08:	05fa0300 	.word	0x05fa0300
 800bd0c:	e0001000 	.word	0xe0001000
 800bd10:	20002300 	.word	0x20002300
 800bd14:	08019388 	.word	0x08019388
 800bd18:	080162c8 	.word	0x080162c8
 800bd1c:	080003e1 	.word	0x080003e1
 800bd20:	080193b4 	.word	0x080193b4
 800bd24:	d06a      	beq.n	800bdfc <main+0x41c>
  usart_init(sdp, config);
 800bd26:	4941      	ldr	r1, [pc, #260]	; (800be2c <main+0x44c>)
 800bd28:	4841      	ldr	r0, [pc, #260]	; (800be30 <main+0x450>)
 800bd2a:	f7f5 fec9 	bl	8001ac0 <usart_init.lto_priv.0>
 800bd2e:	2302      	movs	r3, #2
 800bd30:	722b      	strb	r3, [r5, #8]
 800bd32:	2600      	movs	r6, #0
 800bd34:	f386 8811 	msr	BASEPRI, r6
  halInit();
  chSysInit();

  sdStart(&SD1, NULL);
  sdStart(&SD2, NULL);
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 800bd38:	2004      	movs	r0, #4
 800bd3a:	f007 fb19 	bl	8013370 <_pal_lld_setgroupmode.constprop.0>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 800bd3e:	2008      	movs	r0, #8
 800bd40:	f007 fb16 	bl	8013370 <_pal_lld_setgroupmode.constprop.0>

  /*
   * Creates the example thread.
   */

  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800bd44:	9600      	str	r6, [sp, #0]
 800bd46:	4b3b      	ldr	r3, [pc, #236]	; (800be34 <main+0x454>)
 800bd48:	483b      	ldr	r0, [pc, #236]	; (800be38 <main+0x458>)
 800bd4a:	4e3c      	ldr	r6, [pc, #240]	; (800be3c <main+0x45c>)
 800bd4c:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 800be40 <main+0x460>
   * sleeping in a loop and check the button state.
   */

  /* Infinite loop */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 800bd50:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 800be44 <main+0x464>
  /* Output initialization using streams.*/
  chtest.stream  = stream;
  chtest.putchar = test_stream_putchar;

  /* Test execution.*/
  return test_execute_inner(tsp);
 800bd54:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800be48 <main+0x468>
 800bd58:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 800be4c <main+0x46c>
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800bd5c:	2280      	movs	r2, #128	; 0x80
 800bd5e:	f248 01f0 	movw	r1, #33008	; 0x80f0
 800bd62:	f7f7 ff05 	bl	8003b70 <chThdCreateStatic>
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 800bd66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd6a:	07db      	lsls	r3, r3, #31
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	d50a      	bpl.n	800bd86 <main+0x3a6>
  chtest.putchar = test_stream_putchar;
 800bd70:	4b37      	ldr	r3, [pc, #220]	; (800be50 <main+0x470>)
  chtest.stream  = stream;
 800bd72:	6275      	str	r5, [r6, #36]	; 0x24
  chtest.putchar = test_stream_putchar;
 800bd74:	461f      	mov	r7, r3
 800bd76:	6233      	str	r3, [r6, #32]
  return test_execute_inner(tsp);
 800bd78:	f007 fd7a 	bl	8013870 <test_execute_inner.isra.0>
 800bd7c:	4658      	mov	r0, fp
  chtest.stream  = stream;
 800bd7e:	6275      	str	r5, [r6, #36]	; 0x24
  chtest.putchar = test_stream_putchar;
 800bd80:	6237      	str	r7, [r6, #32]
  return test_execute_inner(tsp);
 800bd82:	f007 fd75 	bl	8013870 <test_execute_inner.isra.0>
 800bd86:	2330      	movs	r3, #48	; 0x30
 800bd88:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = __instance_get_currthread(currcore);
 800bd8c:	68e7      	ldr	r7, [r4, #12]
  vtp->reload  = (sysinterval_t)0;
 800bd8e:	2300      	movs	r3, #0
  vt_enqueue(vtlp, vtp, delay);
 800bd90:	a802      	add	r0, sp, #8
 800bd92:	f242 7110 	movw	r1, #10000	; 0x2710
  vtp->reload  = (sysinterval_t)0;
 800bd96:	9307      	str	r3, [sp, #28]
  vtp->func    = vtfunc;
 800bd98:	e9cd a705 	strd	sl, r7, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 800bd9c:	f007 fb60 	bl	8013460 <vt_enqueue.constprop.0>
  ch_priority_queue_t *p = pqp->next;
 800bda0:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800bda2:	2308      	movs	r3, #8
 800bda4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  pqp->next       = p->next;
 800bda8:	6803      	ldr	r3, [r0, #0]
 800bdaa:	6023      	str	r3, [r4, #0]
  ntp->state = CH_STATE_CURRENT;
 800bdac:	2201      	movs	r2, #1
  pqp->next->prev = pqp;
 800bdae:	605c      	str	r4, [r3, #4]
  chSysSwitch(ntp, otp);
 800bdb0:	4639      	mov	r1, r7
  ntp->state = CH_STATE_CURRENT;
 800bdb2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 800bdb6:	60e0      	str	r0, [r4, #12]
  chSysSwitch(ntp, otp);
 800bdb8:	f7f4 fa82 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 800bdbc:	9b02      	ldr	r3, [sp, #8]
      chVTDoResetI(&vt);
 800bdbe:	a802      	add	r0, sp, #8
    if (chVTIsArmedI(&vt)) {
 800bdc0:	b10b      	cbz	r3, 800bdc6 <main+0x3e6>
      chVTDoResetI(&vt);
 800bdc2:	f7f5 fffd 	bl	8001dc0 <chVTDoResetI>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f383 8811 	msr	BASEPRI, r3
}
 800bdcc:	e7cb      	b.n	800bd66 <main+0x386>
      rccEnableUSART1(true);
 800bdce:	4b21      	ldr	r3, [pc, #132]	; (800be54 <main+0x474>)
 800bdd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdd2:	f042 0210 	orr.w	r2, r2, #16
 800bdd6:	645a      	str	r2, [r3, #68]	; 0x44
 800bdd8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bdda:	f042 0210 	orr.w	r2, r2, #16
 800bdde:	665a      	str	r2, [r3, #100]	; 0x64
    if (&SD2 == sdp) {
 800bde0:	45a8      	cmp	r8, r5
      rccEnableUSART1(true);
 800bde2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    if (&SD2 == sdp) {
 800bde4:	f47f af52 	bne.w	800bc8c <main+0x2ac>
      rccEnableUSART2(true);
 800bde8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bdea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bdee:	641a      	str	r2, [r3, #64]	; 0x40
 800bdf0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bdf2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bdf6:	661a      	str	r2, [r3, #96]	; 0x60
 800bdf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdfa:	e747      	b.n	800bc8c <main+0x2ac>
    if (&SD1 == sdp) {
 800bdfc:	4545      	cmp	r5, r8
 800bdfe:	d00a      	beq.n	800be16 <main+0x436>
      rccEnableUSART2(true);
 800be00:	4b14      	ldr	r3, [pc, #80]	; (800be54 <main+0x474>)
 800be02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be04:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800be08:	641a      	str	r2, [r3, #64]	; 0x40
 800be0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800be0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800be10:	661a      	str	r2, [r3, #96]	; 0x60
 800be12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be14:	e787      	b.n	800bd26 <main+0x346>
      rccEnableUSART1(true);
 800be16:	4b0f      	ldr	r3, [pc, #60]	; (800be54 <main+0x474>)
 800be18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be1a:	f042 0210 	orr.w	r2, r2, #16
 800be1e:	645a      	str	r2, [r3, #68]	; 0x44
 800be20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800be22:	f042 0210 	orr.w	r2, r2, #16
 800be26:	665a      	str	r2, [r3, #100]	; 0x64
 800be28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be2a:	e7e9      	b.n	800be00 <main+0x420>
 800be2c:	080193b4 	.word	0x080193b4
 800be30:	200009b8 	.word	0x200009b8
 800be34:	08011091 	.word	0x08011091
 800be38:	200100e0 	.word	0x200100e0
 800be3c:	20000b74 	.word	0x20000b74
 800be40:	08001051 	.word	0x08001051
 800be44:	40020000 	.word	0x40020000
 800be48:	0801dc6c 	.word	0x0801dc6c
 800be4c:	0801d7ec 	.word	0x0801d7ec
 800be50:	080004f1 	.word	0x080004f1
 800be54:	40023800 	.word	0x40023800
	...

0800be60 <falcon_inner_fpr_scaled>:

__attribute__((naked))
fpr
fpr_scaled(int64_t i __attribute__((unused)), int sc __attribute__((unused)))
{
	__asm__ (
 800be60:	b570      	push	{r4, r5, r6, lr}
 800be62:	17cb      	asrs	r3, r1, #31
 800be64:	4058      	eors	r0, r3
 800be66:	4059      	eors	r1, r3
 800be68:	1ac0      	subs	r0, r0, r3
 800be6a:	4199      	sbcs	r1, r3
 800be6c:	f202 32fe 	addw	r2, r2, #1022	; 0x3fe
 800be70:	ea50 0401 	orrs.w	r4, r0, r1
 800be74:	ea34 74e2 	bics.w	r4, r4, r2, asr #31
 800be78:	4265      	negs	r5, r4
 800be7a:	432c      	orrs	r4, r5
 800be7c:	ea12 72e4 	ands.w	r2, r2, r4, asr #31
 800be80:	3220      	adds	r2, #32
 800be82:	424c      	negs	r4, r1
 800be84:	430c      	orrs	r4, r1
 800be86:	ea90 0501 	eors.w	r5, r0, r1
 800be8a:	ea35 75e4 	bics.w	r5, r5, r4, asr #31
 800be8e:	4069      	eors	r1, r5
 800be90:	ea10 70e4 	ands.w	r0, r0, r4, asr #31
 800be94:	0fe4      	lsrs	r4, r4, #31
 800be96:	eb12 1244 	adds.w	r2, r2, r4, lsl #5
 800be9a:	fab1 f481 	clz	r4, r1
 800be9e:	1b12      	subs	r2, r2, r4
 800bea0:	f1d4 0520 	rsbs	r5, r4, #32
 800bea4:	40a1      	lsls	r1, r4
 800bea6:	fa30 f505 	lsrs.w	r5, r0, r5
 800beaa:	40a0      	lsls	r0, r4
 800beac:	4329      	orrs	r1, r5
 800beae:	f36f 71df 	bfc	r1, #31, #1
 800beb2:	0005      	movs	r5, r0
 800beb4:	0ac0      	lsrs	r0, r0, #11
 800beb6:	ea50 5041 	orrs.w	r0, r0, r1, lsl #21
 800beba:	0ac9      	lsrs	r1, r1, #11
 800bebc:	ea51 5102 	orrs.w	r1, r1, r2, lsl #20
 800bec0:	f3c5 0608 	ubfx	r6, r5, #0, #9
 800bec4:	f206 16ff 	addw	r6, r6, #511	; 0x1ff
 800bec8:	4335      	orrs	r5, r6
 800beca:	f3c5 2542 	ubfx	r5, r5, #9, #3
 800bece:	26c8      	movs	r6, #200	; 0xc8
 800bed0:	40ee      	lsrs	r6, r5
 800bed2:	f016 0601 	ands.w	r6, r6, #1
 800bed6:	1980      	adds	r0, r0, r6
 800bed8:	f151 0100 	adcs.w	r1, r1, #0
 800bedc:	ea51 71c3 	orrs.w	r1, r1, r3, lsl #31
 800bee0:	bd70      	pop	{r4, r5, r6, pc}
 800bee2:	bf00      	nop
	...

0800bef0 <falcon_inner_fpr_add>:

__attribute__((naked))
fpr
fpr_add(fpr x __attribute__((unused)), fpr y __attribute__((unused)))
{
	__asm__ (
 800bef0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 800bef4:	f3c1 041e 	ubfx	r4, r1, #0, #31
 800bef8:	f3c3 051e 	ubfx	r5, r3, #0, #31
 800befc:	1a87      	subs	r7, r0, r2
 800befe:	41ac      	sbcs	r4, r5
 800bf00:	4327      	orrs	r7, r4
 800bf02:	427d      	negs	r5, r7
 800bf04:	432f      	orrs	r7, r5
 800bf06:	ea31 0607 	bics.w	r6, r1, r7
 800bf0a:	4326      	orrs	r6, r4
 800bf0c:	ea90 0402 	eors.w	r4, r0, r2
 800bf10:	ea91 0503 	eors.w	r5, r1, r3
 800bf14:	ea14 74e6 	ands.w	r4, r4, r6, asr #31
 800bf18:	ea15 75e6 	ands.w	r5, r5, r6, asr #31
 800bf1c:	4060      	eors	r0, r4
 800bf1e:	4069      	eors	r1, r5
 800bf20:	4062      	eors	r2, r4
 800bf22:	406b      	eors	r3, r5
 800bf24:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800bf28:	f204 75ff 	addw	r5, r4, #2047	; 0x7ff
 800bf2c:	0aed      	lsrs	r5, r5, #11
 800bf2e:	f36f 511e 	bfc	r1, #20, #11
 800bf32:	ea51 5105 	orrs.w	r1, r1, r5, lsl #20
 800bf36:	17cd      	asrs	r5, r1, #31
 800bf38:	f36f 71df 	bfc	r1, #31, #1
 800bf3c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800bf40:	f206 77ff 	addw	r7, r6, #2047	; 0x7ff
 800bf44:	0aff      	lsrs	r7, r7, #11
 800bf46:	f36f 531e 	bfc	r3, #20, #11
 800bf4a:	ea53 5307 	orrs.w	r3, r3, r7, lsl #20
 800bf4e:	17df      	asrs	r7, r3, #31
 800bf50:	f36f 73df 	bfc	r3, #31, #1
 800bf54:	00c9      	lsls	r1, r1, #3
 800bf56:	ea51 7150 	orrs.w	r1, r1, r0, lsr #29
 800bf5a:	00c0      	lsls	r0, r0, #3
 800bf5c:	00db      	lsls	r3, r3, #3
 800bf5e:	ea53 7352 	orrs.w	r3, r3, r2, lsr #29
 800bf62:	00d2      	lsls	r2, r2, #3
 800bf64:	1ba6      	subs	r6, r4, r6
 800bf66:	f1b6 083c 	subs.w	r8, r6, #60	; 0x3c
 800bf6a:	ea12 72e8 	ands.w	r2, r2, r8, asr #31
 800bf6e:	ea13 73e8 	ands.w	r3, r3, r8, asr #31
 800bf72:	f1b6 0820 	subs.w	r8, r6, #32
 800bf76:	ea32 7be8 	bics.w	fp, r2, r8, asr #31
 800bf7a:	ea12 72e8 	ands.w	r2, r2, r8, asr #31
 800bf7e:	ea33 7ae8 	bics.w	sl, r3, r8, asr #31
 800bf82:	ea52 020a 	orrs.w	r2, r2, sl
 800bf86:	ea13 73e8 	ands.w	r3, r3, r8, asr #31
 800bf8a:	f016 061f 	ands.w	r6, r6, #31
 800bf8e:	f1d6 0820 	rsbs	r8, r6, #32
 800bf92:	fa12 fa08 	lsls.w	sl, r2, r8
 800bf96:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800bf9a:	40f2      	lsrs	r2, r6
 800bf9c:	fa13 fa08 	lsls.w	sl, r3, r8
 800bfa0:	ea52 020a 	orrs.w	r2, r2, sl
 800bfa4:	40f3      	lsrs	r3, r6
 800bfa6:	f1db 0600 	rsbs	r6, fp, #0
 800bfaa:	ea56 060b 	orrs.w	r6, r6, fp
 800bfae:	ea52 72d6 	orrs.w	r2, r2, r6, lsr #31
 800bfb2:	406f      	eors	r7, r5
 800bfb4:	407a      	eors	r2, r7
 800bfb6:	407b      	eors	r3, r7
 800bfb8:	1bd2      	subs	r2, r2, r7
 800bfba:	41bb      	sbcs	r3, r7
 800bfbc:	1880      	adds	r0, r0, r2
 800bfbe:	4159      	adcs	r1, r3
 800bfc0:	fab0 f280 	clz	r2, r0
 800bfc4:	fab1 f381 	clz	r3, r1
 800bfc8:	f343 1640 	sbfx	r6, r3, #5, #1
 800bfcc:	4032      	ands	r2, r6
 800bfce:	18d2      	adds	r2, r2, r3
 800bfd0:	1aa4      	subs	r4, r4, r2
 800bfd2:	f1b2 0720 	subs.w	r7, r2, #32
 800bfd6:	fa10 f707 	lsls.w	r7, r0, r7
 800bfda:	4091      	lsls	r1, r2
 800bfdc:	f1d2 0620 	rsbs	r6, r2, #32
 800bfe0:	4339      	orrs	r1, r7
 800bfe2:	fa30 f606 	lsrs.w	r6, r0, r6
 800bfe6:	4331      	orrs	r1, r6
 800bfe8:	4090      	lsls	r0, r2
 800bfea:	3407      	adds	r4, #7
 800bfec:	ea14 74e1 	ands.w	r4, r4, r1, asr #31
 800bff0:	0003      	movs	r3, r0
 800bff2:	0ac0      	lsrs	r0, r0, #11
 800bff4:	ea50 5041 	orrs.w	r0, r0, r1, lsl #21
 800bff8:	0ac9      	lsrs	r1, r1, #11
 800bffa:	f3c3 0608 	ubfx	r6, r3, #0, #9
 800bffe:	f206 16ff 	addw	r6, r6, #511	; 0x1ff
 800c002:	4333      	orrs	r3, r6
 800c004:	f3c3 2342 	ubfx	r3, r3, #9, #3
 800c008:	26c8      	movs	r6, #200	; 0xc8
 800c00a:	40de      	lsrs	r6, r3
 800c00c:	f016 0601 	ands.w	r6, r6, #1
 800c010:	1980      	adds	r0, r0, r6
 800c012:	f151 0100 	adcs.w	r1, r1, #0
 800c016:	eb11 5104 	adds.w	r1, r1, r4, lsl #20
 800c01a:	4264      	negs	r4, r4
 800c01c:	ea10 70e4 	ands.w	r0, r0, r4, asr #31
 800c020:	ea11 71e4 	ands.w	r1, r1, r4, asr #31
 800c024:	f365 71df 	bfi	r1, r5, #31, #1
 800c028:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 800c02c:	0000      	movs	r0, r0
	...

0800c030 <falcon_inner_poly_add>:

/* see inner.h */
void
Zf(poly_add)(
	fpr *restrict a, const fpr *restrict b, unsigned logn)
{
 800c030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t n, u;

	n = (size_t)1 << logn;
 800c032:	2701      	movs	r7, #1
 800c034:	4097      	lsls	r7, r2
	for (u = 0; u < n; u ++) {
 800c036:	f1a0 0408 	sub.w	r4, r0, #8
 800c03a:	f1a1 0608 	sub.w	r6, r1, #8
 800c03e:	2500      	movs	r5, #0
		a[u] = fpr_add(a[u], b[u]);
 800c040:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
 800c044:	e9f6 2302 	ldrd	r2, r3, [r6, #8]!
 800c048:	f7ff ff52 	bl	800bef0 <falcon_inner_fpr_add>
	for (u = 0; u < n; u ++) {
 800c04c:	3501      	adds	r5, #1
 800c04e:	42af      	cmp	r7, r5
		a[u] = fpr_add(a[u], b[u]);
 800c050:	e9c4 0100 	strd	r0, r1, [r4]
	for (u = 0; u < n; u ++) {
 800c054:	d1f4      	bne.n	800c040 <falcon_inner_poly_add+0x10>
	}
}
 800c056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c060 <falcon_inner_fpr_mul>:

__attribute__((naked))
fpr
fpr_mul(fpr x __attribute__((unused)), fpr y __attribute__((unused)))
{
	__asm__ (
 800c060:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 800c064:	f030 447e 	bics.w	r4, r0, #4261412864	; 0xfe000000
 800c068:	01cd      	lsls	r5, r1, #7
 800c06a:	ea55 6550 	orrs.w	r5, r5, r0, lsr #25
 800c06e:	f055 6500 	orrs.w	r5, r5, #134217728	; 0x8000000
 800c072:	f035 4570 	bics.w	r5, r5, #4026531840	; 0xf0000000
 800c076:	f032 467e 	bics.w	r6, r2, #4261412864	; 0xfe000000
 800c07a:	01df      	lsls	r7, r3, #7
 800c07c:	ea57 6752 	orrs.w	r7, r7, r2, lsr #25
 800c080:	f057 6700 	orrs.w	r7, r7, #134217728	; 0x8000000
 800c084:	f037 4770 	bics.w	r7, r7, #4026531840	; 0xf0000000
 800c088:	fba4 8a06 	umull	r8, sl, r4, r6
 800c08c:	ea5f 1aca 	movs.w	sl, sl, lsl #7
 800c090:	ea5a 6a58 	orrs.w	sl, sl, r8, lsr #25
 800c094:	ea9b 0b0b 	eors.w	fp, fp, fp
 800c098:	fbe4 ab07 	umlal	sl, fp, r4, r7
 800c09c:	fbe5 ab06 	umlal	sl, fp, r5, r6
 800c0a0:	ea58 18ca 	orrs.w	r8, r8, sl, lsl #7
 800c0a4:	ea5f 6a5a 	movs.w	sl, sl, lsr #25
 800c0a8:	ea5a 1acb 	orrs.w	sl, sl, fp, lsl #7
 800c0ac:	ea9b 0b0b 	eors.w	fp, fp, fp
 800c0b0:	fbe5 ab07 	umlal	sl, fp, r5, r7
 800c0b4:	f1d8 0400 	rsbs	r4, r8, #0
 800c0b8:	ea58 0804 	orrs.w	r8, r8, r4
 800c0bc:	ea5a 7ad8 	orrs.w	sl, sl, r8, lsr #31
 800c0c0:	f01a 0601 	ands.w	r6, sl, #1
 800c0c4:	ea5f 55db 	movs.w	r5, fp, lsr #23
 800c0c8:	426d      	negs	r5, r5
 800c0ca:	ea56 065a 	orrs.w	r6, r6, sl, lsr #1
 800c0ce:	ea56 76cb 	orrs.w	r6, r6, fp, lsl #31
 800c0d2:	ea5f 075b 	movs.w	r7, fp, lsr #1
 800c0d6:	ea9a 0a06 	eors.w	sl, sl, r6
 800c0da:	ea9b 0b07 	eors.w	fp, fp, r7
 800c0de:	ea3a 0a05 	bics.w	sl, sl, r5
 800c0e2:	ea3b 0b05 	bics.w	fp, fp, r5
 800c0e6:	ea96 060a 	eors.w	r6, r6, sl
 800c0ea:	ea97 070b 	eors.w	r7, r7, fp
 800c0ee:	0048      	lsls	r0, r1, #1
 800c0f0:	005a      	lsls	r2, r3, #1
 800c0f2:	0d40      	lsrs	r0, r0, #21
 800c0f4:	f200 74ff 	addw	r4, r0, #2047	; 0x7ff
 800c0f8:	0d52      	lsrs	r2, r2, #21
 800c0fa:	f202 78ff 	addw	r8, r2, #2047	; 0x7ff
 800c0fe:	1812      	adds	r2, r2, r0
 800c100:	f2a2 4200 	subw	r2, r2, #1024	; 0x400
 800c104:	1b52      	subs	r2, r2, r5
 800c106:	ea14 0408 	ands.w	r4, r4, r8
 800c10a:	43d5      	mvns	r5, r2
 800c10c:	ea15 5504 	ands.w	r5, r5, r4, lsl #20
 800c110:	ea12 72e5 	ands.w	r2, r2, r5, asr #31
 800c114:	ea16 76e5 	ands.w	r6, r6, r5, asr #31
 800c118:	ea17 77e5 	ands.w	r7, r7, r5, asr #31
 800c11c:	4059      	eors	r1, r3
 800c11e:	f36f 011e 	bfc	r1, #0, #31
 800c122:	f362 511e 	bfi	r1, r2, #20, #11
 800c126:	0034      	movs	r4, r6
 800c128:	08b0      	lsrs	r0, r6, #2
 800c12a:	ea50 7087 	orrs.w	r0, r0, r7, lsl #30
 800c12e:	eb11 0197 	adds.w	r1, r1, r7, lsr #2
 800c132:	f014 0407 	ands.w	r4, r4, #7
 800c136:	23c8      	movs	r3, #200	; 0xc8
 800c138:	40e3      	lsrs	r3, r4
 800c13a:	f013 0301 	ands.w	r3, r3, #1
 800c13e:	18c0      	adds	r0, r0, r3
 800c140:	f151 0100 	adcs.w	r1, r1, #0
 800c144:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
	...

0800c150 <falcon_inner_sampler>:
	 * absolute value to make it in the 2^62..2^63-1 range: we
	 * will only need a right-shift afterwards.
	 */
	e = (int)(x >> 52) & 0x7FF;
	t = x >> 63;
	xi = (int64_t)(((x << 10) | ((uint64_t)1 << 62))
 800c150:	0299      	lsls	r1, r3, #10
 800c152:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c156:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800c15a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 * The value of sigma MUST lie between 1 and 2 (i.e. isigma lies between
 * 0.5 and 1); in Falcon, sigma should always be between 1.2 and 1.9.
 */
int
Zf(sampler)(void *ctx, fpr mu, fpr isigma)
{
 800c15e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		& (((uint64_t)1 << 63) - 1));
	xi = (xi ^ -(int64_t)t) + (int64_t)t;
 800c162:	ea81 71e3 	eor.w	r1, r1, r3, asr #31
 800c166:	461e      	mov	r6, r3
	xi = (int64_t)(((x << 10) | ((uint64_t)1 << 62))
 800c168:	0293      	lsls	r3, r2, #10
	xi = (xi ^ -(int64_t)t) + (int64_t)t;
 800c16a:	ea83 73e6 	eor.w	r3, r3, r6, asr #31
	e = (int)(x >> 52) & 0x7FF;
 800c16e:	f3c6 5c0a 	ubfx	ip, r6, #20, #11
 800c172:	4690      	mov	r8, r2
	t = x >> 63;
 800c174:	0ff2      	lsrs	r2, r6, #31
	xi = (xi ^ -(int64_t)t) + (int64_t)t;
 800c176:	eb12 0e03 	adds.w	lr, r2, r3
	cc = 1085 - e;
 800c17a:	f5cc 6387 	rsb	r3, ip, #1080	; 0x438
	xi = (xi ^ -(int64_t)t) + (int64_t)t;
 800c17e:	f141 0100 	adc.w	r1, r1, #0
	cc = 1085 - e;
 800c182:	3305      	adds	r3, #5
	x ^= (x ^ (x >> 32)) & -(int64_t)(n >> 5);
 800c184:	ea81 090e 	eor.w	r9, r1, lr
 800c188:	4607      	mov	r7, r0
 800c18a:	f343 1040 	sbfx	r0, r3, #5, #1
 800c18e:	4602      	mov	r2, r0
 800c190:	ea00 0009 	and.w	r0, r0, r9
 800c194:	ea80 000e 	eor.w	r0, r0, lr
 800c198:	ea81 7ee1 	eor.w	lr, r1, r1, asr #31
 800c19c:	ea02 020e 	and.w	r2, r2, lr
	return x >> (n & 31);
 800c1a0:	f003 031f 	and.w	r3, r3, #31
	x ^= (x ^ (x >> 32)) & -(int64_t)(n >> 5);
 800c1a4:	404a      	eors	r2, r1
	return x >> (n & 31);
 800c1a6:	f1c3 0120 	rsb	r1, r3, #32
 800c1aa:	fa02 f101 	lsl.w	r1, r2, r1
 800c1ae:	40d8      	lsrs	r0, r3
 800c1b0:	3b20      	subs	r3, #32
 800c1b2:	bf58      	it	pl
 800c1b4:	fa42 f303 	asrpl.w	r3, r2, r3
 800c1b8:	ea40 0001 	orr.w	r0, r0, r1
 800c1bc:	bf58      	it	pl
 800c1be:	4318      	orrpl	r0, r3
	xi = (xi ^ -(int64_t)t) + (int64_t)t;
 800c1c0:	17f1      	asrs	r1, r6, #31
	 *
	 * For an input of zero, the non-shifted xi was incorrect (we used
	 * a top implicit bit of value 1, not 0), but this does not matter
	 * since this operation will clamp it down.
	 */
	xi ^= (xi ^ -(int64_t)t) & -(int64_t)((uint32_t)(63 - cc) >> 31);
 800c1c2:	f2ac 3cfe 	subw	ip, ip, #1022	; 0x3fe
 800c1c6:	ea81 0300 	eor.w	r3, r1, r0
 800c1ca:	ea03 73ec 	and.w	r3, r3, ip, asr #31
 800c1ce:	b08b      	sub	sp, #44	; 0x2c
 800c1d0:	4043      	eors	r3, r0
	return fpr_scaled(i, 0);
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	17d9      	asrs	r1, r3, #31
 800c1d8:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
	xi ^= (xi ^ -(int64_t)t) & -(int64_t)((uint32_t)(63 - cc) >> 31);
 800c1dc:	9309      	str	r3, [sp, #36]	; 0x24
	return fpr_scaled(i, 0);
 800c1de:	f7ff fe3f 	bl	800be60 <falcon_inner_fpr_scaled>
 800c1e2:	4602      	mov	r2, r0

static inline fpr
fpr_sub(fpr x, fpr y)
{
	y ^= (uint64_t)1 << 63;
	return fpr_add(x, y);
 800c1e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1e8:	4640      	mov	r0, r8
 800c1ea:	4631      	mov	r1, r6
 800c1ec:	f7ff fe80 	bl	800bef0 <falcon_inner_fpr_add>
	y ^= (uint64_t)1 << 63;
 800c1f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
	return fpr_add(x, y);
 800c1f4:	9005      	str	r0, [sp, #20]
	y ^= (uint64_t)1 << 63;
 800c1f6:	9306      	str	r3, [sp, #24]
fpr fpr_mul(fpr x, fpr y);

static inline fpr
fpr_sqr(fpr x)
{
	return fpr_mul(x, x);
 800c1f8:	4622      	mov	r2, r4
 800c1fa:	462b      	mov	r3, r5
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	4629      	mov	r1, r5
 800c200:	f7ff ff2e 	bl	800c060 <falcon_inner_fpr_mul>
	x -= (uint64_t)1 << 52;
 800c204:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
	t = (((uint32_t)(x >> 52) & 0x7FF) + 1) >> 11;
 800c208:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800c20c:	3301      	adds	r3, #1
 800c20e:	0adb      	lsrs	r3, r3, #11
	return fpr_mul(x, x);
 800c210:	4684      	mov	ip, r0
	x &= (uint64_t)t - 1;
 800c212:	3b01      	subs	r3, #1
 800c214:	f04f 0600 	mov.w	r6, #0
 800c218:	ea0c 0303 	and.w	r3, ip, r3
	 * an empty buffer.
	 */
	u = p->ptr;
	if (u >= (sizeof p->buf.d) - 9) {
		Zf(prng_refill)(p);
		u = 0;
 800c21c:	46b3      	mov	fp, r6
 800c21e:	f146 36ff 	adc.w	r6, r6, #4294967295
 800c222:	9303      	str	r3, [sp, #12]
 800c224:	ea02 0306 	and.w	r3, r2, r6
 800c228:	9304      	str	r3, [sp, #16]
	dss = fpr_half(fpr_sqr(isigma));

	/*
	 * ccs = sigma_min / sigma = sigma_min * isigma.
	 */
	ccs = fpr_mul(isigma, spc->sigma_min);
 800c22a:	4620      	mov	r0, r4
 800c22c:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 800c230:	4629      	mov	r1, r5
 800c232:	f7ff ff15 	bl	800c060 <falcon_inner_fpr_mul>
 800c236:	e9cd 0107 	strd	r0, r1, [sp, #28]
	u = p->ptr;
 800c23a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
	if (u >= (sizeof p->buf.d) - 9) {
 800c23e:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800c242:	f200 81d4 	bhi.w	800c5ee <falcon_inner_sampler+0x49e>
static inline unsigned
prng_get_u8(prng *p)
{
	unsigned v;

	v = p->buf.d[p->ptr ++];
 800c246:	f103 010a 	add.w	r1, r3, #10
 800c24a:	f103 0409 	add.w	r4, r3, #9
	p->ptr = u + 8;
 800c24e:	f103 0008 	add.w	r0, r3, #8
		| ((uint64_t)p->buf.d[u + 1] << 8)
 800c252:	1c5e      	adds	r6, r3, #1
		| ((uint64_t)p->buf.d[u + 2] << 16)
 800c254:	f103 0e02 	add.w	lr, r3, #2
		| ((uint64_t)p->buf.d[u + 3] << 24)
 800c258:	1cdd      	adds	r5, r3, #3
		| ((uint64_t)p->buf.d[u + 4] << 32)
 800c25a:	f103 0904 	add.w	r9, r3, #4
		| ((uint64_t)p->buf.d[u + 5] << 40)
 800c25e:	1d5a      	adds	r2, r3, #5
		| ((uint64_t)p->buf.d[u + 6] << 48)
 800c260:	f103 0806 	add.w	r8, r3, #6
		| ((uint64_t)p->buf.d[u + 7] << 56);
 800c264:	f103 0c07 	add.w	ip, r3, #7
		| ((uint64_t)p->buf.d[u + 4] << 32)
 800c268:	f817 9009 	ldrb.w	r9, [r7, r9]
		| ((uint64_t)p->buf.d[u + 5] << 40)
 800c26c:	5cba      	ldrb	r2, [r7, r2]
		| ((uint64_t)p->buf.d[u + 6] << 48)
 800c26e:	f817 8008 	ldrb.w	r8, [r7, r8]
		| ((uint64_t)p->buf.d[u + 2] << 16)
 800c272:	f817 e00e 	ldrb.w	lr, [r7, lr]
		| ((uint64_t)p->buf.d[u + 7] << 56);
 800c276:	f817 c00c 	ldrb.w	ip, [r7, ip]
		| ((uint64_t)p->buf.d[u + 1] << 8)
 800c27a:	5dbe      	ldrb	r6, [r7, r6]
		| ((uint64_t)p->buf.d[u + 5] << 40)
 800c27c:	ea49 2202 	orr.w	r2, r9, r2, lsl #8
		| ((uint64_t)p->buf.d[u + 6] << 48)
 800c280:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
	v1 = (uint32_t)(lo >> 24) & 0xFFFFFF;
 800c284:	f817 8005 	ldrb.w	r8, [r7, r5]
	return (uint64_t)p->buf.d[u + 0]
 800c288:	5cfd      	ldrb	r5, [r7, r3]
	v = p->buf.d[p->ptr ++];
 800c28a:	5c3b      	ldrb	r3, [r7, r0]
 800c28c:	48e8      	ldr	r0, [pc, #928]	; (800c630 <falcon_inner_sampler+0x4e0>)
		| ((uint64_t)p->buf.d[u + 7] << 56);
 800c28e:	ea42 6c0c 	orr.w	ip, r2, ip, lsl #24
		| ((uint64_t)p->buf.d[u + 2] << 16)
 800c292:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800c296:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
 800c29a:	ea48 2802 	orr.w	r8, r8, r2, lsl #8
	v2 = (uint32_t)(lo >> 48) | (hi << 16);
 800c29e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	v0 = (uint32_t)lo & 0xFFFFFF;
 800c2a2:	ea4e 0e05 	orr.w	lr, lr, r5
	v2 = (uint32_t)(lo >> 48) | (hi << 16);
 800c2a6:	ea4c 4c03 	orr.w	ip, ip, r3, lsl #16
 800c2aa:	4ae2      	ldr	r2, [pc, #904]	; (800c634 <falcon_inner_sampler+0x4e4>)
 800c2ac:	4ee2      	ldr	r6, [pc, #904]	; (800c638 <falcon_inner_sampler+0x4e8>)
 800c2ae:	4be3      	ldr	r3, [pc, #908]	; (800c63c <falcon_inner_sampler+0x4ec>)
	v1 = (uint32_t)(lo >> 24) & 0xFFFFFF;
 800c2b0:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
	z = 0;
 800c2b4:	2500      	movs	r5, #0
 800c2b6:	e003      	b.n	800c2c0 <falcon_inner_sampler+0x170>
		w1 = dist[u + 1];
 800c2b8:	e950 2602 	ldrd	r2, r6, [r0, #-8]
		w2 = dist[u + 0];
 800c2bc:	f850 3c0c 	ldr.w	r3, [r0, #-12]
		cc = (v1 - w1 - cc) >> 31;
 800c2c0:	eba8 0202 	sub.w	r2, r8, r2
		cc = (v0 - w0) >> 31;
 800c2c4:	ebae 0606 	sub.w	r6, lr, r6
		cc = (v2 - w2 - cc) >> 31;
 800c2c8:	ebac 0303 	sub.w	r3, ip, r3
		cc = (v1 - w1 - cc) >> 31;
 800c2cc:	eba2 72d6 	sub.w	r2, r2, r6, lsr #31
		cc = (v2 - w2 - cc) >> 31;
 800c2d0:	eba3 73d2 	sub.w	r3, r3, r2, lsr #31
		z += (int)cc;
 800c2d4:	eb05 75d3 	add.w	r5, r5, r3, lsr #31
	for (u = 0; u < (sizeof dist) / sizeof(dist[0]); u += 3) {
 800c2d8:	4bd9      	ldr	r3, [pc, #868]	; (800c640 <falcon_inner_sampler+0x4f0>)
 800c2da:	300c      	adds	r0, #12
 800c2dc:	4283      	cmp	r3, r0
 800c2de:	d1eb      	bne.n	800c2b8 <falcon_inner_sampler+0x168>
	if (p->ptr == sizeof p->buf.d) {
 800c2e0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	v = p->buf.d[p->ptr ++];
 800c2e4:	5d3c      	ldrb	r4, [r7, r4]
 800c2e6:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
	if (p->ptr == sizeof p->buf.d) {
 800c2ea:	f000 81bf 	beq.w	800c66c <falcon_inner_sampler+0x51c>
		 *    centered on 1.
		 *  - b = 0: z <= 0 and sampled against a Gaussian
		 *    centered on 0.
		 */
		z0 = Zf(gaussian0_sampler)(&spc->p);
		b = (int)prng_get_u8(&spc->p) & 1;
 800c2ee:	f004 0301 	and.w	r3, r4, #1
		z = b + ((b << 1) - 1) * z0;
 800c2f2:	005a      	lsls	r2, r3, #1
 800c2f4:	3a01      	subs	r2, #1
 800c2f6:	fb05 3302 	mla	r3, r5, r2, r3
	return fpr_scaled(i, 0);
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	17d9      	asrs	r1, r3, #31
 800c300:	9302      	str	r3, [sp, #8]
 800c302:	f7ff fdad 	bl	800be60 <falcon_inner_fpr_scaled>
	return fpr_add(x, y);
 800c306:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800c30a:	f7ff fdf1 	bl	800bef0 <falcon_inner_fpr_add>
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
	return fpr_mul(x, x);
 800c312:	f7ff fea5 	bl	800c060 <falcon_inner_fpr_mul>
		 * makes rejection more probable, but makes rejection
		 * rate sufficiently decorrelated from the Gaussian
		 * center and standard deviation that the whole sampler
		 * can be said to be constant-time.
		 */
		x = fpr_mul(fpr_sqr(fpr_sub(fpr_of(z), r)), dss);
 800c316:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800c31a:	f7ff fea1 	bl	800c060 <falcon_inner_fpr_mul>
		x = fpr_sub(x, fpr_mul(fpr_of(z0 * z0), fpr_inv_2sqrsigma0));
 800c31e:	fb05 f505 	mul.w	r5, r5, r5
		x = fpr_mul(fpr_sqr(fpr_sub(fpr_of(z), r)), dss);
 800c322:	4606      	mov	r6, r0
 800c324:	460c      	mov	r4, r1
	return fpr_scaled(i, 0);
 800c326:	2200      	movs	r2, #0
 800c328:	4628      	mov	r0, r5
 800c32a:	17e9      	asrs	r1, r5, #31
 800c32c:	f7ff fd98 	bl	800be60 <falcon_inner_fpr_scaled>
		x = fpr_sub(x, fpr_mul(fpr_of(z0 * z0), fpr_inv_2sqrsigma0));
 800c330:	a3b9      	add	r3, pc, #740	; (adr r3, 800c618 <falcon_inner_sampler+0x4c8>)
 800c332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c336:	f7ff fe93 	bl	800c060 <falcon_inner_fpr_mul>
 800c33a:	4602      	mov	r2, r0
	return fpr_add(x, y);
 800c33c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c340:	4630      	mov	r0, r6
 800c342:	4621      	mov	r1, r4
 800c344:	f7ff fdd4 	bl	800bef0 <falcon_inner_fpr_add>
	s = (int)fpr_trunc(fpr_mul(x, fpr_inv_log2));
 800c348:	a3b5      	add	r3, pc, #724	; (adr r3, 800c620 <falcon_inner_sampler+0x4d0>)
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	4682      	mov	sl, r0
 800c350:	9101      	str	r1, [sp, #4]
 800c352:	f7ff fe85 	bl	800c060 <falcon_inner_fpr_mul>
	xu = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800c356:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 800c35a:	ea4c 5c90 	orr.w	ip, ip, r0, lsr #22
	cc = 1085 - e;
 800c35e:	f240 463d 	movw	r6, #1085	; 0x43d
	e = (int)(x >> 52) & 0x7FF;
 800c362:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
	xu = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800c366:	f02c 4c40 	bic.w	ip, ip, #3221225472	; 0xc0000000
 800c36a:	f04c 4c80 	orr.w	ip, ip, #1073741824	; 0x40000000
	t = x >> 63;
 800c36e:	0fca      	lsrs	r2, r1, #31
	cc = 1085 - e;
 800c370:	eba6 010e 	sub.w	r1, r6, lr
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800c374:	ea8c 2880 	eor.w	r8, ip, r0, lsl #10
 800c378:	f341 1340 	sbfx	r3, r1, #5, #1
 800c37c:	ea03 0808 	and.w	r8, r3, r8
 800c380:	ea88 2880 	eor.w	r8, r8, r0, lsl #10
	return x >> (n & 31);
 800c384:	f001 001f 	and.w	r0, r1, #31
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800c388:	ea2c 0103 	bic.w	r1, ip, r3
	return x >> (n & 31);
 800c38c:	f1c0 0320 	rsb	r3, r0, #32
 800c390:	fa01 f303 	lsl.w	r3, r1, r3
 800c394:	fa28 f800 	lsr.w	r8, r8, r0
 800c398:	3820      	subs	r0, #32
 800c39a:	fa21 f000 	lsr.w	r0, r1, r0
	xu &= -(uint64_t)((uint32_t)(cc - 64) >> 31);
 800c39e:	f240 39fd 	movw	r9, #1021	; 0x3fd
	return x >> (n & 31);
 800c3a2:	ea48 0803 	orr.w	r8, r8, r3
	xu &= -(uint64_t)((uint32_t)(cc - 64) >> 31);
 800c3a6:	eba9 0e0e 	sub.w	lr, r9, lr
	return x >> (n & 31);
 800c3aa:	ea48 0800 	orr.w	r8, r8, r0
	xu &= -(uint64_t)((uint32_t)(cc - 64) >> 31);
 800c3ae:	ea08 78ee 	and.w	r8, r8, lr, asr #31
	xu = (xu ^ -t) + t;
 800c3b2:	4253      	negs	r3, r2
 800c3b4:	ea88 0803 	eor.w	r8, r8, r3
 800c3b8:	eb18 0802 	adds.w	r8, r8, r2
	return fpr_scaled(i, 0);
 800c3bc:	4640      	mov	r0, r8
 800c3be:	2200      	movs	r2, #0
 800c3c0:	ea4f 71e8 	mov.w	r1, r8, asr #31
 800c3c4:	f7ff fd4c 	bl	800be60 <falcon_inner_fpr_scaled>
	r = fpr_sub(x, fpr_mul(fpr_of(s), fpr_log2));
 800c3c8:	a397      	add	r3, pc, #604	; (adr r3, 800c628 <falcon_inner_sampler+0x4d8>)
 800c3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ce:	f7ff fe47 	bl	800c060 <falcon_inner_fpr_mul>
 800c3d2:	4602      	mov	r2, r0
	return fpr_add(x, y);
 800c3d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3d8:	4650      	mov	r0, sl
 800c3da:	9901      	ldr	r1, [sp, #4]
	uint64_t z, y;
	unsigned u;
	uint32_t z0, z1, y0, y1;
	uint64_t a, b;

	y = C[0];
 800c3dc:	4d99      	ldr	r5, [pc, #612]	; (800c644 <falcon_inner_sampler+0x4f4>)
 800c3de:	f7ff fd87 	bl	800bef0 <falcon_inner_fpr_add>
	sw ^= (sw ^ 63) & -((63 - sw) >> 31);
 800c3e2:	f1c8 023f 	rsb	r2, r8, #63	; 0x3f
 800c3e6:	f088 033f 	eor.w	r3, r8, #63	; 0x3f
 800c3ea:	ea03 73e2 	and.w	r3, r3, r2, asr #31
 800c3ee:	ea88 0803 	eor.w	r8, r8, r3
	z = (uint64_t)fpr_trunc(fpr_mul(x, fpr_ptwo63)) << 1;
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	4b94      	ldr	r3, [pc, #592]	; (800c648 <falcon_inner_sampler+0x4f8>)
 800c3f6:	f7ff fe33 	bl	800c060 <falcon_inner_fpr_mul>
	xu = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800c3fa:	028a      	lsls	r2, r1, #10
 800c3fc:	ea42 5290 	orr.w	r2, r2, r0, lsr #22
	e = (int)(x >> 52) & 0x7FF;
 800c400:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
	xu = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800c404:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
	cc = 1085 - e;
 800c408:	eba6 060c 	sub.w	r6, r6, ip
	xu = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800c40c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800c410:	ea82 2e80 	eor.w	lr, r2, r0, lsl #10
 800c414:	f346 1340 	sbfx	r3, r6, #5, #1
 800c418:	ea03 030e 	and.w	r3, r3, lr
 800c41c:	ea83 2380 	eor.w	r3, r3, r0, lsl #10
	return x >> (n & 31);
 800c420:	f006 001f 	and.w	r0, r6, #31
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800c424:	f346 1640 	sbfx	r6, r6, #5, #1
 800c428:	ea22 0606 	bic.w	r6, r2, r6
	return x >> (n & 31);
 800c42c:	f1c0 0220 	rsb	r2, r0, #32
 800c430:	fa06 f202 	lsl.w	r2, r6, r2
 800c434:	40c3      	lsrs	r3, r0
 800c436:	4313      	orrs	r3, r2
 800c438:	f1a0 0220 	sub.w	r2, r0, #32
 800c43c:	fa26 f202 	lsr.w	r2, r6, r2
	xu &= -(uint64_t)((uint32_t)(cc - 64) >> 31);
 800c440:	eba9 0c0c 	sub.w	ip, r9, ip
	return x >> (n & 31);
 800c444:	fa26 f000 	lsr.w	r0, r6, r0
 800c448:	4313      	orrs	r3, r2
	xu &= -(uint64_t)((uint32_t)(cc - 64) >> 31);
 800c44a:	ea03 72ec 	and.w	r2, r3, ip, asr #31
 800c44e:	ea00 73ec 	and.w	r3, r0, ip, asr #31
	xu = (xu ^ -t) + t;
 800c452:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
		 * which is better.
		 */
		uint64_t c;

		z0 = (uint32_t)z;
		z1 = (uint32_t)(z >> 32);
 800c456:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800c64c <falcon_inner_sampler+0x4fc>
 800c45a:	4e7d      	ldr	r6, [pc, #500]	; (800c650 <falcon_inner_sampler+0x500>)
 800c45c:	ea82 72e1 	eor.w	r2, r2, r1, asr #31
	t = x >> 63;
 800c460:	0fc9      	lsrs	r1, r1, #31
	xu = (xu ^ -t) + t;
 800c462:	1852      	adds	r2, r2, r1
 800c464:	f143 0100 	adc.w	r1, r3, #0
	y = C[0];
 800c468:	2404      	movs	r4, #4
		z1 = (uint32_t)(z >> 32);
 800c46a:	4660      	mov	r0, ip
	z = (uint64_t)fpr_trunc(fpr_mul(x, fpr_ptwo63)) << 1;
 800c46c:	1892      	adds	r2, r2, r2
		z1 = (uint32_t)(z >> 32);
 800c46e:	f04f 0e36 	mov.w	lr, #54	; 0x36
 800c472:	4623      	mov	r3, r4
 800c474:	46bc      	mov	ip, r7
	z = (uint64_t)fpr_trunc(fpr_mul(x, fpr_ptwo63)) << 1;
 800c476:	4149      	adcs	r1, r1
		z1 = (uint32_t)(z >> 32);
 800c478:	4674      	mov	r4, lr
 800c47a:	4607      	mov	r7, r0
 800c47c:	e002      	b.n	800c484 <falcon_inner_sampler+0x334>
			+ (((uint64_t)z0 * (uint64_t)y0) >> 32);
		b = ((uint64_t)z1 * (uint64_t)y0);
		c = (a >> 32) + (b >> 32);
		c += (((uint64_t)(uint32_t)a + (uint64_t)(uint32_t)b) >> 32);
		c += (uint64_t)z1 * (uint64_t)y1;
		y = C[u] - c;
 800c47e:	f856 7f08 	ldr.w	r7, [r6, #8]!
 800c482:	6874      	ldr	r4, [r6, #4]
		a = ((uint64_t)z0 * (uint64_t)y1)
 800c484:	fba3 e902 	umull	lr, r9, r3, r2
			+ (((uint64_t)z0 * (uint64_t)y0) >> 32);
 800c488:	fba5 a002 	umull	sl, r0, r5, r2
		a = ((uint64_t)z0 * (uint64_t)y1)
 800c48c:	eb10 000e 	adds.w	r0, r0, lr
		c += (uint64_t)z1 * (uint64_t)y1;
 800c490:	fba1 a303 	umull	sl, r3, r1, r3
		b = ((uint64_t)z1 * (uint64_t)y0);
 800c494:	fba1 e505 	umull	lr, r5, r1, r5
		a = ((uint64_t)z0 * (uint64_t)y1)
 800c498:	f149 0900 	adc.w	r9, r9, #0
		y = C[u] - c;
 800c49c:	eb15 050a 	adds.w	r5, r5, sl
 800c4a0:	f143 0300 	adc.w	r3, r3, #0
 800c4a4:	eb15 0509 	adds.w	r5, r5, r9
 800c4a8:	f143 0300 	adc.w	r3, r3, #0
		c += (((uint64_t)(uint32_t)a + (uint64_t)(uint32_t)b) >> 32);
 800c4ac:	eb10 0e0e 	adds.w	lr, r0, lr
 800c4b0:	eb4b 000b 	adc.w	r0, fp, fp
		y = C[u] - c;
 800c4b4:	182d      	adds	r5, r5, r0
	for (u = 1; u < (sizeof C) / sizeof(C[0]); u ++) {
 800c4b6:	4867      	ldr	r0, [pc, #412]	; (800c654 <falcon_inner_sampler+0x504>)
		y = C[u] - c;
 800c4b8:	f143 0300 	adc.w	r3, r3, #0
 800c4bc:	1b7d      	subs	r5, r7, r5
 800c4be:	eb64 0303 	sbc.w	r3, r4, r3
	for (u = 1; u < (sizeof C) / sizeof(C[0]); u ++) {
 800c4c2:	42b0      	cmp	r0, r6
 800c4c4:	d1db      	bne.n	800c47e <falcon_inner_sampler+0x32e>
	/*
	 * The scaling factor must be applied at the end. Since y is now
	 * in fixed-point notation, we have to convert the factor to the
	 * same format, and do an extra integer multiplication.
	 */
	z = (uint64_t)fpr_trunc(fpr_mul(ccs, fpr_ptwo63)) << 1;
 800c4c6:	461c      	mov	r4, r3
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	4b5f      	ldr	r3, [pc, #380]	; (800c648 <falcon_inner_sampler+0x4f8>)
 800c4cc:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 800c4d0:	4667      	mov	r7, ip
 800c4d2:	f7ff fdc5 	bl	800c060 <falcon_inner_fpr_mul>
	xu = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800c4d6:	ea4f 2c81 	mov.w	ip, r1, lsl #10
	e = (int)(x >> 52) & 0x7FF;
 800c4da:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
	xu = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800c4de:	ea4c 5c90 	orr.w	ip, ip, r0, lsr #22
	cc = 1085 - e;
 800c4e2:	f5ce 6287 	rsb	r2, lr, #1080	; 0x438
	xu = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800c4e6:	f02c 4c40 	bic.w	ip, ip, #3221225472	; 0xc0000000
 800c4ea:	f04c 4c80 	orr.w	ip, ip, #1073741824	; 0x40000000
	cc = 1085 - e;
 800c4ee:	3205      	adds	r2, #5
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800c4f0:	ea8c 2980 	eor.w	r9, ip, r0, lsl #10
 800c4f4:	f342 1340 	sbfx	r3, r2, #5, #1
 800c4f8:	ea03 0309 	and.w	r3, r3, r9
 800c4fc:	ea83 2380 	eor.w	r3, r3, r0, lsl #10
	return x >> (n & 31);
 800c500:	f002 001f 	and.w	r0, r2, #31
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800c504:	f342 1240 	sbfx	r2, r2, #5, #1
 800c508:	ea2c 0202 	bic.w	r2, ip, r2
	return x >> (n & 31);
 800c50c:	f1c0 0c20 	rsb	ip, r0, #32
 800c510:	fa02 fc0c 	lsl.w	ip, r2, ip
 800c514:	40c3      	lsrs	r3, r0
 800c516:	ea43 030c 	orr.w	r3, r3, ip
 800c51a:	f1a0 0c20 	sub.w	ip, r0, #32
 800c51e:	fa22 fc0c 	lsr.w	ip, r2, ip
	xu &= -(uint64_t)((uint32_t)(cc - 64) >> 31);
 800c522:	f5ce 7e7f 	rsb	lr, lr, #1020	; 0x3fc
	return x >> (n & 31);
 800c526:	ea43 030c 	orr.w	r3, r3, ip
 800c52a:	fa22 f000 	lsr.w	r0, r2, r0
	xu &= -(uint64_t)((uint32_t)(cc - 64) >> 31);
 800c52e:	f10e 0e01 	add.w	lr, lr, #1
 800c532:	ea03 72ee 	and.w	r2, r3, lr, asr #31
 800c536:	ea00 73ee 	and.w	r3, r0, lr, asr #31
	xu = (xu ^ -t) + t;
 800c53a:	ea82 72e1 	eor.w	r2, r2, r1, asr #31
 800c53e:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
	t = x >> 63;
 800c542:	0fc9      	lsrs	r1, r1, #31
	xu = (xu ^ -t) + t;
 800c544:	1852      	adds	r2, r2, r1
 800c546:	f143 0300 	adc.w	r3, r3, #0
 800c54a:	1892      	adds	r2, r2, r2
	z0 = (uint32_t)z;
	z1 = (uint32_t)(z >> 32);
	y0 = (uint32_t)y;
	y1 = (uint32_t)(y >> 32);
	a = ((uint64_t)z0 * (uint64_t)y1)
		+ (((uint64_t)z0 * (uint64_t)y0) >> 32);
 800c54c:	fba2 0105 	umull	r0, r1, r2, r5
	z = (uint64_t)fpr_trunc(fpr_mul(ccs, fpr_ptwo63)) << 1;
 800c550:	415b      	adcs	r3, r3
	a = ((uint64_t)z0 * (uint64_t)y1)
 800c552:	fba4 2c02 	umull	r2, ip, r4, r2
 800c556:	188a      	adds	r2, r1, r2
	b = ((uint64_t)z1 * (uint64_t)y0);
 800c558:	fba3 1005 	umull	r1, r0, r3, r5
	y = (a >> 32) + (b >> 32);
	y += (((uint64_t)(uint32_t)a + (uint64_t)(uint32_t)b) >> 32);
	y += (uint64_t)z1 * (uint64_t)y1;
 800c55c:	fba3 3504 	umull	r3, r5, r3, r4
	a = ((uint64_t)z0 * (uint64_t)y1)
 800c560:	f14c 0c00 	adc.w	ip, ip, #0
	y += (uint64_t)z1 * (uint64_t)y1;
 800c564:	18c4      	adds	r4, r0, r3
 800c566:	f145 0500 	adc.w	r5, r5, #0
 800c56a:	eb14 040c 	adds.w	r4, r4, ip
 800c56e:	f145 0300 	adc.w	r3, r5, #0
	y += (((uint64_t)(uint32_t)a + (uint64_t)(uint32_t)b) >> 32);
 800c572:	1855      	adds	r5, r2, r1
 800c574:	eb4b 020b 	adc.w	r2, fp, fp
	y += (uint64_t)z1 * (uint64_t)y1;
 800c578:	18a4      	adds	r4, r4, r2
 800c57a:	f143 0500 	adc.w	r5, r3, #0
	z = ((fpr_expm_p63(r, ccs) << 1) - 1) >> s;
 800c57e:	1924      	adds	r4, r4, r4
 800c580:	416d      	adcs	r5, r5
 800c582:	3c01      	subs	r4, #1
 800c584:	f145 35ff 	adc.w	r5, r5, #4294967295
 800c588:	f1c8 0320 	rsb	r3, r8, #32
 800c58c:	fa05 f303 	lsl.w	r3, r5, r3
 800c590:	fa24 f408 	lsr.w	r4, r4, r8
 800c594:	431c      	orrs	r4, r3
 800c596:	f1a8 0320 	sub.w	r3, r8, #32
 800c59a:	fa25 f303 	lsr.w	r3, r5, r3
	i = 64;
 800c59e:	2640      	movs	r6, #64	; 0x40
	z = ((fpr_expm_p63(r, ccs) << 1) - 1) >> s;
 800c5a0:	431c      	orrs	r4, r3
 800c5a2:	fa25 f508 	lsr.w	r5, r5, r8
	i = 64;
 800c5a6:	e012      	b.n	800c5ce <falcon_inner_sampler+0x47e>
		w = prng_get_u8(p) - ((uint32_t)(z >> i) & 0xFF);
 800c5a8:	f1c6 0120 	rsb	r1, r6, #32
 800c5ac:	f1a6 0220 	sub.w	r2, r6, #32
 800c5b0:	fa24 f306 	lsr.w	r3, r4, r6
 800c5b4:	fa05 f101 	lsl.w	r1, r5, r1
 800c5b8:	430b      	orrs	r3, r1
 800c5ba:	fa25 f202 	lsr.w	r2, r5, r2
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	b2db      	uxtb	r3, r3
	} while (!w && i > 0);
 800c5c2:	ebb8 0803 	subs.w	r8, r8, r3
 800c5c6:	d147      	bne.n	800c658 <falcon_inner_sampler+0x508>
 800c5c8:	2e00      	cmp	r6, #0
 800c5ca:	f43f ae36 	beq.w	800c23a <falcon_inner_sampler+0xea>
	v = p->buf.d[p->ptr ++];
 800c5ce:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 800c5d2:	1c53      	adds	r3, r2, #1
	if (p->ptr == sizeof p->buf.d) {
 800c5d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	v = p->buf.d[p->ptr ++];
 800c5d8:	f817 8002 	ldrb.w	r8, [r7, r2]
 800c5dc:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
		i -= 8;
 800c5e0:	f1a6 0608 	sub.w	r6, r6, #8
	if (p->ptr == sizeof p->buf.d) {
 800c5e4:	d1e0      	bne.n	800c5a8 <falcon_inner_sampler+0x458>
		Zf(prng_refill)(p);
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	f7fe fc7a 	bl	800aee0 <falcon_inner_prng_refill>
 800c5ec:	e7dc      	b.n	800c5a8 <falcon_inner_sampler+0x458>
		Zf(prng_refill)(p);
 800c5ee:	4638      	mov	r0, r7
 800c5f0:	f7fe fc76 	bl	800aee0 <falcon_inner_prng_refill>
 800c5f4:	f04f 0806 	mov.w	r8, #6
 800c5f8:	f04f 0c07 	mov.w	ip, #7
 800c5fc:	2205      	movs	r2, #5
 800c5fe:	f04f 0904 	mov.w	r9, #4
 800c602:	2503      	movs	r5, #3
 800c604:	f04f 0e02 	mov.w	lr, #2
 800c608:	2601      	movs	r6, #1
 800c60a:	2008      	movs	r0, #8
 800c60c:	2409      	movs	r4, #9
 800c60e:	210a      	movs	r1, #10
		u = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	e629      	b.n	800c268 <falcon_inner_sampler+0x118>
 800c614:	f3af 8000 	nop.w
 800c618:	c183bbc2 	.word	0xc183bbc2
 800c61c:	3fc34f8b 	.word	0x3fc34f8b
 800c620:	652b82fe 	.word	0x652b82fe
 800c624:	3ff71547 	.word	0x3ff71547
 800c628:	fefa39ef 	.word	0xfefa39ef
 800c62c:	3fe62e42 	.word	0x3fe62e42
 800c630:	080193cc 	.word	0x080193cc
 800c634:	002ed3ac 	.word	0x002ed3ac
 800c638:	00391802 	.word	0x00391802
 800c63c:	00a3f7f4 	.word	0x00a3f7f4
 800c640:	080194a4 	.word	0x080194a4
 800c644:	741183a3 	.word	0x741183a3
 800c648:	43e00000 	.word	0x43e00000
 800c64c:	548cfc06 	.word	0x548cfc06
 800c650:	08016d48 	.word	0x08016d48
 800c654:	08016da0 	.word	0x08016da0
		if (BerExp(&spc->p, x, ccs)) {
 800c658:	f1b8 0f00 	cmp.w	r8, #0
 800c65c:	f6bf aded 	bge.w	800c23a <falcon_inner_sampler+0xea>
			 * actual center is mu = s + r.
			 */
			return s + z;
		}
	}
}
 800c660:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c662:	9b02      	ldr	r3, [sp, #8]
 800c664:	4418      	add	r0, r3
 800c666:	b00b      	add	sp, #44	; 0x2c
 800c668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Zf(prng_refill)(p);
 800c66c:	4638      	mov	r0, r7
 800c66e:	f7fe fc37 	bl	800aee0 <falcon_inner_prng_refill>
 800c672:	e63c      	b.n	800c2ee <falcon_inner_sampler+0x19e>
	...

0800c680 <falcon_inner_FFT>:
{
 800c680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	n = (size_t)1 << logn;
 800c684:	2301      	movs	r3, #1
{
 800c686:	b09b      	sub	sp, #108	; 0x6c
	n = (size_t)1 << logn;
 800c688:	fa03 f201 	lsl.w	r2, r3, r1
	hn = n >> 1;
 800c68c:	40da      	lsrs	r2, r3
	for (u = 1, m = 2; u < logn; u ++, m <<= 1) {
 800c68e:	4299      	cmp	r1, r3
{
 800c690:	9118      	str	r1, [sp, #96]	; 0x60
 800c692:	9012      	str	r0, [sp, #72]	; 0x48
	hn = n >> 1;
 800c694:	920f      	str	r2, [sp, #60]	; 0x3c
	for (u = 1, m = 2; u < logn; u ++, m <<= 1) {
 800c696:	f240 80c8 	bls.w	800c82a <falcon_inner_FFT+0x1aa>
 800c69a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800c69e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c6a0:	2302      	movs	r3, #2
 800c6a2:	9316      	str	r3, [sp, #88]	; 0x58
 800c6a4:	f1a2 0308 	sub.w	r3, r2, #8
 800c6a8:	9219      	str	r2, [sp, #100]	; 0x64
 800c6aa:	9315      	str	r3, [sp, #84]	; 0x54
		ht = t >> 1;
 800c6ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
		for (i1 = 0, j1 = 0; i1 < hm; i1 ++, j1 += t) {
 800c6ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c6b0:	9111      	str	r1, [sp, #68]	; 0x44
 800c6b2:	085a      	lsrs	r2, r3, #1
		ht = t >> 1;
 800c6b4:	0849      	lsrs	r1, r1, #1
		for (i1 = 0, j1 = 0; i1 < hm; i1 ++, j1 += t) {
 800c6b6:	9210      	str	r2, [sp, #64]	; 0x40
		ht = t >> 1;
 800c6b8:	910f      	str	r1, [sp, #60]	; 0x3c
		for (i1 = 0, j1 = 0; i1 < hm; i1 ++, j1 += t) {
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 80aa 	beq.w	800c816 <falcon_inner_FFT+0x196>
 800c6c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c6c4:	485a      	ldr	r0, [pc, #360]	; (800c830 <falcon_inner_FFT+0x1b0>)
 800c6c6:	910c      	str	r1, [sp, #48]	; 0x30
 800c6c8:	eba3 03c1 	sub.w	r3, r3, r1, lsl #3
 800c6cc:	3b08      	subs	r3, #8
 800c6ce:	9314      	str	r3, [sp, #80]	; 0x50
 800c6d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c6d2:	eba3 03c1 	sub.w	r3, r3, r1, lsl #3
 800c6d6:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 800c6da:	9313      	str	r3, [sp, #76]	; 0x4c
 800c6dc:	2300      	movs	r3, #0
 800c6de:	920d      	str	r2, [sp, #52]	; 0x34
 800c6e0:	930e      	str	r3, [sp, #56]	; 0x38
			s_re = fpr_gm_tab[((m + i1) << 1) + 0];
 800c6e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c6e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6e8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c6ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
			s_im = fpr_gm_tab[((m + i1) << 1) + 1];
 800c6f0:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800c6f4:	1ad3      	subs	r3, r2, r3
			for (j = j1; j < j2; j ++) {
 800c6f6:	429a      	cmp	r2, r3
			s_im = fpr_gm_tab[((m + i1) << 1) + 1];
 800c6f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c6fc:	9301      	str	r3, [sp, #4]
			for (j = j1; j < j2; j ++) {
 800c6fe:	d97c      	bls.n	800c7fa <falcon_inner_FFT+0x17a>
 800c700:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c702:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
 800c706:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c708:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
 800c70c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c70e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c712:	9303      	str	r3, [sp, #12]
 800c714:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c71a:	9302      	str	r3, [sp, #8]
				x_re = f[j];
 800c71c:	e9fa 4502 	ldrd	r4, r5, [sl, #8]!
				y_im = f[j + ht + hn];
 800c720:	9902      	ldr	r1, [sp, #8]
				y_re = f[j + ht];
 800c722:	9a03      	ldr	r2, [sp, #12]
			for (j = j1; j < j2; j ++) {
 800c724:	9b01      	ldr	r3, [sp, #4]
				y_im = f[j + ht + hn];
 800c726:	e9f1 6702 	ldrd	r6, r7, [r1, #8]!
				y_re = f[j + ht];
 800c72a:	e9d2 8900 	ldrd	r8, r9, [r2]
				x_re = f[j];
 800c72e:	e9cd 4504 	strd	r4, r5, [sp, #16]
				x_im = f[j + hn];
 800c732:	e9db 4500 	ldrd	r4, r5, [fp]
			for (j = j1; j < j2; j ++) {
 800c736:	3301      	adds	r3, #1
 800c738:	9301      	str	r3, [sp, #4]
				y_im = f[j + ht + hn];
 800c73a:	9102      	str	r1, [sp, #8]
				FPC_MUL(y_re, y_im, y_re, y_im, s_re, s_im);
 800c73c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c740:	4640      	mov	r0, r8
 800c742:	4649      	mov	r1, r9
				x_im = f[j + hn];
 800c744:	e9cd 4506 	strd	r4, r5, [sp, #24]
				FPC_MUL(y_re, y_im, y_re, y_im, s_re, s_im);
 800c748:	f7ff fc8a 	bl	800c060 <falcon_inner_fpr_mul>
 800c74c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c750:	4605      	mov	r5, r0
 800c752:	460c      	mov	r4, r1
 800c754:	4630      	mov	r0, r6
 800c756:	4639      	mov	r1, r7
 800c758:	f7ff fc82 	bl	800c060 <falcon_inner_fpr_mul>
 800c75c:	4602      	mov	r2, r0
	return fpr_add(x, y);
 800c75e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c762:	4628      	mov	r0, r5
 800c764:	4621      	mov	r1, r4
 800c766:	f7ff fbc3 	bl	800bef0 <falcon_inner_fpr_add>
 800c76a:	460b      	mov	r3, r1
 800c76c:	4605      	mov	r5, r0
 800c76e:	4649      	mov	r1, r9
 800c770:	4640      	mov	r0, r8
 800c772:	4698      	mov	r8, r3
 800c774:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c778:	f7ff fc72 	bl	800c060 <falcon_inner_fpr_mul>
 800c77c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c780:	4681      	mov	r9, r0
 800c782:	460c      	mov	r4, r1
 800c784:	4630      	mov	r0, r6
 800c786:	4639      	mov	r1, r7
 800c788:	f7ff fc6a 	bl	800c060 <falcon_inner_fpr_mul>
 800c78c:	4602      	mov	r2, r0
 800c78e:	460b      	mov	r3, r1
 800c790:	4648      	mov	r0, r9
 800c792:	4621      	mov	r1, r4
 800c794:	f7ff fbac 	bl	800bef0 <falcon_inner_fpr_add>
				FPC_ADD(f[j], f[j + hn],
 800c798:	462a      	mov	r2, r5
				FPC_MUL(y_re, y_im, y_re, y_im, s_re, s_im);
 800c79a:	460c      	mov	r4, r1
 800c79c:	4606      	mov	r6, r0
				FPC_ADD(f[j], f[j + hn],
 800c79e:	4643      	mov	r3, r8
 800c7a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7a4:	f7ff fba4 	bl	800bef0 <falcon_inner_fpr_add>
 800c7a8:	4623      	mov	r3, r4
 800c7aa:	460f      	mov	r7, r1
 800c7ac:	4681      	mov	r9, r0
 800c7ae:	4632      	mov	r2, r6
 800c7b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7b4:	f7ff fb9c 	bl	800bef0 <falcon_inner_fpr_add>
 800c7b8:	e9ca 9700 	strd	r9, r7, [sl]
 800c7bc:	462a      	mov	r2, r5
 800c7be:	e8eb 0102 	strd	r0, r1, [fp], #8
 800c7c2:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c7c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7ca:	f7ff fb91 	bl	800bef0 <falcon_inner_fpr_add>
 800c7ce:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800c7d2:	4684      	mov	ip, r0
 800c7d4:	460f      	mov	r7, r1
 800c7d6:	4632      	mov	r2, r6
 800c7d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7dc:	4664      	mov	r4, ip
 800c7de:	f7ff fb87 	bl	800bef0 <falcon_inner_fpr_add>
				FPC_SUB(f[j + ht], f[j + ht + hn],
 800c7e2:	9a03      	ldr	r2, [sp, #12]
			for (j = j1; j < j2; j ++) {
 800c7e4:	9b01      	ldr	r3, [sp, #4]
 800c7e6:	463d      	mov	r5, r7
				FPC_SUB(f[j + ht], f[j + ht + hn],
 800c7e8:	e8e2 4502 	strd	r4, r5, [r2], #8
 800c7ec:	9203      	str	r2, [sp, #12]
 800c7ee:	9a02      	ldr	r2, [sp, #8]
 800c7f0:	e9c2 0100 	strd	r0, r1, [r2]
			for (j = j1; j < j2; j ++) {
 800c7f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d190      	bne.n	800c71c <falcon_inner_FFT+0x9c>
		for (i1 = 0, j1 = 0; i1 < hm; i1 ++, j1 += t) {
 800c7fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c7fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c800:	3210      	adds	r2, #16
 800c802:	920d      	str	r2, [sp, #52]	; 0x34
 800c804:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c806:	440a      	add	r2, r1
 800c808:	920c      	str	r2, [sp, #48]	; 0x30
 800c80a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c80c:	3301      	adds	r3, #1
 800c80e:	429a      	cmp	r2, r3
 800c810:	930e      	str	r3, [sp, #56]	; 0x38
 800c812:	f47f af66 	bne.w	800c6e2 <falcon_inner_FFT+0x62>
	for (u = 1, m = 2; u < logn; u ++, m <<= 1) {
 800c816:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c81a:	0052      	lsls	r2, r2, #1
 800c81c:	9216      	str	r2, [sp, #88]	; 0x58
 800c81e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c820:	3301      	adds	r3, #1
 800c822:	429a      	cmp	r2, r3
 800c824:	9317      	str	r3, [sp, #92]	; 0x5c
 800c826:	f47f af41 	bne.w	800c6ac <falcon_inner_FFT+0x2c>
}
 800c82a:	b01b      	add	sp, #108	; 0x6c
 800c82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c830:	08019498 	.word	0x08019498
	...

0800c840 <falcon_inner_iFFT>:
{
 800c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	b09b      	sub	sp, #108	; 0x6c
	n = (size_t)1 << logn;
 800c846:	2301      	movs	r3, #1
{
 800c848:	460c      	mov	r4, r1
 800c84a:	9118      	str	r1, [sp, #96]	; 0x60
	n = (size_t)1 << logn;
 800c84c:	fa03 f101 	lsl.w	r1, r3, r1
	hn = n >> 1;
 800c850:	fa21 f203 	lsr.w	r2, r1, r3
	for (u = logn; u > 1; u --) {
 800c854:	429c      	cmp	r4, r3
	n = (size_t)1 << logn;
 800c856:	9119      	str	r1, [sp, #100]	; 0x64
{
 800c858:	9011      	str	r0, [sp, #68]	; 0x44
	hn = n >> 1;
 800c85a:	920f      	str	r2, [sp, #60]	; 0x3c
	for (u = logn; u > 1; u --) {
 800c85c:	f240 80e6 	bls.w	800ca2c <falcon_inner_iFFT+0x1ec>
	t = 1;
 800c860:	930e      	str	r3, [sp, #56]	; 0x38
	for (u = logn; u > 1; u --) {
 800c862:	e9cd 1415 	strd	r1, r4, [sp, #84]	; 0x54
 800c866:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 800c86a:	9317      	str	r3, [sp, #92]	; 0x5c
 800c86c:	3b08      	subs	r3, #8
 800c86e:	9314      	str	r3, [sp, #80]	; 0x50
		hm = m >> 1;
 800c870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c872:	9b15      	ldr	r3, [sp, #84]	; 0x54
		for (i1 = 0, j1 = 0; j1 < hn; i1 ++, j1 += dt) {
 800c874:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c876:	9210      	str	r2, [sp, #64]	; 0x40
 800c878:	4610      	mov	r0, r2
		hm = m >> 1;
 800c87a:	085b      	lsrs	r3, r3, #1
		dt = t << 1;
 800c87c:	0052      	lsls	r2, r2, #1
		hm = m >> 1;
 800c87e:	9315      	str	r3, [sp, #84]	; 0x54
		dt = t << 1;
 800c880:	920e      	str	r2, [sp, #56]	; 0x38
		for (i1 = 0, j1 = 0; j1 < hn; i1 ++, j1 += dt) {
 800c882:	2900      	cmp	r1, #0
 800c884:	f000 80b2 	beq.w	800c9ec <falcon_inner_iFFT+0x1ac>
 800c888:	4a6b      	ldr	r2, [pc, #428]	; (800ca38 <falcon_inner_iFFT+0x1f8>)
 800c88a:	900c      	str	r0, [sp, #48]	; 0x30
 800c88c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800c890:	930d      	str	r3, [sp, #52]	; 0x34
 800c892:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c894:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
 800c898:	3b08      	subs	r3, #8
 800c89a:	9313      	str	r3, [sp, #76]	; 0x4c
 800c89c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c89e:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
 800c8a2:	9312      	str	r3, [sp, #72]	; 0x48
 800c8a4:	2300      	movs	r3, #0
	x ^= (uint64_t)1 << 63;
 800c8a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8a8:	9301      	str	r3, [sp, #4]
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	68d3      	ldr	r3, [r2, #12]
 800c8ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c8b2:	9308      	str	r3, [sp, #32]
 800c8b4:	6893      	ldr	r3, [r2, #8]
 800c8b6:	9309      	str	r3, [sp, #36]	; 0x24
			s_re = fpr_gm_tab[((hm + i1) << 1) + 0];
 800c8b8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c8bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
			for (j = j1; j < j2; j ++) {
 800c8c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8c2:	428b      	cmp	r3, r1
 800c8c4:	f240 8084 	bls.w	800c9d0 <falcon_inner_iFFT+0x190>
 800c8c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c8ca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c8ce:	9203      	str	r2, [sp, #12]
 800c8d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c8d2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c8d6:	9202      	str	r2, [sp, #8]
 800c8d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c8da:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
 800c8de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c8e0:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
				x_re = f[j];
 800c8e4:	9903      	ldr	r1, [sp, #12]
				x_im = f[j + hn];
 800c8e6:	9802      	ldr	r0, [sp, #8]
			for (j = j1; j < j2; j ++) {
 800c8e8:	9b01      	ldr	r3, [sp, #4]
				y_im = f[j + t + hn];
 800c8ea:	f85a 7f08 	ldr.w	r7, [sl, #8]!
				x_re = f[j];
 800c8ee:	e9f1 8902 	ldrd	r8, r9, [r1, #8]!
				y_re = f[j + t];
 800c8f2:	e9db 5400 	ldrd	r5, r4, [fp]
				x_re = f[j];
 800c8f6:	9103      	str	r1, [sp, #12]
				x_im = f[j + hn];
 800c8f8:	e9d0 0100 	ldrd	r0, r1, [r0]
			for (j = j1; j < j2; j ++) {
 800c8fc:	3301      	adds	r3, #1
				x_im = f[j + hn];
 800c8fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
				FPC_ADD(f[j], f[j + hn],
 800c902:	462a      	mov	r2, r5
			for (j = j1; j < j2; j ++) {
 800c904:	9301      	str	r3, [sp, #4]
				FPC_ADD(f[j], f[j + hn],
 800c906:	4640      	mov	r0, r8
 800c908:	4623      	mov	r3, r4
 800c90a:	4649      	mov	r1, r9
				y_im = f[j + t + hn];
 800c90c:	f8da 6004 	ldr.w	r6, [sl, #4]
				FPC_ADD(f[j], f[j + hn],
 800c910:	f7ff faee 	bl	800bef0 <falcon_inner_fpr_add>
 800c914:	463a      	mov	r2, r7
 800c916:	4633      	mov	r3, r6
 800c918:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c91c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c920:	f7ff fae6 	bl	800bef0 <falcon_inner_fpr_add>
 800c924:	9a03      	ldr	r2, [sp, #12]
 800c926:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800c92a:	f8c2 c000 	str.w	ip, [r2]
 800c92e:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800c932:	f8c2 c004 	str.w	ip, [r2, #4]
 800c936:	9a02      	ldr	r2, [sp, #8]
 800c938:	e8e2 0102 	strd	r0, r1, [r2], #8
	return fpr_add(x, y);
 800c93c:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800c940:	9202      	str	r2, [sp, #8]
 800c942:	4640      	mov	r0, r8
 800c944:	462a      	mov	r2, r5
 800c946:	4649      	mov	r1, r9
 800c948:	f7ff fad2 	bl	800bef0 <falcon_inner_fpr_add>
 800c94c:	463a      	mov	r2, r7
 800c94e:	4605      	mov	r5, r0
 800c950:	460c      	mov	r4, r1
 800c952:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c95a:	f7ff fac9 	bl	800bef0 <falcon_inner_fpr_add>
 800c95e:	462f      	mov	r7, r5
 800c960:	4626      	mov	r6, r4
 800c962:	4605      	mov	r5, r0
 800c964:	460c      	mov	r4, r1
				FPC_MUL(f[j + t], f[j + t + hn],
 800c966:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c96a:	4638      	mov	r0, r7
 800c96c:	4631      	mov	r1, r6
 800c96e:	f7ff fb77 	bl	800c060 <falcon_inner_fpr_mul>
 800c972:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800c976:	4681      	mov	r9, r0
 800c978:	4688      	mov	r8, r1
 800c97a:	4628      	mov	r0, r5
 800c97c:	4621      	mov	r1, r4
 800c97e:	f7ff fb6f 	bl	800c060 <falcon_inner_fpr_mul>
 800c982:	4602      	mov	r2, r0
 800c984:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c988:	4648      	mov	r0, r9
 800c98a:	4641      	mov	r1, r8
 800c98c:	f7ff fab0 	bl	800bef0 <falcon_inner_fpr_add>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	4638      	mov	r0, r7
 800c996:	4631      	mov	r1, r6
 800c998:	4690      	mov	r8, r2
 800c99a:	4699      	mov	r9, r3
 800c99c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800c9a0:	f7ff fb5e 	bl	800c060 <falcon_inner_fpr_mul>
 800c9a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	460e      	mov	r6, r1
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	4621      	mov	r1, r4
 800c9b0:	f7ff fb56 	bl	800c060 <falcon_inner_fpr_mul>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	4631      	mov	r1, r6
 800c9bc:	f7ff fa98 	bl	800bef0 <falcon_inner_fpr_add>
			for (j = j1; j < j2; j ++) {
 800c9c0:	9b01      	ldr	r3, [sp, #4]
 800c9c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9c4:	4293      	cmp	r3, r2
				FPC_MUL(f[j + t], f[j + t + hn],
 800c9c6:	e8eb 8902 	strd	r8, r9, [fp], #8
 800c9ca:	e9ca 0100 	strd	r0, r1, [sl]
			for (j = j1; j < j2; j ++) {
 800c9ce:	d189      	bne.n	800c8e4 <falcon_inner_iFFT+0xa4>
		for (i1 = 0, j1 = 0; j1 < hn; i1 ++, j1 += dt) {
 800c9d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9d4:	441a      	add	r2, r3
 800c9d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9d8:	920c      	str	r2, [sp, #48]	; 0x30
 800c9da:	3310      	adds	r3, #16
 800c9dc:	930d      	str	r3, [sp, #52]	; 0x34
 800c9de:	4613      	mov	r3, r2
 800c9e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c9e2:	1a9b      	subs	r3, r3, r2
 800c9e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	f63f af5d 	bhi.w	800c8a6 <falcon_inner_iFFT+0x66>
	for (u = logn; u > 1; u --) {
 800c9ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	9316      	str	r3, [sp, #88]	; 0x58
 800c9f4:	f47f af3c 	bne.w	800c870 <falcon_inner_iFFT+0x30>
		ni = fpr_p2_tab[logn];
 800c9f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c9fa:	4b10      	ldr	r3, [pc, #64]	; (800ca3c <falcon_inner_iFFT+0x1fc>)
 800c9fc:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 800ca00:	f1a2 0508 	sub.w	r5, r2, #8
 800ca04:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ca06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca0a:	e9d3 6700 	ldrd	r6, r7, [r3]
		for (u = 0; u < n; u ++) {
 800ca0e:	2400      	movs	r4, #0
			f[u] = fpr_mul(f[u], ni);
 800ca10:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800ca14:	4632      	mov	r2, r6
 800ca16:	463b      	mov	r3, r7
 800ca18:	f7ff fb22 	bl	800c060 <falcon_inner_fpr_mul>
		for (u = 0; u < n; u ++) {
 800ca1c:	3401      	adds	r4, #1
 800ca1e:	45a0      	cmp	r8, r4
			f[u] = fpr_mul(f[u], ni);
 800ca20:	e9c5 0100 	strd	r0, r1, [r5]
		for (u = 0; u < n; u ++) {
 800ca24:	d1f4      	bne.n	800ca10 <falcon_inner_iFFT+0x1d0>
}
 800ca26:	b01b      	add	sp, #108	; 0x6c
 800ca28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (logn > 0) {
 800ca2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1e2      	bne.n	800c9f8 <falcon_inner_iFFT+0x1b8>
}
 800ca32:	b01b      	add	sp, #108	; 0x6c
 800ca34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca38:	08019498 	.word	0x08019498
 800ca3c:	0801d498 	.word	0x0801d498

0800ca40 <falcon_inner_poly_mul_fft>:

/* see inner.h */
void
Zf(poly_mul_fft)(
	fpr *restrict a, const fpr *restrict b, unsigned logn)
{
 800ca40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t n, hn, u;

	n = (size_t)1 << logn;
 800ca44:	2301      	movs	r3, #1
{
 800ca46:	b089      	sub	sp, #36	; 0x24
	n = (size_t)1 << logn;
 800ca48:	fa03 f202 	lsl.w	r2, r3, r2
	hn = n >> 1;
	for (u = 0; u < hn; u ++) {
 800ca4c:	fa32 f303 	lsrs.w	r3, r2, r3
 800ca50:	9307      	str	r3, [sp, #28]
 800ca52:	d04d      	beq.n	800caf0 <falcon_inner_poly_mul_fft+0xb0>
 800ca54:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	eb00 0ac3 	add.w	sl, r0, r3, lsl #3
 800ca5e:	eb01 0bc3 	add.w	fp, r1, r3, lsl #3
 800ca62:	f1a1 0308 	sub.w	r3, r1, #8
 800ca66:	9306      	str	r3, [sp, #24]
 800ca68:	2300      	movs	r3, #0
 800ca6a:	f1a0 0408 	sub.w	r4, r0, #8
 800ca6e:	4699      	mov	r9, r3
		fpr a_re, a_im, b_re, b_im;

		a_re = a[u];
		a_im = a[u + hn];
		b_re = b[u];
 800ca70:	9d06      	ldr	r5, [sp, #24]
 800ca72:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
		a_re = a[u];
 800ca76:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
		b_re = b[u];
 800ca7a:	9506      	str	r5, [sp, #24]
		a_im = a[u + hn];
 800ca7c:	e9fa 5602 	ldrd	r5, r6, [sl, #8]!
		b_im = b[u + hn];
 800ca80:	e9fb 7802 	ldrd	r7, r8, [fp, #8]!
		a_im = a[u + hn];
 800ca84:	e9cd 5600 	strd	r5, r6, [sp]
		FPC_MUL(a[u], a[u + hn], a_re, a_im, b_re, b_im);
 800ca88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca90:	f7ff fae6 	bl	800c060 <falcon_inner_fpr_mul>
 800ca94:	463a      	mov	r2, r7
 800ca96:	4606      	mov	r6, r0
 800ca98:	460d      	mov	r5, r1
 800ca9a:	4643      	mov	r3, r8
 800ca9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800caa0:	f7ff fade 	bl	800c060 <falcon_inner_fpr_mul>
 800caa4:	4602      	mov	r2, r0
 800caa6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800caaa:	4630      	mov	r0, r6
 800caac:	4629      	mov	r1, r5
 800caae:	f7ff fa1f 	bl	800bef0 <falcon_inner_fpr_add>
 800cab2:	463a      	mov	r2, r7
 800cab4:	4643      	mov	r3, r8
 800cab6:	4606      	mov	r6, r0
 800cab8:	460d      	mov	r5, r1
 800caba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cabe:	f7ff facf 	bl	800c060 <falcon_inner_fpr_mul>
 800cac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cac6:	4680      	mov	r8, r0
 800cac8:	460f      	mov	r7, r1
 800caca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cace:	f7ff fac7 	bl	800c060 <falcon_inner_fpr_mul>
 800cad2:	460b      	mov	r3, r1
 800cad4:	4602      	mov	r2, r0
 800cad6:	4639      	mov	r1, r7
 800cad8:	4640      	mov	r0, r8
 800cada:	f7ff fa09 	bl	800bef0 <falcon_inner_fpr_add>
	for (u = 0; u < hn; u ++) {
 800cade:	9b07      	ldr	r3, [sp, #28]
 800cae0:	f109 0901 	add.w	r9, r9, #1
 800cae4:	454b      	cmp	r3, r9
		FPC_MUL(a[u], a[u + hn], a_re, a_im, b_re, b_im);
 800cae6:	e9c4 6500 	strd	r6, r5, [r4]
 800caea:	e9ca 0100 	strd	r0, r1, [sl]
	for (u = 0; u < hn; u ++) {
 800caee:	d1bf      	bne.n	800ca70 <falcon_inner_poly_mul_fft+0x30>
	}
}
 800caf0:	b009      	add	sp, #36	; 0x24
 800caf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf6:	bf00      	nop
	...

0800cb00 <falcon_inner_poly_mul_autoadj_fft>:

/* see inner.h */
void
Zf(poly_mul_autoadj_fft)(
	fpr *restrict a, const fpr *restrict b, unsigned logn)
{
 800cb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t n, hn, u;

	n = (size_t)1 << logn;
 800cb04:	f04f 0801 	mov.w	r8, #1
 800cb08:	fa08 f802 	lsl.w	r8, r8, r2
	hn = n >> 1;
	for (u = 0; u < hn; u ++) {
 800cb0c:	ea5f 0858 	movs.w	r8, r8, lsr #1
 800cb10:	d01c      	beq.n	800cb4c <falcon_inner_poly_mul_autoadj_fft+0x4c>
 800cb12:	f108 5300 	add.w	r3, r8, #536870912	; 0x20000000
 800cb16:	3b01      	subs	r3, #1
 800cb18:	f1a0 0708 	sub.w	r7, r0, #8
 800cb1c:	f1a1 0508 	sub.w	r5, r1, #8
 800cb20:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
 800cb24:	2600      	movs	r6, #0
		a[u] = fpr_mul(a[u], b[u]);
 800cb26:	e9f7 0102 	ldrd	r0, r1, [r7, #8]!
 800cb2a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800cb2e:	f7ff fa97 	bl	800c060 <falcon_inner_fpr_mul>
 800cb32:	e9c7 0100 	strd	r0, r1, [r7]
		a[u + hn] = fpr_mul(a[u + hn], b[u]);
 800cb36:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb3a:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
 800cb3e:	f7ff fa8f 	bl	800c060 <falcon_inner_fpr_mul>
	for (u = 0; u < hn; u ++) {
 800cb42:	3601      	adds	r6, #1
 800cb44:	45b0      	cmp	r8, r6
		a[u + hn] = fpr_mul(a[u + hn], b[u]);
 800cb46:	e9c4 0100 	strd	r0, r1, [r4]
	for (u = 0; u < hn; u ++) {
 800cb4a:	d1ec      	bne.n	800cb26 <falcon_inner_poly_mul_autoadj_fft+0x26>
	}
}
 800cb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb50 <falcon_inner_poly_split_fft>:
/* see inner.h */
void
Zf(poly_split_fft)(
	fpr *restrict f0, fpr *restrict f1,
	const fpr *restrict f, unsigned logn)
{
 800cb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * bit-reversal function over the ring degree. This changes
	 * indexes with regards to the Falcon specification.
	 */
	size_t n, hn, qn, u;

	n = (size_t)1 << logn;
 800cb54:	2401      	movs	r4, #1
 800cb56:	fa04 f303 	lsl.w	r3, r4, r3
	hn = n >> 1;
 800cb5a:	fa23 f404 	lsr.w	r4, r3, r4
	 * one complex value (the other one is the implicit conjugate),
	 * so we add the two lines below because the loop will be
	 * skipped.
	 */
	f0[0] = f[0];
	f1[0] = f[hn];
 800cb5e:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
 800cb62:	e9d5 8900 	ldrd	r8, r9, [r5]
	f0[0] = f[0];
 800cb66:	e9d2 6700 	ldrd	r6, r7, [r2]
{
 800cb6a:	b08b      	sub	sp, #44	; 0x2c

	for (u = 0; u < qn; u ++) {
 800cb6c:	089b      	lsrs	r3, r3, #2
	f0[0] = f[0];
 800cb6e:	e9c0 6700 	strd	r6, r7, [r0]
	f1[0] = f[hn];
 800cb72:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800cb76:	e9c1 8900 	strd	r8, r9, [r1]
	for (u = 0; u < qn; u ++) {
 800cb7a:	f000 80d3 	beq.w	800cd24 <falcon_inner_poly_split_fft+0x1d4>
 800cb7e:	e9cd 2501 	strd	r2, r5, [sp, #4]
 800cb82:	4a6a      	ldr	r2, [pc, #424]	; (800cd2c <falcon_inner_poly_split_fft+0x1dc>)
 800cb84:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800cb88:	9203      	str	r2, [sp, #12]
 800cb8a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800cb8e:	f1a0 0408 	sub.w	r4, r0, #8
 800cb92:	9200      	str	r2, [sp, #0]
 800cb94:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800cb98:	3a08      	subs	r2, #8
 800cb9a:	3908      	subs	r1, #8
 800cb9c:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 800cba0:	9408      	str	r4, [sp, #32]
 800cba2:	9107      	str	r1, [sp, #28]
 800cba4:	9206      	str	r2, [sp, #24]
 800cba6:	9309      	str	r3, [sp, #36]	; 0x24
 800cba8:	e00b      	b.n	800cbc2 <falcon_inner_poly_split_fft+0x72>
		fpr a_re, a_im, b_re, b_im;
		fpr t_re, t_im;

		a_re = f[(u << 1) + 0];
 800cbaa:	9a01      	ldr	r2, [sp, #4]
 800cbac:	e9f2 6704 	ldrd	r6, r7, [r2, #16]!
 800cbb0:	9201      	str	r2, [sp, #4]
		a_im = f[(u << 1) + 0 + hn];
 800cbb2:	9a02      	ldr	r2, [sp, #8]
 800cbb4:	3308      	adds	r3, #8
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	e9f2 3404 	ldrd	r3, r4, [r2, #16]!
 800cbbc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cbc0:	9202      	str	r2, [sp, #8]
		b_re = f[(u << 1) + 1];
 800cbc2:	9b01      	ldr	r3, [sp, #4]
		b_im = f[(u << 1) + 1 + hn];
 800cbc4:	9902      	ldr	r1, [sp, #8]
		b_re = f[(u << 1) + 1];
 800cbc6:	e9d3 ba02 	ldrd	fp, sl, [r3, #8]
		b_im = f[(u << 1) + 1 + hn];
 800cbca:	e9d1 9802 	ldrd	r9, r8, [r1, #8]
	for (u = 0; u < qn; u ++) {
 800cbce:	9903      	ldr	r1, [sp, #12]
 800cbd0:	3110      	adds	r1, #16

		FPC_ADD(t_re, t_im, a_re, a_im, b_re, b_im);
 800cbd2:	465a      	mov	r2, fp
 800cbd4:	4653      	mov	r3, sl
	for (u = 0; u < qn; u ++) {
 800cbd6:	9103      	str	r1, [sp, #12]
		FPC_ADD(t_re, t_im, a_re, a_im, b_re, b_im);
 800cbd8:	4630      	mov	r0, r6
 800cbda:	4639      	mov	r1, r7
 800cbdc:	f7ff f988 	bl	800bef0 <falcon_inner_fpr_add>
 800cbe0:	464a      	mov	r2, r9
 800cbe2:	4643      	mov	r3, r8
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbec:	f7ff f980 	bl	800bef0 <falcon_inner_fpr_add>
	x -= (uint64_t)1 << 52;
 800cbf0:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
 800cbf4:	4686      	mov	lr, r0
	return fpr_add(x, y);
 800cbf6:	4630      	mov	r0, r6
	t = (((uint32_t)(x >> 52) & 0x7FF) + 1) >> 11;
 800cbf8:	f3c4 560a 	ubfx	r6, r4, #20, #11
 800cbfc:	3601      	adds	r6, #1
 800cbfe:	0af6      	lsrs	r6, r6, #11
	return fpr_add(x, y);
 800cc00:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
	x &= (uint64_t)t - 1;
 800cc04:	3e01      	subs	r6, #1
		f0[u] = fpr_half(t_re);
 800cc06:	f8dd a020 	ldr.w	sl, [sp, #32]
	x -= (uint64_t)1 << 52;
 800cc0a:	f5a1 1c80 	sub.w	ip, r1, #1048576	; 0x100000
	x &= (uint64_t)t - 1;
 800cc0e:	ea05 0506 	and.w	r5, r5, r6
 800cc12:	f84a 5f08 	str.w	r5, [sl, #8]!
	t = (((uint32_t)(x >> 52) & 0x7FF) + 1) >> 11;
 800cc16:	f3cc 550a 	ubfx	r5, ip, #20, #11
	return fpr_add(x, y);
 800cc1a:	4639      	mov	r1, r7
	t = (((uint32_t)(x >> 52) & 0x7FF) + 1) >> 11;
 800cc1c:	f105 0501 	add.w	r5, r5, #1
	x &= (uint64_t)t - 1;
 800cc20:	f04f 0700 	mov.w	r7, #0
 800cc24:	f147 36ff 	adc.w	r6, r7, #4294967295
	t = (((uint32_t)(x >> 52) & 0x7FF) + 1) >> 11;
 800cc28:	0aed      	lsrs	r5, r5, #11
	x &= (uint64_t)t - 1;
 800cc2a:	3d01      	subs	r5, #1
 800cc2c:	ea04 0406 	and.w	r4, r4, r6
 800cc30:	f8ca 4004 	str.w	r4, [sl, #4]
		f0[u + qn] = fpr_half(t_im);
 800cc34:	9e00      	ldr	r6, [sp, #0]
		f0[u] = fpr_half(t_re);
 800cc36:	f8cd a020 	str.w	sl, [sp, #32]
 800cc3a:	f147 34ff 	adc.w	r4, r7, #4294967295
 800cc3e:	ea0e 0505 	and.w	r5, lr, r5
 800cc42:	ea0c 0404 	and.w	r4, ip, r4
	return fpr_add(x, y);
 800cc46:	465a      	mov	r2, fp
		f0[u + qn] = fpr_half(t_im);
 800cc48:	6035      	str	r5, [r6, #0]
 800cc4a:	6074      	str	r4, [r6, #4]
 800cc4c:	f7ff f950 	bl	800bef0 <falcon_inner_fpr_add>
 800cc50:	464a      	mov	r2, r9
 800cc52:	4607      	mov	r7, r0
 800cc54:	460e      	mov	r6, r1
 800cc56:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800cc5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc5e:	f7ff f947 	bl	800bef0 <falcon_inner_fpr_add>
 800cc62:	4605      	mov	r5, r0
	x ^= (uint64_t)1 << 63;
 800cc64:	9803      	ldr	r0, [sp, #12]
 800cc66:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800cc6a:	f850 bc08 	ldr.w	fp, [r0, #-8]
 800cc6e:	f103 4800 	add.w	r8, r3, #2147483648	; 0x80000000

		FPC_SUB(t_re, t_im, a_re, a_im, b_re, b_im);
		FPC_MUL(t_re, t_im, t_re, t_im,
 800cc72:	e950 2304 	ldrd	r2, r3, [r0, #-16]
	return fpr_add(x, y);
 800cc76:	460c      	mov	r4, r1
 800cc78:	4638      	mov	r0, r7
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cc80:	f7ff f9ee 	bl	800c060 <falcon_inner_fpr_mul>
 800cc84:	4643      	mov	r3, r8
 800cc86:	4689      	mov	r9, r1
 800cc88:	4682      	mov	sl, r0
 800cc8a:	465a      	mov	r2, fp
 800cc8c:	4621      	mov	r1, r4
 800cc8e:	4628      	mov	r0, r5
 800cc90:	f7ff f9e6 	bl	800c060 <falcon_inner_fpr_mul>
 800cc94:	4602      	mov	r2, r0
 800cc96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc9a:	4650      	mov	r0, sl
 800cc9c:	4649      	mov	r1, r9
 800cc9e:	f7ff f927 	bl	800bef0 <falcon_inner_fpr_add>
 800cca2:	4643      	mov	r3, r8
 800cca4:	4686      	mov	lr, r0
 800cca6:	468c      	mov	ip, r1
 800cca8:	465a      	mov	r2, fp
 800ccaa:	4638      	mov	r0, r7
 800ccac:	4631      	mov	r1, r6
 800ccae:	4677      	mov	r7, lr
 800ccb0:	4666      	mov	r6, ip
 800ccb2:	f7ff f9d5 	bl	800c060 <falcon_inner_fpr_mul>
 800ccb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccba:	4681      	mov	r9, r0
 800ccbc:	4688      	mov	r8, r1
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	4621      	mov	r1, r4
 800ccc2:	f7ff f9cd 	bl	800c060 <falcon_inner_fpr_mul>
	x -= (uint64_t)1 << 52;
 800ccc6:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800ccca:	4602      	mov	r2, r0
 800cccc:	460b      	mov	r3, r1
 800ccce:	4648      	mov	r0, r9
 800ccd0:	4641      	mov	r1, r8
 800ccd2:	f7ff f90d 	bl	800bef0 <falcon_inner_fpr_add>
	t = (((uint32_t)(x >> 52) & 0x7FF) + 1) >> 11;
 800ccd6:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ccda:	3301      	adds	r3, #1
 800ccdc:	0adb      	lsrs	r3, r3, #11
			fpr_gm_tab[((u + hn) << 1) + 0],
			fpr_neg(fpr_gm_tab[((u + hn) << 1) + 1]));
		f1[u] = fpr_half(t_re);
 800ccde:	9c07      	ldr	r4, [sp, #28]
	x &= (uint64_t)t - 1;
 800cce0:	3b01      	subs	r3, #1
 800cce2:	ea07 0703 	and.w	r7, r7, r3
	x -= (uint64_t)1 << 52;
 800cce6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ccea:	f844 7f08 	str.w	r7, [r4, #8]!
	t = (((uint32_t)(x >> 52) & 0x7FF) + 1) >> 11;
 800ccee:	f3c1 530a 	ubfx	r3, r1, #20, #11
	x &= (uint64_t)t - 1;
 800ccf2:	f04f 0700 	mov.w	r7, #0
 800ccf6:	f147 32ff 	adc.w	r2, r7, #4294967295
	t = (((uint32_t)(x >> 52) & 0x7FF) + 1) >> 11;
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	0adb      	lsrs	r3, r3, #11
	x &= (uint64_t)t - 1;
 800ccfe:	4016      	ands	r6, r2
 800cd00:	3b01      	subs	r3, #1
 800cd02:	6066      	str	r6, [r4, #4]
 800cd04:	9407      	str	r4, [sp, #28]
		f1[u + qn] = fpr_half(t_im);
 800cd06:	9c06      	ldr	r4, [sp, #24]
 800cd08:	ea00 0003 	and.w	r0, r0, r3
 800cd0c:	f147 33ff 	adc.w	r3, r7, #4294967295
 800cd10:	f844 0f08 	str.w	r0, [r4, #8]!
 800cd14:	4019      	ands	r1, r3
	for (u = 0; u < qn; u ++) {
 800cd16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd18:	9b00      	ldr	r3, [sp, #0]
		f1[u + qn] = fpr_half(t_im);
 800cd1a:	9406      	str	r4, [sp, #24]
	for (u = 0; u < qn; u ++) {
 800cd1c:	4283      	cmp	r3, r0
		f1[u + qn] = fpr_half(t_im);
 800cd1e:	6061      	str	r1, [r4, #4]
	for (u = 0; u < qn; u ++) {
 800cd20:	f47f af43 	bne.w	800cbaa <falcon_inner_poly_split_fft+0x5a>
	}
}
 800cd24:	b00b      	add	sp, #44	; 0x2c
 800cd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2a:	bf00      	nop
 800cd2c:	08019498 	.word	0x08019498

0800cd30 <falcon_inner_poly_merge_fft>:
/* see inner.h */
void
Zf(poly_merge_fft)(
	fpr *restrict f,
	const fpr *restrict f0, const fpr *restrict f1, unsigned logn)
{
 800cd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	qn = hn >> 1;

	/*
	 * An extra copy to handle the special case logn = 1.
	 */
	f[0] = f0[0];
 800cd34:	e9d1 6700 	ldrd	r6, r7, [r1]
	n = (size_t)1 << logn;
 800cd38:	2401      	movs	r4, #1
{
 800cd3a:	b08f      	sub	sp, #60	; 0x3c
	f[0] = f0[0];
 800cd3c:	e9c0 6700 	strd	r6, r7, [r0]
	n = (size_t)1 << logn;
 800cd40:	fa04 f303 	lsl.w	r3, r4, r3
	f[0] = f0[0];
 800cd44:	e9cd 6700 	strd	r6, r7, [sp]
	f[hn] = f1[0];
 800cd48:	e9d2 6700 	ldrd	r6, r7, [r2]
	hn = n >> 1;
 800cd4c:	fa23 f404 	lsr.w	r4, r3, r4
	f[hn] = f1[0];
 800cd50:	eb00 05c4 	add.w	r5, r0, r4, lsl #3

	for (u = 0; u < qn; u ++) {
 800cd54:	089b      	lsrs	r3, r3, #2
	f[hn] = f1[0];
 800cd56:	e9c5 6700 	strd	r6, r7, [r5]
	for (u = 0; u < qn; u ++) {
 800cd5a:	f000 808d 	beq.w	800ce78 <falcon_inner_poly_merge_fft+0x148>
 800cd5e:	4682      	mov	sl, r0
 800cd60:	4847      	ldr	r0, [pc, #284]	; (800ce80 <falcon_inner_poly_merge_fft+0x150>)
 800cd62:	910b      	str	r1, [sp, #44]	; 0x2c
 800cd64:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800cd6e:	9005      	str	r0, [sp, #20]
 800cd70:	4608      	mov	r0, r1
 800cd72:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd76:	9104      	str	r1, [sp, #16]
 800cd78:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800cd7c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800cd80:	9108      	str	r1, [sp, #32]
 800cd82:	920c      	str	r2, [sp, #48]	; 0x30
 800cd84:	930d      	str	r3, [sp, #52]	; 0x34
 800cd86:	46ab      	mov	fp, r5
 800cd88:	e008      	b.n	800cd9c <falcon_inner_poly_merge_fft+0x6c>
		fpr a_re, a_im, b_re, b_im;
		fpr t_re, t_im;

		a_re = f0[u];
 800cd8a:	e9f2 3402 	ldrd	r3, r4, [r2, #8]!
 800cd8e:	e9cd 3400 	strd	r3, r4, [sp]
		a_im = f0[u + qn];
		FPC_MUL(b_re, b_im, f1[u], f1[u + qn],
 800cd92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		a_re = f0[u];
 800cd94:	920b      	str	r2, [sp, #44]	; 0x2c
		FPC_MUL(b_re, b_im, f1[u], f1[u + qn],
 800cd96:	e9f3 6702 	ldrd	r6, r7, [r3, #8]!
 800cd9a:	930c      	str	r3, [sp, #48]	; 0x30
		a_im = f0[u + qn];
 800cd9c:	9a04      	ldr	r2, [sp, #16]
		FPC_MUL(b_re, b_im, f1[u], f1[u + qn],
 800cd9e:	9808      	ldr	r0, [sp, #32]
 800cda0:	9905      	ldr	r1, [sp, #20]
		a_im = f0[u + qn];
 800cda2:	e9f2 3402 	ldrd	r3, r4, [r2, #8]!
 800cda6:	e9cd 3402 	strd	r3, r4, [sp, #8]
		FPC_MUL(b_re, b_im, f1[u], f1[u + qn],
 800cdaa:	e9f0 4502 	ldrd	r4, r5, [r0, #8]!
		a_im = f0[u + qn];
 800cdae:	9204      	str	r2, [sp, #16]
		FPC_MUL(b_re, b_im, f1[u], f1[u + qn],
 800cdb0:	e9d1 2300 	ldrd	r2, r3, [r1]
 800cdb4:	e9d1 8902 	ldrd	r8, r9, [r1, #8]
	for (u = 0; u < qn; u ++) {
 800cdb8:	3110      	adds	r1, #16
		FPC_MUL(b_re, b_im, f1[u], f1[u + qn],
 800cdba:	9008      	str	r0, [sp, #32]
	for (u = 0; u < qn; u ++) {
 800cdbc:	9105      	str	r1, [sp, #20]
		FPC_MUL(b_re, b_im, f1[u], f1[u + qn],
 800cdbe:	4630      	mov	r0, r6
 800cdc0:	4639      	mov	r1, r7
 800cdc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cdc6:	f7ff f94b 	bl	800c060 <falcon_inner_fpr_mul>
 800cdca:	4642      	mov	r2, r8
 800cdcc:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 800cdd0:	464b      	mov	r3, r9
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	4629      	mov	r1, r5
 800cdd6:	f7ff f943 	bl	800c060 <falcon_inner_fpr_mul>
 800cdda:	4602      	mov	r2, r0
	return fpr_add(x, y);
 800cddc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cde0:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	; 0x24
 800cde4:	f7ff f884 	bl	800bef0 <falcon_inner_fpr_add>
 800cde8:	4642      	mov	r2, r8
 800cdea:	4686      	mov	lr, r0
 800cdec:	468c      	mov	ip, r1
 800cdee:	464b      	mov	r3, r9
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	4639      	mov	r1, r7
 800cdf4:	4666      	mov	r6, ip
 800cdf6:	4677      	mov	r7, lr
 800cdf8:	f7ff f932 	bl	800c060 <falcon_inner_fpr_mul>
 800cdfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce00:	4681      	mov	r9, r0
 800ce02:	4688      	mov	r8, r1
 800ce04:	4620      	mov	r0, r4
 800ce06:	4629      	mov	r1, r5
 800ce08:	f7ff f92a 	bl	800c060 <falcon_inner_fpr_mul>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	460b      	mov	r3, r1
 800ce10:	4648      	mov	r0, r9
 800ce12:	4641      	mov	r1, r8
 800ce14:	f7ff f86c 	bl	800bef0 <falcon_inner_fpr_add>
			fpr_gm_tab[((u + hn) << 1) + 0],
			fpr_gm_tab[((u + hn) << 1) + 1]);
		FPC_ADD(t_re, t_im, a_re, a_im, b_re, b_im);
 800ce18:	463a      	mov	r2, r7
		FPC_MUL(b_re, b_im, f1[u], f1[u + qn],
 800ce1a:	4605      	mov	r5, r0
 800ce1c:	460c      	mov	r4, r1
		FPC_ADD(t_re, t_im, a_re, a_im, b_re, b_im);
 800ce1e:	4633      	mov	r3, r6
 800ce20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce24:	f7ff f864 	bl	800bef0 <falcon_inner_fpr_add>
 800ce28:	462a      	mov	r2, r5
 800ce2a:	4681      	mov	r9, r0
 800ce2c:	4688      	mov	r8, r1
 800ce2e:	4623      	mov	r3, r4
 800ce30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce34:	f7ff f85c 	bl	800bef0 <falcon_inner_fpr_add>
	for (u = 0; u < qn; u ++) {
 800ce38:	f10a 0a10 	add.w	sl, sl, #16
 800ce3c:	f10b 0b10 	add.w	fp, fp, #16
 800ce40:	463a      	mov	r2, r7
 800ce42:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
		f[(u << 1) + 0] = t_re;
 800ce46:	e94a 9804 	strd	r9, r8, [sl, #-16]
		f[(u << 1) + 0 + hn] = t_im;
 800ce4a:	e94b 0104 	strd	r0, r1, [fp, #-16]
 800ce4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce52:	f7ff f84d 	bl	800bef0 <falcon_inner_fpr_add>
 800ce56:	462a      	mov	r2, r5
 800ce58:	4607      	mov	r7, r0
 800ce5a:	460e      	mov	r6, r1
 800ce5c:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800ce60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce64:	f7ff f844 	bl	800bef0 <falcon_inner_fpr_add>
	for (u = 0; u < qn; u ++) {
 800ce68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce6c:	429a      	cmp	r2, r3
		FPC_SUB(t_re, t_im, a_re, a_im, b_re, b_im);
		f[(u << 1) + 1] = t_re;
 800ce6e:	e94a 7602 	strd	r7, r6, [sl, #-8]
		f[(u << 1) + 1 + hn] = t_im;
 800ce72:	e94b 0102 	strd	r0, r1, [fp, #-8]
	for (u = 0; u < qn; u ++) {
 800ce76:	d188      	bne.n	800cd8a <falcon_inner_poly_merge_fft+0x5a>
	}
}
 800ce78:	b00f      	add	sp, #60	; 0x3c
 800ce7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce7e:	bf00      	nop
 800ce80:	08019498 	.word	0x08019498
	...

0800ce90 <poly_big_to_fp>:
{
 800ce90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce94:	b089      	sub	sp, #36	; 0x24
 800ce96:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800ce98:	9102      	str	r1, [sp, #8]
	n = MKN(logn);
 800ce9a:	2101      	movs	r1, #1
 800ce9c:	40a9      	lsls	r1, r5
 800ce9e:	9105      	str	r1, [sp, #20]
	if (flen == 0) {
 800cea0:	4611      	mov	r1, r2
 800cea2:	2a00      	cmp	r2, #0
 800cea4:	d060      	beq.n	800cf68 <poly_big_to_fp+0xd8>
	for (u = 0; u < n; u ++, f += fstride) {
 800cea6:	009b      	lsls	r3, r3, #2
		neg = -(f[flen - 1] >> 30);
 800cea8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ceac:	3a01      	subs	r2, #1
	for (u = 0; u < n; u ++, f += fstride) {
 800ceae:	9307      	str	r3, [sp, #28]
 800ceb0:	f1a0 0308 	sub.w	r3, r0, #8
 800ceb4:	9304      	str	r3, [sp, #16]
		neg = -(f[flen - 1] >> 30);
 800ceb6:	0093      	lsls	r3, r2, #2
 800ceb8:	9306      	str	r3, [sp, #24]
 800ceba:	9b02      	ldr	r3, [sp, #8]
 800cebc:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 800cec0:	f1a3 0904 	sub.w	r9, r3, #4
	for (u = 0; u < n; u ++, f += fstride) {
 800cec4:	2300      	movs	r3, #0
 800cec6:	9303      	str	r3, [sp, #12]
		for (v = 0; v < flen; v ++, fsc = fpr_mul(fsc, fpr_ptwo31)) {
 800cec8:	f8cd b004 	str.w	fp, [sp, #4]
		neg = -(f[flen - 1] >> 30);
 800cecc:	9b02      	ldr	r3, [sp, #8]
 800cece:	9a06      	ldr	r2, [sp, #24]
		fsc = fpr_one;
 800ced0:	4d29      	ldr	r5, [pc, #164]	; (800cf78 <poly_big_to_fp+0xe8>)
		neg = -(f[flen - 1] >> 30);
 800ced2:	58d7      	ldr	r7, [r2, r3]
 800ced4:	0fbf      	lsrs	r7, r7, #30
 800ced6:	427f      	negs	r7, r7
		xm = neg >> 1;
 800ced8:	ea4f 0857 	mov.w	r8, r7, lsr #1
		cc = neg & 1;
 800cedc:	f007 0401 	and.w	r4, r7, #1
		fsc = fpr_one;
 800cee0:	2600      	movs	r6, #0
		x = fpr_zero;
 800cee2:	f04f 0a00 	mov.w	sl, #0
 800cee6:	f04f 0b00 	mov.w	fp, #0
			w = (f[v] ^ xm) + cc;
 800ceea:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800ceee:	ea88 0303 	eor.w	r3, r8, r3
 800cef2:	441c      	add	r4, r3
			w -= (w << 1) & neg;
 800cef4:	ea07 0344 	and.w	r3, r7, r4, lsl #1
			w &= 0x7FFFFFFF;
 800cef8:	f024 4000 	bic.w	r0, r4, #2147483648	; 0x80000000
			w -= (w << 1) & neg;
 800cefc:	1ac0      	subs	r0, r0, r3
	return fpr_scaled(i, 0);
 800cefe:	2200      	movs	r2, #0
 800cf00:	17c1      	asrs	r1, r0, #31
 800cf02:	f7fe ffad 	bl	800be60 <falcon_inner_fpr_scaled>
			x = fpr_add(x, fpr_mul(fpr_of(*(int32_t *)&w), fsc));
 800cf06:	4632      	mov	r2, r6
 800cf08:	462b      	mov	r3, r5
 800cf0a:	f7ff f8a9 	bl	800c060 <falcon_inner_fpr_mul>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	460b      	mov	r3, r1
 800cf12:	4650      	mov	r0, sl
 800cf14:	4659      	mov	r1, fp
 800cf16:	f7fe ffeb 	bl	800bef0 <falcon_inner_fpr_add>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	460b      	mov	r3, r1
		for (v = 0; v < flen; v ++, fsc = fpr_mul(fsc, fpr_ptwo31)) {
 800cf1e:	4630      	mov	r0, r6
 800cf20:	4629      	mov	r1, r5
			x = fpr_add(x, fpr_mul(fpr_of(*(int32_t *)&w), fsc));
 800cf22:	4692      	mov	sl, r2
 800cf24:	469b      	mov	fp, r3
		for (v = 0; v < flen; v ++, fsc = fpr_mul(fsc, fpr_ptwo31)) {
 800cf26:	2200      	movs	r2, #0
 800cf28:	4b14      	ldr	r3, [pc, #80]	; (800cf7c <poly_big_to_fp+0xec>)
 800cf2a:	f7ff f899 	bl	800c060 <falcon_inner_fpr_mul>
 800cf2e:	9b01      	ldr	r3, [sp, #4]
 800cf30:	4599      	cmp	r9, r3
			cc = w >> 31;
 800cf32:	ea4f 74d4 	mov.w	r4, r4, lsr #31
		for (v = 0; v < flen; v ++, fsc = fpr_mul(fsc, fpr_ptwo31)) {
 800cf36:	4606      	mov	r6, r0
 800cf38:	460d      	mov	r5, r1
 800cf3a:	d1d6      	bne.n	800ceea <poly_big_to_fp+0x5a>
		d[u] = x;
 800cf3c:	9b04      	ldr	r3, [sp, #16]
	for (u = 0; u < n; u ++, f += fstride) {
 800cf3e:	9a02      	ldr	r2, [sp, #8]
 800cf40:	9907      	ldr	r1, [sp, #28]
		d[u] = x;
 800cf42:	e9e3 ab02 	strd	sl, fp, [r3, #8]!
	for (u = 0; u < n; u ++, f += fstride) {
 800cf46:	440a      	add	r2, r1
		d[u] = x;
 800cf48:	9304      	str	r3, [sp, #16]
	for (u = 0; u < n; u ++, f += fstride) {
 800cf4a:	4449      	add	r1, r9
 800cf4c:	9b03      	ldr	r3, [sp, #12]
 800cf4e:	9101      	str	r1, [sp, #4]
 800cf50:	9905      	ldr	r1, [sp, #20]
 800cf52:	9202      	str	r2, [sp, #8]
 800cf54:	3301      	adds	r3, #1
 800cf56:	4299      	cmp	r1, r3
 800cf58:	9303      	str	r3, [sp, #12]
 800cf5a:	d002      	beq.n	800cf62 <poly_big_to_fp+0xd2>
 800cf5c:	f1a2 0904 	sub.w	r9, r2, #4
 800cf60:	e7b4      	b.n	800cecc <poly_big_to_fp+0x3c>
}
 800cf62:	b009      	add	sp, #36	; 0x24
 800cf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d[u] = fpr_zero;
 800cf68:	2208      	movs	r2, #8
 800cf6a:	40aa      	lsls	r2, r5
}
 800cf6c:	b009      	add	sp, #36	; 0x24
 800cf6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			d[u] = fpr_zero;
 800cf72:	f007 be3b 	b.w	8014bec <memset>
 800cf76:	bf00      	nop
 800cf78:	3ff00000 	.word	0x3ff00000
 800cf7c:	41e00000 	.word	0x41e00000

0800cf80 <falcon_inner_fpr_div>:
	__asm__ (
 800cf80:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 800cf84:	f3c1 0413 	ubfx	r4, r1, #0, #20
 800cf88:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800cf8c:	f454 1480 	orrs.w	r4, r4, #1048576	; 0x100000
 800cf90:	f455 1580 	orrs.w	r5, r5, #1048576	; 0x100000
 800cf94:	ea98 0808 	eors.w	r8, r8, r8
 800cf98:	1a86      	subs	r6, r0, r2
 800cf9a:	eb74 0705 	sbcs.w	r7, r4, r5
 800cf9e:	ea4f 0838 	mov.w	r8, r8, rrx
 800cfa2:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800cfa6:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800cfaa:	1b80      	subs	r0, r0, r6
 800cfac:	41bc      	sbcs	r4, r7
 800cfae:	1800      	adds	r0, r0, r0
 800cfb0:	4164      	adcs	r4, r4
 800cfb2:	1a86      	subs	r6, r0, r2
 800cfb4:	eb74 0705 	sbcs.w	r7, r4, r5
 800cfb8:	ea4f 0838 	mov.w	r8, r8, rrx
 800cfbc:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800cfc0:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800cfc4:	1b80      	subs	r0, r0, r6
 800cfc6:	41bc      	sbcs	r4, r7
 800cfc8:	1800      	adds	r0, r0, r0
 800cfca:	4164      	adcs	r4, r4
 800cfcc:	1a86      	subs	r6, r0, r2
 800cfce:	eb74 0705 	sbcs.w	r7, r4, r5
 800cfd2:	ea4f 0838 	mov.w	r8, r8, rrx
 800cfd6:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800cfda:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800cfde:	1b80      	subs	r0, r0, r6
 800cfe0:	41bc      	sbcs	r4, r7
 800cfe2:	1800      	adds	r0, r0, r0
 800cfe4:	4164      	adcs	r4, r4
 800cfe6:	1a86      	subs	r6, r0, r2
 800cfe8:	eb74 0705 	sbcs.w	r7, r4, r5
 800cfec:	ea4f 0838 	mov.w	r8, r8, rrx
 800cff0:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800cff4:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800cff8:	1b80      	subs	r0, r0, r6
 800cffa:	41bc      	sbcs	r4, r7
 800cffc:	1800      	adds	r0, r0, r0
 800cffe:	4164      	adcs	r4, r4
 800d000:	1a86      	subs	r6, r0, r2
 800d002:	eb74 0705 	sbcs.w	r7, r4, r5
 800d006:	ea4f 0838 	mov.w	r8, r8, rrx
 800d00a:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d00e:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d012:	1b80      	subs	r0, r0, r6
 800d014:	41bc      	sbcs	r4, r7
 800d016:	1800      	adds	r0, r0, r0
 800d018:	4164      	adcs	r4, r4
 800d01a:	1a86      	subs	r6, r0, r2
 800d01c:	eb74 0705 	sbcs.w	r7, r4, r5
 800d020:	ea4f 0838 	mov.w	r8, r8, rrx
 800d024:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d028:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d02c:	1b80      	subs	r0, r0, r6
 800d02e:	41bc      	sbcs	r4, r7
 800d030:	1800      	adds	r0, r0, r0
 800d032:	4164      	adcs	r4, r4
 800d034:	1a86      	subs	r6, r0, r2
 800d036:	eb74 0705 	sbcs.w	r7, r4, r5
 800d03a:	ea4f 0838 	mov.w	r8, r8, rrx
 800d03e:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d042:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d046:	1b80      	subs	r0, r0, r6
 800d048:	41bc      	sbcs	r4, r7
 800d04a:	1800      	adds	r0, r0, r0
 800d04c:	4164      	adcs	r4, r4
 800d04e:	1a86      	subs	r6, r0, r2
 800d050:	eb74 0705 	sbcs.w	r7, r4, r5
 800d054:	ea4f 0838 	mov.w	r8, r8, rrx
 800d058:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d05c:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d060:	1b80      	subs	r0, r0, r6
 800d062:	41bc      	sbcs	r4, r7
 800d064:	1800      	adds	r0, r0, r0
 800d066:	4164      	adcs	r4, r4
 800d068:	1a86      	subs	r6, r0, r2
 800d06a:	eb74 0705 	sbcs.w	r7, r4, r5
 800d06e:	ea4f 0838 	mov.w	r8, r8, rrx
 800d072:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d076:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d07a:	1b80      	subs	r0, r0, r6
 800d07c:	41bc      	sbcs	r4, r7
 800d07e:	1800      	adds	r0, r0, r0
 800d080:	4164      	adcs	r4, r4
 800d082:	1a86      	subs	r6, r0, r2
 800d084:	eb74 0705 	sbcs.w	r7, r4, r5
 800d088:	ea4f 0838 	mov.w	r8, r8, rrx
 800d08c:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d090:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d094:	1b80      	subs	r0, r0, r6
 800d096:	41bc      	sbcs	r4, r7
 800d098:	1800      	adds	r0, r0, r0
 800d09a:	4164      	adcs	r4, r4
 800d09c:	1a86      	subs	r6, r0, r2
 800d09e:	eb74 0705 	sbcs.w	r7, r4, r5
 800d0a2:	ea4f 0838 	mov.w	r8, r8, rrx
 800d0a6:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d0aa:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d0ae:	1b80      	subs	r0, r0, r6
 800d0b0:	41bc      	sbcs	r4, r7
 800d0b2:	1800      	adds	r0, r0, r0
 800d0b4:	4164      	adcs	r4, r4
 800d0b6:	1a86      	subs	r6, r0, r2
 800d0b8:	eb74 0705 	sbcs.w	r7, r4, r5
 800d0bc:	ea4f 0838 	mov.w	r8, r8, rrx
 800d0c0:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d0c4:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d0c8:	1b80      	subs	r0, r0, r6
 800d0ca:	41bc      	sbcs	r4, r7
 800d0cc:	1800      	adds	r0, r0, r0
 800d0ce:	4164      	adcs	r4, r4
 800d0d0:	1a86      	subs	r6, r0, r2
 800d0d2:	eb74 0705 	sbcs.w	r7, r4, r5
 800d0d6:	ea4f 0838 	mov.w	r8, r8, rrx
 800d0da:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d0de:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d0e2:	1b80      	subs	r0, r0, r6
 800d0e4:	41bc      	sbcs	r4, r7
 800d0e6:	1800      	adds	r0, r0, r0
 800d0e8:	4164      	adcs	r4, r4
 800d0ea:	1a86      	subs	r6, r0, r2
 800d0ec:	eb74 0705 	sbcs.w	r7, r4, r5
 800d0f0:	ea4f 0838 	mov.w	r8, r8, rrx
 800d0f4:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d0f8:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d0fc:	1b80      	subs	r0, r0, r6
 800d0fe:	41bc      	sbcs	r4, r7
 800d100:	1800      	adds	r0, r0, r0
 800d102:	4164      	adcs	r4, r4
 800d104:	1a86      	subs	r6, r0, r2
 800d106:	eb74 0705 	sbcs.w	r7, r4, r5
 800d10a:	ea4f 0838 	mov.w	r8, r8, rrx
 800d10e:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d112:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d116:	1b80      	subs	r0, r0, r6
 800d118:	41bc      	sbcs	r4, r7
 800d11a:	1800      	adds	r0, r0, r0
 800d11c:	4164      	adcs	r4, r4
 800d11e:	1a86      	subs	r6, r0, r2
 800d120:	eb74 0705 	sbcs.w	r7, r4, r5
 800d124:	ea4f 0838 	mov.w	r8, r8, rrx
 800d128:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d12c:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d130:	1b80      	subs	r0, r0, r6
 800d132:	41bc      	sbcs	r4, r7
 800d134:	1800      	adds	r0, r0, r0
 800d136:	4164      	adcs	r4, r4
 800d138:	1a86      	subs	r6, r0, r2
 800d13a:	eb74 0705 	sbcs.w	r7, r4, r5
 800d13e:	ea4f 0838 	mov.w	r8, r8, rrx
 800d142:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d146:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d14a:	1b80      	subs	r0, r0, r6
 800d14c:	41bc      	sbcs	r4, r7
 800d14e:	1800      	adds	r0, r0, r0
 800d150:	4164      	adcs	r4, r4
 800d152:	1a86      	subs	r6, r0, r2
 800d154:	eb74 0705 	sbcs.w	r7, r4, r5
 800d158:	ea4f 0838 	mov.w	r8, r8, rrx
 800d15c:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d160:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d164:	1b80      	subs	r0, r0, r6
 800d166:	41bc      	sbcs	r4, r7
 800d168:	1800      	adds	r0, r0, r0
 800d16a:	4164      	adcs	r4, r4
 800d16c:	1a86      	subs	r6, r0, r2
 800d16e:	eb74 0705 	sbcs.w	r7, r4, r5
 800d172:	ea4f 0838 	mov.w	r8, r8, rrx
 800d176:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d17a:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d17e:	1b80      	subs	r0, r0, r6
 800d180:	41bc      	sbcs	r4, r7
 800d182:	1800      	adds	r0, r0, r0
 800d184:	4164      	adcs	r4, r4
 800d186:	1a86      	subs	r6, r0, r2
 800d188:	eb74 0705 	sbcs.w	r7, r4, r5
 800d18c:	ea4f 0838 	mov.w	r8, r8, rrx
 800d190:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d194:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d198:	1b80      	subs	r0, r0, r6
 800d19a:	41bc      	sbcs	r4, r7
 800d19c:	1800      	adds	r0, r0, r0
 800d19e:	4164      	adcs	r4, r4
 800d1a0:	1a86      	subs	r6, r0, r2
 800d1a2:	eb74 0705 	sbcs.w	r7, r4, r5
 800d1a6:	ea4f 0838 	mov.w	r8, r8, rrx
 800d1aa:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d1ae:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d1b2:	1b80      	subs	r0, r0, r6
 800d1b4:	41bc      	sbcs	r4, r7
 800d1b6:	1800      	adds	r0, r0, r0
 800d1b8:	4164      	adcs	r4, r4
 800d1ba:	1a86      	subs	r6, r0, r2
 800d1bc:	eb74 0705 	sbcs.w	r7, r4, r5
 800d1c0:	ea4f 0838 	mov.w	r8, r8, rrx
 800d1c4:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d1c8:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d1cc:	1b80      	subs	r0, r0, r6
 800d1ce:	41bc      	sbcs	r4, r7
 800d1d0:	1800      	adds	r0, r0, r0
 800d1d2:	4164      	adcs	r4, r4
 800d1d4:	1a86      	subs	r6, r0, r2
 800d1d6:	eb74 0705 	sbcs.w	r7, r4, r5
 800d1da:	ea4f 0838 	mov.w	r8, r8, rrx
 800d1de:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d1e2:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d1e6:	1b80      	subs	r0, r0, r6
 800d1e8:	41bc      	sbcs	r4, r7
 800d1ea:	1800      	adds	r0, r0, r0
 800d1ec:	4164      	adcs	r4, r4
 800d1ee:	1a86      	subs	r6, r0, r2
 800d1f0:	eb74 0705 	sbcs.w	r7, r4, r5
 800d1f4:	ea4f 0838 	mov.w	r8, r8, rrx
 800d1f8:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d1fc:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d200:	1b80      	subs	r0, r0, r6
 800d202:	41bc      	sbcs	r4, r7
 800d204:	1800      	adds	r0, r0, r0
 800d206:	4164      	adcs	r4, r4
 800d208:	fa98 faa8 	rbit	sl, r8
 800d20c:	1a86      	subs	r6, r0, r2
 800d20e:	eb74 0705 	sbcs.w	r7, r4, r5
 800d212:	ea4f 0838 	mov.w	r8, r8, rrx
 800d216:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d21a:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d21e:	1b80      	subs	r0, r0, r6
 800d220:	41bc      	sbcs	r4, r7
 800d222:	1800      	adds	r0, r0, r0
 800d224:	4164      	adcs	r4, r4
 800d226:	1a86      	subs	r6, r0, r2
 800d228:	eb74 0705 	sbcs.w	r7, r4, r5
 800d22c:	ea4f 0838 	mov.w	r8, r8, rrx
 800d230:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d234:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d238:	1b80      	subs	r0, r0, r6
 800d23a:	41bc      	sbcs	r4, r7
 800d23c:	1800      	adds	r0, r0, r0
 800d23e:	4164      	adcs	r4, r4
 800d240:	1a86      	subs	r6, r0, r2
 800d242:	eb74 0705 	sbcs.w	r7, r4, r5
 800d246:	ea4f 0838 	mov.w	r8, r8, rrx
 800d24a:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d24e:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d252:	1b80      	subs	r0, r0, r6
 800d254:	41bc      	sbcs	r4, r7
 800d256:	1800      	adds	r0, r0, r0
 800d258:	4164      	adcs	r4, r4
 800d25a:	1a86      	subs	r6, r0, r2
 800d25c:	eb74 0705 	sbcs.w	r7, r4, r5
 800d260:	ea4f 0838 	mov.w	r8, r8, rrx
 800d264:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d268:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d26c:	1b80      	subs	r0, r0, r6
 800d26e:	41bc      	sbcs	r4, r7
 800d270:	1800      	adds	r0, r0, r0
 800d272:	4164      	adcs	r4, r4
 800d274:	1a86      	subs	r6, r0, r2
 800d276:	eb74 0705 	sbcs.w	r7, r4, r5
 800d27a:	ea4f 0838 	mov.w	r8, r8, rrx
 800d27e:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d282:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d286:	1b80      	subs	r0, r0, r6
 800d288:	41bc      	sbcs	r4, r7
 800d28a:	1800      	adds	r0, r0, r0
 800d28c:	4164      	adcs	r4, r4
 800d28e:	1a86      	subs	r6, r0, r2
 800d290:	eb74 0705 	sbcs.w	r7, r4, r5
 800d294:	ea4f 0838 	mov.w	r8, r8, rrx
 800d298:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d29c:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d2a0:	1b80      	subs	r0, r0, r6
 800d2a2:	41bc      	sbcs	r4, r7
 800d2a4:	1800      	adds	r0, r0, r0
 800d2a6:	4164      	adcs	r4, r4
 800d2a8:	1a86      	subs	r6, r0, r2
 800d2aa:	eb74 0705 	sbcs.w	r7, r4, r5
 800d2ae:	ea4f 0838 	mov.w	r8, r8, rrx
 800d2b2:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d2b6:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d2ba:	1b80      	subs	r0, r0, r6
 800d2bc:	41bc      	sbcs	r4, r7
 800d2be:	1800      	adds	r0, r0, r0
 800d2c0:	4164      	adcs	r4, r4
 800d2c2:	1a86      	subs	r6, r0, r2
 800d2c4:	eb74 0705 	sbcs.w	r7, r4, r5
 800d2c8:	ea4f 0838 	mov.w	r8, r8, rrx
 800d2cc:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d2d0:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d2d4:	1b80      	subs	r0, r0, r6
 800d2d6:	41bc      	sbcs	r4, r7
 800d2d8:	1800      	adds	r0, r0, r0
 800d2da:	4164      	adcs	r4, r4
 800d2dc:	1a86      	subs	r6, r0, r2
 800d2de:	eb74 0705 	sbcs.w	r7, r4, r5
 800d2e2:	ea4f 0838 	mov.w	r8, r8, rrx
 800d2e6:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d2ea:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d2ee:	1b80      	subs	r0, r0, r6
 800d2f0:	41bc      	sbcs	r4, r7
 800d2f2:	1800      	adds	r0, r0, r0
 800d2f4:	4164      	adcs	r4, r4
 800d2f6:	1a86      	subs	r6, r0, r2
 800d2f8:	eb74 0705 	sbcs.w	r7, r4, r5
 800d2fc:	ea4f 0838 	mov.w	r8, r8, rrx
 800d300:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d304:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d308:	1b80      	subs	r0, r0, r6
 800d30a:	41bc      	sbcs	r4, r7
 800d30c:	1800      	adds	r0, r0, r0
 800d30e:	4164      	adcs	r4, r4
 800d310:	1a86      	subs	r6, r0, r2
 800d312:	eb74 0705 	sbcs.w	r7, r4, r5
 800d316:	ea4f 0838 	mov.w	r8, r8, rrx
 800d31a:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d31e:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d322:	1b80      	subs	r0, r0, r6
 800d324:	41bc      	sbcs	r4, r7
 800d326:	1800      	adds	r0, r0, r0
 800d328:	4164      	adcs	r4, r4
 800d32a:	1a86      	subs	r6, r0, r2
 800d32c:	eb74 0705 	sbcs.w	r7, r4, r5
 800d330:	ea4f 0838 	mov.w	r8, r8, rrx
 800d334:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d338:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d33c:	1b80      	subs	r0, r0, r6
 800d33e:	41bc      	sbcs	r4, r7
 800d340:	1800      	adds	r0, r0, r0
 800d342:	4164      	adcs	r4, r4
 800d344:	1a86      	subs	r6, r0, r2
 800d346:	eb74 0705 	sbcs.w	r7, r4, r5
 800d34a:	ea4f 0838 	mov.w	r8, r8, rrx
 800d34e:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d352:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d356:	1b80      	subs	r0, r0, r6
 800d358:	41bc      	sbcs	r4, r7
 800d35a:	1800      	adds	r0, r0, r0
 800d35c:	4164      	adcs	r4, r4
 800d35e:	1a86      	subs	r6, r0, r2
 800d360:	eb74 0705 	sbcs.w	r7, r4, r5
 800d364:	ea4f 0838 	mov.w	r8, r8, rrx
 800d368:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d36c:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d370:	1b80      	subs	r0, r0, r6
 800d372:	41bc      	sbcs	r4, r7
 800d374:	1800      	adds	r0, r0, r0
 800d376:	4164      	adcs	r4, r4
 800d378:	1a86      	subs	r6, r0, r2
 800d37a:	eb74 0705 	sbcs.w	r7, r4, r5
 800d37e:	ea4f 0838 	mov.w	r8, r8, rrx
 800d382:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d386:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d38a:	1b80      	subs	r0, r0, r6
 800d38c:	41bc      	sbcs	r4, r7
 800d38e:	1800      	adds	r0, r0, r0
 800d390:	4164      	adcs	r4, r4
 800d392:	1a86      	subs	r6, r0, r2
 800d394:	eb74 0705 	sbcs.w	r7, r4, r5
 800d398:	ea4f 0838 	mov.w	r8, r8, rrx
 800d39c:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d3a0:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d3a4:	1b80      	subs	r0, r0, r6
 800d3a6:	41bc      	sbcs	r4, r7
 800d3a8:	1800      	adds	r0, r0, r0
 800d3aa:	4164      	adcs	r4, r4
 800d3ac:	1a86      	subs	r6, r0, r2
 800d3ae:	eb74 0705 	sbcs.w	r7, r4, r5
 800d3b2:	ea4f 0838 	mov.w	r8, r8, rrx
 800d3b6:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d3ba:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d3be:	1b80      	subs	r0, r0, r6
 800d3c0:	41bc      	sbcs	r4, r7
 800d3c2:	1800      	adds	r0, r0, r0
 800d3c4:	4164      	adcs	r4, r4
 800d3c6:	1a86      	subs	r6, r0, r2
 800d3c8:	eb74 0705 	sbcs.w	r7, r4, r5
 800d3cc:	ea4f 0838 	mov.w	r8, r8, rrx
 800d3d0:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d3d4:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d3d8:	1b80      	subs	r0, r0, r6
 800d3da:	41bc      	sbcs	r4, r7
 800d3dc:	1800      	adds	r0, r0, r0
 800d3de:	4164      	adcs	r4, r4
 800d3e0:	1a86      	subs	r6, r0, r2
 800d3e2:	eb74 0705 	sbcs.w	r7, r4, r5
 800d3e6:	ea4f 0838 	mov.w	r8, r8, rrx
 800d3ea:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d3ee:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d3f2:	1b80      	subs	r0, r0, r6
 800d3f4:	41bc      	sbcs	r4, r7
 800d3f6:	1800      	adds	r0, r0, r0
 800d3f8:	4164      	adcs	r4, r4
 800d3fa:	1a86      	subs	r6, r0, r2
 800d3fc:	eb74 0705 	sbcs.w	r7, r4, r5
 800d400:	ea4f 0838 	mov.w	r8, r8, rrx
 800d404:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d408:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d40c:	1b80      	subs	r0, r0, r6
 800d40e:	41bc      	sbcs	r4, r7
 800d410:	1800      	adds	r0, r0, r0
 800d412:	4164      	adcs	r4, r4
 800d414:	1a86      	subs	r6, r0, r2
 800d416:	eb74 0705 	sbcs.w	r7, r4, r5
 800d41a:	ea4f 0838 	mov.w	r8, r8, rrx
 800d41e:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d422:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d426:	1b80      	subs	r0, r0, r6
 800d428:	41bc      	sbcs	r4, r7
 800d42a:	1800      	adds	r0, r0, r0
 800d42c:	4164      	adcs	r4, r4
 800d42e:	1a86      	subs	r6, r0, r2
 800d430:	eb74 0705 	sbcs.w	r7, r4, r5
 800d434:	ea4f 0838 	mov.w	r8, r8, rrx
 800d438:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d43c:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d440:	1b80      	subs	r0, r0, r6
 800d442:	41bc      	sbcs	r4, r7
 800d444:	1800      	adds	r0, r0, r0
 800d446:	4164      	adcs	r4, r4
 800d448:	1a86      	subs	r6, r0, r2
 800d44a:	eb74 0705 	sbcs.w	r7, r4, r5
 800d44e:	ea4f 0838 	mov.w	r8, r8, rrx
 800d452:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d456:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d45a:	1b80      	subs	r0, r0, r6
 800d45c:	41bc      	sbcs	r4, r7
 800d45e:	1800      	adds	r0, r0, r0
 800d460:	4164      	adcs	r4, r4
 800d462:	1a86      	subs	r6, r0, r2
 800d464:	eb74 0705 	sbcs.w	r7, r4, r5
 800d468:	ea4f 0838 	mov.w	r8, r8, rrx
 800d46c:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d470:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d474:	1b80      	subs	r0, r0, r6
 800d476:	41bc      	sbcs	r4, r7
 800d478:	1800      	adds	r0, r0, r0
 800d47a:	4164      	adcs	r4, r4
 800d47c:	1a86      	subs	r6, r0, r2
 800d47e:	eb74 0705 	sbcs.w	r7, r4, r5
 800d482:	ea4f 0838 	mov.w	r8, r8, rrx
 800d486:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d48a:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d48e:	1b80      	subs	r0, r0, r6
 800d490:	41bc      	sbcs	r4, r7
 800d492:	1800      	adds	r0, r0, r0
 800d494:	4164      	adcs	r4, r4
 800d496:	1a86      	subs	r6, r0, r2
 800d498:	eb74 0705 	sbcs.w	r7, r4, r5
 800d49c:	ea4f 0838 	mov.w	r8, r8, rrx
 800d4a0:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d4a4:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d4a8:	1b80      	subs	r0, r0, r6
 800d4aa:	41bc      	sbcs	r4, r7
 800d4ac:	1800      	adds	r0, r0, r0
 800d4ae:	4164      	adcs	r4, r4
 800d4b0:	1a86      	subs	r6, r0, r2
 800d4b2:	eb74 0705 	sbcs.w	r7, r4, r5
 800d4b6:	ea4f 0838 	mov.w	r8, r8, rrx
 800d4ba:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d4be:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d4c2:	1b80      	subs	r0, r0, r6
 800d4c4:	41bc      	sbcs	r4, r7
 800d4c6:	1800      	adds	r0, r0, r0
 800d4c8:	4164      	adcs	r4, r4
 800d4ca:	1a86      	subs	r6, r0, r2
 800d4cc:	eb74 0705 	sbcs.w	r7, r4, r5
 800d4d0:	ea4f 0838 	mov.w	r8, r8, rrx
 800d4d4:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d4d8:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d4dc:	1b80      	subs	r0, r0, r6
 800d4de:	41bc      	sbcs	r4, r7
 800d4e0:	1800      	adds	r0, r0, r0
 800d4e2:	4164      	adcs	r4, r4
 800d4e4:	1a86      	subs	r6, r0, r2
 800d4e6:	eb74 0705 	sbcs.w	r7, r4, r5
 800d4ea:	ea4f 0838 	mov.w	r8, r8, rrx
 800d4ee:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d4f2:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d4f6:	1b80      	subs	r0, r0, r6
 800d4f8:	41bc      	sbcs	r4, r7
 800d4fa:	1800      	adds	r0, r0, r0
 800d4fc:	4164      	adcs	r4, r4
 800d4fe:	1a86      	subs	r6, r0, r2
 800d500:	eb74 0705 	sbcs.w	r7, r4, r5
 800d504:	ea4f 0838 	mov.w	r8, r8, rrx
 800d508:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d50c:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d510:	1b80      	subs	r0, r0, r6
 800d512:	41bc      	sbcs	r4, r7
 800d514:	1800      	adds	r0, r0, r0
 800d516:	4164      	adcs	r4, r4
 800d518:	1a86      	subs	r6, r0, r2
 800d51a:	eb74 0705 	sbcs.w	r7, r4, r5
 800d51e:	ea4f 0838 	mov.w	r8, r8, rrx
 800d522:	ea12 76e8 	ands.w	r6, r2, r8, asr #31
 800d526:	ea15 77e8 	ands.w	r7, r5, r8, asr #31
 800d52a:	1b80      	subs	r0, r0, r6
 800d52c:	41bc      	sbcs	r4, r7
 800d52e:	1800      	adds	r0, r0, r0
 800d530:	4164      	adcs	r4, r4
 800d532:	3801      	subs	r0, #1
 800d534:	f174 0400 	sbcs.w	r4, r4, #0
 800d538:	ea4f 0838 	mov.w	r8, r8, rrx
 800d53c:	fa98 f8a8 	rbit	r8, r8
 800d540:	f018 0401 	ands.w	r4, r8, #1
 800d544:	ea5f 56da 	movs.w	r6, sl, lsr #23
 800d548:	4276      	negs	r6, r6
 800d54a:	ea54 0458 	orrs.w	r4, r4, r8, lsr #1
 800d54e:	ea54 74ca 	orrs.w	r4, r4, sl, lsl #31
 800d552:	ea5f 055a 	movs.w	r5, sl, lsr #1
 800d556:	ea98 0804 	eors.w	r8, r8, r4
 800d55a:	ea9a 0a05 	eors.w	sl, sl, r5
 800d55e:	ea38 0806 	bics.w	r8, r8, r6
 800d562:	ea3a 0a06 	bics.w	sl, sl, r6
 800d566:	ea94 0408 	eors.w	r4, r4, r8
 800d56a:	ea95 050a 	eors.w	r5, r5, sl
 800d56e:	0048      	lsls	r0, r1, #1
 800d570:	005a      	lsls	r2, r3, #1
 800d572:	0d40      	lsrs	r0, r0, #21
 800d574:	f200 77ff 	addw	r7, r0, #2047	; 0x7ff
 800d578:	ebb0 5052 	subs.w	r0, r0, r2, lsr #21
 800d57c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d580:	1b80      	subs	r0, r0, r6
 800d582:	43c2      	mvns	r2, r0
 800d584:	ea12 5207 	ands.w	r2, r2, r7, lsl #20
 800d588:	ea10 70e2 	ands.w	r0, r0, r2, asr #31
 800d58c:	ea14 74e2 	ands.w	r4, r4, r2, asr #31
 800d590:	ea15 75e2 	ands.w	r5, r5, r2, asr #31
 800d594:	4059      	eors	r1, r3
 800d596:	f36f 011e 	bfc	r1, #0, #31
 800d59a:	f360 511e 	bfi	r1, r0, #20, #11
 800d59e:	0026      	movs	r6, r4
 800d5a0:	08a0      	lsrs	r0, r4, #2
 800d5a2:	ea50 7085 	orrs.w	r0, r0, r5, lsl #30
 800d5a6:	eb11 0195 	adds.w	r1, r1, r5, lsr #2
 800d5aa:	f016 0607 	ands.w	r6, r6, #7
 800d5ae:	23c8      	movs	r3, #200	; 0xc8
 800d5b0:	40f3      	lsrs	r3, r6
 800d5b2:	f013 0301 	ands.w	r3, r3, #1
 800d5b6:	18c0      	adds	r0, r0, r3
 800d5b8:	f151 0100 	adcs.w	r1, r1, #0
 800d5bc:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

0800d5c0 <falcon_inner_poly_invnorm2_fft>:
{
 800d5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	n = (size_t)1 << logn;
 800d5c4:	2401      	movs	r4, #1
{
 800d5c6:	b089      	sub	sp, #36	; 0x24
	n = (size_t)1 << logn;
 800d5c8:	fa04 f303 	lsl.w	r3, r4, r3
	for (u = 0; u < hn; u ++) {
 800d5cc:	40e3      	lsrs	r3, r4
 800d5ce:	9307      	str	r3, [sp, #28]
 800d5d0:	d05b      	beq.n	800d68a <falcon_inner_poly_invnorm2_fft+0xca>
 800d5d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d5d6:	3b01      	subs	r3, #1
 800d5d8:	f1a1 0408 	sub.w	r4, r1, #8
 800d5dc:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 800d5e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d5e4:	9401      	str	r4, [sp, #4]
 800d5e6:	f1a0 0908 	sub.w	r9, r0, #8
 800d5ea:	9306      	str	r3, [sp, #24]
 800d5ec:	f1a2 0508 	sub.w	r5, r2, #8
 800d5f0:	2400      	movs	r4, #0
		b_re = b[u];
 800d5f2:	e9f5 ab02 	ldrd	sl, fp, [r5, #8]!
		a_re = a[u];
 800d5f6:	9901      	ldr	r1, [sp, #4]
		b_im = b[u + hn];
 800d5f8:	f8dd e018 	ldr.w	lr, [sp, #24]
		a_re = a[u];
 800d5fc:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
		b_re = b[u];
 800d600:	e9cd ab02 	strd	sl, fp, [sp, #8]
		b_im = b[u + hn];
 800d604:	e9fe bc02 	ldrd	fp, ip, [lr, #8]!
		a_re = a[u];
 800d608:	9101      	str	r1, [sp, #4]
	return fpr_mul(x, x);
 800d60a:	4610      	mov	r0, r2
 800d60c:	4619      	mov	r1, r3
		b_im = b[u + hn];
 800d60e:	e9cd bc04 	strd	fp, ip, [sp, #16]
 800d612:	f8cd e018 	str.w	lr, [sp, #24]
		a_im = a[u + hn];
 800d616:	e9f8 6702 	ldrd	r6, r7, [r8, #8]!
 800d61a:	f7fe fd21 	bl	800c060 <falcon_inner_fpr_mul>
 800d61e:	4632      	mov	r2, r6
 800d620:	4683      	mov	fp, r0
 800d622:	468a      	mov	sl, r1
 800d624:	463b      	mov	r3, r7
 800d626:	4630      	mov	r0, r6
 800d628:	4639      	mov	r1, r7
 800d62a:	f7fe fd19 	bl	800c060 <falcon_inner_fpr_mul>
 800d62e:	4602      	mov	r2, r0
 800d630:	460b      	mov	r3, r1
		d[u] = fpr_inv(fpr_add(
 800d632:	4658      	mov	r0, fp
 800d634:	4651      	mov	r1, sl
 800d636:	f7fe fc5b 	bl	800bef0 <falcon_inner_fpr_add>
 800d63a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d63e:	4607      	mov	r7, r0
 800d640:	460e      	mov	r6, r1
 800d642:	4610      	mov	r0, r2
 800d644:	4619      	mov	r1, r3
 800d646:	f7fe fd0b 	bl	800c060 <falcon_inner_fpr_mul>
 800d64a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d64e:	4683      	mov	fp, r0
 800d650:	468a      	mov	sl, r1
 800d652:	4610      	mov	r0, r2
 800d654:	4619      	mov	r1, r3
 800d656:	f7fe fd03 	bl	800c060 <falcon_inner_fpr_mul>
 800d65a:	4602      	mov	r2, r0
 800d65c:	460b      	mov	r3, r1
 800d65e:	4658      	mov	r0, fp
 800d660:	4651      	mov	r1, sl
 800d662:	f7fe fc45 	bl	800bef0 <falcon_inner_fpr_add>
 800d666:	4602      	mov	r2, r0
 800d668:	460b      	mov	r3, r1
 800d66a:	4638      	mov	r0, r7
 800d66c:	4631      	mov	r1, r6
 800d66e:	f7fe fc3f 	bl	800bef0 <falcon_inner_fpr_add>
 800d672:	460b      	mov	r3, r1
 800d674:	4602      	mov	r2, r0
fpr fpr_div(fpr x, fpr y);

static inline fpr
fpr_inv(fpr x)
{
	return fpr_div(4607182418800017408u, x);
 800d676:	4906      	ldr	r1, [pc, #24]	; (800d690 <falcon_inner_poly_invnorm2_fft+0xd0>)
 800d678:	2000      	movs	r0, #0
 800d67a:	f7ff fc81 	bl	800cf80 <falcon_inner_fpr_div>
	for (u = 0; u < hn; u ++) {
 800d67e:	9b07      	ldr	r3, [sp, #28]
 800d680:	3401      	adds	r4, #1
 800d682:	42a3      	cmp	r3, r4
		d[u] = fpr_inv(fpr_add(
 800d684:	e9e9 0102 	strd	r0, r1, [r9, #8]!
	for (u = 0; u < hn; u ++) {
 800d688:	d1b3      	bne.n	800d5f2 <falcon_inner_poly_invnorm2_fft+0x32>
}
 800d68a:	b009      	add	sp, #36	; 0x24
 800d68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d690:	3ff00000 	.word	0x3ff00000
	...

0800d6a0 <falcon_inner_fpr_sqrt>:
	__asm__ (
 800d6a0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 800d6a4:	0d0a      	lsrs	r2, r1, #20
 800d6a6:	f36f 511f 	bfc	r1, #20, #12
 800d6aa:	f202 73ff 	addw	r3, r2, #2047	; 0x7ff
 800d6ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d6b2:	0adb      	lsrs	r3, r3, #11
 800d6b4:	ea51 5103 	orrs.w	r1, r1, r3, lsl #20
 800d6b8:	f012 0301 	ands.w	r3, r2, #1
 800d6bc:	1ad2      	subs	r2, r2, r3
 800d6be:	425b      	negs	r3, r3
 800d6c0:	ea11 0403 	ands.w	r4, r1, r3
 800d6c4:	4003      	ands	r3, r0
 800d6c6:	18c0      	adds	r0, r0, r3
 800d6c8:	4161      	adcs	r1, r4
 800d6ca:	0249      	lsls	r1, r1, #9
 800d6cc:	ea51 51d0 	orrs.w	r1, r1, r0, lsr #23
 800d6d0:	0240      	lsls	r0, r0, #9
 800d6d2:	405b      	eors	r3, r3
 800d6d4:	406d      	eors	r5, r5
 800d6d6:	f055 5600 	orrs.w	r6, r5, #536870912	; 0x20000000
 800d6da:	1b8f      	subs	r7, r1, r6
 800d6dc:	ea4f 0333 	mov.w	r3, r3, rrx
 800d6e0:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d6e4:	1b89      	subs	r1, r1, r6
 800d6e6:	0fde      	lsrs	r6, r3, #31
 800d6e8:	ea55 7586 	orrs.w	r5, r5, r6, lsl #30
 800d6ec:	1800      	adds	r0, r0, r0
 800d6ee:	4149      	adcs	r1, r1
 800d6f0:	f055 5680 	orrs.w	r6, r5, #268435456	; 0x10000000
 800d6f4:	1b8f      	subs	r7, r1, r6
 800d6f6:	ea4f 0333 	mov.w	r3, r3, rrx
 800d6fa:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d6fe:	1b89      	subs	r1, r1, r6
 800d700:	0fde      	lsrs	r6, r3, #31
 800d702:	ea55 7546 	orrs.w	r5, r5, r6, lsl #29
 800d706:	1800      	adds	r0, r0, r0
 800d708:	4149      	adcs	r1, r1
 800d70a:	f055 6600 	orrs.w	r6, r5, #134217728	; 0x8000000
 800d70e:	1b8f      	subs	r7, r1, r6
 800d710:	ea4f 0333 	mov.w	r3, r3, rrx
 800d714:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d718:	1b89      	subs	r1, r1, r6
 800d71a:	0fde      	lsrs	r6, r3, #31
 800d71c:	ea55 7506 	orrs.w	r5, r5, r6, lsl #28
 800d720:	1800      	adds	r0, r0, r0
 800d722:	4149      	adcs	r1, r1
 800d724:	f055 6680 	orrs.w	r6, r5, #67108864	; 0x4000000
 800d728:	1b8f      	subs	r7, r1, r6
 800d72a:	ea4f 0333 	mov.w	r3, r3, rrx
 800d72e:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d732:	1b89      	subs	r1, r1, r6
 800d734:	0fde      	lsrs	r6, r3, #31
 800d736:	ea55 65c6 	orrs.w	r5, r5, r6, lsl #27
 800d73a:	1800      	adds	r0, r0, r0
 800d73c:	4149      	adcs	r1, r1
 800d73e:	f055 7600 	orrs.w	r6, r5, #33554432	; 0x2000000
 800d742:	1b8f      	subs	r7, r1, r6
 800d744:	ea4f 0333 	mov.w	r3, r3, rrx
 800d748:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d74c:	1b89      	subs	r1, r1, r6
 800d74e:	0fde      	lsrs	r6, r3, #31
 800d750:	ea55 6586 	orrs.w	r5, r5, r6, lsl #26
 800d754:	1800      	adds	r0, r0, r0
 800d756:	4149      	adcs	r1, r1
 800d758:	f055 7680 	orrs.w	r6, r5, #16777216	; 0x1000000
 800d75c:	1b8f      	subs	r7, r1, r6
 800d75e:	ea4f 0333 	mov.w	r3, r3, rrx
 800d762:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d766:	1b89      	subs	r1, r1, r6
 800d768:	0fde      	lsrs	r6, r3, #31
 800d76a:	ea55 6546 	orrs.w	r5, r5, r6, lsl #25
 800d76e:	1800      	adds	r0, r0, r0
 800d770:	4149      	adcs	r1, r1
 800d772:	f455 0600 	orrs.w	r6, r5, #8388608	; 0x800000
 800d776:	1b8f      	subs	r7, r1, r6
 800d778:	ea4f 0333 	mov.w	r3, r3, rrx
 800d77c:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d780:	1b89      	subs	r1, r1, r6
 800d782:	0fde      	lsrs	r6, r3, #31
 800d784:	ea55 6506 	orrs.w	r5, r5, r6, lsl #24
 800d788:	1800      	adds	r0, r0, r0
 800d78a:	4149      	adcs	r1, r1
 800d78c:	f455 0680 	orrs.w	r6, r5, #4194304	; 0x400000
 800d790:	1b8f      	subs	r7, r1, r6
 800d792:	ea4f 0333 	mov.w	r3, r3, rrx
 800d796:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d79a:	1b89      	subs	r1, r1, r6
 800d79c:	0fde      	lsrs	r6, r3, #31
 800d79e:	ea55 55c6 	orrs.w	r5, r5, r6, lsl #23
 800d7a2:	1800      	adds	r0, r0, r0
 800d7a4:	4149      	adcs	r1, r1
 800d7a6:	f455 1600 	orrs.w	r6, r5, #2097152	; 0x200000
 800d7aa:	1b8f      	subs	r7, r1, r6
 800d7ac:	ea4f 0333 	mov.w	r3, r3, rrx
 800d7b0:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d7b4:	1b89      	subs	r1, r1, r6
 800d7b6:	0fde      	lsrs	r6, r3, #31
 800d7b8:	ea55 5586 	orrs.w	r5, r5, r6, lsl #22
 800d7bc:	1800      	adds	r0, r0, r0
 800d7be:	4149      	adcs	r1, r1
 800d7c0:	f455 1680 	orrs.w	r6, r5, #1048576	; 0x100000
 800d7c4:	1b8f      	subs	r7, r1, r6
 800d7c6:	ea4f 0333 	mov.w	r3, r3, rrx
 800d7ca:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d7ce:	1b89      	subs	r1, r1, r6
 800d7d0:	0fde      	lsrs	r6, r3, #31
 800d7d2:	ea55 5546 	orrs.w	r5, r5, r6, lsl #21
 800d7d6:	1800      	adds	r0, r0, r0
 800d7d8:	4149      	adcs	r1, r1
 800d7da:	f455 2600 	orrs.w	r6, r5, #524288	; 0x80000
 800d7de:	1b8f      	subs	r7, r1, r6
 800d7e0:	ea4f 0333 	mov.w	r3, r3, rrx
 800d7e4:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d7e8:	1b89      	subs	r1, r1, r6
 800d7ea:	0fde      	lsrs	r6, r3, #31
 800d7ec:	ea55 5506 	orrs.w	r5, r5, r6, lsl #20
 800d7f0:	1800      	adds	r0, r0, r0
 800d7f2:	4149      	adcs	r1, r1
 800d7f4:	f455 2680 	orrs.w	r6, r5, #262144	; 0x40000
 800d7f8:	1b8f      	subs	r7, r1, r6
 800d7fa:	ea4f 0333 	mov.w	r3, r3, rrx
 800d7fe:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d802:	1b89      	subs	r1, r1, r6
 800d804:	0fde      	lsrs	r6, r3, #31
 800d806:	ea55 45c6 	orrs.w	r5, r5, r6, lsl #19
 800d80a:	1800      	adds	r0, r0, r0
 800d80c:	4149      	adcs	r1, r1
 800d80e:	f455 3600 	orrs.w	r6, r5, #131072	; 0x20000
 800d812:	1b8f      	subs	r7, r1, r6
 800d814:	ea4f 0333 	mov.w	r3, r3, rrx
 800d818:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d81c:	1b89      	subs	r1, r1, r6
 800d81e:	0fde      	lsrs	r6, r3, #31
 800d820:	ea55 4586 	orrs.w	r5, r5, r6, lsl #18
 800d824:	1800      	adds	r0, r0, r0
 800d826:	4149      	adcs	r1, r1
 800d828:	f455 3680 	orrs.w	r6, r5, #65536	; 0x10000
 800d82c:	1b8f      	subs	r7, r1, r6
 800d82e:	ea4f 0333 	mov.w	r3, r3, rrx
 800d832:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d836:	1b89      	subs	r1, r1, r6
 800d838:	0fde      	lsrs	r6, r3, #31
 800d83a:	ea55 4546 	orrs.w	r5, r5, r6, lsl #17
 800d83e:	1800      	adds	r0, r0, r0
 800d840:	4149      	adcs	r1, r1
 800d842:	f455 4600 	orrs.w	r6, r5, #32768	; 0x8000
 800d846:	1b8f      	subs	r7, r1, r6
 800d848:	ea4f 0333 	mov.w	r3, r3, rrx
 800d84c:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d850:	1b89      	subs	r1, r1, r6
 800d852:	0fde      	lsrs	r6, r3, #31
 800d854:	ea55 4506 	orrs.w	r5, r5, r6, lsl #16
 800d858:	1800      	adds	r0, r0, r0
 800d85a:	4149      	adcs	r1, r1
 800d85c:	f455 4680 	orrs.w	r6, r5, #16384	; 0x4000
 800d860:	1b8f      	subs	r7, r1, r6
 800d862:	ea4f 0333 	mov.w	r3, r3, rrx
 800d866:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d86a:	1b89      	subs	r1, r1, r6
 800d86c:	0fde      	lsrs	r6, r3, #31
 800d86e:	ea55 35c6 	orrs.w	r5, r5, r6, lsl #15
 800d872:	1800      	adds	r0, r0, r0
 800d874:	4149      	adcs	r1, r1
 800d876:	f455 5600 	orrs.w	r6, r5, #8192	; 0x2000
 800d87a:	1b8f      	subs	r7, r1, r6
 800d87c:	ea4f 0333 	mov.w	r3, r3, rrx
 800d880:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d884:	1b89      	subs	r1, r1, r6
 800d886:	0fde      	lsrs	r6, r3, #31
 800d888:	ea55 3586 	orrs.w	r5, r5, r6, lsl #14
 800d88c:	1800      	adds	r0, r0, r0
 800d88e:	4149      	adcs	r1, r1
 800d890:	f455 5680 	orrs.w	r6, r5, #4096	; 0x1000
 800d894:	1b8f      	subs	r7, r1, r6
 800d896:	ea4f 0333 	mov.w	r3, r3, rrx
 800d89a:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d89e:	1b89      	subs	r1, r1, r6
 800d8a0:	0fde      	lsrs	r6, r3, #31
 800d8a2:	ea55 3546 	orrs.w	r5, r5, r6, lsl #13
 800d8a6:	1800      	adds	r0, r0, r0
 800d8a8:	4149      	adcs	r1, r1
 800d8aa:	f455 6600 	orrs.w	r6, r5, #2048	; 0x800
 800d8ae:	1b8f      	subs	r7, r1, r6
 800d8b0:	ea4f 0333 	mov.w	r3, r3, rrx
 800d8b4:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d8b8:	1b89      	subs	r1, r1, r6
 800d8ba:	0fde      	lsrs	r6, r3, #31
 800d8bc:	ea55 3506 	orrs.w	r5, r5, r6, lsl #12
 800d8c0:	1800      	adds	r0, r0, r0
 800d8c2:	4149      	adcs	r1, r1
 800d8c4:	f455 6680 	orrs.w	r6, r5, #1024	; 0x400
 800d8c8:	1b8f      	subs	r7, r1, r6
 800d8ca:	ea4f 0333 	mov.w	r3, r3, rrx
 800d8ce:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d8d2:	1b89      	subs	r1, r1, r6
 800d8d4:	0fde      	lsrs	r6, r3, #31
 800d8d6:	ea55 25c6 	orrs.w	r5, r5, r6, lsl #11
 800d8da:	1800      	adds	r0, r0, r0
 800d8dc:	4149      	adcs	r1, r1
 800d8de:	f455 7600 	orrs.w	r6, r5, #512	; 0x200
 800d8e2:	1b8f      	subs	r7, r1, r6
 800d8e4:	ea4f 0333 	mov.w	r3, r3, rrx
 800d8e8:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d8ec:	1b89      	subs	r1, r1, r6
 800d8ee:	0fde      	lsrs	r6, r3, #31
 800d8f0:	ea55 2586 	orrs.w	r5, r5, r6, lsl #10
 800d8f4:	1800      	adds	r0, r0, r0
 800d8f6:	4149      	adcs	r1, r1
 800d8f8:	f455 7680 	orrs.w	r6, r5, #256	; 0x100
 800d8fc:	1b8f      	subs	r7, r1, r6
 800d8fe:	ea4f 0333 	mov.w	r3, r3, rrx
 800d902:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d906:	1b89      	subs	r1, r1, r6
 800d908:	0fde      	lsrs	r6, r3, #31
 800d90a:	ea55 2546 	orrs.w	r5, r5, r6, lsl #9
 800d90e:	1800      	adds	r0, r0, r0
 800d910:	4149      	adcs	r1, r1
 800d912:	f055 0680 	orrs.w	r6, r5, #128	; 0x80
 800d916:	1b8f      	subs	r7, r1, r6
 800d918:	ea4f 0333 	mov.w	r3, r3, rrx
 800d91c:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d920:	1b89      	subs	r1, r1, r6
 800d922:	0fde      	lsrs	r6, r3, #31
 800d924:	ea55 2506 	orrs.w	r5, r5, r6, lsl #8
 800d928:	1800      	adds	r0, r0, r0
 800d92a:	4149      	adcs	r1, r1
 800d92c:	f055 0640 	orrs.w	r6, r5, #64	; 0x40
 800d930:	1b8f      	subs	r7, r1, r6
 800d932:	ea4f 0333 	mov.w	r3, r3, rrx
 800d936:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d93a:	1b89      	subs	r1, r1, r6
 800d93c:	0fde      	lsrs	r6, r3, #31
 800d93e:	ea55 15c6 	orrs.w	r5, r5, r6, lsl #7
 800d942:	1800      	adds	r0, r0, r0
 800d944:	4149      	adcs	r1, r1
 800d946:	f055 0620 	orrs.w	r6, r5, #32
 800d94a:	1b8f      	subs	r7, r1, r6
 800d94c:	ea4f 0333 	mov.w	r3, r3, rrx
 800d950:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d954:	1b89      	subs	r1, r1, r6
 800d956:	0fde      	lsrs	r6, r3, #31
 800d958:	ea55 1586 	orrs.w	r5, r5, r6, lsl #6
 800d95c:	1800      	adds	r0, r0, r0
 800d95e:	4149      	adcs	r1, r1
 800d960:	f055 0610 	orrs.w	r6, r5, #16
 800d964:	1b8f      	subs	r7, r1, r6
 800d966:	ea4f 0333 	mov.w	r3, r3, rrx
 800d96a:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d96e:	1b89      	subs	r1, r1, r6
 800d970:	0fde      	lsrs	r6, r3, #31
 800d972:	ea55 1546 	orrs.w	r5, r5, r6, lsl #5
 800d976:	1800      	adds	r0, r0, r0
 800d978:	4149      	adcs	r1, r1
 800d97a:	f055 0608 	orrs.w	r6, r5, #8
 800d97e:	1b8f      	subs	r7, r1, r6
 800d980:	ea4f 0333 	mov.w	r3, r3, rrx
 800d984:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d988:	1b89      	subs	r1, r1, r6
 800d98a:	0fde      	lsrs	r6, r3, #31
 800d98c:	ea55 1506 	orrs.w	r5, r5, r6, lsl #4
 800d990:	1800      	adds	r0, r0, r0
 800d992:	4149      	adcs	r1, r1
 800d994:	f055 0604 	orrs.w	r6, r5, #4
 800d998:	1b8f      	subs	r7, r1, r6
 800d99a:	ea4f 0333 	mov.w	r3, r3, rrx
 800d99e:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d9a2:	1b89      	subs	r1, r1, r6
 800d9a4:	0fde      	lsrs	r6, r3, #31
 800d9a6:	ea55 05c6 	orrs.w	r5, r5, r6, lsl #3
 800d9aa:	1800      	adds	r0, r0, r0
 800d9ac:	4149      	adcs	r1, r1
 800d9ae:	f055 0602 	orrs.w	r6, r5, #2
 800d9b2:	1b8f      	subs	r7, r1, r6
 800d9b4:	ea4f 0333 	mov.w	r3, r3, rrx
 800d9b8:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d9bc:	1b89      	subs	r1, r1, r6
 800d9be:	0fde      	lsrs	r6, r3, #31
 800d9c0:	ea55 0586 	orrs.w	r5, r5, r6, lsl #2
 800d9c4:	1800      	adds	r0, r0, r0
 800d9c6:	4149      	adcs	r1, r1
 800d9c8:	f055 0601 	orrs.w	r6, r5, #1
 800d9cc:	1b8f      	subs	r7, r1, r6
 800d9ce:	ea4f 0333 	mov.w	r3, r3, rrx
 800d9d2:	ea16 76e3 	ands.w	r6, r6, r3, asr #31
 800d9d6:	1b89      	subs	r1, r1, r6
 800d9d8:	0fde      	lsrs	r6, r3, #31
 800d9da:	ea55 0546 	orrs.w	r5, r5, r6, lsl #1
 800d9de:	1800      	adds	r0, r0, r0
 800d9e0:	4149      	adcs	r1, r1
 800d9e2:	fa93 f3a3 	rbit	r3, r3
 800d9e6:	4064      	eors	r4, r4
 800d9e8:	4076      	eors	r6, r6
 800d9ea:	f056 4700 	orrs.w	r7, r6, #2147483648	; 0x80000000
 800d9ee:	ebb0 0807 	subs.w	r8, r0, r7
 800d9f2:	eb71 0a05 	sbcs.w	sl, r1, r5
 800d9f6:	ea4f 0434 	mov.w	r4, r4, rrx
 800d9fa:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800d9fe:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800da02:	1bc0      	subs	r0, r0, r7
 800da04:	eb71 0108 	sbcs.w	r1, r1, r8
 800da08:	0fe7      	lsrs	r7, r4, #31
 800da0a:	ea55 75d4 	orrs.w	r5, r5, r4, lsr #31
 800da0e:	1800      	adds	r0, r0, r0
 800da10:	4149      	adcs	r1, r1
 800da12:	f056 4780 	orrs.w	r7, r6, #1073741824	; 0x40000000
 800da16:	ebb0 0807 	subs.w	r8, r0, r7
 800da1a:	eb71 0a05 	sbcs.w	sl, r1, r5
 800da1e:	ea4f 0434 	mov.w	r4, r4, rrx
 800da22:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800da26:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800da2a:	1bc0      	subs	r0, r0, r7
 800da2c:	eb71 0108 	sbcs.w	r1, r1, r8
 800da30:	0fe7      	lsrs	r7, r4, #31
 800da32:	ea56 76c7 	orrs.w	r6, r6, r7, lsl #31
 800da36:	1800      	adds	r0, r0, r0
 800da38:	4149      	adcs	r1, r1
 800da3a:	f056 5700 	orrs.w	r7, r6, #536870912	; 0x20000000
 800da3e:	ebb0 0807 	subs.w	r8, r0, r7
 800da42:	eb71 0a05 	sbcs.w	sl, r1, r5
 800da46:	ea4f 0434 	mov.w	r4, r4, rrx
 800da4a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800da4e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800da52:	1bc0      	subs	r0, r0, r7
 800da54:	eb71 0108 	sbcs.w	r1, r1, r8
 800da58:	0fe7      	lsrs	r7, r4, #31
 800da5a:	ea56 7687 	orrs.w	r6, r6, r7, lsl #30
 800da5e:	1800      	adds	r0, r0, r0
 800da60:	4149      	adcs	r1, r1
 800da62:	f056 5780 	orrs.w	r7, r6, #268435456	; 0x10000000
 800da66:	ebb0 0807 	subs.w	r8, r0, r7
 800da6a:	eb71 0a05 	sbcs.w	sl, r1, r5
 800da6e:	ea4f 0434 	mov.w	r4, r4, rrx
 800da72:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800da76:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800da7a:	1bc0      	subs	r0, r0, r7
 800da7c:	eb71 0108 	sbcs.w	r1, r1, r8
 800da80:	0fe7      	lsrs	r7, r4, #31
 800da82:	ea56 7647 	orrs.w	r6, r6, r7, lsl #29
 800da86:	1800      	adds	r0, r0, r0
 800da88:	4149      	adcs	r1, r1
 800da8a:	f056 6700 	orrs.w	r7, r6, #134217728	; 0x8000000
 800da8e:	ebb0 0807 	subs.w	r8, r0, r7
 800da92:	eb71 0a05 	sbcs.w	sl, r1, r5
 800da96:	ea4f 0434 	mov.w	r4, r4, rrx
 800da9a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800da9e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800daa2:	1bc0      	subs	r0, r0, r7
 800daa4:	eb71 0108 	sbcs.w	r1, r1, r8
 800daa8:	0fe7      	lsrs	r7, r4, #31
 800daaa:	ea56 7607 	orrs.w	r6, r6, r7, lsl #28
 800daae:	1800      	adds	r0, r0, r0
 800dab0:	4149      	adcs	r1, r1
 800dab2:	f056 6780 	orrs.w	r7, r6, #67108864	; 0x4000000
 800dab6:	ebb0 0807 	subs.w	r8, r0, r7
 800daba:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dabe:	ea4f 0434 	mov.w	r4, r4, rrx
 800dac2:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800dac6:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800daca:	1bc0      	subs	r0, r0, r7
 800dacc:	eb71 0108 	sbcs.w	r1, r1, r8
 800dad0:	0fe7      	lsrs	r7, r4, #31
 800dad2:	ea56 66c7 	orrs.w	r6, r6, r7, lsl #27
 800dad6:	1800      	adds	r0, r0, r0
 800dad8:	4149      	adcs	r1, r1
 800dada:	f056 7700 	orrs.w	r7, r6, #33554432	; 0x2000000
 800dade:	ebb0 0807 	subs.w	r8, r0, r7
 800dae2:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dae6:	ea4f 0434 	mov.w	r4, r4, rrx
 800daea:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800daee:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800daf2:	1bc0      	subs	r0, r0, r7
 800daf4:	eb71 0108 	sbcs.w	r1, r1, r8
 800daf8:	0fe7      	lsrs	r7, r4, #31
 800dafa:	ea56 6687 	orrs.w	r6, r6, r7, lsl #26
 800dafe:	1800      	adds	r0, r0, r0
 800db00:	4149      	adcs	r1, r1
 800db02:	f056 7780 	orrs.w	r7, r6, #16777216	; 0x1000000
 800db06:	ebb0 0807 	subs.w	r8, r0, r7
 800db0a:	eb71 0a05 	sbcs.w	sl, r1, r5
 800db0e:	ea4f 0434 	mov.w	r4, r4, rrx
 800db12:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800db16:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800db1a:	1bc0      	subs	r0, r0, r7
 800db1c:	eb71 0108 	sbcs.w	r1, r1, r8
 800db20:	0fe7      	lsrs	r7, r4, #31
 800db22:	ea56 6647 	orrs.w	r6, r6, r7, lsl #25
 800db26:	1800      	adds	r0, r0, r0
 800db28:	4149      	adcs	r1, r1
 800db2a:	f456 0700 	orrs.w	r7, r6, #8388608	; 0x800000
 800db2e:	ebb0 0807 	subs.w	r8, r0, r7
 800db32:	eb71 0a05 	sbcs.w	sl, r1, r5
 800db36:	ea4f 0434 	mov.w	r4, r4, rrx
 800db3a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800db3e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800db42:	1bc0      	subs	r0, r0, r7
 800db44:	eb71 0108 	sbcs.w	r1, r1, r8
 800db48:	0fe7      	lsrs	r7, r4, #31
 800db4a:	ea56 6607 	orrs.w	r6, r6, r7, lsl #24
 800db4e:	1800      	adds	r0, r0, r0
 800db50:	4149      	adcs	r1, r1
 800db52:	f456 0780 	orrs.w	r7, r6, #4194304	; 0x400000
 800db56:	ebb0 0807 	subs.w	r8, r0, r7
 800db5a:	eb71 0a05 	sbcs.w	sl, r1, r5
 800db5e:	ea4f 0434 	mov.w	r4, r4, rrx
 800db62:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800db66:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800db6a:	1bc0      	subs	r0, r0, r7
 800db6c:	eb71 0108 	sbcs.w	r1, r1, r8
 800db70:	0fe7      	lsrs	r7, r4, #31
 800db72:	ea56 56c7 	orrs.w	r6, r6, r7, lsl #23
 800db76:	1800      	adds	r0, r0, r0
 800db78:	4149      	adcs	r1, r1
 800db7a:	f456 1700 	orrs.w	r7, r6, #2097152	; 0x200000
 800db7e:	ebb0 0807 	subs.w	r8, r0, r7
 800db82:	eb71 0a05 	sbcs.w	sl, r1, r5
 800db86:	ea4f 0434 	mov.w	r4, r4, rrx
 800db8a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800db8e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800db92:	1bc0      	subs	r0, r0, r7
 800db94:	eb71 0108 	sbcs.w	r1, r1, r8
 800db98:	0fe7      	lsrs	r7, r4, #31
 800db9a:	ea56 5687 	orrs.w	r6, r6, r7, lsl #22
 800db9e:	1800      	adds	r0, r0, r0
 800dba0:	4149      	adcs	r1, r1
 800dba2:	f456 1780 	orrs.w	r7, r6, #1048576	; 0x100000
 800dba6:	ebb0 0807 	subs.w	r8, r0, r7
 800dbaa:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dbae:	ea4f 0434 	mov.w	r4, r4, rrx
 800dbb2:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800dbb6:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800dbba:	1bc0      	subs	r0, r0, r7
 800dbbc:	eb71 0108 	sbcs.w	r1, r1, r8
 800dbc0:	0fe7      	lsrs	r7, r4, #31
 800dbc2:	ea56 5647 	orrs.w	r6, r6, r7, lsl #21
 800dbc6:	1800      	adds	r0, r0, r0
 800dbc8:	4149      	adcs	r1, r1
 800dbca:	f456 2700 	orrs.w	r7, r6, #524288	; 0x80000
 800dbce:	ebb0 0807 	subs.w	r8, r0, r7
 800dbd2:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dbd6:	ea4f 0434 	mov.w	r4, r4, rrx
 800dbda:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800dbde:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800dbe2:	1bc0      	subs	r0, r0, r7
 800dbe4:	eb71 0108 	sbcs.w	r1, r1, r8
 800dbe8:	0fe7      	lsrs	r7, r4, #31
 800dbea:	ea56 5607 	orrs.w	r6, r6, r7, lsl #20
 800dbee:	1800      	adds	r0, r0, r0
 800dbf0:	4149      	adcs	r1, r1
 800dbf2:	f456 2780 	orrs.w	r7, r6, #262144	; 0x40000
 800dbf6:	ebb0 0807 	subs.w	r8, r0, r7
 800dbfa:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dbfe:	ea4f 0434 	mov.w	r4, r4, rrx
 800dc02:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800dc06:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800dc0a:	1bc0      	subs	r0, r0, r7
 800dc0c:	eb71 0108 	sbcs.w	r1, r1, r8
 800dc10:	0fe7      	lsrs	r7, r4, #31
 800dc12:	ea56 46c7 	orrs.w	r6, r6, r7, lsl #19
 800dc16:	1800      	adds	r0, r0, r0
 800dc18:	4149      	adcs	r1, r1
 800dc1a:	f456 3700 	orrs.w	r7, r6, #131072	; 0x20000
 800dc1e:	ebb0 0807 	subs.w	r8, r0, r7
 800dc22:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dc26:	ea4f 0434 	mov.w	r4, r4, rrx
 800dc2a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800dc2e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800dc32:	1bc0      	subs	r0, r0, r7
 800dc34:	eb71 0108 	sbcs.w	r1, r1, r8
 800dc38:	0fe7      	lsrs	r7, r4, #31
 800dc3a:	ea56 4687 	orrs.w	r6, r6, r7, lsl #18
 800dc3e:	1800      	adds	r0, r0, r0
 800dc40:	4149      	adcs	r1, r1
 800dc42:	f456 3780 	orrs.w	r7, r6, #65536	; 0x10000
 800dc46:	ebb0 0807 	subs.w	r8, r0, r7
 800dc4a:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dc4e:	ea4f 0434 	mov.w	r4, r4, rrx
 800dc52:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800dc56:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800dc5a:	1bc0      	subs	r0, r0, r7
 800dc5c:	eb71 0108 	sbcs.w	r1, r1, r8
 800dc60:	0fe7      	lsrs	r7, r4, #31
 800dc62:	ea56 4647 	orrs.w	r6, r6, r7, lsl #17
 800dc66:	1800      	adds	r0, r0, r0
 800dc68:	4149      	adcs	r1, r1
 800dc6a:	f456 4700 	orrs.w	r7, r6, #32768	; 0x8000
 800dc6e:	ebb0 0807 	subs.w	r8, r0, r7
 800dc72:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dc76:	ea4f 0434 	mov.w	r4, r4, rrx
 800dc7a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800dc7e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800dc82:	1bc0      	subs	r0, r0, r7
 800dc84:	eb71 0108 	sbcs.w	r1, r1, r8
 800dc88:	0fe7      	lsrs	r7, r4, #31
 800dc8a:	ea56 4607 	orrs.w	r6, r6, r7, lsl #16
 800dc8e:	1800      	adds	r0, r0, r0
 800dc90:	4149      	adcs	r1, r1
 800dc92:	f456 4780 	orrs.w	r7, r6, #16384	; 0x4000
 800dc96:	ebb0 0807 	subs.w	r8, r0, r7
 800dc9a:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dc9e:	ea4f 0434 	mov.w	r4, r4, rrx
 800dca2:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800dca6:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800dcaa:	1bc0      	subs	r0, r0, r7
 800dcac:	eb71 0108 	sbcs.w	r1, r1, r8
 800dcb0:	0fe7      	lsrs	r7, r4, #31
 800dcb2:	ea56 36c7 	orrs.w	r6, r6, r7, lsl #15
 800dcb6:	1800      	adds	r0, r0, r0
 800dcb8:	4149      	adcs	r1, r1
 800dcba:	f456 5700 	orrs.w	r7, r6, #8192	; 0x2000
 800dcbe:	ebb0 0807 	subs.w	r8, r0, r7
 800dcc2:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dcc6:	ea4f 0434 	mov.w	r4, r4, rrx
 800dcca:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800dcce:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800dcd2:	1bc0      	subs	r0, r0, r7
 800dcd4:	eb71 0108 	sbcs.w	r1, r1, r8
 800dcd8:	0fe7      	lsrs	r7, r4, #31
 800dcda:	ea56 3687 	orrs.w	r6, r6, r7, lsl #14
 800dcde:	1800      	adds	r0, r0, r0
 800dce0:	4149      	adcs	r1, r1
 800dce2:	f456 5780 	orrs.w	r7, r6, #4096	; 0x1000
 800dce6:	ebb0 0807 	subs.w	r8, r0, r7
 800dcea:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dcee:	ea4f 0434 	mov.w	r4, r4, rrx
 800dcf2:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800dcf6:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800dcfa:	1bc0      	subs	r0, r0, r7
 800dcfc:	eb71 0108 	sbcs.w	r1, r1, r8
 800dd00:	0fe7      	lsrs	r7, r4, #31
 800dd02:	ea56 3647 	orrs.w	r6, r6, r7, lsl #13
 800dd06:	1800      	adds	r0, r0, r0
 800dd08:	4149      	adcs	r1, r1
 800dd0a:	f456 6700 	orrs.w	r7, r6, #2048	; 0x800
 800dd0e:	ebb0 0807 	subs.w	r8, r0, r7
 800dd12:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dd16:	ea4f 0434 	mov.w	r4, r4, rrx
 800dd1a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800dd1e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800dd22:	1bc0      	subs	r0, r0, r7
 800dd24:	eb71 0108 	sbcs.w	r1, r1, r8
 800dd28:	0fe7      	lsrs	r7, r4, #31
 800dd2a:	ea56 3607 	orrs.w	r6, r6, r7, lsl #12
 800dd2e:	1800      	adds	r0, r0, r0
 800dd30:	4149      	adcs	r1, r1
 800dd32:	f456 6780 	orrs.w	r7, r6, #1024	; 0x400
 800dd36:	ebb0 0807 	subs.w	r8, r0, r7
 800dd3a:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dd3e:	ea4f 0434 	mov.w	r4, r4, rrx
 800dd42:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800dd46:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800dd4a:	1bc0      	subs	r0, r0, r7
 800dd4c:	eb71 0108 	sbcs.w	r1, r1, r8
 800dd50:	0fe7      	lsrs	r7, r4, #31
 800dd52:	ea56 26c7 	orrs.w	r6, r6, r7, lsl #11
 800dd56:	1800      	adds	r0, r0, r0
 800dd58:	4149      	adcs	r1, r1
 800dd5a:	f456 7700 	orrs.w	r7, r6, #512	; 0x200
 800dd5e:	ebb0 0807 	subs.w	r8, r0, r7
 800dd62:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dd66:	ea4f 0434 	mov.w	r4, r4, rrx
 800dd6a:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800dd6e:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800dd72:	1bc0      	subs	r0, r0, r7
 800dd74:	eb71 0108 	sbcs.w	r1, r1, r8
 800dd78:	0fe7      	lsrs	r7, r4, #31
 800dd7a:	ea56 2687 	orrs.w	r6, r6, r7, lsl #10
 800dd7e:	1800      	adds	r0, r0, r0
 800dd80:	4149      	adcs	r1, r1
 800dd82:	f456 7780 	orrs.w	r7, r6, #256	; 0x100
 800dd86:	ebb0 0807 	subs.w	r8, r0, r7
 800dd8a:	eb71 0a05 	sbcs.w	sl, r1, r5
 800dd8e:	ea4f 0434 	mov.w	r4, r4, rrx
 800dd92:	ea17 77e4 	ands.w	r7, r7, r4, asr #31
 800dd96:	ea15 78e4 	ands.w	r8, r5, r4, asr #31
 800dd9a:	1bc0      	subs	r0, r0, r7
 800dd9c:	eb71 0108 	sbcs.w	r1, r1, r8
 800dda0:	0fe7      	lsrs	r7, r4, #31
 800dda2:	ea56 2647 	orrs.w	r6, r6, r7, lsl #9
 800dda6:	1800      	adds	r0, r0, r0
 800dda8:	4149      	adcs	r1, r1
 800ddaa:	fa94 f4a4 	rbit	r4, r4
 800ddae:	4308      	orrs	r0, r1
 800ddb0:	4241      	negs	r1, r0
 800ddb2:	4308      	orrs	r0, r1
 800ddb4:	0065      	lsls	r5, r4, #1
 800ddb6:	ea55 75d0 	orrs.w	r5, r5, r0, lsr #31
 800ddba:	f015 0507 	ands.w	r5, r5, #7
 800ddbe:	26c8      	movs	r6, #200	; 0xc8
 800ddc0:	40ee      	lsrs	r6, r5
 800ddc2:	f016 0601 	ands.w	r6, r6, #1
 800ddc6:	0860      	lsrs	r0, r4, #1
 800ddc8:	ea50 50c3 	orrs.w	r0, r0, r3, lsl #23
 800ddcc:	0a59      	lsrs	r1, r3, #9
 800ddce:	0852      	lsrs	r2, r2, #1
 800ddd0:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800ddd4:	0d0d      	lsrs	r5, r1, #20
 800ddd6:	426d      	negs	r5, r5
 800ddd8:	402a      	ands	r2, r5
 800ddda:	f362 511e 	bfi	r1, r2, #20, #11
 800ddde:	1980      	adds	r0, r0, r6
 800dde0:	f151 0100 	adcs.w	r1, r1, #0
 800dde4:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
	...

0800ddf0 <modp_R2.lto_priv.0>:
	return ((uint32_t)1 << 31) - p;
 800ddf0:	f1c0 4300 	rsb	r3, r0, #2147483648	; 0x80000000
	d = a + b - p;
 800ddf4:	ebc0 0343 	rsb	r3, r0, r3, lsl #1
	d += p & -(d >> 31);
 800ddf8:	ea00 72e3 	and.w	r2, r0, r3, asr #31
 800ddfc:	4413      	add	r3, r2
	z = (uint64_t)a * (uint64_t)b;
 800ddfe:	fba3 2c03 	umull	r2, ip, r3, r3
{
 800de02:	b500      	push	{lr}
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800de04:	fba1 3e02 	umull	r3, lr, r1, r2
 800de08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de0c:	fba3 3e00 	umull	r3, lr, r3, r0
	d = (uint32_t)((z + w) >> 31) - p;
 800de10:	189b      	adds	r3, r3, r2
 800de12:	eb4c 020e 	adc.w	r2, ip, lr
 800de16:	0fdb      	lsrs	r3, r3, #31
 800de18:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800de1c:	1a1b      	subs	r3, r3, r0
	d += p & -(d >> 31);
 800de1e:	ea00 72e3 	and.w	r2, r0, r3, asr #31
 800de22:	4413      	add	r3, r2
	z = (uint64_t)a * (uint64_t)b;
 800de24:	fba3 3c03 	umull	r3, ip, r3, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800de28:	fba1 2e03 	umull	r2, lr, r1, r3
 800de2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800de30:	fba2 2e00 	umull	r2, lr, r2, r0
	d = (uint32_t)((z + w) >> 31) - p;
 800de34:	18d2      	adds	r2, r2, r3
 800de36:	eb4c 030e 	adc.w	r3, ip, lr
 800de3a:	0fd2      	lsrs	r2, r2, #31
 800de3c:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 800de40:	1a12      	subs	r2, r2, r0
	d += p & -(d >> 31);
 800de42:	ea00 73e2 	and.w	r3, r0, r2, asr #31
 800de46:	441a      	add	r2, r3
	z = (uint64_t)a * (uint64_t)b;
 800de48:	fba2 2c02 	umull	r2, ip, r2, r2
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800de4c:	fba1 3e02 	umull	r3, lr, r1, r2
 800de50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de54:	fba3 3e00 	umull	r3, lr, r3, r0
	d = (uint32_t)((z + w) >> 31) - p;
 800de58:	189b      	adds	r3, r3, r2
 800de5a:	eb4c 020e 	adc.w	r2, ip, lr
 800de5e:	0fdb      	lsrs	r3, r3, #31
 800de60:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800de64:	1a1b      	subs	r3, r3, r0
	d += p & -(d >> 31);
 800de66:	ea00 72e3 	and.w	r2, r0, r3, asr #31
 800de6a:	4413      	add	r3, r2
	z = (uint64_t)a * (uint64_t)b;
 800de6c:	fba3 3c03 	umull	r3, ip, r3, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800de70:	fba1 2e03 	umull	r2, lr, r1, r3
 800de74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800de78:	fba2 2e00 	umull	r2, lr, r2, r0
	d = (uint32_t)((z + w) >> 31) - p;
 800de7c:	18d2      	adds	r2, r2, r3
 800de7e:	eb4c 030e 	adc.w	r3, ip, lr
 800de82:	0fd2      	lsrs	r2, r2, #31
 800de84:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 800de88:	1a12      	subs	r2, r2, r0
	d += p & -(d >> 31);
 800de8a:	ea00 73e2 	and.w	r3, r0, r2, asr #31
 800de8e:	441a      	add	r2, r3
	z = (uint64_t)a * (uint64_t)b;
 800de90:	fba2 2c02 	umull	r2, ip, r2, r2
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800de94:	fba1 3102 	umull	r3, r1, r1, r2
 800de98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de9c:	fba3 3100 	umull	r3, r1, r3, r0
	d = (uint32_t)((z + w) >> 31) - p;
 800dea0:	189b      	adds	r3, r3, r2
 800dea2:	eb4c 0201 	adc.w	r2, ip, r1
 800dea6:	0fdb      	lsrs	r3, r3, #31
 800dea8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800deac:	1a1b      	subs	r3, r3, r0
	d += p & -(d >> 31);
 800deae:	ea00 72e3 	and.w	r2, r0, r3, asr #31
 800deb2:	4413      	add	r3, r2
	z = (z + (p & -(z & 1))) >> 1;
 800deb4:	f343 0200 	sbfx	r2, r3, #0, #1
 800deb8:	4010      	ands	r0, r2
 800deba:	4418      	add	r0, r3
}
 800debc:	0840      	lsrs	r0, r0, #1
 800debe:	f85d fb04 	ldr.w	pc, [sp], #4
 800dec2:	bf00      	nop
	...

0800ded0 <modp_mkgm2>:
{
 800ded0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded4:	b085      	sub	sp, #20
 800ded6:	461e      	mov	r6, r3
 800ded8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800deda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	n = (size_t)1 << logn;
 800dedc:	2301      	movs	r3, #1
 800dede:	4093      	lsls	r3, r2
{
 800dee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
	R2 = modp_R2(p, p0i);
 800dee4:	4629      	mov	r1, r5
 800dee6:	4620      	mov	r0, r4
{
 800dee8:	4691      	mov	r9, r2
	n = (size_t)1 << logn;
 800deea:	9301      	str	r3, [sp, #4]
	R2 = modp_R2(p, p0i);
 800deec:	f7ff ff80 	bl	800ddf0 <modp_R2.lto_priv.0>
	z = (uint64_t)a * (uint64_t)b;
 800def0:	fba0 3106 	umull	r3, r1, r0, r6
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800def4:	fba5 2603 	umull	r2, r6, r5, r3
 800def8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800defc:	fba2 2604 	umull	r2, r6, r2, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800df00:	18d2      	adds	r2, r2, r3
 800df02:	eb41 0106 	adc.w	r1, r1, r6
 800df06:	0fd3      	lsrs	r3, r2, #31
 800df08:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800df0c:	1b1b      	subs	r3, r3, r4
	d += p & -(d >> 31);
 800df0e:	ea04 72e3 	and.w	r2, r4, r3, asr #31
	for (k = logn; k < 10; k ++) {
 800df12:	f1b9 0f09 	cmp.w	r9, #9
	d += p & -(d >> 31);
 800df16:	4413      	add	r3, r2
	for (k = logn; k < 10; k ++) {
 800df18:	d815      	bhi.n	800df46 <modp_mkgm2+0x76>
 800df1a:	4649      	mov	r1, r9
	z = (uint64_t)a * (uint64_t)b;
 800df1c:	fba3 2703 	umull	r2, r7, r3, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800df20:	fba2 3605 	umull	r3, r6, r2, r5
 800df24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df28:	fba3 3604 	umull	r3, r6, r3, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800df2c:	189b      	adds	r3, r3, r2
 800df2e:	eb46 0207 	adc.w	r2, r6, r7
 800df32:	0fdb      	lsrs	r3, r3, #31
 800df34:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800df38:	1b1b      	subs	r3, r3, r4
	for (k = logn; k < 10; k ++) {
 800df3a:	3101      	adds	r1, #1
	d += p & -(d >> 31);
 800df3c:	ea04 72e3 	and.w	r2, r4, r3, asr #31
	for (k = logn; k < 10; k ++) {
 800df40:	290a      	cmp	r1, #10
	d += p & -(d >> 31);
 800df42:	4413      	add	r3, r2
	for (k = logn; k < 10; k ++) {
 800df44:	d1ea      	bne.n	800df1c <modp_mkgm2+0x4c>
	return ((uint32_t)1 << 31) - p;
 800df46:	f1c4 4700 	rsb	r7, r4, #2147483648	; 0x80000000
	e = p - 2;
 800df4a:	f1a4 0a02 	sub.w	sl, r4, #2
	z = R;
 800df4e:	463a      	mov	r2, r7
	for (i = 30; i >= 0; i --) {
 800df50:	f04f 0e1e 	mov.w	lr, #30
	z = (uint64_t)a * (uint64_t)b;
 800df54:	fba2 1602 	umull	r1, r6, r2, r2
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800df58:	fba5 2c01 	umull	r2, ip, r5, r1
 800df5c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800df60:	fba2 2c04 	umull	r2, ip, r2, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800df64:	1852      	adds	r2, r2, r1
 800df66:	eb4c 0106 	adc.w	r1, ip, r6
 800df6a:	0fd2      	lsrs	r2, r2, #31
 800df6c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800df70:	1b12      	subs	r2, r2, r4
	d += p & -(d >> 31);
 800df72:	ea04 71e2 	and.w	r1, r4, r2, asr #31
 800df76:	440a      	add	r2, r1
	z = (uint64_t)a * (uint64_t)b;
 800df78:	fba2 c603 	umull	ip, r6, r2, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800df7c:	fba5 180c 	umull	r1, r8, r5, ip
 800df80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800df84:	fba1 1804 	umull	r1, r8, r1, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800df88:	eb11 010c 	adds.w	r1, r1, ip
 800df8c:	eb48 0606 	adc.w	r6, r8, r6
 800df90:	0fc9      	lsrs	r1, r1, #31
 800df92:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 800df96:	1b09      	subs	r1, r1, r4
	d += p & -(d >> 31);
 800df98:	ea04 76e1 	and.w	r6, r4, r1, asr #31
 800df9c:	4431      	add	r1, r6
		z ^= (z ^ z2) & -(uint32_t)((e >> i) & 1);
 800df9e:	fa2a f60e 	lsr.w	r6, sl, lr
 800dfa2:	4051      	eors	r1, r2
 800dfa4:	f346 0600 	sbfx	r6, r6, #0, #1
	for (i = 30; i >= 0; i --) {
 800dfa8:	f10e 3eff 	add.w	lr, lr, #4294967295
		z ^= (z ^ z2) & -(uint32_t)((e >> i) & 1);
 800dfac:	4031      	ands	r1, r6
	for (i = 30; i >= 0; i --) {
 800dfae:	f1be 3fff 	cmp.w	lr, #4294967295
		z ^= (z ^ z2) & -(uint32_t)((e >> i) & 1);
 800dfb2:	ea82 0201 	eor.w	r2, r2, r1
	for (i = 30; i >= 0; i --) {
 800dfb6:	d1cd      	bne.n	800df54 <modp_mkgm2+0x84>
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800dfb8:	fba5 1602 	umull	r1, r6, r5, r2
 800dfbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dfc0:	fba1 1604 	umull	r1, r6, r1, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800dfc4:	188a      	adds	r2, r1, r2
 800dfc6:	f146 0100 	adc.w	r1, r6, #0
 800dfca:	0fd2      	lsrs	r2, r2, #31
 800dfcc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800dfd0:	1b12      	subs	r2, r2, r4
	d += p & -(d >> 31);
 800dfd2:	ea04 71e2 	and.w	r1, r4, r2, asr #31
 800dfd6:	440a      	add	r2, r1
	z = (uint64_t)a * (uint64_t)b;
 800dfd8:	fba2 2000 	umull	r2, r0, r2, r0
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800dfdc:	fba5 1602 	umull	r1, r6, r5, r2
 800dfe0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dfe4:	fba1 1604 	umull	r1, r6, r1, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800dfe8:	188a      	adds	r2, r1, r2
 800dfea:	eb40 0006 	adc.w	r0, r0, r6
 800dfee:	0fd2      	lsrs	r2, r2, #31
 800dff0:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800dff4:	1b12      	subs	r2, r2, r4
	d += p & -(d >> 31);
 800dff6:	ea04 71e2 	and.w	r1, r4, r2, asr #31
	k = 10 - logn;
 800dffa:	2000      	movs	r0, #0
	d += p & -(d >> 31);
 800dffc:	440a      	add	r2, r1
	k = 10 - logn;
 800dffe:	f1c9 090a 	rsb	r9, r9, #10
	x1 = x2 = modp_R(p);
 800e002:	4639      	mov	r1, r7
	for (u = 0; u < n; u ++) {
 800e004:	4606      	mov	r6, r0
 800e006:	e002      	b.n	800e00e <modp_mkgm2+0x13e>
		v = REV10[u << k];
 800e008:	481b      	ldr	r0, [pc, #108]	; (800e078 <modp_mkgm2+0x1a8>)
 800e00a:	f830 001a 	ldrh.w	r0, [r0, sl, lsl #1]
		gm[v] = x1;
 800e00e:	f8dd e008 	ldr.w	lr, [sp, #8]
	z = (uint64_t)a * (uint64_t)b;
 800e012:	fba7 c803 	umull	ip, r8, r7, r3
		gm[v] = x1;
 800e016:	f84e 7020 	str.w	r7, [lr, r0, lsl #2]
		igm[v] = x2;
 800e01a:	9f03      	ldr	r7, [sp, #12]
 800e01c:	f847 1020 	str.w	r1, [r7, r0, lsl #2]
	z = (uint64_t)a * (uint64_t)b;
 800e020:	fba1 7e02 	umull	r7, lr, r1, r2
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e024:	fba5 010c 	umull	r0, r1, r5, ip
 800e028:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e02c:	fba5 1b07 	umull	r1, fp, r5, r7
 800e030:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e034:	fba0 0b04 	umull	r0, fp, r0, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800e038:	eb10 000c 	adds.w	r0, r0, ip
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e03c:	fba1 1c04 	umull	r1, ip, r1, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800e040:	eb4b 0b08 	adc.w	fp, fp, r8
 800e044:	19c9      	adds	r1, r1, r7
 800e046:	eb4c 0c0e 	adc.w	ip, ip, lr
 800e04a:	0fc9      	lsrs	r1, r1, #31
 800e04c:	0fc0      	lsrs	r0, r0, #31
 800e04e:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 800e052:	1b09      	subs	r1, r1, r4
 800e054:	ea40 004b 	orr.w	r0, r0, fp, lsl #1
 800e058:	1b00      	subs	r0, r0, r4
	d += p & -(d >> 31);
 800e05a:	ea04 77e1 	and.w	r7, r4, r1, asr #31
 800e05e:	4439      	add	r1, r7
 800e060:	ea04 77e0 	and.w	r7, r4, r0, asr #31
 800e064:	4407      	add	r7, r0
	for (u = 0; u < n; u ++) {
 800e066:	9801      	ldr	r0, [sp, #4]
 800e068:	3601      	adds	r6, #1
 800e06a:	42b0      	cmp	r0, r6
		v = REV10[u << k];
 800e06c:	fa06 fa09 	lsl.w	sl, r6, r9
	for (u = 0; u < n; u ++) {
 800e070:	d1ca      	bne.n	800e008 <modp_mkgm2+0x138>
}
 800e072:	b005      	add	sp, #20
 800e074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e078:	08018674 	.word	0x08018674
 800e07c:	00000000 	.word	0x00000000

0800e080 <zint_mod_small_unsigned.lto_priv.0>:
{
 800e080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e082:	9c05      	ldr	r4, [sp, #20]
	while (u -- > 0) {
 800e084:	b319      	cbz	r1, 800e0ce <zint_mod_small_unsigned.lto_priv.0+0x4e>
 800e086:	4686      	mov	lr, r0
 800e088:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e08c:	2000      	movs	r0, #0
	z = (uint64_t)a * (uint64_t)b;
 800e08e:	fba0 0704 	umull	r0, r7, r0, r4
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e092:	fba0 1503 	umull	r1, r5, r0, r3
 800e096:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
		w = d[u] - p;
 800e09a:	f85c 5d04 	ldr.w	r5, [ip, #-4]!
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e09e:	fba1 1602 	umull	r1, r6, r1, r2
	d = (uint32_t)((z + w) >> 31) - p;
 800e0a2:	1809      	adds	r1, r1, r0
 800e0a4:	eb46 0007 	adc.w	r0, r6, r7
		w = d[u] - p;
 800e0a8:	1aad      	subs	r5, r5, r2
	d = (uint32_t)((z + w) >> 31) - p;
 800e0aa:	0fc9      	lsrs	r1, r1, #31
 800e0ac:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
		w += p & -(w >> 31);
 800e0b0:	ea02 70e5 	and.w	r0, r2, r5, asr #31
	d = a + b - p;
 800e0b4:	1aad      	subs	r5, r5, r2
	d = (uint32_t)((z + w) >> 31) - p;
 800e0b6:	1a89      	subs	r1, r1, r2
	d = a + b - p;
 800e0b8:	4428      	add	r0, r5
 800e0ba:	4408      	add	r0, r1
	d += p & -(d >> 31);
 800e0bc:	ea02 71e1 	and.w	r1, r2, r1, asr #31
	d = a + b - p;
 800e0c0:	4408      	add	r0, r1
	d += p & -(d >> 31);
 800e0c2:	ea02 71e0 	and.w	r1, r2, r0, asr #31
	while (u -- > 0) {
 800e0c6:	45e6      	cmp	lr, ip
	d += p & -(d >> 31);
 800e0c8:	4408      	add	r0, r1
	while (u -- > 0) {
 800e0ca:	d1e0      	bne.n	800e08e <zint_mod_small_unsigned.lto_priv.0+0xe>
}
 800e0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	x = 0;
 800e0ce:	4608      	mov	r0, r1
}
 800e0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0d2:	bf00      	nop
	...

0800e0e0 <poly_sub_scaled_ntt>:
{
 800e0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e4:	b099      	sub	sp, #100	; 0x64
 800e0e6:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800e0e8:	9217      	str	r2, [sp, #92]	; 0x5c
	igm = gm + MKN(logn);
 800e0ea:	9a27      	ldr	r2, [sp, #156]	; 0x9c
{
 800e0ec:	930e      	str	r3, [sp, #56]	; 0x38
	igm = gm + MKN(logn);
 800e0ee:	2304      	movs	r3, #4
 800e0f0:	4093      	lsls	r3, r2
	tlen = flen + 1;
 800e0f2:	1c72      	adds	r2, r6, #1
{
 800e0f4:	9008      	str	r0, [sp, #32]
 800e0f6:	9115      	str	r1, [sp, #84]	; 0x54
	tlen = flen + 1;
 800e0f8:	4610      	mov	r0, r2
	fk = igm + MKN(logn);
 800e0fa:	9928      	ldr	r1, [sp, #160]	; 0xa0
	tlen = flen + 1;
 800e0fc:	920d      	str	r2, [sp, #52]	; 0x34
	t1 = fk + n * tlen;
 800e0fe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
	fk = igm + MKN(logn);
 800e100:	eb01 0443 	add.w	r4, r1, r3, lsl #1
	t1 = fk + n * tlen;
 800e104:	fa00 f202 	lsl.w	r2, r0, r2
	n = MKN(logn);
 800e108:	9927      	ldr	r1, [sp, #156]	; 0x9c
	fk = igm + MKN(logn);
 800e10a:	9416      	str	r4, [sp, #88]	; 0x58
	t1 = fk + n * tlen;
 800e10c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
	n = MKN(logn);
 800e110:	2201      	movs	r2, #1
 800e112:	408a      	lsls	r2, r1
	igm = gm + MKN(logn);
 800e114:	9928      	ldr	r1, [sp, #160]	; 0xa0
	t1 = fk + n * tlen;
 800e116:	9514      	str	r5, [sp, #80]	; 0x50
	igm = gm + MKN(logn);
 800e118:	4419      	add	r1, r3
	n = MKN(logn);
 800e11a:	9203      	str	r2, [sp, #12]
	igm = gm + MKN(logn);
 800e11c:	910c      	str	r1, [sp, #48]	; 0x30
	for (u = 0; u < tlen; u ++) {
 800e11e:	2800      	cmp	r0, #0
 800e120:	f000 8189 	beq.w	800e436 <poly_sub_scaled_ntt+0x356>
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 800e124:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
 800e128:	3a01      	subs	r2, #1
 800e12a:	0091      	lsls	r1, r2, #2
 800e12c:	9a24      	ldr	r2, [sp, #144]	; 0x90
	x --;
 800e12e:	f8df b30c 	ldr.w	fp, [pc, #780]	; 800e43c <poly_sub_scaled_ntt+0x35c>
 800e132:	9406      	str	r4, [sp, #24]
 800e134:	1f10      	subs	r0, r2, #4
 800e136:	1f1a      	subs	r2, r3, #4
 800e138:	18aa      	adds	r2, r5, r2
 800e13a:	9211      	str	r2, [sp, #68]	; 0x44
 800e13c:	4ac0      	ldr	r2, [pc, #768]	; (800e440 <poly_sub_scaled_ntt+0x360>)
 800e13e:	920b      	str	r2, [sp, #44]	; 0x2c
 800e140:	4ac0      	ldr	r2, [pc, #768]	; (800e444 <poly_sub_scaled_ntt+0x364>)
 800e142:	9209      	str	r2, [sp, #36]	; 0x24
			v < n; v ++, y += fstride, x += tlen)
 800e144:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800e146:	9013      	str	r0, [sp, #76]	; 0x4c
 800e148:	0092      	lsls	r2, r2, #2
 800e14a:	9204      	str	r2, [sp, #16]
 800e14c:	f101 0208 	add.w	r2, r1, #8
 800e150:	9207      	str	r2, [sp, #28]
	x --;
 800e152:	1e72      	subs	r2, r6, #1
 800e154:	4418      	add	r0, r3
 800e156:	9202      	str	r2, [sp, #8]
 800e158:	1f2b      	subs	r3, r5, #4
	for (u = 0; u < tlen; u ++) {
 800e15a:	2200      	movs	r2, #0
 800e15c:	465c      	mov	r4, fp
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 800e15e:	910f      	str	r1, [sp, #60]	; 0x3c
 800e160:	9010      	str	r0, [sp, #64]	; 0x40
	for (u = 0; u < tlen; u ++) {
 800e162:	920a      	str	r2, [sp, #40]	; 0x28
 800e164:	9312      	str	r3, [sp, #72]	; 0x48
 800e166:	46b3      	mov	fp, r6
	y = 2 - p;
 800e168:	f1c4 0502 	rsb	r5, r4, #2
	y *= 2 - p * y;
 800e16c:	fb04 f305 	mul.w	r3, r4, r5
 800e170:	f1c3 0302 	rsb	r3, r3, #2
 800e174:	fb03 f505 	mul.w	r5, r3, r5
	y *= 2 - p * y;
 800e178:	fb04 f305 	mul.w	r3, r4, r5
 800e17c:	f1c3 0302 	rsb	r3, r3, #2
 800e180:	fb03 f505 	mul.w	r5, r3, r5
	y *= 2 - p * y;
 800e184:	fb04 f305 	mul.w	r3, r4, r5
 800e188:	f1c3 0302 	rsb	r3, r3, #2
 800e18c:	fb03 f505 	mul.w	r5, r3, r5
	y *= 2 - p * y;
 800e190:	fb04 f305 	mul.w	r3, r4, r5
 800e194:	3b02      	subs	r3, #2
	return (uint32_t)0x7FFFFFFF & -y;
 800e196:	fb03 f505 	mul.w	r5, r3, r5
 800e19a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
		R2 = modp_R2(p, p0i);
 800e19e:	4629      	mov	r1, r5
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f7ff fe25 	bl	800ddf0 <modp_R2.lto_priv.0>
	for (i = 0; (1U << i) <= x; i ++) {
 800e1a6:	9a02      	ldr	r2, [sp, #8]
		R2 = modp_R2(p, p0i);
 800e1a8:	9005      	str	r0, [sp, #20]
	return ((uint32_t)1 << 31) - p;
 800e1aa:	f1c4 4600 	rsb	r6, r4, #2147483648	; 0x80000000
	for (i = 0; (1U << i) <= x; i ++) {
 800e1ae:	b3e2      	cbz	r2, 800e22a <poly_sub_scaled_ntt+0x14a>
	r = R2;
 800e1b0:	4603      	mov	r3, r0
	for (i = 0; (1U << i) <= x; i ++) {
 800e1b2:	f04f 0c00 	mov.w	ip, #0
 800e1b6:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
		if ((x & (1U << i)) != 0) {
 800e1ba:	f8dd a008 	ldr.w	sl, [sp, #8]
	z = (uint64_t)a * (uint64_t)b;
 800e1be:	fba3 e803 	umull	lr, r8, r3, r3
 800e1c2:	fba6 9303 	umull	r9, r3, r6, r3
		if ((x & (1U << i)) != 0) {
 800e1c6:	fa2a fb0c 	lsr.w	fp, sl, ip
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e1ca:	fbae 0205 	umull	r0, r2, lr, r5
 800e1ce:	fba9 1705 	umull	r1, r7, r9, r5
 800e1d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e1d6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	for (i = 0; (1U << i) <= x; i ++) {
 800e1da:	f10c 0c01 	add.w	ip, ip, #1
 800e1de:	f04f 0a01 	mov.w	sl, #1
		if ((x & (1U << i)) != 0) {
 800e1e2:	f01b 0f01 	tst.w	fp, #1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e1e6:	fba0 2004 	umull	r2, r0, r0, r4
 800e1ea:	fba1 7104 	umull	r7, r1, r1, r4
	for (i = 0; (1U << i) <= x; i ++) {
 800e1ee:	fa0a fa0c 	lsl.w	sl, sl, ip
		if ((x & (1U << i)) != 0) {
 800e1f2:	d00a      	beq.n	800e20a <poly_sub_scaled_ntt+0x12a>
	d = (uint32_t)((z + w) >> 31) - p;
 800e1f4:	eb17 0709 	adds.w	r7, r7, r9
 800e1f8:	eb41 0103 	adc.w	r1, r1, r3
 800e1fc:	0fff      	lsrs	r7, r7, #31
 800e1fe:	ea47 0741 	orr.w	r7, r7, r1, lsl #1
 800e202:	1b3f      	subs	r7, r7, r4
	d += p & -(d >> 31);
 800e204:	ea04 76e7 	and.w	r6, r4, r7, asr #31
 800e208:	443e      	add	r6, r7
	d = (uint32_t)((z + w) >> 31) - p;
 800e20a:	eb12 020e 	adds.w	r2, r2, lr
 800e20e:	eb48 0800 	adc.w	r8, r8, r0
 800e212:	0fd2      	lsrs	r2, r2, #31
 800e214:	ea42 0248 	orr.w	r2, r2, r8, lsl #1
 800e218:	1b12      	subs	r2, r2, r4
	d += p & -(d >> 31);
 800e21a:	ea04 73e2 	and.w	r3, r4, r2, asr #31
 800e21e:	4413      	add	r3, r2
	for (i = 0; (1U << i) <= x; i ++) {
 800e220:	9a02      	ldr	r2, [sp, #8]
 800e222:	4592      	cmp	sl, r2
 800e224:	d9c9      	bls.n	800e1ba <poly_sub_scaled_ntt+0xda>
 800e226:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 800e22a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800e22c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800e22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e230:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e232:	e9cd 4500 	strd	r4, r5, [sp]
 800e236:	f7ff fe4b 	bl	800ded0 <modp_mkgm2>
		for (v = 0; v < n; v ++) {
 800e23a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e23c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 800e23e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e240:	4680      	mov	r8, r0
			t1[v] = modp_set(k[v], p);
 800e242:	f852 1f04 	ldr.w	r1, [r2, #4]!
	w += p & -(w >> 31);
 800e246:	ea04 73e1 	and.w	r3, r4, r1, asr #31
 800e24a:	440b      	add	r3, r1
		for (v = 0; v < n; v ++) {
 800e24c:	4297      	cmp	r7, r2
			t1[v] = modp_set(k[v], p);
 800e24e:	f840 3f04 	str.w	r3, [r0, #4]!
		for (v = 0; v < n; v ++) {
 800e252:	d1f6      	bne.n	800e242 <poly_sub_scaled_ntt+0x162>
	if (logn == 0) {
 800e254:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e256:	b133      	cbz	r3, 800e266 <poly_sub_scaled_ntt+0x186>
 800e258:	e9cd 4500 	strd	r4, r5, [sp]
 800e25c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800e25e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e260:	2101      	movs	r1, #1
 800e262:	f7fb f96d 	bl	8009540 <modp_NTT2_ext.part.0>
		for (v = 0, y = f, x = fk + u;
 800e266:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800e26a:	4622      	mov	r2, r4
 800e26c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800e26e:	f8dd a018 	ldr.w	sl, [sp, #24]
 800e272:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800e276:	4634      	mov	r4, r6
 800e278:	f04f 0900 	mov.w	r9, #0
 800e27c:	465e      	mov	r6, fp
 800e27e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800e282:	e018      	b.n	800e2b6 <poly_sub_scaled_ntt+0x1d6>
	z = zint_mod_small_unsigned(d, dlen, p, p0i, R2);
 800e284:	9905      	ldr	r1, [sp, #20]
 800e286:	9100      	str	r1, [sp, #0]
 800e288:	4638      	mov	r0, r7
 800e28a:	4631      	mov	r1, r6
 800e28c:	f7ff fef8 	bl	800e080 <zint_mod_small_unsigned.lto_priv.0>
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 800e290:	f857 300b 	ldr.w	r3, [r7, fp]
 800e294:	0f9b      	lsrs	r3, r3, #30
 800e296:	425b      	negs	r3, r3
 800e298:	4023      	ands	r3, r4
	d = a - b;
 800e29a:	1ac0      	subs	r0, r0, r3
	d += p & -(d >> 31);
 800e29c:	ea02 73e0 	and.w	r3, r2, r0, asr #31
 800e2a0:	4418      	add	r0, r3
			v < n; v ++, y += fstride, x += tlen)
 800e2a2:	9b04      	ldr	r3, [sp, #16]
			*x = zint_mod_small_signed(y, flen, p, p0i, R2, Rx);
 800e2a4:	f8ca 0000 	str.w	r0, [sl]
			v < n; v ++, y += fstride, x += tlen)
 800e2a8:	441f      	add	r7, r3
 800e2aa:	9b03      	ldr	r3, [sp, #12]
 800e2ac:	f109 0901 	add.w	r9, r9, #1
 800e2b0:	454b      	cmp	r3, r9
 800e2b2:	44c2      	add	sl, r8
 800e2b4:	d004      	beq.n	800e2c0 <poly_sub_scaled_ntt+0x1e0>
	z = zint_mod_small_unsigned(d, dlen, p, p0i, R2);
 800e2b6:	462b      	mov	r3, r5
	if (dlen == 0) {
 800e2b8:	2e00      	cmp	r6, #0
 800e2ba:	d1e3      	bne.n	800e284 <poly_sub_scaled_ntt+0x1a4>
		return 0;
 800e2bc:	4630      	mov	r0, r6
 800e2be:	e7f0      	b.n	800e2a2 <poly_sub_scaled_ntt+0x1c2>
	if (logn == 0) {
 800e2c0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e2c2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800e2c6:	4614      	mov	r4, r2
 800e2c8:	46b3      	mov	fp, r6
 800e2ca:	b133      	cbz	r3, 800e2da <poly_sub_scaled_ntt+0x1fa>
 800e2cc:	e9cd 2500 	strd	r2, r5, [sp]
 800e2d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e2d2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800e2d4:	9806      	ldr	r0, [sp, #24]
 800e2d6:	f7fb f933 	bl	8009540 <modp_NTT2_ext.part.0>
		return 0;
 800e2da:	e9dd 2006 	ldrd	r2, r0, [sp, #24]
 800e2de:	9905      	ldr	r1, [sp, #20]
 800e2e0:	9e11      	ldr	r6, [sp, #68]	; 0x44
	z = (uint64_t)a * (uint64_t)b;
 800e2e2:	6813      	ldr	r3, [r2, #0]
 800e2e4:	f858 7f04 	ldr.w	r7, [r8, #4]!
 800e2e8:	fba7 7c03 	umull	r7, ip, r7, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e2ec:	fba7 3e05 	umull	r3, lr, r7, r5
 800e2f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2f4:	fba3 3e04 	umull	r3, lr, r3, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800e2f8:	19db      	adds	r3, r3, r7
 800e2fa:	eb4e 070c 	adc.w	r7, lr, ip
 800e2fe:	0fdb      	lsrs	r3, r3, #31
 800e300:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 800e304:	1b1b      	subs	r3, r3, r4
	d += p & -(d >> 31);
 800e306:	ea04 77e3 	and.w	r7, r4, r3, asr #31
 800e30a:	443b      	add	r3, r7
	z = (uint64_t)a * (uint64_t)b;
 800e30c:	fba3 3c01 	umull	r3, ip, r3, r1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e310:	fba3 7e05 	umull	r7, lr, r3, r5
 800e314:	f027 4700 	bic.w	r7, r7, #2147483648	; 0x80000000
 800e318:	fba7 7e04 	umull	r7, lr, r7, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800e31c:	18fb      	adds	r3, r7, r3
 800e31e:	eb4e 070c 	adc.w	r7, lr, ip
 800e322:	0fdb      	lsrs	r3, r3, #31
 800e324:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 800e328:	1b1b      	subs	r3, r3, r4
	d += p & -(d >> 31);
 800e32a:	ea04 77e3 	and.w	r7, r4, r3, asr #31
 800e32e:	443b      	add	r3, r7
		for (v = 0, x = fk + u; v < n; v ++, x += tlen) {
 800e330:	4546      	cmp	r6, r8
			*x = modp_montymul(
 800e332:	6013      	str	r3, [r2, #0]
		for (v = 0, x = fk + u; v < n; v ++, x += tlen) {
 800e334:	4402      	add	r2, r0
 800e336:	d1d4      	bne.n	800e2e2 <poly_sub_scaled_ntt+0x202>
	if (logn == 0) {
 800e338:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e33a:	b133      	cbz	r3, 800e34a <poly_sub_scaled_ntt+0x26a>
 800e33c:	e9cd 4500 	strd	r4, r5, [sp]
 800e340:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 800e344:	9806      	ldr	r0, [sp, #24]
 800e346:	f7fb f96b 	bl	8009620 <modp_iNTT2_ext.part.0>
	for (u = 0; u < tlen; u ++) {
 800e34a:	9b06      	ldr	r3, [sp, #24]
 800e34c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e34e:	3304      	adds	r3, #4
 800e350:	4593      	cmp	fp, r2
 800e352:	9306      	str	r3, [sp, #24]
 800e354:	f102 0301 	add.w	r3, r2, #1
 800e358:	d007      	beq.n	800e36a <poly_sub_scaled_ntt+0x28a>
		p = primes[u].p;
 800e35a:	930a      	str	r3, [sp, #40]	; 0x28
		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 800e35c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e35e:	691a      	ldr	r2, [r3, #16]
		p = primes[u].p;
 800e360:	f853 4f0c 	ldr.w	r4, [r3, #12]!
		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 800e364:	9209      	str	r2, [sp, #36]	; 0x24
		p = primes[u].p;
 800e366:	930b      	str	r3, [sp, #44]	; 0x2c
 800e368:	e6fe      	b.n	800e168 <poly_sub_scaled_ntt+0x88>
 800e36a:	465e      	mov	r6, fp
	zint_rebuild_CRT(fk, tlen, tlen, n, primes, 1, t1);
 800e36c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e36e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e370:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800e372:	9301      	str	r3, [sp, #4]
 800e374:	2301      	movs	r3, #1
 800e376:	9300      	str	r3, [sp, #0]
 800e378:	4622      	mov	r2, r4
 800e37a:	9b03      	ldr	r3, [sp, #12]
 800e37c:	4621      	mov	r1, r4
 800e37e:	4628      	mov	r0, r5
 800e380:	f003 ffee 	bl	8012360 <zint_rebuild_CRT.constprop.0>
	for (u = 0, x = F, y = fk; u < n; u ++, x += Fstride, y += tlen) {
 800e384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e386:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e388:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800e38c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800e38e:	f8cd a008 	str.w	sl, [sp, #8]
 800e392:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e396:	3b01      	subs	r3, #1
 800e398:	ea4f 0b83 	mov.w	fp, r3, lsl #2
		tw = wy >> (31 - scl);
 800e39c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e39e:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 800e3a2:	f8cd b014 	str.w	fp, [sp, #20]
 800e3a6:	f1c3 0e1f 	rsb	lr, r3, #31
 800e3aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
	ysign = -(y[ylen - 1] >> 30) >> 1;
 800e3ac:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800e3b0:	f8cd 9010 	str.w	r9, [sp, #16]
	for (u = 0, x = F, y = fk; u < n; u ++, x += Fstride, y += tlen) {
 800e3b4:	f04f 0800 	mov.w	r8, #0
 800e3b8:	eba3 0c02 	sub.w	ip, r3, r2
 800e3bc:	46a1      	mov	r9, r4
 800e3be:	46ab      	mov	fp, r5
	if (ylen == 0) {
 800e3c0:	f1b9 0f00 	cmp.w	r9, #0
 800e3c4:	d029      	beq.n	800e41a <poly_sub_scaled_ntt+0x33a>
	ysign = -(y[ylen - 1] >> 30) >> 1;
 800e3c6:	9b04      	ldr	r3, [sp, #16]
	for (u = sch; u < xlen; u ++) {
 800e3c8:	9a25      	ldr	r2, [sp, #148]	; 0x94
	ysign = -(y[ylen - 1] >> 30) >> 1;
 800e3ca:	f85b 7003 	ldr.w	r7, [fp, r3]
	for (u = sch; u < xlen; u ++) {
 800e3ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
	ysign = -(y[ylen - 1] >> 30) >> 1;
 800e3d0:	0fbf      	lsrs	r7, r7, #30
 800e3d2:	427f      	negs	r7, r7
	for (u = sch; u < xlen; u ++) {
 800e3d4:	4293      	cmp	r3, r2
	ysign = -(y[ylen - 1] >> 30) >> 1;
 800e3d6:	ea4f 0757 	mov.w	r7, r7, lsr #1
	for (u = sch; u < xlen; u ++) {
 800e3da:	d91e      	bls.n	800e41a <poly_sub_scaled_ntt+0x33a>
 800e3dc:	9b08      	ldr	r3, [sp, #32]
 800e3de:	9a05      	ldr	r2, [sp, #20]
		tw = wy >> (31 - scl);
 800e3e0:	2400      	movs	r4, #0
 800e3e2:	189d      	adds	r5, r3, r2
	tw = 0;
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	4626      	mov	r6, r4
		wy = v < ylen ? y[v] : ysign;
 800e3e8:	454c      	cmp	r4, r9
 800e3ea:	bf38      	it	cc
 800e3ec:	f85b 2024 	ldrcc.w	r2, [fp, r4, lsl #2]
		w = x[u] - wys - cc;
 800e3f0:	f855 3f04 	ldr.w	r3, [r5, #4]!
		wy = v < ylen ? y[v] : ysign;
 800e3f4:	bf28      	it	cs
 800e3f6:	463a      	movcs	r2, r7
		wys = ((wy << scl) & 0x7FFFFFFF) | tw;
 800e3f8:	fa02 f10a 	lsl.w	r1, r2, sl
 800e3fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e400:	4331      	orrs	r1, r6
		w = x[u] - wys - cc;
 800e402:	1a1b      	subs	r3, r3, r0
 800e404:	1a5b      	subs	r3, r3, r1
	for (u = sch; u < xlen; u ++) {
 800e406:	3401      	adds	r4, #1
		x[u] = w & 0x7FFFFFFF;
 800e408:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
	for (u = sch; u < xlen; u ++) {
 800e40c:	4564      	cmp	r4, ip
		x[u] = w & 0x7FFFFFFF;
 800e40e:	6029      	str	r1, [r5, #0]
		tw = wy >> (31 - scl);
 800e410:	fa22 f60e 	lsr.w	r6, r2, lr
		cc = w >> 31;
 800e414:	ea4f 70d3 	mov.w	r0, r3, lsr #31
	for (u = sch; u < xlen; u ++) {
 800e418:	d1e6      	bne.n	800e3e8 <poly_sub_scaled_ntt+0x308>
	for (u = 0, x = F, y = fk; u < n; u ++, x += Fstride, y += tlen) {
 800e41a:	9b08      	ldr	r3, [sp, #32]
 800e41c:	9a02      	ldr	r2, [sp, #8]
 800e41e:	4413      	add	r3, r2
 800e420:	9308      	str	r3, [sp, #32]
 800e422:	9b07      	ldr	r3, [sp, #28]
 800e424:	449b      	add	fp, r3
 800e426:	9b03      	ldr	r3, [sp, #12]
 800e428:	f108 0801 	add.w	r8, r8, #1
 800e42c:	4543      	cmp	r3, r8
 800e42e:	d1c7      	bne.n	800e3c0 <poly_sub_scaled_ntt+0x2e0>
}
 800e430:	b019      	add	sp, #100	; 0x64
 800e432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (u = 0; u < tlen; u ++) {
 800e436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e438:	9307      	str	r3, [sp, #28]
 800e43a:	e797      	b.n	800e36c <poly_sub_scaled_ntt+0x28c>
 800e43c:	7fffd801 	.word	0x7fffd801
 800e440:	08016dfc 	.word	0x08016dfc
 800e444:	16d6ad45 	.word	0x16d6ad45
	...

0800e450 <make_fg_step>:
{
 800e450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e454:	b09b      	sub	sp, #108	; 0x6c
 800e456:	460c      	mov	r4, r1
 800e458:	9303      	str	r3, [sp, #12]
	tlen = MAX_BL_SMALL[depth + 1];
 800e45a:	1c51      	adds	r1, r2, #1
	slen = MAX_BL_SMALL[depth];
 800e45c:	4bab      	ldr	r3, [pc, #684]	; (800e70c <make_fg_step+0x2bc>)
	igm = gm + n;
 800e45e:	9406      	str	r4, [sp, #24]
	slen = MAX_BL_SMALL[depth];
 800e460:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
	tlen = MAX_BL_SMALL[depth + 1];
 800e464:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800e468:	9213      	str	r2, [sp, #76]	; 0x4c
	n = (size_t)1 << logn;
 800e46a:	2301      	movs	r3, #1
 800e46c:	40a3      	lsls	r3, r4
 800e46e:	0092      	lsls	r2, r2, #2
 800e470:	9315      	str	r3, [sp, #84]	; 0x54
	hn = n >> 1;
 800e472:	085b      	lsrs	r3, r3, #1
	gd = fd + hn * tlen;
 800e474:	9308      	str	r3, [sp, #32]
 800e476:	fb02 f303 	mul.w	r3, r2, r3
	fs = gd + hn * tlen;
 800e47a:	eb00 0943 	add.w	r9, r0, r3, lsl #1
	gd = fd + hn * tlen;
 800e47e:	18c6      	adds	r6, r0, r3
 800e480:	9212      	str	r2, [sp, #72]	; 0x48
	gs = fs + n * slen;
 800e482:	fa0b f304 	lsl.w	r3, fp, r4
	igm = gm + n;
 800e486:	2204      	movs	r2, #4
 800e488:	fa02 f504 	lsl.w	r5, r2, r4
	gm = gs + n * slen;
 800e48c:	eb09 07c3 	add.w	r7, r9, r3, lsl #3
	fs = gd + hn * tlen;
 800e490:	4601      	mov	r1, r0
	gm = gs + n * slen;
 800e492:	463c      	mov	r4, r7
	gs = fs + n * slen;
 800e494:	eb09 0083 	add.w	r0, r9, r3, lsl #2
	gm = gs + n * slen;
 800e498:	9709      	str	r7, [sp, #36]	; 0x24
	igm = gm + n;
 800e49a:	442f      	add	r7, r5
	gs = fs + n * slen;
 800e49c:	9016      	str	r0, [sp, #88]	; 0x58
	igm = gm + n;
 800e49e:	970b      	str	r7, [sp, #44]	; 0x2c
	memmove(fs, data, 2 * n * slen * sizeof *data);
 800e4a0:	00da      	lsls	r2, r3, #3
	t1 = igm + n;
 800e4a2:	eb04 0745 	add.w	r7, r4, r5, lsl #1
	memmove(fs, data, 2 * n * slen * sizeof *data);
 800e4a6:	4648      	mov	r0, r9
	fs = gd + hn * tlen;
 800e4a8:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
	gd = fd + hn * tlen;
 800e4ac:	9619      	str	r6, [sp, #100]	; 0x64
	igm = gm + n;
 800e4ae:	9518      	str	r5, [sp, #96]	; 0x60
	memmove(fs, data, 2 * n * slen * sizeof *data);
 800e4b0:	9114      	str	r1, [sp, #80]	; 0x50
	t1 = igm + n;
 800e4b2:	9707      	str	r7, [sp, #28]
	memmove(fs, data, 2 * n * slen * sizeof *data);
 800e4b4:	f006 fb80 	bl	8014bb8 <memmove>
	for (u = 0; u < slen; u ++) {
 800e4b8:	f1bb 0f00 	cmp.w	fp, #0
 800e4bc:	f000 8130 	beq.w	800e720 <make_fg_step+0x2d0>
 800e4c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e4c2:	9b08      	ldr	r3, [sp, #32]
		for (v = 0, x = fs + u; v < n; v ++, x += slen) {
 800e4c4:	4c92      	ldr	r4, [pc, #584]	; (800e710 <make_fg_step+0x2c0>)
 800e4c6:	960a      	str	r6, [sp, #40]	; 0x28
 800e4c8:	4638      	mov	r0, r7
 800e4ca:	e9cd 9104 	strd	r9, r1, [sp, #16]
 800e4ce:	eb00 09c3 	add.w	r9, r0, r3, lsl #3
			modp_iNTT2_ext(fd + u, tlen, igm, logn - 1, p, p0i);
 800e4d2:	9b06      	ldr	r3, [sp, #24]
 800e4d4:	f1a5 0804 	sub.w	r8, r5, #4
	for (u = 0; u < slen; u ++) {
 800e4d8:	2100      	movs	r1, #0
 800e4da:	44b8      	add	r8, r7
			modp_iNTT2_ext(fd + u, tlen, igm, logn - 1, p, p0i);
 800e4dc:	3b01      	subs	r3, #1
 800e4de:	4f8d      	ldr	r7, [pc, #564]	; (800e714 <make_fg_step+0x2c4>)
 800e4e0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800e4e2:	970f      	str	r7, [sp, #60]	; 0x3c
 800e4e4:	e9cd b310 	strd	fp, r3, [sp, #64]	; 0x40
		for (v = 0, x = fs + u; v < n; v ++, x += slen) {
 800e4e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
	for (u = 0; u < slen; u ++) {
 800e4ec:	910d      	str	r1, [sp, #52]	; 0x34
		for (v = 0, x = fs + u; v < n; v ++, x += slen) {
 800e4ee:	4f8a      	ldr	r7, [pc, #552]	; (800e718 <make_fg_step+0x2c8>)
			modp_iNTT2_ext(fd + u, tlen, igm, logn - 1, p, p0i);
 800e4f0:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800e4f4:	950c      	str	r5, [sp, #48]	; 0x30
 800e4f6:	1f01      	subs	r1, r0, #4
 800e4f8:	910e      	str	r1, [sp, #56]	; 0x38
	y = 2 - p;
 800e4fa:	f1c4 0502 	rsb	r5, r4, #2
	y *= 2 - p * y;
 800e4fe:	fb04 f305 	mul.w	r3, r4, r5
 800e502:	f1c3 0302 	rsb	r3, r3, #2
 800e506:	fb03 f505 	mul.w	r5, r3, r5
	y *= 2 - p * y;
 800e50a:	fb04 f305 	mul.w	r3, r4, r5
 800e50e:	f1c3 0302 	rsb	r3, r3, #2
 800e512:	fb03 f505 	mul.w	r5, r3, r5
	y *= 2 - p * y;
 800e516:	fb04 f305 	mul.w	r3, r4, r5
 800e51a:	f1c3 0302 	rsb	r3, r3, #2
 800e51e:	fb03 f505 	mul.w	r5, r3, r5
	y *= 2 - p * y;
 800e522:	fb04 f305 	mul.w	r3, r4, r5
 800e526:	3b02      	subs	r3, #2
	return (uint32_t)0x7FFFFFFF & -y;
 800e528:	fb03 f505 	mul.w	r5, r3, r5
 800e52c:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
		R2 = modp_R2(p, p0i);
 800e530:	4629      	mov	r1, r5
 800e532:	4620      	mov	r0, r4
 800e534:	f7ff fc5c 	bl	800ddf0 <modp_R2.lto_priv.0>
		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 800e538:	463b      	mov	r3, r7
 800e53a:	9a06      	ldr	r2, [sp, #24]
 800e53c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e53e:	e9cd 4500 	strd	r4, r5, [sp]
		R2 = modp_R2(p, p0i);
 800e542:	4606      	mov	r6, r0
		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 800e544:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e546:	f7ff fcc3 	bl	800ded0 <modp_mkgm2>
		for (v = 0, x = fs + u; v < n; v ++, x += slen) {
 800e54a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e54c:	9b04      	ldr	r3, [sp, #16]
 800e54e:	4617      	mov	r7, r2
			t1[v] = *x;
 800e550:	6819      	ldr	r1, [r3, #0]
 800e552:	f842 1f04 	str.w	r1, [r2, #4]!
		for (v = 0, x = fs + u; v < n; v ++, x += slen) {
 800e556:	4590      	cmp	r8, r2
 800e558:	4453      	add	r3, sl
 800e55a:	d1f9      	bne.n	800e550 <make_fg_step+0x100>
		if (!in_ntt) {
 800e55c:	9b03      	ldr	r3, [sp, #12]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	f040 80c2 	bne.w	800e6e8 <make_fg_step+0x298>
	if (logn == 0) {
 800e564:	9b06      	ldr	r3, [sp, #24]
 800e566:	b133      	cbz	r3, 800e576 <make_fg_step+0x126>
 800e568:	e9cd 4500 	strd	r4, r5, [sp]
 800e56c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e56e:	9807      	ldr	r0, [sp, #28]
 800e570:	2101      	movs	r1, #1
 800e572:	f7fa ffe5 	bl	8009540 <modp_NTT2_ext.part.0>
		for (v = 0, x = fd + u; v < hn; v ++, x += tlen) {
 800e576:	9b08      	ldr	r3, [sp, #32]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d038      	beq.n	800e5ee <make_fg_step+0x19e>
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e57c:	9a07      	ldr	r2, [sp, #28]
 800e57e:	990c      	ldr	r1, [sp, #48]	; 0x30
	z = (uint64_t)a * (uint64_t)b;
 800e580:	e9d2 3000 	ldrd	r3, r0, [r2]
 800e584:	fba3 0c00 	umull	r0, ip, r3, r0
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e588:	fba0 3e05 	umull	r3, lr, r0, r5
 800e58c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e590:	fba3 3e04 	umull	r3, lr, r3, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800e594:	181b      	adds	r3, r3, r0
 800e596:	eb4e 0e0c 	adc.w	lr, lr, ip
 800e59a:	0fdb      	lsrs	r3, r3, #31
 800e59c:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 800e5a0:	1b1b      	subs	r3, r3, r4
	d += p & -(d >> 31);
 800e5a2:	ea04 70e3 	and.w	r0, r4, r3, asr #31
 800e5a6:	4403      	add	r3, r0
	z = (uint64_t)a * (uint64_t)b;
 800e5a8:	fba3 c306 	umull	ip, r3, r3, r6
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e5ac:	fbac 0e05 	umull	r0, lr, ip, r5
 800e5b0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e5b4:	fba0 0e04 	umull	r0, lr, r0, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800e5b8:	eb10 000c 	adds.w	r0, r0, ip
 800e5bc:	eb4e 0e03 	adc.w	lr, lr, r3
 800e5c0:	0fc3      	lsrs	r3, r0, #31
 800e5c2:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 800e5c6:	1b1b      	subs	r3, r3, r4
		for (v = 0, x = fd + u; v < hn; v ++, x += tlen) {
 800e5c8:	3208      	adds	r2, #8
	d += p & -(d >> 31);
 800e5ca:	ea04 70e3 	and.w	r0, r4, r3, asr #31
 800e5ce:	4403      	add	r3, r0
		for (v = 0, x = fd + u; v < hn; v ++, x += tlen) {
 800e5d0:	4591      	cmp	r9, r2
			*x = modp_montymul(
 800e5d2:	600b      	str	r3, [r1, #0]
		for (v = 0, x = fd + u; v < hn; v ++, x += tlen) {
 800e5d4:	4459      	add	r1, fp
 800e5d6:	d1d3      	bne.n	800e580 <make_fg_step+0x130>
		if (in_ntt) {
 800e5d8:	9b03      	ldr	r3, [sp, #12]
 800e5da:	b143      	cbz	r3, 800e5ee <make_fg_step+0x19e>
	if (logn == 0) {
 800e5dc:	9b06      	ldr	r3, [sp, #24]
 800e5de:	b133      	cbz	r3, 800e5ee <make_fg_step+0x19e>
 800e5e0:	e9cd 4500 	strd	r4, r5, [sp]
 800e5e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5e6:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e5e8:	9804      	ldr	r0, [sp, #16]
 800e5ea:	f7fb f819 	bl	8009620 <modp_iNTT2_ext.part.0>
		for (v = 0, x = gs + u; v < n; v ++, x += slen) {
 800e5ee:	9b05      	ldr	r3, [sp, #20]
			t1[v] = *x;
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	f847 2f04 	str.w	r2, [r7, #4]!
		for (v = 0, x = gs + u; v < n; v ++, x += slen) {
 800e5f6:	45b8      	cmp	r8, r7
 800e5f8:	4453      	add	r3, sl
 800e5fa:	d1f9      	bne.n	800e5f0 <make_fg_step+0x1a0>
		if (!in_ntt) {
 800e5fc:	9b03      	ldr	r3, [sp, #12]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d177      	bne.n	800e6f2 <make_fg_step+0x2a2>
	if (logn == 0) {
 800e602:	9b06      	ldr	r3, [sp, #24]
 800e604:	b133      	cbz	r3, 800e614 <make_fg_step+0x1c4>
 800e606:	e9cd 4500 	strd	r4, r5, [sp]
 800e60a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e60c:	9807      	ldr	r0, [sp, #28]
 800e60e:	2101      	movs	r1, #1
 800e610:	f7fa ff96 	bl	8009540 <modp_NTT2_ext.part.0>
		for (v = 0, x = gd + u; v < hn; v ++, x += tlen) {
 800e614:	9b08      	ldr	r3, [sp, #32]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d038      	beq.n	800e68c <make_fg_step+0x23c>
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e61a:	9a07      	ldr	r2, [sp, #28]
 800e61c:	990a      	ldr	r1, [sp, #40]	; 0x28
	z = (uint64_t)a * (uint64_t)b;
 800e61e:	e9d2 7000 	ldrd	r7, r0, [r2]
 800e622:	fba7 7000 	umull	r7, r0, r7, r0
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e626:	fba7 3c05 	umull	r3, ip, r7, r5
 800e62a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e62e:	fba3 3c04 	umull	r3, ip, r3, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800e632:	19db      	adds	r3, r3, r7
 800e634:	eb4c 0000 	adc.w	r0, ip, r0
 800e638:	0fdb      	lsrs	r3, r3, #31
 800e63a:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 800e63e:	1b1b      	subs	r3, r3, r4
	d += p & -(d >> 31);
 800e640:	ea04 70e3 	and.w	r0, r4, r3, asr #31
 800e644:	4403      	add	r3, r0
	z = (uint64_t)a * (uint64_t)b;
 800e646:	fba3 3706 	umull	r3, r7, r3, r6
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e64a:	fba3 0c05 	umull	r0, ip, r3, r5
 800e64e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e652:	fba0 0c04 	umull	r0, ip, r0, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800e656:	18c3      	adds	r3, r0, r3
 800e658:	eb4c 0007 	adc.w	r0, ip, r7
 800e65c:	0fdb      	lsrs	r3, r3, #31
 800e65e:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 800e662:	1b1b      	subs	r3, r3, r4
		for (v = 0, x = gd + u; v < hn; v ++, x += tlen) {
 800e664:	3208      	adds	r2, #8
	d += p & -(d >> 31);
 800e666:	ea04 70e3 	and.w	r0, r4, r3, asr #31
 800e66a:	4403      	add	r3, r0
		for (v = 0, x = gd + u; v < hn; v ++, x += tlen) {
 800e66c:	4591      	cmp	r9, r2
			*x = modp_montymul(
 800e66e:	600b      	str	r3, [r1, #0]
		for (v = 0, x = gd + u; v < hn; v ++, x += tlen) {
 800e670:	4459      	add	r1, fp
 800e672:	d1d4      	bne.n	800e61e <make_fg_step+0x1ce>
		if (in_ntt) {
 800e674:	9b03      	ldr	r3, [sp, #12]
 800e676:	b14b      	cbz	r3, 800e68c <make_fg_step+0x23c>
	if (logn == 0) {
 800e678:	9b06      	ldr	r3, [sp, #24]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d03f      	beq.n	800e6fe <make_fg_step+0x2ae>
 800e67e:	e9cd 4500 	strd	r4, r5, [sp]
 800e682:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e684:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e686:	9805      	ldr	r0, [sp, #20]
 800e688:	f7fa ffca 	bl	8009620 <modp_iNTT2_ext.part.0>
		if (!out_ntt) {
 800e68c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e68e:	b99b      	cbnz	r3, 800e6b8 <make_fg_step+0x268>
			modp_iNTT2_ext(fd + u, tlen, igm, logn - 1, p, p0i);
 800e690:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e692:	461e      	mov	r6, r3
	if (logn == 0) {
 800e694:	b183      	cbz	r3, 800e6b8 <make_fg_step+0x268>
 800e696:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800e698:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e69a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e69c:	4633      	mov	r3, r6
 800e69e:	4639      	mov	r1, r7
 800e6a0:	e9cd 4500 	strd	r4, r5, [sp]
 800e6a4:	f7fa ffbc 	bl	8009620 <modp_iNTT2_ext.part.0>
 800e6a8:	e9cd 4500 	strd	r4, r5, [sp]
 800e6ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e6ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6b0:	4633      	mov	r3, r6
 800e6b2:	4639      	mov	r1, r7
 800e6b4:	f7fa ffb4 	bl	8009620 <modp_iNTT2_ext.part.0>
	for (u = 0; u < slen; u ++) {
 800e6b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e6ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6bc:	3204      	adds	r2, #4
 800e6be:	920c      	str	r2, [sp, #48]	; 0x30
 800e6c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6c2:	3204      	adds	r2, #4
 800e6c4:	920a      	str	r2, [sp, #40]	; 0x28
 800e6c6:	9a05      	ldr	r2, [sp, #20]
 800e6c8:	3204      	adds	r2, #4
 800e6ca:	9205      	str	r2, [sp, #20]
 800e6cc:	9a04      	ldr	r2, [sp, #16]
 800e6ce:	3204      	adds	r2, #4
 800e6d0:	9204      	str	r2, [sp, #16]
 800e6d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	930d      	str	r3, [sp, #52]	; 0x34
 800e6da:	d01f      	beq.n	800e71c <make_fg_step+0x2cc>
		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 800e6dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e6de:	691f      	ldr	r7, [r3, #16]
		p = primes[u].p;
 800e6e0:	f853 4f0c 	ldr.w	r4, [r3, #12]!
 800e6e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e6e6:	e708      	b.n	800e4fa <make_fg_step+0xaa>
		for (v = 0, x = fd + u; v < hn; v ++, x += tlen) {
 800e6e8:	9b08      	ldr	r3, [sp, #32]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	f47f af46 	bne.w	800e57c <make_fg_step+0x12c>
 800e6f0:	e774      	b.n	800e5dc <make_fg_step+0x18c>
		for (v = 0, x = gd + u; v < hn; v ++, x += tlen) {
 800e6f2:	9b08      	ldr	r3, [sp, #32]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d190      	bne.n	800e61a <make_fg_step+0x1ca>
	if (logn == 0) {
 800e6f8:	9b06      	ldr	r3, [sp, #24]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1bf      	bne.n	800e67e <make_fg_step+0x22e>
		if (!out_ntt) {
 800e6fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e700:	2b00      	cmp	r3, #0
 800e702:	d1d9      	bne.n	800e6b8 <make_fg_step+0x268>
			modp_iNTT2_ext(fd + u, tlen, igm, logn - 1, p, p0i);
 800e704:	f04f 36ff 	mov.w	r6, #4294967295
 800e708:	e7c5      	b.n	800e696 <make_fg_step+0x246>
 800e70a:	bf00      	nop
 800e70c:	08016dd0 	.word	0x08016dd0
 800e710:	7fffd801 	.word	0x7fffd801
 800e714:	08016dfc 	.word	0x08016dfc
 800e718:	16d6ad45 	.word	0x16d6ad45
 800e71c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	zint_rebuild_CRT(fs, slen, slen, n, primes, 1, gm);
 800e720:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800e722:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e724:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e726:	9401      	str	r4, [sp, #4]
 800e728:	2501      	movs	r5, #1
 800e72a:	4633      	mov	r3, r6
 800e72c:	465a      	mov	r2, fp
 800e72e:	4659      	mov	r1, fp
 800e730:	9500      	str	r5, [sp, #0]
 800e732:	f003 fe15 	bl	8012360 <zint_rebuild_CRT.constprop.0>
	zint_rebuild_CRT(gs, slen, slen, n, primes, 1, gm);
 800e736:	4633      	mov	r3, r6
 800e738:	e9cd 5400 	strd	r5, r4, [sp]
 800e73c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e73e:	465a      	mov	r2, fp
 800e740:	4659      	mov	r1, fp
 800e742:	f003 fe0d 	bl	8012360 <zint_rebuild_CRT.constprop.0>
	for (u = slen; u < tlen; u ++) {
 800e746:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e748:	459b      	cmp	fp, r3
 800e74a:	f080 817e 	bcs.w	800ea4a <make_fg_step+0x5fa>
 800e74e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e750:	9907      	ldr	r1, [sp, #28]
 800e752:	9814      	ldr	r0, [sp, #80]	; 0x50
	x --;
 800e754:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 800e758:	3b04      	subs	r3, #4
 800e75a:	440b      	add	r3, r1
 800e75c:	9305      	str	r3, [sp, #20]
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 800e75e:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
 800e762:	3b01      	subs	r3, #1
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	461a      	mov	r2, r3
		for (v = 0, x = fs; v < n; v ++, x += slen) {
 800e768:	3204      	adds	r2, #4
 800e76a:	4410      	add	r0, r2
 800e76c:	900d      	str	r0, [sp, #52]	; 0x34
 800e76e:	9819      	ldr	r0, [sp, #100]	; 0x64
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 800e770:	9310      	str	r3, [sp, #64]	; 0x40
 800e772:	4bb7      	ldr	r3, [pc, #732]	; (800ea50 <make_fg_step+0x600>)
		for (v = 0, x = fs; v < n; v ++, x += slen) {
 800e774:	9204      	str	r2, [sp, #16]
 800e776:	4410      	add	r0, r2
 800e778:	eb0b 024b 	add.w	r2, fp, fp, lsl #1
 800e77c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e780:	930a      	str	r3, [sp, #40]	; 0x28
	x --;
 800e782:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e786:	9303      	str	r3, [sp, #12]
 800e788:	9b08      	ldr	r3, [sp, #32]
 800e78a:	900c      	str	r0, [sp, #48]	; 0x30
 800e78c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e790:	9314      	str	r3, [sp, #80]	; 0x50
 800e792:	1f0b      	subs	r3, r1, #4
 800e794:	930e      	str	r3, [sp, #56]	; 0x38
 800e796:	465f      	mov	r7, fp
		p = primes[u].p;
 800e798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e79a:	681c      	ldr	r4, [r3, #0]
	y = 2 - p;
 800e79c:	f1c4 0502 	rsb	r5, r4, #2
	y *= 2 - p * y;
 800e7a0:	fb05 f304 	mul.w	r3, r5, r4
 800e7a4:	f1c3 0302 	rsb	r3, r3, #2
 800e7a8:	fb03 f505 	mul.w	r5, r3, r5
	y *= 2 - p * y;
 800e7ac:	fb05 f304 	mul.w	r3, r5, r4
 800e7b0:	f1c3 0302 	rsb	r3, r3, #2
 800e7b4:	fb03 f505 	mul.w	r5, r3, r5
	y *= 2 - p * y;
 800e7b8:	fb05 f304 	mul.w	r3, r5, r4
 800e7bc:	f1c3 0302 	rsb	r3, r3, #2
 800e7c0:	fb03 f505 	mul.w	r5, r3, r5
	y *= 2 - p * y;
 800e7c4:	fb05 f304 	mul.w	r3, r5, r4
 800e7c8:	3b02      	subs	r3, #2
	return (uint32_t)0x7FFFFFFF & -y;
 800e7ca:	fb03 f505 	mul.w	r5, r3, r5
 800e7ce:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
		R2 = modp_R2(p, p0i);
 800e7d2:	4629      	mov	r1, r5
 800e7d4:	4620      	mov	r0, r4
 800e7d6:	f7ff fb0b 	bl	800ddf0 <modp_R2.lto_priv.0>
	for (i = 0; (1U << i) <= x; i ++) {
 800e7da:	9b03      	ldr	r3, [sp, #12]
		R2 = modp_R2(p, p0i);
 800e7dc:	4683      	mov	fp, r0
	return ((uint32_t)1 << 31) - p;
 800e7de:	f1c4 4a00 	rsb	sl, r4, #2147483648	; 0x80000000
	for (i = 0; (1U << i) <= x; i ++) {
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d03e      	beq.n	800e864 <make_fg_step+0x414>
 800e7e6:	f04f 0c00 	mov.w	ip, #0
 800e7ea:	9711      	str	r7, [sp, #68]	; 0x44
 800e7ec:	9015      	str	r0, [sp, #84]	; 0x54
 800e7ee:	4602      	mov	r2, r0
		if ((x & (1U << i)) != 0) {
 800e7f0:	f8dd 900c 	ldr.w	r9, [sp, #12]
	z = (uint64_t)a * (uint64_t)b;
 800e7f4:	fba2 6702 	umull	r6, r7, r2, r2
 800e7f8:	fbaa e202 	umull	lr, r2, sl, r2
		if ((x & (1U << i)) != 0) {
 800e7fc:	fa29 fb0c 	lsr.w	fp, r9, ip
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e800:	fba6 0305 	umull	r0, r3, r6, r5
 800e804:	fbae 1805 	umull	r1, r8, lr, r5
 800e808:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e80c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	for (i = 0; (1U << i) <= x; i ++) {
 800e810:	f10c 0c01 	add.w	ip, ip, #1
 800e814:	f04f 0901 	mov.w	r9, #1
		if ((x & (1U << i)) != 0) {
 800e818:	f01b 0f01 	tst.w	fp, #1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e81c:	fba0 3004 	umull	r3, r0, r0, r4
 800e820:	fba1 8104 	umull	r8, r1, r1, r4
	for (i = 0; (1U << i) <= x; i ++) {
 800e824:	fa09 f90c 	lsl.w	r9, r9, ip
		if ((x & (1U << i)) != 0) {
 800e828:	d00c      	beq.n	800e844 <make_fg_step+0x3f4>
	d = (uint32_t)((z + w) >> 31) - p;
 800e82a:	eb18 0a0e 	adds.w	sl, r8, lr
 800e82e:	eb41 0102 	adc.w	r1, r1, r2
 800e832:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800e836:	ea4a 0a41 	orr.w	sl, sl, r1, lsl #1
 800e83a:	ebaa 0a04 	sub.w	sl, sl, r4
	d += p & -(d >> 31);
 800e83e:	ea04 72ea 	and.w	r2, r4, sl, asr #31
 800e842:	4492      	add	sl, r2
	d = (uint32_t)((z + w) >> 31) - p;
 800e844:	199b      	adds	r3, r3, r6
 800e846:	eb47 0700 	adc.w	r7, r7, r0
 800e84a:	0fdb      	lsrs	r3, r3, #31
 800e84c:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 800e850:	1b1b      	subs	r3, r3, r4
	d += p & -(d >> 31);
 800e852:	ea04 72e3 	and.w	r2, r4, r3, asr #31
 800e856:	441a      	add	r2, r3
	for (i = 0; (1U << i) <= x; i ++) {
 800e858:	9b03      	ldr	r3, [sp, #12]
 800e85a:	4599      	cmp	r9, r3
 800e85c:	d9c8      	bls.n	800e7f0 <make_fg_step+0x3a0>
 800e85e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800e860:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 800e864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e866:	9a06      	ldr	r2, [sp, #24]
 800e868:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e86a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e86c:	e9cd 4500 	strd	r4, r5, [sp]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	f7ff fb2d 	bl	800ded0 <modp_mkgm2>
		for (v = 0, x = fs; v < n; v ++, x += slen) {
 800e876:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 800e87a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e87c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800e880:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 800e884:	e015      	b.n	800e8b2 <make_fg_step+0x462>
	z = zint_mod_small_unsigned(d, dlen, p, p0i, R2);
 800e886:	f8cd b000 	str.w	fp, [sp]
 800e88a:	4630      	mov	r0, r6
 800e88c:	f7ff fbf8 	bl	800e080 <zint_mod_small_unsigned.lto_priv.0>
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 800e890:	f856 3008 	ldr.w	r3, [r6, r8]
 800e894:	0f9b      	lsrs	r3, r3, #30
 800e896:	425b      	negs	r3, r3
 800e898:	ea03 030a 	and.w	r3, r3, sl
	d = a - b;
 800e89c:	1ac0      	subs	r0, r0, r3
	d += p & -(d >> 31);
 800e89e:	ea04 73e0 	and.w	r3, r4, r0, asr #31
 800e8a2:	4418      	add	r0, r3
		for (v = 0, x = fs; v < n; v ++, x += slen) {
 800e8a4:	9b04      	ldr	r3, [sp, #16]
			t1[v] = zint_mod_small_signed(x, slen, p, p0i, R2, Rx);
 800e8a6:	f849 0f04 	str.w	r0, [r9, #4]!
		for (v = 0, x = fs; v < n; v ++, x += slen) {
 800e8aa:	441e      	add	r6, r3
 800e8ac:	9b05      	ldr	r3, [sp, #20]
 800e8ae:	454b      	cmp	r3, r9
 800e8b0:	d006      	beq.n	800e8c0 <make_fg_step+0x470>
	z = zint_mod_small_unsigned(d, dlen, p, p0i, R2);
 800e8b2:	462b      	mov	r3, r5
 800e8b4:	4622      	mov	r2, r4
 800e8b6:	4639      	mov	r1, r7
	if (dlen == 0) {
 800e8b8:	2f00      	cmp	r7, #0
 800e8ba:	d1e4      	bne.n	800e886 <make_fg_step+0x436>
		return 0;
 800e8bc:	4638      	mov	r0, r7
 800e8be:	e7f1      	b.n	800e8a4 <make_fg_step+0x454>
	if (logn == 0) {
 800e8c0:	9b06      	ldr	r3, [sp, #24]
 800e8c2:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800e8c6:	b133      	cbz	r3, 800e8d6 <make_fg_step+0x486>
 800e8c8:	e9cd 4500 	strd	r4, r5, [sp]
 800e8cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8ce:	9807      	ldr	r0, [sp, #28]
 800e8d0:	2101      	movs	r1, #1
 800e8d2:	f7fa fe35 	bl	8009540 <modp_NTT2_ext.part.0>
		for (v = 0, x = fd + u; v < hn; v ++, x += tlen) {
 800e8d6:	9b08      	ldr	r3, [sp, #32]
 800e8d8:	b38b      	cbz	r3, 800e93e <make_fg_step+0x4ee>
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e8da:	9a07      	ldr	r2, [sp, #28]
		for (v = 0, x = fd + u; v < hn; v ++, x += tlen) {
 800e8dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e8de:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e8e0:	9e14      	ldr	r6, [sp, #80]	; 0x50
	z = (uint64_t)a * (uint64_t)b;
 800e8e2:	e9d2 e300 	ldrd	lr, r3, [r2]
 800e8e6:	fbae ce03 	umull	ip, lr, lr, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e8ea:	fbac 3905 	umull	r3, r9, ip, r5
 800e8ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e8f2:	fba3 3904 	umull	r3, r9, r3, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800e8f6:	eb13 030c 	adds.w	r3, r3, ip
 800e8fa:	eb49 090e 	adc.w	r9, r9, lr
 800e8fe:	0fdb      	lsrs	r3, r3, #31
 800e900:	ea43 0349 	orr.w	r3, r3, r9, lsl #1
 800e904:	1b1b      	subs	r3, r3, r4
	d += p & -(d >> 31);
 800e906:	ea04 7ce3 	and.w	ip, r4, r3, asr #31
 800e90a:	4463      	add	r3, ip
	z = (uint64_t)a * (uint64_t)b;
 800e90c:	fba3 e30b 	umull	lr, r3, r3, fp
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e910:	fbae c905 	umull	ip, r9, lr, r5
 800e914:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
 800e918:	fbac c904 	umull	ip, r9, ip, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800e91c:	eb1c 0c0e 	adds.w	ip, ip, lr
 800e920:	eb49 0903 	adc.w	r9, r9, r3
 800e924:	ea4f 73dc 	mov.w	r3, ip, lsr #31
 800e928:	ea43 0349 	orr.w	r3, r3, r9, lsl #1
 800e92c:	1b1b      	subs	r3, r3, r4
		for (v = 0, x = fd + u; v < hn; v ++, x += tlen) {
 800e92e:	3208      	adds	r2, #8
	d += p & -(d >> 31);
 800e930:	ea04 7ce3 	and.w	ip, r4, r3, asr #31
 800e934:	4463      	add	r3, ip
		for (v = 0, x = fd + u; v < hn; v ++, x += tlen) {
 800e936:	4296      	cmp	r6, r2
			*x = modp_montymul(
 800e938:	600b      	str	r3, [r1, #0]
		for (v = 0, x = fd + u; v < hn; v ++, x += tlen) {
 800e93a:	4401      	add	r1, r0
 800e93c:	d1d1      	bne.n	800e8e2 <make_fg_step+0x492>
		for (v = 0, x = gs; v < n; v ++, x += slen) {
 800e93e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800e940:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800e944:	e015      	b.n	800e972 <make_fg_step+0x522>
	z = zint_mod_small_unsigned(d, dlen, p, p0i, R2);
 800e946:	f8cd b000 	str.w	fp, [sp]
 800e94a:	4630      	mov	r0, r6
 800e94c:	f7ff fb98 	bl	800e080 <zint_mod_small_unsigned.lto_priv.0>
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 800e950:	f856 3009 	ldr.w	r3, [r6, r9]
 800e954:	0f9b      	lsrs	r3, r3, #30
 800e956:	425b      	negs	r3, r3
 800e958:	ea03 030a 	and.w	r3, r3, sl
	d = a - b;
 800e95c:	1ac0      	subs	r0, r0, r3
	d += p & -(d >> 31);
 800e95e:	ea04 73e0 	and.w	r3, r4, r0, asr #31
 800e962:	4418      	add	r0, r3
		for (v = 0, x = gs; v < n; v ++, x += slen) {
 800e964:	9b04      	ldr	r3, [sp, #16]
			t1[v] = zint_mod_small_signed(x, slen, p, p0i, R2, Rx);
 800e966:	f848 0f04 	str.w	r0, [r8, #4]!
		for (v = 0, x = gs; v < n; v ++, x += slen) {
 800e96a:	441e      	add	r6, r3
 800e96c:	9b05      	ldr	r3, [sp, #20]
 800e96e:	4543      	cmp	r3, r8
 800e970:	d006      	beq.n	800e980 <make_fg_step+0x530>
	z = zint_mod_small_unsigned(d, dlen, p, p0i, R2);
 800e972:	462b      	mov	r3, r5
 800e974:	4622      	mov	r2, r4
 800e976:	4639      	mov	r1, r7
	if (dlen == 0) {
 800e978:	2f00      	cmp	r7, #0
 800e97a:	d1e4      	bne.n	800e946 <make_fg_step+0x4f6>
		return 0;
 800e97c:	4638      	mov	r0, r7
 800e97e:	e7f1      	b.n	800e964 <make_fg_step+0x514>
	if (logn == 0) {
 800e980:	9b06      	ldr	r3, [sp, #24]
 800e982:	b133      	cbz	r3, 800e992 <make_fg_step+0x542>
 800e984:	e9cd 4500 	strd	r4, r5, [sp]
 800e988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e98a:	9807      	ldr	r0, [sp, #28]
 800e98c:	2101      	movs	r1, #1
 800e98e:	f7fa fdd7 	bl	8009540 <modp_NTT2_ext.part.0>
		for (v = 0, x = gd + u; v < hn; v ++, x += tlen) {
 800e992:	9b08      	ldr	r3, [sp, #32]
 800e994:	b383      	cbz	r3, 800e9f8 <make_fg_step+0x5a8>
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e996:	9a07      	ldr	r2, [sp, #28]
		for (v = 0, x = gd + u; v < hn; v ++, x += tlen) {
 800e998:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e99a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e99c:	9e14      	ldr	r6, [sp, #80]	; 0x50
	z = (uint64_t)a * (uint64_t)b;
 800e99e:	e9d2 c300 	ldrd	ip, r3, [r2]
 800e9a2:	fbac ce03 	umull	ip, lr, ip, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e9a6:	fbac 3805 	umull	r3, r8, ip, r5
 800e9aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e9ae:	fba3 3804 	umull	r3, r8, r3, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800e9b2:	eb13 030c 	adds.w	r3, r3, ip
 800e9b6:	eb48 0c0e 	adc.w	ip, r8, lr
 800e9ba:	0fdb      	lsrs	r3, r3, #31
 800e9bc:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 800e9c0:	1b1b      	subs	r3, r3, r4
	d += p & -(d >> 31);
 800e9c2:	ea04 7ce3 	and.w	ip, r4, r3, asr #31
 800e9c6:	4463      	add	r3, ip
	z = (uint64_t)a * (uint64_t)b;
 800e9c8:	fba3 3e0b 	umull	r3, lr, r3, fp
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800e9cc:	fba3 c805 	umull	ip, r8, r3, r5
 800e9d0:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
 800e9d4:	fbac c804 	umull	ip, r8, ip, r4
	d = (uint32_t)((z + w) >> 31) - p;
 800e9d8:	eb1c 0303 	adds.w	r3, ip, r3
 800e9dc:	eb48 0c0e 	adc.w	ip, r8, lr
 800e9e0:	0fdb      	lsrs	r3, r3, #31
 800e9e2:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 800e9e6:	1b1b      	subs	r3, r3, r4
		for (v = 0, x = gd + u; v < hn; v ++, x += tlen) {
 800e9e8:	3208      	adds	r2, #8
	d += p & -(d >> 31);
 800e9ea:	ea04 7ce3 	and.w	ip, r4, r3, asr #31
 800e9ee:	4463      	add	r3, ip
		for (v = 0, x = gd + u; v < hn; v ++, x += tlen) {
 800e9f0:	42b2      	cmp	r2, r6
			*x = modp_montymul(
 800e9f2:	600b      	str	r3, [r1, #0]
		for (v = 0, x = gd + u; v < hn; v ++, x += tlen) {
 800e9f4:	4401      	add	r1, r0
 800e9f6:	d1d2      	bne.n	800e99e <make_fg_step+0x54e>
		if (!out_ntt) {
 800e9f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e9fa:	b9b3      	cbnz	r3, 800ea2a <make_fg_step+0x5da>
	if (logn == 0) {
 800e9fc:	9b06      	ldr	r3, [sp, #24]
 800e9fe:	1e5e      	subs	r6, r3, #1
 800ea00:	d013      	beq.n	800ea2a <make_fg_step+0x5da>
 800ea02:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ea06:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800ea0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ea0c:	4633      	mov	r3, r6
 800ea0e:	464a      	mov	r2, r9
 800ea10:	4641      	mov	r1, r8
 800ea12:	e9cd 4500 	strd	r4, r5, [sp]
 800ea16:	f7fa fe03 	bl	8009620 <modp_iNTT2_ext.part.0>
 800ea1a:	e9cd 4500 	strd	r4, r5, [sp]
 800ea1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ea20:	4633      	mov	r3, r6
 800ea22:	464a      	mov	r2, r9
 800ea24:	4641      	mov	r1, r8
 800ea26:	f7fa fdfb 	bl	8009620 <modp_iNTT2_ext.part.0>
	for (u = slen; u < tlen; u ++) {
 800ea2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea2e:	320c      	adds	r2, #12
 800ea30:	920a      	str	r2, [sp, #40]	; 0x28
 800ea32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea34:	3204      	adds	r2, #4
 800ea36:	920d      	str	r2, [sp, #52]	; 0x34
 800ea38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea3a:	3204      	adds	r2, #4
 800ea3c:	920c      	str	r2, [sp, #48]	; 0x30
 800ea3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ea40:	3301      	adds	r3, #1
 800ea42:	429a      	cmp	r2, r3
 800ea44:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea46:	f47f aea7 	bne.w	800e798 <make_fg_step+0x348>
}
 800ea4a:	b01b      	add	sp, #108	; 0x6c
 800ea4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea50:	08016dfc 	.word	0x08016dfc
	...

0800ea60 <solve_NTRU.constprop.0>:
solve_NTRU(unsigned logn, int8_t *F, int8_t *G,
 800ea60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea64:	4abe      	ldr	r2, [pc, #760]	; (800ed60 <solve_NTRU.constprop.0+0x300>)
 800ea66:	4bbf      	ldr	r3, [pc, #764]	; (800ed64 <solve_NTRU.constprop.0+0x304>)
 800ea68:	49bf      	ldr	r1, [pc, #764]	; (800ed68 <solve_NTRU.constprop.0+0x308>)
	w += p & -(w >> 31);
 800ea6a:	4cc0      	ldr	r4, [pc, #768]	; (800ed6c <solve_NTRU.constprop.0+0x30c>)
solve_NTRU(unsigned logn, int8_t *F, int8_t *G,
 800ea6c:	b0bf      	sub	sp, #252	; 0xfc
 800ea6e:	903b      	str	r0, [sp, #236]	; 0xec
 800ea70:	1c50      	adds	r0, r2, #1
 800ea72:	903c      	str	r0, [sp, #240]	; 0xf0
 800ea74:	9238      	str	r2, [sp, #224]	; 0xe0
 800ea76:	9339      	str	r3, [sp, #228]	; 0xe4
 800ea78:	4618      	mov	r0, r3
		ft[u] = modp_set(f[u], p0);
 800ea7a:	f912 6f01 	ldrsb.w	r6, [r2, #1]!
		gt[u] = modp_set(g[u], p0);
 800ea7e:	f910 5f01 	ldrsb.w	r5, [r0, #1]!
	w += p & -(w >> 31);
 800ea82:	ea04 73e6 	and.w	r3, r4, r6, asr #31
 800ea86:	4433      	add	r3, r6
		ft[u] = modp_set(f[u], p0);
 800ea88:	f841 3f04 	str.w	r3, [r1, #4]!
	w += p & -(w >> 31);
 800ea8c:	ea04 73e5 	and.w	r3, r4, r5, asr #31
 800ea90:	442b      	add	r3, r5
		gt[u] = modp_set(g[u], p0);
 800ea92:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
	for (u = 0; u < n; u ++) {
 800ea96:	4bb6      	ldr	r3, [pc, #728]	; (800ed70 <solve_NTRU.constprop.0+0x310>)
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d1ee      	bne.n	800ea7a <solve_NTRU.constprop.0+0x1a>
 800ea9c:	4db5      	ldr	r5, [pc, #724]	; (800ed74 <solve_NTRU.constprop.0+0x314>)
 800ea9e:	2400      	movs	r4, #0
		make_fg_step(data, logn - d, d,
 800eaa0:	1e23      	subs	r3, r4, #0
 800eaa2:	f1c4 0109 	rsb	r1, r4, #9
 800eaa6:	4622      	mov	r2, r4
			d != 0, (d + 1) < depth || out_ntt);
 800eaa8:	f104 0401 	add.w	r4, r4, #1
		make_fg_step(data, logn - d, d,
 800eaac:	bf18      	it	ne
 800eaae:	2301      	movne	r3, #1
 800eab0:	f1b4 0009 	subs.w	r0, r4, #9
 800eab4:	bf18      	it	ne
 800eab6:	2001      	movne	r0, #1
 800eab8:	9000      	str	r0, [sp, #0]
 800eaba:	4628      	mov	r0, r5
 800eabc:	f7ff fcc8 	bl	800e450 <make_fg_step>
	for (d = 0; d < depth; d ++) {
 800eac0:	2c09      	cmp	r4, #9
 800eac2:	d1ed      	bne.n	800eaa0 <solve_NTRU.constprop.0+0x40>
	zint_rebuild_CRT(fp, len, len, 2, primes, 0, t1);
 800eac4:	4cac      	ldr	r4, [pc, #688]	; (800ed78 <solve_NTRU.constprop.0+0x318>)
 800eac6:	9401      	str	r4, [sp, #4]
 800eac8:	226a      	movs	r2, #106	; 0x6a
 800eaca:	2600      	movs	r6, #0
 800eacc:	4611      	mov	r1, r2
 800eace:	2302      	movs	r3, #2
 800ead0:	f5a4 7054 	sub.w	r0, r4, #848	; 0x350
 800ead4:	9600      	str	r6, [sp, #0]
 800ead6:	f003 fc43 	bl	8012360 <zint_rebuild_CRT.constprop.0>
	if (!zint_bezout(Gp, Fp, fp, gp, len, t1)) {
 800eada:	9400      	str	r4, [sp, #0]
 800eadc:	236a      	movs	r3, #106	; 0x6a
 800eade:	f5a4 72d4 	sub.w	r2, r4, #424	; 0x1a8
 800eae2:	f5a4 7154 	sub.w	r1, r4, #848	; 0x350
 800eae6:	f5a4 609f 	sub.w	r0, r4, #1272	; 0x4f8
 800eaea:	f7fc fc31 	bl	800b350 <zint_bezout.constprop.0>
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	f001 83be 	beq.w	8010270 <solve_NTRU.constprop.0+0x1810>
 800eaf4:	f5a4 63d4 	sub.w	r3, r4, #1696	; 0x6a0
 800eaf8:	f2a4 62a4 	subw	r2, r4, #1700	; 0x6a4
 800eafc:	f5a5 70d6 	sub.w	r0, r5, #428	; 0x1ac
 800eb00:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb02:	9321      	str	r3, [sp, #132]	; 0x84
 800eb04:	923a      	str	r2, [sp, #232]	; 0xe8
		z = (uint64_t)m[u] * (uint64_t)x + cc;
 800eb06:	4635      	mov	r5, r6
 800eb08:	f243 0401 	movw	r4, #12289	; 0x3001
 800eb0c:	4633      	mov	r3, r6
 800eb0e:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800eb12:	462e      	mov	r6, r5
 800eb14:	fbe1 3604 	umlal	r3, r6, r1, r4
		m[u] = (uint32_t)z & 0x7FFFFFFF;
 800eb18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
	for (u = 0; u < mlen; u ++) {
 800eb1c:	4290      	cmp	r0, r2
		cc = (uint32_t)(z >> 31);
 800eb1e:	ea4f 73d3 	mov.w	r3, r3, lsr #31
		m[u] = (uint32_t)z & 0x7FFFFFFF;
 800eb22:	6011      	str	r1, [r2, #0]
		cc = (uint32_t)(z >> 31);
 800eb24:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
	for (u = 0; u < mlen; u ++) {
 800eb28:	d1f1      	bne.n	800eb0e <solve_NTRU.constprop.0+0xae>
	if (zint_mul_small(Fp, len, q) != 0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	f041 83a0 	bne.w	8010270 <solve_NTRU.constprop.0+0x1810>
 800eb30:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800eb32:	4a92      	ldr	r2, [pc, #584]	; (800ed7c <solve_NTRU.constprop.0+0x31c>)
 800eb34:	f501 7553 	add.w	r5, r1, #844	; 0x34c
		z = (uint64_t)m[u] * (uint64_t)x + cc;
 800eb38:	461c      	mov	r4, r3
 800eb3a:	f243 0001 	movw	r0, #12289	; 0x3001
 800eb3e:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800eb42:	4626      	mov	r6, r4
 800eb44:	fbe1 3600 	umlal	r3, r6, r1, r0
		m[u] = (uint32_t)z & 0x7FFFFFFF;
 800eb48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
	for (u = 0; u < mlen; u ++) {
 800eb4c:	4295      	cmp	r5, r2
		cc = (uint32_t)(z >> 31);
 800eb4e:	ea4f 73d3 	mov.w	r3, r3, lsr #31
		m[u] = (uint32_t)z & 0x7FFFFFFF;
 800eb52:	6011      	str	r1, [r2, #0]
		cc = (uint32_t)(z >> 31);
 800eb54:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
	for (u = 0; u < mlen; u ++) {
 800eb58:	d1f1      	bne.n	800eb3e <solve_NTRU.constprop.0+0xde>
		|| zint_mul_small(Gp, len, q) != 0)
 800eb5a:	933d      	str	r3, [sp, #244]	; 0xf4
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	f041 8387 	bne.w	8010270 <solve_NTRU.constprop.0+0x1810>
 800eb62:	4a87      	ldr	r2, [pc, #540]	; (800ed80 <solve_NTRU.constprop.0+0x320>)
 800eb64:	9327      	str	r3, [sp, #156]	; 0x9c
 800eb66:	239d      	movs	r3, #157	; 0x9d
 800eb68:	9236      	str	r2, [sp, #216]	; 0xd8
 800eb6a:	931e      	str	r3, [sp, #120]	; 0x78
 800eb6c:	4a85      	ldr	r2, [pc, #532]	; (800ed84 <solve_NTRU.constprop.0+0x324>)
 800eb6e:	9235      	str	r2, [sp, #212]	; 0xd4
 800eb70:	2335      	movs	r3, #53	; 0x35
 800eb72:	4a85      	ldr	r2, [pc, #532]	; (800ed88 <solve_NTRU.constprop.0+0x328>)
 800eb74:	931b      	str	r3, [sp, #108]	; 0x6c
		while (depth -- > 2) {
 800eb76:	2308      	movs	r3, #8
 800eb78:	9234      	str	r2, [sp, #208]	; 0xd0
		|| zint_mul_small(Gp, len, q) != 0)
 800eb7a:	f04f 086a 	mov.w	r8, #106	; 0x6a
		while (depth -- > 2) {
 800eb7e:	9330      	str	r3, [sp, #192]	; 0xc0
	logn = logn_top - depth;
 800eb80:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800eb82:	f1c3 0309 	rsb	r3, r3, #9
 800eb86:	461a      	mov	r2, r3
 800eb88:	931a      	str	r3, [sp, #104]	; 0x68
	n = (size_t)1 << logn;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	4093      	lsls	r3, r2
 800eb8e:	9331      	str	r3, [sp, #196]	; 0xc4
	ft = Gd + dlen * hn;
 800eb90:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
	hn = n >> 1;
 800eb92:	085b      	lsrs	r3, r3, #1
 800eb94:	9314      	str	r3, [sp, #80]	; 0x50
	Gd = Fd + dlen * hn;
 800eb96:	fb08 f303 	mul.w	r3, r8, r3
	ft = Gd + dlen * hn;
 800eb9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
	gt = ft + n;
 800eb9e:	e9dd 2038 	ldrd	r2, r0, [sp, #224]	; 0xe0
	Gd = Fd + dlen * hn;
 800eba2:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800eba6:	00df      	lsls	r7, r3, #3
	gt = ft + n;
 800eba8:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 800ebac:	1f29      	subs	r1, r5, #4
		ft[u] = modp_set(f[u], p0);
 800ebae:	f912 cf01 	ldrsb.w	ip, [r2, #1]!
	w += p & -(w >> 31);
 800ebb2:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 800ed6c <solve_NTRU.constprop.0+0x30c>
		gt[u] = modp_set(g[u], p0);
 800ebb6:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
	w += p & -(w >> 31);
 800ebba:	ea0e 73ec 	and.w	r3, lr, ip, asr #31
 800ebbe:	4463      	add	r3, ip
		ft[u] = modp_set(f[u], p0);
 800ebc0:	f841 3f04 	str.w	r3, [r1, #4]!
	w += p & -(w >> 31);
 800ebc4:	ea0e 73e4 	and.w	r3, lr, r4, asr #31
 800ebc8:	4423      	add	r3, r4
		gt[u] = modp_set(g[u], p0);
 800ebca:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
	for (u = 0; u < n; u ++) {
 800ebce:	4b68      	ldr	r3, [pc, #416]	; (800ed70 <solve_NTRU.constprop.0+0x310>)
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d1ec      	bne.n	800ebae <solve_NTRU.constprop.0+0x14e>
	if (depth == 0 && out_ntt) {
 800ebd4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	f041 859a 	bne.w	8010710 <solve_NTRU.constprop.0+0x1cb0>
		gm = gt + n;
 800ebdc:	f505 5480 	add.w	r4, r5, #4096	; 0x1000
		modp_mkgm2(gm, igm, logn, primes[0].g, p, p0i);
 800ebe0:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 800ed8c <solve_NTRU.constprop.0+0x32c>
 800ebe4:	f8cd e000 	str.w	lr, [sp]
 800ebe8:	46f3      	mov	fp, lr
 800ebea:	f505 51c0 	add.w	r1, r5, #6144	; 0x1800
 800ebee:	4620      	mov	r0, r4
 800ebf0:	4b67      	ldr	r3, [pc, #412]	; (800ed90 <solve_NTRU.constprop.0+0x330>)
 800ebf2:	f8cd a004 	str.w	sl, [sp, #4]
 800ebf6:	2209      	movs	r2, #9
 800ebf8:	f7ff f96a 	bl	800ded0 <modp_mkgm2>
 800ebfc:	e9cd ba00 	strd	fp, sl, [sp]
 800ec00:	4622      	mov	r2, r4
 800ec02:	4628      	mov	r0, r5
 800ec04:	2309      	movs	r3, #9
 800ec06:	2101      	movs	r1, #1
 800ec08:	f7fa fc9a 	bl	8009540 <modp_NTT2_ext.part.0>
 800ec0c:	e9cd ba00 	strd	fp, sl, [sp]
 800ec10:	4630      	mov	r0, r6
	t1 = Gt + n * llen;
 800ec12:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800ec16:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 800ec18:	4622      	mov	r2, r4
 800ec1a:	2309      	movs	r3, #9
 800ec1c:	eb06 340a 	add.w	r4, r6, sl, lsl #12
 800ec20:	2101      	movs	r1, #1
 800ec22:	9424      	str	r4, [sp, #144]	; 0x90
 800ec24:	f7fa fc8c 	bl	8009540 <modp_NTT2_ext.part.0>
	memmove(t1, ft, 2 * n * slen * sizeof *ft);
 800ec28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ec2a:	4629      	mov	r1, r5
	t1 = gt + slen * n;
 800ec2c:	eb04 3503 	add.w	r5, r4, r3, lsl #12
	memmove(t1, ft, 2 * n * slen * sizeof *ft);
 800ec30:	031a      	lsls	r2, r3, #12
	t1 = gt + slen * n;
 800ec32:	469b      	mov	fp, r3
	memmove(t1, ft, 2 * n * slen * sizeof *ft);
 800ec34:	4620      	mov	r0, r4
	Gd = Fd + hn * dlen;
 800ec36:	eb05 0309 	add.w	r3, r5, r9
 800ec3a:	9313      	str	r3, [sp, #76]	; 0x4c
	t1 = gt + slen * n;
 800ec3c:	9518      	str	r5, [sp, #96]	; 0x60
	memmove(t1, ft, 2 * n * slen * sizeof *ft);
 800ec3e:	f005 ffbb 	bl	8014bb8 <memmove>
	memmove(t1, Fd, 2 * hn * dlen * sizeof *Fd);
 800ec42:	4954      	ldr	r1, [pc, #336]	; (800ed94 <solve_NTRU.constprop.0+0x334>)
 800ec44:	463a      	mov	r2, r7
 800ec46:	4628      	mov	r0, r5
 800ec48:	f005 ffb6 	bl	8014bb8 <memmove>
	Gt = Ft + n * llen;
 800ec4c:	eb06 23ca 	add.w	r3, r6, sl, lsl #11
 800ec50:	9322      	str	r3, [sp, #136]	; 0x88
	gt = ft + slen * n;
 800ec52:	eb04 23cb 	add.w	r3, r4, fp, lsl #11
 800ec56:	9323      	str	r3, [sp, #140]	; 0x8c
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 800ec58:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
 800ec5c:	3b01      	subs	r3, #1
 800ec5e:	009b      	lsls	r3, r3, #2
 800ec60:	9315      	str	r3, [sp, #84]	; 0x54
			v ++, xs += dlen, ys += dlen, xd += llen, yd += llen)
 800ec62:	3304      	adds	r3, #4
 800ec64:	930c      	str	r3, [sp, #48]	; 0x30
 800ec66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ec68:	4a4b      	ldr	r2, [pc, #300]	; (800ed98 <solve_NTRU.constprop.0+0x338>)
	x --;
 800ec6a:	4c40      	ldr	r4, [pc, #256]	; (800ed6c <solve_NTRU.constprop.0+0x30c>)
 800ec6c:	921f      	str	r2, [sp, #124]	; 0x7c
			v ++, xs += dlen, ys += dlen, xd += llen, yd += llen)
 800ec6e:	009b      	lsls	r3, r3, #2
 800ec70:	9309      	str	r3, [sp, #36]	; 0x24
	x --;
 800ec72:	f108 33ff 	add.w	r3, r8, #4294967295
 800ec76:	9316      	str	r3, [sp, #88]	; 0x58
 800ec78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ec7a:	9310      	str	r3, [sp, #64]	; 0x40
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	9212      	str	r2, [sp, #72]	; 0x48
 800ec80:	930e      	str	r3, [sp, #56]	; 0x38
	for (i = 0; (1U << i) <= x; i ++) {
 800ec82:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
	y = 2 - p;
 800ec86:	f1c4 0602 	rsb	r6, r4, #2
	y *= 2 - p * y;
 800ec8a:	fb04 f306 	mul.w	r3, r4, r6
 800ec8e:	f1c3 0302 	rsb	r3, r3, #2
 800ec92:	fb03 f606 	mul.w	r6, r3, r6
	y *= 2 - p * y;
 800ec96:	fb04 f306 	mul.w	r3, r4, r6
 800ec9a:	f1c3 0302 	rsb	r3, r3, #2
 800ec9e:	fb03 f606 	mul.w	r6, r3, r6
	y *= 2 - p * y;
 800eca2:	fb04 f306 	mul.w	r3, r4, r6
 800eca6:	f1c3 0302 	rsb	r3, r3, #2
 800ecaa:	fb03 f606 	mul.w	r6, r3, r6
	y *= 2 - p * y;
 800ecae:	fb04 f306 	mul.w	r3, r4, r6
 800ecb2:	3b02      	subs	r3, #2
	return (uint32_t)0x7FFFFFFF & -y;
 800ecb4:	fb03 f606 	mul.w	r6, r3, r6
 800ecb8:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
		R2 = modp_R2(p, p0i);
 800ecbc:	4631      	mov	r1, r6
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f7ff f896 	bl	800ddf0 <modp_R2.lto_priv.0>
	for (i = 0; (1U << i) <= x; i ++) {
 800ecc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
		R2 = modp_R2(p, p0i);
 800ecc6:	900a      	str	r0, [sp, #40]	; 0x28
	return ((uint32_t)1 << 31) - p;
 800ecc8:	f1c4 4300 	rsb	r3, r4, #2147483648	; 0x80000000
 800eccc:	9308      	str	r3, [sp, #32]
	for (i = 0; (1U << i) <= x; i ++) {
 800ecce:	b3ba      	cbz	r2, 800ed40 <solve_NTRU.constprop.0+0x2e0>
	r = R2;
 800ecd0:	4603      	mov	r3, r0
	for (i = 0; (1U << i) <= x; i ++) {
 800ecd2:	f04f 0c00 	mov.w	ip, #0
 800ecd6:	4691      	mov	r9, r2
	z = (uint64_t)a * (uint64_t)b;
 800ecd8:	9908      	ldr	r1, [sp, #32]
 800ecda:	fba3 7e03 	umull	r7, lr, r3, r3
 800ecde:	fba1 8303 	umull	r8, r3, r1, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800ece2:	fba7 0206 	umull	r0, r2, r7, r6
 800ece6:	fba8 1506 	umull	r1, r5, r8, r6
		if ((x & (1U << i)) != 0) {
 800ecea:	fa29 fb0c 	lsr.w	fp, r9, ip
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800ecee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ecf2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	for (i = 0; (1U << i) <= x; i ++) {
 800ecf6:	f10c 0c01 	add.w	ip, ip, #1
 800ecfa:	f04f 0a01 	mov.w	sl, #1
		if ((x & (1U << i)) != 0) {
 800ecfe:	f01b 0f01 	tst.w	fp, #1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800ed02:	fba0 2004 	umull	r2, r0, r0, r4
 800ed06:	fba1 5104 	umull	r5, r1, r1, r4
	for (i = 0; (1U << i) <= x; i ++) {
 800ed0a:	fa0a fa0c 	lsl.w	sl, sl, ip
		if ((x & (1U << i)) != 0) {
 800ed0e:	d00b      	beq.n	800ed28 <solve_NTRU.constprop.0+0x2c8>
	d = (uint32_t)((z + w) >> 31) - p;
 800ed10:	eb15 0508 	adds.w	r5, r5, r8
 800ed14:	eb41 0103 	adc.w	r1, r1, r3
 800ed18:	0fed      	lsrs	r5, r5, #31
 800ed1a:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
 800ed1e:	1b2d      	subs	r5, r5, r4
	d += p & -(d >> 31);
 800ed20:	ea04 73e5 	and.w	r3, r4, r5, asr #31
 800ed24:	18eb      	adds	r3, r5, r3
 800ed26:	9308      	str	r3, [sp, #32]
	d = (uint32_t)((z + w) >> 31) - p;
 800ed28:	19d2      	adds	r2, r2, r7
 800ed2a:	eb4e 0e00 	adc.w	lr, lr, r0
 800ed2e:	0fd2      	lsrs	r2, r2, #31
 800ed30:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
 800ed34:	1b12      	subs	r2, r2, r4
	d += p & -(d >> 31);
 800ed36:	ea04 73e2 	and.w	r3, r4, r2, asr #31
	for (i = 0; (1U << i) <= x; i ++) {
 800ed3a:	45ca      	cmp	sl, r9
	d += p & -(d >> 31);
 800ed3c:	4413      	add	r3, r2
	for (i = 0; (1U << i) <= x; i ++) {
 800ed3e:	d9cb      	bls.n	800ecd8 <solve_NTRU.constprop.0+0x278>
 800ed40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed42:	9b21      	ldr	r3, [sp, #132]	; 0x84
		for (v = 0, xs = Fd, ys = Gd, xd = Ft + u, yd = Gt + u;
 800ed44:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800ed48:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800ed4c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800ed4e:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 800ed52:	4635      	mov	r5, r6
 800ed54:	4622      	mov	r2, r4
 800ed56:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ed58:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800ed5a:	f04f 0900 	mov.w	r9, #0
 800ed5e:	e050      	b.n	800ee02 <solve_NTRU.constprop.0+0x3a2>
 800ed60:	200028b7 	.word	0x200028b7
 800ed64:	20002cb7 	.word	0x20002cb7
 800ed68:	2000cc2c 	.word	0x2000cc2c
 800ed6c:	7fffd801 	.word	0x7fffd801
 800ed70:	20002ab7 	.word	0x20002ab7
 800ed74:	2000cc30 	.word	0x2000cc30
 800ed78:	2000cf80 	.word	0x2000cf80
 800ed7c:	2000ca84 	.word	0x2000ca84
 800ed80:	08016df0 	.word	0x08016df0
 800ed84:	08016dc8 	.word	0x08016dc8
 800ed88:	08016ce8 	.word	0x08016ce8
 800ed8c:	79bfd7ff 	.word	0x79bfd7ff
 800ed90:	16d6ad45 	.word	0x16d6ad45
 800ed94:	2000c8e0 	.word	0x2000c8e0
 800ed98:	08016dfc 	.word	0x08016dfc
	z = zint_mod_small_unsigned(d, dlen, p, p0i, R2);
 800ed9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ed9e:	9100      	str	r1, [sp, #0]
 800eda0:	4638      	mov	r0, r7
 800eda2:	4621      	mov	r1, r4
 800eda4:	f7ff f96c 	bl	800e080 <zint_mod_small_unsigned.lto_priv.0>
 800eda8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800edaa:	9100      	str	r1, [sp, #0]
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 800edac:	59b9      	ldr	r1, [r7, r6]
 800edae:	ea4f 7c91 	mov.w	ip, r1, lsr #30
 800edb2:	9908      	ldr	r1, [sp, #32]
 800edb4:	f1cc 0c00 	rsb	ip, ip, #0
 800edb8:	ea0c 0c01 	and.w	ip, ip, r1
	d = a - b;
 800edbc:	eba0 000c 	sub.w	r0, r0, ip
	d += p & -(d >> 31);
 800edc0:	ea02 7ce0 	and.w	ip, r2, r0, asr #31
 800edc4:	4460      	add	r0, ip
			*xd = zint_mod_small_signed(xs, dlen, p, p0i, R2, Rx);
 800edc6:	f8cb 0000 	str.w	r0, [fp]
	z = zint_mod_small_unsigned(d, dlen, p, p0i, R2);
 800edca:	4621      	mov	r1, r4
 800edcc:	4640      	mov	r0, r8
 800edce:	f7ff f957 	bl	800e080 <zint_mod_small_unsigned.lto_priv.0>
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 800edd2:	f858 3006 	ldr.w	r3, [r8, r6]
 800edd6:	9908      	ldr	r1, [sp, #32]
 800edd8:	0f9b      	lsrs	r3, r3, #30
 800edda:	425b      	negs	r3, r3
 800eddc:	400b      	ands	r3, r1
	d = a - b;
 800edde:	1ac0      	subs	r0, r0, r3
	d += p & -(d >> 31);
 800ede0:	ea02 73e0 	and.w	r3, r2, r0, asr #31
 800ede4:	4418      	add	r0, r3
			v ++, xs += dlen, ys += dlen, xd += llen, yd += llen)
 800ede6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			*yd = zint_mod_small_signed(ys, dlen, p, p0i, R2, Rx);
 800ede8:	f8ca 0000 	str.w	r0, [sl]
			v ++, xs += dlen, ys += dlen, xd += llen, yd += llen)
 800edec:	441f      	add	r7, r3
 800edee:	4498      	add	r8, r3
 800edf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edf2:	449b      	add	fp, r3
 800edf4:	449a      	add	sl, r3
			v < hn;
 800edf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
			v ++, xs += dlen, ys += dlen, xd += llen, yd += llen)
 800edf8:	f109 0901 	add.w	r9, r9, #1
			v < hn;
 800edfc:	454b      	cmp	r3, r9
 800edfe:	f001 823b 	beq.w	8010278 <solve_NTRU.constprop.0+0x1818>
	z = zint_mod_small_unsigned(d, dlen, p, p0i, R2);
 800ee02:	462b      	mov	r3, r5
	if (dlen == 0) {
 800ee04:	2c00      	cmp	r4, #0
 800ee06:	d1c9      	bne.n	800ed9c <solve_NTRU.constprop.0+0x33c>
			*xd = zint_mod_small_signed(xs, dlen, p, p0i, R2, Rx);
 800ee08:	f8cb 4000 	str.w	r4, [fp]
		return 0;
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	e7ea      	b.n	800ede6 <solve_NTRU.constprop.0+0x386>
	memmove(tmp, Ft, llen * n * sizeof(uint32_t));
 800ee10:	49e1      	ldr	r1, [pc, #900]	; (800f198 <solve_NTRU.constprop.0+0x738>)
	memmove(Ft + llen * n, Gt, llen * n * sizeof(uint32_t));
 800ee12:	4ee2      	ldr	r6, [pc, #904]	; (800f19c <solve_NTRU.constprop.0+0x73c>)
 800ee14:	4de2      	ldr	r5, [pc, #904]	; (800f1a0 <solve_NTRU.constprop.0+0x740>)
	memmove(tmp, Ft, llen * n * sizeof(uint32_t));
 800ee16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee1a:	f5a1 6000 	sub.w	r0, r1, #2048	; 0x800
 800ee1e:	f005 ff31 	bl	8014c84 <memcpy>
	memmove(Ft + llen * n, Gt, llen * n * sizeof(uint32_t));
 800ee22:	49e0      	ldr	r1, [pc, #896]	; (800f1a4 <solve_NTRU.constprop.0+0x744>)
 800ee24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee28:	f5a1 6000 	sub.w	r0, r1, #2048	; 0x800
 800ee2c:	f005 ff2a 	bl	8014c84 <memcpy>
 800ee30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee32:	9312      	str	r3, [sp, #72]	; 0x48
 800ee34:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800ee38:	9310      	str	r3, [sp, #64]	; 0x40
	y = 2 - p;
 800ee3a:	f1c5 0202 	rsb	r2, r5, #2
	y *= 2 - p * y;
 800ee3e:	fb05 f302 	mul.w	r3, r5, r2
 800ee42:	f1c3 0302 	rsb	r3, r3, #2
 800ee46:	fb03 f202 	mul.w	r2, r3, r2
	y *= 2 - p * y;
 800ee4a:	fb05 f302 	mul.w	r3, r5, r2
 800ee4e:	f1c3 0302 	rsb	r3, r3, #2
 800ee52:	fb03 f202 	mul.w	r2, r3, r2
	y *= 2 - p * y;
 800ee56:	fb05 f302 	mul.w	r3, r5, r2
 800ee5a:	f1c3 0302 	rsb	r3, r3, #2
 800ee5e:	fb03 f202 	mul.w	r2, r3, r2
	y *= 2 - p * y;
 800ee62:	fb05 f302 	mul.w	r3, r5, r2
 800ee66:	3b02      	subs	r3, #2
	return (uint32_t)0x7FFFFFFF & -y;
 800ee68:	fb03 f202 	mul.w	r2, r3, r2
 800ee6c:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
		R2 = modp_R2(p, p0i);
 800ee70:	4621      	mov	r1, r4
 800ee72:	4628      	mov	r0, r5
 800ee74:	f7fe ffbc 	bl	800ddf0 <modp_R2.lto_priv.0>
 800ee78:	900e      	str	r0, [sp, #56]	; 0x38
		modp_mkgm2(gm, igm, logn_top, PRIMES[u].g, p, p0i);
 800ee7a:	48cb      	ldr	r0, [pc, #812]	; (800f1a8 <solve_NTRU.constprop.0+0x748>)
 800ee7c:	4633      	mov	r3, r6
 800ee7e:	2209      	movs	r2, #9
 800ee80:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 800ee84:	e9cd 5400 	strd	r5, r4, [sp]
 800ee88:	f7ff f822 	bl	800ded0 <modp_mkgm2>
 800ee8c:	e9dd 2638 	ldrd	r2, r6, [sp, #224]	; 0xe0
 800ee90:	49c6      	ldr	r1, [pc, #792]	; (800f1ac <solve_NTRU.constprop.0+0x74c>)
			fx[v] = modp_set(f[v], p);
 800ee92:	f912 7f01 	ldrsb.w	r7, [r2, #1]!
			gx[v] = modp_set(g[v], p);
 800ee96:	f916 0f01 	ldrsb.w	r0, [r6, #1]!
	w += p & -(w >> 31);
 800ee9a:	ea05 73e7 	and.w	r3, r5, r7, asr #31
 800ee9e:	443b      	add	r3, r7
			fx[v] = modp_set(f[v], p);
 800eea0:	f841 3f04 	str.w	r3, [r1, #4]!
	w += p & -(w >> 31);
 800eea4:	ea05 73e0 	and.w	r3, r5, r0, asr #31
 800eea8:	4403      	add	r3, r0
			gx[v] = modp_set(g[v], p);
 800eeaa:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		for (v = 0; v < n_top; v ++) {
 800eeae:	4bc0      	ldr	r3, [pc, #768]	; (800f1b0 <solve_NTRU.constprop.0+0x750>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d1ee      	bne.n	800ee92 <solve_NTRU.constprop.0+0x432>
 800eeb4:	48bf      	ldr	r0, [pc, #764]	; (800f1b4 <solve_NTRU.constprop.0+0x754>)
 800eeb6:	4fc0      	ldr	r7, [pc, #768]	; (800f1b8 <solve_NTRU.constprop.0+0x758>)
 800eeb8:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
 800eebc:	2309      	movs	r3, #9
 800eebe:	2101      	movs	r1, #1
 800eec0:	e9cd 5400 	strd	r5, r4, [sp]
 800eec4:	f7fa fb3c 	bl	8009540 <modp_NTT2_ext.part.0>
 800eec8:	48bc      	ldr	r0, [pc, #752]	; (800f1bc <solve_NTRU.constprop.0+0x75c>)
 800eeca:	2309      	movs	r3, #9
 800eecc:	f5a0 52a0 	sub.w	r2, r0, #5120	; 0x1400
 800eed0:	2101      	movs	r1, #1
 800eed2:	e9cd 5400 	strd	r5, r4, [sp]
 800eed6:	f7fa fb33 	bl	8009540 <modp_NTT2_ext.part.0>
			modp_poly_rec_res(fx, e, p, p0i, R2);
 800eeda:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800eedc:	48b5      	ldr	r0, [pc, #724]	; (800f1b4 <solve_NTRU.constprop.0+0x754>)
 800eede:	9600      	str	r6, [sp, #0]
 800eee0:	4623      	mov	r3, r4
 800eee2:	462a      	mov	r2, r5
 800eee4:	2109      	movs	r1, #9
 800eee6:	f7fa f973 	bl	80091d0 <modp_poly_rec_res>
			modp_poly_rec_res(gx, e, p, p0i, R2);
 800eeea:	48b4      	ldr	r0, [pc, #720]	; (800f1bc <solve_NTRU.constprop.0+0x75c>)
 800eeec:	9600      	str	r6, [sp, #0]
 800eeee:	2109      	movs	r1, #9
 800eef0:	f7fa f96e 	bl	80091d0 <modp_poly_rec_res>
			memmove(gm + n, igm, n * sizeof *igm);
 800eef4:	49b2      	ldr	r1, [pc, #712]	; (800f1c0 <solve_NTRU.constprop.0+0x760>)
 800eef6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eefa:	f5a1 6080 	sub.w	r0, r1, #1024	; 0x400
 800eefe:	f005 fec1 	bl	8014c84 <memcpy>
			memmove(igm + n, fx, n * sizeof *ft);
 800ef02:	f5a7 717f 	sub.w	r1, r7, #1020	; 0x3fc
 800ef06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ef0a:	f5a1 6080 	sub.w	r0, r1, #1024	; 0x400
 800ef0e:	9719      	str	r7, [sp, #100]	; 0x64
 800ef10:	f005 feb8 	bl	8014c84 <memcpy>
			memmove(fx + n, gx, n * sizeof *gt);
 800ef14:	f5a7 707f 	sub.w	r0, r7, #1020	; 0x3fc
 800ef18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ef1c:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 800ef20:	f005 feb0 	bl	8014c84 <memcpy>
 800ef24:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ef26:	f506 6000 	add.w	r0, r6, #2048	; 0x800
 800ef2a:	9013      	str	r0, [sp, #76]	; 0x4c
		for (v = 0, x = Ft + u, y = Gt + u;
 800ef2c:	463a      	mov	r2, r7
 800ef2e:	2300      	movs	r3, #0
			Fp[v] = *x;
 800ef30:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
 800ef34:	f842 1f04 	str.w	r1, [r2, #4]!
			Gp[v] = *y;
 800ef38:	f850 1033 	ldr.w	r1, [r0, r3, lsl #3]
 800ef3c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
			v < hn; v ++, x += llen, y += llen)
 800ef40:	3301      	adds	r3, #1
 800ef42:	2b80      	cmp	r3, #128	; 0x80
 800ef44:	d1f4      	bne.n	800ef30 <solve_NTRU.constprop.0+0x4d0>
 800ef46:	489f      	ldr	r0, [pc, #636]	; (800f1c4 <solve_NTRU.constprop.0+0x764>)
 800ef48:	2307      	movs	r3, #7
 800ef4a:	f5a0 5280 	sub.w	r2, r0, #4096	; 0x1000
 800ef4e:	2101      	movs	r1, #1
 800ef50:	e9cd 5400 	strd	r5, r4, [sp]
 800ef54:	f7fa faf4 	bl	8009540 <modp_NTT2_ext.part.0>
 800ef58:	489b      	ldr	r0, [pc, #620]	; (800f1c8 <solve_NTRU.constprop.0+0x768>)
 800ef5a:	2307      	movs	r3, #7
 800ef5c:	f5a0 5290 	sub.w	r2, r0, #4608	; 0x1200
 800ef60:	e9cd 5400 	strd	r5, r4, [sp]
 800ef64:	2101      	movs	r1, #1
 800ef66:	f7fa faeb 	bl	8009540 <modp_NTT2_ext.part.0>
 800ef6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ef6c:	f8df c250 	ldr.w	ip, [pc, #592]	; 800f1c0 <solve_NTRU.constprop.0+0x760>
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800ef70:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 800ef74:	f103 0210 	add.w	r2, r3, #16
 800ef78:	9208      	str	r2, [sp, #32]
 800ef7a:	f503 6801 	add.w	r8, r3, #2064	; 0x810
	z = (uint64_t)a * (uint64_t)b;
 800ef7e:	f85e 1f04 	ldr.w	r1, [lr, #4]!
 800ef82:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ef84:	f8de 3200 	ldr.w	r3, [lr, #512]	; 0x200
 800ef88:	fba7 0101 	umull	r0, r1, r7, r1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800ef8c:	fba0 2604 	umull	r2, r6, r0, r4
 800ef90:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
	z = (uint64_t)a * (uint64_t)b;
 800ef94:	fba7 3603 	umull	r3, r6, r7, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800ef98:	fba2 2705 	umull	r2, r7, r2, r5
	d = (uint32_t)((z + w) >> 31) - p;
 800ef9c:	1812      	adds	r2, r2, r0
 800ef9e:	eb47 0701 	adc.w	r7, r7, r1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800efa2:	fba3 1004 	umull	r1, r0, r3, r4
 800efa6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800efaa:	fba1 1005 	umull	r1, r0, r1, r5
	d = (uint32_t)((z + w) >> 31) - p;
 800efae:	0fd2      	lsrs	r2, r2, #31
 800efb0:	18cb      	adds	r3, r1, r3
 800efb2:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 800efb6:	eb40 0006 	adc.w	r0, r0, r6
 800efba:	1b52      	subs	r2, r2, r5
 800efbc:	0fdb      	lsrs	r3, r3, #31
 800efbe:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
	d += p & -(d >> 31);
 800efc2:	ea05 71e2 	and.w	r1, r5, r2, asr #31
	z = (uint64_t)a * (uint64_t)b;
 800efc6:	f8dc 0404 	ldr.w	r0, [ip, #1028]	; 0x404
			gtA = gx[(v << 1) + 0];
 800efca:	f8dc 7400 	ldr.w	r7, [ip, #1024]	; 0x400
			ftA = fx[(v << 1) + 0];
 800efce:	f8dc 6000 	ldr.w	r6, [ip]
	d += p & -(d >> 31);
 800efd2:	440a      	add	r2, r1
	d = (uint32_t)((z + w) >> 31) - p;
 800efd4:	1b5b      	subs	r3, r3, r5
			ftB = fx[(v << 1) + 1];
 800efd6:	f8dc 1004 	ldr.w	r1, [ip, #4]
	z = (uint64_t)a * (uint64_t)b;
 800efda:	fba2 9a00 	umull	r9, sl, r2, r0
	d += p & -(d >> 31);
 800efde:	ea05 70e3 	and.w	r0, r5, r3, asr #31
 800efe2:	4403      	add	r3, r0
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800efe4:	fba9 0b04 	umull	r0, fp, r9, r4
	z = (uint64_t)a * (uint64_t)b;
 800efe8:	fba1 1b03 	umull	r1, fp, r1, r3
 800efec:	fba2 7207 	umull	r7, r2, r2, r7
 800eff0:	e9cd 1b09 	strd	r1, fp, [sp, #36]	; 0x24
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800eff4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800eff8:	fba7 1b04 	umull	r1, fp, r7, r4
 800effc:	fba0 0b05 	umull	r0, fp, r0, r5
	z = (uint64_t)a * (uint64_t)b;
 800f000:	fba3 6306 	umull	r6, r3, r3, r6
	d = (uint32_t)((z + w) >> 31) - p;
 800f004:	eb10 0009 	adds.w	r0, r0, r9
 800f008:	eb4b 0b0a 	adc.w	fp, fp, sl
	z = (uint64_t)a * (uint64_t)b;
 800f00c:	930c      	str	r3, [sp, #48]	; 0x30
	d = (uint32_t)((z + w) >> 31) - p;
 800f00e:	0fc0      	lsrs	r0, r0, #31
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f010:	9b09      	ldr	r3, [sp, #36]	; 0x24
	d = (uint32_t)((z + w) >> 31) - p;
 800f012:	ea40 004b 	orr.w	r0, r0, fp, lsl #1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f016:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	d = (uint32_t)((z + w) >> 31) - p;
 800f01a:	eba0 0905 	sub.w	r9, r0, r5
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f01e:	fba3 0a04 	umull	r0, sl, r3, r4
 800f022:	fba1 1a05 	umull	r1, sl, r1, r5
	d = (uint32_t)((z + w) >> 31) - p;
 800f026:	19c9      	adds	r1, r1, r7
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f028:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	d = (uint32_t)((z + w) >> 31) - p;
 800f02c:	eb4a 0a02 	adc.w	sl, sl, r2
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f030:	fba6 2704 	umull	r2, r7, r6, r4
 800f034:	fba0 0705 	umull	r0, r7, r0, r5
	d = (uint32_t)((z + w) >> 31) - p;
 800f038:	18c0      	adds	r0, r0, r3
 800f03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f03c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
	d = (uint32_t)((z + w) >> 31) - p;
 800f040:	eb47 0703 	adc.w	r7, r7, r3
 800f044:	0fc0      	lsrs	r0, r0, #31
 800f046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f048:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f04c:	fba2 2705 	umull	r2, r7, r2, r5
	d = (uint32_t)((z + w) >> 31) - p;
 800f050:	1992      	adds	r2, r2, r6
 800f052:	ea4f 71d1 	mov.w	r1, r1, lsr #31
			x[0] = modp_montymul(gtB, mFp, p, p0i);
 800f056:	9e08      	ldr	r6, [sp, #32]
	d = (uint32_t)((z + w) >> 31) - p;
 800f058:	eb47 0703 	adc.w	r7, r7, r3
 800f05c:	ea41 014a 	orr.w	r1, r1, sl, lsl #1
 800f060:	0fd3      	lsrs	r3, r2, #31
	d += p & -(d >> 31);
 800f062:	ea05 72e9 	and.w	r2, r5, r9, asr #31
	d = (uint32_t)((z + w) >> 31) - p;
 800f066:	1b49      	subs	r1, r1, r5
	d += p & -(d >> 31);
 800f068:	444a      	add	r2, r9
			x[0] = modp_montymul(gtB, mFp, p, p0i);
 800f06a:	f846 2c10 	str.w	r2, [r6, #-16]
	d += p & -(d >> 31);
 800f06e:	ea05 72e1 	and.w	r2, r5, r1, asr #31
	d = (uint32_t)((z + w) >> 31) - p;
 800f072:	1b40      	subs	r0, r0, r5
	d += p & -(d >> 31);
 800f074:	4411      	add	r1, r2
	d = (uint32_t)((z + w) >> 31) - p;
 800f076:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
			v < hn; v ++, x += (llen << 1), y += (llen << 1))
 800f07a:	f106 0210 	add.w	r2, r6, #16
	d = (uint32_t)((z + w) >> 31) - p;
 800f07e:	1b5b      	subs	r3, r3, r5
			v < hn; v ++, x += (llen << 1), y += (llen << 1))
 800f080:	9208      	str	r2, [sp, #32]
	d += p & -(d >> 31);
 800f082:	ea05 72e0 	and.w	r2, r5, r0, asr #31
 800f086:	4410      	add	r0, r2
 800f088:	ea05 72e3 	and.w	r2, r5, r3, asr #31
 800f08c:	4413      	add	r3, r2
			x[llen] = modp_montymul(gtA, mFp, p, p0i);
 800f08e:	f846 1c08 	str.w	r1, [r6, #-8]
			y[llen] = modp_montymul(ftA, mGp, p, p0i);
 800f092:	f848 3c08 	str.w	r3, [r8, #-8]
			v < hn; v ++, x += (llen << 1), y += (llen << 1))
 800f096:	9b10      	ldr	r3, [sp, #64]	; 0x40
			y[0] = modp_montymul(ftB, mGp, p, p0i);
 800f098:	f848 0c10 	str.w	r0, [r8, #-16]
			v < hn; v ++, x += (llen << 1), y += (llen << 1))
 800f09c:	f10c 0c08 	add.w	ip, ip, #8
 800f0a0:	4563      	cmp	r3, ip
 800f0a2:	f108 0810 	add.w	r8, r8, #16
 800f0a6:	f47f af6a 	bne.w	800ef7e <solve_NTRU.constprop.0+0x51e>
 800f0aa:	4a48      	ldr	r2, [pc, #288]	; (800f1cc <solve_NTRU.constprop.0+0x76c>)
 800f0ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f0ae:	2308      	movs	r3, #8
 800f0b0:	2102      	movs	r1, #2
 800f0b2:	e9cd 5400 	strd	r5, r4, [sp]
 800f0b6:	f7fa fab3 	bl	8009620 <modp_iNTT2_ext.part.0>
 800f0ba:	2308      	movs	r3, #8
 800f0bc:	e9cd 5400 	strd	r5, r4, [sp]
 800f0c0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800f0c2:	4a42      	ldr	r2, [pc, #264]	; (800f1cc <solve_NTRU.constprop.0+0x76c>)
 800f0c4:	2102      	movs	r1, #2
 800f0c6:	f7fa faab 	bl	8009620 <modp_iNTT2_ext.part.0>
		if (u < slen) {
 800f0ca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	f001 86b7 	beq.w	8010e40 <solve_NTRU.constprop.0+0x23e0>
	for (u = 0; u < llen; u ++) {
 800f0d2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800f0d4:	2b02      	cmp	r3, #2
 800f0d6:	f041 86d4 	bne.w	8010e82 <solve_NTRU.constprop.0+0x2422>
	zint_rebuild_CRT(Ft, llen, llen, n << 1, PRIMES, 1, t1);
 800f0da:	4c33      	ldr	r4, [pc, #204]	; (800f1a8 <solve_NTRU.constprop.0+0x748>)
 800f0dc:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 800f0de:	9401      	str	r4, [sp, #4]
 800f0e0:	2601      	movs	r6, #1
 800f0e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f0e6:	463a      	mov	r2, r7
 800f0e8:	4639      	mov	r1, r7
 800f0ea:	f5a4 50c0 	sub.w	r0, r4, #6144	; 0x1800
 800f0ee:	9600      	str	r6, [sp, #0]
	poly_big_to_fp(rt1, Ft, llen, llen, logn);
 800f0f0:	2508      	movs	r5, #8
	zint_rebuild_CRT(Ft, llen, llen, n << 1, PRIMES, 1, t1);
 800f0f2:	f003 f935 	bl	8012360 <zint_rebuild_CRT.constprop.0>
	zint_rebuild_CRT(ft, slen, slen, n << 1, PRIMES, 1, t1);
 800f0f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f0fa:	4632      	mov	r2, r6
 800f0fc:	4631      	mov	r1, r6
 800f0fe:	f5a4 6000 	sub.w	r0, r4, #2048	; 0x800
 800f102:	e9cd 6400 	strd	r6, r4, [sp]
 800f106:	f003 f92b 	bl	8012360 <zint_rebuild_CRT.constprop.0>
	poly_big_to_fp(rt1, Ft, llen, llen, logn);
 800f10a:	463b      	mov	r3, r7
 800f10c:	463a      	mov	r2, r7
 800f10e:	f5a4 51c0 	sub.w	r1, r4, #6144	; 0x1800
 800f112:	4620      	mov	r0, r4
 800f114:	9500      	str	r5, [sp, #0]
 800f116:	f7fd febb 	bl	800ce90 <poly_big_to_fp>
	poly_big_to_fp(rt2, Gt, llen, llen, logn);
 800f11a:	463b      	mov	r3, r7
 800f11c:	463a      	mov	r2, r7
 800f11e:	f5a4 5180 	sub.w	r1, r4, #4096	; 0x1000
 800f122:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 800f126:	9500      	str	r5, [sp, #0]
 800f128:	f7fd feb2 	bl	800ce90 <poly_big_to_fp>
	memmove(tmp, ft, 2 * slen * n * sizeof *ft);
 800f12c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f130:	f5a4 6100 	sub.w	r1, r4, #2048	; 0x800
 800f134:	f5a4 50c0 	sub.w	r0, r4, #6144	; 0x1800
 800f138:	f005 fda4 	bl	8014c84 <memcpy>
	memmove(rt3, rt1, 2 * n * sizeof *rt1);
 800f13c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f140:	4621      	mov	r1, r4
 800f142:	f5a4 5080 	sub.w	r0, r4, #4096	; 0x1000
 800f146:	f005 fd9d 	bl	8014c84 <memcpy>
	poly_big_to_fp(rt3, ft, slen, slen, logn);
 800f14a:	4633      	mov	r3, r6
 800f14c:	4632      	mov	r2, r6
 800f14e:	f5a4 51c0 	sub.w	r1, r4, #6144	; 0x1800
 800f152:	4620      	mov	r0, r4
 800f154:	9500      	str	r5, [sp, #0]
 800f156:	f7fd fe9b 	bl	800ce90 <poly_big_to_fp>
	poly_big_to_fp(rt4, gt, slen, slen, logn);
 800f15a:	4633      	mov	r3, r6
 800f15c:	4632      	mov	r2, r6
 800f15e:	f5a4 51a0 	sub.w	r1, r4, #5120	; 0x1400
 800f162:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 800f166:	9500      	str	r5, [sp, #0]
 800f168:	f7fd fe92 	bl	800ce90 <poly_big_to_fp>
	memmove(tmp, rt1, 4 * n * sizeof *rt1);
 800f16c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f170:	f5a4 5180 	sub.w	r1, r4, #4096	; 0x1000
 800f174:	f5a4 50c0 	sub.w	r0, r4, #6144	; 0x1800
 800f178:	f005 fd1e 	bl	8014bb8 <memmove>
	Zf(FFT)(rt1, logn);
 800f17c:	4629      	mov	r1, r5
 800f17e:	f5a4 50c0 	sub.w	r0, r4, #6144	; 0x1800
 800f182:	f7fd fa7d 	bl	800c680 <falcon_inner_FFT>
	Zf(FFT)(rt2, logn);
 800f186:	4629      	mov	r1, r5
 800f188:	f5a4 5080 	sub.w	r0, r4, #4096	; 0x1000
 800f18c:	f7fd fa78 	bl	800c680 <falcon_inner_FFT>
	Zf(FFT)(rt3, logn);
 800f190:	4629      	mov	r1, r5
 800f192:	f5a4 6000 	sub.w	r0, r4, #2048	; 0x800
 800f196:	e01b      	b.n	800f1d0 <solve_NTRU.constprop.0+0x770>
 800f198:	2000d0e0 	.word	0x2000d0e0
 800f19c:	16d6ad45 	.word	0x16d6ad45
 800f1a0:	7fffd801 	.word	0x7fffd801
 800f1a4:	2000d8e0 	.word	0x2000d8e0
 800f1a8:	2000e0e0 	.word	0x2000e0e0
 800f1ac:	2000ecdc 	.word	0x2000ecdc
 800f1b0:	20002ab7 	.word	0x20002ab7
 800f1b4:	2000ece0 	.word	0x2000ece0
 800f1b8:	2000f0dc 	.word	0x2000f0dc
 800f1bc:	2000f4e0 	.word	0x2000f4e0
 800f1c0:	2000e8e0 	.word	0x2000e8e0
 800f1c4:	2000f0e0 	.word	0x2000f0e0
 800f1c8:	2000f2e0 	.word	0x2000f2e0
 800f1cc:	2000e4e0 	.word	0x2000e4e0
 800f1d0:	f7fd fa56 	bl	800c680 <falcon_inner_FFT>
	Zf(FFT)(rt4, logn);
 800f1d4:	4629      	mov	r1, r5
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f7fd fa52 	bl	800c680 <falcon_inner_FFT>
 800f1dc:	4bc6      	ldr	r3, [pc, #792]	; (800f4f8 <solve_NTRU.constprop.0+0xa98>)
 800f1de:	931a      	str	r3, [sp, #104]	; 0x68
 800f1e0:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 800f1e4:	9115      	str	r1, [sp, #84]	; 0x54
 800f1e6:	f5a4 6140 	sub.w	r1, r4, #3072	; 0xc00
 800f1ea:	9114      	str	r1, [sp, #80]	; 0x50
 800f1ec:	f5a4 6180 	sub.w	r1, r4, #1024	; 0x400
 800f1f0:	9113      	str	r1, [sp, #76]	; 0x4c
 800f1f2:	f604 31f8 	addw	r1, r4, #3064	; 0xbf8
 800f1f6:	f504 62ff 	add.w	r2, r4, #2040	; 0x7f8
 800f1fa:	9112      	str	r1, [sp, #72]	; 0x48
 800f1fc:	9921      	ldr	r1, [sp, #132]	; 0x84
 800f1fe:	921c      	str	r2, [sp, #112]	; 0x70
 800f200:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f204:	f501 717e 	add.w	r1, r1, #1016	; 0x3f8
 800f208:	9118      	str	r1, [sp, #96]	; 0x60
		f_im = f[u + hn];
 800f20a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		g_im = g[u + hn];
 800f20c:	9a08      	ldr	r2, [sp, #32]
		f_im = f[u + hn];
 800f20e:	f8d3 b000 	ldr.w	fp, [r3]
 800f212:	685d      	ldr	r5, [r3, #4]
		G_im = G[u + hn];
 800f214:	9914      	ldr	r1, [sp, #80]	; 0x50
		F_im = F[u + hn];
 800f216:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 800f21a:	f103 0e08 	add.w	lr, r3, #8
		g_im = g[u + hn];
 800f21e:	f5a2 737e 	sub.w	r3, r2, #1016	; 0x3f8
 800f222:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 800f226:	f8d3 a000 	ldr.w	sl, [r3]
 800f22a:	f5a2 737d 	sub.w	r3, r2, #1012	; 0x3f4
	x ^= (uint64_t)1 << 63;
 800f22e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800f232:	681c      	ldr	r4, [r3, #0]
		G_im = G[u + hn];
 800f234:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800f238:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f23c:	9114      	str	r1, [sp, #80]	; 0x50
 800f23e:	460b      	mov	r3, r1
		F_re = F[u];
 800f240:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f242:	e9f1 8902 	ldrd	r8, r9, [r1, #8]!
 800f246:	9109      	str	r1, [sp, #36]	; 0x24
		F_im = F[u + hn];
 800f248:	e8fc 1202 	ldrd	r1, r2, [ip], #8
		f_re = f[u];
 800f24c:	e9d3 67fe 	ldrd	r6, r7, [r3, #1016]	; 0x3f8
		F_im = F[u + hn];
 800f250:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
		G_re = G[u];
 800f254:	e9dc 23fe 	ldrd	r2, r3, [ip, #1016]	; 0x3f8
		FPC_MUL(a_re, a_im, F_re, F_im, f_re, fpr_neg(f_im));
 800f258:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
		G_re = G[u];
 800f25c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		FPC_MUL(a_re, a_im, F_re, F_im, f_re, fpr_neg(f_im));
 800f260:	4632      	mov	r2, r6
 800f262:	463b      	mov	r3, r7
		g_re = g[u];
 800f264:	e9de 67fe 	ldrd	r6, r7, [lr, #1016]	; 0x3f8
		FPC_MUL(a_re, a_im, F_re, F_im, f_re, fpr_neg(f_im));
 800f268:	4640      	mov	r0, r8
 800f26a:	4649      	mov	r1, r9
		F_im = F[u + hn];
 800f26c:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
		g_re = g[u];
 800f270:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
		FPC_MUL(a_re, a_im, F_re, F_im, f_re, fpr_neg(f_im));
 800f274:	f7fc fef4 	bl	800c060 <falcon_inner_fpr_mul>
 800f278:	462b      	mov	r3, r5
 800f27a:	4607      	mov	r7, r0
 800f27c:	460e      	mov	r6, r1
 800f27e:	465a      	mov	r2, fp
 800f280:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f284:	f7fc feec 	bl	800c060 <falcon_inner_fpr_mul>
 800f288:	4602      	mov	r2, r0
	return fpr_add(x, y);
 800f28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f28e:	4638      	mov	r0, r7
 800f290:	4631      	mov	r1, r6
 800f292:	f7fc fe2d 	bl	800bef0 <falcon_inner_fpr_add>
 800f296:	465a      	mov	r2, fp
 800f298:	460e      	mov	r6, r1
 800f29a:	462b      	mov	r3, r5
 800f29c:	4607      	mov	r7, r0
 800f29e:	4649      	mov	r1, r9
 800f2a0:	4640      	mov	r0, r8
 800f2a2:	f7fc fedd 	bl	800c060 <falcon_inner_fpr_mul>
 800f2a6:	46b0      	mov	r8, r6
 800f2a8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800f2ac:	4606      	mov	r6, r0
 800f2ae:	460d      	mov	r5, r1
 800f2b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f2b4:	f7fc fed4 	bl	800c060 <falcon_inner_fpr_mul>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	4630      	mov	r0, r6
 800f2be:	4629      	mov	r1, r5
 800f2c0:	f7fc fe16 	bl	800bef0 <falcon_inner_fpr_add>
		FPC_MUL(b_re, b_im, G_re, G_im, g_re, fpr_neg(g_im));
 800f2c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
		FPC_MUL(a_re, a_im, F_re, F_im, f_re, fpr_neg(f_im));
 800f2c8:	4606      	mov	r6, r0
 800f2ca:	460d      	mov	r5, r1
		FPC_MUL(b_re, b_im, G_re, G_im, g_re, fpr_neg(g_im));
 800f2cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f2d0:	f7fc fec6 	bl	800c060 <falcon_inner_fpr_mul>
	x ^= (uint64_t)1 << 63;
 800f2d4:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800f2d8:	4683      	mov	fp, r0
 800f2da:	4689      	mov	r9, r1
 800f2dc:	4623      	mov	r3, r4
 800f2de:	4652      	mov	r2, sl
 800f2e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f2e4:	f7fc febc 	bl	800c060 <falcon_inner_fpr_mul>
 800f2e8:	4602      	mov	r2, r0
	return fpr_add(x, y);
 800f2ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f2ee:	4658      	mov	r0, fp
 800f2f0:	4649      	mov	r1, r9
 800f2f2:	f7fc fdfd 	bl	800bef0 <falcon_inner_fpr_add>
 800f2f6:	4652      	mov	r2, sl
 800f2f8:	468c      	mov	ip, r1
 800f2fa:	4623      	mov	r3, r4
 800f2fc:	4683      	mov	fp, r0
 800f2fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f302:	46e2      	mov	sl, ip
 800f304:	f7fc feac 	bl	800c060 <falcon_inner_fpr_mul>
 800f308:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f30c:	4681      	mov	r9, r0
 800f30e:	460c      	mov	r4, r1
 800f310:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f314:	f7fc fea4 	bl	800c060 <falcon_inner_fpr_mul>
 800f318:	4602      	mov	r2, r0
 800f31a:	460b      	mov	r3, r1
 800f31c:	4648      	mov	r0, r9
 800f31e:	4621      	mov	r1, r4
 800f320:	f7fc fde6 	bl	800bef0 <falcon_inner_fpr_add>
		d[u] = fpr_add(a_re, b_re);
 800f324:	465a      	mov	r2, fp
		FPC_MUL(b_re, b_im, G_re, G_im, g_re, fpr_neg(g_im));
 800f326:	4681      	mov	r9, r0
 800f328:	460c      	mov	r4, r1
		d[u] = fpr_add(a_re, b_re);
 800f32a:	4653      	mov	r3, sl
 800f32c:	4638      	mov	r0, r7
 800f32e:	4641      	mov	r1, r8
 800f330:	f7fc fdde 	bl	800bef0 <falcon_inner_fpr_add>
 800f334:	9a08      	ldr	r2, [sp, #32]
 800f336:	e9e2 0102 	strd	r0, r1, [r2, #8]!
		d[u + hn] = fpr_add(a_im, b_im);
 800f33a:	4623      	mov	r3, r4
		d[u] = fpr_add(a_re, b_re);
 800f33c:	9208      	str	r2, [sp, #32]
		d[u + hn] = fpr_add(a_im, b_im);
 800f33e:	4630      	mov	r0, r6
 800f340:	464a      	mov	r2, r9
 800f342:	4629      	mov	r1, r5
 800f344:	f7fc fdd4 	bl	800bef0 <falcon_inner_fpr_add>
 800f348:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f34a:	e9e3 0102 	strd	r0, r1, [r3, #8]!
	for (u = 0; u < hn; u ++) {
 800f34e:	9909      	ldr	r1, [sp, #36]	; 0x24
		d[u + hn] = fpr_add(a_im, b_im);
 800f350:	9312      	str	r3, [sp, #72]	; 0x48
	for (u = 0; u < hn; u ++) {
 800f352:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f354:	428b      	cmp	r3, r1
 800f356:	f47f af58 	bne.w	800f20a <solve_NTRU.constprop.0+0x7aa>
	Zf(poly_invnorm2_fft)(rt6, rt3, rt4, logn);
 800f35a:	4a68      	ldr	r2, [pc, #416]	; (800f4fc <solve_NTRU.constprop.0+0xa9c>)
	Zf(iFFT)(rt5, logn);
 800f35c:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 800f500 <solve_NTRU.constprop.0+0xaa0>
	Zf(poly_invnorm2_fft)(rt6, rt3, rt4, logn);
 800f360:	2308      	movs	r3, #8
 800f362:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800f366:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 800f36a:	f7fe f929 	bl	800d5c0 <falcon_inner_poly_invnorm2_fft>
	Zf(poly_mul_autoadj_fft)(rt5, rt6, logn);
 800f36e:	4965      	ldr	r1, [pc, #404]	; (800f504 <solve_NTRU.constprop.0+0xaa4>)
 800f370:	2208      	movs	r2, #8
 800f372:	f5a1 6000 	sub.w	r0, r1, #2048	; 0x800
 800f376:	f7fd fbc3 	bl	800cb00 <falcon_inner_poly_mul_autoadj_fft>
	Zf(iFFT)(rt5, logn);
 800f37a:	4863      	ldr	r0, [pc, #396]	; (800f508 <solve_NTRU.constprop.0+0xaa8>)
 800f37c:	2108      	movs	r1, #8
 800f37e:	f7fd fa5f 	bl	800c840 <falcon_inner_iFFT>
 800f382:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f384:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 800f388:	3338      	adds	r3, #56	; 0x38
 800f38a:	930c      	str	r3, [sp, #48]	; 0x30
		z = rt5[u];
 800f38c:	f85b 0f08 	ldr.w	r0, [fp, #8]!
 800f390:	f8db 7004 	ldr.w	r7, [fp, #4]
		if (!fpr_lt(z, fpr_ptwo63m1) || !fpr_lt(fpr_mtwo63m1, z)) {
 800f394:	f04f 33ff 	mov.w	r3, #4294967295
 800f398:	4283      	cmp	r3, r0
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800f39a:	ea4f 2387 	mov.w	r3, r7, lsl #10
	e = 1085 - ((int)(x >> 52) & 0x7FF);
 800f39e:	f3c7 510a 	ubfx	r1, r7, #20, #11
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800f3a2:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800f3a6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 800f3aa:	f5c1 737f 	rsb	r3, r1, #1020	; 0x3fc
 800f3ae:	f103 0301 	add.w	r3, r3, #1
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800f3b2:	ea4f 2c80 	mov.w	ip, r0, lsl #10
 800f3b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 800f3ba:	ea0c 7ce3 	and.w	ip, ip, r3, asr #31
 800f3be:	ea02 72e3 	and.w	r2, r2, r3, asr #31
 800f3c2:	4b52      	ldr	r3, [pc, #328]	; (800f50c <solve_NTRU.constprop.0+0xaac>)
	e = 1085 - ((int)(x >> 52) & 0x7FF);
 800f3c4:	f5c1 6487 	rsb	r4, r1, #1080	; 0x438
 800f3c8:	f104 0405 	add.w	r4, r4, #5
 800f3cc:	41bb      	sbcs	r3, r7
	e &= 63;
 800f3ce:	f004 053f 	and.w	r5, r4, #63	; 0x3f
 800f3d2:	ea4f 7ed7 	mov.w	lr, r7, lsr #31
	return x >> (n & 31);
 800f3d6:	f004 041f 	and.w	r4, r4, #31
 800f3da:	f2c0 8749 	blt.w	8010270 <solve_NTRU.constprop.0+0x1810>
	 * We cannot simply invert the comparison result in that case
	 * because it would not handle the edge case x = y properly.
	 */
	int cc0, cc1;

	cc0 = *(int64_t *)&x < *(int64_t *)&y;
 800f3de:	4b4c      	ldr	r3, [pc, #304]	; (800f510 <solve_NTRU.constprop.0+0xab0>)
	d = fpr_ulsh(m, 63 - e);
 800f3e0:	f1c5 063f 	rsb	r6, r5, #63	; 0x3f
	cc0 = *(int64_t *)&x < *(int64_t *)&y;
 800f3e4:	2801      	cmp	r0, #1
 800f3e6:	eb77 0303 	sbcs.w	r3, r7, r3
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800f3ea:	ea4f 71e6 	mov.w	r1, r6, asr #31
 800f3ee:	ea4f 1366 	mov.w	r3, r6, asr #5
 800f3f2:	9308      	str	r3, [sp, #32]
 800f3f4:	9109      	str	r1, [sp, #36]	; 0x24
 800f3f6:	ea8c 0302 	eor.w	r3, ip, r2
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800f3fa:	f345 1140 	sbfx	r1, r5, #5, #1
 800f3fe:	460d      	mov	r5, r1
 800f400:	ea01 0103 	and.w	r1, r1, r3
 800f404:	ea22 0505 	bic.w	r5, r2, r5
	return x >> (n & 31);
 800f408:	f1c4 0a20 	rsb	sl, r4, #32
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800f40c:	ea81 010c 	eor.w	r1, r1, ip
	return x >> (n & 31);
 800f410:	fa05 fa0a 	lsl.w	sl, r5, sl
 800f414:	fa21 f104 	lsr.w	r1, r1, r4
 800f418:	ea41 010a 	orr.w	r1, r1, sl
 800f41c:	f1a4 0a20 	sub.w	sl, r4, #32
 800f420:	fa25 fa0a 	lsr.w	sl, r5, sl
 800f424:	ea41 010a 	orr.w	r1, r1, sl
 800f428:	fa25 fa04 	lsr.w	sl, r5, r4
	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 800f42c:	f1ce 0500 	rsb	r5, lr, #0
 800f430:	950a      	str	r5, [sp, #40]	; 0x28
	cc1 = *(int64_t *)&x > *(int64_t *)&y;
	return cc0 ^ ((cc0 ^ cc1) & (int)((x & y) >> 63));
 800f432:	4d37      	ldr	r5, [pc, #220]	; (800f510 <solve_NTRU.constprop.0+0xab0>)
	cc0 = *(int64_t *)&x < *(int64_t *)&y;
 800f434:	bfac      	ite	ge
 800f436:	2001      	movge	r0, #1
 800f438:	2000      	movlt	r0, #0
	return cc0 ^ ((cc0 ^ cc1) & (int)((x & y) >> 63));
 800f43a:	42af      	cmp	r7, r5
 800f43c:	bfac      	ite	ge
 800f43e:	4605      	movge	r5, r0
 800f440:	f080 0501 	eorlt.w	r5, r0, #1
 800f444:	ea05 75d7 	and.w	r5, r5, r7, lsr #31
	return x << (n & 31);
 800f448:	f006 081f 	and.w	r8, r6, #31
 800f44c:	42a8      	cmp	r0, r5
 800f44e:	f066 061f 	orn	r6, r6, #31
 800f452:	f1c8 0920 	rsb	r9, r8, #32
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800f456:	f04f 04c8 	mov.w	r4, #200	; 0xc8
 800f45a:	f000 8709 	beq.w	8010270 <solve_NTRU.constprop.0+0x1810>
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800f45e:	9808      	ldr	r0, [sp, #32]
 800f460:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f462:	4240      	negs	r0, r0
 800f464:	eb67 0547 	sbc.w	r5, r7, r7, lsl #1
 800f468:	402b      	ands	r3, r5
 800f46a:	ea2c 0000 	bic.w	r0, ip, r0
 800f46e:	4053      	eors	r3, r2
	return x << (n & 31);
 800f470:	fa00 f606 	lsl.w	r6, r0, r6
 800f474:	fa03 f308 	lsl.w	r3, r3, r8
 800f478:	fa20 f909 	lsr.w	r9, r0, r9
 800f47c:	4333      	orrs	r3, r6
 800f47e:	ea43 0309 	orr.w	r3, r3, r9
 800f482:	fa00 f008 	lsl.w	r0, r0, r8
	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 800f486:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800f48a:	4302      	orrs	r2, r0
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 800f48c:	4250      	negs	r0, r2
 800f48e:	4302      	orrs	r2, r0
 800f490:	0f5b      	lsrs	r3, r3, #29
 800f492:	ea43 73d2 	orr.w	r3, r3, r2, lsr #31
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800f496:	fa24 f303 	lsr.w	r3, r4, r3
 800f49a:	f003 0301 	and.w	r3, r3, #1
	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 800f49e:	f1ce 0200 	rsb	r2, lr, #0
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800f4a2:	185b      	adds	r3, r3, r1
	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 800f4a4:	ea83 0302 	eor.w	r3, r3, r2
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800f4a8:	f14a 0100 	adc.w	r1, sl, #0
	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 800f4ac:	4051      	eors	r1, r2
 800f4ae:	eb13 000e 	adds.w	r0, r3, lr
	return fpr_scaled(i, 0);
 800f4b2:	f141 0100 	adc.w	r1, r1, #0
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	f7fc fcd2 	bl	800be60 <falcon_inner_fpr_scaled>
	for (u = 0; u < n; u ++) {
 800f4bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4be:	455b      	cmp	r3, fp
		rt5[u] = fpr_of(fpr_rint(z));
 800f4c0:	e9cb 0100 	strd	r0, r1, [fp]
	for (u = 0; u < n; u ++) {
 800f4c4:	f47f af62 	bne.w	800f38c <solve_NTRU.constprop.0+0x92c>
	Zf(FFT)(rt5, logn);
 800f4c8:	480f      	ldr	r0, [pc, #60]	; (800f508 <solve_NTRU.constprop.0+0xaa8>)
 800f4ca:	f8df a048 	ldr.w	sl, [pc, #72]	; 800f514 <solve_NTRU.constprop.0+0xab4>
 800f4ce:	2108      	movs	r1, #8
 800f4d0:	f7fd f8d6 	bl	800c680 <falcon_inner_FFT>
	Zf(poly_mul_fft)(rt3, rt5, logn);
 800f4d4:	490c      	ldr	r1, [pc, #48]	; (800f508 <solve_NTRU.constprop.0+0xaa8>)
 800f4d6:	2208      	movs	r2, #8
 800f4d8:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 800f4dc:	f7fd fab0 	bl	800ca40 <falcon_inner_poly_mul_fft>
	Zf(poly_mul_fft)(rt4, rt5, logn);
 800f4e0:	4909      	ldr	r1, [pc, #36]	; (800f508 <solve_NTRU.constprop.0+0xaa8>)
 800f4e2:	2208      	movs	r2, #8
 800f4e4:	f5a1 6000 	sub.w	r0, r1, #2048	; 0x800
 800f4e8:	f7fd faaa 	bl	800ca40 <falcon_inner_poly_mul_fft>
 800f4ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4ee:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800f4f0:	f503 65ff 	add.w	r5, r3, #2040	; 0x7f8
 800f4f4:	4654      	mov	r4, sl
 800f4f6:	e00f      	b.n	800f518 <solve_NTRU.constprop.0+0xab8>
 800f4f8:	2000c8d8 	.word	0x2000c8d8
 800f4fc:	2000e0e0 	.word	0x2000e0e0
 800f500:	2000e8d8 	.word	0x2000e8d8
 800f504:	2000f0e0 	.word	0x2000f0e0
 800f508:	2000e8e0 	.word	0x2000e8e0
 800f50c:	43dfffff 	.word	0x43dfffff
 800f510:	c3e00000 	.word	0xc3e00000
 800f514:	2000d8d8 	.word	0x2000d8d8
	y ^= (uint64_t)1 << 63;
 800f518:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800f51c:	6863      	ldr	r3, [r4, #4]
	return fpr_add(x, y);
 800f51e:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 800f522:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f526:	f7fc fce3 	bl	800bef0 <falcon_inner_fpr_add>
	for (u = 0; u < n; u ++) {
 800f52a:	42b5      	cmp	r5, r6
		a[u] = fpr_sub(a[u], b[u]);
 800f52c:	e9c6 0100 	strd	r0, r1, [r6]
	for (u = 0; u < n; u ++) {
 800f530:	d1f2      	bne.n	800f518 <solve_NTRU.constprop.0+0xab8>
 800f532:	f8df 9390 	ldr.w	r9, [pc, #912]	; 800f8c4 <solve_NTRU.constprop.0+0xe64>
 800f536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f538:	f509 5b80 	add.w	fp, r9, #4096	; 0x1000
 800f53c:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 800f540:	9308      	str	r3, [sp, #32]
 800f542:	465d      	mov	r5, fp
 800f544:	464c      	mov	r4, r9
 800f546:	461e      	mov	r6, r3
	y ^= (uint64_t)1 << 63;
 800f548:	f855 2f08 	ldr.w	r2, [r5, #8]!
 800f54c:	686b      	ldr	r3, [r5, #4]
	return fpr_add(x, y);
 800f54e:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
 800f552:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f556:	f7fc fccb 	bl	800bef0 <falcon_inner_fpr_add>
 800f55a:	42a6      	cmp	r6, r4
		a[u] = fpr_sub(a[u], b[u]);
 800f55c:	e9c4 0100 	strd	r0, r1, [r4]
	for (u = 0; u < n; u ++) {
 800f560:	d1f2      	bne.n	800f548 <solve_NTRU.constprop.0+0xae8>
	Zf(iFFT)(rt1, logn);
 800f562:	48d9      	ldr	r0, [pc, #868]	; (800f8c8 <solve_NTRU.constprop.0+0xe68>)
 800f564:	2108      	movs	r1, #8
 800f566:	f7fd f96b 	bl	800c840 <falcon_inner_iFFT>
	Zf(iFFT)(rt2, logn);
 800f56a:	48d8      	ldr	r0, [pc, #864]	; (800f8cc <solve_NTRU.constprop.0+0xe6c>)
 800f56c:	2108      	movs	r1, #8
 800f56e:	f7fd f967 	bl	800c840 <falcon_inner_iFFT>
	memmove(rt3, rt1, 2 * n * sizeof *rt1);
 800f572:	49d5      	ldr	r1, [pc, #852]	; (800f8c8 <solve_NTRU.constprop.0+0xe68>)
 800f574:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f578:	f501 6000 	add.w	r0, r1, #2048	; 0x800
 800f57c:	f005 fb1c 	bl	8014bb8 <memmove>
 800f580:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800f582:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f586:	469b      	mov	fp, r3
		Ft[u] = (uint32_t)fpr_rint(rt1[u]);
 800f588:	f859 1f08 	ldr.w	r1, [r9, #8]!
		Gt[u] = (uint32_t)fpr_rint(rt2[u]);
 800f58c:	f85a 5f08 	ldr.w	r5, [sl, #8]!
		Ft[u] = (uint32_t)fpr_rint(rt1[u]);
 800f590:	f8d9 6004 	ldr.w	r6, [r9, #4]
	e = 1085 - ((int)(x >> 52) & 0x7FF);
 800f594:	f3c6 520a 	ubfx	r2, r6, #20, #11
 800f598:	f5c2 6087 	rsb	r0, r2, #1080	; 0x438
 800f59c:	3005      	adds	r0, #5
	e &= 63;
 800f59e:	f000 073f 	and.w	r7, r0, #63	; 0x3f
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800f5a2:	02b3      	lsls	r3, r6, #10
	d = fpr_ulsh(m, 63 - e);
 800f5a4:	f1c7 0c3f 	rsb	ip, r7, #63	; 0x3f
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800f5a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 800f5ac:	f5c2 727f 	rsb	r2, r2, #1020	; 0x3fc
 800f5b0:	3201      	adds	r2, #1
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800f5b2:	ea4f 2e81 	mov.w	lr, r1, lsl #10
 800f5b6:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800f5ba:	ea4f 136c 	mov.w	r3, ip, asr #5
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 800f5be:	ea0e 7ee2 	and.w	lr, lr, r2, asr #31
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800f5c2:	425b      	negs	r3, r3
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800f5c4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800f5c8:	ea2e 0403 	bic.w	r4, lr, r3
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 800f5cc:	ea01 71e2 	and.w	r1, r1, r2, asr #31
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800f5d0:	ea4f 73ec 	mov.w	r3, ip, asr #31
 800f5d4:	ea8e 0201 	eor.w	r2, lr, r1
 800f5d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800f5dc:	4013      	ands	r3, r2
	return x << (n & 31);
 800f5de:	f00c 081f 	and.w	r8, ip, #31
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800f5e2:	404b      	eors	r3, r1
	return x << (n & 31);
 800f5e4:	f06c 0c1f 	orn	ip, ip, #31
 800f5e8:	fa04 fc0c 	lsl.w	ip, r4, ip
 800f5ec:	fa03 f308 	lsl.w	r3, r3, r8
 800f5f0:	ea43 030c 	orr.w	r3, r3, ip
 800f5f4:	f1c8 0c20 	rsb	ip, r8, #32
 800f5f8:	fa24 fc0c 	lsr.w	ip, r4, ip
 800f5fc:	ea43 030c 	orr.w	r3, r3, ip
	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 800f600:	f023 4c60 	bic.w	ip, r3, #3758096384	; 0xe0000000
	return x << (n & 31);
 800f604:	fa04 f408 	lsl.w	r4, r4, r8
	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 800f608:	ea4c 0404 	orr.w	r4, ip, r4
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800f60c:	f347 1c40 	sbfx	ip, r7, #5, #1
 800f610:	ea21 070c 	bic.w	r7, r1, ip
 800f614:	ea02 020c 	and.w	r2, r2, ip
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 800f618:	f1c4 0c00 	rsb	ip, r4, #0
	return x >> (n & 31);
 800f61c:	f000 001f 	and.w	r0, r0, #31
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 800f620:	ea4c 0404 	orr.w	r4, ip, r4
 800f624:	0f5b      	lsrs	r3, r3, #29
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800f626:	ea82 020e 	eor.w	r2, r2, lr
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 800f62a:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31
	return x >> (n & 31);
 800f62e:	f1c0 0420 	rsb	r4, r0, #32
 800f632:	fa22 f100 	lsr.w	r1, r2, r0
 800f636:	fa07 f404 	lsl.w	r4, r7, r4
		Gt[u] = (uint32_t)fpr_rint(rt2[u]);
 800f63a:	f8da 2004 	ldr.w	r2, [sl, #4]
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800f63e:	f04f 08c8 	mov.w	r8, #200	; 0xc8
	return x >> (n & 31);
 800f642:	3820      	subs	r0, #32
 800f644:	fa27 f000 	lsr.w	r0, r7, r0
 800f648:	4321      	orrs	r1, r4
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800f64a:	fa28 f303 	lsr.w	r3, r8, r3
	return x >> (n & 31);
 800f64e:	4301      	orrs	r1, r0
	e = 1085 - ((int)(x >> 52) & 0x7FF);
 800f650:	f3c2 540a 	ubfx	r4, r2, #20, #11
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800f654:	f003 0301 	and.w	r3, r3, #1
 800f658:	185b      	adds	r3, r3, r1
	e = 1085 - ((int)(x >> 52) & 0x7FF);
 800f65a:	f5c4 6087 	rsb	r0, r4, #1080	; 0x438
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800f65e:	0291      	lsls	r1, r2, #10
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 800f660:	f5c4 747f 	rsb	r4, r4, #1020	; 0x3fc
	s = (uint32_t)(x >> 63);
 800f664:	0ff6      	lsrs	r6, r6, #31
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 800f666:	3401      	adds	r4, #1
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800f668:	ea41 5195 	orr.w	r1, r1, r5, lsr #22
 800f66c:	02ad      	lsls	r5, r5, #10
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 800f66e:	ea05 7ce4 	and.w	ip, r5, r4, asr #31
	e = 1085 - ((int)(x >> 52) & 0x7FF);
 800f672:	3005      	adds	r0, #5
	s = (uint32_t)(x >> 63);
 800f674:	0fd5      	lsrs	r5, r2, #31
	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 800f676:	4272      	negs	r2, r6
	e &= 63;
 800f678:	f000 073f 	and.w	r7, r0, #63	; 0x3f
	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 800f67c:	4053      	eors	r3, r2
	d = fpr_ulsh(m, 63 - e);
 800f67e:	f1c7 0e3f 	rsb	lr, r7, #63	; 0x3f
	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 800f682:	199b      	adds	r3, r3, r6
		Ft[u] = (uint32_t)fpr_rint(rt1[u]);
 800f684:	f84b 3f04 	str.w	r3, [fp, #4]!
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800f688:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800f68c:	ea4f 136e 	mov.w	r3, lr, asr #5
 800f690:	425b      	negs	r3, r3
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800f692:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 800f696:	ea01 71e4 	and.w	r1, r1, r4, asr #31
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800f69a:	ea2c 0403 	bic.w	r4, ip, r3
 800f69e:	ea4f 73ee 	mov.w	r3, lr, asr #31
 800f6a2:	ea8c 0201 	eor.w	r2, ip, r1
 800f6a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800f6aa:	4013      	ands	r3, r2
	return x << (n & 31);
 800f6ac:	f00e 061f 	and.w	r6, lr, #31
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800f6b0:	404b      	eors	r3, r1
	return x << (n & 31);
 800f6b2:	f06e 0e1f 	orn	lr, lr, #31
 800f6b6:	fa04 fe0e 	lsl.w	lr, r4, lr
 800f6ba:	40b3      	lsls	r3, r6
 800f6bc:	ea43 030e 	orr.w	r3, r3, lr
 800f6c0:	f1c6 0e20 	rsb	lr, r6, #32
 800f6c4:	fa24 fe0e 	lsr.w	lr, r4, lr
 800f6c8:	ea43 030e 	orr.w	r3, r3, lr
 800f6cc:	40b4      	lsls	r4, r6
	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 800f6ce:	f023 4660 	bic.w	r6, r3, #3758096384	; 0xe0000000
 800f6d2:	4334      	orrs	r4, r6
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800f6d4:	f347 1640 	sbfx	r6, r7, #5, #1
 800f6d8:	ea21 0106 	bic.w	r1, r1, r6
 800f6dc:	4032      	ands	r2, r6
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 800f6de:	4266      	negs	r6, r4
	return x >> (n & 31);
 800f6e0:	f000 001f 	and.w	r0, r0, #31
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 800f6e4:	4334      	orrs	r4, r6
 800f6e6:	0f5b      	lsrs	r3, r3, #29
 800f6e8:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800f6ec:	ea82 020c 	eor.w	r2, r2, ip
	return x >> (n & 31);
 800f6f0:	f1c0 0420 	rsb	r4, r0, #32
 800f6f4:	40c2      	lsrs	r2, r0
 800f6f6:	fa01 f404 	lsl.w	r4, r1, r4
 800f6fa:	3820      	subs	r0, #32
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800f6fc:	fa28 f303 	lsr.w	r3, r8, r3
	return x >> (n & 31);
 800f700:	4322      	orrs	r2, r4
 800f702:	fa21 f000 	lsr.w	r0, r1, r0
 800f706:	4302      	orrs	r2, r0
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800f708:	f003 0301 	and.w	r3, r3, #1
 800f70c:	189b      	adds	r3, r3, r2
	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 800f70e:	426a      	negs	r2, r5
 800f710:	4053      	eors	r3, r2
 800f712:	195b      	adds	r3, r3, r5
		Gt[u] = (uint32_t)fpr_rint(rt2[u]);
 800f714:	f8cb 3400 	str.w	r3, [fp, #1024]	; 0x400
	for (u = 0; u < n; u ++) {
 800f718:	9b08      	ldr	r3, [sp, #32]
 800f71a:	454b      	cmp	r3, r9
 800f71c:	f47f af34 	bne.w	800f588 <solve_NTRU.constprop.0+0xb28>
	R2 = modp_R2(p, p0i);
 800f720:	4d6b      	ldr	r5, [pc, #428]	; (800f8d0 <solve_NTRU.constprop.0+0xe70>)
 800f722:	4c6c      	ldr	r4, [pc, #432]	; (800f8d4 <solve_NTRU.constprop.0+0xe74>)
 800f724:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800f728:	4629      	mov	r1, r5
 800f72a:	4620      	mov	r0, r4
 800f72c:	f7fe fb60 	bl	800ddf0 <modp_R2.lto_priv.0>
	modp_mkgm2(gm, igm, logn, PRIMES[0].g, p, p0i);
 800f730:	4969      	ldr	r1, [pc, #420]	; (800f8d8 <solve_NTRU.constprop.0+0xe78>)
 800f732:	4b6a      	ldr	r3, [pc, #424]	; (800f8dc <solve_NTRU.constprop.0+0xe7c>)
 800f734:	2209      	movs	r2, #9
 800f736:	e9cd 4500 	strd	r4, r5, [sp]
	R2 = modp_R2(p, p0i);
 800f73a:	4681      	mov	r9, r0
	modp_mkgm2(gm, igm, logn, PRIMES[0].g, p, p0i);
 800f73c:	f5a1 6000 	sub.w	r0, r1, #2048	; 0x800
 800f740:	f7fe fbc6 	bl	800ded0 <modp_mkgm2>
 800f744:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f746:	4966      	ldr	r1, [pc, #408]	; (800f8e0 <solve_NTRU.constprop.0+0xe80>)
 800f748:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800f74a:	f503 707f 	add.w	r0, r3, #1020	; 0x3fc
	w = x[0];
 800f74e:	f852 5f04 	ldr.w	r5, [r2, #4]!
	w |= (w & 0x40000000) << 1;
 800f752:	006b      	lsls	r3, r5, #1
 800f754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f758:	432b      	orrs	r3, r5
	w += p & -(w >> 31);
 800f75a:	ea04 75e3 	and.w	r5, r4, r3, asr #31
 800f75e:	442b      	add	r3, r5
		Fp[u] = modp_set(zint_one_to_plain(Fp + u), p);
 800f760:	6013      	str	r3, [r2, #0]
	w = x[0];
 800f762:	f851 5f04 	ldr.w	r5, [r1, #4]!
	w |= (w & 0x40000000) << 1;
 800f766:	006b      	lsls	r3, r5, #1
 800f768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f76c:	432b      	orrs	r3, r5
	w += p & -(w >> 31);
 800f76e:	ea04 75e3 	and.w	r5, r4, r3, asr #31
 800f772:	442b      	add	r3, r5
	for (u = 0; u < hn; u ++) {
 800f774:	4290      	cmp	r0, r2
		Gp[u] = modp_set(zint_one_to_plain(Gp + u), p);
 800f776:	600b      	str	r3, [r1, #0]
	for (u = 0; u < hn; u ++) {
 800f778:	d1e9      	bne.n	800f74e <solve_NTRU.constprop.0+0xcee>
 800f77a:	4a5a      	ldr	r2, [pc, #360]	; (800f8e4 <solve_NTRU.constprop.0+0xe84>)
 800f77c:	4d54      	ldr	r5, [pc, #336]	; (800f8d0 <solve_NTRU.constprop.0+0xe70>)
 800f77e:	9400      	str	r4, [sp, #0]
 800f780:	f5a2 50c0 	sub.w	r0, r2, #6144	; 0x1800
 800f784:	9501      	str	r5, [sp, #4]
 800f786:	2308      	movs	r3, #8
 800f788:	2101      	movs	r1, #1
 800f78a:	f7f9 fed9 	bl	8009540 <modp_NTT2_ext.part.0>
 800f78e:	4a55      	ldr	r2, [pc, #340]	; (800f8e4 <solve_NTRU.constprop.0+0xe84>)
 800f790:	4b55      	ldr	r3, [pc, #340]	; (800f8e8 <solve_NTRU.constprop.0+0xe88>)
 800f792:	9308      	str	r3, [sp, #32]
 800f794:	e9cd 4500 	strd	r4, r5, [sp]
 800f798:	f5a2 50a0 	sub.w	r0, r2, #5120	; 0x1400
 800f79c:	461d      	mov	r5, r3
 800f79e:	2101      	movs	r1, #1
 800f7a0:	2308      	movs	r3, #8
 800f7a2:	f7f9 fecd 	bl	8009540 <modp_NTT2_ext.part.0>
	w += p & -(w >> 31);
 800f7a6:	4c4b      	ldr	r4, [pc, #300]	; (800f8d4 <solve_NTRU.constprop.0+0xe74>)
 800f7a8:	9839      	ldr	r0, [sp, #228]	; 0xe4
 800f7aa:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800f7ac:	4629      	mov	r1, r5
		ft[u] = modp_set(f[u], p);
 800f7ae:	f912 6f01 	ldrsb.w	r6, [r2, #1]!
		gt[u] = modp_set(g[u], p);
 800f7b2:	f910 5f01 	ldrsb.w	r5, [r0, #1]!
	w += p & -(w >> 31);
 800f7b6:	ea04 73e6 	and.w	r3, r4, r6, asr #31
 800f7ba:	4433      	add	r3, r6
		ft[u] = modp_set(f[u], p);
 800f7bc:	f841 3f04 	str.w	r3, [r1, #4]!
	w += p & -(w >> 31);
 800f7c0:	ea04 73e5 	and.w	r3, r4, r5, asr #31
 800f7c4:	442b      	add	r3, r5
		gt[u] = modp_set(g[u], p);
 800f7c6:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
	for (u = 0; u < n; u ++) {
 800f7ca:	4b48      	ldr	r3, [pc, #288]	; (800f8ec <solve_NTRU.constprop.0+0xe8c>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d1ee      	bne.n	800f7ae <solve_NTRU.constprop.0+0xd4e>
 800f7d0:	4a44      	ldr	r2, [pc, #272]	; (800f8e4 <solve_NTRU.constprop.0+0xe84>)
 800f7d2:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 800f8d0 <solve_NTRU.constprop.0+0xe70>
 800f7d6:	9400      	str	r4, [sp, #0]
 800f7d8:	f5a2 5080 	sub.w	r0, r2, #4096	; 0x1000
 800f7dc:	2309      	movs	r3, #9
 800f7de:	2101      	movs	r1, #1
 800f7e0:	f8cd a004 	str.w	sl, [sp, #4]
 800f7e4:	f7f9 feac 	bl	8009540 <modp_NTT2_ext.part.0>
 800f7e8:	4a3e      	ldr	r2, [pc, #248]	; (800f8e4 <solve_NTRU.constprop.0+0xe84>)
 800f7ea:	f5a2 5380 	sub.w	r3, r2, #4096	; 0x1000
 800f7ee:	e9cd 4a00 	strd	r4, sl, [sp]
 800f7f2:	930a      	str	r3, [sp, #40]	; 0x28
 800f7f4:	461e      	mov	r6, r3
 800f7f6:	2101      	movs	r1, #1
 800f7f8:	2309      	movs	r3, #9
 800f7fa:	f5a2 6000 	sub.w	r0, r2, #2048	; 0x800
 800f7fe:	f7f9 fe9f 	bl	8009540 <modp_NTT2_ext.part.0>
	d += p & -(d >> 31);
 800f802:	4c34      	ldr	r4, [pc, #208]	; (800f8d4 <solve_NTRU.constprop.0+0xe74>)
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f804:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
 800f808:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f80c:	46d0      	mov	r8, sl
		mFp = modp_montymul(Fp[u >> 1], R2, p, p0i);
 800f80e:	ea4f 035c 	mov.w	r3, ip, lsr #1
	z = (uint64_t)a * (uint64_t)b;
 800f812:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f814:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f818:	4a35      	ldr	r2, [pc, #212]	; (800f8f0 <solve_NTRU.constprop.0+0xe90>)
 800f81a:	fba9 5101 	umull	r5, r1, r9, r1
 800f81e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f822:	fba5 2308 	umull	r2, r3, r5, r8
 800f826:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
 800f82a:	0493      	lsls	r3, r2, #18
 800f82c:	1bdb      	subs	r3, r3, r7
 800f82e:	f3c2 3290 	ubfx	r2, r2, #14, #17
 800f832:	f162 0200 	sbc.w	r2, r2, #0
 800f836:	0092      	lsls	r2, r2, #2
 800f838:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800f83c:	009b      	lsls	r3, r3, #2
 800f83e:	1bdb      	subs	r3, r3, r7
 800f840:	f162 0200 	sbc.w	r2, r2, #0
 800f844:	02d2      	lsls	r2, r2, #11
 800f846:	ea42 5253 	orr.w	r2, r2, r3, lsr #21
 800f84a:	02db      	lsls	r3, r3, #11
 800f84c:	19db      	adds	r3, r3, r7
 800f84e:	f142 0200 	adc.w	r2, r2, #0
	d = (uint32_t)((z + w) >> 31) - p;
 800f852:	195b      	adds	r3, r3, r5
 800f854:	eb41 0102 	adc.w	r1, r1, r2
	z = (uint64_t)a * (uint64_t)b;
 800f858:	fba9 5000 	umull	r5, r0, r9, r0
	d = (uint32_t)((z + w) >> 31) - p;
 800f85c:	0fda      	lsrs	r2, r3, #31
 800f85e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f862:	fba5 1308 	umull	r1, r3, r5, r8
 800f866:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800f86a:	048b      	lsls	r3, r1, #18
 800f86c:	1bdb      	subs	r3, r3, r7
 800f86e:	f3c1 3190 	ubfx	r1, r1, #14, #17
 800f872:	f161 0100 	sbc.w	r1, r1, #0
 800f876:	0089      	lsls	r1, r1, #2
 800f878:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	1bdb      	subs	r3, r3, r7
 800f880:	f161 0100 	sbc.w	r1, r1, #0
 800f884:	02c9      	lsls	r1, r1, #11
 800f886:	ea41 5153 	orr.w	r1, r1, r3, lsr #21
	d = (uint32_t)((z + w) >> 31) - p;
 800f88a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f88e:	02db      	lsls	r3, r3, #11
 800f890:	19db      	adds	r3, r3, r7
	d = (uint32_t)((z + w) >> 31) - p;
 800f892:	f502 521f 	add.w	r2, r2, #10176	; 0x27c0
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f896:	f141 0100 	adc.w	r1, r1, #0
	d = (uint32_t)((z + w) >> 31) - p;
 800f89a:	323f      	adds	r2, #63	; 0x3f
 800f89c:	195b      	adds	r3, r3, r5
 800f89e:	eb40 0001 	adc.w	r0, r0, r1
	z = (uint64_t)a * (uint64_t)b;
 800f8a2:	f8d6 5804 	ldr.w	r5, [r6, #2052]	; 0x804
	d += p & -(d >> 31);
 800f8a6:	ea04 71e2 	and.w	r1, r4, r2, asr #31
 800f8aa:	440a      	add	r2, r1
	z = (uint64_t)a * (uint64_t)b;
 800f8ac:	fba2 e505 	umull	lr, r5, r2, r5
	d = (uint32_t)((z + w) >> 31) - p;
 800f8b0:	0fdb      	lsrs	r3, r3, #31
 800f8b2:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f8b6:	fbae 0108 	umull	r0, r1, lr, r8
 800f8ba:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 800f8be:	0481      	lsls	r1, r0, #18
 800f8c0:	1bc9      	subs	r1, r1, r7
 800f8c2:	e017      	b.n	800f8f4 <solve_NTRU.constprop.0+0xe94>
 800f8c4:	2000d0d8 	.word	0x2000d0d8
 800f8c8:	2000c8e0 	.word	0x2000c8e0
 800f8cc:	2000d0e0 	.word	0x2000d0e0
 800f8d0:	79bfd7ff 	.word	0x79bfd7ff
 800f8d4:	7fffd801 	.word	0x7fffd801
 800f8d8:	2000e8e0 	.word	0x2000e8e0
 800f8dc:	16d6ad45 	.word	0x16d6ad45
 800f8e0:	2000ccdc 	.word	0x2000ccdc
 800f8e4:	2000e0e0 	.word	0x2000e0e0
 800f8e8:	2000d0dc 	.word	0x2000d0dc
 800f8ec:	20002ab7 	.word	0x20002ab7
 800f8f0:	2000cce0 	.word	0x2000cce0
 800f8f4:	f3c0 3090 	ubfx	r0, r0, #14, #17
 800f8f8:	f160 0000 	sbc.w	r0, r0, #0
 800f8fc:	0080      	lsls	r0, r0, #2
 800f8fe:	ea40 7091 	orr.w	r0, r0, r1, lsr #30
 800f902:	0089      	lsls	r1, r1, #2
 800f904:	1bc9      	subs	r1, r1, r7
 800f906:	f160 0000 	sbc.w	r0, r0, #0
 800f90a:	02c0      	lsls	r0, r0, #11
 800f90c:	ea40 5051 	orr.w	r0, r0, r1, lsr #21
 800f910:	02c9      	lsls	r1, r1, #11
 800f912:	19c9      	adds	r1, r1, r7
 800f914:	f140 0000 	adc.w	r0, r0, #0
	d = (uint32_t)((z + w) >> 31) - p;
 800f918:	eb11 010e 	adds.w	r1, r1, lr
 800f91c:	eb45 0500 	adc.w	r5, r5, r0
 800f920:	0fc9      	lsrs	r1, r1, #31
 800f922:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 800f926:	1b0d      	subs	r5, r1, r4
		gtA = gt[u + 0];
 800f928:	f8d6 1800 	ldr.w	r1, [r6, #2048]	; 0x800
	z = (uint64_t)a * (uint64_t)b;
 800f92c:	fba2 1201 	umull	r1, r2, r2, r1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f930:	fba1 7008 	umull	r7, r0, r1, r8
 800f934:	f027 4e00 	bic.w	lr, r7, #2147483648	; 0x80000000
 800f938:	04b8      	lsls	r0, r7, #18
 800f93a:	ebb0 000e 	subs.w	r0, r0, lr
 800f93e:	f3c7 3790 	ubfx	r7, r7, #14, #17
 800f942:	f167 0700 	sbc.w	r7, r7, #0
 800f946:	00bf      	lsls	r7, r7, #2
 800f948:	ea47 7790 	orr.w	r7, r7, r0, lsr #30
 800f94c:	0080      	lsls	r0, r0, #2
 800f94e:	ebb0 000e 	subs.w	r0, r0, lr
 800f952:	f167 0700 	sbc.w	r7, r7, #0
 800f956:	02ff      	lsls	r7, r7, #11
 800f958:	ea47 5750 	orr.w	r7, r7, r0, lsr #21
 800f95c:	02c0      	lsls	r0, r0, #11
 800f95e:	eb10 000e 	adds.w	r0, r0, lr
 800f962:	f147 0700 	adc.w	r7, r7, #0
	d = (uint32_t)((z + w) >> 31) - p;
 800f966:	1840      	adds	r0, r0, r1
 800f968:	eb42 0207 	adc.w	r2, r2, r7
 800f96c:	1b1b      	subs	r3, r3, r4
 800f96e:	0fc0      	lsrs	r0, r0, #31
		ftB = ft[u + 1];
 800f970:	6877      	ldr	r7, [r6, #4]
	d = (uint32_t)((z + w) >> 31) - p;
 800f972:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
	d += p & -(d >> 31);
 800f976:	ea04 72e3 	and.w	r2, r4, r3, asr #31
 800f97a:	4413      	add	r3, r2
	z = (uint64_t)a * (uint64_t)b;
 800f97c:	fba7 b703 	umull	fp, r7, r7, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f980:	fbab 1208 	umull	r1, r2, fp, r8
 800f984:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800f988:	048a      	lsls	r2, r1, #18
 800f98a:	ebb2 020e 	subs.w	r2, r2, lr
 800f98e:	f3c1 3190 	ubfx	r1, r1, #14, #17
 800f992:	f161 0100 	sbc.w	r1, r1, #0
 800f996:	0089      	lsls	r1, r1, #2
 800f998:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800f99c:	0092      	lsls	r2, r2, #2
 800f99e:	ebb2 020e 	subs.w	r2, r2, lr
 800f9a2:	f161 0100 	sbc.w	r1, r1, #0
 800f9a6:	02c9      	lsls	r1, r1, #11
 800f9a8:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800f9ac:	02d2      	lsls	r2, r2, #11
 800f9ae:	eb12 020e 	adds.w	r2, r2, lr
 800f9b2:	f141 0100 	adc.w	r1, r1, #0
	d = (uint32_t)((z + w) >> 31) - p;
 800f9b6:	eb12 020b 	adds.w	r2, r2, fp
 800f9ba:	eb47 0701 	adc.w	r7, r7, r1
 800f9be:	0fd1      	lsrs	r1, r2, #31
		ftA = ft[u + 0];
 800f9c0:	6832      	ldr	r2, [r6, #0]
	z = (uint64_t)a * (uint64_t)b;
 800f9c2:	fba3 b302 	umull	fp, r3, r3, r2
	d = (uint32_t)((z + w) >> 31) - p;
 800f9c6:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800f9ca:	fbab 7208 	umull	r7, r2, fp, r8
 800f9ce:	f027 4e00 	bic.w	lr, r7, #2147483648	; 0x80000000
 800f9d2:	04ba      	lsls	r2, r7, #18
 800f9d4:	ebb2 020e 	subs.w	r2, r2, lr
 800f9d8:	f3c7 3790 	ubfx	r7, r7, #14, #17
 800f9dc:	f167 0700 	sbc.w	r7, r7, #0
 800f9e0:	00bf      	lsls	r7, r7, #2
 800f9e2:	ea47 7792 	orr.w	r7, r7, r2, lsr #30
 800f9e6:	0092      	lsls	r2, r2, #2
 800f9e8:	ebb2 020e 	subs.w	r2, r2, lr
 800f9ec:	f167 0700 	sbc.w	r7, r7, #0
 800f9f0:	02ff      	lsls	r7, r7, #11
 800f9f2:	ea47 5752 	orr.w	r7, r7, r2, lsr #21
 800f9f6:	02d2      	lsls	r2, r2, #11
 800f9f8:	eb12 020e 	adds.w	r2, r2, lr
 800f9fc:	f147 0700 	adc.w	r7, r7, #0
	d = (uint32_t)((z + w) >> 31) - p;
 800fa00:	eb12 020b 	adds.w	r2, r2, fp
 800fa04:	eb43 0307 	adc.w	r3, r3, r7
 800fa08:	0fd2      	lsrs	r2, r2, #31
 800fa0a:	1b00      	subs	r0, r0, r4
 800fa0c:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	d += p & -(d >> 31);
 800fa10:	ea04 73e5 	and.w	r3, r4, r5, asr #31
	d = (uint32_t)((z + w) >> 31) - p;
 800fa14:	1b09      	subs	r1, r1, r4
	d += p & -(d >> 31);
 800fa16:	441d      	add	r5, r3
 800fa18:	ea04 73e0 	and.w	r3, r4, r0, asr #31
	d = (uint32_t)((z + w) >> 31) - p;
 800fa1c:	1b12      	subs	r2, r2, r4
	d += p & -(d >> 31);
 800fa1e:	4418      	add	r0, r3
 800fa20:	ea04 73e1 	and.w	r3, r4, r1, asr #31
 800fa24:	4419      	add	r1, r3
	for (u = 0; u < n; u += 2) {
 800fa26:	f10c 0c02 	add.w	ip, ip, #2
	d += p & -(d >> 31);
 800fa2a:	ea04 73e2 	and.w	r3, r4, r2, asr #31
 800fa2e:	441a      	add	r2, r3
	for (u = 0; u < n; u += 2) {
 800fa30:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
		ft[u + 0] = modp_montymul(gtB, mFp, p, p0i);
 800fa34:	6035      	str	r5, [r6, #0]
		ft[u + 1] = modp_montymul(gtA, mFp, p, p0i);
 800fa36:	6070      	str	r0, [r6, #4]
		gt[u + 0] = modp_montymul(ftB, mGp, p, p0i);
 800fa38:	f8c6 1800 	str.w	r1, [r6, #2048]	; 0x800
		gt[u + 1] = modp_montymul(ftA, mGp, p, p0i);
 800fa3c:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
	for (u = 0; u < n; u += 2) {
 800fa40:	f106 0608 	add.w	r6, r6, #8
 800fa44:	f47f aee3 	bne.w	800f80e <solve_NTRU.constprop.0+0xdae>
 800fa48:	4a9c      	ldr	r2, [pc, #624]	; (800fcbc <solve_NTRU.constprop.0+0x125c>)
 800fa4a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800fa4e:	f5a2 50c0 	sub.w	r0, r2, #6144	; 0x1800
 800fa52:	e9cd 4a00 	strd	r4, sl, [sp]
 800fa56:	2309      	movs	r3, #9
 800fa58:	2101      	movs	r1, #1
 800fa5a:	f7f9 fde1 	bl	8009620 <modp_iNTT2_ext.part.0>
 800fa5e:	4a97      	ldr	r2, [pc, #604]	; (800fcbc <solve_NTRU.constprop.0+0x125c>)
 800fa60:	2309      	movs	r3, #9
 800fa62:	f5a2 5080 	sub.w	r0, r2, #4096	; 0x1000
 800fa66:	e9cd 4a00 	strd	r4, sl, [sp]
 800fa6a:	2101      	movs	r1, #1
 800fa6c:	f7f9 fdd8 	bl	8009620 <modp_iNTT2_ext.part.0>
	memmove(Fp, ft, 2 * n * sizeof *ft);
 800fa70:	4993      	ldr	r1, [pc, #588]	; (800fcc0 <solve_NTRU.constprop.0+0x1260>)
 800fa72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fa76:	f5a1 6000 	sub.w	r0, r1, #2048	; 0x800
 800fa7a:	f005 f89d 	bl	8014bb8 <memmove>
	modp_mkgm2(t1, t2, logn, PRIMES[0].g, p, p0i);
 800fa7e:	4991      	ldr	r1, [pc, #580]	; (800fcc4 <solve_NTRU.constprop.0+0x1264>)
 800fa80:	4b91      	ldr	r3, [pc, #580]	; (800fcc8 <solve_NTRU.constprop.0+0x1268>)
 800fa82:	f5a1 6000 	sub.w	r0, r1, #2048	; 0x800
 800fa86:	e9cd 4a00 	strd	r4, sl, [sp]
 800fa8a:	2209      	movs	r2, #9
 800fa8c:	f7fe fa20 	bl	800ded0 <modp_mkgm2>
 800fa90:	4a8e      	ldr	r2, [pc, #568]	; (800fccc <solve_NTRU.constprop.0+0x126c>)
 800fa92:	e9cd 4a00 	strd	r4, sl, [sp]
 800fa96:	f5a2 5080 	sub.w	r0, r2, #4096	; 0x1000
 800fa9a:	2309      	movs	r3, #9
 800fa9c:	2101      	movs	r1, #1
 800fa9e:	f7f9 fd4f 	bl	8009540 <modp_NTT2_ext.part.0>
 800faa2:	4a8a      	ldr	r2, [pc, #552]	; (800fccc <solve_NTRU.constprop.0+0x126c>)
 800faa4:	e9cd 4a00 	strd	r4, sl, [sp]
 800faa8:	f5a2 6000 	sub.w	r0, r2, #2048	; 0x800
 800faac:	2309      	movs	r3, #9
 800faae:	2101      	movs	r1, #1
 800fab0:	f7f9 fd46 	bl	8009540 <modp_NTT2_ext.part.0>
	t4[0] = t5[0] = modp_set(f[0], p);
 800fab4:	4b86      	ldr	r3, [pc, #536]	; (800fcd0 <solve_NTRU.constprop.0+0x1270>)
 800fab6:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 800fab8:	f993 2000 	ldrsb.w	r2, [r3]
	w += p & -(w >> 31);
 800fabc:	ea04 73e2 	and.w	r3, r4, r2, asr #31
 800fac0:	4413      	add	r3, r2
	t4[0] = t5[0] = modp_set(f[0], p);
 800fac2:	4a7e      	ldr	r2, [pc, #504]	; (800fcbc <solve_NTRU.constprop.0+0x125c>)
	w += p & -(w >> 31);
 800fac4:	4c83      	ldr	r4, [pc, #524]	; (800fcd4 <solve_NTRU.constprop.0+0x1274>)
	t4[0] = t5[0] = modp_set(f[0], p);
 800fac6:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 800faca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800face:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800fad2:	6013      	str	r3, [r2, #0]
 800fad4:	f502 6300 	add.w	r3, r2, #2048	; 0x800
 800fad8:	910c      	str	r1, [sp, #48]	; 0x30
 800fada:	9309      	str	r3, [sp, #36]	; 0x24
 800fadc:	4618      	mov	r0, r3
		t4[u] = modp_set(f[u], p);
 800fade:	f916 2f01 	ldrsb.w	r2, [r6, #1]!
		t5[n - u] = modp_set(-f[u], p);
 800fae2:	4253      	negs	r3, r2
	w += p & -(w >> 31);
 800fae4:	ea04 73e3 	and.w	r3, r4, r3, asr #31
 800fae8:	ea04 75e2 	and.w	r5, r4, r2, asr #31
		t5[n - u] = modp_set(-f[u], p);
 800faec:	1a9b      	subs	r3, r3, r2
	w += p & -(w >> 31);
 800faee:	442a      	add	r2, r5
		t4[u] = modp_set(f[u], p);
 800faf0:	f841 2f04 	str.w	r2, [r1, #4]!
		t5[n - u] = modp_set(-f[u], p);
 800faf4:	f840 3d04 	str.w	r3, [r0, #-4]!
	for (u = 1; u < n; u ++) {
 800faf8:	4b77      	ldr	r3, [pc, #476]	; (800fcd8 <solve_NTRU.constprop.0+0x1278>)
 800fafa:	42b3      	cmp	r3, r6
 800fafc:	d1ef      	bne.n	800fade <solve_NTRU.constprop.0+0x107e>
 800fafe:	4a73      	ldr	r2, [pc, #460]	; (800fccc <solve_NTRU.constprop.0+0x126c>)
 800fb00:	4d76      	ldr	r5, [pc, #472]	; (800fcdc <solve_NTRU.constprop.0+0x127c>)
 800fb02:	9400      	str	r4, [sp, #0]
 800fb04:	f502 50c0 	add.w	r0, r2, #6144	; 0x1800
 800fb08:	2309      	movs	r3, #9
 800fb0a:	2101      	movs	r1, #1
 800fb0c:	9501      	str	r5, [sp, #4]
 800fb0e:	f7f9 fd17 	bl	8009540 <modp_NTT2_ext.part.0>
 800fb12:	4a6e      	ldr	r2, [pc, #440]	; (800fccc <solve_NTRU.constprop.0+0x126c>)
 800fb14:	2309      	movs	r3, #9
 800fb16:	f502 5000 	add.w	r0, r2, #8192	; 0x2000
 800fb1a:	e9cd 4500 	strd	r4, r5, [sp]
 800fb1e:	2101      	movs	r1, #1
 800fb20:	f202 78fc 	addw	r8, r2, #2044	; 0x7fc
 800fb24:	f7f9 fd0c 	bl	8009540 <modp_NTT2_ext.part.0>
 800fb28:	9b21      	ldr	r3, [sp, #132]	; 0x84
	d += p & -(d >> 31);
 800fb2a:	486a      	ldr	r0, [pc, #424]	; (800fcd4 <solve_NTRU.constprop.0+0x1274>)
 800fb2c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800fb2e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fb32:	f503 5aff 	add.w	sl, r3, #8160	; 0x1fe0
 800fb36:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800fb38:	46c4      	mov	ip, r8
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800fb3a:	46ae      	mov	lr, r5
 800fb3c:	f10a 0a1c 	add.w	sl, sl, #28
 800fb40:	4698      	mov	r8, r3
	z = (uint64_t)a * (uint64_t)b;
 800fb42:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800fb46:	f858 4f04 	ldr.w	r4, [r8, #4]!
 800fb4a:	fba9 5603 	umull	r5, r6, r9, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800fb4e:	fba5 230e 	umull	r2, r3, r5, lr
 800fb52:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800fb56:	0493      	lsls	r3, r2, #18
 800fb58:	1a5b      	subs	r3, r3, r1
 800fb5a:	f3c2 3290 	ubfx	r2, r2, #14, #17
 800fb5e:	f162 0200 	sbc.w	r2, r2, #0
 800fb62:	0092      	lsls	r2, r2, #2
 800fb64:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	1a5b      	subs	r3, r3, r1
 800fb6c:	f162 0200 	sbc.w	r2, r2, #0
 800fb70:	02d2      	lsls	r2, r2, #11
 800fb72:	ea42 5253 	orr.w	r2, r2, r3, lsr #21
 800fb76:	02db      	lsls	r3, r3, #11
 800fb78:	185b      	adds	r3, r3, r1
 800fb7a:	f142 0200 	adc.w	r2, r2, #0
	d = (uint32_t)((z + w) >> 31) - p;
 800fb7e:	195b      	adds	r3, r3, r5
 800fb80:	eb46 0602 	adc.w	r6, r6, r2
 800fb84:	0fdb      	lsrs	r3, r3, #31
 800fb86:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 800fb8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fb8e:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 800fb92:	333f      	adds	r3, #63	; 0x3f
	d += p & -(d >> 31);
 800fb94:	ea00 72e3 	and.w	r2, r0, r3, asr #31
 800fb98:	4413      	add	r3, r2
	z = (uint64_t)a * (uint64_t)b;
 800fb9a:	fba3 6404 	umull	r6, r4, r3, r4
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800fb9e:	fba6 120e 	umull	r1, r2, r6, lr
 800fba2:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 800fba6:	048a      	lsls	r2, r1, #18
 800fba8:	1b52      	subs	r2, r2, r5
 800fbaa:	f3c1 3190 	ubfx	r1, r1, #14, #17
 800fbae:	f161 0100 	sbc.w	r1, r1, #0
 800fbb2:	0089      	lsls	r1, r1, #2
 800fbb4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800fbb8:	0092      	lsls	r2, r2, #2
 800fbba:	1b52      	subs	r2, r2, r5
 800fbbc:	f161 0100 	sbc.w	r1, r1, #0
 800fbc0:	02c9      	lsls	r1, r1, #11
 800fbc2:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800fbc6:	02d2      	lsls	r2, r2, #11
 800fbc8:	1952      	adds	r2, r2, r5
 800fbca:	f141 0100 	adc.w	r1, r1, #0
	d = (uint32_t)((z + w) >> 31) - p;
 800fbce:	1992      	adds	r2, r2, r6
 800fbd0:	eb44 0401 	adc.w	r4, r4, r1
 800fbd4:	0fd2      	lsrs	r2, r2, #31
 800fbd6:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800fbda:	1a12      	subs	r2, r2, r0
	d += p & -(d >> 31);
 800fbdc:	ea00 71e2 	and.w	r1, r0, r2, asr #31
 800fbe0:	440a      	add	r2, r1
		t2[u] = modp_montymul(w, Fp[u], p, p0i);
 800fbe2:	f84c 2f04 	str.w	r2, [ip, #4]!
	z = (uint64_t)a * (uint64_t)b;
 800fbe6:	f857 4f04 	ldr.w	r4, [r7, #4]!
 800fbea:	fba3 3404 	umull	r3, r4, r3, r4
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800fbee:	fba3 120e 	umull	r1, r2, r3, lr
 800fbf2:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 800fbf6:	048a      	lsls	r2, r1, #18
 800fbf8:	1b52      	subs	r2, r2, r5
 800fbfa:	f3c1 3190 	ubfx	r1, r1, #14, #17
 800fbfe:	f161 0100 	sbc.w	r1, r1, #0
 800fc02:	0089      	lsls	r1, r1, #2
 800fc04:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800fc08:	0092      	lsls	r2, r2, #2
 800fc0a:	1b52      	subs	r2, r2, r5
 800fc0c:	f161 0100 	sbc.w	r1, r1, #0
 800fc10:	02c9      	lsls	r1, r1, #11
 800fc12:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800fc16:	02d2      	lsls	r2, r2, #11
 800fc18:	1952      	adds	r2, r2, r5
 800fc1a:	f141 0100 	adc.w	r1, r1, #0
	d = (uint32_t)((z + w) >> 31) - p;
 800fc1e:	18d3      	adds	r3, r2, r3
 800fc20:	eb44 0401 	adc.w	r4, r4, r1
 800fc24:	0fdb      	lsrs	r3, r3, #31
 800fc26:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 800fc2a:	1a1b      	subs	r3, r3, r0
	d += p & -(d >> 31);
 800fc2c:	ea00 72e3 	and.w	r2, r0, r3, asr #31
 800fc30:	4413      	add	r3, r2
	for (u = 0; u < n; u ++) {
 800fc32:	45e2      	cmp	sl, ip
		t3[u] = modp_montymul(w, t4[u], p, p0i);
 800fc34:	f8cc 3800 	str.w	r3, [ip, #2048]	; 0x800
	for (u = 0; u < n; u ++) {
 800fc38:	d183      	bne.n	800fb42 <solve_NTRU.constprop.0+0x10e2>
	t4[0] = t5[0] = modp_set(g[0], p);
 800fc3a:	4a29      	ldr	r2, [pc, #164]	; (800fce0 <solve_NTRU.constprop.0+0x1280>)
 800fc3c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800fc40:	f992 1000 	ldrsb.w	r1, [r2]
	w += p & -(w >> 31);
 800fc44:	4c23      	ldr	r4, [pc, #140]	; (800fcd4 <solve_NTRU.constprop.0+0x1274>)
 800fc46:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800fc48:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fc4a:	ea00 73e1 	and.w	r3, r0, r1, asr #31
 800fc4e:	440b      	add	r3, r1
	t4[0] = t5[0] = modp_set(g[0], p);
 800fc50:	4924      	ldr	r1, [pc, #144]	; (800fce4 <solve_NTRU.constprop.0+0x1284>)
 800fc52:	600b      	str	r3, [r1, #0]
 800fc54:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
 800fc58:	f202 10ff 	addw	r0, r2, #511	; 0x1ff
 800fc5c:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		t4[u] = modp_set(g[u], p);
 800fc60:	f912 1f01 	ldrsb.w	r1, [r2, #1]!
		t5[n - u] = modp_set(-g[u], p);
 800fc64:	424b      	negs	r3, r1
	w += p & -(w >> 31);
 800fc66:	ea04 73e3 	and.w	r3, r4, r3, asr #31
 800fc6a:	ea04 77e1 	and.w	r7, r4, r1, asr #31
		t5[n - u] = modp_set(-g[u], p);
 800fc6e:	1a5b      	subs	r3, r3, r1
	for (u = 1; u < n; u ++) {
 800fc70:	4290      	cmp	r0, r2
	w += p & -(w >> 31);
 800fc72:	4439      	add	r1, r7
		t4[u] = modp_set(g[u], p);
 800fc74:	f846 1f04 	str.w	r1, [r6, #4]!
		t5[n - u] = modp_set(-g[u], p);
 800fc78:	f845 3d04 	str.w	r3, [r5, #-4]!
	for (u = 1; u < n; u ++) {
 800fc7c:	d1f0      	bne.n	800fc60 <solve_NTRU.constprop.0+0x1200>
 800fc7e:	4a13      	ldr	r2, [pc, #76]	; (800fccc <solve_NTRU.constprop.0+0x126c>)
 800fc80:	4b16      	ldr	r3, [pc, #88]	; (800fcdc <solve_NTRU.constprop.0+0x127c>)
 800fc82:	9400      	str	r4, [sp, #0]
 800fc84:	461d      	mov	r5, r3
 800fc86:	f502 50c0 	add.w	r0, r2, #6144	; 0x1800
 800fc8a:	9301      	str	r3, [sp, #4]
 800fc8c:	2101      	movs	r1, #1
 800fc8e:	2309      	movs	r3, #9
 800fc90:	f7f9 fc56 	bl	8009540 <modp_NTT2_ext.part.0>
 800fc94:	4a0d      	ldr	r2, [pc, #52]	; (800fccc <solve_NTRU.constprop.0+0x126c>)
 800fc96:	9400      	str	r4, [sp, #0]
 800fc98:	9501      	str	r5, [sp, #4]
 800fc9a:	2309      	movs	r3, #9
 800fc9c:	2101      	movs	r1, #1
 800fc9e:	f502 5000 	add.w	r0, r2, #8192	; 0x2000
 800fca2:	f7f9 fc4d 	bl	8009540 <modp_NTT2_ext.part.0>
 800fca6:	9b08      	ldr	r3, [sp, #32]
	d += p & -(d >> 31);
 800fca8:	4c0a      	ldr	r4, [pc, #40]	; (800fcd4 <solve_NTRU.constprop.0+0x1274>)
 800fcaa:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800fcae:	f8df e02c 	ldr.w	lr, [pc, #44]	; 800fcdc <solve_NTRU.constprop.0+0x127c>
 800fcb2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800fcb6:	4645      	mov	r5, r8
 800fcb8:	4698      	mov	r8, r3
 800fcba:	e015      	b.n	800fce8 <solve_NTRU.constprop.0+0x1288>
 800fcbc:	2000e8e0 	.word	0x2000e8e0
 800fcc0:	2000d0e0 	.word	0x2000d0e0
 800fcc4:	2000e0e0 	.word	0x2000e0e0
 800fcc8:	16d6ad45 	.word	0x16d6ad45
 800fccc:	2000d8e0 	.word	0x2000d8e0
 800fcd0:	200028b8 	.word	0x200028b8
 800fcd4:	7fffd801 	.word	0x7fffd801
 800fcd8:	20002ab7 	.word	0x20002ab7
 800fcdc:	79bfd7ff 	.word	0x79bfd7ff
 800fce0:	20002cb8 	.word	0x20002cb8
 800fce4:	2000f8e0 	.word	0x2000f8e0
	z = (uint64_t)a * (uint64_t)b;
 800fce8:	f8dc 3804 	ldr.w	r3, [ip, #2052]	; 0x804
 800fcec:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800fcf0:	fba9 6703 	umull	r6, r7, r9, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800fcf4:	fba6 230e 	umull	r2, r3, r6, lr
 800fcf8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800fcfc:	0493      	lsls	r3, r2, #18
 800fcfe:	1a5b      	subs	r3, r3, r1
 800fd00:	f3c2 3290 	ubfx	r2, r2, #14, #17
 800fd04:	f162 0200 	sbc.w	r2, r2, #0
 800fd08:	0092      	lsls	r2, r2, #2
 800fd0a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800fd0e:	009b      	lsls	r3, r3, #2
 800fd10:	1a5b      	subs	r3, r3, r1
 800fd12:	f162 0200 	sbc.w	r2, r2, #0
 800fd16:	02d2      	lsls	r2, r2, #11
 800fd18:	ea42 5253 	orr.w	r2, r2, r3, lsr #21
 800fd1c:	02db      	lsls	r3, r3, #11
 800fd1e:	185b      	adds	r3, r3, r1
 800fd20:	f142 0200 	adc.w	r2, r2, #0
	d = (uint32_t)((z + w) >> 31) - p;
 800fd24:	199b      	adds	r3, r3, r6
 800fd26:	eb47 0702 	adc.w	r7, r7, r2
 800fd2a:	0fdb      	lsrs	r3, r3, #31
 800fd2c:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 800fd30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fd34:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 800fd38:	333f      	adds	r3, #63	; 0x3f
	d += p & -(d >> 31);
 800fd3a:	ea04 72e3 	and.w	r2, r4, r3, asr #31
 800fd3e:	4413      	add	r3, r2
	z = (uint64_t)a * (uint64_t)b;
 800fd40:	fba3 7000 	umull	r7, r0, r3, r0
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800fd44:	fba7 120e 	umull	r1, r2, r7, lr
 800fd48:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800fd4c:	048a      	lsls	r2, r1, #18
 800fd4e:	1b92      	subs	r2, r2, r6
 800fd50:	f3c1 3190 	ubfx	r1, r1, #14, #17
 800fd54:	f161 0100 	sbc.w	r1, r1, #0
 800fd58:	0089      	lsls	r1, r1, #2
 800fd5a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800fd5e:	0092      	lsls	r2, r2, #2
 800fd60:	1b92      	subs	r2, r2, r6
 800fd62:	f161 0100 	sbc.w	r1, r1, #0
 800fd66:	02c9      	lsls	r1, r1, #11
 800fd68:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800fd6c:	02d2      	lsls	r2, r2, #11
 800fd6e:	1992      	adds	r2, r2, r6
 800fd70:	f141 0100 	adc.w	r1, r1, #0
	d = (uint32_t)((z + w) >> 31) - p;
 800fd74:	19d2      	adds	r2, r2, r7
 800fd76:	eb40 0001 	adc.w	r0, r0, r1
 800fd7a:	0fd2      	lsrs	r2, r2, #31
	d = a + b - p;
 800fd7c:	f855 1f04 	ldr.w	r1, [r5, #4]!
	d = (uint32_t)((z + w) >> 31) - p;
 800fd80:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800fd84:	1b12      	subs	r2, r2, r4
	d = a + b - p;
 800fd86:	1b09      	subs	r1, r1, r4
 800fd88:	4411      	add	r1, r2
	d += p & -(d >> 31);
 800fd8a:	ea04 72e2 	and.w	r2, r4, r2, asr #31
	d = a + b - p;
 800fd8e:	440a      	add	r2, r1
	d += p & -(d >> 31);
 800fd90:	ea04 71e2 	and.w	r1, r4, r2, asr #31
 800fd94:	440a      	add	r2, r1
		t2[u] = modp_add(t2[u],
 800fd96:	602a      	str	r2, [r5, #0]
	z = (uint64_t)a * (uint64_t)b;
 800fd98:	f85c 0f04 	ldr.w	r0, [ip, #4]!
 800fd9c:	fba3 3000 	umull	r3, r0, r3, r0
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 800fda0:	fba3 120e 	umull	r1, r2, r3, lr
 800fda4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800fda8:	048a      	lsls	r2, r1, #18
 800fdaa:	1b92      	subs	r2, r2, r6
 800fdac:	f3c1 3190 	ubfx	r1, r1, #14, #17
 800fdb0:	f161 0100 	sbc.w	r1, r1, #0
 800fdb4:	0089      	lsls	r1, r1, #2
 800fdb6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800fdba:	0092      	lsls	r2, r2, #2
 800fdbc:	1b92      	subs	r2, r2, r6
 800fdbe:	f161 0100 	sbc.w	r1, r1, #0
 800fdc2:	02c9      	lsls	r1, r1, #11
 800fdc4:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800fdc8:	02d2      	lsls	r2, r2, #11
 800fdca:	1992      	adds	r2, r2, r6
 800fdcc:	f141 0100 	adc.w	r1, r1, #0
	d = (uint32_t)((z + w) >> 31) - p;
 800fdd0:	18d3      	adds	r3, r2, r3
 800fdd2:	eb40 0001 	adc.w	r0, r0, r1
 800fdd6:	0fdb      	lsrs	r3, r3, #31
 800fdd8:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 800fddc:	1b1a      	subs	r2, r3, r4
	d = a + b - p;
 800fdde:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 800fde2:	1b1b      	subs	r3, r3, r4
 800fde4:	1899      	adds	r1, r3, r2
	d += p & -(d >> 31);
 800fde6:	ea04 73e2 	and.w	r3, r4, r2, asr #31
	d = a + b - p;
 800fdea:	440b      	add	r3, r1
	d += p & -(d >> 31);
 800fdec:	ea04 72e3 	and.w	r2, r4, r3, asr #31
 800fdf0:	4413      	add	r3, r2
	for (u = 0; u < n; u ++) {
 800fdf2:	45aa      	cmp	sl, r5
		t3[u] = modp_add(t3[u],
 800fdf4:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
	for (u = 0; u < n; u ++) {
 800fdf8:	f47f af76 	bne.w	800fce8 <solve_NTRU.constprop.0+0x1288>
	modp_mkgm2(t1, t4, logn, PRIMES[0].g, p, p0i);
 800fdfc:	4ba3      	ldr	r3, [pc, #652]	; (801008c <solve_NTRU.constprop.0+0x162c>)
 800fdfe:	49a4      	ldr	r1, [pc, #656]	; (8010090 <solve_NTRU.constprop.0+0x1630>)
 800fe00:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800fe04:	e9cd 4300 	strd	r4, r3, [sp]
 800fe08:	461d      	mov	r5, r3
 800fe0a:	f5a1 50c0 	sub.w	r0, r1, #6144	; 0x1800
 800fe0e:	4ba1      	ldr	r3, [pc, #644]	; (8010094 <solve_NTRU.constprop.0+0x1634>)
 800fe10:	2209      	movs	r2, #9
 800fe12:	f7fe f85d 	bl	800ded0 <modp_mkgm2>
 800fe16:	4a9e      	ldr	r2, [pc, #632]	; (8010090 <solve_NTRU.constprop.0+0x1630>)
 800fe18:	e9cd 4500 	strd	r4, r5, [sp]
 800fe1c:	f5a2 5080 	sub.w	r0, r2, #4096	; 0x1000
 800fe20:	2309      	movs	r3, #9
 800fe22:	2101      	movs	r1, #1
 800fe24:	f7f9 fbfc 	bl	8009620 <modp_iNTT2_ext.part.0>
 800fe28:	4a99      	ldr	r2, [pc, #612]	; (8010090 <solve_NTRU.constprop.0+0x1630>)
 800fe2a:	e9cd 4500 	strd	r4, r5, [sp]
 800fe2e:	f5a2 6000 	sub.w	r0, r2, #2048	; 0x800
 800fe32:	2309      	movs	r3, #9
 800fe34:	2101      	movs	r1, #1
 800fe36:	f7f9 fbf3 	bl	8009620 <modp_iNTT2_ext.part.0>
 800fe3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
	return (int32_t)(x - (p & (((x - ((p + 1) >> 1)) >> 31) - 1)));
 800fe3c:	4896      	ldr	r0, [pc, #600]	; (8010098 <solve_NTRU.constprop.0+0x1638>)
 800fe3e:	4997      	ldr	r1, [pc, #604]	; (801009c <solve_NTRU.constprop.0+0x163c>)
 800fe40:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fe42:	f503 54c0 	add.w	r4, r3, #6144	; 0x1800
		t1[u] = (uint32_t)modp_norm(t2[u], p);
 800fe46:	f8d2 5800 	ldr.w	r5, [r2, #2048]	; 0x800
	return (int32_t)(x - (p & (((x - ((p + 1) >> 1)) >> 31) - 1)));
 800fe4a:	182b      	adds	r3, r5, r0
 800fe4c:	0fdb      	lsrs	r3, r3, #31
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	400b      	ands	r3, r1
 800fe52:	1aed      	subs	r5, r5, r3
		t1[u] = (uint32_t)modp_norm(t2[u], p);
 800fe54:	f842 5b04 	str.w	r5, [r2], #4
		t2[u] = (uint32_t)modp_norm(t3[u], p);
 800fe58:	f8d2 5ffc 	ldr.w	r5, [r2, #4092]	; 0xffc
	return (int32_t)(x - (p & (((x - ((p + 1) >> 1)) >> 31) - 1)));
 800fe5c:	182b      	adds	r3, r5, r0
 800fe5e:	0fdb      	lsrs	r3, r3, #31
 800fe60:	3b01      	subs	r3, #1
 800fe62:	400b      	ands	r3, r1
 800fe64:	1aed      	subs	r5, r5, r3
	for (u = 0; u < n; u ++) {
 800fe66:	4294      	cmp	r4, r2
		t2[u] = (uint32_t)modp_norm(t3[u], p);
 800fe68:	f8c2 57fc 	str.w	r5, [r2, #2044]	; 0x7fc
	for (u = 0; u < n; u ++) {
 800fe6c:	d1eb      	bne.n	800fe46 <solve_NTRU.constprop.0+0x13e6>
 800fe6e:	4c8c      	ldr	r4, [pc, #560]	; (80100a0 <solve_NTRU.constprop.0+0x1640>)
		rt3[u] = fpr_of(((int32_t *)t2)[u]);
 800fe70:	f858 0f04 	ldr.w	r0, [r8, #4]!
	return fpr_scaled(i, 0);
 800fe74:	2200      	movs	r2, #0
 800fe76:	17c1      	asrs	r1, r0, #31
 800fe78:	f7fb fff2 	bl	800be60 <falcon_inner_fpr_scaled>
	for (u = 0; u < n; u ++) {
 800fe7c:	45c2      	cmp	sl, r8
		rt3[u] = fpr_of(((int32_t *)t2)[u]);
 800fe7e:	e9e4 0102 	strd	r0, r1, [r4, #8]!
	for (u = 0; u < n; u ++) {
 800fe82:	d1f5      	bne.n	800fe70 <solve_NTRU.constprop.0+0x1410>
	Zf(FFT)(rt3, logn);
 800fe84:	4887      	ldr	r0, [pc, #540]	; (80100a4 <solve_NTRU.constprop.0+0x1644>)
 800fe86:	4d88      	ldr	r5, [pc, #544]	; (80100a8 <solve_NTRU.constprop.0+0x1648>)
 800fe88:	2109      	movs	r1, #9
 800fe8a:	f7fc fbf9 	bl	800c680 <falcon_inner_FFT>
	memmove(rt2, rt3, hn * sizeof *rt3);
 800fe8e:	4985      	ldr	r1, [pc, #532]	; (80100a4 <solve_NTRU.constprop.0+0x1644>)
 800fe90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe94:	f5a1 6000 	sub.w	r0, r1, #2048	; 0x800
 800fe98:	f004 fef4 	bl	8014c84 <memcpy>
 800fe9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe9e:	950c      	str	r5, [sp, #48]	; 0x30
 800fea0:	f503 5a3f 	add.w	sl, r3, #12224	; 0x2fc0
 800fea4:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
 800fea8:	f605 74fc 	addw	r4, r5, #4092	; 0xffc
		rt3[u] = fpr_of(((int32_t *)t1)[u]);
 800feac:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800feb0:	2200      	movs	r2, #0
 800feb2:	17c1      	asrs	r1, r0, #31
 800feb4:	f7fb ffd4 	bl	800be60 <falcon_inner_fpr_scaled>
 800feb8:	e9e4 0102 	strd	r0, r1, [r4, #8]!
	for (u = 0; u < n; u ++) {
 800febc:	45a2      	cmp	sl, r4
 800febe:	d1f5      	bne.n	800feac <solve_NTRU.constprop.0+0x144c>
	Zf(FFT)(rt3, logn);
 800fec0:	4878      	ldr	r0, [pc, #480]	; (80100a4 <solve_NTRU.constprop.0+0x1644>)
 800fec2:	4d7a      	ldr	r5, [pc, #488]	; (80100ac <solve_NTRU.constprop.0+0x164c>)
 800fec4:	2109      	movs	r1, #9
 800fec6:	f7fc fbdb 	bl	800c680 <falcon_inner_FFT>
 800feca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fecc:	f503 57ff 	add.w	r7, r3, #8160	; 0x1fe0
 800fed0:	3718      	adds	r7, #24
 800fed2:	f5a5 6600 	sub.w	r6, r5, #2048	; 0x800
	return fpr_div(4607182418800017408u, x);
 800fed6:	e9fb 2302 	ldrd	r2, r3, [fp, #8]!
 800feda:	4975      	ldr	r1, [pc, #468]	; (80100b0 <solve_NTRU.constprop.0+0x1650>)
 800fedc:	2000      	movs	r0, #0
 800fede:	f7fd f84f 	bl	800cf80 <falcon_inner_fpr_div>
		a[u] = fpr_mul(a[u], ib);
 800fee2:	4602      	mov	r2, r0
 800fee4:	460b      	mov	r3, r1
 800fee6:	4680      	mov	r8, r0
 800fee8:	460c      	mov	r4, r1
 800feea:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 800feee:	f7fc f8b7 	bl	800c060 <falcon_inner_fpr_mul>
 800fef2:	e9c6 0100 	strd	r0, r1, [r6]
		a[u + hn] = fpr_mul(a[u + hn], ib);
 800fef6:	4642      	mov	r2, r8
 800fef8:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800fefc:	4623      	mov	r3, r4
 800fefe:	f7fc f8af 	bl	800c060 <falcon_inner_fpr_mul>
	for (u = 0; u < hn; u ++) {
 800ff02:	455f      	cmp	r7, fp
		a[u + hn] = fpr_mul(a[u + hn], ib);
 800ff04:	e9c5 0100 	strd	r0, r1, [r5]
	for (u = 0; u < hn; u ++) {
 800ff08:	d1e5      	bne.n	800fed6 <solve_NTRU.constprop.0+0x1476>
	Zf(iFFT)(rt3, logn);
 800ff0a:	4866      	ldr	r0, [pc, #408]	; (80100a4 <solve_NTRU.constprop.0+0x1644>)
 800ff0c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80100a8 <solve_NTRU.constprop.0+0x1648>
	w += p & -(w >> 31);
 800ff10:	f8df b188 	ldr.w	fp, [pc, #392]	; 801009c <solve_NTRU.constprop.0+0x163c>
	Zf(iFFT)(rt3, logn);
 800ff14:	2109      	movs	r1, #9
 800ff16:	f7fc fc93 	bl	800c840 <falcon_inner_iFFT>
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800ff1a:	f8dd e070 	ldr.w	lr, [sp, #112]	; 0x70
 800ff1e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
		t1[u] = modp_set((int32_t)fpr_rint(rt3[u]), p);
 800ff22:	f85e 1f08 	ldr.w	r1, [lr, #8]!
 800ff26:	f8de 5004 	ldr.w	r5, [lr, #4]
	e = 1085 - ((int)(x >> 52) & 0x7FF);
 800ff2a:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ff2e:	f5c2 6087 	rsb	r0, r2, #1080	; 0x438
 800ff32:	3005      	adds	r0, #5
	e &= 63;
 800ff34:	f000 063f 	and.w	r6, r0, #63	; 0x3f
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800ff38:	02ab      	lsls	r3, r5, #10
	d = fpr_ulsh(m, 63 - e);
 800ff3a:	f1c6 073f 	rsb	r7, r6, #63	; 0x3f
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800ff3e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 800ff42:	f5c2 727f 	rsb	r2, r2, #1020	; 0x3fc
 800ff46:	3201      	adds	r2, #1
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800ff48:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 800ff4c:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800ff50:	117b      	asrs	r3, r7, #5
 800ff52:	425b      	negs	r3, r3
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 800ff54:	ea0c 7ce2 	and.w	ip, ip, r2, asr #31
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 800ff58:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800ff5c:	ea2c 0403 	bic.w	r4, ip, r3
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 800ff60:	ea01 71e2 	and.w	r1, r1, r2, asr #31
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800ff64:	ea4f 73e7 	mov.w	r3, r7, asr #31
 800ff68:	ea8c 0201 	eor.w	r2, ip, r1
 800ff6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800ff70:	4013      	ands	r3, r2
	return x << (n & 31);
 800ff72:	f007 091f 	and.w	r9, r7, #31
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 800ff76:	404b      	eors	r3, r1
	return x << (n & 31);
 800ff78:	f067 071f 	orn	r7, r7, #31
 800ff7c:	fa04 f707 	lsl.w	r7, r4, r7
 800ff80:	fa03 f309 	lsl.w	r3, r3, r9
 800ff84:	433b      	orrs	r3, r7
 800ff86:	f1c9 0720 	rsb	r7, r9, #32
 800ff8a:	fa24 f707 	lsr.w	r7, r4, r7
 800ff8e:	433b      	orrs	r3, r7
	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 800ff90:	f023 4760 	bic.w	r7, r3, #3758096384	; 0xe0000000
	return x << (n & 31);
 800ff94:	fa04 f409 	lsl.w	r4, r4, r9
	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 800ff98:	433c      	orrs	r4, r7
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800ff9a:	f346 1740 	sbfx	r7, r6, #5, #1
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 800ff9e:	4266      	negs	r6, r4
 800ffa0:	4334      	orrs	r4, r6
 800ffa2:	0f5b      	lsrs	r3, r3, #29
	return x >> (n & 31);
 800ffa4:	f000 001f 	and.w	r0, r0, #31
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 800ffa8:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800ffac:	403a      	ands	r2, r7
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800ffae:	24c8      	movs	r4, #200	; 0xc8
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800ffb0:	ea21 0107 	bic.w	r1, r1, r7
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800ffb4:	fa24 f303 	lsr.w	r3, r4, r3
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 800ffb8:	ea82 020c 	eor.w	r2, r2, ip
	return x >> (n & 31);
 800ffbc:	f1c0 0420 	rsb	r4, r0, #32
 800ffc0:	40c2      	lsrs	r2, r0
 800ffc2:	fa01 f404 	lsl.w	r4, r1, r4
 800ffc6:	3820      	subs	r0, #32
 800ffc8:	4322      	orrs	r2, r4
 800ffca:	fa21 f000 	lsr.w	r0, r1, r0
	s = (uint32_t)(x >> 63);
 800ffce:	0fed      	lsrs	r5, r5, #31
	return x >> (n & 31);
 800ffd0:	4302      	orrs	r2, r0
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 800ffd2:	f003 0301 	and.w	r3, r3, #1
 800ffd6:	189b      	adds	r3, r3, r2
	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 800ffd8:	426a      	negs	r2, r5
 800ffda:	4053      	eors	r3, r2
 800ffdc:	195b      	adds	r3, r3, r5
	w += p & -(w >> 31);
 800ffde:	ea0b 72e3 	and.w	r2, fp, r3, asr #31
 800ffe2:	4413      	add	r3, r2
	for (u = 0; u < n; u ++) {
 800ffe4:	45f2      	cmp	sl, lr
		t1[u] = modp_set((int32_t)fpr_rint(rt3[u]), p);
 800ffe6:	f848 3f04 	str.w	r3, [r8, #4]!
	for (u = 0; u < n; u ++) {
 800ffea:	d19a      	bne.n	800ff22 <solve_NTRU.constprop.0+0x14c2>
	modp_mkgm2(t2, t3, logn, PRIMES[0].g, p, p0i);
 800ffec:	492d      	ldr	r1, [pc, #180]	; (80100a4 <solve_NTRU.constprop.0+0x1644>)
 800ffee:	4b27      	ldr	r3, [pc, #156]	; (801008c <solve_NTRU.constprop.0+0x162c>)
 800fff0:	9301      	str	r3, [sp, #4]
 800fff2:	f5a1 6000 	sub.w	r0, r1, #2048	; 0x800
 800fff6:	2209      	movs	r2, #9
 800fff8:	4b26      	ldr	r3, [pc, #152]	; (8010094 <solve_NTRU.constprop.0+0x1634>)
 800fffa:	f8cd b000 	str.w	fp, [sp]
 800fffe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	w += p & -(w >> 31);
 8010002:	4c26      	ldr	r4, [pc, #152]	; (801009c <solve_NTRU.constprop.0+0x163c>)
	modp_mkgm2(t2, t3, logn, PRIMES[0].g, p, p0i);
 8010004:	f7fd ff64 	bl	800ded0 <modp_mkgm2>
 8010008:	9839      	ldr	r0, [sp, #228]	; 0xe4
 801000a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801000c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
		t4[u] = modp_set(f[u], p);
 801000e:	f912 6f01 	ldrsb.w	r6, [r2, #1]!
		t5[u] = modp_set(g[u], p);
 8010012:	f910 5f01 	ldrsb.w	r5, [r0, #1]!
	w += p & -(w >> 31);
 8010016:	ea04 73e6 	and.w	r3, r4, r6, asr #31
 801001a:	4433      	add	r3, r6
		t4[u] = modp_set(f[u], p);
 801001c:	f841 3f04 	str.w	r3, [r1, #4]!
	w += p & -(w >> 31);
 8010020:	ea04 73e5 	and.w	r3, r4, r5, asr #31
 8010024:	442b      	add	r3, r5
		t5[u] = modp_set(g[u], p);
 8010026:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
	for (u = 0; u < n; u ++) {
 801002a:	4b22      	ldr	r3, [pc, #136]	; (80100b4 <solve_NTRU.constprop.0+0x1654>)
 801002c:	4293      	cmp	r3, r2
 801002e:	d1ee      	bne.n	801000e <solve_NTRU.constprop.0+0x15ae>
 8010030:	4a21      	ldr	r2, [pc, #132]	; (80100b8 <solve_NTRU.constprop.0+0x1658>)
 8010032:	f8df a058 	ldr.w	sl, [pc, #88]	; 801008c <solve_NTRU.constprop.0+0x162c>
 8010036:	9400      	str	r4, [sp, #0]
 8010038:	f5a2 6000 	sub.w	r0, r2, #2048	; 0x800
 801003c:	2309      	movs	r3, #9
 801003e:	2101      	movs	r1, #1
 8010040:	f8cd a004 	str.w	sl, [sp, #4]
 8010044:	f7f9 fa7c 	bl	8009540 <modp_NTT2_ext.part.0>
 8010048:	4a1b      	ldr	r2, [pc, #108]	; (80100b8 <solve_NTRU.constprop.0+0x1658>)
	d = (uint32_t)((z + w) >> 31) - p;
 801004a:	f8df b070 	ldr.w	fp, [pc, #112]	; 80100bc <solve_NTRU.constprop.0+0x165c>
 801004e:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 8010052:	e9cd 4a00 	strd	r4, sl, [sp]
 8010056:	2309      	movs	r3, #9
 8010058:	2101      	movs	r1, #1
 801005a:	f7f9 fa71 	bl	8009540 <modp_NTT2_ext.part.0>
 801005e:	4a16      	ldr	r2, [pc, #88]	; (80100b8 <solve_NTRU.constprop.0+0x1658>)
 8010060:	e9cd 4a00 	strd	r4, sl, [sp]
 8010064:	2309      	movs	r3, #9
 8010066:	2101      	movs	r1, #1
 8010068:	f502 50c0 	add.w	r0, r2, #6144	; 0x1800
 801006c:	f7f9 fa68 	bl	8009540 <modp_NTT2_ext.part.0>
 8010070:	9b21      	ldr	r3, [sp, #132]	; 0x84
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010072:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	d += p & -(d >> 31);
 8010076:	4c09      	ldr	r4, [pc, #36]	; (801009c <solve_NTRU.constprop.0+0x163c>)
 8010078:	f8df e02c 	ldr.w	lr, [pc, #44]	; 80100a8 <solve_NTRU.constprop.0+0x1648>
 801007c:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 801007e:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8010082:	f203 78fc 	addw	r8, r3, #2044	; 0x7fc
 8010086:	46d4      	mov	ip, sl
 8010088:	e01a      	b.n	80100c0 <solve_NTRU.constprop.0+0x1660>
 801008a:	bf00      	nop
 801008c:	79bfd7ff 	.word	0x79bfd7ff
 8010090:	2000f0e0 	.word	0x2000f0e0
 8010094:	16d6ad45 	.word	0x16d6ad45
 8010098:	c00013ff 	.word	0xc00013ff
 801009c:	7fffd801 	.word	0x7fffd801
 80100a0:	2000e8d8 	.word	0x2000e8d8
 80100a4:	2000e8e0 	.word	0x2000e8e0
 80100a8:	2000d8dc 	.word	0x2000d8dc
 80100ac:	2000f0d8 	.word	0x2000f0d8
 80100b0:	3ff00000 	.word	0x3ff00000
 80100b4:	20002ab7 	.word	0x20002ab7
 80100b8:	2000e0e0 	.word	0x2000e0e0
 80100bc:	800027ff 	.word	0x800027ff
	z = (uint64_t)a * (uint64_t)b;
 80100c0:	f85e 1f04 	ldr.w	r1, [lr, #4]!
 80100c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100c6:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80100ca:	fba3 7101 	umull	r7, r1, r3, r1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 80100ce:	fba7 230c 	umull	r2, r3, r7, ip
 80100d2:	f022 4600 	bic.w	r6, r2, #2147483648	; 0x80000000
 80100d6:	0493      	lsls	r3, r2, #18
 80100d8:	1b9b      	subs	r3, r3, r6
 80100da:	f3c2 3290 	ubfx	r2, r2, #14, #17
 80100de:	f162 0200 	sbc.w	r2, r2, #0
 80100e2:	0092      	lsls	r2, r2, #2
 80100e4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80100e8:	009b      	lsls	r3, r3, #2
 80100ea:	1b9b      	subs	r3, r3, r6
 80100ec:	f162 0200 	sbc.w	r2, r2, #0
 80100f0:	02d2      	lsls	r2, r2, #11
 80100f2:	ea42 5253 	orr.w	r2, r2, r3, lsr #21
 80100f6:	02db      	lsls	r3, r3, #11
 80100f8:	199b      	adds	r3, r3, r6
 80100fa:	f142 0200 	adc.w	r2, r2, #0
	d = (uint32_t)((z + w) >> 31) - p;
 80100fe:	19db      	adds	r3, r3, r7
 8010100:	eb41 0102 	adc.w	r1, r1, r2
 8010104:	0fdb      	lsrs	r3, r3, #31
 8010106:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 801010a:	445b      	add	r3, fp
	d += p & -(d >> 31);
 801010c:	ea04 72e3 	and.w	r2, r4, r3, asr #31
 8010110:	4413      	add	r3, r2
	z = (uint64_t)a * (uint64_t)b;
 8010112:	fba3 7000 	umull	r7, r0, r3, r0
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010116:	fba7 120c 	umull	r1, r2, r7, ip
 801011a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801011e:	048a      	lsls	r2, r1, #18
 8010120:	1b92      	subs	r2, r2, r6
 8010122:	f3c1 3190 	ubfx	r1, r1, #14, #17
 8010126:	f161 0100 	sbc.w	r1, r1, #0
 801012a:	0089      	lsls	r1, r1, #2
 801012c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8010130:	0092      	lsls	r2, r2, #2
 8010132:	1b92      	subs	r2, r2, r6
 8010134:	f161 0100 	sbc.w	r1, r1, #0
 8010138:	02c9      	lsls	r1, r1, #11
 801013a:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 801013e:	02d2      	lsls	r2, r2, #11
 8010140:	1992      	adds	r2, r2, r6
 8010142:	f141 0100 	adc.w	r1, r1, #0
	d = (uint32_t)((z + w) >> 31) - p;
 8010146:	19d2      	adds	r2, r2, r7
 8010148:	eb40 0001 	adc.w	r0, r0, r1
 801014c:	0fd2      	lsrs	r2, r2, #31
	d = a - b;
 801014e:	f855 1f04 	ldr.w	r1, [r5, #4]!
	d = (uint32_t)((z + w) >> 31) - p;
 8010152:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8010156:	1b12      	subs	r2, r2, r4
	d = a - b;
 8010158:	1a89      	subs	r1, r1, r2
	d += p & -(d >> 31);
 801015a:	ea04 72e2 	and.w	r2, r4, r2, asr #31
	d = a - b;
 801015e:	1a8a      	subs	r2, r1, r2
	d += p & -(d >> 31);
 8010160:	ea04 71e2 	and.w	r1, r4, r2, asr #31
 8010164:	440a      	add	r2, r1
		Fp[u] = modp_sub(Fp[u],
 8010166:	602a      	str	r2, [r5, #0]
	z = (uint64_t)a * (uint64_t)b;
 8010168:	f8d9 0800 	ldr.w	r0, [r9, #2048]	; 0x800
 801016c:	fba3 3000 	umull	r3, r0, r3, r0
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010170:	fba3 120c 	umull	r1, r2, r3, ip
 8010174:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010178:	048a      	lsls	r2, r1, #18
 801017a:	1b92      	subs	r2, r2, r6
 801017c:	f3c1 3190 	ubfx	r1, r1, #14, #17
 8010180:	f161 0100 	sbc.w	r1, r1, #0
 8010184:	0089      	lsls	r1, r1, #2
 8010186:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801018a:	0092      	lsls	r2, r2, #2
 801018c:	1b92      	subs	r2, r2, r6
 801018e:	f161 0100 	sbc.w	r1, r1, #0
 8010192:	02c9      	lsls	r1, r1, #11
 8010194:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 8010198:	02d2      	lsls	r2, r2, #11
 801019a:	1992      	adds	r2, r2, r6
 801019c:	f141 0100 	adc.w	r1, r1, #0
	d = (uint32_t)((z + w) >> 31) - p;
 80101a0:	18d3      	adds	r3, r2, r3
 80101a2:	eb40 0001 	adc.w	r0, r0, r1
 80101a6:	0fdb      	lsrs	r3, r3, #31
	d = a - b;
 80101a8:	f8d5 2800 	ldr.w	r2, [r5, #2048]	; 0x800
	d = (uint32_t)((z + w) >> 31) - p;
 80101ac:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80101b0:	1b1b      	subs	r3, r3, r4
	d = a - b;
 80101b2:	1ad2      	subs	r2, r2, r3
	d += p & -(d >> 31);
 80101b4:	ea04 73e3 	and.w	r3, r4, r3, asr #31
	d = a - b;
 80101b8:	1ad3      	subs	r3, r2, r3
	d += p & -(d >> 31);
 80101ba:	ea04 72e3 	and.w	r2, r4, r3, asr #31
 80101be:	4413      	add	r3, r2
	for (u = 0; u < n; u ++) {
 80101c0:	45a8      	cmp	r8, r5
		Gp[u] = modp_sub(Gp[u],
 80101c2:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
	for (u = 0; u < n; u ++) {
 80101c6:	f47f af7b 	bne.w	80100c0 <solve_NTRU.constprop.0+0x1660>
 80101ca:	4a33      	ldr	r2, [pc, #204]	; (8010298 <solve_NTRU.constprop.0+0x1838>)
	return (int32_t)(x - (p & (((x - ((p + 1) >> 1)) >> 31) - 1)));
 80101cc:	4d33      	ldr	r5, [pc, #204]	; (801029c <solve_NTRU.constprop.0+0x183c>)
 80101ce:	f5a2 5000 	sub.w	r0, r2, #8192	; 0x2000
 80101d2:	e9cd 4a00 	strd	r4, sl, [sp]
 80101d6:	2309      	movs	r3, #9
 80101d8:	2101      	movs	r1, #1
 80101da:	f7f9 fa21 	bl	8009620 <modp_iNTT2_ext.part.0>
 80101de:	4a2e      	ldr	r2, [pc, #184]	; (8010298 <solve_NTRU.constprop.0+0x1838>)
 80101e0:	e9cd 4a00 	strd	r4, sl, [sp]
 80101e4:	2101      	movs	r1, #1
 80101e6:	f5a2 50c0 	sub.w	r0, r2, #6144	; 0x1800
 80101ea:	2309      	movs	r3, #9
 80101ec:	f7f9 fa18 	bl	8009620 <modp_iNTT2_ext.part.0>
 80101f0:	4c2b      	ldr	r4, [pc, #172]	; (80102a0 <solve_NTRU.constprop.0+0x1840>)
 80101f2:	9808      	ldr	r0, [sp, #32]
 80101f4:	993a      	ldr	r1, [sp, #232]	; 0xe8
		Fp[u] = (uint32_t)modp_norm(Fp[u], p);
 80101f6:	f851 2f04 	ldr.w	r2, [r1, #4]!
	return (int32_t)(x - (p & (((x - ((p + 1) >> 1)) >> 31) - 1)));
 80101fa:	1953      	adds	r3, r2, r5
 80101fc:	0fdb      	lsrs	r3, r3, #31
 80101fe:	3b01      	subs	r3, #1
 8010200:	4023      	ands	r3, r4
 8010202:	1ad2      	subs	r2, r2, r3
		Fp[u] = (uint32_t)modp_norm(Fp[u], p);
 8010204:	600a      	str	r2, [r1, #0]
		Gp[u] = (uint32_t)modp_norm(Gp[u], p);
 8010206:	f850 2f04 	ldr.w	r2, [r0, #4]!
	return (int32_t)(x - (p & (((x - ((p + 1) >> 1)) >> 31) - 1)));
 801020a:	1953      	adds	r3, r2, r5
 801020c:	0fdb      	lsrs	r3, r3, #31
 801020e:	3b01      	subs	r3, #1
 8010210:	4023      	ands	r3, r4
 8010212:	1ad2      	subs	r2, r2, r3
	for (u = 0; u < n; u ++) {
 8010214:	4588      	cmp	r8, r1
		Gp[u] = (uint32_t)modp_norm(Gp[u], p);
 8010216:	6002      	str	r2, [r0, #0]
	for (u = 0; u < n; u ++) {
 8010218:	d1ed      	bne.n	80101f6 <solve_NTRU.constprop.0+0x1796>
		if (z < -lim || z > lim) {
 801021a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801021c:	9921      	ldr	r1, [sp, #132]	; 0x84
 801021e:	4821      	ldr	r0, [pc, #132]	; (80102a4 <solve_NTRU.constprop.0+0x1844>)
 8010220:	4272      	negs	r2, r6
 8010222:	f501 6500 	add.w	r5, r1, #2048	; 0x800
	w = x[0];
 8010226:	f851 4b04 	ldr.w	r4, [r1], #4
	w |= (w & 0x40000000) << 1;
 801022a:	0063      	lsls	r3, r4, #1
 801022c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010230:	4323      	orrs	r3, r4
		if (z < -lim || z > lim) {
 8010232:	4293      	cmp	r3, r2
 8010234:	db1c      	blt.n	8010270 <solve_NTRU.constprop.0+0x1810>
 8010236:	429e      	cmp	r6, r3
 8010238:	db1a      	blt.n	8010270 <solve_NTRU.constprop.0+0x1810>
	for (u = 0; u < n; u ++) {
 801023a:	428d      	cmp	r5, r1
		d[u] = (int8_t)z;
 801023c:	f800 3b01 	strb.w	r3, [r0], #1
	for (u = 0; u < n; u ++) {
 8010240:	d1f1      	bne.n	8010226 <solve_NTRU.constprop.0+0x17c6>
 8010242:	4c19      	ldr	r4, [pc, #100]	; (80102a8 <solve_NTRU.constprop.0+0x1848>)
 8010244:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010246:	9e08      	ldr	r6, [sp, #32]
 8010248:	f603 70fc 	addw	r0, r3, #4092	; 0xffc
 801024c:	4621      	mov	r1, r4
 801024e:	e007      	b.n	8010260 <solve_NTRU.constprop.0+0x1800>
		if (z < -lim || z > lim) {
 8010250:	9f3b      	ldr	r7, [sp, #236]	; 0xec
 8010252:	429f      	cmp	r7, r3
 8010254:	db0c      	blt.n	8010270 <solve_NTRU.constprop.0+0x1810>
	for (u = 0; u < n; u ++) {
 8010256:	42b0      	cmp	r0, r6
		d[u] = (int8_t)z;
 8010258:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (u = 0; u < n; u ++) {
 801025c:	f000 8636 	beq.w	8010ecc <solve_NTRU.constprop.0+0x246c>
	w = x[0];
 8010260:	f856 7f04 	ldr.w	r7, [r6, #4]!
	w |= (w & 0x40000000) << 1;
 8010264:	007b      	lsls	r3, r7, #1
 8010266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801026a:	433b      	orrs	r3, r7
		if (z < -lim || z > lim) {
 801026c:	4293      	cmp	r3, r2
 801026e:	daef      	bge.n	8010250 <solve_NTRU.constprop.0+0x17f0>
		return 0;
 8010270:	2000      	movs	r0, #0
}
 8010272:	b03f      	add	sp, #252	; 0xfc
 8010274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (u = 0; u < llen; u ++) {
 8010278:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801027a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801027c:	3204      	adds	r2, #4
 801027e:	9210      	str	r2, [sp, #64]	; 0x40
 8010280:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010282:	3301      	adds	r3, #1
 8010284:	4293      	cmp	r3, r2
 8010286:	930e      	str	r3, [sp, #56]	; 0x38
 8010288:	d210      	bcs.n	80102ac <solve_NTRU.constprop.0+0x184c>
		p = primes[u].p;
 801028a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801028c:	f853 4f0c 	ldr.w	r4, [r3, #12]!
 8010290:	9312      	str	r3, [sp, #72]	; 0x48
 8010292:	f7fe bcf8 	b.w	800ec86 <solve_NTRU.constprop.0+0x226>
 8010296:	bf00      	nop
 8010298:	2000e8e0 	.word	0x2000e8e0
 801029c:	c00013ff 	.word	0xc00013ff
 80102a0:	7fffd801 	.word	0x7fffd801
 80102a4:	20001f00 	.word	0x20001f00
 80102a8:	2000d8df 	.word	0x2000d8df
		igm = gm + n;
 80102ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
		fx = igm + n;
 80102ae:	9e18      	ldr	r6, [sp, #96]	; 0x60
		Gp = Fp + hn;
 80102b0:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
				v < n; v ++, x += slen, y += slen)
 80102b4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
		igm = gm + n;
 80102b6:	2304      	movs	r3, #4
 80102b8:	4093      	lsls	r3, r2
		fx = igm + n;
 80102ba:	eb06 0243 	add.w	r2, r6, r3, lsl #1
		Fp = gx + n;
 80102be:	eb02 0743 	add.w	r7, r2, r3, lsl #1
		gx = fx + n;
 80102c2:	18d1      	adds	r1, r2, r3
		Gp = Fp + hn;
 80102c4:	eb07 0c8e 	add.w	ip, r7, lr, lsl #2
 80102c8:	4698      	mov	r8, r3
		igm = gm + n;
 80102ca:	9337      	str	r3, [sp, #220]	; 0xdc
 80102cc:	3b04      	subs	r3, #4
 80102ce:	189d      	adds	r5, r3, r2
 80102d0:	f1ac 0304 	sub.w	r3, ip, #4
 80102d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80102d6:	4643      	mov	r3, r8
 80102d8:	18f3      	adds	r3, r6, r3
				v < n; v ++, x += slen, y += slen)
 80102da:	00a0      	lsls	r0, r4, #2
		igm = gm + n;
 80102dc:	9320      	str	r3, [sp, #128]	; 0x80
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 80102de:	1f03      	subs	r3, r0, #4
 80102e0:	9332      	str	r3, [sp, #200]	; 0xc8
			v ++, x += (llen << 1), y += (llen << 1))
 80102e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
		Gp = Fp + hn;
 80102e4:	4eb2      	ldr	r6, [pc, #712]	; (80105b0 <solve_NTRU.constprop.0+0x1b50>)
		fx = igm + n;
 80102e6:	9225      	str	r2, [sp, #148]	; 0x94
			v ++, x += (llen << 1), y += (llen << 1))
 80102e8:	00db      	lsls	r3, r3, #3
 80102ea:	9315      	str	r3, [sp, #84]	; 0x54
		Gp = Fp + hn;
 80102ec:	2300      	movs	r3, #0
 80102ee:	9316      	str	r3, [sp, #88]	; 0x58
 80102f0:	1f3b      	subs	r3, r7, #4
 80102f2:	932b      	str	r3, [sp, #172]	; 0xac
 80102f4:	f1ac 0304 	sub.w	r3, ip, #4
 80102f8:	932c      	str	r3, [sp, #176]	; 0xb0
 80102fa:	1d13      	adds	r3, r2, #4
 80102fc:	9329      	str	r3, [sp, #164]	; 0xa4
 80102fe:	1d0b      	adds	r3, r1, #4
 8010300:	932a      	str	r3, [sp, #168]	; 0xa8
	x --;
 8010302:	1e63      	subs	r3, r4, #1
		Fp = gx + n;
 8010304:	9719      	str	r7, [sp, #100]	; 0x64
		gx = fx + n;
 8010306:	9126      	str	r1, [sp, #152]	; 0x98
				v < n; v ++, x += slen, y += slen)
 8010308:	9028      	str	r0, [sp, #160]	; 0xa0
		Gp = Fp + hn;
 801030a:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
 801030e:	952f      	str	r5, [sp, #188]	; 0xbc
	x --;
 8010310:	9333      	str	r3, [sp, #204]	; 0xcc
	y = 2 - p;
 8010312:	f1c6 0302 	rsb	r3, r6, #2
	y *= 2 - p * y;
 8010316:	fb06 f203 	mul.w	r2, r6, r3
 801031a:	f1c2 0202 	rsb	r2, r2, #2
 801031e:	fb02 f303 	mul.w	r3, r2, r3
	y *= 2 - p * y;
 8010322:	fb06 f203 	mul.w	r2, r6, r3
 8010326:	f1c2 0202 	rsb	r2, r2, #2
 801032a:	fb02 f303 	mul.w	r3, r2, r3
	y *= 2 - p * y;
 801032e:	fb06 f203 	mul.w	r2, r6, r3
 8010332:	f1c2 0202 	rsb	r2, r2, #2
 8010336:	fb02 f303 	mul.w	r3, r2, r3
	y *= 2 - p * y;
 801033a:	fb06 f203 	mul.w	r2, r6, r3
 801033e:	3a02      	subs	r2, #2
	return (uint32_t)0x7FFFFFFF & -y;
 8010340:	fb02 f303 	mul.w	r3, r2, r3
 8010344:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
		R2 = modp_R2(p, p0i);
 8010348:	4651      	mov	r1, sl
 801034a:	4630      	mov	r0, r6
 801034c:	f7fd fd50 	bl	800ddf0 <modp_R2.lto_priv.0>
		if (u == slen) {
 8010350:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010352:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
		R2 = modp_R2(p, p0i);
 8010354:	9012      	str	r0, [sp, #72]	; 0x48
		if (u == slen) {
 8010356:	4293      	cmp	r3, r2
 8010358:	f000 812c 	beq.w	80105b4 <solve_NTRU.constprop.0+0x1b54>
		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 801035c:	e9cd 6a00 	strd	r6, sl, [sp]
 8010360:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010362:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	9920      	ldr	r1, [sp, #128]	; 0x80
 8010368:	9818      	ldr	r0, [sp, #96]	; 0x60
 801036a:	f7fd fdb1 	bl	800ded0 <modp_mkgm2>
		if (u < slen) {
 801036e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010370:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010372:	4293      	cmp	r3, r2
 8010374:	f080 813c 	bcs.w	80105f0 <solve_NTRU.constprop.0+0x1b90>
 8010378:	9a24      	ldr	r2, [sp, #144]	; 0x90
			for (v = 0, x = ft + u, y = gt + u;
 801037a:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
 801037e:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8010380:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8010384:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010386:	009c      	lsls	r4, r3, #2
 8010388:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801038c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801038e:	1f19      	subs	r1, r3, #4
 8010390:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010392:	462a      	mov	r2, r5
 8010394:	f1a3 0c04 	sub.w	ip, r3, #4
 8010398:	4603      	mov	r3, r0
				fx[v] = *x;
 801039a:	f8d3 8000 	ldr.w	r8, [r3]
 801039e:	f841 8f04 	str.w	r8, [r1, #4]!
				gx[v] = *y;
 80103a2:	f8d2 8000 	ldr.w	r8, [r2]
 80103a6:	f84c 8f04 	str.w	r8, [ip, #4]!
				v < n; v ++, x += slen, y += slen)
 80103aa:	458e      	cmp	lr, r1
 80103ac:	443b      	add	r3, r7
 80103ae:	443a      	add	r2, r7
 80103b0:	d1f3      	bne.n	801039a <solve_NTRU.constprop.0+0x193a>
 80103b2:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 80103b6:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80103ba:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80103bc:	464b      	mov	r3, r9
 80103be:	4642      	mov	r2, r8
 80103c0:	4639      	mov	r1, r7
 80103c2:	e9cd 6a00 	strd	r6, sl, [sp]
 80103c6:	f7f9 f92b 	bl	8009620 <modp_iNTT2_ext.part.0>
 80103ca:	e9cd 6a00 	strd	r6, sl, [sp]
 80103ce:	4628      	mov	r0, r5
 80103d0:	464b      	mov	r3, r9
 80103d2:	4642      	mov	r2, r8
 80103d4:	4639      	mov	r1, r7
 80103d6:	f7f9 f923 	bl	8009620 <modp_iNTT2_ext.part.0>
 80103da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80103de:	992b      	ldr	r1, [sp, #172]	; 0xac
		for (v = 0, x = Ft + u, y = Gt + u;
 80103e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103e2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80103e4:	9108      	str	r1, [sp, #32]
 80103e6:	4423      	add	r3, r4
 80103e8:	4422      	add	r2, r4
 80103ea:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80103ec:	931d      	str	r3, [sp, #116]	; 0x74
 80103ee:	921c      	str	r2, [sp, #112]	; 0x70
 80103f0:	940e      	str	r4, [sp, #56]	; 0x38
			Fp[v] = *x;
 80103f2:	681d      	ldr	r5, [r3, #0]
 80103f4:	f841 5f04 	str.w	r5, [r1, #4]!
			Gp[v] = *y;
 80103f8:	6815      	ldr	r5, [r2, #0]
 80103fa:	f844 5f04 	str.w	r5, [r4, #4]!
			v < hn; v ++, x += llen, y += llen)
 80103fe:	428f      	cmp	r7, r1
 8010400:	4403      	add	r3, r0
 8010402:	4402      	add	r2, r0
 8010404:	d1f5      	bne.n	80103f2 <solve_NTRU.constprop.0+0x1992>
	if (logn == 0) {
 8010406:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8010408:	462b      	mov	r3, r5
 801040a:	b17d      	cbz	r5, 801042c <solve_NTRU.constprop.0+0x19cc>
 801040c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801040e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010410:	4622      	mov	r2, r4
 8010412:	2101      	movs	r1, #1
 8010414:	e9cd 6a00 	strd	r6, sl, [sp]
 8010418:	f7f9 f892 	bl	8009540 <modp_NTT2_ext.part.0>
 801041c:	e9cd 6a00 	strd	r6, sl, [sp]
 8010420:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8010422:	462b      	mov	r3, r5
 8010424:	4622      	mov	r2, r4
 8010426:	2101      	movs	r1, #1
 8010428:	f7f9 f88a 	bl	8009540 <modp_NTT2_ext.part.0>
		for (v = 0, x = Ft + u, y = Gt + u;
 801042c:	e9dd c91c 	ldrd	ip, r9, [sp, #112]	; 0x70
 8010430:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010432:	930c      	str	r3, [sp, #48]	; 0x30
 8010434:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8010436:	930a      	str	r3, [sp, #40]	; 0x28
 8010438:	46ce      	mov	lr, r9
	z = (uint64_t)a * (uint64_t)b;
 801043a:	9b08      	ldr	r3, [sp, #32]
 801043c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801043e:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8010442:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8010444:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8010448:	9308      	str	r3, [sp, #32]
 801044a:	fba4 5101 	umull	r5, r1, r4, r1
 801044e:	900e      	str	r0, [sp, #56]	; 0x38
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010450:	fba5 300a 	umull	r3, r0, r5, sl
 8010454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010458:	fba3 0306 	umull	r0, r3, r3, r6
	d = (uint32_t)((z + w) >> 31) - p;
 801045c:	1940      	adds	r0, r0, r5
	z = (uint64_t)a * (uint64_t)b;
 801045e:	fba4 4202 	umull	r4, r2, r4, r2
	d = (uint32_t)((z + w) >> 31) - p;
 8010462:	eb43 0301 	adc.w	r3, r3, r1
 8010466:	0fc0      	lsrs	r0, r0, #31
 8010468:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 801046c:	fba4 310a 	umull	r3, r1, r4, sl
 8010470:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010474:	fba3 1306 	umull	r1, r3, r3, r6
	d = (uint32_t)((z + w) >> 31) - p;
 8010478:	1909      	adds	r1, r1, r4
 801047a:	eb43 0302 	adc.w	r3, r3, r2
 801047e:	1b80      	subs	r0, r0, r6
			gtA = gx[(v << 1) + 0];
 8010480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	d = (uint32_t)((z + w) >> 31) - p;
 8010482:	0fc9      	lsrs	r1, r1, #31
 8010484:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
	d += p & -(d >> 31);
 8010488:	ea06 73e0 	and.w	r3, r6, r0, asr #31
			gtA = gx[(v << 1) + 0];
 801048c:	f852 5c04 	ldr.w	r5, [r2, #-4]
	d += p & -(d >> 31);
 8010490:	4418      	add	r0, r3
	z = (uint64_t)a * (uint64_t)b;
 8010492:	f852 3b08 	ldr.w	r3, [r2], #8
 8010496:	920a      	str	r2, [sp, #40]	; 0x28
			ftA = fx[(v << 1) + 0];
 8010498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	d = (uint32_t)((z + w) >> 31) - p;
 801049a:	1b89      	subs	r1, r1, r6
			ftA = fx[(v << 1) + 0];
 801049c:	f852 4c04 	ldr.w	r4, [r2, #-4]
			ftB = fx[(v << 1) + 1];
 80104a0:	f852 7b08 	ldr.w	r7, [r2], #8
 80104a4:	920c      	str	r2, [sp, #48]	; 0x30
	z = (uint64_t)a * (uint64_t)b;
 80104a6:	fba0 9803 	umull	r9, r8, r0, r3
	d += p & -(d >> 31);
 80104aa:	ea06 73e1 	and.w	r3, r6, r1, asr #31
 80104ae:	4419      	add	r1, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 80104b0:	fba9 230a 	umull	r2, r3, r9, sl
	z = (uint64_t)a * (uint64_t)b;
 80104b4:	fba7 7b01 	umull	r7, fp, r7, r1
 80104b8:	fba0 5005 	umull	r5, r0, r0, r5
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 80104bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
	z = (uint64_t)a * (uint64_t)b;
 80104c0:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 80104c4:	fba5 3b0a 	umull	r3, fp, r5, sl
 80104c8:	fba2 2b06 	umull	r2, fp, r2, r6
	d = (uint32_t)((z + w) >> 31) - p;
 80104cc:	eb12 0209 	adds.w	r2, r2, r9
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 80104d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
	d = (uint32_t)((z + w) >> 31) - p;
 80104d4:	eb4b 0b08 	adc.w	fp, fp, r8
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 80104d8:	fba7 890a 	umull	r8, r9, r7, sl
 80104dc:	fba3 3906 	umull	r3, r9, r3, r6
	z = (uint64_t)a * (uint64_t)b;
 80104e0:	fba1 4104 	umull	r4, r1, r1, r4
	d = (uint32_t)((z + w) >> 31) - p;
 80104e4:	195b      	adds	r3, r3, r5
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 80104e6:	f028 4800 	bic.w	r8, r8, #2147483648	; 0x80000000
	d = (uint32_t)((z + w) >> 31) - p;
 80104ea:	eb49 0900 	adc.w	r9, r9, r0
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 80104ee:	fba4 050a 	umull	r0, r5, r4, sl
 80104f2:	fba8 8506 	umull	r8, r5, r8, r6
	d = (uint32_t)((z + w) >> 31) - p;
 80104f6:	eb18 0807 	adds.w	r8, r8, r7
 80104fa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80104fc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8010500:	eb45 0507 	adc.w	r5, r5, r7
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010504:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	d = (uint32_t)((z + w) >> 31) - p;
 8010508:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 801050c:	ea48 0845 	orr.w	r8, r8, r5, lsl #1
 8010510:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010514:	fba0 0506 	umull	r0, r5, r0, r6
	d = (uint32_t)((z + w) >> 31) - p;
 8010518:	1900      	adds	r0, r0, r4
 801051a:	eba2 0206 	sub.w	r2, r2, r6
 801051e:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 8010522:	eb45 0501 	adc.w	r5, r5, r1
 8010526:	ea43 0349 	orr.w	r3, r3, r9, lsl #1
	d += p & -(d >> 31);
 801052a:	ea06 71e2 	and.w	r1, r6, r2, asr #31
 801052e:	440a      	add	r2, r1
	d = (uint32_t)((z + w) >> 31) - p;
 8010530:	1b9b      	subs	r3, r3, r6
			x[0] = modp_montymul(gtB, mFp, p, p0i);
 8010532:	f8ce 2000 	str.w	r2, [lr]
	d += p & -(d >> 31);
 8010536:	ea06 72e3 	and.w	r2, r6, r3, asr #31
 801053a:	4413      	add	r3, r2
			x[llen] = modp_montymul(gtA, mFp, p, p0i);
 801053c:	9a09      	ldr	r2, [sp, #36]	; 0x24
			v ++, x += (llen << 1), y += (llen << 1))
 801053e:	9915      	ldr	r1, [sp, #84]	; 0x54
			x[llen] = modp_montymul(gtA, mFp, p, p0i);
 8010540:	f84e 3002 	str.w	r3, [lr, r2]
	d = (uint32_t)((z + w) >> 31) - p;
 8010544:	eba8 0806 	sub.w	r8, r8, r6
 8010548:	0fc0      	lsrs	r0, r0, #31
 801054a:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
	d += p & -(d >> 31);
 801054e:	ea06 73e8 	and.w	r3, r6, r8, asr #31
	d = (uint32_t)((z + w) >> 31) - p;
 8010552:	1b80      	subs	r0, r0, r6
	d += p & -(d >> 31);
 8010554:	4443      	add	r3, r8
			y[0] = modp_montymul(ftB, mGp, p, p0i);
 8010556:	f8cc 3000 	str.w	r3, [ip]
	d += p & -(d >> 31);
 801055a:	ea06 73e0 	and.w	r3, r6, r0, asr #31
 801055e:	4418      	add	r0, r3
			y[llen] = modp_montymul(ftA, mGp, p, p0i);
 8010560:	f84c 0002 	str.w	r0, [ip, r2]
		for (v = 0, x = Ft + u, y = Gt + u; v < hn;
 8010564:	9b08      	ldr	r3, [sp, #32]
 8010566:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010568:	429a      	cmp	r2, r3
			v ++, x += (llen << 1), y += (llen << 1))
 801056a:	448e      	add	lr, r1
 801056c:	448c      	add	ip, r1
		for (v = 0, x = Ft + u, y = Gt + u; v < hn;
 801056e:	f47f af64 	bne.w	801043a <solve_NTRU.constprop.0+0x19da>
 8010572:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	for (u = 0; u < llen; u ++) {
 8010574:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8010576:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801057a:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801057c:	981d      	ldr	r0, [sp, #116]	; 0x74
 801057e:	3401      	adds	r4, #1
 8010580:	4643      	mov	r3, r8
 8010582:	463a      	mov	r2, r7
 8010584:	4629      	mov	r1, r5
 8010586:	e9cd 6a00 	strd	r6, sl, [sp]
 801058a:	9416      	str	r4, [sp, #88]	; 0x58
 801058c:	f7f9 f848 	bl	8009620 <modp_iNTT2_ext.part.0>
 8010590:	e9cd 6a00 	strd	r6, sl, [sp]
 8010594:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010596:	4643      	mov	r3, r8
 8010598:	463a      	mov	r2, r7
 801059a:	4629      	mov	r1, r5
 801059c:	f7f9 f840 	bl	8009620 <modp_iNTT2_ext.part.0>
 80105a0:	42ac      	cmp	r4, r5
 80105a2:	f080 80ec 	bcs.w	801077e <solve_NTRU.constprop.0+0x1d1e>
		p = primes[u].p;
 80105a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80105a8:	f853 6f0c 	ldr.w	r6, [r3, #12]!
 80105ac:	931f      	str	r3, [sp, #124]	; 0x7c
 80105ae:	e6b0      	b.n	8010312 <solve_NTRU.constprop.0+0x18b2>
 80105b0:	7fffd801 	.word	0x7fffd801
			zint_rebuild_CRT(ft, slen, slen, n, primes, 1, t1);
 80105b4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80105b6:	f8dd 80c4 	ldr.w	r8, [sp, #196]	; 0xc4
 80105ba:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80105bc:	9824      	ldr	r0, [sp, #144]	; 0x90
 80105be:	9701      	str	r7, [sp, #4]
 80105c0:	2401      	movs	r4, #1
 80105c2:	4643      	mov	r3, r8
 80105c4:	462a      	mov	r2, r5
 80105c6:	4629      	mov	r1, r5
 80105c8:	9400      	str	r4, [sp, #0]
 80105ca:	f001 fec9 	bl	8012360 <zint_rebuild_CRT.constprop.0>
			zint_rebuild_CRT(gt, slen, slen, n, primes, 1, t1);
 80105ce:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80105d0:	9400      	str	r4, [sp, #0]
 80105d2:	4643      	mov	r3, r8
 80105d4:	462a      	mov	r2, r5
 80105d6:	4629      	mov	r1, r5
 80105d8:	9701      	str	r7, [sp, #4]
 80105da:	f001 fec1 	bl	8012360 <zint_rebuild_CRT.constprop.0>
		modp_mkgm2(gm, igm, logn, primes[u].g, p, p0i);
 80105de:	e9cd 6a00 	strd	r6, sl, [sp]
 80105e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80105e4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80105ea:	4638      	mov	r0, r7
 80105ec:	f7fd fc70 	bl	800ded0 <modp_mkgm2>
	for (i = 0; (1U << i) <= x; i ++) {
 80105f0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
	return ((uint32_t)1 << 31) - p;
 80105f2:	f1c6 4400 	rsb	r4, r6, #2147483648	; 0x80000000
	for (i = 0; (1U << i) <= x; i ++) {
 80105f6:	b3b2      	cbz	r2, 8010666 <solve_NTRU.constprop.0+0x1c06>
	r = R2;
 80105f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
	for (i = 0; (1U << i) <= x; i ++) {
 80105fa:	2700      	movs	r7, #0
 80105fc:	4693      	mov	fp, r2
	z = (uint64_t)a * (uint64_t)b;
 80105fe:	fba3 c803 	umull	ip, r8, r3, r3
 8010602:	fba4 3003 	umull	r3, r0, r4, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010606:	fbac 120a 	umull	r1, r2, ip, sl
		if ((x & (1U << i)) != 0) {
 801060a:	fa2b f907 	lsr.w	r9, fp, r7
	z = (uint64_t)a * (uint64_t)b;
 801060e:	9008      	str	r0, [sp, #32]
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010610:	fba3 050a 	umull	r0, r5, r3, sl
 8010614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010618:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	for (i = 0; (1U << i) <= x; i ++) {
 801061c:	3701      	adds	r7, #1
 801061e:	f04f 0e01 	mov.w	lr, #1
		if ((x & (1U << i)) != 0) {
 8010622:	f019 0f01 	tst.w	r9, #1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010626:	fba1 2106 	umull	r2, r1, r1, r6
 801062a:	fba0 5006 	umull	r5, r0, r0, r6
	for (i = 0; (1U << i) <= x; i ++) {
 801062e:	fa0e fe07 	lsl.w	lr, lr, r7
		if ((x & (1U << i)) != 0) {
 8010632:	d00b      	beq.n	801064c <solve_NTRU.constprop.0+0x1bec>
	d = (uint32_t)((z + w) >> 31) - p;
 8010634:	18ed      	adds	r5, r5, r3
 8010636:	9b08      	ldr	r3, [sp, #32]
 8010638:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 801063c:	eb40 0003 	adc.w	r0, r0, r3
 8010640:	ea45 0540 	orr.w	r5, r5, r0, lsl #1
 8010644:	1bad      	subs	r5, r5, r6
	d += p & -(d >> 31);
 8010646:	ea06 74e5 	and.w	r4, r6, r5, asr #31
 801064a:	442c      	add	r4, r5
	d = (uint32_t)((z + w) >> 31) - p;
 801064c:	eb12 020c 	adds.w	r2, r2, ip
 8010650:	eb41 0108 	adc.w	r1, r1, r8
 8010654:	0fd2      	lsrs	r2, r2, #31
 8010656:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801065a:	1b92      	subs	r2, r2, r6
	d += p & -(d >> 31);
 801065c:	ea06 73e2 	and.w	r3, r6, r2, asr #31
	for (i = 0; (1U << i) <= x; i ++) {
 8010660:	45f3      	cmp	fp, lr
	d += p & -(d >> 31);
 8010662:	4413      	add	r3, r2
	for (i = 0; (1U << i) <= x; i ++) {
 8010664:	d2cb      	bcs.n	80105fe <solve_NTRU.constprop.0+0x1b9e>
 8010666:	9408      	str	r4, [sp, #32]
 8010668:	4632      	mov	r2, r6
 801066a:	e9dd 9825 	ldrd	r9, r8, [sp, #148]	; 0x94
 801066e:	e9dd 7523 	ldrd	r7, r5, [sp, #140]	; 0x8c
 8010672:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8010674:	9e32      	ldr	r6, [sp, #200]	; 0xc8
 8010676:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
 801067a:	e02c      	b.n	80106d6 <solve_NTRU.constprop.0+0x1c76>
	z = zint_mod_small_unsigned(d, dlen, p, p0i, R2);
 801067c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801067e:	9100      	str	r1, [sp, #0]
 8010680:	4628      	mov	r0, r5
 8010682:	4621      	mov	r1, r4
 8010684:	f7fd fcfc 	bl	800e080 <zint_mod_small_unsigned.lto_priv.0>
 8010688:	9912      	ldr	r1, [sp, #72]	; 0x48
 801068a:	9100      	str	r1, [sp, #0]
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 801068c:	59a9      	ldr	r1, [r5, r6]
 801068e:	ea4f 7c91 	mov.w	ip, r1, lsr #30
 8010692:	9908      	ldr	r1, [sp, #32]
 8010694:	f1cc 0c00 	rsb	ip, ip, #0
 8010698:	ea0c 0c01 	and.w	ip, ip, r1
	d = a - b;
 801069c:	eba0 000c 	sub.w	r0, r0, ip
	d += p & -(d >> 31);
 80106a0:	ea02 7ce0 	and.w	ip, r2, r0, asr #31
 80106a4:	4460      	add	r0, ip
				fx[v] = zint_mod_small_signed(x, slen,
 80106a6:	f8c9 0000 	str.w	r0, [r9]
	z = zint_mod_small_unsigned(d, dlen, p, p0i, R2);
 80106aa:	4621      	mov	r1, r4
 80106ac:	4638      	mov	r0, r7
 80106ae:	f7fd fce7 	bl	800e080 <zint_mod_small_unsigned.lto_priv.0>
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 80106b2:	59bb      	ldr	r3, [r7, r6]
 80106b4:	9908      	ldr	r1, [sp, #32]
 80106b6:	0f9b      	lsrs	r3, r3, #30
 80106b8:	425b      	negs	r3, r3
 80106ba:	400b      	ands	r3, r1
	d = a - b;
 80106bc:	1ac0      	subs	r0, r0, r3
	d += p & -(d >> 31);
 80106be:	ea02 73e0 	and.w	r3, r2, r0, asr #31
 80106c2:	4418      	add	r0, r3
				gx[v] = zint_mod_small_signed(y, slen,
 80106c4:	f848 0b04 	str.w	r0, [r8], #4
				v < n; v ++, x += slen, y += slen)
 80106c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80106ca:	4543      	cmp	r3, r8
 80106cc:	445d      	add	r5, fp
 80106ce:	445f      	add	r7, fp
 80106d0:	f109 0904 	add.w	r9, r9, #4
 80106d4:	d006      	beq.n	80106e4 <solve_NTRU.constprop.0+0x1c84>
	z = zint_mod_small_unsigned(d, dlen, p, p0i, R2);
 80106d6:	4653      	mov	r3, sl
	if (dlen == 0) {
 80106d8:	2c00      	cmp	r4, #0
 80106da:	d1cf      	bne.n	801067c <solve_NTRU.constprop.0+0x1c1c>
				fx[v] = zint_mod_small_signed(x, slen,
 80106dc:	f8c9 4000 	str.w	r4, [r9]
		return 0;
 80106e0:	4620      	mov	r0, r4
 80106e2:	e7ef      	b.n	80106c4 <solve_NTRU.constprop.0+0x1c64>
 80106e4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80106e6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80106e8:	9825      	ldr	r0, [sp, #148]	; 0x94
 80106ea:	e9cd 2a00 	strd	r2, sl, [sp]
 80106ee:	4616      	mov	r6, r2
 80106f0:	462b      	mov	r3, r5
 80106f2:	4622      	mov	r2, r4
 80106f4:	2101      	movs	r1, #1
 80106f6:	f7f8 ff23 	bl	8009540 <modp_NTT2_ext.part.0>
 80106fa:	462b      	mov	r3, r5
 80106fc:	4622      	mov	r2, r4
 80106fe:	e9cd 6a00 	strd	r6, sl, [sp]
 8010702:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010704:	2101      	movs	r1, #1
 8010706:	f7f8 ff1b 	bl	8009540 <modp_NTT2_ext.part.0>
 801070a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801070c:	009c      	lsls	r4, r3, #2
 801070e:	e664      	b.n	80103da <solve_NTRU.constprop.0+0x197a>
		make_fg_step(data, logn - d, d,
 8010710:	f8dd a0c0 	ldr.w	sl, [sp, #192]	; 0xc0
 8010714:	2400      	movs	r4, #0
 8010716:	2601      	movs	r6, #1
 8010718:	1e23      	subs	r3, r4, #0
 801071a:	bf18      	it	ne
 801071c:	2301      	movne	r3, #1
 801071e:	f1c4 0109 	rsb	r1, r4, #9
 8010722:	4622      	mov	r2, r4
 8010724:	9600      	str	r6, [sp, #0]
			d != 0, (d + 1) < depth || out_ntt);
 8010726:	3401      	adds	r4, #1
		make_fg_step(data, logn - d, d,
 8010728:	4628      	mov	r0, r5
 801072a:	f7fd fe91 	bl	800e450 <make_fg_step>
	for (d = 0; d < depth; d ++) {
 801072e:	4554      	cmp	r4, sl
 8010730:	d1f2      	bne.n	8010718 <solve_NTRU.constprop.0+0x1cb8>
	Gt = Ft + n * llen;
 8010732:	9a1a      	ldr	r2, [sp, #104]	; 0x68
	t1 = Gt + n * llen;
 8010734:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
	memmove(t1, ft, 2 * n * slen * sizeof *ft);
 8010736:	4629      	mov	r1, r5
	Gt = Ft + n * llen;
 8010738:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801073a:	fa05 f302 	lsl.w	r3, r5, r2
	t1 = Gt + n * llen;
 801073e:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
	Gt = Ft + n * llen;
 8010742:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010746:	9322      	str	r3, [sp, #136]	; 0x88
	memmove(t1, ft, 2 * n * slen * sizeof *ft);
 8010748:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
	t1 = Gt + n * llen;
 801074a:	9024      	str	r0, [sp, #144]	; 0x90
	memmove(t1, ft, 2 * n * slen * sizeof *ft);
 801074c:	4093      	lsls	r3, r2
	t1 = gt + slen * n;
 801074e:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	memmove(t1, ft, 2 * n * slen * sizeof *ft);
 8010752:	00da      	lsls	r2, r3, #3
	gt = ft + slen * n;
 8010754:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010758:	9323      	str	r3, [sp, #140]	; 0x8c
	Gd = Fd + hn * dlen;
 801075a:	eb04 0309 	add.w	r3, r4, r9
	t1 = gt + slen * n;
 801075e:	9418      	str	r4, [sp, #96]	; 0x60
	Gd = Fd + hn * dlen;
 8010760:	9313      	str	r3, [sp, #76]	; 0x4c
	memmove(t1, ft, 2 * n * slen * sizeof *ft);
 8010762:	f004 fa29 	bl	8014bb8 <memmove>
	memmove(t1, Fd, 2 * hn * dlen * sizeof *Fd);
 8010766:	4993      	ldr	r1, [pc, #588]	; (80109b4 <solve_NTRU.constprop.0+0x1f54>)
 8010768:	463a      	mov	r2, r7
 801076a:	4620      	mov	r0, r4
 801076c:	f004 fa24 	bl	8014bb8 <memmove>
	for (u = 0; u < llen; u ++) {
 8010770:	2d00      	cmp	r5, #0
 8010772:	f47e aa71 	bne.w	800ec58 <solve_NTRU.constprop.0+0x1f8>
		igm = gm + n;
 8010776:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010778:	2304      	movs	r3, #4
 801077a:	4093      	lsls	r3, r2
 801077c:	9337      	str	r3, [sp, #220]	; 0xdc
	zint_rebuild_CRT(Ft, llen, llen, n, primes, 1, t1);
 801077e:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8010780:	9f31      	ldr	r7, [sp, #196]	; 0xc4
 8010782:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8010784:	488b      	ldr	r0, [pc, #556]	; (80109b4 <solve_NTRU.constprop.0+0x1f54>)
 8010786:	9601      	str	r6, [sp, #4]
 8010788:	2401      	movs	r4, #1
 801078a:	463b      	mov	r3, r7
 801078c:	462a      	mov	r2, r5
 801078e:	4629      	mov	r1, r5
 8010790:	9400      	str	r4, [sp, #0]
 8010792:	f001 fde5 	bl	8012360 <zint_rebuild_CRT.constprop.0>
	zint_rebuild_CRT(Gt, llen, llen, n, primes, 1, t1);
 8010796:	463b      	mov	r3, r7
 8010798:	462a      	mov	r2, r5
 801079a:	4629      	mov	r1, r5
 801079c:	e9cd 4600 	strd	r4, r6, [sp]
 80107a0:	9822      	ldr	r0, [sp, #136]	; 0x88
 80107a2:	f001 fddd 	bl	8012360 <zint_rebuild_CRT.constprop.0>
	k = (size_t)(cd - cb);
 80107a6:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80107a8:	1a73      	subs	r3, r6, r1
	if (km) {
 80107aa:	f013 0207 	ands.w	r2, r3, #7
 80107ae:	d003      	beq.n	80107b8 <solve_NTRU.constprop.0+0x1d58>
 80107b0:	3308      	adds	r3, #8
		k += (sizeof(fpr)) - km;
 80107b2:	1a9b      	subs	r3, r3, r2
	return (fpr *)(cb + k);
 80107b4:	18cb      	adds	r3, r1, r3
 80107b6:	9318      	str	r3, [sp, #96]	; 0x60
	rt4 = rt3 + n;
 80107b8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
	rt5 = rt4 + n;
 80107ba:	9818      	ldr	r0, [sp, #96]	; 0x60
	rt1 = rt5 + (n >> 1);
 80107bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
	k = (size_t)(cd - cb);
 80107be:	992d      	ldr	r1, [sp, #180]	; 0xb4
	rlen = (slen > 10) ? 10 : slen;
 80107c0:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	poly_big_to_fp(rt3, ft + slen - rlen, rlen, slen, logn);
 80107c4:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80107c8:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 80107cc:	f8cd 9000 	str.w	r9, [sp]
	rt4 = rt3 + n;
 80107d0:	2508      	movs	r5, #8
 80107d2:	409d      	lsls	r5, r3
	rt5 = rt4 + n;
 80107d4:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 80107d8:	9316      	str	r3, [sp, #88]	; 0x58
	rt4 = rt3 + n;
 80107da:	4602      	mov	r2, r0
	rt1 = rt5 + (n >> 1);
 80107dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80107e0:	9315      	str	r3, [sp, #84]	; 0x54
	rt4 = rt3 + n;
 80107e2:	442a      	add	r2, r5
	k = (size_t)(cd - cb);
 80107e4:	1a5b      	subs	r3, r3, r1
	rt4 = rt3 + n;
 80107e6:	9213      	str	r2, [sp, #76]	; 0x4c
	if (km) {
 80107e8:	f013 0203 	ands.w	r2, r3, #3
 80107ec:	bf1a      	itte	ne
 80107ee:	3304      	addne	r3, #4
		k += (sizeof(uint32_t)) - km;
 80107f0:	1a9b      	subne	r3, r3, r2
 80107f2:	9b15      	ldreq	r3, [sp, #84]	; 0x54
	if (rt2 < (rt1 + n)) {
 80107f4:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
	return (uint32_t *)(cb + k);
 80107f8:	bf18      	it	ne
 80107fa:	18cb      	addne	r3, r1, r3
 80107fc:	931c      	str	r3, [sp, #112]	; 0x70
	rt2 = align_fpr(tmp, k + n);
 80107fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010800:	9b37      	ldr	r3, [sp, #220]	; 0xdc
	k = (size_t)(cd - cb);
 8010802:	992d      	ldr	r1, [sp, #180]	; 0xb4
	rt2 = align_fpr(tmp, k + n);
 8010804:	4413      	add	r3, r2
 8010806:	9325      	str	r3, [sp, #148]	; 0x94
	k = (size_t)(cd - cb);
 8010808:	1a5b      	subs	r3, r3, r1
	if (km) {
 801080a:	f013 0207 	ands.w	r2, r3, #7
 801080e:	bf1b      	ittet	ne
 8010810:	f103 0708 	addne.w	r7, r3, #8
		k += (sizeof(fpr)) - km;
 8010814:	1abf      	subne	r7, r7, r2
 8010816:	9f25      	ldreq	r7, [sp, #148]	; 0x94
	return (fpr *)(cb + k);
 8010818:	187f      	addne	r7, r7, r1
	rlen = (slen > 10) ? 10 : slen;
 801081a:	f1ba 0f0a 	cmp.w	sl, #10
	if (rt2 < (rt1 + n)) {
 801081e:	44ac      	add	ip, r5
	rlen = (slen > 10) ? 10 : slen;
 8010820:	46d0      	mov	r8, sl
	poly_big_to_fp(rt3, ft + slen - rlen, rlen, slen, logn);
 8010822:	9924      	ldr	r1, [sp, #144]	; 0x90
	rlen = (slen > 10) ? 10 : slen;
 8010824:	bf28      	it	cs
 8010826:	f04f 080a 	movcs.w	r8, #10
	rt1 = rt5 + (n >> 1);
 801082a:	00e6      	lsls	r6, r4, #3
 801082c:	4567      	cmp	r7, ip
	poly_big_to_fp(rt3, ft + slen - rlen, rlen, slen, logn);
 801082e:	ebaa 0408 	sub.w	r4, sl, r8
 8010832:	bf38      	it	cc
 8010834:	4667      	movcc	r7, ip
 8010836:	4642      	mov	r2, r8
 8010838:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801083c:	4653      	mov	r3, sl
 801083e:	4658      	mov	r0, fp
 8010840:	9719      	str	r7, [sp, #100]	; 0x64
 8010842:	f7fc fb25 	bl	800ce90 <poly_big_to_fp>
	poly_big_to_fp(rt4, gt + slen - rlen, rlen, slen, logn);
 8010846:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010848:	f8cd 9000 	str.w	r9, [sp]
 801084c:	4642      	mov	r2, r8
	poly_big_to_fp(rt3, ft + slen - rlen, rlen, slen, logn);
 801084e:	00a1      	lsls	r1, r4, #2
	poly_big_to_fp(rt4, gt + slen - rlen, rlen, slen, logn);
 8010850:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8010854:	4419      	add	r1, r3
	scale_fg = 31 * (int)(slen - rlen);
 8010856:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 801085a:	931d      	str	r3, [sp, #116]	; 0x74
	poly_big_to_fp(rt4, gt + slen - rlen, rlen, slen, logn);
 801085c:	4640      	mov	r0, r8
 801085e:	4653      	mov	r3, sl
 8010860:	f7fc fb16 	bl	800ce90 <poly_big_to_fp>
	minbl_fg = BITLENGTH[depth].avg - 6 * BITLENGTH[depth].std;
 8010864:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8010866:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8010868:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801086a:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 801086e:	eb02 0443 	add.w	r4, r2, r3, lsl #1
	Zf(FFT)(rt3, logn);
 8010872:	4649      	mov	r1, r9
 8010874:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8010878:	4658      	mov	r0, fp
 801087a:	9328      	str	r3, [sp, #160]	; 0xa0
 801087c:	f7fb ff00 	bl	800c680 <falcon_inner_FFT>
	Zf(FFT)(rt4, logn);
 8010880:	4649      	mov	r1, r9
 8010882:	4640      	mov	r0, r8
 8010884:	f7fb fefc 	bl	800c680 <falcon_inner_FFT>
	Zf(poly_invnorm2_fft)(rt5, rt3, rt4, logn);
 8010888:	464b      	mov	r3, r9
 801088a:	4642      	mov	r2, r8
 801088c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801088e:	4659      	mov	r1, fp
 8010890:	f7fc fe96 	bl	800d5c0 <falcon_inner_poly_invnorm2_fft>
	for (u = (n >> 1); u < n; u ++) {
 8010894:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8010896:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010898:	4293      	cmp	r3, r2
 801089a:	f240 81aa 	bls.w	8010bf2 <solve_NTRU.constprop.0+0x2192>
 801089e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80108a0:	f1a6 0308 	sub.w	r3, r6, #8
 80108a4:	3d08      	subs	r5, #8
 80108a6:	18ca      	adds	r2, r1, r3
 80108a8:	1948      	adds	r0, r1, r5
	x ^= (uint64_t)1 << 63;
 80108aa:	68d1      	ldr	r1, [r2, #12]
		a[u] = fpr_neg(a[u]);
 80108ac:	3208      	adds	r2, #8
 80108ae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
	for (u = (n >> 1); u < n; u ++) {
 80108b2:	4290      	cmp	r0, r2
		a[u] = fpr_neg(a[u]);
 80108b4:	6051      	str	r1, [r2, #4]
	for (u = (n >> 1); u < n; u ++) {
 80108b6:	d1f8      	bne.n	80108aa <solve_NTRU.constprop.0+0x1e4a>
 80108b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80108ba:	4413      	add	r3, r2
 80108bc:	1951      	adds	r1, r2, r5
 80108be:	68da      	ldr	r2, [r3, #12]
		a[u] = fpr_neg(a[u]);
 80108c0:	3308      	adds	r3, #8
 80108c2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
	for (u = (n >> 1); u < n; u ++) {
 80108c6:	4299      	cmp	r1, r3
		a[u] = fpr_neg(a[u]);
 80108c8:	605a      	str	r2, [r3, #4]
	for (u = (n >> 1); u < n; u ++) {
 80108ca:	d1f8      	bne.n	80108be <solve_NTRU.constprop.0+0x1e5e>
 80108cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
	maxbl_FG = 31 * (int)llen;
 80108ce:	991e      	ldr	r1, [sp, #120]	; 0x78
	scale_k = maxbl_FG - minbl_fg;
 80108d0:	9114      	str	r1, [sp, #80]	; 0x50
 80108d2:	195a      	adds	r2, r3, r5
 80108d4:	3b08      	subs	r3, #8
 80108d6:	931f      	str	r3, [sp, #124]	; 0x7c
 80108d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80108da:	9210      	str	r2, [sp, #64]	; 0x40
	maxbl_FG = 31 * (int)llen;
 80108dc:	ebc1 1241 	rsb	r2, r1, r1, lsl #5
 80108e0:	9226      	str	r2, [sp, #152]	; 0x98
 80108e2:	3b04      	subs	r3, #4
	scale_k = maxbl_FG - minbl_fg;
 80108e4:	1b12      	subs	r2, r2, r4
 80108e6:	9212      	str	r2, [sp, #72]	; 0x48
 80108e8:	9320      	str	r3, [sp, #128]	; 0x80
		rlen = (FGlen > 10) ? 10 : FGlen;
 80108ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
		poly_big_to_fp(rt1, Ft + FGlen - rlen, rlen, llen, logn);
 80108ec:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 80108f0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80108f2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80108f4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80108f6:	9600      	str	r6, [sp, #0]
		rlen = (FGlen > 10) ? 10 : FGlen;
 80108f8:	2b0a      	cmp	r3, #10
 80108fa:	461d      	mov	r5, r3
 80108fc:	bf28      	it	cs
 80108fe:	250a      	movcs	r5, #10
		scale_FG = 31 * (int)(FGlen - rlen);
 8010900:	1b5c      	subs	r4, r3, r5
		poly_big_to_fp(rt1, Ft + FGlen - rlen, rlen, llen, logn);
 8010902:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010906:	463b      	mov	r3, r7
 8010908:	462a      	mov	r2, r5
 801090a:	4640      	mov	r0, r8
 801090c:	f7fc fac0 	bl	800ce90 <poly_big_to_fp>
		poly_big_to_fp(rt2, Gt + FGlen - rlen, rlen, llen, logn);
 8010910:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010912:	9600      	str	r6, [sp, #0]
		poly_big_to_fp(rt1, Ft + FGlen - rlen, rlen, llen, logn);
 8010914:	00a1      	lsls	r1, r4, #2
		poly_big_to_fp(rt2, Gt + FGlen - rlen, rlen, llen, logn);
 8010916:	4419      	add	r1, r3
 8010918:	463b      	mov	r3, r7
 801091a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801091c:	462a      	mov	r2, r5
 801091e:	4638      	mov	r0, r7
 8010920:	f7fc fab6 	bl	800ce90 <poly_big_to_fp>
		Zf(FFT)(rt1, logn);
 8010924:	4631      	mov	r1, r6
 8010926:	4640      	mov	r0, r8
 8010928:	f7fb feaa 	bl	800c680 <falcon_inner_FFT>
		Zf(FFT)(rt2, logn);
 801092c:	4631      	mov	r1, r6
 801092e:	4638      	mov	r0, r7
 8010930:	f7fb fea6 	bl	800c680 <falcon_inner_FFT>
		Zf(poly_mul_fft)(rt1, rt3, logn);
 8010934:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010936:	4632      	mov	r2, r6
 8010938:	4640      	mov	r0, r8
 801093a:	f7fc f881 	bl	800ca40 <falcon_inner_poly_mul_fft>
		Zf(poly_mul_fft)(rt2, rt4, logn);
 801093e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010940:	4632      	mov	r2, r6
 8010942:	4638      	mov	r0, r7
 8010944:	f7fc f87c 	bl	800ca40 <falcon_inner_poly_mul_fft>
		Zf(poly_add)(rt2, rt1, logn);
 8010948:	4632      	mov	r2, r6
 801094a:	4641      	mov	r1, r8
 801094c:	4638      	mov	r0, r7
 801094e:	f7fb fb6f 	bl	800c030 <falcon_inner_poly_add>
		Zf(poly_mul_autoadj_fft)(rt2, rt5, logn);
 8010952:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010954:	4632      	mov	r2, r6
 8010956:	4638      	mov	r0, r7
 8010958:	f7fc f8d2 	bl	800cb00 <falcon_inner_poly_mul_autoadj_fft>
		Zf(iFFT)(rt2, logn);
 801095c:	4631      	mov	r1, r6
 801095e:	4638      	mov	r0, r7
 8010960:	f7fb ff6e 	bl	800c840 <falcon_inner_iFFT>
		dc = scale_k - scale_FG + scale_fg;
 8010964:	9b12      	ldr	r3, [sp, #72]	; 0x48
		scale_FG = 31 * (int)(FGlen - rlen);
 8010966:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
		dc = scale_k - scale_FG + scale_fg;
 801096a:	1b1c      	subs	r4, r3, r4
 801096c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801096e:	441c      	add	r4, r3
		if (dc < 0) {
 8010970:	2c00      	cmp	r4, #0
 8010972:	f2c0 8112 	blt.w	8010b9a <solve_NTRU.constprop.0+0x213a>
		while (dc != 0) {
 8010976:	f000 8137 	beq.w	8010be8 <solve_NTRU.constprop.0+0x2188>
			pt = fpr_onehalf;
 801097a:	4e0f      	ldr	r6, [pc, #60]	; (80109b8 <solve_NTRU.constprop.0+0x1f58>)
 801097c:	2500      	movs	r5, #0
 801097e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80109bc <solve_NTRU.constprop.0+0x1f5c>
 8010982:	2700      	movs	r7, #0
 8010984:	e008      	b.n	8010998 <solve_NTRU.constprop.0+0x1f38>
	return fpr_mul(x, x);
 8010986:	462a      	mov	r2, r5
 8010988:	4633      	mov	r3, r6
 801098a:	4628      	mov	r0, r5
 801098c:	4631      	mov	r1, r6
 801098e:	f7fb fb67 	bl	800c060 <falcon_inner_fpr_mul>
 8010992:	4605      	mov	r5, r0
 8010994:	460e      	mov	r6, r1
		while (dc != 0) {
 8010996:	b19c      	cbz	r4, 80109c0 <solve_NTRU.constprop.0+0x1f60>
			if ((dc & 1) != 0) {
 8010998:	f014 0f01 	tst.w	r4, #1
			dc >>= 1;
 801099c:	ea4f 0464 	mov.w	r4, r4, asr #1
			if ((dc & 1) != 0) {
 80109a0:	d0f1      	beq.n	8010986 <solve_NTRU.constprop.0+0x1f26>
				pdc = fpr_mul(pdc, pt);
 80109a2:	4638      	mov	r0, r7
 80109a4:	4641      	mov	r1, r8
 80109a6:	462a      	mov	r2, r5
 80109a8:	4633      	mov	r3, r6
 80109aa:	f7fb fb59 	bl	800c060 <falcon_inner_fpr_mul>
 80109ae:	4607      	mov	r7, r0
 80109b0:	4688      	mov	r8, r1
 80109b2:	e7e8      	b.n	8010986 <solve_NTRU.constprop.0+0x1f26>
 80109b4:	2000c8e0 	.word	0x2000c8e0
 80109b8:	3fe00000 	.word	0x3fe00000
 80109bc:	3ff00000 	.word	0x3ff00000
 80109c0:	970c      	str	r7, [sp, #48]	; 0x30
 80109c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80109c6:	e9dd b31f 	ldrd	fp, r3, [sp, #124]	; 0x7c
 80109ca:	9308      	str	r3, [sp, #32]
 80109cc:	46da      	mov	sl, fp
			xv = fpr_mul(rt2[u], pdc);
 80109ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	cc0 = *(int64_t *)&x < *(int64_t *)&y;
 80109d2:	4cb9      	ldr	r4, [pc, #740]	; (8010cb8 <solve_NTRU.constprop.0+0x2258>)
 80109d4:	e9fa 0102 	ldrd	r0, r1, [sl, #8]!
 80109d8:	f7fb fb42 	bl	800c060 <falcon_inner_fpr_mul>
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 80109dc:	028d      	lsls	r5, r1, #10
	e = 1085 - ((int)(x >> 52) & 0x7FF);
 80109de:	f3c1 530a 	ubfx	r3, r1, #20, #11
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 80109e2:	ea45 5590 	orr.w	r5, r5, r0, lsr #22
	e = 1085 - ((int)(x >> 52) & 0x7FF);
 80109e6:	f5c3 6287 	rsb	r2, r3, #1080	; 0x438
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 80109ea:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 80109ee:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80109f2:	3301      	adds	r3, #1
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 80109f4:	ea4f 2c80 	mov.w	ip, r0, lsl #10
 80109f8:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 80109fc:	ea0c 7ce3 	and.w	ip, ip, r3, asr #31
 8010a00:	ea05 75e3 	and.w	r5, r5, r3, asr #31
	cc0 = *(int64_t *)&x < *(int64_t *)&y;
 8010a04:	4bad      	ldr	r3, [pc, #692]	; (8010cbc <solve_NTRU.constprop.0+0x225c>)
	e = 1085 - ((int)(x >> 52) & 0x7FF);
 8010a06:	3205      	adds	r2, #5
	cc0 = *(int64_t *)&x < *(int64_t *)&y;
 8010a08:	4298      	cmp	r0, r3
 8010a0a:	eb71 0304 	sbcs.w	r3, r1, r4
	e &= 63;
 8010a0e:	f002 063f 	and.w	r6, r2, #63	; 0x3f
	d = fpr_ulsh(m, 63 - e);
 8010a12:	f1c6 073f 	rsb	r7, r6, #63	; 0x3f
	cc0 = *(int64_t *)&x < *(int64_t *)&y;
 8010a16:	bfac      	ite	ge
 8010a18:	f04f 0901 	movge.w	r9, #1
 8010a1c:	f04f 0900 	movlt.w	r9, #0
	cc1 = *(int64_t *)&x > *(int64_t *)&y;
 8010a20:	f510 0f80 	cmn.w	r0, #4194304	; 0x400000
 8010a24:	eb71 0304 	sbcs.w	r3, r1, r4
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 8010a28:	ea4f 1367 	mov.w	r3, r7, asr #5
 8010a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8010a2e:	ea4f 73e7 	mov.w	r3, r7, asr #31
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 8010a32:	f346 1440 	sbfx	r4, r6, #5, #1
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 8010a36:	930a      	str	r3, [sp, #40]	; 0x28
 8010a38:	ea8c 0305 	eor.w	r3, ip, r5
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 8010a3c:	4626      	mov	r6, r4
 8010a3e:	ea04 0403 	and.w	r4, r4, r3
	return x >> (n & 31);
 8010a42:	f002 021f 	and.w	r2, r2, #31
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 8010a46:	ea84 040c 	eor.w	r4, r4, ip
 8010a4a:	ea25 0606 	bic.w	r6, r5, r6
	return x >> (n & 31);
 8010a4e:	fa24 f402 	lsr.w	r4, r4, r2
 8010a52:	f1c2 0b20 	rsb	fp, r2, #32
 8010a56:	f1a2 0220 	sub.w	r2, r2, #32
 8010a5a:	fa06 fb0b 	lsl.w	fp, r6, fp
 8010a5e:	fa26 f202 	lsr.w	r2, r6, r2
	cc1 = *(int64_t *)&x > *(int64_t *)&y;
 8010a62:	bfb4      	ite	lt
 8010a64:	2601      	movlt	r6, #1
 8010a66:	2600      	movge	r6, #0
	return cc0 ^ ((cc0 ^ cc1) & (int)((x & y) >> 63));
 8010a68:	ea89 0606 	eor.w	r6, r9, r6
 8010a6c:	ea06 76d1 	and.w	r6, r6, r1, lsr #31
	return x << (n & 31);
 8010a70:	f007 0e1f 	and.w	lr, r7, #31
	return x >> (n & 31);
 8010a74:	ea44 040b 	orr.w	r4, r4, fp
			if (!fpr_lt(fpr_mtwo31m1, xv)
 8010a78:	45b1      	cmp	r9, r6
 8010a7a:	ea44 0402 	orr.w	r4, r4, r2
	return x << (n & 31);
 8010a7e:	f067 071f 	orn	r7, r7, #31
 8010a82:	f1ce 0820 	rsb	r8, lr, #32
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 8010a86:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 8010a8a:	ea4f 7bd1 	mov.w	fp, r1, lsr #31
 8010a8e:	f43f abef 	beq.w	8010270 <solve_NTRU.constprop.0+0x1810>
				|| !fpr_lt(xv, fpr_ptwo31m1))
 8010a92:	f46f 0680 	mvn.w	r6, #4194304	; 0x400000
 8010a96:	4286      	cmp	r6, r0
 8010a98:	4889      	ldr	r0, [pc, #548]	; (8010cc0 <solve_NTRU.constprop.0+0x2260>)
 8010a9a:	eb70 0101 	sbcs.w	r1, r0, r1
 8010a9e:	f6ff abe7 	blt.w	8010270 <solve_NTRU.constprop.0+0x1810>
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 8010aa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010aa4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010aa6:	4249      	negs	r1, r1
 8010aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8010aac:	4003      	ands	r3, r0
 8010aae:	ea2c 0101 	bic.w	r1, ip, r1
 8010ab2:	406b      	eors	r3, r5
	return x << (n & 31);
 8010ab4:	fa01 f707 	lsl.w	r7, r1, r7
 8010ab8:	fa03 f30e 	lsl.w	r3, r3, lr
 8010abc:	fa21 f808 	lsr.w	r8, r1, r8
 8010ac0:	433b      	orrs	r3, r7
 8010ac2:	ea43 0308 	orr.w	r3, r3, r8
	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 8010ac6:	f023 4060 	bic.w	r0, r3, #3758096384	; 0xe0000000
	return x << (n & 31);
 8010aca:	fa01 f10e 	lsl.w	r1, r1, lr
	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 8010ace:	4301      	orrs	r1, r0
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 8010ad0:	4248      	negs	r0, r1
 8010ad2:	4301      	orrs	r1, r0
 8010ad4:	0f5b      	lsrs	r3, r3, #29
 8010ad6:	ea43 73d1 	orr.w	r3, r3, r1, lsr #31
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 8010ada:	fa22 f303 	lsr.w	r3, r2, r3
 8010ade:	f003 0301 	and.w	r3, r3, #1
 8010ae2:	191b      	adds	r3, r3, r4
	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 8010ae4:	f1db 0200 	rsbs	r2, fp, #0
 8010ae8:	4053      	eors	r3, r2
			k[u] = (int32_t)fpr_rint(xv);
 8010aea:	9a08      	ldr	r2, [sp, #32]
 8010aec:	eb13 030b 	adds.w	r3, r3, fp
 8010af0:	f842 3f04 	str.w	r3, [r2, #4]!
		for (u = 0; u < n; u ++) {
 8010af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
			k[u] = (int32_t)fpr_rint(xv);
 8010af6:	9208      	str	r2, [sp, #32]
		for (u = 0; u < n; u ++) {
 8010af8:	4553      	cmp	r3, sl
 8010afa:	f47f af68 	bne.w	80109ce <solve_NTRU.constprop.0+0x1f6e>
		sch = (uint32_t)(scale_k / 31);
 8010afe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010b00:	4b70      	ldr	r3, [pc, #448]	; (8010cc4 <solve_NTRU.constprop.0+0x2264>)
 8010b02:	fb83 2301 	smull	r2, r3, r3, r1
 8010b06:	440b      	add	r3, r1
 8010b08:	17cc      	asrs	r4, r1, #31
 8010b0a:	ebc4 1423 	rsb	r4, r4, r3, asr #4
		if (depth <= DEPTH_INT_FG) {
 8010b0e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
		scl = (uint32_t)(scale_k % 31);
 8010b10:	ebc4 1544 	rsb	r5, r4, r4, lsl #5
		if (depth <= DEPTH_INT_FG) {
 8010b14:	2b04      	cmp	r3, #4
		scl = (uint32_t)(scale_k % 31);
 8010b16:	eba1 0505 	sub.w	r5, r1, r5
		if (depth <= DEPTH_INT_FG) {
 8010b1a:	d843      	bhi.n	8010ba4 <solve_NTRU.constprop.0+0x2144>
			poly_sub_scaled_ntt(Ft, FGlen, llen, ft, slen, slen,
 8010b1c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8010b1e:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8010b22:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8010b26:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8010b2a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8010b2c:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 8010b30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010b32:	4865      	ldr	r0, [pc, #404]	; (8010cc8 <solve_NTRU.constprop.0+0x2268>)
 8010b34:	9706      	str	r7, [sp, #24]
 8010b36:	465a      	mov	r2, fp
 8010b38:	4651      	mov	r1, sl
 8010b3a:	e9cd 5804 	strd	r5, r8, [sp, #16]
 8010b3e:	e9cd 6600 	strd	r6, r6, [sp]
 8010b42:	9403      	str	r4, [sp, #12]
 8010b44:	f8cd 9008 	str.w	r9, [sp, #8]
 8010b48:	f7fd faca 	bl	800e0e0 <poly_sub_scaled_ntt>
			poly_sub_scaled_ntt(Gt, FGlen, llen, gt, slen, slen,
 8010b4c:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8010b50:	e9cd 8705 	strd	r8, r7, [sp, #20]
 8010b54:	e9cd 6901 	strd	r6, r9, [sp, #4]
 8010b58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010b5a:	9822      	ldr	r0, [sp, #136]	; 0x88
 8010b5c:	9600      	str	r6, [sp, #0]
 8010b5e:	465a      	mov	r2, fp
 8010b60:	4651      	mov	r1, sl
 8010b62:	f7fd fabd 	bl	800e0e0 <poly_sub_scaled_ntt>
		new_maxbl_FG = scale_k + maxbl_fg + 10;
 8010b66:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010b68:	9b12      	ldr	r3, [sp, #72]	; 0x48
		if (new_maxbl_FG < maxbl_FG) {
 8010b6a:	9926      	ldr	r1, [sp, #152]	; 0x98
		new_maxbl_FG = scale_k + maxbl_fg + 10;
 8010b6c:	4413      	add	r3, r2
 8010b6e:	f103 020a 	add.w	r2, r3, #10
		if (new_maxbl_FG < maxbl_FG) {
 8010b72:	428a      	cmp	r2, r1
 8010b74:	da09      	bge.n	8010b8a <solve_NTRU.constprop.0+0x212a>
			if ((int)FGlen * 31 >= maxbl_FG + 31) {
 8010b76:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010b78:	9226      	str	r2, [sp, #152]	; 0x98
 8010b7a:	3328      	adds	r3, #40	; 0x28
 8010b7c:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 8010b80:	428b      	cmp	r3, r1
				FGlen --;
 8010b82:	bfbc      	itt	lt
 8010b84:	f100 33ff 	addlt.w	r3, r0, #4294967295
 8010b88:	9314      	strlt	r3, [sp, #80]	; 0x50
		if (scale_k <= 0) {
 8010b8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	dd32      	ble.n	8010bf6 <solve_NTRU.constprop.0+0x2196>
		scale_k -= 25;
 8010b90:	3b19      	subs	r3, #25
 8010b92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010b96:	9312      	str	r3, [sp, #72]	; 0x48
 8010b98:	e6a7      	b.n	80108ea <solve_NTRU.constprop.0+0x1e8a>
			dc = -dc;
 8010b9a:	4264      	negs	r4, r4
			pt = fpr_two;
 8010b9c:	2500      	movs	r5, #0
 8010b9e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8010ba2:	e6ec      	b.n	801097e <solve_NTRU.constprop.0+0x1f1e>
			poly_sub_scaled(Ft, FGlen, llen, ft, slen, slen,
 8010ba4:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8010ba6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8010ba8:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8010bac:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8010bb0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8010bb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010bb6:	4844      	ldr	r0, [pc, #272]	; (8010cc8 <solve_NTRU.constprop.0+0x2268>)
 8010bb8:	9403      	str	r4, [sp, #12]
 8010bba:	4652      	mov	r2, sl
 8010bbc:	4649      	mov	r1, r9
 8010bbe:	e9cd 5704 	strd	r5, r7, [sp, #16]
 8010bc2:	e9cd 6600 	strd	r6, r6, [sp]
 8010bc6:	f8cd 8008 	str.w	r8, [sp, #8]
 8010bca:	f7f8 fc19 	bl	8009400 <poly_sub_scaled>
			poly_sub_scaled(Gt, FGlen, llen, gt, slen, slen,
 8010bce:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8010bd2:	e9cd 6801 	strd	r6, r8, [sp, #4]
 8010bd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010bd8:	9822      	ldr	r0, [sp, #136]	; 0x88
 8010bda:	9705      	str	r7, [sp, #20]
 8010bdc:	9600      	str	r6, [sp, #0]
 8010bde:	4652      	mov	r2, sl
 8010be0:	4649      	mov	r1, r9
 8010be2:	f7f8 fc0d 	bl	8009400 <poly_sub_scaled>
 8010be6:	e7be      	b.n	8010b66 <solve_NTRU.constprop.0+0x2106>
		while (dc != 0) {
 8010be8:	2300      	movs	r3, #0
 8010bea:	930c      	str	r3, [sp, #48]	; 0x30
 8010bec:	4b37      	ldr	r3, [pc, #220]	; (8010ccc <solve_NTRU.constprop.0+0x226c>)
 8010bee:	930e      	str	r3, [sp, #56]	; 0x38
 8010bf0:	e6e9      	b.n	80109c6 <solve_NTRU.constprop.0+0x1f66>
 8010bf2:	3d08      	subs	r5, #8
 8010bf4:	e66a      	b.n	80108cc <solve_NTRU.constprop.0+0x1e6c>
	if (FGlen < slen) {
 8010bf6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010bf8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010bfa:	4299      	cmp	r1, r3
 8010bfc:	f080 8151 	bcs.w	8010ea2 <solve_NTRU.constprop.0+0x2442>
		for (u = 0; u < n; u ++, Ft += llen, Gt += llen) {
 8010c00:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010c02:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
	Ft = tmp;
 8010c06:	4d30      	ldr	r5, [pc, #192]	; (8010cc8 <solve_NTRU.constprop.0+0x2268>)
		for (u = 0; u < n; u ++, Ft += llen, Gt += llen) {
 8010c08:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8010c0c:	009a      	lsls	r2, r3, #2
 8010c0e:	1acb      	subs	r3, r1, r3
			sw = -(Ft[FGlen - 1] >> 30) >> 1;
 8010c10:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
 8010c14:	9228      	str	r2, [sp, #160]	; 0xa0
 8010c16:	1f11      	subs	r1, r2, #4
 8010c18:	009f      	lsls	r7, r3, #2
 8010c1a:	4613      	mov	r3, r2
 8010c1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010c1e:	3801      	subs	r0, #1
 8010c20:	3a04      	subs	r2, #4
 8010c22:	0080      	lsls	r0, r0, #2
 8010c24:	4461      	add	r1, ip
 8010c26:	441a      	add	r2, r3
		for (u = 0; u < n; u ++, Ft += llen, Gt += llen) {
 8010c28:	2600      	movs	r6, #0
			sw = -(Ft[FGlen - 1] >> 30) >> 1;
 8010c2a:	582b      	ldr	r3, [r5, r0]
 8010c2c:	0f9c      	lsrs	r4, r3, #30
 8010c2e:	4264      	negs	r4, r4
 8010c30:	0864      	lsrs	r4, r4, #1
 8010c32:	18bb      	adds	r3, r7, r2
				Ft[v] = sw;
 8010c34:	f843 4f04 	str.w	r4, [r3, #4]!
			for (v = FGlen; v < slen; v ++) {
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d1fb      	bne.n	8010c34 <solve_NTRU.constprop.0+0x21d4>
			sw = -(Gt[FGlen - 1] >> 30) >> 1;
 8010c3c:	f85c 3000 	ldr.w	r3, [ip, r0]
 8010c40:	0f9c      	lsrs	r4, r3, #30
 8010c42:	4264      	negs	r4, r4
 8010c44:	0864      	lsrs	r4, r4, #1
 8010c46:	187b      	adds	r3, r7, r1
				Gt[v] = sw;
 8010c48:	f843 4f04 	str.w	r4, [r3, #4]!
			for (v = FGlen; v < slen; v ++) {
 8010c4c:	4299      	cmp	r1, r3
 8010c4e:	d1fb      	bne.n	8010c48 <solve_NTRU.constprop.0+0x21e8>
		for (u = 0; u < n; u ++, Ft += llen, Gt += llen) {
 8010c50:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8010c52:	3601      	adds	r6, #1
 8010c54:	42b3      	cmp	r3, r6
 8010c56:	4445      	add	r5, r8
 8010c58:	44c4      	add	ip, r8
 8010c5a:	4441      	add	r1, r8
 8010c5c:	4442      	add	r2, r8
 8010c5e:	d1e4      	bne.n	8010c2a <solve_NTRU.constprop.0+0x21ca>
		memmove(x, y, slen * sizeof *y);
 8010c60:	4c19      	ldr	r4, [pc, #100]	; (8010cc8 <solve_NTRU.constprop.0+0x2268>)
		u < (n << 1); u ++, x += slen, y += llen)
 8010c62:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8010c64:	f8dd 90a0 	ldr.w	r9, [sp, #160]	; 0xa0
		memmove(x, y, slen * sizeof *y);
 8010c68:	942d      	str	r4, [sp, #180]	; 0xb4
		u < (n << 1); u ++, x += slen, y += llen)
 8010c6a:	005e      	lsls	r6, r3, #1
		memmove(x, y, slen * sizeof *y);
 8010c6c:	2700      	movs	r7, #0
 8010c6e:	4625      	mov	r5, r4
 8010c70:	4621      	mov	r1, r4
 8010c72:	4628      	mov	r0, r5
		u < (n << 1); u ++, x += slen, y += llen)
 8010c74:	3701      	adds	r7, #1
		memmove(x, y, slen * sizeof *y);
 8010c76:	464a      	mov	r2, r9
 8010c78:	f003 ff9e 	bl	8014bb8 <memmove>
		u < (n << 1); u ++, x += slen, y += llen)
 8010c7c:	42b7      	cmp	r7, r6
 8010c7e:	4444      	add	r4, r8
 8010c80:	444d      	add	r5, r9
 8010c82:	d1f5      	bne.n	8010c70 <solve_NTRU.constprop.0+0x2210>
		while (depth -- > 2) {
 8010c84:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8010c86:	1e5a      	subs	r2, r3, #1
 8010c88:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010c8a:	9230      	str	r2, [sp, #192]	; 0xc0
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	9327      	str	r3, [sp, #156]	; 0x9c
 8010c90:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8010c92:	2a01      	cmp	r2, #1
 8010c94:	f1a3 0308 	sub.w	r3, r3, #8
 8010c98:	9334      	str	r3, [sp, #208]	; 0xd0
 8010c9a:	d019      	beq.n	8010cd0 <solve_NTRU.constprop.0+0x2270>
	llen = MAX_BL_LARGE[depth];
 8010c9c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8010c9e:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 8010ca2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010ca6:	9335      	str	r3, [sp, #212]	; 0xd4
 8010ca8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8010caa:	921e      	str	r2, [sp, #120]	; 0x78
 8010cac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010cb0:	921b      	str	r2, [sp, #108]	; 0x6c
 8010cb2:	9336      	str	r3, [sp, #216]	; 0xd8
 8010cb4:	f7fd bf64 	b.w	800eb80 <solve_NTRU.constprop.0+0x120>
 8010cb8:	c1dfffff 	.word	0xc1dfffff
 8010cbc:	ffc00001 	.word	0xffc00001
 8010cc0:	41dfffff 	.word	0x41dfffff
 8010cc4:	84210843 	.word	0x84210843
 8010cc8:	2000c8e0 	.word	0x2000c8e0
 8010ccc:	3ff00000 	.word	0x3ff00000
 8010cd0:	4b77      	ldr	r3, [pc, #476]	; (8010eb0 <solve_NTRU.constprop.0+0x2450>)
 8010cd2:	931b      	str	r3, [sp, #108]	; 0x6c
		while (depth -- > 2) {
 8010cd4:	4698      	mov	r8, r3
 8010cd6:	4c77      	ldr	r4, [pc, #476]	; (8010eb4 <solve_NTRU.constprop.0+0x2454>)
 8010cd8:	2300      	movs	r3, #0
 8010cda:	9309      	str	r3, [sp, #36]	; 0x24
	y = 2 - p;
 8010cdc:	f1c4 0302 	rsb	r3, r4, #2
	y *= 2 - p * y;
 8010ce0:	fb04 f203 	mul.w	r2, r4, r3
 8010ce4:	f1c2 0202 	rsb	r2, r2, #2
 8010ce8:	fb02 f303 	mul.w	r3, r2, r3
	y *= 2 - p * y;
 8010cec:	fb04 f203 	mul.w	r2, r4, r3
 8010cf0:	f1c2 0202 	rsb	r2, r2, #2
 8010cf4:	fb02 f303 	mul.w	r3, r2, r3
	y *= 2 - p * y;
 8010cf8:	fb04 f203 	mul.w	r2, r4, r3
 8010cfc:	f1c2 0202 	rsb	r2, r2, #2
 8010d00:	fb02 f303 	mul.w	r3, r2, r3
	y *= 2 - p * y;
 8010d04:	fb04 f203 	mul.w	r2, r4, r3
 8010d08:	3a02      	subs	r2, #2
	return (uint32_t)0x7FFFFFFF & -y;
 8010d0a:	fb02 f303 	mul.w	r3, r2, r3
 8010d0e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
		R2 = modp_R2(p, p0i);
 8010d12:	4629      	mov	r1, r5
 8010d14:	4620      	mov	r0, r4
 8010d16:	f7fd f86b 	bl	800ddf0 <modp_R2.lto_priv.0>
	return ((uint32_t)1 << 31) - p;
 8010d1a:	f1c4 4100 	rsb	r1, r4, #2147483648	; 0x80000000
		R2 = modp_R2(p, p0i);
 8010d1e:	4602      	mov	r2, r0
	z = (uint64_t)a * (uint64_t)b;
 8010d20:	fba1 1000 	umull	r1, r0, r1, r0
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010d24:	fba1 3605 	umull	r3, r6, r1, r5
 8010d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010d2c:	fba3 3604 	umull	r3, r6, r3, r4
	d = (uint32_t)((z + w) >> 31) - p;
 8010d30:	185b      	adds	r3, r3, r1
 8010d32:	eb40 0106 	adc.w	r1, r0, r6
 8010d36:	0fdb      	lsrs	r3, r3, #31
 8010d38:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8010d3c:	1b1b      	subs	r3, r3, r4
	d += p & -(d >> 31);
 8010d3e:	ea04 71e3 	and.w	r1, r4, r3, asr #31
		for (v = 0, xs = Fd, ys = Gd, xd = Ft + u, yd = Gt + u;
 8010d42:	4e5d      	ldr	r6, [pc, #372]	; (8010eb8 <solve_NTRU.constprop.0+0x2458>)
	d += p & -(d >> 31);
 8010d44:	eb03 0c01 	add.w	ip, r3, r1
 8010d48:	f5a8 6300 	sub.w	r3, r8, #2048	; 0x800
 8010d4c:	9308      	str	r3, [sp, #32]
		for (v = 0, xs = Fd, ys = Gd, xd = Ft + u, yd = Gt + u;
 8010d4e:	2700      	movs	r7, #0
 8010d50:	f5a6 6180 	sub.w	r1, r6, #1024	; 0x400
 8010d54:	f101 0e08 	add.w	lr, r1, #8
 8010d58:	46f1      	mov	r9, lr
	x = 0;
 8010d5a:	2300      	movs	r3, #0
	z = (uint64_t)a * (uint64_t)b;
 8010d5c:	fba2 0a03 	umull	r0, sl, r2, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010d60:	fba5 3b00 	umull	r3, fp, r5, r0
 8010d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010d68:	fba3 3b04 	umull	r3, fp, r3, r4
	d = (uint32_t)((z + w) >> 31) - p;
 8010d6c:	181b      	adds	r3, r3, r0
 8010d6e:	eb4b 0b0a 	adc.w	fp, fp, sl
 8010d72:	46ca      	mov	sl, r9
		w = d[u] - p;
 8010d74:	f859 0d04 	ldr.w	r0, [r9, #-4]!
	d = (uint32_t)((z + w) >> 31) - p;
 8010d78:	0fdb      	lsrs	r3, r3, #31
 8010d7a:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
		w = d[u] - p;
 8010d7e:	eba0 0b04 	sub.w	fp, r0, r4
		w += p & -(w >> 31);
 8010d82:	ea04 70eb 	and.w	r0, r4, fp, asr #31
	d = a + b - p;
 8010d86:	ebab 0b04 	sub.w	fp, fp, r4
	d = (uint32_t)((z + w) >> 31) - p;
 8010d8a:	1b1b      	subs	r3, r3, r4
	d = a + b - p;
 8010d8c:	4458      	add	r0, fp
 8010d8e:	4418      	add	r0, r3
	d += p & -(d >> 31);
 8010d90:	ea04 73e3 	and.w	r3, r4, r3, asr #31
	d = a + b - p;
 8010d94:	4418      	add	r0, r3
	d += p & -(d >> 31);
 8010d96:	ea04 73e0 	and.w	r3, r4, r0, asr #31
	while (u -- > 0) {
 8010d9a:	4549      	cmp	r1, r9
	d += p & -(d >> 31);
 8010d9c:	4403      	add	r3, r0
	while (u -- > 0) {
 8010d9e:	d1dd      	bne.n	8010d5c <solve_NTRU.constprop.0+0x22fc>
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 8010da0:	6848      	ldr	r0, [r1, #4]
 8010da2:	0f80      	lsrs	r0, r0, #30
 8010da4:	4240      	negs	r0, r0
 8010da6:	ea00 000c 	and.w	r0, r0, ip
	d = a - b;
 8010daa:	1a1b      	subs	r3, r3, r0
	d += p & -(d >> 31);
 8010dac:	ea04 70e3 	and.w	r0, r4, r3, asr #31
 8010db0:	4403      	add	r3, r0
			*xd = zint_mod_small_signed(xs, dlen, p, p0i, R2, Rx);
 8010db2:	9808      	ldr	r0, [sp, #32]
 8010db4:	f20a 4904 	addw	r9, sl, #1028	; 0x404
 8010db8:	f840 3037 	str.w	r3, [r0, r7, lsl #3]
	x = 0;
 8010dbc:	2000      	movs	r0, #0
	z = (uint64_t)a * (uint64_t)b;
 8010dbe:	fba2 0a00 	umull	r0, sl, r2, r0
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010dc2:	fba5 3b00 	umull	r3, fp, r5, r0
 8010dc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010dca:	fba3 3b04 	umull	r3, fp, r3, r4
	d = (uint32_t)((z + w) >> 31) - p;
 8010dce:	181b      	adds	r3, r3, r0
		w = d[u] - p;
 8010dd0:	f859 0d04 	ldr.w	r0, [r9, #-4]!
	d = (uint32_t)((z + w) >> 31) - p;
 8010dd4:	eb4b 0b0a 	adc.w	fp, fp, sl
 8010dd8:	0fdb      	lsrs	r3, r3, #31
		w = d[u] - p;
 8010dda:	eba0 0a04 	sub.w	sl, r0, r4
		w += p & -(w >> 31);
 8010dde:	ea04 70ea 	and.w	r0, r4, sl, asr #31
	d = (uint32_t)((z + w) >> 31) - p;
 8010de2:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
	d = a + b - p;
 8010de6:	ebaa 0a04 	sub.w	sl, sl, r4
	d = (uint32_t)((z + w) >> 31) - p;
 8010dea:	1b1b      	subs	r3, r3, r4
	d = a + b - p;
 8010dec:	4450      	add	r0, sl
 8010dee:	4418      	add	r0, r3
	d += p & -(d >> 31);
 8010df0:	ea04 73e3 	and.w	r3, r4, r3, asr #31
	d = a + b - p;
 8010df4:	4418      	add	r0, r3
	d += p & -(d >> 31);
 8010df6:	ea04 73e0 	and.w	r3, r4, r0, asr #31
	while (u -- > 0) {
 8010dfa:	454e      	cmp	r6, r9
	d += p & -(d >> 31);
 8010dfc:	4418      	add	r0, r3
	while (u -- > 0) {
 8010dfe:	d1de      	bne.n	8010dbe <solve_NTRU.constprop.0+0x235e>
	z = modp_sub(z, Rx & -(d[dlen - 1] >> 30), p);
 8010e00:	f8d1 3404 	ldr.w	r3, [r1, #1028]	; 0x404
 8010e04:	0f9b      	lsrs	r3, r3, #30
 8010e06:	425b      	negs	r3, r3
 8010e08:	ea03 030c 	and.w	r3, r3, ip
	d = a - b;
 8010e0c:	1ac0      	subs	r0, r0, r3
	d += p & -(d >> 31);
 8010e0e:	ea04 73e0 	and.w	r3, r4, r0, asr #31
 8010e12:	4418      	add	r0, r3
			v < hn;
 8010e14:	4b28      	ldr	r3, [pc, #160]	; (8010eb8 <solve_NTRU.constprop.0+0x2458>)
			*yd = zint_mod_small_signed(ys, dlen, p, p0i, R2, Rx);
 8010e16:	f848 0037 	str.w	r0, [r8, r7, lsl #3]
			v < hn;
 8010e1a:	459e      	cmp	lr, r3
			v ++, xs += dlen, ys += dlen, xd += llen, yd += llen)
 8010e1c:	f106 0608 	add.w	r6, r6, #8
 8010e20:	f107 0701 	add.w	r7, r7, #1
 8010e24:	4671      	mov	r1, lr
			v < hn;
 8010e26:	d195      	bne.n	8010d54 <solve_NTRU.constprop.0+0x22f4>
	for (u = 0; u < llen; u ++) {
 8010e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e2a:	3303      	adds	r3, #3
 8010e2c:	2b06      	cmp	r3, #6
 8010e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8010e30:	f108 0804 	add.w	r8, r8, #4
 8010e34:	f43d afec 	beq.w	800ee10 <solve_NTRU.constprop.0+0x3b0>
		p = PRIMES[u].p;
 8010e38:	4a20      	ldr	r2, [pc, #128]	; (8010ebc <solve_NTRU.constprop.0+0x245c>)
 8010e3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010e3e:	e74d      	b.n	8010cdc <solve_NTRU.constprop.0+0x227c>
 8010e40:	4a1f      	ldr	r2, [pc, #124]	; (8010ec0 <solve_NTRU.constprop.0+0x2460>)
 8010e42:	4619      	mov	r1, r3
 8010e44:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8010e48:	461e      	mov	r6, r3
 8010e4a:	e9cd 5400 	strd	r5, r4, [sp]
 8010e4e:	2308      	movs	r3, #8
 8010e50:	f7f8 fbe6 	bl	8009620 <modp_iNTT2_ext.part.0>
 8010e54:	4a1a      	ldr	r2, [pc, #104]	; (8010ec0 <solve_NTRU.constprop.0+0x2460>)
 8010e56:	2308      	movs	r3, #8
 8010e58:	f502 6000 	add.w	r0, r2, #2048	; 0x800
 8010e5c:	4631      	mov	r1, r6
 8010e5e:	e9cd 5400 	strd	r5, r4, [sp]
 8010e62:	f7f8 fbdd 	bl	8009620 <modp_iNTT2_ext.part.0>
				*x = fx[v];
 8010e66:	4917      	ldr	r1, [pc, #92]	; (8010ec4 <solve_NTRU.constprop.0+0x2464>)
 8010e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010e6c:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 8010e70:	f003 ff08 	bl	8014c84 <memcpy>
				*y = gx[v];
 8010e74:	4914      	ldr	r1, [pc, #80]	; (8010ec8 <solve_NTRU.constprop.0+0x2468>)
 8010e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010e7a:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 8010e7e:	f003 ff01 	bl	8014c84 <memcpy>
 8010e82:	9b12      	ldr	r3, [sp, #72]	; 0x48
		p = PRIMES[u].p;
 8010e84:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8010e86:	3304      	adds	r3, #4
 8010e88:	9312      	str	r3, [sp, #72]	; 0x48
 8010e8a:	4b0c      	ldr	r3, [pc, #48]	; (8010ebc <solve_NTRU.constprop.0+0x245c>)
 8010e8c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8010e90:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8010e94:	3001      	adds	r0, #1
 8010e96:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
		modp_mkgm2(gm, igm, logn_top, PRIMES[u].g, p, p0i);
 8010e9a:	684e      	ldr	r6, [r1, #4]
		p = PRIMES[u].p;
 8010e9c:	9030      	str	r0, [sp, #192]	; 0xc0
 8010e9e:	f7fd bfcc 	b.w	800ee3a <solve_NTRU.constprop.0+0x3da>
			v ++, xs += dlen, ys += dlen, xd += llen, yd += llen)
 8010ea2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010ea4:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8010ea8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010eaa:	009b      	lsls	r3, r3, #2
 8010eac:	9328      	str	r3, [sp, #160]	; 0xa0
 8010eae:	e6d7      	b.n	8010c60 <solve_NTRU.constprop.0+0x2200>
 8010eb0:	2000d8e0 	.word	0x2000d8e0
 8010eb4:	7fffd801 	.word	0x7fffd801
 8010eb8:	2000cce0 	.word	0x2000cce0
 8010ebc:	08016dfc 	.word	0x08016dfc
 8010ec0:	2000e4e0 	.word	0x2000e4e0
 8010ec4:	2000e8e0 	.word	0x2000e8e0
 8010ec8:	2000ece0 	.word	0x2000ece0
	modp_mkgm2(gm, tmp, logn, primes[0].g, p, p0i);
 8010ecc:	4967      	ldr	r1, [pc, #412]	; (801106c <solve_NTRU.constprop.0+0x260c>)
 8010ece:	4b68      	ldr	r3, [pc, #416]	; (8011070 <solve_NTRU.constprop.0+0x2610>)
 8010ed0:	4e68      	ldr	r6, [pc, #416]	; (8011074 <solve_NTRU.constprop.0+0x2614>)
 8010ed2:	f501 5000 	add.w	r0, r1, #8192	; 0x2000
 8010ed6:	e9cd 6300 	strd	r6, r3, [sp]
 8010eda:	2209      	movs	r2, #9
 8010edc:	4b66      	ldr	r3, [pc, #408]	; (8011078 <solve_NTRU.constprop.0+0x2618>)
 8010ede:	f7fc fff7 	bl	800ded0 <modp_mkgm2>
 8010ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ee4:	983a      	ldr	r0, [sp, #232]	; 0xe8
 8010ee6:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8010eea:	331f      	adds	r3, #31
		Gt[u] = modp_set(G[u], p);
 8010eec:	f914 1f01 	ldrsb.w	r1, [r4, #1]!
	w += p & -(w >> 31);
 8010ef0:	ea06 72e1 	and.w	r2, r6, r1, asr #31
 8010ef4:	440a      	add	r2, r1
	for (u = 0; u < n; u ++) {
 8010ef6:	42a3      	cmp	r3, r4
		Gt[u] = modp_set(G[u], p);
 8010ef8:	f840 2f04 	str.w	r2, [r0, #4]!
	for (u = 0; u < n; u ++) {
 8010efc:	d1f6      	bne.n	8010eec <solve_NTRU.constprop.0+0x248c>
 8010efe:	4a5f      	ldr	r2, [pc, #380]	; (801107c <solve_NTRU.constprop.0+0x261c>)
	w += p & -(w >> 31);
 8010f00:	4c5c      	ldr	r4, [pc, #368]	; (8011074 <solve_NTRU.constprop.0+0x2614>)
 8010f02:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8010f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f06:	f8dd c0e4 	ldr.w	ip, [sp, #228]	; 0xe4
		ft[u] = modp_set(f[u], p);
 8010f0a:	f910 ef01 	ldrsb.w	lr, [r0, #1]!
		gt[u] = modp_set(g[u], p);
 8010f0e:	f91c 7f01 	ldrsb.w	r7, [ip, #1]!
		Ft[u] = modp_set(F[u], p);
 8010f12:	f912 6f01 	ldrsb.w	r6, [r2, #1]!
	w += p & -(w >> 31);
 8010f16:	ea04 71ee 	and.w	r1, r4, lr, asr #31
 8010f1a:	4471      	add	r1, lr
		ft[u] = modp_set(f[u], p);
 8010f1c:	f843 1b04 	str.w	r1, [r3], #4
	w += p & -(w >> 31);
 8010f20:	ea04 71e7 	and.w	r1, r4, r7, asr #31
 8010f24:	4439      	add	r1, r7
		gt[u] = modp_set(g[u], p);
 8010f26:	f8c3 17fc 	str.w	r1, [r3, #2044]	; 0x7fc
	w += p & -(w >> 31);
 8010f2a:	ea04 71e6 	and.w	r1, r4, r6, asr #31
 8010f2e:	4431      	add	r1, r6
		Ft[u] = modp_set(F[u], p);
 8010f30:	f8c3 1ffc 	str.w	r1, [r3, #4092]	; 0xffc
	for (u = 0; u < n; u ++) {
 8010f34:	4952      	ldr	r1, [pc, #328]	; (8011080 <solve_NTRU.constprop.0+0x2620>)
 8010f36:	4288      	cmp	r0, r1
 8010f38:	d1e7      	bne.n	8010f0a <solve_NTRU.constprop.0+0x24aa>
 8010f3a:	4f4d      	ldr	r7, [pc, #308]	; (8011070 <solve_NTRU.constprop.0+0x2610>)
 8010f3c:	4a51      	ldr	r2, [pc, #324]	; (8011084 <solve_NTRU.constprop.0+0x2624>)
	d = (uint32_t)((z + w) >> 31) - p;
 8010f3e:	4e52      	ldr	r6, [pc, #328]	; (8011088 <solve_NTRU.constprop.0+0x2628>)
 8010f40:	e9cd 4700 	strd	r4, r7, [sp]
 8010f44:	f5a2 50c0 	sub.w	r0, r2, #6144	; 0x1800
 8010f48:	2309      	movs	r3, #9
 8010f4a:	2101      	movs	r1, #1
 8010f4c:	f7f8 faf8 	bl	8009540 <modp_NTT2_ext.part.0>
 8010f50:	4a4c      	ldr	r2, [pc, #304]	; (8011084 <solve_NTRU.constprop.0+0x2624>)
 8010f52:	e9cd 4700 	strd	r4, r7, [sp]
 8010f56:	f5a2 5080 	sub.w	r0, r2, #4096	; 0x1000
 8010f5a:	2309      	movs	r3, #9
 8010f5c:	2101      	movs	r1, #1
 8010f5e:	f7f8 faef 	bl	8009540 <modp_NTT2_ext.part.0>
 8010f62:	4a48      	ldr	r2, [pc, #288]	; (8011084 <solve_NTRU.constprop.0+0x2624>)
 8010f64:	e9cd 4700 	strd	r4, r7, [sp]
 8010f68:	f5a2 6000 	sub.w	r0, r2, #2048	; 0x800
 8010f6c:	2309      	movs	r3, #9
 8010f6e:	2101      	movs	r1, #1
 8010f70:	f7f8 fae6 	bl	8009540 <modp_NTT2_ext.part.0>
 8010f74:	4a43      	ldr	r2, [pc, #268]	; (8011084 <solve_NTRU.constprop.0+0x2624>)
 8010f76:	e9cd 4700 	strd	r4, r7, [sp]
 8010f7a:	2101      	movs	r1, #1
 8010f7c:	f5a2 5000 	sub.w	r0, r2, #8192	; 0x2000
 8010f80:	2309      	movs	r3, #9
 8010f82:	f7f8 fadd 	bl	8009540 <modp_NTT2_ext.part.0>
		if (z != r) {
 8010f86:	4c41      	ldr	r4, [pc, #260]	; (801108c <solve_NTRU.constprop.0+0x262c>)
	d += p & -(d >> 31);
 8010f88:	483a      	ldr	r0, [pc, #232]	; (8011074 <solve_NTRU.constprop.0+0x2614>)
		if (z != r) {
 8010f8a:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010f8e:	4639      	mov	r1, r7
		if (z != r) {
 8010f90:	9f21      	ldr	r7, [sp, #132]	; 0x84
	z = (uint64_t)a * (uint64_t)b;
 8010f92:	f8d7 2800 	ldr.w	r2, [r7, #2048]	; 0x800
 8010f96:	463b      	mov	r3, r7
 8010f98:	3704      	adds	r7, #4
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	fba2 e803 	umull	lr, r8, r2, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010fa0:	fbae 2301 	umull	r2, r3, lr, r1
 8010fa4:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 8010fa8:	0493      	lsls	r3, r2, #18
 8010faa:	ebb3 0309 	subs.w	r3, r3, r9
 8010fae:	f3c2 3290 	ubfx	r2, r2, #14, #17
 8010fb2:	f162 0200 	sbc.w	r2, r2, #0
 8010fb6:	0092      	lsls	r2, r2, #2
 8010fb8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8010fbc:	009b      	lsls	r3, r3, #2
 8010fbe:	ebb3 0a09 	subs.w	sl, r3, r9
 8010fc2:	f162 0300 	sbc.w	r3, r2, #0
 8010fc6:	02db      	lsls	r3, r3, #11
 8010fc8:	ea4f 22ca 	mov.w	r2, sl, lsl #11
 8010fcc:	eb12 0209 	adds.w	r2, r2, r9
 8010fd0:	ea43 535a 	orr.w	r3, r3, sl, lsr #21
	z = (uint64_t)a * (uint64_t)b;
 8010fd4:	f85c af04 	ldr.w	sl, [ip, #4]!
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010fd8:	f143 0300 	adc.w	r3, r3, #0
	d = (uint32_t)((z + w) >> 31) - p;
 8010fdc:	eb12 020e 	adds.w	r2, r2, lr
 8010fe0:	eb48 0803 	adc.w	r8, r8, r3
 8010fe4:	0fd3      	lsrs	r3, r2, #31
	z = (uint64_t)a * (uint64_t)b;
 8010fe6:	f8dc 2800 	ldr.w	r2, [ip, #2048]	; 0x800
 8010fea:	fbaa 2a02 	umull	r2, sl, sl, r2
	d = (uint32_t)((z + w) >> 31) - p;
 8010fee:	ea43 0348 	orr.w	r3, r3, r8, lsl #1
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8010ff2:	fba2 8e01 	umull	r8, lr, r2, r1
 8010ff6:	f028 4b00 	bic.w	fp, r8, #2147483648	; 0x80000000
 8010ffa:	ea4f 4e88 	mov.w	lr, r8, lsl #18
 8010ffe:	ebbe 0e0b 	subs.w	lr, lr, fp
 8011002:	f3c8 3890 	ubfx	r8, r8, #14, #17
 8011006:	f168 0800 	sbc.w	r8, r8, #0
 801100a:	ea4f 0888 	mov.w	r8, r8, lsl #2
 801100e:	ea48 789e 	orr.w	r8, r8, lr, lsr #30
 8011012:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8011016:	ebbe 0e0b 	subs.w	lr, lr, fp
 801101a:	f168 0800 	sbc.w	r8, r8, #0
 801101e:	ea4f 28c8 	mov.w	r8, r8, lsl #11
 8011022:	ea48 585e 	orr.w	r8, r8, lr, lsr #21
 8011026:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801102a:	eb1e 0e0b 	adds.w	lr, lr, fp
 801102e:	f148 0800 	adc.w	r8, r8, #0
	d = (uint32_t)((z + w) >> 31) - p;
 8011032:	eb1e 0202 	adds.w	r2, lr, r2
 8011036:	eb4a 0a08 	adc.w	sl, sl, r8
 801103a:	0fd2      	lsrs	r2, r2, #31
 801103c:	ea42 024a 	orr.w	r2, r2, sl, lsl #1
 8011040:	eb02 0e06 	add.w	lr, r2, r6
	d += p & -(d >> 31);
 8011044:	ea00 7eee 	and.w	lr, r0, lr, asr #31
	d = (uint32_t)((z + w) >> 31) - p;
 8011048:	eba3 0900 	sub.w	r9, r3, r0
	d = a - b;
 801104c:	4472      	add	r2, lr
 801104e:	1a9b      	subs	r3, r3, r2
	d += p & -(d >> 31);
 8011050:	ea00 79e9 	and.w	r9, r0, r9, asr #31
	d = a - b;
 8011054:	444b      	add	r3, r9
	d += p & -(d >> 31);
 8011056:	ea00 72e3 	and.w	r2, r0, r3, asr #31
 801105a:	4413      	add	r3, r2
		if (z != r) {
 801105c:	42a3      	cmp	r3, r4
 801105e:	f47f a907 	bne.w	8010270 <solve_NTRU.constprop.0+0x1810>
	for (u = 0; u < n; u ++) {
 8011062:	42bd      	cmp	r5, r7
 8011064:	d195      	bne.n	8010f92 <solve_NTRU.constprop.0+0x2532>
	return 1;
 8011066:	2001      	movs	r0, #1
 8011068:	f7ff b903 	b.w	8010272 <solve_NTRU.constprop.0+0x1812>
 801106c:	2000c8e0 	.word	0x2000c8e0
 8011070:	79bfd7ff 	.word	0x79bfd7ff
 8011074:	7fffd801 	.word	0x7fffd801
 8011078:	16d6ad45 	.word	0x16d6ad45
 801107c:	20001eff 	.word	0x20001eff
 8011080:	20002ab7 	.word	0x20002ab7
 8011084:	2000e8e0 	.word	0x2000e8e0
 8011088:	800027ff 	.word	0x800027ff
 801108c:	723f844c 	.word	0x723f844c

08011090 <Thread1>:
static THD_FUNCTION(Thread1, arg) {
 8011090:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 8011094:	4bc2      	ldr	r3, [pc, #776]	; (80113a0 <Thread1+0x310>)
	sc->dptr = 0;
 8011096:	4cc3      	ldr	r4, [pc, #780]	; (80113a4 <Thread1+0x314>)
 8011098:	68db      	ldr	r3, [r3, #12]
 801109a:	4ac3      	ldr	r2, [pc, #780]	; (80113a8 <Thread1+0x318>)
 801109c:	61da      	str	r2, [r3, #28]
 801109e:	f6ad 6d9c 	subw	sp, sp, #3740	; 0xe9c


	/*
	 * Generate key pair.
	 */
	randombytes(seed, sizeof seed);
 80110a2:	2300      	movs	r3, #0
 80110a4:	48c1      	ldr	r0, [pc, #772]	; (80113ac <Thread1+0x31c>)
 80110a6:	f8df b308 	ldr.w	fp, [pc, #776]	; 80113b0 <Thread1+0x320>
 80110aa:	2230      	movs	r2, #48	; 0x30
 80110ac:	f002 fb90 	bl	80137d0 <randombytes.isra.0>
 80110b0:	2600      	movs	r6, #0
	memset(sc->st.A, 0, sizeof sc->st.A);
 80110b2:	22c8      	movs	r2, #200	; 0xc8
 80110b4:	2100      	movs	r1, #0
	sc->dptr = 0;
 80110b6:	2700      	movs	r7, #0
	memset(sc->st.A, 0, sizeof sc->st.A);
 80110b8:	4620      	mov	r0, r4
	sc->dptr = 0;
 80110ba:	e9c4 6732 	strd	r6, r7, [r4, #200]	; 0xc8
	memset(sc->st.A, 0, sizeof sc->st.A);
 80110be:	f003 fd95 	bl	8014bec <memset>
	inner_shake256_init(&rng);
	inner_shake256_inject(&rng, seed, sizeof seed);
 80110c2:	49ba      	ldr	r1, [pc, #744]	; (80113ac <Thread1+0x31c>)
 80110c4:	2230      	movs	r2, #48	; 0x30
 80110c6:	4620      	mov	r0, r4
 80110c8:	f7f8 ffa2 	bl	800a010 <falcon_inner_i_shake256_inject>
	sc->st.dbuf[sc->dptr] ^= 0x1F;
 80110cc:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 80110d0:	5ca3      	ldrb	r3, [r4, r2]
 80110d2:	f083 031f 	eor.w	r3, r3, #31
 80110d6:	54a3      	strb	r3, [r4, r2]
	sc->st.dbuf[135] ^= 0x80;
 80110d8:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
	sc->dptr = 136;
 80110dc:	2088      	movs	r0, #136	; 0x88
	sc->st.dbuf[135] ^= 0x80;
 80110de:	f083 0380 	eor.w	r3, r3, #128	; 0x80
	sc->dptr = 136;
 80110e2:	2100      	movs	r1, #0
	sc->st.dbuf[135] ^= 0x80;
 80110e4:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	sc->dptr = 136;
 80110e8:	e9c4 0132 	strd	r0, r1, [r4, #200]	; 0xc8
 80110ec:	4bb1      	ldr	r3, [pc, #708]	; (80113b4 <Thread1+0x324>)
 80110ee:	f103 3aff 	add.w	sl, r3, #4294967295
		 * The poly_small_mkgauss() function makes sure
		 * that the sum of coefficients is 1 modulo 2
		 * (i.e. the resultant of the polynomial with phi
		 * will be odd).
		 */
		poly_small_mkgauss(rc, f, logn);
 80110f2:	48b1      	ldr	r0, [pc, #708]	; (80113b8 <Thread1+0x328>)
 80110f4:	f7fa f86c 	bl	800b1d0 <poly_small_mkgauss.constprop.0>
		poly_small_mkgauss(rc, g, logn);
 80110f8:	48b0      	ldr	r0, [pc, #704]	; (80113bc <Thread1+0x32c>)
 80110fa:	f7fa f869 	bl	800b1d0 <poly_small_mkgauss.constprop.0>
 80110fe:	49af      	ldr	r1, [pc, #700]	; (80113bc <Thread1+0x32c>)
 8011100:	4aad      	ldr	r2, [pc, #692]	; (80113b8 <Thread1+0x328>)
		for (u = 0; u < n; u ++) {
			/*
			 * We can use non-CT tests since on any failure
			 * we will discard f and g.
			 */
			if (f[u] >= lim || f[u] <= -lim
 8011102:	f912 3b01 	ldrsb.w	r3, [r2], #1
 8011106:	331f      	adds	r3, #31
 8011108:	b2db      	uxtb	r3, r3
 801110a:	2b3e      	cmp	r3, #62	; 0x3e
 801110c:	d8f1      	bhi.n	80110f2 <Thread1+0x62>
				|| g[u] >= lim || g[u] <= -lim)
 801110e:	f911 3b01 	ldrsb.w	r3, [r1], #1
 8011112:	331f      	adds	r3, #31
 8011114:	b2db      	uxtb	r3, r3
 8011116:	2b3e      	cmp	r3, #62	; 0x3e
 8011118:	d8eb      	bhi.n	80110f2 <Thread1+0x62>
		for (u = 0; u < n; u ++) {
 801111a:	4ba6      	ldr	r3, [pc, #664]	; (80113b4 <Thread1+0x324>)
 801111c:	4293      	cmp	r3, r2
 801111e:	d1f0      	bne.n	8011102 <Thread1+0x72>
 8011120:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8011124:	eb03 0802 	add.w	r8, r3, r2
 8011128:	2000      	movs	r0, #0
 801112a:	4642      	mov	r2, r8
 801112c:	4603      	mov	r3, r0
		z = f[u];
 801112e:	f912 1f01 	ldrsb.w	r1, [r2, #1]!
		s += (uint32_t)(z * z);
 8011132:	fb11 3301 	smlabb	r3, r1, r1, r3
	for (u = 0; u < n; u ++) {
 8011136:	4592      	cmp	sl, r2
		ng |= s;
 8011138:	ea40 0003 	orr.w	r0, r0, r3
	for (u = 0; u < n; u ++) {
 801113c:	d1f7      	bne.n	801112e <Thread1+0x9e>
	return s | -(ng >> 31);
 801113e:	ea43 72e0 	orr.w	r2, r3, r0, asr #31
poly_small_sqnorm(const int8_t *f, unsigned logn)
 8011142:	4b9f      	ldr	r3, [pc, #636]	; (80113c0 <Thread1+0x330>)
 8011144:	9304      	str	r3, [sp, #16]
	ng = 0;
 8011146:	2400      	movs	r4, #0
	return s | -(ng >> 31);
 8011148:	4619      	mov	r1, r3
	s = 0;
 801114a:	4623      	mov	r3, r4
		z = f[u];
 801114c:	f911 0f01 	ldrsb.w	r0, [r1, #1]!
		s += (uint32_t)(z * z);
 8011150:	fb10 3300 	smlabb	r3, r0, r0, r3
	for (u = 0; u < n; u ++) {
 8011154:	458b      	cmp	fp, r1
		ng |= s;
 8011156:	ea44 0403 	orr.w	r4, r4, r3
	for (u = 0; u < n; u ++) {
 801115a:	d1f7      	bne.n	801114c <Thread1+0xbc>
	return s | -(ng >> 31);
 801115c:	ea43 73e4 	orr.w	r3, r3, r4, asr #31
		 * Since f and g are integral, the squared norm
		 * of (g,-f) is an integer.
		 */
		normf = poly_small_sqnorm(f, logn);
		normg = poly_small_sqnorm(g, logn);
		norm = (normf + normg) | -((normf | normg) >> 31);
 8011160:	ea43 0102 	orr.w	r1, r3, r2
 8011164:	4413      	add	r3, r2
 8011166:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
		if (norm >= 16823) {
 801116a:	f244 12b6 	movw	r2, #16822	; 0x41b6
 801116e:	4293      	cmp	r3, r2
 8011170:	d8bf      	bhi.n	80110f2 <Thread1+0x62>
 8011172:	4e94      	ldr	r6, [pc, #592]	; (80113c4 <Thread1+0x334>)
 8011174:	4644      	mov	r4, r8
 8011176:	4635      	mov	r5, r6
		r[u] = fpr_of(t[u]);
 8011178:	f914 0f01 	ldrsb.w	r0, [r4, #1]!
	return fpr_scaled(i, 0);
 801117c:	2200      	movs	r2, #0
 801117e:	17c1      	asrs	r1, r0, #31
 8011180:	f7fa fe6e 	bl	800be60 <falcon_inner_fpr_scaled>
	for (u = 0; u < n; u ++) {
 8011184:	45a2      	cmp	sl, r4
		r[u] = fpr_of(t[u]);
 8011186:	e9e5 0102 	strd	r0, r1, [r5, #8]!
	for (u = 0; u < n; u ++) {
 801118a:	d1f5      	bne.n	8011178 <Thread1+0xe8>
 801118c:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80113c8 <Thread1+0x338>
 8011190:	9c04      	ldr	r4, [sp, #16]
 8011192:	464f      	mov	r7, r9
 8011194:	464d      	mov	r5, r9
		r[u] = fpr_of(t[u]);
 8011196:	f914 0f01 	ldrsb.w	r0, [r4, #1]!
 801119a:	2200      	movs	r2, #0
 801119c:	17c1      	asrs	r1, r0, #31
 801119e:	f7fa fe5f 	bl	800be60 <falcon_inner_fpr_scaled>
	for (u = 0; u < n; u ++) {
 80111a2:	45a3      	cmp	fp, r4
		r[u] = fpr_of(t[u]);
 80111a4:	e9e5 0102 	strd	r0, r1, [r5, #8]!
	for (u = 0; u < n; u ++) {
 80111a8:	d1f5      	bne.n	8011196 <Thread1+0x106>
		rt1 = (fpr *)tmp;
		rt2 = rt1 + n;
		rt3 = rt2 + n;
		poly_small_to_fp(rt1, f, logn);
		poly_small_to_fp(rt2, g, logn);
		Zf(FFT)(rt1, logn);
 80111aa:	4888      	ldr	r0, [pc, #544]	; (80113cc <Thread1+0x33c>)
 80111ac:	2109      	movs	r1, #9
 80111ae:	f7fb fa67 	bl	800c680 <falcon_inner_FFT>
		Zf(FFT)(rt2, logn);
 80111b2:	4887      	ldr	r0, [pc, #540]	; (80113d0 <Thread1+0x340>)
 80111b4:	2109      	movs	r1, #9
 80111b6:	f7fb fa63 	bl	800c680 <falcon_inner_FFT>
		Zf(poly_invnorm2_fft)(rt3, rt1, rt2, logn);
 80111ba:	4a85      	ldr	r2, [pc, #532]	; (80113d0 <Thread1+0x340>)
 80111bc:	2309      	movs	r3, #9
 80111be:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80111c2:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 80111c6:	f7fc f9fb 	bl	800d5c0 <falcon_inner_poly_invnorm2_fft>
 80111ca:	4b82      	ldr	r3, [pc, #520]	; (80113d4 <Thread1+0x344>)
 80111cc:	f5a3 62ff 	sub.w	r2, r3, #2040	; 0x7f8
 80111d0:	9205      	str	r2, [sp, #20]
	x ^= (uint64_t)1 << 63;
 80111d2:	68da      	ldr	r2, [r3, #12]
		a[u] = fpr_neg(a[u]);
 80111d4:	3308      	adds	r3, #8
 80111d6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
	for (u = (n >> 1); u < n; u ++) {
 80111da:	429f      	cmp	r7, r3
		a[u] = fpr_neg(a[u]);
 80111dc:	605a      	str	r2, [r3, #4]
	for (u = (n >> 1); u < n; u ++) {
 80111de:	d1f8      	bne.n	80111d2 <Thread1+0x142>
 80111e0:	4b7d      	ldr	r3, [pc, #500]	; (80113d8 <Thread1+0x348>)
 80111e2:	68da      	ldr	r2, [r3, #12]
 80111e4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
		a[u] = fpr_neg(a[u]);
 80111e8:	60da      	str	r2, [r3, #12]
	for (u = (n >> 1); u < n; u ++) {
 80111ea:	4a7c      	ldr	r2, [pc, #496]	; (80113dc <Thread1+0x34c>)
		a[u] = fpr_neg(a[u]);
 80111ec:	3308      	adds	r3, #8
	for (u = (n >> 1); u < n; u ++) {
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d1f7      	bne.n	80111e2 <Thread1+0x152>
 80111f2:	f5a2 5400 	sub.w	r4, r2, #8192	; 0x2000
		a[u] = fpr_mul(a[u], x);
 80111f6:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
 80111fa:	a367      	add	r3, pc, #412	; (adr r3, 8011398 <Thread1+0x308>)
 80111fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011200:	f7fa ff2e 	bl	800c060 <falcon_inner_fpr_mul>
	for (u = 0; u < n; u ++) {
 8011204:	42a7      	cmp	r7, r4
		a[u] = fpr_mul(a[u], x);
 8011206:	e9c4 0100 	strd	r0, r1, [r4]
	for (u = 0; u < n; u ++) {
 801120a:	d1f4      	bne.n	80111f6 <Thread1+0x166>
 801120c:	4c6e      	ldr	r4, [pc, #440]	; (80113c8 <Thread1+0x338>)
		a[u] = fpr_mul(a[u], x);
 801120e:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
 8011212:	a361      	add	r3, pc, #388	; (adr r3, 8011398 <Thread1+0x308>)
 8011214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011218:	f7fa ff22 	bl	800c060 <falcon_inner_fpr_mul>
	for (u = 0; u < n; u ++) {
 801121c:	4b6f      	ldr	r3, [pc, #444]	; (80113dc <Thread1+0x34c>)
 801121e:	42a3      	cmp	r3, r4
		a[u] = fpr_mul(a[u], x);
 8011220:	e9c4 0100 	strd	r0, r1, [r4]
	for (u = 0; u < n; u ++) {
 8011224:	d1f3      	bne.n	801120e <Thread1+0x17e>
		Zf(poly_adj_fft)(rt1, logn);
		Zf(poly_adj_fft)(rt2, logn);
		Zf(poly_mulconst)(rt1, fpr_q, logn);
		Zf(poly_mulconst)(rt2, fpr_q, logn);
		Zf(poly_mul_autoadj_fft)(rt1, rt3, logn);
 8011226:	f103 0108 	add.w	r1, r3, #8
 801122a:	f5a1 5000 	sub.w	r0, r1, #8192	; 0x2000
 801122e:	2209      	movs	r2, #9
 8011230:	f7fb fc66 	bl	800cb00 <falcon_inner_poly_mul_autoadj_fft>
		Zf(poly_mul_autoadj_fft)(rt2, rt3, logn);
 8011234:	496a      	ldr	r1, [pc, #424]	; (80113e0 <Thread1+0x350>)
 8011236:	2209      	movs	r2, #9
 8011238:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 801123c:	f7fb fc60 	bl	800cb00 <falcon_inner_poly_mul_autoadj_fft>
		Zf(iFFT)(rt1, logn);
 8011240:	4862      	ldr	r0, [pc, #392]	; (80113cc <Thread1+0x33c>)
 8011242:	2109      	movs	r1, #9
 8011244:	f7fb fafc 	bl	800c840 <falcon_inner_iFFT>
		Zf(iFFT)(rt2, logn);
 8011248:	4861      	ldr	r0, [pc, #388]	; (80113d0 <Thread1+0x340>)
 801124a:	2109      	movs	r1, #9
 801124c:	f7fb faf8 	bl	800c840 <falcon_inner_iFFT>
		bnorm = fpr_zero;
 8011250:	2500      	movs	r5, #0
 8011252:	462c      	mov	r4, r5
		for (u = 0; u < n; u ++) {
			bnorm = fpr_add(bnorm, fpr_sqr(rt1[u]));
 8011254:	e9f6 2302 	ldrd	r2, r3, [r6, #8]!
	return fpr_mul(x, x);
 8011258:	4610      	mov	r0, r2
 801125a:	4619      	mov	r1, r3
 801125c:	f7fa ff00 	bl	800c060 <falcon_inner_fpr_mul>
 8011260:	4602      	mov	r2, r0
 8011262:	460b      	mov	r3, r1
 8011264:	4628      	mov	r0, r5
 8011266:	4621      	mov	r1, r4
 8011268:	f7fa fe42 	bl	800bef0 <falcon_inner_fpr_add>
			bnorm = fpr_add(bnorm, fpr_sqr(rt2[u]));
 801126c:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
			bnorm = fpr_add(bnorm, fpr_sqr(rt1[u]));
 8011270:	4605      	mov	r5, r0
 8011272:	460c      	mov	r4, r1
 8011274:	4610      	mov	r0, r2
 8011276:	4619      	mov	r1, r3
 8011278:	f7fa fef2 	bl	800c060 <falcon_inner_fpr_mul>
 801127c:	4602      	mov	r2, r0
 801127e:	460b      	mov	r3, r1
			bnorm = fpr_add(bnorm, fpr_sqr(rt2[u]));
 8011280:	4628      	mov	r0, r5
 8011282:	4621      	mov	r1, r4
 8011284:	f7fa fe34 	bl	800bef0 <falcon_inner_fpr_add>
		for (u = 0; u < n; u ++) {
 8011288:	42b7      	cmp	r7, r6
			bnorm = fpr_add(bnorm, fpr_sqr(rt2[u]));
 801128a:	4605      	mov	r5, r0
 801128c:	460c      	mov	r4, r1
		for (u = 0; u < n; u ++) {
 801128e:	d1e1      	bne.n	8011254 <Thread1+0x1c4>
		}
		if (!fpr_lt(bnorm, fpr_bnorm_max)) {
 8011290:	4b54      	ldr	r3, [pc, #336]	; (80113e4 <Thread1+0x354>)
 8011292:	4283      	cmp	r3, r0
 8011294:	f103 4361 	add.w	r3, r3, #3774873600	; 0xe1000000
 8011298:	f5a3 2304 	sub.w	r3, r3, #540672	; 0x84000
 801129c:	f1a3 0311 	sub.w	r3, r3, #17
 80112a0:	eb73 0404 	sbcs.w	r4, r3, r4
 80112a4:	f6ff af25 	blt.w	80110f2 <Thread1+0x62>
 80112a8:	4c4f      	ldr	r4, [pc, #316]	; (80113e8 <Thread1+0x358>)
 80112aa:	4d50      	ldr	r5, [pc, #320]	; (80113ec <Thread1+0x35c>)
	y += Q & -(y >> 31);
 80112ac:	9f04      	ldr	r7, [sp, #16]
 80112ae:	4620      	mov	r0, r4
 80112b0:	f243 0101 	movw	r1, #12289	; 0x3001
	uint16_t *tt;

	n = (size_t)1 << logn;
	tt = (uint16_t *)tmp;
	for (u = 0; u < n; u ++) {
		tt[u] = (uint16_t)mq_conv_small(f[u]);
 80112b4:	f918 6f01 	ldrsb.w	r6, [r8, #1]!
		h[u] = (uint16_t)mq_conv_small(g[u]);
 80112b8:	f917 2f01 	ldrsb.w	r2, [r7, #1]!
	y += Q & -(y >> 31);
 80112bc:	ea01 73e6 	and.w	r3, r1, r6, asr #31
 80112c0:	4433      	add	r3, r6
		tt[u] = (uint16_t)mq_conv_small(f[u]);
 80112c2:	f825 3f02 	strh.w	r3, [r5, #2]!
	y += Q & -(y >> 31);
 80112c6:	ea01 73e2 	and.w	r3, r1, r2, asr #31
 80112ca:	4413      	add	r3, r2
	for (u = 0; u < n; u ++) {
 80112cc:	45c2      	cmp	sl, r8
		h[u] = (uint16_t)mq_conv_small(g[u]);
 80112ce:	f820 3f02 	strh.w	r3, [r0, #2]!
	for (u = 0; u < n; u ++) {
 80112d2:	d1ef      	bne.n	80112b4 <Thread1+0x224>
	}
	mq_NTT(h, logn);
 80112d4:	4d46      	ldr	r5, [pc, #280]	; (80113f0 <Thread1+0x360>)
 80112d6:	4628      	mov	r0, r5
 80112d8:	f001 f9f2 	bl	80126c0 <mq_NTT.constprop.0>
	mq_NTT(tt, logn);
 80112dc:	483b      	ldr	r0, [pc, #236]	; (80113cc <Thread1+0x33c>)
 80112de:	f001 f9ef 	bl	80126c0 <mq_NTT.constprop.0>
 80112e2:	9f05      	ldr	r7, [sp, #20]
 80112e4:	462e      	mov	r6, r5
	for (u = 0; u < n; u ++) {
		if (tt[u] == 0) {
 80112e6:	f837 1b02 	ldrh.w	r1, [r7], #2
 80112ea:	2900      	cmp	r1, #0
 80112ec:	f43f af01 	beq.w	80110f2 <Thread1+0x62>
			return 0;
		}
		h[u] = (uint16_t)mq_div_12289(h[u], tt[u]);
 80112f0:	8830      	ldrh	r0, [r6, #0]
 80112f2:	f7f8 fec5 	bl	800a080 <mq_div_12289>
	for (u = 0; u < n; u ++) {
 80112f6:	4b3f      	ldr	r3, [pc, #252]	; (80113f4 <Thread1+0x364>)
		h[u] = (uint16_t)mq_div_12289(h[u], tt[u]);
 80112f8:	f826 0b02 	strh.w	r0, [r6], #2
	for (u = 0; u < n; u ++) {
 80112fc:	42bb      	cmp	r3, r7
 80112fe:	d1f2      	bne.n	80112e6 <Thread1+0x256>
	}
	mq_iNTT(h, logn);
 8011300:	483b      	ldr	r0, [pc, #236]	; (80113f0 <Thread1+0x360>)
 8011302:	f001 fa4d 	bl	80127a0 <mq_iNTT.constprop.0>

		/*
		 * Solve the NTRU equation to get F and G.
		 */
		lim = (1 << (Zf(max_FG_bits)[logn] - 1)) - 1;
		if (!solve_NTRU(logn, F, G, f, g, lim, (uint32_t *)tmp)) {
 8011306:	207f      	movs	r0, #127	; 0x7f
 8011308:	f7fd fbaa 	bl	800ea60 <solve_NTRU.constprop.0>
 801130c:	2800      	cmp	r0, #0
 801130e:	f43f aef0 	beq.w	80110f2 <Thread1+0x62>


	/*
	 * Encode private key.
	 */
	sk[0] = 0x50 + 9;
 8011312:	2359      	movs	r3, #89	; 0x59
 8011314:	f88d 3994 	strb.w	r3, [sp, #2452]	; 0x994
	u = 1;
	v = Zf(trim_i8_encode)(sk + u, CRYPTO_SECRETKEYBYTES - u,
 8011318:	4a27      	ldr	r2, [pc, #156]	; (80113b8 <Thread1+0x328>)
 801131a:	2306      	movs	r3, #6
 801131c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8011320:	f60d 1095 	addw	r0, sp, #2453	; 0x995
 8011324:	f001 f924 	bl	8012570 <falcon_inner_trim_i8_encode.constprop.0>
		f, 9, Zf(max_fg_bits)[9]);
	if (v == 0) {
 8011328:	4606      	mov	r6, r0
 801132a:	2800      	cmp	r0, #0
 801132c:	f000 8668 	beq.w	8012000 <Thread1+0xf70>
		return -1;
	}
	u += v;
 8011330:	3601      	adds	r6, #1
	v = Zf(trim_i8_encode)(sk + u, CRYPTO_SECRETKEYBYTES - u,
 8011332:	f240 5701 	movw	r7, #1281	; 0x501
 8011336:	f60d 1094 	addw	r0, sp, #2452	; 0x994
 801133a:	4a20      	ldr	r2, [pc, #128]	; (80113bc <Thread1+0x32c>)
 801133c:	2306      	movs	r3, #6
 801133e:	1bb9      	subs	r1, r7, r6
 8011340:	4430      	add	r0, r6
 8011342:	f001 f915 	bl	8012570 <falcon_inner_trim_i8_encode.constprop.0>
		g, 9, Zf(max_fg_bits)[9]);
	if (v == 0) {
 8011346:	2800      	cmp	r0, #0
 8011348:	f000 865a 	beq.w	8012000 <Thread1+0xf70>
		return -1;
	}
	u += v;
 801134c:	4406      	add	r6, r0
	v = Zf(trim_i8_encode)(sk + u, CRYPTO_SECRETKEYBYTES - u,
 801134e:	f60d 1094 	addw	r0, sp, #2452	; 0x994
 8011352:	4a29      	ldr	r2, [pc, #164]	; (80113f8 <Thread1+0x368>)
 8011354:	2308      	movs	r3, #8
 8011356:	1bb9      	subs	r1, r7, r6
 8011358:	4430      	add	r0, r6
 801135a:	f001 f909 	bl	8012570 <falcon_inner_trim_i8_encode.constprop.0>
		F, 9, Zf(max_FG_bits)[9]);
	if (v == 0) {
 801135e:	2800      	cmp	r0, #0
 8011360:	f000 864e 	beq.w	8012000 <Thread1+0xf70>
		return -1;
	}
	u += v;
 8011364:	4406      	add	r6, r0
	if (u != CRYPTO_SECRETKEYBYTES) {
 8011366:	42be      	cmp	r6, r7
 8011368:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
 801136c:	d167      	bne.n	801143e <Thread1+0x3ae>
	}

	/*
	 * Encode public key.
	 */
	pk[0] = 0x00 + 9;
 801136e:	2309      	movs	r3, #9
 8011370:	700b      	strb	r3, [r1, #0]

#include "inner.h"

/* see inner.h */
size_t
Zf(modq_encode)(
 8011372:	f505 6280 	add.w	r2, r5, #1024	; 0x400
 8011376:	462b      	mov	r3, r5
	uint32_t acc;
	int acc_len;

	n = (size_t)1 << logn;
	for (u = 0; u < n; u ++) {
		if (x[u] >= 12289) {
 8011378:	f833 0b02 	ldrh.w	r0, [r3], #2
 801137c:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
 8011380:	d85d      	bhi.n	801143e <Thread1+0x3ae>
	for (u = 0; u < n; u ++) {
 8011382:	429a      	cmp	r2, r3
 8011384:	d1f8      	bne.n	8011378 <Thread1+0x2e8>
	if (out_len > max_out_len) {
		return 0;
	}
	buf = out;
	acc = 0;
	acc_len = 0;
 8011386:	2300      	movs	r3, #0
 8011388:	f205 35fe 	addw	r5, r5, #1022	; 0x3fe
	buf = out;
 801138c:	f20d 6211 	addw	r2, sp, #1553	; 0x611
	acc = 0;
 8011390:	461e      	mov	r6, r3
 8011392:	e033      	b.n	80113fc <Thread1+0x36c>
 8011394:	f3af 8000 	nop.w
 8011398:	00000000 	.word	0x00000000
 801139c:	40c80080 	.word	0x40c80080
 80113a0:	20000a90 	.word	0x20000a90
 80113a4:	200036e0 	.word	0x200036e0
 80113a8:	080162d0 	.word	0x080162d0
 80113ac:	20003880 	.word	0x20003880
 80113b0:	20002eb7 	.word	0x20002eb7
 80113b4:	20002ab8 	.word	0x20002ab8
 80113b8:	200028b8 	.word	0x200028b8
 80113bc:	20002cb8 	.word	0x20002cb8
 80113c0:	20002cb7 	.word	0x20002cb7
 80113c4:	2000c8d8 	.word	0x2000c8d8
 80113c8:	2000d8d8 	.word	0x2000d8d8
 80113cc:	2000c8e0 	.word	0x2000c8e0
 80113d0:	2000d8e0 	.word	0x2000d8e0
 80113d4:	2000d0d8 	.word	0x2000d0d8
 80113d8:	2000e0d8 	.word	0x2000e0d8
 80113dc:	2000e8d8 	.word	0x2000e8d8
 80113e0:	2000e8e0 	.word	0x2000e8e0
 80113e4:	5fd8adab 	.word	0x5fd8adab
 80113e8:	20002eb6 	.word	0x20002eb6
 80113ec:	2000c8de 	.word	0x2000c8de
 80113f0:	20002eb8 	.word	0x20002eb8
 80113f4:	2000cce0 	.word	0x2000cce0
 80113f8:	20001f00 	.word	0x20001f00
	for (u = 0; u < n; u ++) {
		acc = (acc << 14) | x[u];
 80113fc:	f834 7f02 	ldrh.w	r7, [r4, #2]!
		acc_len += 14;
 8011400:	f103 000e 	add.w	r0, r3, #14
		while (acc_len >= 8) {
 8011404:	2807      	cmp	r0, #7
		acc = (acc << 14) | x[u];
 8011406:	ea47 3686 	orr.w	r6, r7, r6, lsl #14
		while (acc_len >= 8) {
 801140a:	f340 85f6 	ble.w	8011ffa <Thread1+0xf6a>
			acc_len -= 8;
 801140e:	1d98      	adds	r0, r3, #6
			*buf ++ = (uint8_t)(acc >> acc_len);
 8011410:	fa26 f700 	lsr.w	r7, r6, r0
		while (acc_len >= 8) {
 8011414:	2807      	cmp	r0, #7
			*buf ++ = (uint8_t)(acc >> acc_len);
 8011416:	7017      	strb	r7, [r2, #0]
		while (acc_len >= 8) {
 8011418:	dd03      	ble.n	8011422 <Thread1+0x392>
			acc_len -= 8;
 801141a:	3b02      	subs	r3, #2
			*buf ++ = (uint8_t)(acc >> acc_len);
 801141c:	fa26 f303 	lsr.w	r3, r6, r3
 8011420:	7053      	strb	r3, [r2, #1]
 8011422:	eb02 02d0 	add.w	r2, r2, r0, lsr #3
			acc_len -= 8;
 8011426:	f000 0307 	and.w	r3, r0, #7
			*buf ++ = (uint8_t)(acc >> acc_len);
 801142a:	3201      	adds	r2, #1
	for (u = 0; u < n; u ++) {
 801142c:	42a5      	cmp	r5, r4
 801142e:	d1e5      	bne.n	80113fc <Thread1+0x36c>
		}
	}
	if (acc_len > 0) {
 8011430:	2b00      	cmp	r3, #0
 8011432:	dd04      	ble.n	801143e <Thread1+0x3ae>
		*buf = (uint8_t)(acc << (8 - acc_len));
 8011434:	f1c3 0308 	rsb	r3, r3, #8
 8011438:	fa06 f303 	lsl.w	r3, r6, r3
 801143c:	7013      	strb	r3, [r2, #0]
    chnWrite(&SD1, public_key, 690);
 801143e:	4bc0      	ldr	r3, [pc, #768]	; (8011740 <Thread1+0x6b0>)
 8011440:	48bf      	ldr	r0, [pc, #764]	; (8011740 <Thread1+0x6b0>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	f240 22b2 	movw	r2, #690	; 0x2b2
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	4798      	blx	r3
        for (int i = 0; i < MESSAGE_SIZE_BYTES; i++) {
 801144c:	f10d 0433 	add.w	r4, sp, #51	; 0x33
            message[i] = rand() % 256;
 8011450:	f002 fdec 	bl	801402c <rand>
 8011454:	4243      	negs	r3, r0
 8011456:	b2db      	uxtb	r3, r3
 8011458:	b2c0      	uxtb	r0, r0
 801145a:	bf58      	it	pl
 801145c:	4258      	negpl	r0, r3
 801145e:	f804 0f01 	strb.w	r0, [r4, #1]!
        for (int i = 0; i < MESSAGE_SIZE_BYTES; i++) {
 8011462:	f10d 0343 	add.w	r3, sp, #67	; 0x43
 8011466:	42a3      	cmp	r3, r4
 8011468:	d1f2      	bne.n	8011450 <Thread1+0x3c0>
        chnWrite(&SD1, secret_key, 690);
 801146a:	4bb5      	ldr	r3, [pc, #724]	; (8011740 <Thread1+0x6b0>)
 801146c:	48b4      	ldr	r0, [pc, #720]	; (8011740 <Thread1+0x6b0>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	f240 22b2 	movw	r2, #690	; 0x2b2
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	f60d 1194 	addw	r1, sp, #2452	; 0x994
 801147a:	4798      	blx	r3
	size_t u, v, sig_len;

	/*
	 * Decode the private key.
	 */
	if (sk[0] != 0x50 + 9) {
 801147c:	f89d 3994 	ldrb.w	r3, [sp, #2452]	; 0x994
 8011480:	2b59      	cmp	r3, #89	; 0x59
 8011482:	f040 84d1 	bne.w	8011e28 <Thread1+0xd98>
		return -1;
	}
	u = 1;
	v = Zf(trim_i8_decode)(f, 9, Zf(max_fg_bits)[9],
 8011486:	48af      	ldr	r0, [pc, #700]	; (8011744 <Thread1+0x6b4>)
 8011488:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 801148c:	f60d 1295 	addw	r2, sp, #2453	; 0x995
 8011490:	2106      	movs	r1, #6
 8011492:	f001 f8bd 	bl	8012610 <falcon_inner_trim_i8_decode.constprop.0>
		sk + u, CRYPTO_SECRETKEYBYTES - u);
	if (v == 0) {
 8011496:	2800      	cmp	r0, #0
 8011498:	f000 84c6 	beq.w	8011e28 <Thread1+0xd98>
		return -1;
	}
	u += v;
 801149c:	1c44      	adds	r4, r0, #1
	v = Zf(trim_i8_decode)(g, 9, Zf(max_fg_bits)[9],
 801149e:	f240 5501 	movw	r5, #1281	; 0x501
 80114a2:	f60d 1294 	addw	r2, sp, #2452	; 0x994
 80114a6:	48a8      	ldr	r0, [pc, #672]	; (8011748 <Thread1+0x6b8>)
 80114a8:	1b2b      	subs	r3, r5, r4
 80114aa:	4422      	add	r2, r4
 80114ac:	2106      	movs	r1, #6
 80114ae:	f001 f8af 	bl	8012610 <falcon_inner_trim_i8_decode.constprop.0>
		sk + u, CRYPTO_SECRETKEYBYTES - u);
	if (v == 0) {
 80114b2:	2800      	cmp	r0, #0
 80114b4:	f000 84b8 	beq.w	8011e28 <Thread1+0xd98>
		return -1;
	}
	u += v;
 80114b8:	4404      	add	r4, r0
	v = Zf(trim_i8_decode)(F, 9, Zf(max_FG_bits)[9],
 80114ba:	f60d 1294 	addw	r2, sp, #2452	; 0x994
 80114be:	48a3      	ldr	r0, [pc, #652]	; (801174c <Thread1+0x6bc>)
 80114c0:	1b2b      	subs	r3, r5, r4
 80114c2:	4422      	add	r2, r4
 80114c4:	2108      	movs	r1, #8
 80114c6:	f001 f8a3 	bl	8012610 <falcon_inner_trim_i8_decode.constprop.0>
		sk + u, CRYPTO_SECRETKEYBYTES - u);
	if (v == 0) {
 80114ca:	2800      	cmp	r0, #0
 80114cc:	f000 84ac 	beq.w	8011e28 <Thread1+0xd98>
		return -1;
	}
	u += v;
 80114d0:	4404      	add	r4, r0
	if (u != CRYPTO_SECRETKEYBYTES) {
 80114d2:	42ac      	cmp	r4, r5
 80114d4:	f040 84a8 	bne.w	8011e28 <Thread1+0xd98>
 80114d8:	4e9d      	ldr	r6, [pc, #628]	; (8011750 <Thread1+0x6c0>)
 80114da:	499e      	ldr	r1, [pc, #632]	; (8011754 <Thread1+0x6c4>)
 80114dc:	4a9e      	ldr	r2, [pc, #632]	; (8011758 <Thread1+0x6c8>)
	y += Q & -(y >> 31);
 80114de:	f243 0501 	movw	r5, #12289	; 0x3001

	n = (size_t)1 << logn;
	t1 = (uint16_t *)tmp;
	t2 = t1 + n;
	for (u = 0; u < n; u ++) {
		t1[u] = (uint16_t)mq_conv_small(g[u]);
 80114e2:	f911 4f01 	ldrsb.w	r4, [r1, #1]!
		t2[u] = (uint16_t)mq_conv_small(F[u]);
 80114e6:	f916 0f01 	ldrsb.w	r0, [r6, #1]!
	y += Q & -(y >> 31);
 80114ea:	ea05 73e4 	and.w	r3, r5, r4, asr #31
 80114ee:	4423      	add	r3, r4
		t1[u] = (uint16_t)mq_conv_small(g[u]);
 80114f0:	f822 3f02 	strh.w	r3, [r2, #2]!
	y += Q & -(y >> 31);
 80114f4:	ea05 73e0 	and.w	r3, r5, r0, asr #31
 80114f8:	4403      	add	r3, r0
		t2[u] = (uint16_t)mq_conv_small(F[u]);
 80114fa:	f8a2 3400 	strh.w	r3, [r2, #1024]	; 0x400
	for (u = 0; u < n; u ++) {
 80114fe:	4b97      	ldr	r3, [pc, #604]	; (801175c <Thread1+0x6cc>)
 8011500:	428b      	cmp	r3, r1
 8011502:	d1ee      	bne.n	80114e2 <Thread1+0x452>
	}
	mq_NTT(t1, logn);
 8011504:	4896      	ldr	r0, [pc, #600]	; (8011760 <Thread1+0x6d0>)
 8011506:	f001 f8db 	bl	80126c0 <mq_NTT.constprop.0>
	mq_NTT(t2, logn);
 801150a:	4896      	ldr	r0, [pc, #600]	; (8011764 <Thread1+0x6d4>)
 801150c:	f001 f8d8 	bl	80126c0 <mq_NTT.constprop.0>
 8011510:	4a91      	ldr	r2, [pc, #580]	; (8011758 <Thread1+0x6c8>)
	z = x * y;
 8011512:	f642 26c8 	movw	r6, #10952	; 0x2ac8
	z -= Q;
 8011516:	f46f 5540 	mvn.w	r5, #12288	; 0x3000
	z += Q & -(z >> 31);
 801151a:	f243 0401 	movw	r4, #12289	; 0x3001
		f[u] = (uint16_t)mq_montymul(f[u], R2);
 801151e:	f832 1f02 	ldrh.w	r1, [r2, #2]!
	w = ((z * Q0I) & 0xFFFF) * Q;
 8011522:	4b91      	ldr	r3, [pc, #580]	; (8011768 <Thread1+0x6d8>)
 8011524:	fb03 f301 	mul.w	r3, r3, r1
 8011528:	b29b      	uxth	r3, r3
 801152a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 801152e:	eb03 3300 	add.w	r3, r3, r0, lsl #12
	z = (z + w) >> 16;
 8011532:	fb06 3301 	mla	r3, r6, r1, r3
	z -= Q;
 8011536:	eb05 4313 	add.w	r3, r5, r3, lsr #16
	z += Q & -(z >> 31);
 801153a:	ea04 71e3 	and.w	r1, r4, r3, asr #31
 801153e:	440b      	add	r3, r1
		f[u] = (uint16_t)mq_montymul(f[u], R2);
 8011540:	8013      	strh	r3, [r2, #0]
	for (u = 0; u < n; u ++) {
 8011542:	4b8a      	ldr	r3, [pc, #552]	; (801176c <Thread1+0x6dc>)
 8011544:	4293      	cmp	r3, r2
 8011546:	d1ea      	bne.n	801151e <Thread1+0x48e>
 8011548:	f5a3 6180 	sub.w	r1, r3, #1024	; 0x400
	z -= Q;
 801154c:	f46f 5440 	mvn.w	r4, #12288	; 0x3000
	z += Q & -(z >> 31);
 8011550:	f243 0001 	movw	r0, #12289	; 0x3001
		f[u] = (uint16_t)mq_montymul(f[u], g[u]);
 8011554:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8011558:	f8b1 3400 	ldrh.w	r3, [r1, #1024]	; 0x400
	z = x * y;
 801155c:	fb03 f202 	mul.w	r2, r3, r2
	w = ((z * Q0I) & 0xFFFF) * Q;
 8011560:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8011564:	ebc2 3303 	rsb	r3, r2, r3, lsl #12
 8011568:	b29b      	uxth	r3, r3
 801156a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 801156e:	eb03 3305 	add.w	r3, r3, r5, lsl #12
	z = (z + w) >> 16;
 8011572:	4413      	add	r3, r2
	z -= Q;
 8011574:	eb04 4313 	add.w	r3, r4, r3, lsr #16
	z += Q & -(z >> 31);
 8011578:	ea00 72e3 	and.w	r2, r0, r3, asr #31
 801157c:	4413      	add	r3, r2
		f[u] = (uint16_t)mq_montymul(f[u], g[u]);
 801157e:	800b      	strh	r3, [r1, #0]
	for (u = 0; u < n; u ++) {
 8011580:	4b7a      	ldr	r3, [pc, #488]	; (801176c <Thread1+0x6dc>)
 8011582:	428b      	cmp	r3, r1
 8011584:	d1e6      	bne.n	8011554 <Thread1+0x4c4>
 8011586:	4a7a      	ldr	r2, [pc, #488]	; (8011770 <Thread1+0x6e0>)
 8011588:	4618      	mov	r0, r3
	y += Q & -(y >> 31);
 801158a:	f243 0401 	movw	r4, #12289	; 0x3001
	mq_poly_tomonty(t1, logn);
	mq_poly_montymul_ntt(t1, t2, logn);
	for (u = 0; u < n; u ++) {
		t2[u] = (uint16_t)mq_conv_small(f[u]);
 801158e:	f912 1f01 	ldrsb.w	r1, [r2, #1]!
	y += Q & -(y >> 31);
 8011592:	ea04 73e1 	and.w	r3, r4, r1, asr #31
 8011596:	440b      	add	r3, r1
		t2[u] = (uint16_t)mq_conv_small(f[u]);
 8011598:	f820 3f02 	strh.w	r3, [r0, #2]!
	for (u = 0; u < n; u ++) {
 801159c:	4b75      	ldr	r3, [pc, #468]	; (8011774 <Thread1+0x6e4>)
 801159e:	4293      	cmp	r3, r2
 80115a0:	d1f5      	bne.n	801158e <Thread1+0x4fe>
	}
	mq_NTT(t2, logn);
 80115a2:	4870      	ldr	r0, [pc, #448]	; (8011764 <Thread1+0x6d4>)
 80115a4:	4c6e      	ldr	r4, [pc, #440]	; (8011760 <Thread1+0x6d0>)
 80115a6:	f001 f88b 	bl	80126c0 <mq_NTT.constprop.0>
	for (u = 0; u < n; u ++) {
		if (t2[u] == 0) {
 80115aa:	f8b4 1400 	ldrh.w	r1, [r4, #1024]	; 0x400
 80115ae:	2900      	cmp	r1, #0
 80115b0:	f000 843a 	beq.w	8011e28 <Thread1+0xd98>
			return 0;
		}
		t1[u] = (uint16_t)mq_div_12289(t1[u], t2[u]);
 80115b4:	8820      	ldrh	r0, [r4, #0]
 80115b6:	f7f8 fd63 	bl	800a080 <mq_div_12289>
	for (u = 0; u < n; u ++) {
 80115ba:	4b6a      	ldr	r3, [pc, #424]	; (8011764 <Thread1+0x6d4>)
		t1[u] = (uint16_t)mq_div_12289(t1[u], t2[u]);
 80115bc:	f824 0b02 	strh.w	r0, [r4], #2
	for (u = 0; u < n; u ++) {
 80115c0:	42a3      	cmp	r3, r4
 80115c2:	d1f2      	bne.n	80115aa <Thread1+0x51a>
	}
	mq_iNTT(t1, logn);
 80115c4:	f5a3 6080 	sub.w	r0, r3, #1024	; 0x400
 80115c8:	f001 f8ea 	bl	80127a0 <mq_iNTT.constprop.0>
 80115cc:	4964      	ldr	r1, [pc, #400]	; (8011760 <Thread1+0x6d0>)
 80115ce:	486a      	ldr	r0, [pc, #424]	; (8011778 <Thread1+0x6e8>)
	for (u = 0; u < n; u ++) {
		uint32_t w;
		int32_t gi;

		w = t1[u];
		w -= (Q & ~-((w - (Q >> 1)) >> 31));
 80115d0:	f243 0401 	movw	r4, #12289	; 0x3001
		w = t1[u];
 80115d4:	f831 2b02 	ldrh.w	r2, [r1], #2
		w -= (Q & ~-((w - (Q >> 1)) >> 31));
 80115d8:	f5a2 53c0 	sub.w	r3, r2, #6144	; 0x1800
 80115dc:	17db      	asrs	r3, r3, #31
 80115de:	ea24 0303 	bic.w	r3, r4, r3
 80115e2:	1ad2      	subs	r2, r2, r3
		gi = *(int32_t *)&w;
		if (gi < -127 || gi > +127) {
 80115e4:	f102 037f 	add.w	r3, r2, #127	; 0x7f
 80115e8:	2bfe      	cmp	r3, #254	; 0xfe
 80115ea:	f200 841d 	bhi.w	8011e28 <Thread1+0xd98>
	for (u = 0; u < n; u ++) {
 80115ee:	4b5d      	ldr	r3, [pc, #372]	; (8011764 <Thread1+0x6d4>)
			return 0;
		}
		G[u] = (int8_t)gi;
 80115f0:	f800 2b01 	strb.w	r2, [r0], #1
	for (u = 0; u < n; u ++) {
 80115f4:	428b      	cmp	r3, r1
 80115f6:	d1ed      	bne.n	80115d4 <Thread1+0x544>
			process_block(sc->st.A);
 80115f8:	4f60      	ldr	r7, [pc, #384]	; (801177c <Thread1+0x6ec>)
	}

	/*
	 * Create a random nonce (40 bytes).
	 */
	randombytes(nonce, sizeof nonce);
 80115fa:	4861      	ldr	r0, [pc, #388]	; (8011780 <Thread1+0x6f0>)
	sc->dptr = 136;
 80115fc:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8011784 <Thread1+0x6f4>
 8011600:	2300      	movs	r3, #0
 8011602:	2228      	movs	r2, #40	; 0x28
 8011604:	f002 f8e4 	bl	80137d0 <randombytes.isra.0>
	sc->dptr = 0;
 8011608:	2500      	movs	r5, #0
	memset(sc->st.A, 0, sizeof sc->st.A);
 801160a:	22c8      	movs	r2, #200	; 0xc8
 801160c:	2100      	movs	r1, #0
 801160e:	4638      	mov	r0, r7
	sc->dptr = 0;
 8011610:	2600      	movs	r6, #0
 8011612:	e9c7 5632 	strd	r5, r6, [r7, #200]	; 0xc8
	memset(sc->st.A, 0, sizeof sc->st.A);
 8011616:	f003 fae9 	bl	8014bec <memset>

	/*
	 * Hash message nonce + message into a vector.
	 */
	inner_shake256_init(&sc);
	inner_shake256_inject(&sc, nonce, sizeof nonce);
 801161a:	4959      	ldr	r1, [pc, #356]	; (8011780 <Thread1+0x6f0>)
 801161c:	4638      	mov	r0, r7
 801161e:	2228      	movs	r2, #40	; 0x28
 8011620:	f7f8 fcf6 	bl	800a010 <falcon_inner_i_shake256_inject>
	inner_shake256_inject(&sc, m, mlen);
 8011624:	2210      	movs	r2, #16
 8011626:	4638      	mov	r0, r7
 8011628:	a90d      	add	r1, sp, #52	; 0x34
 801162a:	f7f8 fcf1 	bl	800a010 <falcon_inner_i_shake256_inject>
	sc->st.dbuf[sc->dptr] ^= 0x1F;
 801162e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011632:	5cbb      	ldrb	r3, [r7, r2]
 8011634:	f083 031f 	eor.w	r3, r3, #31
 8011638:	54bb      	strb	r3, [r7, r2]
	sc->st.dbuf[135] ^= 0x80;
 801163a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801163e:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8011642:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	sc->dptr = 136;
 8011646:	2288      	movs	r2, #136	; 0x88
 8011648:	2300      	movs	r3, #0
 801164a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	 * nonce, the hashed output cannot be matched against potential
	 * plaintexts).
	 */
	size_t n;

	n = (size_t)1 << logn;
 801164e:	f44f 7400 	mov.w	r4, #512	; 0x200
		uint8_t buf[2];
		uint32_t w;

		inner_shake256_extract(sc, (void *)buf, sizeof buf);
		w = ((unsigned)buf[0] << 8) | (unsigned)buf[1];
		if (w < 61445) {
 8011652:	f24f 0a04 	movw	sl, #61444	; 0xf004
			while (w >= 12289) {
				w -= 12289;
 8011656:	f46f 5940 	mvn.w	r9, #12288	; 0x3000
 801165a:	2588      	movs	r5, #136	; 0x88
	dptr = (size_t)sc->dptr;
 801165c:	f50d 7b3e 	add.w	fp, sp, #760	; 0x2f8
 8011660:	2602      	movs	r6, #2
 8011662:	e00d      	b.n	8011680 <Thread1+0x5f0>
		memcpy(out, sc->st.dbuf + dptr, clen);
 8011664:	4b45      	ldr	r3, [pc, #276]	; (801177c <Thread1+0x6ec>)
		clen = 136 - dptr;
 8011666:	f1c5 0288 	rsb	r2, r5, #136	; 0x88
		memcpy(out, sc->st.dbuf + dptr, clen);
 801166a:	1959      	adds	r1, r3, r5
		if (clen > len) {
 801166c:	42b2      	cmp	r2, r6
 801166e:	bf28      	it	cs
 8011670:	4632      	movcs	r2, r6
		len -= clen;
 8011672:	1ab6      	subs	r6, r6, r2
		memcpy(out, sc->st.dbuf + dptr, clen);
 8011674:	4658      	mov	r0, fp
		dptr += clen;
 8011676:	4415      	add	r5, r2
		out += clen;
 8011678:	4493      	add	fp, r2
		memcpy(out, sc->st.dbuf + dptr, clen);
 801167a:	f003 fb03 	bl	8014c84 <memcpy>
	while (len > 0) {
 801167e:	b146      	cbz	r6, 8011692 <Thread1+0x602>
		if (dptr == 136) {
 8011680:	2d88      	cmp	r5, #136	; 0x88
 8011682:	d1ef      	bne.n	8011664 <Thread1+0x5d4>
			process_block(sc->st.A);
 8011684:	4638      	mov	r0, r7
 8011686:	f7f8 f863 	bl	8009750 <process_block>
 801168a:	462a      	mov	r2, r5
 801168c:	4639      	mov	r1, r7
			dptr = 0;
 801168e:	2500      	movs	r5, #0
 8011690:	e7ec      	b.n	801166c <Thread1+0x5dc>
	sc->dptr = dptr;
 8011692:	4b3a      	ldr	r3, [pc, #232]	; (801177c <Thread1+0x6ec>)
 8011694:	e9c3 5632 	strd	r5, r6, [r3, #200]	; 0xc8
 8011698:	f8bd 32f8 	ldrh.w	r3, [sp, #760]	; 0x2f8
 801169c:	ba5b      	rev16	r3, r3
 801169e:	b29b      	uxth	r3, r3
		if (w < 61445) {
 80116a0:	4553      	cmp	r3, sl
 80116a2:	461a      	mov	r2, r3
 80116a4:	d8da      	bhi.n	801165c <Thread1+0x5cc>
			while (w >= 12289) {
 80116a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80116aa:	d904      	bls.n	80116b6 <Thread1+0x626>
				w -= 12289;
 80116ac:	444a      	add	r2, r9
			while (w >= 12289) {
 80116ae:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80116b2:	d8fb      	bhi.n	80116ac <Thread1+0x61c>
			}
			*x ++ = (uint16_t)w;
 80116b4:	b293      	uxth	r3, r2
	while (n > 0) {
 80116b6:	3c01      	subs	r4, #1
			*x ++ = (uint16_t)w;
 80116b8:	f828 3b02 	strh.w	r3, [r8], #2
	while (n > 0) {
 80116bc:	d1ce      	bne.n	801165c <Thread1+0x5cc>
 80116be:	4b2e      	ldr	r3, [pc, #184]	; (8011778 <Thread1+0x6e8>)
	Zf(hash_to_point_vartime)(&sc, r.hm, 9);

	/*
	 * Initialize a RNG.
	 */
	randombytes(seed, sizeof seed);
 80116c0:	4831      	ldr	r0, [pc, #196]	; (8011788 <Thread1+0x6f8>)
 80116c2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80116c6:	9306      	str	r3, [sp, #24]
 80116c8:	4b25      	ldr	r3, [pc, #148]	; (8011760 <Thread1+0x6d0>)
 80116ca:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80116ce:	9309      	str	r3, [sp, #36]	; 0x24
 80116d0:	2230      	movs	r2, #48	; 0x30
 80116d2:	2300      	movs	r3, #0
 80116d4:	f002 f87c 	bl	80137d0 <randombytes.isra.0>
	memset(sc->st.A, 0, sizeof sc->st.A);
 80116d8:	4828      	ldr	r0, [pc, #160]	; (801177c <Thread1+0x6ec>)
 80116da:	4621      	mov	r1, r4
	sc->dptr = 0;
 80116dc:	4606      	mov	r6, r0
	memset(sc->st.A, 0, sizeof sc->st.A);
 80116de:	22c8      	movs	r2, #200	; 0xc8
	sc->dptr = 0;
 80116e0:	2400      	movs	r4, #0
 80116e2:	2500      	movs	r5, #0
 80116e4:	e9c0 4532 	strd	r4, r5, [r0, #200]	; 0xc8
	memset(sc->st.A, 0, sizeof sc->st.A);
 80116e8:	f003 fa80 	bl	8014bec <memset>
	inner_shake256_init(&sc);
	inner_shake256_inject(&sc, seed, sizeof seed);
 80116ec:	2230      	movs	r2, #48	; 0x30
 80116ee:	4926      	ldr	r1, [pc, #152]	; (8011788 <Thread1+0x6f8>)
 80116f0:	4630      	mov	r0, r6
 80116f2:	f7f8 fc8d 	bl	800a010 <falcon_inner_i_shake256_inject>
	sc->st.dbuf[sc->dptr] ^= 0x1F;
 80116f6:	f8d6 20c8 	ldr.w	r2, [r6, #200]	; 0xc8
 80116fa:	5cb3      	ldrb	r3, [r6, r2]
 80116fc:	f083 031f 	eor.w	r3, r3, #31
 8011700:	54b3      	strb	r3, [r6, r2]
	sc->st.dbuf[135] ^= 0x80;
 8011702:	f896 3087 	ldrb.w	r3, [r6, #135]	; 0x87
 8011706:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 801170a:	f886 3087 	strb.w	r3, [r6, #135]	; 0x87
	sc->dptr = 136;
 801170e:	2288      	movs	r2, #136	; 0x88
 8011710:	2300      	movs	r3, #0
 8011712:	e9c6 2332 	strd	r2, r3, [r6, #200]	; 0xc8
}
 8011716:	2488      	movs	r4, #136	; 0x88

		/*
		 * Normal sampling. We use a fast PRNG seeded from our
		 * SHAKE context ('rng').
		 */
		spc.sigma_min = fpr_sigma_min[logn];
 8011718:	a307      	add	r3, pc, #28	; (adr r3, 8011738 <Thread1+0x6a8>)
 801171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801171e:	f50d 61c1 	add.w	r1, sp, #1544	; 0x608
 8011722:	e9c1 2300 	strd	r2, r3, [r1]
	dptr = (size_t)sc->dptr;
 8011726:	2338      	movs	r3, #56	; 0x38
			process_block(sc->st.A);
 8011728:	4e14      	ldr	r6, [pc, #80]	; (801177c <Thread1+0x6ec>)
	dptr = (size_t)sc->dptr;
 801172a:	f50d 65a0 	add.w	r5, sp, #1280	; 0x500
 801172e:	461f      	mov	r7, r3
 8011730:	e03a      	b.n	80117a8 <Thread1+0x718>
 8011732:	bf00      	nop
 8011734:	f3af 8000 	nop.w
 8011738:	bf1f7a75 	.word	0xbf1f7a75
 801173c:	3ff47201 	.word	0x3ff47201
 8011740:	20000938 	.word	0x20000938
 8011744:	200026b8 	.word	0x200026b8
 8011748:	20002ab8 	.word	0x20002ab8
 801174c:	20001d00 	.word	0x20001d00
 8011750:	20001cff 	.word	0x20001cff
 8011754:	20002ab7 	.word	0x20002ab7
 8011758:	200038de 	.word	0x200038de
 801175c:	20002cb7 	.word	0x20002cb7
 8011760:	200038e0 	.word	0x200038e0
 8011764:	20003ce0 	.word	0x20003ce0
 8011768:	08055538 	.word	0x08055538
 801176c:	20003cde 	.word	0x20003cde
 8011770:	200026b7 	.word	0x200026b7
 8011774:	200028b7 	.word	0x200028b7
 8011778:	20002100 	.word	0x20002100
 801177c:	200037b0 	.word	0x200037b0
 8011780:	200032b8 	.word	0x200032b8
 8011784:	200032e0 	.word	0x200032e0
 8011788:	200038b0 	.word	0x200038b0
		memcpy(out, sc->st.dbuf + dptr, clen);
 801178c:	4b0b      	ldr	r3, [pc, #44]	; (80117bc <Thread1+0x72c>)
		clen = 136 - dptr;
 801178e:	f1c4 0288 	rsb	r2, r4, #136	; 0x88
		memcpy(out, sc->st.dbuf + dptr, clen);
 8011792:	1919      	adds	r1, r3, r4
		if (clen > len) {
 8011794:	42ba      	cmp	r2, r7
 8011796:	bf28      	it	cs
 8011798:	463a      	movcs	r2, r7
		len -= clen;
 801179a:	1abf      	subs	r7, r7, r2
		memcpy(out, sc->st.dbuf + dptr, clen);
 801179c:	4628      	mov	r0, r5
		dptr += clen;
 801179e:	4414      	add	r4, r2
		out += clen;
 80117a0:	4415      	add	r5, r2
		memcpy(out, sc->st.dbuf + dptr, clen);
 80117a2:	f003 fa6f 	bl	8014c84 <memcpy>
	while (len > 0) {
 80117a6:	b15f      	cbz	r7, 80117c0 <Thread1+0x730>
		if (dptr == 136) {
 80117a8:	2c88      	cmp	r4, #136	; 0x88
 80117aa:	d1ef      	bne.n	801178c <Thread1+0x6fc>
			process_block(sc->st.A);
 80117ac:	4630      	mov	r0, r6
 80117ae:	f7f7 ffcf 	bl	8009750 <process_block>
 80117b2:	4622      	mov	r2, r4
 80117b4:	4631      	mov	r1, r6
			dptr = 0;
 80117b6:	2400      	movs	r4, #0
 80117b8:	e7ec      	b.n	8011794 <Thread1+0x704>
 80117ba:	bf00      	nop
 80117bc:	200037b0 	.word	0x200037b0
	sc->dptr = dptr;
 80117c0:	4bb5      	ldr	r3, [pc, #724]	; (8011a98 <Thread1+0xa08>)
 80117c2:	970a      	str	r7, [sp, #40]	; 0x28
	Zf(prng_refill)(p);
 80117c4:	a8be      	add	r0, sp, #760	; 0x2f8
 80117c6:	e9c3 4732 	strd	r4, r7, [r3, #200]	; 0xc8
 80117ca:	4cb4      	ldr	r4, [pc, #720]	; (8011a9c <Thread1+0xa0c>)
 80117cc:	4db4      	ldr	r5, [pc, #720]	; (8011aa0 <Thread1+0xa10>)
 80117ce:	f7f9 fb87 	bl	800aee0 <falcon_inner_prng_refill>
 80117d2:	4626      	mov	r6, r4
		r[u] = fpr_of(t[u]);
 80117d4:	f915 0f01 	ldrsb.w	r0, [r5, #1]!
	return fpr_scaled(i, 0);
 80117d8:	2200      	movs	r2, #0
 80117da:	17c1      	asrs	r1, r0, #31
 80117dc:	f7fa fb40 	bl	800be60 <falcon_inner_fpr_scaled>
	for (u = 0; u < n; u ++) {
 80117e0:	4bb0      	ldr	r3, [pc, #704]	; (8011aa4 <Thread1+0xa14>)
 80117e2:	42ab      	cmp	r3, r5
		r[u] = fpr_of(t[u]);
 80117e4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
	for (u = 0; u < n; u ++) {
 80117e8:	d1f4      	bne.n	80117d4 <Thread1+0x744>
 80117ea:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8011aa8 <Thread1+0xa18>
 80117ee:	4daf      	ldr	r5, [pc, #700]	; (8011aac <Thread1+0xa1c>)
 80117f0:	464e      	mov	r6, r9
		r[u] = fpr_of(t[u]);
 80117f2:	f915 0f01 	ldrsb.w	r0, [r5, #1]!
 80117f6:	2200      	movs	r2, #0
 80117f8:	17c1      	asrs	r1, r0, #31
 80117fa:	f7fa fb31 	bl	800be60 <falcon_inner_fpr_scaled>
	for (u = 0; u < n; u ++) {
 80117fe:	4bac      	ldr	r3, [pc, #688]	; (8011ab0 <Thread1+0xa20>)
 8011800:	42ab      	cmp	r3, r5
		r[u] = fpr_of(t[u]);
 8011802:	e9e6 0102 	strd	r0, r1, [r6, #8]!
	for (u = 0; u < n; u ++) {
 8011806:	d1f4      	bne.n	80117f2 <Thread1+0x762>
 8011808:	4daa      	ldr	r5, [pc, #680]	; (8011ab4 <Thread1+0xa24>)
 801180a:	4eab      	ldr	r6, [pc, #684]	; (8011ab8 <Thread1+0xa28>)
 801180c:	462f      	mov	r7, r5
		r[u] = fpr_of(t[u]);
 801180e:	f916 0f01 	ldrsb.w	r0, [r6, #1]!
 8011812:	2200      	movs	r2, #0
 8011814:	17c1      	asrs	r1, r0, #31
 8011816:	f7fa fb23 	bl	800be60 <falcon_inner_fpr_scaled>
	for (u = 0; u < n; u ++) {
 801181a:	4ba8      	ldr	r3, [pc, #672]	; (8011abc <Thread1+0xa2c>)
 801181c:	42b3      	cmp	r3, r6
		r[u] = fpr_of(t[u]);
 801181e:	e9e7 0102 	strd	r0, r1, [r7, #8]!
	for (u = 0; u < n; u ++) {
 8011822:	d1f4      	bne.n	801180e <Thread1+0x77e>
 8011824:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8011ac0 <Thread1+0xa30>
 8011828:	f8df a298 	ldr.w	sl, [pc, #664]	; 8011ac4 <Thread1+0xa34>
 801182c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8011830:	4646      	mov	r6, r8
 8011832:	4657      	mov	r7, sl
		r[u] = fpr_of(t[u]);
 8011834:	f916 0f01 	ldrsb.w	r0, [r6, #1]!
 8011838:	2200      	movs	r2, #0
 801183a:	17c1      	asrs	r1, r0, #31
 801183c:	f7fa fb10 	bl	800be60 <falcon_inner_fpr_scaled>
	for (u = 0; u < n; u ++) {
 8011840:	45b3      	cmp	fp, r6
		r[u] = fpr_of(t[u]);
 8011842:	e9e7 0102 	strd	r0, r1, [r7, #8]!
	for (u = 0; u < n; u ++) {
 8011846:	d1f5      	bne.n	8011834 <Thread1+0x7a4>
	Zf(FFT)(b01, logn);
 8011848:	489f      	ldr	r0, [pc, #636]	; (8011ac8 <Thread1+0xa38>)
 801184a:	2109      	movs	r1, #9
 801184c:	f7fa ff18 	bl	800c680 <falcon_inner_FFT>
	Zf(FFT)(b00, logn);
 8011850:	489e      	ldr	r0, [pc, #632]	; (8011acc <Thread1+0xa3c>)
 8011852:	2109      	movs	r1, #9
 8011854:	f7fa ff14 	bl	800c680 <falcon_inner_FFT>
	Zf(FFT)(b11, logn);
 8011858:	489d      	ldr	r0, [pc, #628]	; (8011ad0 <Thread1+0xa40>)
 801185a:	2109      	movs	r1, #9
 801185c:	f7fa ff10 	bl	800c680 <falcon_inner_FFT>
	Zf(FFT)(b10, logn);
 8011860:	489c      	ldr	r0, [pc, #624]	; (8011ad4 <Thread1+0xa44>)
 8011862:	2109      	movs	r1, #9
 8011864:	f7fa ff0c 	bl	800c680 <falcon_inner_FFT>
 8011868:	4b8c      	ldr	r3, [pc, #560]	; (8011a9c <Thread1+0xa0c>)
	x ^= (uint64_t)1 << 63;
 801186a:	68da      	ldr	r2, [r3, #12]
 801186c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
		a[u] = fpr_neg(a[u]);
 8011870:	60da      	str	r2, [r3, #12]
	for (u = 0; u < n; u ++) {
 8011872:	4a94      	ldr	r2, [pc, #592]	; (8011ac4 <Thread1+0xa34>)
		a[u] = fpr_neg(a[u]);
 8011874:	3308      	adds	r3, #8
	for (u = 0; u < n; u ++) {
 8011876:	429a      	cmp	r2, r3
 8011878:	d1f7      	bne.n	801186a <Thread1+0x7da>
 801187a:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 801187e:	68da      	ldr	r2, [r3, #12]
 8011880:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
		a[u] = fpr_neg(a[u]);
 8011884:	60da      	str	r2, [r3, #12]
	for (u = 0; u < n; u ++) {
 8011886:	4a94      	ldr	r2, [pc, #592]	; (8011ad8 <Thread1+0xa48>)
		a[u] = fpr_neg(a[u]);
 8011888:	3308      	adds	r3, #8
	for (u = 0; u < n; u ++) {
 801188a:	429a      	cmp	r2, r3
 801188c:	d1f7      	bne.n	801187e <Thread1+0x7ee>
	memcpy(t0, b01, n * sizeof *b01);
 801188e:	498e      	ldr	r1, [pc, #568]	; (8011ac8 <Thread1+0xa38>)
 8011890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011894:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 8011898:	f003 f9f4 	bl	8014c84 <memcpy>
	Zf(poly_mulselfadj_fft)(t0, logn);    // t0 <- b01*adj(b01)
 801189c:	488f      	ldr	r0, [pc, #572]	; (8011adc <Thread1+0xa4c>)
 801189e:	f002 f9af 	bl	8013c00 <falcon_inner_poly_mulselfadj_fft.constprop.0>
	memcpy(t1, b00, n * sizeof *b00);
 80118a2:	488f      	ldr	r0, [pc, #572]	; (8011ae0 <Thread1+0xa50>)
 80118a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80118a8:	f5a0 41a0 	sub.w	r1, r0, #20480	; 0x5000
 80118ac:	f003 f9ea 	bl	8014c84 <memcpy>
	Zf(poly_muladj_fft)(t1, b10, logn);   // t1 <- b00*adj(b10)
 80118b0:	4988      	ldr	r1, [pc, #544]	; (8011ad4 <Thread1+0xa44>)
 80118b2:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 80118b6:	f002 f953 	bl	8013b60 <falcon_inner_poly_muladj_fft.constprop.0>
	Zf(poly_mulselfadj_fft)(b00, logn);   // b00 <- b00*adj(b00)
 80118ba:	4884      	ldr	r0, [pc, #528]	; (8011acc <Thread1+0xa3c>)
 80118bc:	f002 f9a0 	bl	8013c00 <falcon_inner_poly_mulselfadj_fft.constprop.0>
Zf(poly_add)(
 80118c0:	4b85      	ldr	r3, [pc, #532]	; (8011ad8 <Thread1+0xa48>)
 80118c2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80118c6:	9307      	str	r3, [sp, #28]
 80118c8:	461f      	mov	r7, r3
 80118ca:	f5a3 4680 	sub.w	r6, r3, #16384	; 0x4000
		a[u] = fpr_add(a[u], b[u]);
 80118ce:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 80118d2:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
 80118d6:	f7fa fb0b 	bl	800bef0 <falcon_inner_fpr_add>
	for (u = 0; u < n; u ++) {
 80118da:	45b3      	cmp	fp, r6
		a[u] = fpr_add(a[u], b[u]);
 80118dc:	e9c6 0100 	strd	r0, r1, [r6]
	for (u = 0; u < n; u ++) {
 80118e0:	d1f5      	bne.n	80118ce <Thread1+0x83e>
	memcpy(t0, b01, n * sizeof *b01);
 80118e2:	487e      	ldr	r0, [pc, #504]	; (8011adc <Thread1+0xa4c>)
 80118e4:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011ae4 <Thread1+0xa54>
 80118e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80118ec:	f5a0 5140 	sub.w	r1, r0, #12288	; 0x3000
 80118f0:	f003 f9c8 	bl	8014c84 <memcpy>
	Zf(poly_muladj_fft)(b01, b11, logn);  // b01 <- b01*adj(b11)
 80118f4:	4976      	ldr	r1, [pc, #472]	; (8011ad0 <Thread1+0xa40>)
 80118f6:	f5a1 5000 	sub.w	r0, r1, #8192	; 0x2000
 80118fa:	f002 f931 	bl	8013b60 <falcon_inner_poly_muladj_fft.constprop.0>
 80118fe:	465f      	mov	r7, fp
 8011900:	f5ab 4680 	sub.w	r6, fp, #16384	; 0x4000
		a[u] = fpr_add(a[u], b[u]);
 8011904:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 8011908:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
 801190c:	f7fa faf0 	bl	800bef0 <falcon_inner_fpr_add>
	for (u = 0; u < n; u ++) {
 8011910:	4b6c      	ldr	r3, [pc, #432]	; (8011ac4 <Thread1+0xa34>)
 8011912:	42b3      	cmp	r3, r6
		a[u] = fpr_add(a[u], b[u]);
 8011914:	e9c6 0100 	strd	r0, r1, [r6]
	for (u = 0; u < n; u ++) {
 8011918:	d1f4      	bne.n	8011904 <Thread1+0x874>
	Zf(poly_mulselfadj_fft)(b10, logn);   // b10 <- b10*adj(b10)
 801191a:	f103 0008 	add.w	r0, r3, #8
 801191e:	f002 f96f 	bl	8013c00 <falcon_inner_poly_mulselfadj_fft.constprop.0>
	memcpy(t1, b11, n * sizeof *b11);
 8011922:	496b      	ldr	r1, [pc, #428]	; (8011ad0 <Thread1+0xa40>)
	Zf(poly_mulselfadj_fft)(t1, logn);    // t1 <- b11*adj(b11)
 8011924:	4e67      	ldr	r6, [pc, #412]	; (8011ac4 <Thread1+0xa34>)
	memcpy(t1, b11, n * sizeof *b11);
 8011926:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801192a:	f501 5000 	add.w	r0, r1, #8192	; 0x2000
 801192e:	f003 f9a9 	bl	8014c84 <memcpy>
	Zf(poly_mulselfadj_fft)(t1, logn);    // t1 <- b11*adj(b11)
 8011932:	486b      	ldr	r0, [pc, #428]	; (8011ae0 <Thread1+0xa50>)
 8011934:	f002 f964 	bl	8013c00 <falcon_inner_poly_mulselfadj_fft.constprop.0>
 8011938:	465f      	mov	r7, fp
		a[u] = fpr_add(a[u], b[u]);
 801193a:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 801193e:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
 8011942:	f7fa fad5 	bl	800bef0 <falcon_inner_fpr_add>
	for (u = 0; u < n; u ++) {
 8011946:	4b5b      	ldr	r3, [pc, #364]	; (8011ab4 <Thread1+0xa24>)
 8011948:	42b3      	cmp	r3, r6
		a[u] = fpr_add(a[u], b[u]);
 801194a:	e9c6 0100 	strd	r0, r1, [r6]
	for (u = 0; u < n; u ++) {
 801194e:	d1f4      	bne.n	801193a <Thread1+0x8aa>
 8011950:	4e65      	ldr	r6, [pc, #404]	; (8011ae8 <Thread1+0xa58>)
 8011952:	9608      	str	r6, [sp, #32]
 8011954:	1cb3      	adds	r3, r6, #2
 8011956:	465f      	mov	r7, fp
 8011958:	930b      	str	r3, [sp, #44]	; 0x2c
	return fpr_scaled(i, 0);
 801195a:	2200      	movs	r2, #0
 801195c:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 8011960:	4611      	mov	r1, r2
 8011962:	f7fa fa7d 	bl	800be60 <falcon_inner_fpr_scaled>
	for (u = 0; u < n; u ++) {
 8011966:	4b61      	ldr	r3, [pc, #388]	; (8011aec <Thread1+0xa5c>)
 8011968:	42b3      	cmp	r3, r6
		t0[u] = fpr_of(hm[u]);
 801196a:	e9e7 0102 	strd	r0, r1, [r7, #8]!
	for (u = 0; u < n; u ++) {
 801196e:	d1f4      	bne.n	801195a <Thread1+0x8ca>
	Zf(FFT)(t0, logn);
 8011970:	485b      	ldr	r0, [pc, #364]	; (8011ae0 <Thread1+0xa50>)
 8011972:	4e5f      	ldr	r6, [pc, #380]	; (8011af0 <Thread1+0xa60>)
 8011974:	2109      	movs	r1, #9
 8011976:	f7fa fe83 	bl	800c680 <falcon_inner_FFT>
	memcpy(t1, t0, n * sizeof *t0);
 801197a:	4959      	ldr	r1, [pc, #356]	; (8011ae0 <Thread1+0xa50>)
 801197c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011980:	1888      	adds	r0, r1, r2
 8011982:	f003 f97f 	bl	8014c84 <memcpy>
	Zf(poly_mul_fft)(t1, b01, logn);
 8011986:	4955      	ldr	r1, [pc, #340]	; (8011adc <Thread1+0xa4c>)
 8011988:	2209      	movs	r2, #9
 801198a:	f501 5000 	add.w	r0, r1, #8192	; 0x2000
 801198e:	f7fb f857 	bl	800ca40 <falcon_inner_poly_mul_fft>
 8011992:	4637      	mov	r7, r6
		a[u] = fpr_mul(a[u], x);
 8011994:	e9f7 0102 	ldrd	r0, r1, [r7, #8]!
 8011998:	a33b      	add	r3, pc, #236	; (adr r3, 8011a88 <Thread1+0x9f8>)
 801199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199e:	f7fa fb5f 	bl	800c060 <falcon_inner_fpr_mul>
	for (u = 0; u < n; u ++) {
 80119a2:	4b54      	ldr	r3, [pc, #336]	; (8011af4 <Thread1+0xa64>)
 80119a4:	42bb      	cmp	r3, r7
		a[u] = fpr_mul(a[u], x);
 80119a6:	e9c7 0100 	strd	r0, r1, [r7]
	for (u = 0; u < n; u ++) {
 80119aa:	d1f3      	bne.n	8011994 <Thread1+0x904>
	Zf(poly_mul_fft)(t0, b11, logn);
 80119ac:	484c      	ldr	r0, [pc, #304]	; (8011ae0 <Thread1+0xa50>)
 80119ae:	2209      	movs	r2, #9
 80119b0:	f5a0 5100 	sub.w	r1, r0, #8192	; 0x2000
 80119b4:	f7fb f844 	bl	800ca40 <falcon_inner_poly_mul_fft>
 80119b8:	465f      	mov	r7, fp
		a[u] = fpr_mul(a[u], x);
 80119ba:	e9f7 0102 	ldrd	r0, r1, [r7, #8]!
 80119be:	a334      	add	r3, pc, #208	; (adr r3, 8011a90 <Thread1+0xa00>)
 80119c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c4:	f7fa fb4c 	bl	800c060 <falcon_inner_fpr_mul>
	for (u = 0; u < n; u ++) {
 80119c8:	4b49      	ldr	r3, [pc, #292]	; (8011af0 <Thread1+0xa60>)
 80119ca:	42bb      	cmp	r3, r7
		a[u] = fpr_mul(a[u], x);
 80119cc:	e9c7 0100 	strd	r0, r1, [r7]
	for (u = 0; u < n; u ++) {
 80119d0:	d1f3      	bne.n	80119ba <Thread1+0x92a>
	memcpy(b11, t0, n * 2 * sizeof *t0);
 80119d2:	f6a3 71f8 	subw	r1, r3, #4088	; 0xff8
 80119d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80119da:	f5a1 5000 	sub.w	r0, r1, #8192	; 0x2000
 80119de:	f003 f951 	bl	8014c84 <memcpy>
	ffSampling_fft_dyntree(samp, samp_ctx,
 80119e2:	4b3f      	ldr	r3, [pc, #252]	; (8011ae0 <Thread1+0xa50>)
 80119e4:	9303      	str	r3, [sp, #12]
 80119e6:	2309      	movs	r3, #9
 80119e8:	9302      	str	r3, [sp, #8]
 80119ea:	4b3a      	ldr	r3, [pc, #232]	; (8011ad4 <Thread1+0xa44>)
 80119ec:	9301      	str	r3, [sp, #4]
 80119ee:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80119f2:	f503 5240 	add.w	r2, r3, #12288	; 0x3000
 80119f6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80119fa:	9300      	str	r3, [sp, #0]
 80119fc:	a8be      	add	r0, sp, #760	; 0x2f8
 80119fe:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8011a02:	f002 f925 	bl	8013c50 <ffSampling_fft_dyntree.constprop.0>
	memmove(b11 + n, t0, n * 2 * sizeof *t0);
 8011a06:	4835      	ldr	r0, [pc, #212]	; (8011adc <Thread1+0xa4c>)
 8011a08:	4f25      	ldr	r7, [pc, #148]	; (8011aa0 <Thread1+0xa10>)
 8011a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011a0e:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 8011a12:	f003 f8d1 	bl	8014bb8 <memmove>
 8011a16:	4b21      	ldr	r3, [pc, #132]	; (8011a9c <Thread1+0xa0c>)
 8011a18:	9404      	str	r4, [sp, #16]
 8011a1a:	461c      	mov	r4, r3
		r[u] = fpr_of(t[u]);
 8011a1c:	f917 0f01 	ldrsb.w	r0, [r7, #1]!
 8011a20:	2200      	movs	r2, #0
 8011a22:	17c1      	asrs	r1, r0, #31
 8011a24:	f7fa fa1c 	bl	800be60 <falcon_inner_fpr_scaled>
	for (u = 0; u < n; u ++) {
 8011a28:	4b1e      	ldr	r3, [pc, #120]	; (8011aa4 <Thread1+0xa14>)
 8011a2a:	42bb      	cmp	r3, r7
		r[u] = fpr_of(t[u]);
 8011a2c:	e9e4 0102 	strd	r0, r1, [r4, #8]!
	for (u = 0; u < n; u ++) {
 8011a30:	d1f4      	bne.n	8011a1c <Thread1+0x98c>
 8011a32:	9c04      	ldr	r4, [sp, #16]
 8011a34:	4f1d      	ldr	r7, [pc, #116]	; (8011aac <Thread1+0xa1c>)
		r[u] = fpr_of(t[u]);
 8011a36:	f917 0f01 	ldrsb.w	r0, [r7, #1]!
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	17c1      	asrs	r1, r0, #31
 8011a3e:	f7fa fa0f 	bl	800be60 <falcon_inner_fpr_scaled>
	for (u = 0; u < n; u ++) {
 8011a42:	4b1b      	ldr	r3, [pc, #108]	; (8011ab0 <Thread1+0xa20>)
 8011a44:	42bb      	cmp	r3, r7
		r[u] = fpr_of(t[u]);
 8011a46:	e9e9 0102 	strd	r0, r1, [r9, #8]!
	for (u = 0; u < n; u ++) {
 8011a4a:	d1f4      	bne.n	8011a36 <Thread1+0x9a6>
 8011a4c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8011ab4 <Thread1+0xa24>
 8011a50:	4f19      	ldr	r7, [pc, #100]	; (8011ab8 <Thread1+0xa28>)
		r[u] = fpr_of(t[u]);
 8011a52:	f917 0f01 	ldrsb.w	r0, [r7, #1]!
 8011a56:	2200      	movs	r2, #0
 8011a58:	17c1      	asrs	r1, r0, #31
 8011a5a:	f7fa fa01 	bl	800be60 <falcon_inner_fpr_scaled>
	for (u = 0; u < n; u ++) {
 8011a5e:	4b17      	ldr	r3, [pc, #92]	; (8011abc <Thread1+0xa2c>)
 8011a60:	42bb      	cmp	r3, r7
		r[u] = fpr_of(t[u]);
 8011a62:	e9e9 0102 	strd	r0, r1, [r9, #8]!
	for (u = 0; u < n; u ++) {
 8011a66:	d1f4      	bne.n	8011a52 <Thread1+0x9c2>
 8011a68:	9f06      	ldr	r7, [sp, #24]
		r[u] = fpr_of(t[u]);
 8011a6a:	f918 0f01 	ldrsb.w	r0, [r8, #1]!
 8011a6e:	2200      	movs	r2, #0
 8011a70:	17c1      	asrs	r1, r0, #31
 8011a72:	f7fa f9f5 	bl	800be60 <falcon_inner_fpr_scaled>
	for (u = 0; u < n; u ++) {
 8011a76:	4547      	cmp	r7, r8
		r[u] = fpr_of(t[u]);
 8011a78:	e9ea 0102 	strd	r0, r1, [sl, #8]!
	for (u = 0; u < n; u ++) {
 8011a7c:	d1f5      	bne.n	8011a6a <Thread1+0x9da>
	Zf(FFT)(b01, logn);
 8011a7e:	4812      	ldr	r0, [pc, #72]	; (8011ac8 <Thread1+0xa38>)
 8011a80:	9706      	str	r7, [sp, #24]
 8011a82:	e039      	b.n	8011af8 <Thread1+0xa68>
 8011a84:	f3af 8000 	nop.w
 8011a88:	9097a782 	.word	0x9097a782
 8011a8c:	bf1554e3 	.word	0xbf1554e3
 8011a90:	9097a782 	.word	0x9097a782
 8011a94:	3f1554e3 	.word	0x3f1554e3
 8011a98:	200037b0 	.word	0x200037b0
 8011a9c:	200048d8 	.word	0x200048d8
 8011aa0:	200026b7 	.word	0x200026b7
 8011aa4:	200028b7 	.word	0x200028b7
 8011aa8:	200038d8 	.word	0x200038d8
 8011aac:	20002ab7 	.word	0x20002ab7
 8011ab0:	20002cb7 	.word	0x20002cb7
 8011ab4:	200068d8 	.word	0x200068d8
 8011ab8:	20001cff 	.word	0x20001cff
 8011abc:	20001eff 	.word	0x20001eff
 8011ac0:	200020ff 	.word	0x200020ff
 8011ac4:	200058d8 	.word	0x200058d8
 8011ac8:	200048e0 	.word	0x200048e0
 8011acc:	200038e0 	.word	0x200038e0
 8011ad0:	200068e0 	.word	0x200068e0
 8011ad4:	200058e0 	.word	0x200058e0
 8011ad8:	200078d8 	.word	0x200078d8
 8011adc:	200078e0 	.word	0x200078e0
 8011ae0:	200088e0 	.word	0x200088e0
 8011ae4:	200088d8 	.word	0x200088d8
 8011ae8:	200032de 	.word	0x200032de
 8011aec:	200036de 	.word	0x200036de
 8011af0:	200098d8 	.word	0x200098d8
 8011af4:	2000a8d8 	.word	0x2000a8d8
 8011af8:	2109      	movs	r1, #9
 8011afa:	f7fa fdc1 	bl	800c680 <falcon_inner_FFT>
	Zf(FFT)(b00, logn);
 8011afe:	48b9      	ldr	r0, [pc, #740]	; (8011de4 <Thread1+0xd54>)
 8011b00:	2109      	movs	r1, #9
 8011b02:	f7fa fdbd 	bl	800c680 <falcon_inner_FFT>
	Zf(FFT)(b11, logn);
 8011b06:	48b8      	ldr	r0, [pc, #736]	; (8011de8 <Thread1+0xd58>)
 8011b08:	2109      	movs	r1, #9
 8011b0a:	f7fa fdb9 	bl	800c680 <falcon_inner_FFT>
	Zf(FFT)(b10, logn);
 8011b0e:	48b7      	ldr	r0, [pc, #732]	; (8011dec <Thread1+0xd5c>)
 8011b10:	2109      	movs	r1, #9
 8011b12:	f7fa fdb5 	bl	800c680 <falcon_inner_FFT>
	x ^= (uint64_t)1 << 63;
 8011b16:	68e3      	ldr	r3, [r4, #12]
 8011b18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
		a[u] = fpr_neg(a[u]);
 8011b1c:	60e3      	str	r3, [r4, #12]
	for (u = 0; u < n; u ++) {
 8011b1e:	4bb4      	ldr	r3, [pc, #720]	; (8011df0 <Thread1+0xd60>)
		a[u] = fpr_neg(a[u]);
 8011b20:	3408      	adds	r4, #8
	for (u = 0; u < n; u ++) {
 8011b22:	42a3      	cmp	r3, r4
 8011b24:	d1f7      	bne.n	8011b16 <Thread1+0xa86>
 8011b26:	68eb      	ldr	r3, [r5, #12]
 8011b28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
		a[u] = fpr_neg(a[u]);
 8011b2c:	60eb      	str	r3, [r5, #12]
	for (u = 0; u < n; u ++) {
 8011b2e:	4bb1      	ldr	r3, [pc, #708]	; (8011df4 <Thread1+0xd64>)
		a[u] = fpr_neg(a[u]);
 8011b30:	3508      	adds	r5, #8
	for (u = 0; u < n; u ++) {
 8011b32:	42ab      	cmp	r3, r5
 8011b34:	d1f7      	bne.n	8011b26 <Thread1+0xa96>
	memcpy(tx, t0, n * sizeof *t0);
 8011b36:	f103 0108 	add.w	r1, r3, #8
 8011b3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011b3e:	f501 5000 	add.w	r0, r1, #8192	; 0x2000
 8011b42:	f003 f89f 	bl	8014c84 <memcpy>
	memcpy(ty, t1, n * sizeof *t1);
 8011b46:	49ac      	ldr	r1, [pc, #688]	; (8011df8 <Thread1+0xd68>)
 8011b48:	4cac      	ldr	r4, [pc, #688]	; (8011dfc <Thread1+0xd6c>)
 8011b4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011b4e:	f501 5000 	add.w	r0, r1, #8192	; 0x2000
 8011b52:	f003 f897 	bl	8014c84 <memcpy>
	Zf(poly_mul_fft)(tx, b00, logn);
 8011b56:	48aa      	ldr	r0, [pc, #680]	; (8011e00 <Thread1+0xd70>)
 8011b58:	2209      	movs	r2, #9
 8011b5a:	f5a0 41c0 	sub.w	r1, r0, #24576	; 0x6000
 8011b5e:	f7fa ff6f 	bl	800ca40 <falcon_inner_poly_mul_fft>
	Zf(poly_mul_fft)(ty, b10, logn);
 8011b62:	48a8      	ldr	r0, [pc, #672]	; (8011e04 <Thread1+0xd74>)
 8011b64:	2209      	movs	r2, #9
 8011b66:	f5a0 41a0 	sub.w	r1, r0, #20480	; 0x5000
 8011b6a:	f7fa ff69 	bl	800ca40 <falcon_inner_poly_mul_fft>
 8011b6e:	4625      	mov	r5, r4
		a[u] = fpr_add(a[u], b[u]);
 8011b70:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 8011b74:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8011b78:	f7fa f9ba 	bl	800bef0 <falcon_inner_fpr_add>
	for (u = 0; u < n; u ++) {
 8011b7c:	4b9f      	ldr	r3, [pc, #636]	; (8011dfc <Thread1+0xd6c>)
 8011b7e:	42b3      	cmp	r3, r6
		a[u] = fpr_add(a[u], b[u]);
 8011b80:	e9c6 0100 	strd	r0, r1, [r6]
	for (u = 0; u < n; u ++) {
 8011b84:	d1f4      	bne.n	8011b70 <Thread1+0xae0>
	memcpy(ty, t0, n * sizeof *t0);
 8011b86:	49a0      	ldr	r1, [pc, #640]	; (8011e08 <Thread1+0xd78>)
 8011b88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011b8c:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 8011b90:	f003 f878 	bl	8014c84 <memcpy>
	Zf(poly_mul_fft)(ty, b01, logn);
 8011b94:	489b      	ldr	r0, [pc, #620]	; (8011e04 <Thread1+0xd74>)
 8011b96:	2209      	movs	r2, #9
 8011b98:	f5a0 41c0 	sub.w	r1, r0, #24576	; 0x6000
 8011b9c:	f7fa ff50 	bl	800ca40 <falcon_inner_poly_mul_fft>
	memcpy(t0, tx, n * sizeof *tx);
 8011ba0:	4997      	ldr	r1, [pc, #604]	; (8011e00 <Thread1+0xd70>)
 8011ba2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011ba6:	f5a1 5000 	sub.w	r0, r1, #8192	; 0x2000
 8011baa:	f003 f86b 	bl	8014c84 <memcpy>
	Zf(poly_mul_fft)(t1, b11, logn);
 8011bae:	4892      	ldr	r0, [pc, #584]	; (8011df8 <Thread1+0xd68>)
 8011bb0:	2209      	movs	r2, #9
 8011bb2:	f5a0 5100 	sub.w	r1, r0, #8192	; 0x2000
 8011bb6:	f7fa ff43 	bl	800ca40 <falcon_inner_poly_mul_fft>
 8011bba:	465d      	mov	r5, fp
		a[u] = fpr_add(a[u], b[u]);
 8011bbc:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8011bc0:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8011bc4:	f7fa f994 	bl	800bef0 <falcon_inner_fpr_add>
	for (u = 0; u < n; u ++) {
 8011bc8:	4b90      	ldr	r3, [pc, #576]	; (8011e0c <Thread1+0xd7c>)
 8011bca:	42ab      	cmp	r3, r5
		a[u] = fpr_add(a[u], b[u]);
 8011bcc:	e9c5 0100 	strd	r0, r1, [r5]
	for (u = 0; u < n; u ++) {
 8011bd0:	d1f4      	bne.n	8011bbc <Thread1+0xb2c>
	Zf(iFFT)(t0, logn);
 8011bd2:	488d      	ldr	r0, [pc, #564]	; (8011e08 <Thread1+0xd78>)
 8011bd4:	2109      	movs	r1, #9
 8011bd6:	f7fa fe33 	bl	800c840 <falcon_inner_iFFT>
	ng = 0;
 8011bda:	f04f 0a00 	mov.w	sl, #0
	Zf(iFFT)(t1, logn);
 8011bde:	4886      	ldr	r0, [pc, #536]	; (8011df8 <Thread1+0xd68>)
 8011be0:	2109      	movs	r1, #9
 8011be2:	f7fa fe2d 	bl	800c840 <falcon_inner_iFFT>
 8011be6:	4b8a      	ldr	r3, [pc, #552]	; (8011e10 <Thread1+0xd80>)
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 8011be8:	f8cd a010 	str.w	sl, [sp, #16]
	sqn = 0;
 8011bec:	46d4      	mov	ip, sl
 8011bee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011bf2:	f8cd b020 	str.w	fp, [sp, #32]
 8011bf6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8011bfa:	9305      	str	r3, [sp, #20]
		z = (int32_t)hm[u] - (int32_t)fpr_rint(t0[u]);
 8011bfc:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8011c00:	f83a ef02 	ldrh.w	lr, [sl, #2]!
 8011c04:	f8db 5004 	ldr.w	r5, [fp, #4]
	e = 1085 - ((int)(x >> 52) & 0x7FF);
 8011c08:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011c0c:	f5c3 6087 	rsb	r0, r3, #1080	; 0x438
 8011c10:	3005      	adds	r0, #5
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 8011c12:	02a9      	lsls	r1, r5, #10
	e &= 63;
 8011c14:	f000 063f 	and.w	r6, r0, #63	; 0x3f
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 8011c18:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
	d = fpr_ulsh(m, 63 - e);
 8011c1c:	f1c6 073f 	rsb	r7, r6, #63	; 0x3f
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 8011c20:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 8011c24:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 8011c28:	3301      	adds	r3, #1
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 8011c2a:	ea4f 2882 	mov.w	r8, r2, lsl #10
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 8011c2e:	117c      	asrs	r4, r7, #5
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 8011c30:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 8011c34:	ea01 71e3 	and.w	r1, r1, r3, asr #31
 8011c38:	ea08 78e3 	and.w	r8, r8, r3, asr #31
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 8011c3c:	4264      	negs	r4, r4
 8011c3e:	ea4f 73e7 	mov.w	r3, r7, asr #31
 8011c42:	ea88 0201 	eor.w	r2, r8, r1
 8011c46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8011c4a:	4013      	ands	r3, r2
	return x << (n & 31);
 8011c4c:	f007 091f 	and.w	r9, r7, #31
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 8011c50:	ea28 0404 	bic.w	r4, r8, r4
 8011c54:	404b      	eors	r3, r1
	return x << (n & 31);
 8011c56:	f067 071f 	orn	r7, r7, #31
 8011c5a:	fa04 f707 	lsl.w	r7, r4, r7
 8011c5e:	fa03 f309 	lsl.w	r3, r3, r9
 8011c62:	433b      	orrs	r3, r7
 8011c64:	f1c9 0720 	rsb	r7, r9, #32
 8011c68:	fa24 f707 	lsr.w	r7, r4, r7
 8011c6c:	433b      	orrs	r3, r7
	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 8011c6e:	f023 4760 	bic.w	r7, r3, #3758096384	; 0xe0000000
	return x << (n & 31);
 8011c72:	fa04 f409 	lsl.w	r4, r4, r9
	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 8011c76:	433c      	orrs	r4, r7
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 8011c78:	f346 1740 	sbfx	r7, r6, #5, #1
 8011c7c:	ea21 0607 	bic.w	r6, r1, r7
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 8011c80:	4261      	negs	r1, r4
 8011c82:	4321      	orrs	r1, r4
 8011c84:	0f5b      	lsrs	r3, r3, #29
	return x >> (n & 31);
 8011c86:	f000 001f 	and.w	r0, r0, #31
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 8011c8a:	ea43 73d1 	orr.w	r3, r3, r1, lsr #31
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 8011c8e:	403a      	ands	r2, r7
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 8011c90:	21c8      	movs	r1, #200	; 0xc8
 8011c92:	fa21 f303 	lsr.w	r3, r1, r3
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 8011c96:	ea82 0208 	eor.w	r2, r2, r8
	return x >> (n & 31);
 8011c9a:	f1c0 0120 	rsb	r1, r0, #32
 8011c9e:	40c2      	lsrs	r2, r0
 8011ca0:	fa06 f101 	lsl.w	r1, r6, r1
 8011ca4:	3820      	subs	r0, #32
 8011ca6:	430a      	orrs	r2, r1
 8011ca8:	fa26 f000 	lsr.w	r0, r6, r0
	s = (uint32_t)(x >> 63);
 8011cac:	0fed      	lsrs	r5, r5, #31
	return x >> (n & 31);
 8011cae:	4302      	orrs	r2, r0
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 8011cb0:	f003 0301 	and.w	r3, r3, #1
 8011cb4:	189b      	adds	r3, r3, r2
	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 8011cb6:	426a      	negs	r2, r5
 8011cb8:	4053      	eors	r3, r2
 8011cba:	195b      	adds	r3, r3, r5
 8011cbc:	ebae 0e03 	sub.w	lr, lr, r3
		s1tmp[u] = (int16_t)z;
 8011cc0:	9b05      	ldr	r3, [sp, #20]
 8011cc2:	f823 ef02 	strh.w	lr, [r3, #2]!
 8011cc6:	9305      	str	r3, [sp, #20]
		ng |= sqn;
 8011cc8:	9b04      	ldr	r3, [sp, #16]
		sqn += (uint32_t)(z * z);
 8011cca:	fb0e cc0e 	mla	ip, lr, lr, ip
		ng |= sqn;
 8011cce:	ea43 030c 	orr.w	r3, r3, ip
 8011cd2:	9304      	str	r3, [sp, #16]
	for (u = 0; u < n; u ++) {
 8011cd4:	4b4f      	ldr	r3, [pc, #316]	; (8011e14 <Thread1+0xd84>)
 8011cd6:	4553      	cmp	r3, sl
 8011cd8:	d190      	bne.n	8011bfc <Thread1+0xb6c>
	sqn |= -(ng >> 31);
 8011cda:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011cde:	f8dd b020 	ldr.w	fp, [sp, #32]
 8011ce2:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8011e18 <Thread1+0xd88>
 8011ce6:	ea4c 7cea 	orr.w	ip, ip, sl, asr #31
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 8011cea:	f04f 0ac8 	mov.w	sl, #200	; 0xc8
		s2tmp[u] = (int16_t)-fpr_rint(t1[u]);
 8011cee:	f85b 4f08 	ldr.w	r4, [fp, #8]!
 8011cf2:	f8db 1004 	ldr.w	r1, [fp, #4]
	e = 1085 - ((int)(x >> 52) & 0x7FF);
 8011cf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011cfa:	f5c2 6087 	rsb	r0, r2, #1080	; 0x438
 8011cfe:	3005      	adds	r0, #5
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 8011d00:	028b      	lsls	r3, r1, #10
	e &= 63;
 8011d02:	f000 073f 	and.w	r7, r0, #63	; 0x3f
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 8011d06:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
	d = fpr_ulsh(m, 63 - e);
 8011d0a:	f1c7 0e3f 	rsb	lr, r7, #63	; 0x3f
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 8011d0e:	f5c2 727f 	rsb	r2, r2, #1020	; 0x3fc
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 8011d12:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 8011d16:	3201      	adds	r2, #1
	m = ((x << 10) | ((uint64_t)1 << 62)) & (((uint64_t)1 << 63) - 1);
 8011d18:	02a5      	lsls	r5, r4, #10
 8011d1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 8011d1e:	ea4f 166e 	mov.w	r6, lr, asr #5
	m &= -(uint64_t)((uint32_t)(e - 64) >> 31);
 8011d22:	ea05 75e2 	and.w	r5, r5, r2, asr #31
 8011d26:	ea03 74e2 	and.w	r4, r3, r2, asr #31
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 8011d2a:	4276      	negs	r6, r6
 8011d2c:	ea4f 73ee 	mov.w	r3, lr, asr #31
 8011d30:	ea85 0204 	eor.w	r2, r5, r4
 8011d34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8011d38:	4013      	ands	r3, r2
 8011d3a:	ea25 0606 	bic.w	r6, r5, r6
	return x << (n & 31);
 8011d3e:	f00e 081f 	and.w	r8, lr, #31
	x ^= (x ^ (x << 32)) & -(uint64_t)(n >> 5);
 8011d42:	4063      	eors	r3, r4
	return x << (n & 31);
 8011d44:	f06e 0e1f 	orn	lr, lr, #31
 8011d48:	fa06 fe0e 	lsl.w	lr, r6, lr
 8011d4c:	fa03 f308 	lsl.w	r3, r3, r8
 8011d50:	ea43 030e 	orr.w	r3, r3, lr
 8011d54:	f1c8 0e20 	rsb	lr, r8, #32
 8011d58:	fa26 fe0e 	lsr.w	lr, r6, lr
 8011d5c:	ea43 030e 	orr.w	r3, r3, lr
	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 8011d60:	f023 4e60 	bic.w	lr, r3, #3758096384	; 0xe0000000
	return x << (n & 31);
 8011d64:	fa06 f608 	lsl.w	r6, r6, r8
	dd = (uint32_t)d | ((uint32_t)(d >> 32) & 0x1FFFFFFF);
 8011d68:	ea4e 0606 	orr.w	r6, lr, r6
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 8011d6c:	f347 1e40 	sbfx	lr, r7, #5, #1
 8011d70:	ea02 020e 	and.w	r2, r2, lr
 8011d74:	406a      	eors	r2, r5
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 8011d76:	4275      	negs	r5, r6
	return x >> (n & 31);
 8011d78:	f000 001f 	and.w	r0, r0, #31
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 8011d7c:	4335      	orrs	r5, r6
 8011d7e:	0f5b      	lsrs	r3, r3, #29
	x ^= (x ^ (x >> 32)) & -(uint64_t)(n >> 5);
 8011d80:	ea24 040e 	bic.w	r4, r4, lr
	f = (uint32_t)(d >> 61) | ((dd | -dd) >> 31);
 8011d84:	ea43 73d5 	orr.w	r3, r3, r5, lsr #31
	return x >> (n & 31);
 8011d88:	f1c0 0520 	rsb	r5, r0, #32
 8011d8c:	40c2      	lsrs	r2, r0
 8011d8e:	fa04 f505 	lsl.w	r5, r4, r5
 8011d92:	3820      	subs	r0, #32
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 8011d94:	fa2a f303 	lsr.w	r3, sl, r3
	return x >> (n & 31);
 8011d98:	432a      	orrs	r2, r5
 8011d9a:	fa24 f000 	lsr.w	r0, r4, r0
	s = (uint32_t)(x >> 63);
 8011d9e:	0fc9      	lsrs	r1, r1, #31
	return x >> (n & 31);
 8011da0:	4302      	orrs	r2, r0
	m = fpr_ursh(m, e) + (uint64_t)((0xC8U >> f) & 1U);
 8011da2:	f003 0301 	and.w	r3, r3, #1
 8011da6:	189b      	adds	r3, r3, r2
	return ((int64_t)m ^ -(int64_t)s) + (int64_t)s;
 8011da8:	424a      	negs	r2, r1
 8011daa:	4053      	eors	r3, r2
 8011dac:	185b      	adds	r3, r3, r1
 8011dae:	425b      	negs	r3, r3
 8011db0:	f829 3f02 	strh.w	r3, [r9, #2]!
	for (u = 0; u < n; u ++) {
 8011db4:	4b15      	ldr	r3, [pc, #84]	; (8011e0c <Thread1+0xd7c>)
 8011db6:	455b      	cmp	r3, fp
 8011db8:	d199      	bne.n	8011cee <Thread1+0xc5e>
{
	size_t n, u;
	uint32_t ng;

	n = (size_t)1 << logn;
	ng = -(sqn >> 31);
 8011dba:	4b17      	ldr	r3, [pc, #92]	; (8011e18 <Thread1+0xd88>)
 8011dbc:	ea4f 71ec 	mov.w	r1, ip, asr #31
	for (u = 0; u < n; u ++) {
		int32_t z;

		z = s2[u];
 8011dc0:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
		sqn += (uint32_t)(z * z);
 8011dc4:	fb02 cc02 	mla	ip, r2, r2, ip
	for (u = 0; u < n; u ++) {
 8011dc8:	4a14      	ldr	r2, [pc, #80]	; (8011e1c <Thread1+0xd8c>)
 8011dca:	429a      	cmp	r2, r3
		ng |= sqn;
 8011dcc:	ea41 010c 	orr.w	r1, r1, ip
	for (u = 0; u < n; u ++) {
 8011dd0:	d1f6      	bne.n	8011dc0 <Thread1+0xd30>
	if (Zf(is_short_half)(sqn, s2tmp, logn)) {
 8011dd2:	4b13      	ldr	r3, [pc, #76]	; (8011e20 <Thread1+0xd90>)
	}
	sqn |= -(ng >> 31);
 8011dd4:	ea4c 7ce1 	orr.w	ip, ip, r1, asr #31
 8011dd8:	459c      	cmp	ip, r3
 8011dda:	d97f      	bls.n	8011edc <Thread1+0xe4c>
	dptr = (size_t)sc->dptr;
 8011ddc:	4b11      	ldr	r3, [pc, #68]	; (8011e24 <Thread1+0xd94>)
 8011dde:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
	for (;;) {
 8011de2:	e499      	b.n	8011718 <Thread1+0x688>
 8011de4:	200038e0 	.word	0x200038e0
 8011de8:	200068e0 	.word	0x200068e0
 8011dec:	200058e0 	.word	0x200058e0
 8011df0:	200058d8 	.word	0x200058d8
 8011df4:	200078d8 	.word	0x200078d8
 8011df8:	200088e0 	.word	0x200088e0
 8011dfc:	2000a8d8 	.word	0x2000a8d8
 8011e00:	200098e0 	.word	0x200098e0
 8011e04:	2000a8e0 	.word	0x2000a8e0
 8011e08:	200078e0 	.word	0x200078e0
 8011e0c:	200098d8 	.word	0x200098d8
 8011e10:	200098de 	.word	0x200098de
 8011e14:	200036de 	.word	0x200036de
 8011e18:	200038de 	.word	0x200038de
 8011e1c:	20003cde 	.word	0x20003cde
 8011e20:	02075426 	.word	0x02075426
 8011e24:	200037b0 	.word	0x200037b0
        chnWrite(&SD1, signature, 690);//        int signature_verified = crypto_sign_open(NULL, NULL, signature, CRYPTO_BYTES, public_key);*/
 8011e28:	4b77      	ldr	r3, [pc, #476]	; (8012008 <Thread1+0xf78>)
 8011e2a:	4877      	ldr	r0, [pc, #476]	; (8012008 <Thread1+0xf78>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	f240 22b2 	movw	r2, #690	; 0x2b2
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	a911      	add	r1, sp, #68	; 0x44
 8011e36:	4798      	blx	r3
        palSetPad(GPIOD, GPIOD_LED3);       // Orange.
 8011e38:	4b74      	ldr	r3, [pc, #464]	; (801200c <Thread1+0xf7c>)
 8011e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011e3e:	831a      	strh	r2, [r3, #24]
 8011e40:	2330      	movs	r3, #48	; 0x30
 8011e42:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = __instance_get_currthread(currcore);
 8011e46:	4e72      	ldr	r6, [pc, #456]	; (8012010 <Thread1+0xf80>)
  vtp->func    = vtfunc;
 8011e48:	4d72      	ldr	r5, [pc, #456]	; (8012014 <Thread1+0xf84>)
 8011e4a:	68f4      	ldr	r4, [r6, #12]
  vtp->par     = par;
 8011e4c:	94c2      	str	r4, [sp, #776]	; 0x308
  vtp->reload  = (sysinterval_t)0;
 8011e4e:	2300      	movs	r3, #0
  vt_enqueue(vtlp, vtp, delay);
 8011e50:	f242 7110 	movw	r1, #10000	; 0x2710
 8011e54:	a8be      	add	r0, sp, #760	; 0x2f8
  vtp->reload  = (sysinterval_t)0;
 8011e56:	93c3      	str	r3, [sp, #780]	; 0x30c
  vtp->func    = vtfunc;
 8011e58:	95c1      	str	r5, [sp, #772]	; 0x304
  vt_enqueue(vtlp, vtp, delay);
 8011e5a:	f001 fb01 	bl	8013460 <vt_enqueue.constprop.0>
  ch_priority_queue_t *p = pqp->next;
 8011e5e:	6830      	ldr	r0, [r6, #0]
  otp->state = newstate;
 8011e60:	2308      	movs	r3, #8
 8011e62:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  pqp->next       = p->next;
 8011e66:	6803      	ldr	r3, [r0, #0]
 8011e68:	6033      	str	r3, [r6, #0]
  pqp->next->prev = pqp;
 8011e6a:	605e      	str	r6, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  chSysSwitch(ntp, otp);
 8011e72:	4621      	mov	r1, r4
  __instance_set_currthread(oip, ntp);
 8011e74:	60f0      	str	r0, [r6, #12]
  chSysSwitch(ntp, otp);
 8011e76:	f7ee fa23 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8011e7a:	9bbe      	ldr	r3, [sp, #760]	; 0x2f8
 8011e7c:	b113      	cbz	r3, 8011e84 <Thread1+0xdf4>
      chVTDoResetI(&vt);
 8011e7e:	a8be      	add	r0, sp, #760	; 0x2f8
 8011e80:	f7ef ff9e 	bl	8001dc0 <chVTDoResetI>
 8011e84:	2300      	movs	r3, #0
 8011e86:	f383 8811 	msr	BASEPRI, r3
        palClearPad(GPIOD, GPIOD_LED3);     // Orange.
 8011e8a:	4a60      	ldr	r2, [pc, #384]	; (801200c <Thread1+0xf7c>)
 8011e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011e90:	8351      	strh	r1, [r2, #26]
 8011e92:	2230      	movs	r2, #48	; 0x30
 8011e94:	f382 8811 	msr	BASEPRI, r2
  vtp->func    = vtfunc;
 8011e98:	95c1      	str	r5, [sp, #772]	; 0x304
  thread_t *tp = __instance_get_currthread(currcore);
 8011e9a:	4d5d      	ldr	r5, [pc, #372]	; (8012010 <Thread1+0xf80>)
  vtp->reload  = (sysinterval_t)0;
 8011e9c:	93c3      	str	r3, [sp, #780]	; 0x30c
 8011e9e:	68ec      	ldr	r4, [r5, #12]
  vtp->par     = par;
 8011ea0:	94c2      	str	r4, [sp, #776]	; 0x308
  vt_enqueue(vtlp, vtp, delay);
 8011ea2:	f241 3188 	movw	r1, #5000	; 0x1388
 8011ea6:	a8be      	add	r0, sp, #760	; 0x2f8
 8011ea8:	f001 fada 	bl	8013460 <vt_enqueue.constprop.0>
  ch_priority_queue_t *p = pqp->next;
 8011eac:	6828      	ldr	r0, [r5, #0]
  otp->state = newstate;
 8011eae:	2308      	movs	r3, #8
 8011eb0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  pqp->next       = p->next;
 8011eb4:	6803      	ldr	r3, [r0, #0]
 8011eb6:	602b      	str	r3, [r5, #0]
  pqp->next->prev = pqp;
 8011eb8:	605d      	str	r5, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8011eba:	2301      	movs	r3, #1
 8011ebc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  chSysSwitch(ntp, otp);
 8011ec0:	4621      	mov	r1, r4
  __instance_set_currthread(oip, ntp);
 8011ec2:	60e8      	str	r0, [r5, #12]
  chSysSwitch(ntp, otp);
 8011ec4:	f7ee f9fc 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 8011ec8:	9bbe      	ldr	r3, [sp, #760]	; 0x2f8
 8011eca:	b113      	cbz	r3, 8011ed2 <Thread1+0xe42>
      chVTDoResetI(&vt);
 8011ecc:	a8be      	add	r0, sp, #760	; 0x2f8
 8011ece:	f7ef ff77 	bl	8001dc0 <chVTDoResetI>
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	f383 8811 	msr	BASEPRI, r3
 8011ed8:	f7ff bab8 	b.w	801144c <Thread1+0x3bc>
		memcpy(s2, s2tmp, n * sizeof *s2);
 8011edc:	f2a2 31fe 	subw	r1, r2, #1022	; 0x3fe
 8011ee0:	484d      	ldr	r0, [pc, #308]	; (8012018 <Thread1+0xf88>)
 8011ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011ee6:	f002 fecd 	bl	8014c84 <memcpy>
		memcpy(tmp, s1tmp, n * sizeof *s1tmp);
 8011eea:	494c      	ldr	r1, [pc, #304]	; (801201c <Thread1+0xf8c>)
 8011eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011ef0:	f5a1 40c0 	sub.w	r0, r1, #24576	; 0x6000
 8011ef4:	f002 fec6 	bl	8014c84 <memcpy>
	 *   signature length     2 bytes, big-endian
	 *   nonce                40 bytes
	 *   message              mlen bytes
	 *   signature            slen bytes
	 */
	esig[0] = 0x20 + 9;
 8011ef8:	4a49      	ldr	r2, [pc, #292]	; (8012020 <Thread1+0xf90>)
 8011efa:	2329      	movs	r3, #41	; 0x29
 8011efc:	7013      	strb	r3, [r2, #0]
	return in_len;
}

/* see inner.h */
size_t
Zf(comp_encode)(
 8011efe:	4b46      	ldr	r3, [pc, #280]	; (8012018 <Thread1+0xf88>)

	/*
	 * Make sure that all values are within the -2047..+2047 range.
	 */
	for (u = 0; u < n; u ++) {
		if (x[u] < -2047 || x[u] > +2047) {
 8011f00:	f640 71fe 	movw	r1, #4094	; 0xffe
 8011f04:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 8011f08:	461a      	mov	r2, r3
 8011f0a:	f932 3b02 	ldrsh.w	r3, [r2], #2
 8011f0e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	428b      	cmp	r3, r1
 8011f16:	d887      	bhi.n	8011e28 <Thread1+0xd98>
	for (u = 0; u < n; u ++) {
 8011f18:	4295      	cmp	r5, r2
 8011f1a:	d1f6      	bne.n	8011f0a <Thread1+0xe7a>
 8011f1c:	e9dd 170a 	ldrd	r1, r7, [sp, #40]	; 0x28
		}
	}

	acc = 0;
	acc_len = 0;
	v = 0;
 8011f20:	2200      	movs	r2, #0
	acc_len = 0;
 8011f22:	4613      	mov	r3, r2
		 * Produce all full bytes.
		 */
		while (acc_len >= 8) {
			acc_len -= 8;
			if (buf != NULL) {
				if (v >= max_out_len) {
 8011f24:	f240 2686 	movw	r6, #646	; 0x286
		acc <<= 1;
 8011f28:	004c      	lsls	r4, r1, #1
		t = x[u];
 8011f2a:	f937 1b02 	ldrsh.w	r1, [r7], #2
		if (t < 0) {
 8011f2e:	2900      	cmp	r1, #0
			t = -t;
 8011f30:	bfb8      	it	lt
 8011f32:	4249      	neglt	r1, r1
		w >>= 7;
 8011f34:	ea4f 10d1 	mov.w	r0, r1, lsr #7
			acc |= 1;
 8011f38:	bfb8      	it	lt
 8011f3a:	f044 0401 	orrlt.w	r4, r4, #1
 8011f3e:	3309      	adds	r3, #9
		acc |= w & 127u;
 8011f40:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8011f44:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
		acc_len += w + 1;
 8011f48:	4403      	add	r3, r0
		acc <<= (w + 1);
 8011f4a:	3001      	adds	r0, #1
 8011f4c:	4081      	lsls	r1, r0
 8011f4e:	4834      	ldr	r0, [pc, #208]	; (8012020 <Thread1+0xf90>)
		acc |= 1;
 8011f50:	f041 0101 	orr.w	r1, r1, #1
 8011f54:	4410      	add	r0, r2
 8011f56:	e000      	b.n	8011f5a <Thread1+0xeca>
					return 0;
				}
				buf[v] = (uint8_t)(acc >> acc_len);
			}
			v ++;
 8011f58:	4622      	mov	r2, r4
				if (v >= max_out_len) {
 8011f5a:	42b2      	cmp	r2, r6
			acc_len -= 8;
 8011f5c:	f1a3 0308 	sub.w	r3, r3, #8
				if (v >= max_out_len) {
 8011f60:	f63f af62 	bhi.w	8011e28 <Thread1+0xd98>
				buf[v] = (uint8_t)(acc >> acc_len);
 8011f64:	fa21 f403 	lsr.w	r4, r1, r3
		while (acc_len >= 8) {
 8011f68:	2b07      	cmp	r3, #7
				buf[v] = (uint8_t)(acc >> acc_len);
 8011f6a:	f800 4f01 	strb.w	r4, [r0, #1]!
			v ++;
 8011f6e:	f102 0401 	add.w	r4, r2, #1
		while (acc_len >= 8) {
 8011f72:	d8f1      	bhi.n	8011f58 <Thread1+0xec8>
	for (u = 0; u < n; u ++) {
 8011f74:	42bd      	cmp	r5, r7
 8011f76:	d001      	beq.n	8011f7c <Thread1+0xeec>
			v ++;
 8011f78:	4622      	mov	r2, r4
 8011f7a:	e7d5      	b.n	8011f28 <Thread1+0xe98>
	}

	/*
	 * Flush remaining bits (if any).
	 */
	if (acc_len > 0) {
 8011f7c:	4608      	mov	r0, r1
 8011f7e:	b15b      	cbz	r3, 8011f98 <Thread1+0xf08>
		if (buf != NULL) {
			if (v >= max_out_len) {
 8011f80:	f240 2187 	movw	r1, #647	; 0x287
 8011f84:	428c      	cmp	r4, r1
 8011f86:	f43f af4f 	beq.w	8011e28 <Thread1+0xd98>
				return 0;
			}
			buf[v] = (uint8_t)(acc << (8 - acc_len));
 8011f8a:	4d25      	ldr	r5, [pc, #148]	; (8012020 <Thread1+0xf90>)
 8011f8c:	f1c3 0308 	rsb	r3, r3, #8
 8011f90:	1929      	adds	r1, r5, r4
 8011f92:	4098      	lsls	r0, r3
 8011f94:	7048      	strb	r0, [r1, #1]
		}
		v ++;
 8011f96:	1c94      	adds	r4, r2, #2
	sig_len = Zf(comp_encode)(esig + 1, (sizeof esig) - 1, r.sig, 9);
	if (sig_len == 0) {
		return -1;
	}
	sig_len ++;
	memmove(sm + 2 + sizeof nonce, m, mlen);
 8011f98:	ad0d      	add	r5, sp, #52	; 0x34
 8011f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	sm[0] = (unsigned char)(sig_len >> 8);
	sm[1] = (unsigned char)sig_len;
	memcpy(sm + 2, nonce, sizeof nonce);
 8011f9c:	4f21      	ldr	r7, [pc, #132]	; (8012024 <Thread1+0xf94>)
	memmove(sm + 2 + sizeof nonce, m, mlen);
 8011f9e:	f8cd 006e 	str.w	r0, [sp, #110]	; 0x6e
	sig_len ++;
 8011fa2:	3401      	adds	r4, #1
	sm[0] = (unsigned char)(sig_len >> 8);
 8011fa4:	ba65      	rev16	r5, r4
	memmove(sm + 2 + sizeof nonce, m, mlen);
 8011fa6:	f8cd 1072 	str.w	r1, [sp, #114]	; 0x72
 8011faa:	f8cd 2076 	str.w	r2, [sp, #118]	; 0x76
 8011fae:	f8cd 307a 	str.w	r3, [sp, #122]	; 0x7a
	sm[0] = (unsigned char)(sig_len >> 8);
 8011fb2:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
	memcpy(sm + 2, nonce, sizeof nonce);
 8011fb6:	f10d 0646 	add.w	r6, sp, #70	; 0x46
 8011fba:	f107 0c20 	add.w	ip, r7, #32
 8011fbe:	463d      	mov	r5, r7
 8011fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011fc2:	4565      	cmp	r5, ip
 8011fc4:	f106 0610 	add.w	r6, r6, #16
 8011fc8:	462f      	mov	r7, r5
 8011fca:	f846 0c10 	str.w	r0, [r6, #-16]
 8011fce:	f846 1c0c 	str.w	r1, [r6, #-12]
 8011fd2:	f846 2c08 	str.w	r2, [r6, #-8]
 8011fd6:	f846 3c04 	str.w	r3, [r6, #-4]
 8011fda:	d1f0      	bne.n	8011fbe <Thread1+0xf2e>
 8011fdc:	cf03      	ldmia	r7!, {r0, r1}
	memcpy(sm + 2 + (sizeof nonce) + mlen, esig, sig_len);
 8011fde:	4622      	mov	r2, r4
	memcpy(sm + 2, nonce, sizeof nonce);
 8011fe0:	6030      	str	r0, [r6, #0]
 8011fe2:	6071      	str	r1, [r6, #4]
	memcpy(sm + 2 + (sizeof nonce) + mlen, esig, sig_len);
 8011fe4:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 8011fe8:	490d      	ldr	r1, [pc, #52]	; (8012020 <Thread1+0xf90>)
 8011fea:	f002 fe4b 	bl	8014c84 <memcpy>
	*smlen = 2 + (sizeof nonce) + mlen + sig_len;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	2000      	movs	r0, #0
 8011ff2:	2100      	movs	r1, #0
 8011ff4:	e9c3 0100 	strd	r0, r1, [r3]
 8011ff8:	deff      	udf	#255	; 0xff
		while (acc_len >= 8) {
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	f7ff ba16 	b.w	801142c <Thread1+0x39c>
 8012000:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
 8012004:	f7ff ba1b 	b.w	801143e <Thread1+0x3ae>
 8012008:	20000938 	.word	0x20000938
 801200c:	40020c00 	.word	0x40020c00
 8012010:	20000a90 	.word	0x20000a90
 8012014:	08001051 	.word	0x08001051
 8012018:	200032e0 	.word	0x200032e0
 801201c:	200098e0 	.word	0x200098e0
 8012020:	20002430 	.word	0x20002430
 8012024:	200032b8 	.word	0x200032b8
	...

08012030 <SubWord.lto_priv.0>:
};

static uint32_t
SubWord(uint32_t x)
{
	return ((uint32_t)S[x >> 24] << 24)
 8012030:	4a09      	ldr	r2, [pc, #36]	; (8012058 <SubWord.lto_priv.0+0x28>)
 8012032:	ea4f 6c10 	mov.w	ip, r0, lsr #24
		| ((uint32_t)S[(x >> 16) & 0xFF] << 16)
		| ((uint32_t)S[(x >> 8) & 0xFF] << 8)
		| (uint32_t)S[x & 0xFF];
 8012036:	b2c3      	uxtb	r3, r0
		| ((uint32_t)S[(x >> 16) & 0xFF] << 16)
 8012038:	f3c0 4107 	ubfx	r1, r0, #16, #8
	return ((uint32_t)S[x >> 24] << 24)
 801203c:	f812 c00c 	ldrb.w	ip, [r2, ip]
		| (uint32_t)S[x & 0xFF];
 8012040:	5cd3      	ldrb	r3, [r2, r3]
		| ((uint32_t)S[(x >> 16) & 0xFF] << 16)
 8012042:	5c51      	ldrb	r1, [r2, r1]
		| ((uint32_t)S[(x >> 8) & 0xFF] << 8)
 8012044:	f3c0 2007 	ubfx	r0, r0, #8, #8
		| (uint32_t)S[x & 0xFF];
 8012048:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
		| ((uint32_t)S[(x >> 8) & 0xFF] << 8)
 801204c:	5c10      	ldrb	r0, [r2, r0]
		| (uint32_t)S[x & 0xFF];
 801204e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
}
 8012052:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8012056:	4770      	bx	lr
 8012058:	08018e74 	.word	0x08018e74
 801205c:	00000000 	.word	0x00000000

08012060 <aes256_encrypt.lto_priv.0>:
#define SboxExt2(x)   (rotr(Ssm0[x], 16))
#define SboxExt3(x)   (rotr(Ssm0[x], 24))

static void
aes256_encrypt(const uint32_t *skey, void *data)
{
 8012060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012064:	b087      	sub	sp, #28
 8012066:	680c      	ldr	r4, [r1, #0]
 8012068:	9004      	str	r0, [sp, #16]
 801206a:	4605      	mov	r5, r0
	buf = data;
	s0 = dec32be(buf);
	s1 = dec32be(buf + 4);
	s2 = dec32be(buf + 8);
	s3 = dec32be(buf + 12);
	s0 ^= skey[0];
 801206c:	6800      	ldr	r0, [r0, #0]
 801206e:	684a      	ldr	r2, [r1, #4]
{
 8012070:	9105      	str	r1, [sp, #20]
	s0 = dec32be(buf);
 8012072:	ba24      	rev	r4, r4
	s0 ^= skey[0];
 8012074:	4044      	eors	r4, r0
	s1 ^= skey[1];
 8012076:	6868      	ldr	r0, [r5, #4]
{
 8012078:	460b      	mov	r3, r1
	s1 = dec32be(buf + 4);
 801207a:	ba12      	rev	r2, r2
	s2 = dec32be(buf + 8);
 801207c:	6889      	ldr	r1, [r1, #8]
 801207e:	68db      	ldr	r3, [r3, #12]
	s1 ^= skey[1];
 8012080:	4042      	eors	r2, r0
	s2 ^= skey[2];
 8012082:	68a8      	ldr	r0, [r5, #8]
 8012084:	ba09      	rev	r1, r1
 8012086:	ea81 0b00 	eor.w	fp, r1, r0
	s3 ^= skey[3];
 801208a:	68e9      	ldr	r1, [r5, #12]
 801208c:	ba1b      	rev	r3, r3
 801208e:	ea83 0801 	eor.w	r8, r3, r1
	for (u = 1; u < 14; u ++) {
 8012092:	f105 01d0 	add.w	r1, r5, #208	; 0xd0
 8012096:	4b70      	ldr	r3, [pc, #448]	; (8012258 <aes256_encrypt.lto_priv.0+0x1f8>)
 8012098:	9103      	str	r1, [sp, #12]
 801209a:	46ac      	mov	ip, r5
			^ SboxExt1((s2 >> 16) & 0xFF)
			^ SboxExt2((s3 >> 8) & 0xFF)
			^ SboxExt3(s0 & 0xFF);
		v2 = SboxExt0(s2 >> 24)
			^ SboxExt1((s3 >> 16) & 0xFF)
			^ SboxExt2((s0 >> 8) & 0xFF)
 801209c:	f3c4 2107 	ubfx	r1, r4, #8, #8
			^ SboxExt3(s1 & 0xFF);
 80120a0:	b2d5      	uxtb	r5, r2
	return (x << (32 - n)) | (x >> n);
 80120a2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80120a6:	9101      	str	r1, [sp, #4]
		v1 = SboxExt0(s1 >> 24)
 80120a8:	0e11      	lsrs	r1, r2, #24
			^ SboxExt3(s0 & 0xFF);
 80120aa:	b2e6      	uxtb	r6, r4
		v3 = SboxExt0(s3 >> 24)
			^ SboxExt1((s0 >> 16) & 0xFF)
 80120ac:	f3c4 4007 	ubfx	r0, r4, #16, #8
	return (x << (32 - n)) | (x >> n);
 80120b0:	f853 e025 	ldr.w	lr, [r3, r5, lsl #2]
 80120b4:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 80120b8:	f853 9026 	ldr.w	r9, [r3, r6, lsl #2]
 80120bc:	f853 a020 	ldr.w	sl, [r3, r0, lsl #2]
		v2 = SboxExt0(s2 >> 24)
 80120c0:	ea4f 611b 	mov.w	r1, fp, lsr #24
		v0 = SboxExt0(s0 >> 24)
 80120c4:	0e24      	lsrs	r4, r4, #24
 80120c6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80120ca:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
		v3 = SboxExt0(s3 >> 24)
 80120ce:	ea4f 6118 	mov.w	r1, r8, lsr #24
			^ SboxExt2((s1 >> 8) & 0xFF)
			^ SboxExt3(s2 & 0xFF);
 80120d2:	fa5f f48b 	uxtb.w	r4, fp
 80120d6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	return (x << (32 - n)) | (x >> n);
 80120da:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
 80120de:	9102      	str	r1, [sp, #8]
			^ SboxExt3(s3 & 0xFF);
 80120e0:	fa5f f488 	uxtb.w	r4, r8
 80120e4:	f8dc 1010 	ldr.w	r1, [ip, #16]
	return (x << (32 - n)) | (x >> n);
 80120e8:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80120ec:	404e      	eors	r6, r1
 80120ee:	ea86 6634 	eor.w	r6, r6, r4, ror #24
 80120f2:	f8dc 4014 	ldr.w	r4, [ip, #20]
 80120f6:	9902      	ldr	r1, [sp, #8]
 80120f8:	4065      	eors	r5, r4
 80120fa:	f8dc 4018 	ldr.w	r4, [ip, #24]
 80120fe:	4060      	eors	r0, r4
 8012100:	f8dc 401c 	ldr.w	r4, [ip, #28]
 8012104:	4061      	eors	r1, r4
			^ SboxExt1((s1 >> 16) & 0xFF)
 8012106:	f3c2 4407 	ubfx	r4, r2, #16, #8
			^ SboxExt2((s1 >> 8) & 0xFF)
 801210a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	return (x << (32 - n)) | (x >> n);
 801210e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8012112:	ea86 2434 	eor.w	r4, r6, r4, ror #8
 8012116:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
			^ SboxExt1((s2 >> 16) & 0xFF)
 801211a:	f3cb 4207 	ubfx	r2, fp, #16, #8
			^ SboxExt2((s2 >> 8) & 0xFF)
 801211e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
	return (x << (32 - n)) | (x >> n);
 8012122:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012126:	ea85 6539 	eor.w	r5, r5, r9, ror #24
 801212a:	ea85 2232 	eor.w	r2, r5, r2, ror #8
 801212e:	f853 502b 	ldr.w	r5, [r3, fp, lsl #2]
		s0 = v0;
		s1 = v1;
		s2 = v2;
		s3 = v3;
		s0 ^= skey[u << 2];
 8012132:	ea84 4435 	eor.w	r4, r4, r5, ror #16
			^ SboxExt1((s3 >> 16) & 0xFF)
 8012136:	f3c8 4507 	ubfx	r5, r8, #16, #8
 801213a:	ea81 6137 	eor.w	r1, r1, r7, ror #24
			^ SboxExt2((s3 >> 8) & 0xFF)
 801213e:	f3c8 2807 	ubfx	r8, r8, #8, #8
	return (x << (32 - n)) | (x >> n);
 8012142:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8012146:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
 801214a:	ea81 213a 	eor.w	r1, r1, sl, ror #8
 801214e:	ea80 603e 	eor.w	r0, r0, lr, ror #24
		s1 ^= skey[(u << 2) + 1];
		s2 ^= skey[(u << 2) + 2];
		s3 ^= skey[(u << 2) + 3];
 8012152:	ea81 4836 	eor.w	r8, r1, r6, ror #16
	for (u = 1; u < 14; u ++) {
 8012156:	9903      	ldr	r1, [sp, #12]
 8012158:	ea80 2035 	eor.w	r0, r0, r5, ror #8
 801215c:	f10c 0c10 	add.w	ip, ip, #16
		s2 ^= skey[(u << 2) + 2];
 8012160:	9d01      	ldr	r5, [sp, #4]
	for (u = 1; u < 14; u ++) {
 8012162:	4561      	cmp	r1, ip
		s1 ^= skey[(u << 2) + 1];
 8012164:	ea82 4237 	eor.w	r2, r2, r7, ror #16
		s2 ^= skey[(u << 2) + 2];
 8012168:	ea80 4b35 	eor.w	fp, r0, r5, ror #16
	for (u = 1; u < 14; u ++) {
 801216c:	d196      	bne.n	801209c <aes256_encrypt.lto_priv.0+0x3c>
	}
	t0 = ((uint32_t)S[s0 >> 24] << 24)
 801216e:	493b      	ldr	r1, [pc, #236]	; (801225c <aes256_encrypt.lto_priv.0+0x1fc>)
 8012170:	0e23      	lsrs	r3, r4, #24
		| ((uint32_t)S[(s1 >> 16) & 0xFF] << 16)
		| ((uint32_t)S[(s2 >> 8) & 0xFF] << 8)
		| (uint32_t)S[s3 & 0xFF];
 8012172:	fa5f f088 	uxtb.w	r0, r8
	t0 = ((uint32_t)S[s0 >> 24] << 24)
 8012176:	5ccb      	ldrb	r3, [r1, r3]
		| (uint32_t)S[s3 & 0xFF];
 8012178:	5c08      	ldrb	r0, [r1, r0]
	t0 = ((uint32_t)S[s0 >> 24] << 24)
 801217a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
	t1 = ((uint32_t)S[s1 >> 24] << 24)
 801217e:	0e13      	lsrs	r3, r2, #24
		| ((uint32_t)S[(s3 >> 8) & 0xFF] << 8)
		| (uint32_t)S[s0 & 0xFF];
	t2 = ((uint32_t)S[s2 >> 24] << 24)
		| ((uint32_t)S[(s3 >> 16) & 0xFF] << 16)
		| ((uint32_t)S[(s0 >> 8) & 0xFF] << 8)
		| (uint32_t)S[s1 & 0xFF];
 8012180:	b2d6      	uxtb	r6, r2
	t1 = ((uint32_t)S[s1 >> 24] << 24)
 8012182:	5ccd      	ldrb	r5, [r1, r3]
		| (uint32_t)S[s1 & 0xFF];
 8012184:	5d8e      	ldrb	r6, [r1, r6]
		| (uint32_t)S[s0 & 0xFF];
 8012186:	b2e3      	uxtb	r3, r4
		| ((uint32_t)S[(s3 >> 16) & 0xFF] << 16)
 8012188:	f3c8 4c07 	ubfx	ip, r8, #16, #8
		| (uint32_t)S[s0 & 0xFF];
 801218c:	5ccb      	ldrb	r3, [r1, r3]
		| ((uint32_t)S[(s3 >> 16) & 0xFF] << 16)
 801218e:	f811 c00c 	ldrb.w	ip, [r1, ip]
	t1 = ((uint32_t)S[s1 >> 24] << 24)
 8012192:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
	t2 = ((uint32_t)S[s2 >> 24] << 24)
 8012196:	ea4f 651b 	mov.w	r5, fp, lsr #24
 801219a:	5d4d      	ldrb	r5, [r1, r5]
 801219c:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
	t3 = ((uint32_t)S[s3 >> 24] << 24)
 80121a0:	ea4f 6518 	mov.w	r5, r8, lsr #24
	t2 = ((uint32_t)S[s2 >> 24] << 24)
 80121a4:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
	t3 = ((uint32_t)S[s3 >> 24] << 24)
 80121a8:	5d4f      	ldrb	r7, [r1, r5]
		| ((uint32_t)S[(s0 >> 16) & 0xFF] << 16)
		| ((uint32_t)S[(s1 >> 8) & 0xFF] << 8)
		| (uint32_t)S[s2 & 0xFF];
 80121aa:	fa5f f58b 	uxtb.w	r5, fp
 80121ae:	5d4d      	ldrb	r5, [r1, r5]
	t3 = ((uint32_t)S[s3 >> 24] << 24)
 80121b0:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
		| ((uint32_t)S[(s1 >> 16) & 0xFF] << 16)
 80121b4:	f3c2 4707 	ubfx	r7, r2, #16, #8
		| ((uint32_t)S[(s1 >> 8) & 0xFF] << 8)
 80121b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
		| ((uint32_t)S[(s1 >> 16) & 0xFF] << 16)
 80121bc:	5dcf      	ldrb	r7, [r1, r7]
	t0 = ((uint32_t)S[s0 >> 24] << 24)
 80121be:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
		| ((uint32_t)S[(s1 >> 8) & 0xFF] << 8)
 80121c2:	5c8f      	ldrb	r7, [r1, r2]
		| ((uint32_t)S[(s2 >> 16) & 0xFF] << 16)
 80121c4:	f3cb 4207 	ubfx	r2, fp, #16, #8
		| ((uint32_t)S[(s2 >> 8) & 0xFF] << 8)
 80121c8:	f3cb 2b07 	ubfx	fp, fp, #8, #8
		| ((uint32_t)S[(s2 >> 16) & 0xFF] << 16)
 80121cc:	5c8a      	ldrb	r2, [r1, r2]
	t1 = ((uint32_t)S[s1 >> 24] << 24)
 80121ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
		| ((uint32_t)S[(s2 >> 8) & 0xFF] << 8)
 80121d2:	f811 300b 	ldrb.w	r3, [r1, fp]
	t0 = ((uint32_t)S[s0 >> 24] << 24)
 80121d6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
		| ((uint32_t)S[(s3 >> 8) & 0xFF] << 8)
 80121da:	f3c8 2307 	ubfx	r3, r8, #8, #8
 80121de:	5ccb      	ldrb	r3, [r1, r3]
	t1 = ((uint32_t)S[s1 >> 24] << 24)
 80121e0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		| ((uint32_t)S[(s0 >> 16) & 0xFF] << 16)
 80121e4:	f3c4 4307 	ubfx	r3, r4, #16, #8
		| ((uint32_t)S[(s0 >> 8) & 0xFF] << 8)
 80121e8:	f3c4 2407 	ubfx	r4, r4, #8, #8
		| ((uint32_t)S[(s0 >> 16) & 0xFF] << 16)
 80121ec:	f811 c003 	ldrb.w	ip, [r1, r3]
		| ((uint32_t)S[(s0 >> 8) & 0xFF] << 8)
 80121f0:	5d0b      	ldrb	r3, [r1, r4]
	t3 = ((uint32_t)S[s3 >> 24] << 24)
 80121f2:	ea45 440c 	orr.w	r4, r5, ip, lsl #16
	s0 = t0 ^ skey[56];
 80121f6:	9d04      	ldr	r5, [sp, #16]
 80121f8:	f8d5 10e0 	ldr.w	r1, [r5, #224]	; 0xe0
 80121fc:	4041      	eors	r1, r0
	s1 = t1 ^ skey[57];
 80121fe:	f8d5 00e4 	ldr.w	r0, [r5, #228]	; 0xe4
 8012202:	4042      	eors	r2, r0
	s2 = t2 ^ skey[58];
 8012204:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
	t2 = ((uint32_t)S[s2 >> 24] << 24)
 8012208:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	s2 = t2 ^ skey[58];
 801220c:	4043      	eors	r3, r0
	s3 = t3 ^ skey[59];
 801220e:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
	buf[3] = (unsigned char)x;
 8012212:	9d05      	ldr	r5, [sp, #20]
	t3 = ((uint32_t)S[s3 >> 24] << 24)
 8012214:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
	s3 = t3 ^ skey[59];
 8012218:	4044      	eors	r4, r0
	buf[0] = (unsigned char)(x >> 24);
 801221a:	0e08      	lsrs	r0, r1, #24
	buf[3] = (unsigned char)x;
 801221c:	70e9      	strb	r1, [r5, #3]
	buf[0] = (unsigned char)(x >> 24);
 801221e:	7028      	strb	r0, [r5, #0]
	buf[1] = (unsigned char)(x >> 16);
 8012220:	0c08      	lsrs	r0, r1, #16
	buf[2] = (unsigned char)(x >> 8);
 8012222:	0a09      	lsrs	r1, r1, #8
 8012224:	70a9      	strb	r1, [r5, #2]
	buf[0] = (unsigned char)(x >> 24);
 8012226:	0e11      	lsrs	r1, r2, #24
	buf[3] = (unsigned char)x;
 8012228:	71ea      	strb	r2, [r5, #7]
	buf[0] = (unsigned char)(x >> 24);
 801222a:	7129      	strb	r1, [r5, #4]
	buf[1] = (unsigned char)(x >> 16);
 801222c:	0c11      	lsrs	r1, r2, #16
	buf[2] = (unsigned char)(x >> 8);
 801222e:	0a12      	lsrs	r2, r2, #8
	buf[3] = (unsigned char)x;
 8012230:	72eb      	strb	r3, [r5, #11]
	buf[1] = (unsigned char)(x >> 16);
 8012232:	7169      	strb	r1, [r5, #5]
	buf[2] = (unsigned char)(x >> 8);
 8012234:	71aa      	strb	r2, [r5, #6]
	buf[0] = (unsigned char)(x >> 24);
 8012236:	0e19      	lsrs	r1, r3, #24
	buf[1] = (unsigned char)(x >> 16);
 8012238:	0c1a      	lsrs	r2, r3, #16
	buf[2] = (unsigned char)(x >> 8);
 801223a:	0a1b      	lsrs	r3, r3, #8
	buf[0] = (unsigned char)(x >> 24);
 801223c:	7229      	strb	r1, [r5, #8]
	buf[1] = (unsigned char)(x >> 16);
 801223e:	7068      	strb	r0, [r5, #1]
	buf[0] = (unsigned char)(x >> 24);
 8012240:	0e21      	lsrs	r1, r4, #24
	buf[1] = (unsigned char)(x >> 16);
 8012242:	726a      	strb	r2, [r5, #9]
	buf[2] = (unsigned char)(x >> 8);
 8012244:	72ab      	strb	r3, [r5, #10]
	buf[1] = (unsigned char)(x >> 16);
 8012246:	0c22      	lsrs	r2, r4, #16
	buf[2] = (unsigned char)(x >> 8);
 8012248:	0a23      	lsrs	r3, r4, #8
	buf[0] = (unsigned char)(x >> 24);
 801224a:	7329      	strb	r1, [r5, #12]
	buf[1] = (unsigned char)(x >> 16);
 801224c:	736a      	strb	r2, [r5, #13]
	buf[2] = (unsigned char)(x >> 8);
 801224e:	73ab      	strb	r3, [r5, #14]
	buf[3] = (unsigned char)x;
 8012250:	73ec      	strb	r4, [r5, #15]
	enc32be(buf, s0);
	enc32be(buf + 4, s1);
	enc32be(buf + 8, s2);
	enc32be(buf + 12, s3);
}
 8012252:	b007      	add	sp, #28
 8012254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012258:	08018f74 	.word	0x08018f74
 801225c:	08018e74 	.word	0x08018e74

08012260 <aes256_keysched.constprop.0>:
aes256_keysched(uint32_t *skey, const void *key)
 8012260:	491d      	ldr	r1, [pc, #116]	; (80122d8 <aes256_keysched.constprop.0+0x78>)
 8012262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012266:	1f02      	subs	r2, r0, #4
 8012268:	4604      	mov	r4, r0
 801226a:	f100 051c 	add.w	r5, r0, #28
 801226e:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8012272:	ba1b      	rev	r3, r3
		skey[i] = dec32be((const unsigned char *)key + (i << 2));
 8012274:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < 8; i ++) {
 8012278:	4295      	cmp	r5, r2
 801227a:	d1f8      	bne.n	801226e <aes256_keysched.constprop.0+0xe>
	for (i = 8, j = 0, k = 0; i < 60; i ++) {
 801227c:	f04f 0800 	mov.w	r8, #0
			tmp = SubWord(tmp) ^ Rcon[k];
 8012280:	4f16      	ldr	r7, [pc, #88]	; (80122dc <aes256_keysched.constprop.0+0x7c>)
 8012282:	f100 06d0 	add.w	r6, r0, #208	; 0xd0
	for (i = 8, j = 0, k = 0; i < 60; i ++) {
 8012286:	4645      	mov	r5, r8
 8012288:	e00e      	b.n	80122a8 <aes256_keysched.constprop.0+0x48>
			tmp = SubWord(tmp) ^ Rcon[k];
 801228a:	ea4f 6030 	mov.w	r0, r0, ror #24
 801228e:	f7ff fecf 	bl	8012030 <SubWord.lto_priv.0>
 8012292:	f857 3028 	ldr.w	r3, [r7, r8, lsl #2]
 8012296:	4058      	eors	r0, r3
		skey[i] = skey[i - 8] ^ tmp;
 8012298:	6823      	ldr	r3, [r4, #0]
 801229a:	4043      	eors	r3, r0
 801229c:	6223      	str	r3, [r4, #32]
	for (i = 8, j = 0, k = 0; i < 60; i ++) {
 801229e:	3404      	adds	r4, #4
 80122a0:	42b4      	cmp	r4, r6
		if (++ j == 8) {
 80122a2:	f105 0501 	add.w	r5, r5, #1
	for (i = 8, j = 0, k = 0; i < 60; i ++) {
 80122a6:	d011      	beq.n	80122cc <aes256_keysched.constprop.0+0x6c>
		tmp = skey[i - 1];
 80122a8:	69e0      	ldr	r0, [r4, #28]
		if (j == 0) {
 80122aa:	2d00      	cmp	r5, #0
 80122ac:	d0ed      	beq.n	801228a <aes256_keysched.constprop.0+0x2a>
		} else if (j == 4) {
 80122ae:	2d04      	cmp	r5, #4
 80122b0:	d00e      	beq.n	80122d0 <aes256_keysched.constprop.0+0x70>
		skey[i] = skey[i - 8] ^ tmp;
 80122b2:	6823      	ldr	r3, [r4, #0]
		if (++ j == 8) {
 80122b4:	3501      	adds	r5, #1
		skey[i] = skey[i - 8] ^ tmp;
 80122b6:	4043      	eors	r3, r0
		if (++ j == 8) {
 80122b8:	2d08      	cmp	r5, #8
		skey[i] = skey[i - 8] ^ tmp;
 80122ba:	6223      	str	r3, [r4, #32]
	for (i = 8, j = 0, k = 0; i < 60; i ++) {
 80122bc:	f104 0404 	add.w	r4, r4, #4
			k ++;
 80122c0:	bf04      	itt	eq
 80122c2:	f108 0801 	addeq.w	r8, r8, #1
			j = 0;
 80122c6:	2500      	moveq	r5, #0
	for (i = 8, j = 0, k = 0; i < 60; i ++) {
 80122c8:	42b4      	cmp	r4, r6
 80122ca:	d1ed      	bne.n	80122a8 <aes256_keysched.constprop.0+0x48>
}
 80122cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			tmp = SubWord(tmp);
 80122d0:	f7ff feae 	bl	8012030 <SubWord.lto_priv.0>
 80122d4:	e7e0      	b.n	8012298 <aes256_keysched.constprop.0+0x38>
 80122d6:	bf00      	nop
 80122d8:	200181cc 	.word	0x200181cc
 80122dc:	0801e6a0 	.word	0x0801e6a0

080122e0 <AES256_CTR_DRBG_Update.constprop.0>:
AES256_CTR_DRBG_Update(unsigned char *provided_data,
 80122e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122e4:	4f18      	ldr	r7, [pc, #96]	; (8012348 <AES256_CTR_DRBG_Update.constprop.0+0x68>)
 80122e6:	b0c8      	sub	sp, #288	; 0x120
 80122e8:	466e      	mov	r6, sp
 80122ea:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80122ee:	1e7d      	subs	r5, r7, #1
                V[j] = 0x00;
 80122f0:	2400      	movs	r4, #0
 80122f2:	4b16      	ldr	r3, [pc, #88]	; (801234c <AES256_CTR_DRBG_Update.constprop.0+0x6c>)
            if ( V[j] == 0xff )
 80122f4:	4619      	mov	r1, r3
 80122f6:	f813 2901 	ldrb.w	r2, [r3], #-1
 80122fa:	2aff      	cmp	r2, #255	; 0xff
 80122fc:	d120      	bne.n	8012340 <AES256_CTR_DRBG_Update.constprop.0+0x60>
        for (int j=15; j>=0; j--) {
 80122fe:	42ab      	cmp	r3, r5
                V[j] = 0x00;
 8012300:	705c      	strb	r4, [r3, #1]
        for (int j=15; j>=0; j--) {
 8012302:	d1f7      	bne.n	80122f4 <AES256_CTR_DRBG_Update.constprop.0+0x14>
void
AES256_ECB(unsigned char *key, unsigned char *ctr, unsigned char *buffer)
{
	uint32_t skey[60];

	aes256_keysched(skey, key);
 8012304:	4640      	mov	r0, r8
 8012306:	f7ff ffab 	bl	8012260 <aes256_keysched.constprop.0>
	memmove(buffer, ctr, 16);
 801230a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801230e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	aes256_encrypt(skey, buffer);
 8012312:	4631      	mov	r1, r6
 8012314:	4640      	mov	r0, r8
    for (int i=0; i<3; i++) {
 8012316:	3610      	adds	r6, #16
	aes256_encrypt(skey, buffer);
 8012318:	f7ff fea2 	bl	8012060 <aes256_encrypt.lto_priv.0>
    for (int i=0; i<3; i++) {
 801231c:	4546      	cmp	r6, r8
 801231e:	d1e8      	bne.n	80122f2 <AES256_CTR_DRBG_Update.constprop.0+0x12>
    memcpy(Key, temp, 32);
 8012320:	466c      	mov	r4, sp
 8012322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012324:	4d0a      	ldr	r5, [pc, #40]	; (8012350 <AES256_CTR_DRBG_Update.constprop.0+0x70>)
 8012326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012328:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    memcpy(V, temp+32, 16);
 801232c:	ae08      	add	r6, sp, #32
    memcpy(Key, temp, 32);
 801232e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    memcpy(V, temp+32, 16);
 8012332:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8012336:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
}
 801233a:	b048      	add	sp, #288	; 0x120
 801233c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                V[j]++;
 8012340:	3201      	adds	r2, #1
 8012342:	700a      	strb	r2, [r1, #0]
                break;
 8012344:	e7de      	b.n	8012304 <AES256_CTR_DRBG_Update.constprop.0+0x24>
 8012346:	bf00      	nop
 8012348:	200181f0 	.word	0x200181f0
 801234c:	200181ff 	.word	0x200181ff
 8012350:	200181d0 	.word	0x200181d0
	...

08012360 <zint_rebuild_CRT.constprop.0>:
zint_rebuild_CRT(uint32_t *restrict xx, size_t xlen, size_t xstride,
 8012360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012364:	b08f      	sub	sp, #60	; 0x3c
	for (u = 1; u < xlen; u ++) {
 8012366:	2901      	cmp	r1, #1
zint_rebuild_CRT(uint32_t *restrict xx, size_t xlen, size_t xstride,
 8012368:	920d      	str	r2, [sp, #52]	; 0x34
	tmp[0] = primes[0].p;
 801236a:	9a19      	ldr	r2, [sp, #100]	; 0x64
zint_rebuild_CRT(uint32_t *restrict xx, size_t xlen, size_t xstride,
 801236c:	9304      	str	r3, [sp, #16]
	tmp[0] = primes[0].p;
 801236e:	4b7e      	ldr	r3, [pc, #504]	; (8012568 <zint_rebuild_CRT.constprop.0+0x208>)
 8012370:	6013      	str	r3, [r2, #0]
zint_rebuild_CRT(uint32_t *restrict xx, size_t xlen, size_t xstride,
 8012372:	e9cd 100b 	strd	r1, r0, [sp, #44]	; 0x2c
	for (u = 1; u < xlen; u ++) {
 8012376:	f240 80a4 	bls.w	80124c2 <zint_rebuild_CRT.constprop.0+0x162>
 801237a:	4b7c      	ldr	r3, [pc, #496]	; (801256c <zint_rebuild_CRT.constprop.0+0x20c>)
 801237c:	930a      	str	r3, [sp, #40]	; 0x28
		for (v = 0, x = xx; v < num; v ++, x += xstride) {
 801237e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012380:	009b      	lsls	r3, r3, #2
 8012382:	9308      	str	r3, [sp, #32]
	for (u = 1; u < xlen; u ++) {
 8012384:	2301      	movs	r3, #1
 8012386:	9303      	str	r3, [sp, #12]
 8012388:	9b19      	ldr	r3, [sp, #100]	; 0x64
		for (v = 0, x = xx; v < num; v ++, x += xstride) {
 801238a:	f04f 0900 	mov.w	r9, #0
 801238e:	3b04      	subs	r3, #4
 8012390:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012394:	9305      	str	r3, [sp, #20]
		p = primes[u].p;
 8012396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012398:	68dd      	ldr	r5, [r3, #12]
		s = primes[u].s;
 801239a:	695b      	ldr	r3, [r3, #20]
 801239c:	9306      	str	r3, [sp, #24]
	y = 2 - p;
 801239e:	f1c5 0302 	rsb	r3, r5, #2
	y *= 2 - p * y;
 80123a2:	fb03 f205 	mul.w	r2, r3, r5
 80123a6:	f1c2 0202 	rsb	r2, r2, #2
 80123aa:	fb02 f303 	mul.w	r3, r2, r3
	y *= 2 - p * y;
 80123ae:	fb03 f205 	mul.w	r2, r3, r5
 80123b2:	f1c2 0202 	rsb	r2, r2, #2
 80123b6:	fb02 f303 	mul.w	r3, r2, r3
	y *= 2 - p * y;
 80123ba:	fb03 f205 	mul.w	r2, r3, r5
 80123be:	f1c2 0202 	rsb	r2, r2, #2
 80123c2:	fb02 f303 	mul.w	r3, r2, r3
	y *= 2 - p * y;
 80123c6:	fb03 f205 	mul.w	r2, r3, r5
 80123ca:	3a02      	subs	r2, #2
	return (uint32_t)0x7FFFFFFF & -y;
 80123cc:	fb02 f303 	mul.w	r3, r2, r3
 80123d0:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
		R2 = modp_R2(p, p0i);
 80123d4:	4651      	mov	r1, sl
 80123d6:	4628      	mov	r0, r5
 80123d8:	f7fb fd0a 	bl	800ddf0 <modp_R2.lto_priv.0>
		for (v = 0, x = xx; v < num; v ++, x += xstride) {
 80123dc:	9b04      	ldr	r3, [sp, #16]
		R2 = modp_R2(p, p0i);
 80123de:	9007      	str	r0, [sp, #28]
		for (v = 0, x = xx; v < num; v ++, x += xstride) {
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d049      	beq.n	8012478 <zint_rebuild_CRT.constprop.0+0x118>
 80123e4:	9b03      	ldr	r3, [sp, #12]
 80123e6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80123e8:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80123ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123ee:	2700      	movs	r7, #0
 80123f0:	18f4      	adds	r4, r6, r3
			xq = zint_mod_small_unsigned(x, u, p, p0i, R2);
 80123f2:	9b07      	ldr	r3, [sp, #28]
 80123f4:	9903      	ldr	r1, [sp, #12]
 80123f6:	9300      	str	r3, [sp, #0]
 80123f8:	462a      	mov	r2, r5
 80123fa:	4653      	mov	r3, sl
 80123fc:	4630      	mov	r0, r6
 80123fe:	f7fb fe3f 	bl	800e080 <zint_mod_small_unsigned.lto_priv.0>
	d = a - b;
 8012402:	f856 2008 	ldr.w	r2, [r6, r8]
 8012406:	f8dd c014 	ldr.w	ip, [sp, #20]
 801240a:	1a12      	subs	r2, r2, r0
	d += p & -(d >> 31);
 801240c:	ea05 73e2 	and.w	r3, r5, r2, asr #31
 8012410:	441a      	add	r2, r3
	z = (uint64_t)a * (uint64_t)b;
 8012412:	9b06      	ldr	r3, [sp, #24]
 8012414:	fba2 1203 	umull	r1, r2, r2, r3
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
 8012418:	fba1 300a 	umull	r3, r0, r1, sl
 801241c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012420:	fba3 3005 	umull	r3, r0, r3, r5
	d = (uint32_t)((z + w) >> 31) - p;
 8012424:	185b      	adds	r3, r3, r1
 8012426:	eb40 0002 	adc.w	r0, r0, r2
 801242a:	0fdb      	lsrs	r3, r3, #31
 801242c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8012430:	1b5b      	subs	r3, r3, r5
	d += p & -(d >> 31);
 8012432:	ea05 72e3 	and.w	r2, r5, r3, asr #31
 8012436:	4413      	add	r3, r2
 8012438:	eb08 0e06 	add.w	lr, r8, r6
 801243c:	1f32      	subs	r2, r6, #4
	cc = 0;
 801243e:	2100      	movs	r1, #0
		z = (uint64_t)yw * (uint64_t)s + (uint64_t)xw + (uint64_t)cc;
 8012440:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012444:	f85c bf04 	ldr.w	fp, [ip, #4]!
 8012448:	1841      	adds	r1, r0, r1
 801244a:	eb49 0009 	adc.w	r0, r9, r9
 801244e:	fbeb 1003 	umlal	r1, r0, fp, r3
		x[u] = (uint32_t)z & 0x7FFFFFFF;
 8012452:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
	for (u = 0; u < len; u ++) {
 8012456:	4294      	cmp	r4, r2
		cc = (uint32_t)(z >> 31);
 8012458:	ea4f 71d1 	mov.w	r1, r1, lsr #31
		x[u] = (uint32_t)z & 0x7FFFFFFF;
 801245c:	f8c2 b000 	str.w	fp, [r2]
		cc = (uint32_t)(z >> 31);
 8012460:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
	for (u = 0; u < len; u ++) {
 8012464:	d1ec      	bne.n	8012440 <zint_rebuild_CRT.constprop.0+0xe0>
		for (v = 0, x = xx; v < num; v ++, x += xstride) {
 8012466:	9b08      	ldr	r3, [sp, #32]
	x[len] = cc;
 8012468:	f8ce 1000 	str.w	r1, [lr]
		for (v = 0, x = xx; v < num; v ++, x += xstride) {
 801246c:	441e      	add	r6, r3
 801246e:	441c      	add	r4, r3
 8012470:	9b04      	ldr	r3, [sp, #16]
 8012472:	3701      	adds	r7, #1
 8012474:	429f      	cmp	r7, r3
 8012476:	d1bc      	bne.n	80123f2 <zint_rebuild_CRT.constprop.0+0x92>
 8012478:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801247a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801247c:	9905      	ldr	r1, [sp, #20]
	cc = 0;
 801247e:	2200      	movs	r2, #0
 8012480:	181c      	adds	r4, r3, r0
		z = (uint64_t)m[u] * (uint64_t)x + cc;
 8012482:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8012486:	fba3 3005 	umull	r3, r0, r3, r5
 801248a:	189b      	adds	r3, r3, r2
 801248c:	f140 0200 	adc.w	r2, r0, #0
		m[u] = (uint32_t)z & 0x7FFFFFFF;
 8012490:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
	for (u = 0; u < mlen; u ++) {
 8012494:	428c      	cmp	r4, r1
		cc = (uint32_t)(z >> 31);
 8012496:	ea4f 73d3 	mov.w	r3, r3, lsr #31
		m[u] = (uint32_t)z & 0x7FFFFFFF;
 801249a:	6008      	str	r0, [r1, #0]
		cc = (uint32_t)(z >> 31);
 801249c:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
	for (u = 0; u < mlen; u ++) {
 80124a0:	d1ef      	bne.n	8012482 <zint_rebuild_CRT.constprop.0+0x122>
		tmp[u] = zint_mul_small(tmp, u, p);
 80124a2:	9b03      	ldr	r3, [sp, #12]
 80124a4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80124a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (u = 1; u < xlen; u ++) {
 80124aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124ac:	320c      	adds	r2, #12
 80124ae:	920a      	str	r2, [sp, #40]	; 0x28
 80124b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124b2:	3204      	adds	r2, #4
 80124b4:	9209      	str	r2, [sp, #36]	; 0x24
 80124b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80124b8:	3301      	adds	r3, #1
 80124ba:	4293      	cmp	r3, r2
 80124bc:	9303      	str	r3, [sp, #12]
 80124be:	f47f af6a 	bne.w	8012396 <zint_rebuild_CRT.constprop.0+0x36>
	if (normalize_signed) {
 80124c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d04b      	beq.n	8012560 <zint_rebuild_CRT.constprop.0+0x200>
		for (u = 0, x = xx; u < num; u ++, x += xstride) {
 80124c8:	9b04      	ldr	r3, [sp, #16]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d048      	beq.n	8012560 <zint_rebuild_CRT.constprop.0+0x200>
 80124ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124d0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80124d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80124d6:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80124da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124dc:	f1ab 0e04 	sub.w	lr, fp, #4
 80124e0:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 80124e4:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 80124e8:	f04f 0800 	mov.w	r8, #0
	while (u -- > 0) {
 80124ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124ee:	b383      	cbz	r3, 8012552 <zint_rebuild_CRT.constprop.0+0x1f2>
	r = 0;
 80124f0:	2500      	movs	r5, #0
 80124f2:	f10e 0604 	add.w	r6, lr, #4
	while (u -- > 0) {
 80124f6:	46d4      	mov	ip, sl
	bb = 0;
 80124f8:	4629      	mov	r1, r5
		wp = (p[u] >> 1) | (bb << 30);
 80124fa:	078c      	lsls	r4, r1, #30
 80124fc:	f85c 1d04 	ldr.w	r1, [ip, #-4]!
 8012500:	4630      	mov	r0, r6
		wx = x[u];
 8012502:	f856 7d04 	ldr.w	r7, [r6, #-4]!
		wp = (p[u] >> 1) | (bb << 30);
 8012506:	ea44 0451 	orr.w	r4, r4, r1, lsr #1
		cc = ((-cc) >> 31) | -(cc >> 31);
 801250a:	1b3b      	subs	r3, r7, r4
		r |= cc & ((r & 1) - 1);
 801250c:	f005 0201 	and.w	r2, r5, #1
		cc = wp - wx;
 8012510:	1be4      	subs	r4, r4, r7
		cc = ((-cc) >> 31) | -(cc >> 31);
 8012512:	0fdb      	lsrs	r3, r3, #31
		r |= cc & ((r & 1) - 1);
 8012514:	3a01      	subs	r2, #1
		cc = ((-cc) >> 31) | -(cc >> 31);
 8012516:	ea43 73e4 	orr.w	r3, r3, r4, asr #31
		r |= cc & ((r & 1) - 1);
 801251a:	4013      	ands	r3, r2
	while (u -- > 0) {
 801251c:	45b3      	cmp	fp, r6
		bb = p[u] & 1;
 801251e:	f001 0101 	and.w	r1, r1, #1
		r |= cc & ((r & 1) - 1);
 8012522:	ea45 0503 	orr.w	r5, r5, r3
	while (u -- > 0) {
 8012526:	d1e8      	bne.n	80124fa <zint_rebuild_CRT.constprop.0+0x19a>
 8012528:	9b19      	ldr	r3, [sp, #100]	; 0x64
	m = -ctl;
 801252a:	17ed      	asrs	r5, r5, #31
 801252c:	1f19      	subs	r1, r3, #4
 801252e:	3808      	subs	r0, #8
 8012530:	2300      	movs	r3, #0
		aw = a[u];
 8012532:	f850 2f04 	ldr.w	r2, [r0, #4]!
		w = aw - b[u] - cc;
 8012536:	f851 4f04 	ldr.w	r4, [r1, #4]!
 801253a:	1ad3      	subs	r3, r2, r3
 801253c:	1b1b      	subs	r3, r3, r4
		aw ^= ((w & 0x7FFFFFFF) ^ aw) & m;
 801253e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8012542:	4054      	eors	r4, r2
 8012544:	402c      	ands	r4, r5
 8012546:	4062      	eors	r2, r4
	for (u = 0; u < len; u ++) {
 8012548:	4586      	cmp	lr, r0
		a[u] = aw;
 801254a:	6002      	str	r2, [r0, #0]
		cc = w >> 31;
 801254c:	ea4f 73d3 	mov.w	r3, r3, lsr #31
	for (u = 0; u < len; u ++) {
 8012550:	d1ef      	bne.n	8012532 <zint_rebuild_CRT.constprop.0+0x1d2>
		for (u = 0, x = xx; u < num; u ++, x += xstride) {
 8012552:	9b04      	ldr	r3, [sp, #16]
 8012554:	f108 0801 	add.w	r8, r8, #1
 8012558:	4543      	cmp	r3, r8
 801255a:	44cb      	add	fp, r9
 801255c:	44ce      	add	lr, r9
 801255e:	d1c5      	bne.n	80124ec <zint_rebuild_CRT.constprop.0+0x18c>
}
 8012560:	b00f      	add	sp, #60	; 0x3c
 8012562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012566:	bf00      	nop
 8012568:	7fffd801 	.word	0x7fffd801
 801256c:	08016dfc 	.word	0x08016dfc

08012570 <falcon_inner_trim_i8_encode.constprop.0>:
Zf(trim_i8_encode)(
 8012570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	maxv = (1 << (bits - 1)) - 1;
 8012574:	1e5c      	subs	r4, r3, #1
 8012576:	f04f 0e01 	mov.w	lr, #1
 801257a:	fa0e fe04 	lsl.w	lr, lr, r4
 801257e:	1e57      	subs	r7, r2, #1
Zf(trim_i8_encode)(
 8012580:	4606      	mov	r6, r0
 8012582:	f202 14ff 	addw	r4, r2, #511	; 0x1ff
	minv = -maxv;
 8012586:	f1ce 0001 	rsb	r0, lr, #1
 801258a:	463a      	mov	r2, r7
		if (x[u] < minv || x[u] > maxv) {
 801258c:	f912 cf01 	ldrsb.w	ip, [r2, #1]!
 8012590:	4560      	cmp	r0, ip
 8012592:	dc36      	bgt.n	8012602 <falcon_inner_trim_i8_encode.constprop.0+0x92>
 8012594:	45e6      	cmp	lr, ip
 8012596:	dd34      	ble.n	8012602 <falcon_inner_trim_i8_encode.constprop.0+0x92>
	for (u = 0; u < n; u ++) {
 8012598:	42a2      	cmp	r2, r4
 801259a:	d1f7      	bne.n	801258c <falcon_inner_trim_i8_encode.constprop.0+0x1c>
	out_len = ((n * bits) + 7) >> 3;
 801259c:	025a      	lsls	r2, r3, #9
	if (out_len > max_out_len) {
 801259e:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
	out_len = ((n * bits) + 7) >> 3;
 80125a2:	ea4f 00d2 	mov.w	r0, r2, lsr #3
	if (out_len > max_out_len) {
 80125a6:	d32c      	bcc.n	8012602 <falcon_inner_trim_i8_encode.constprop.0+0x92>
 80125a8:	f04f 38ff 	mov.w	r8, #4294967295
 80125ac:	fa08 f803 	lsl.w	r8, r8, r3
	acc_len = 0;
 80125b0:	2500      	movs	r5, #0
 80125b2:	ea6f 0808 	mvn.w	r8, r8
	acc = 0;
 80125b6:	46ae      	mov	lr, r5
		acc = (acc << bits) | ((uint8_t)x[u] & mask);
 80125b8:	f817 2f01 	ldrb.w	r2, [r7, #1]!
		acc_len += bits;
 80125bc:	441d      	add	r5, r3
		acc = (acc << bits) | ((uint8_t)x[u] & mask);
 80125be:	fa0e fe03 	lsl.w	lr, lr, r3
 80125c2:	ea02 0208 	and.w	r2, r2, r8
		while (acc_len >= 8) {
 80125c6:	2d07      	cmp	r5, #7
		acc = (acc << bits) | ((uint8_t)x[u] & mask);
 80125c8:	ea42 0e0e 	orr.w	lr, r2, lr
		while (acc_len >= 8) {
 80125cc:	d90f      	bls.n	80125ee <falcon_inner_trim_i8_encode.constprop.0+0x7e>
 80125ce:	4631      	mov	r1, r6
 80125d0:	462a      	mov	r2, r5
			acc_len -= 8;
 80125d2:	3a08      	subs	r2, #8
			*buf ++ = (uint8_t)(acc >> acc_len);
 80125d4:	fa2e fc02 	lsr.w	ip, lr, r2
		while (acc_len >= 8) {
 80125d8:	2a07      	cmp	r2, #7
			*buf ++ = (uint8_t)(acc >> acc_len);
 80125da:	f801 cb01 	strb.w	ip, [r1], #1
		while (acc_len >= 8) {
 80125de:	d8f8      	bhi.n	80125d2 <falcon_inner_trim_i8_encode.constprop.0+0x62>
			*buf ++ = (uint8_t)(acc >> acc_len);
 80125e0:	f1a5 0208 	sub.w	r2, r5, #8
 80125e4:	eb06 02d2 	add.w	r2, r6, r2, lsr #3
			acc_len -= 8;
 80125e8:	f005 0507 	and.w	r5, r5, #7
			*buf ++ = (uint8_t)(acc >> acc_len);
 80125ec:	1c56      	adds	r6, r2, #1
	for (u = 0; u < n; u ++) {
 80125ee:	42a7      	cmp	r7, r4
 80125f0:	d1e2      	bne.n	80125b8 <falcon_inner_trim_i8_encode.constprop.0+0x48>
	if (acc_len > 0) {
 80125f2:	b13d      	cbz	r5, 8012604 <falcon_inner_trim_i8_encode.constprop.0+0x94>
		*buf ++ = (uint8_t)(acc << (8 - acc_len));
 80125f4:	f1c5 0508 	rsb	r5, r5, #8
 80125f8:	fa0e fe05 	lsl.w	lr, lr, r5
 80125fc:	f886 e000 	strb.w	lr, [r6]
 8012600:	e000      	b.n	8012604 <falcon_inner_trim_i8_encode.constprop.0+0x94>
			return 0;
 8012602:	2000      	movs	r0, #0
}
 8012604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08012610 <falcon_inner_trim_i8_decode.constprop.0>:
Zf(trim_i8_decode)(
 8012610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	in_len = ((n * bits) + 7) >> 3;
 8012614:	024c      	lsls	r4, r1, #9
	if (in_len > max_in_len) {
 8012616:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
 801261a:	d349      	bcc.n	80126b0 <falcon_inner_trim_i8_decode.constprop.0+0xa0>
	mask2 = (uint32_t)1 << (bits - 1);
 801261c:	1e4b      	subs	r3, r1, #1
 801261e:	2601      	movs	r6, #1
 8012620:	f04f 35ff 	mov.w	r5, #4294967295
	u = 0;
 8012624:	f04f 0e00 	mov.w	lr, #0
	mask2 = (uint32_t)1 << (bits - 1);
 8012628:	409e      	lsls	r6, r3
 801262a:	408d      	lsls	r5, r1
 801262c:	4680      	mov	r8, r0
 801262e:	43ed      	mvns	r5, r5
 8012630:	08e0      	lsrs	r0, r4, #3
	acc_len = 0;
 8012632:	46f4      	mov	ip, lr
	acc = 0;
 8012634:	4674      	mov	r4, lr
			if (w == -mask2) {
 8012636:	4277      	negs	r7, r6
		acc = (acc << 8) | *buf ++;
 8012638:	f812 3b01 	ldrb.w	r3, [r2], #1
		acc_len += 8;
 801263c:	f10c 0c08 	add.w	ip, ip, #8
		while (acc_len >= bits && u < n) {
 8012640:	4561      	cmp	r1, ip
		acc = (acc << 8) | *buf ++;
 8012642:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
		while (acc_len >= bits && u < n) {
 8012646:	d829      	bhi.n	801269c <falcon_inner_trim_i8_decode.constprop.0+0x8c>
 8012648:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 801264c:	d229      	bcs.n	80126a2 <falcon_inner_trim_i8_decode.constprop.0+0x92>
			acc_len -= bits;
 801264e:	ebac 0c01 	sub.w	ip, ip, r1
			w = (acc >> acc_len) & mask1;
 8012652:	fa24 f90c 	lsr.w	r9, r4, ip
 8012656:	ea09 0905 	and.w	r9, r9, r5
			w |= -(w & mask2);
 801265a:	ea06 0309 	and.w	r3, r6, r9
 801265e:	425b      	negs	r3, r3
 8012660:	ea43 0309 	orr.w	r3, r3, r9
			if (w == -mask2) {
 8012664:	429f      	cmp	r7, r3
 8012666:	d023      	beq.n	80126b0 <falcon_inner_trim_i8_decode.constprop.0+0xa0>
 8012668:	f10e 39ff 	add.w	r9, lr, #4294967295
 801266c:	44c1      	add	r9, r8
 801266e:	e00f      	b.n	8012690 <falcon_inner_trim_i8_decode.constprop.0+0x80>
		while (acc_len >= bits && u < n) {
 8012670:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 8012674:	d015      	beq.n	80126a2 <falcon_inner_trim_i8_decode.constprop.0+0x92>
			acc_len -= bits;
 8012676:	ebac 0c01 	sub.w	ip, ip, r1
			w = (acc >> acc_len) & mask1;
 801267a:	fa24 fa0c 	lsr.w	sl, r4, ip
 801267e:	ea0a 0a05 	and.w	sl, sl, r5
			w |= -(w & mask2);
 8012682:	ea06 030a 	and.w	r3, r6, sl
 8012686:	425b      	negs	r3, r3
 8012688:	ea43 030a 	orr.w	r3, r3, sl
			if (w == -mask2) {
 801268c:	429f      	cmp	r7, r3
 801268e:	d00f      	beq.n	80126b0 <falcon_inner_trim_i8_decode.constprop.0+0xa0>
		while (acc_len >= bits && u < n) {
 8012690:	4561      	cmp	r1, ip
			x[u ++] = (int8_t)*(int32_t *)&w;
 8012692:	f809 3f01 	strb.w	r3, [r9, #1]!
 8012696:	f10e 0e01 	add.w	lr, lr, #1
		while (acc_len >= bits && u < n) {
 801269a:	d9e9      	bls.n	8012670 <falcon_inner_trim_i8_decode.constprop.0+0x60>
	while (u < n) {
 801269c:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 80126a0:	d3ca      	bcc.n	8012638 <falcon_inner_trim_i8_decode.constprop.0+0x28>
	if ((acc & (((uint32_t)1 << acc_len) - 1)) != 0) {
 80126a2:	f04f 33ff 	mov.w	r3, #4294967295
 80126a6:	fa03 f30c 	lsl.w	r3, r3, ip
 80126aa:	ea34 0303 	bics.w	r3, r4, r3
 80126ae:	d000      	beq.n	80126b2 <falcon_inner_trim_i8_decode.constprop.0+0xa2>
		return 0;
 80126b0:	2000      	movs	r0, #0
}
 80126b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126b6:	bf00      	nop
	...

080126c0 <mq_NTT.constprop.0>:
mq_NTT(uint16_t *a, unsigned logn)
 80126c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c4:	b087      	sub	sp, #28
		t = ht;
 80126c6:	2309      	movs	r3, #9
 80126c8:	9304      	str	r3, [sp, #16]
	for (m = 1; m < n; m <<= 1) {
 80126ca:	2301      	movs	r3, #1
 80126cc:	9303      	str	r3, [sp, #12]
 80126ce:	1e83      	subs	r3, r0, #2
		t = ht;
 80126d0:	f641 6ed0 	movw	lr, #7888	; 0x1ed0
	t = n;
 80126d4:	f44f 7800 	mov.w	r8, #512	; 0x200
 80126d8:	9305      	str	r3, [sp, #20]
	z -= Q;
 80126da:	f46f 5940 	mvn.w	r9, #12288	; 0x3000
	z += Q & -(z >> 31);
 80126de:	f243 0101 	movw	r1, #12289	; 0x3001
 80126e2:	4b2a      	ldr	r3, [pc, #168]	; (801278c <mq_NTT.constprop.0+0xcc>)
 80126e4:	9a03      	ldr	r2, [sp, #12]
		ht = t >> 1;
 80126e6:	ea4f 0758 	mov.w	r7, r8, lsr #1
 80126ea:	eb03 0642 	add.w	r6, r3, r2, lsl #1
 80126ee:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80126f2:	9302      	str	r3, [sp, #8]
 80126f4:	007b      	lsls	r3, r7, #1
 80126f6:	9301      	str	r3, [sp, #4]
 80126f8:	9b05      	ldr	r3, [sp, #20]
 80126fa:	eb03 0447 	add.w	r4, r3, r7, lsl #1
 80126fe:	4b24      	ldr	r3, [pc, #144]	; (8012790 <mq_NTT.constprop.0+0xd0>)
		for (i = 0, j1 = 0; i < m; i ++, j1 += t) {
 8012700:	2500      	movs	r5, #0
 8012702:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
			for (j = j1; j < j2; j ++) {
 8012706:	197b      	adds	r3, r7, r5
 8012708:	429d      	cmp	r5, r3
 801270a:	d228      	bcs.n	801275e <mq_NTT.constprop.0+0x9e>
 801270c:	9b01      	ldr	r3, [sp, #4]
 801270e:	1ca0      	adds	r0, r4, #2
 8012710:	1ae2      	subs	r2, r4, r3
				v = mq_montymul(a[j + ht], s);
 8012712:	f8b0 a000 	ldrh.w	sl, [r0]
	z = x * y;
 8012716:	fb0e fa0a 	mul.w	sl, lr, sl
	w = ((z * Q0I) & 0xFFFF) * Q;
 801271a:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 801271e:	ebca 3303 	rsb	r3, sl, r3, lsl #12
 8012722:	b29b      	uxth	r3, r3
 8012724:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8012728:	eb03 330b 	add.w	r3, r3, fp, lsl #12
	z = (z + w) >> 16;
 801272c:	4453      	add	r3, sl
				u = a[j];
 801272e:	f832 bf02 	ldrh.w	fp, [r2, #2]!
	z -= Q;
 8012732:	eb09 4313 	add.w	r3, r9, r3, lsr #16
	z += Q & -(z >> 31);
 8012736:	ea01 7ae3 	and.w	sl, r1, r3, asr #31
 801273a:	4453      	add	r3, sl
	d = x + y - Q;
 801273c:	ebab 0a01 	sub.w	sl, fp, r1
 8012740:	449a      	add	sl, r3
	d = x - y;
 8012742:	ebab 0303 	sub.w	r3, fp, r3
	d += Q & -(d >> 31);
 8012746:	ea01 7bea 	and.w	fp, r1, sl, asr #31
 801274a:	44da      	add	sl, fp
				a[j] = (uint16_t)mq_add(u, v);
 801274c:	f8a2 a000 	strh.w	sl, [r2]
	d += Q & -(d >> 31);
 8012750:	ea01 7ae3 	and.w	sl, r1, r3, asr #31
 8012754:	4453      	add	r3, sl
			for (j = j1; j < j2; j ++) {
 8012756:	4294      	cmp	r4, r2
				a[j + ht] = (uint16_t)mq_sub(u, v);
 8012758:	f820 3b02 	strh.w	r3, [r0], #2
			for (j = j1; j < j2; j ++) {
 801275c:	d1d9      	bne.n	8012712 <mq_NTT.constprop.0+0x52>
		for (i = 0, j1 = 0; i < m; i ++, j1 += t) {
 801275e:	45b4      	cmp	ip, r6
 8012760:	4445      	add	r5, r8
 8012762:	d004      	beq.n	801276e <mq_NTT.constprop.0+0xae>
 8012764:	9b02      	ldr	r3, [sp, #8]
			s = GMb[m + i];
 8012766:	f836 ef02 	ldrh.w	lr, [r6, #2]!
 801276a:	441c      	add	r4, r3
 801276c:	e7cb      	b.n	8012706 <mq_NTT.constprop.0+0x46>
	for (m = 1; m < n; m <<= 1) {
 801276e:	9b03      	ldr	r3, [sp, #12]
 8012770:	9a04      	ldr	r2, [sp, #16]
 8012772:	005b      	lsls	r3, r3, #1
 8012774:	3a01      	subs	r2, #1
 8012776:	9303      	str	r3, [sp, #12]
 8012778:	9204      	str	r2, [sp, #16]
 801277a:	d004      	beq.n	8012786 <mq_NTT.constprop.0+0xc6>
			s = GMb[m + i];
 801277c:	4a03      	ldr	r2, [pc, #12]	; (801278c <mq_NTT.constprop.0+0xcc>)
		t = ht;
 801277e:	46b8      	mov	r8, r7
			s = GMb[m + i];
 8012780:	f832 e013 	ldrh.w	lr, [r2, r3, lsl #1]
 8012784:	e7ad      	b.n	80126e2 <mq_NTT.constprop.0+0x22>
}
 8012786:	b007      	add	sp, #28
 8012788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801278c:	0801dea0 	.word	0x0801dea0
 8012790:	0801de9e 	.word	0x0801de9e
	...

080127a0 <mq_iNTT.constprop.0>:
mq_iNTT(uint16_t *a, unsigned logn)
 80127a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a4:	b089      	sub	sp, #36	; 0x24
			s = iGMb[hm + i];
 80127a6:	2309      	movs	r3, #9
 80127a8:	9304      	str	r3, [sp, #16]
	m = n;
 80127aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127ae:	9303      	str	r3, [sp, #12]
 80127b0:	1e83      	subs	r3, r0, #2
mq_iNTT(uint16_t *a, unsigned logn)
 80127b2:	9007      	str	r0, [sp, #28]
			s = iGMb[hm + i];
 80127b4:	f241 59e1 	movw	r9, #5601	; 0x15e1
	t = 1;
 80127b8:	f04f 0a01 	mov.w	sl, #1
 80127bc:	9306      	str	r3, [sp, #24]
	d = x + y - Q;
 80127be:	f46f 5b40 	mvn.w	fp, #12288	; 0x3000
	d += Q & -(d >> 31);
 80127c2:	f243 0c01 	movw	ip, #12289	; 0x3001
		hm = m >> 1;
 80127c6:	9b03      	ldr	r3, [sp, #12]
 80127c8:	4a3f      	ldr	r2, [pc, #252]	; (80128c8 <mq_iNTT.constprop.0+0x128>)
 80127ca:	085b      	lsrs	r3, r3, #1
 80127cc:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
 80127d0:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80127d4:	9202      	str	r2, [sp, #8]
 80127d6:	9a06      	ldr	r2, [sp, #24]
 80127d8:	9305      	str	r3, [sp, #20]
 80127da:	eb02 064a 	add.w	r6, r2, sl, lsl #1
 80127de:	4a3b      	ldr	r2, [pc, #236]	; (80128cc <mq_iNTT.constprop.0+0x12c>)
 80127e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
		dt = t << 1;
 80127e4:	ea4f 084a 	mov.w	r8, sl, lsl #1
 80127e8:	9301      	str	r3, [sp, #4]
		for (i = 0, j1 = 0; i < hm; i ++, j1 += dt) {
 80127ea:	2700      	movs	r7, #0
			for (j = j1; j < j2; j ++) {
 80127ec:	eb0a 0307 	add.w	r3, sl, r7
 80127f0:	429f      	cmp	r7, r3
 80127f2:	d225      	bcs.n	8012840 <mq_iNTT.constprop.0+0xa0>
 80127f4:	eba6 0008 	sub.w	r0, r6, r8
 80127f8:	1cb4      	adds	r4, r6, #2
				u = a[j];
 80127fa:	f830 1f02 	ldrh.w	r1, [r0, #2]!
				v = a[j + t];
 80127fe:	8823      	ldrh	r3, [r4, #0]
	d = x + y - Q;
 8012800:	eb01 020b 	add.w	r2, r1, fp
	d = x - y;
 8012804:	1ac9      	subs	r1, r1, r3
	d = x + y - Q;
 8012806:	441a      	add	r2, r3
	d += Q & -(d >> 31);
 8012808:	ea0c 73e1 	and.w	r3, ip, r1, asr #31
 801280c:	4419      	add	r1, r3
	z = x * y;
 801280e:	fb09 f101 	mul.w	r1, r9, r1
	w = ((z * Q0I) & 0xFFFF) * Q;
 8012812:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8012816:	ebc1 3303 	rsb	r3, r1, r3, lsl #12
 801281a:	b29b      	uxth	r3, r3
 801281c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8012820:	eb03 3305 	add.w	r3, r3, r5, lsl #12
	z = (z + w) >> 16;
 8012824:	440b      	add	r3, r1
	d += Q & -(d >> 31);
 8012826:	ea0c 71e2 	and.w	r1, ip, r2, asr #31
	z -= Q;
 801282a:	ebcc 4313 	rsb	r3, ip, r3, lsr #16
	d += Q & -(d >> 31);
 801282e:	440a      	add	r2, r1
				a[j] = (uint16_t)mq_add(u, v);
 8012830:	8002      	strh	r2, [r0, #0]
	z += Q & -(z >> 31);
 8012832:	ea0c 72e3 	and.w	r2, ip, r3, asr #31
 8012836:	4413      	add	r3, r2
			for (j = j1; j < j2; j ++) {
 8012838:	4286      	cmp	r6, r0
				a[j + t] = (uint16_t)
 801283a:	f824 3b02 	strh.w	r3, [r4], #2
			for (j = j1; j < j2; j ++) {
 801283e:	d1dc      	bne.n	80127fa <mq_iNTT.constprop.0+0x5a>
		for (i = 0, j1 = 0; i < hm; i ++, j1 += dt) {
 8012840:	9b01      	ldr	r3, [sp, #4]
 8012842:	4573      	cmp	r3, lr
 8012844:	4447      	add	r7, r8
 8012846:	d004      	beq.n	8012852 <mq_iNTT.constprop.0+0xb2>
 8012848:	9b02      	ldr	r3, [sp, #8]
			s = iGMb[hm + i];
 801284a:	f83e 9f02 	ldrh.w	r9, [lr, #2]!
 801284e:	441e      	add	r6, r3
 8012850:	e7cc      	b.n	80127ec <mq_iNTT.constprop.0+0x4c>
	while (m > 1) {
 8012852:	9b04      	ldr	r3, [sp, #16]
 8012854:	3b01      	subs	r3, #1
 8012856:	9304      	str	r3, [sp, #16]
 8012858:	d008      	beq.n	801286c <mq_iNTT.constprop.0+0xcc>
		hm = m >> 1;
 801285a:	9b03      	ldr	r3, [sp, #12]
			s = iGMb[hm + i];
 801285c:	4a1a      	ldr	r2, [pc, #104]	; (80128c8 <mq_iNTT.constprop.0+0x128>)
		hm = m >> 1;
 801285e:	089b      	lsrs	r3, r3, #2
		t = dt;
 8012860:	46c2      	mov	sl, r8
			s = iGMb[hm + i];
 8012862:	f832 9013 	ldrh.w	r9, [r2, r3, lsl #1]
 8012866:	9b05      	ldr	r3, [sp, #20]
 8012868:	9303      	str	r3, [sp, #12]
 801286a:	e7ac      	b.n	80127c6 <mq_iNTT.constprop.0+0x26>
 801286c:	2109      	movs	r1, #9
	ni = R;
 801286e:	f640 72fb 	movw	r2, #4091	; 0xffb
	x += Q & -(x & 1);
 8012872:	f243 0001 	movw	r0, #12289	; 0x3001
 8012876:	f342 0300 	sbfx	r3, r2, #0, #1
 801287a:	4003      	ands	r3, r0
 801287c:	441a      	add	r2, r3
	for (m = n; m > 1; m >>= 1) {
 801287e:	3901      	subs	r1, #1
	return (x >> 1);
 8012880:	ea4f 0252 	mov.w	r2, r2, lsr #1
	for (m = n; m > 1; m >>= 1) {
 8012884:	d1f7      	bne.n	8012876 <mq_iNTT.constprop.0+0xd6>
 8012886:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
	z -= Q;
 801288a:	f46f 5540 	mvn.w	r5, #12288	; 0x3000
 801288e:	f203 36fe 	addw	r6, r3, #1022	; 0x3fe
	z += Q & -(z >> 31);
 8012892:	f243 0401 	movw	r4, #12289	; 0x3001
		a[m] = (uint16_t)mq_montymul(a[m], ni);
 8012896:	f830 1f02 	ldrh.w	r1, [r0, #2]!
	z = x * y;
 801289a:	fb02 f101 	mul.w	r1, r2, r1
	w = ((z * Q0I) & 0xFFFF) * Q;
 801289e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80128a2:	ebc1 3303 	rsb	r3, r1, r3, lsl #12
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80128ac:	eb03 3307 	add.w	r3, r3, r7, lsl #12
	z = (z + w) >> 16;
 80128b0:	440b      	add	r3, r1
	z -= Q;
 80128b2:	eb05 4313 	add.w	r3, r5, r3, lsr #16
	z += Q & -(z >> 31);
 80128b6:	ea04 71e3 	and.w	r1, r4, r3, asr #31
 80128ba:	440b      	add	r3, r1
	for (m = 0; m < n; m ++) {
 80128bc:	4286      	cmp	r6, r0
		a[m] = (uint16_t)mq_montymul(a[m], ni);
 80128be:	8003      	strh	r3, [r0, #0]
	for (m = 0; m < n; m ++) {
 80128c0:	d1e9      	bne.n	8012896 <mq_iNTT.constprop.0+0xf6>
}
 80128c2:	b009      	add	sp, #36	; 0x24
 80128c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128c8:	0801e6c8 	.word	0x0801e6c8
 80128cc:	0801e6c6 	.word	0x0801e6c6

080128d0 <chFactoryFindPipe.constprop.0>:
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 80128d0:	b570      	push	{r4, r5, r6, lr}
 80128d2:	2330      	movs	r3, #48	; 0x30
 80128d4:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 80128d8:	4d13      	ldr	r5, [pc, #76]	; (8012928 <chFactoryFindPipe.constprop.0+0x58>)
 80128da:	4628      	mov	r0, r5
 80128dc:	f7f1 fba8 	bl	8004030 <chMtxLockS>
 80128e0:	2300      	movs	r3, #0
 80128e2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 80128e6:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 80128ea:	42ac      	cmp	r4, r5
 80128ec:	d01a      	beq.n	8012924 <chFactoryFindPipe.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80128ee:	4e0f      	ldr	r6, [pc, #60]	; (801292c <chFactoryFindPipe.constprop.0+0x5c>)
 80128f0:	e002      	b.n	80128f8 <chFactoryFindPipe.constprop.0+0x28>
    p = p->next;
 80128f2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80128f4:	42ac      	cmp	r4, r5
 80128f6:	d00f      	beq.n	8012918 <chFactoryFindPipe.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80128f8:	f104 0008 	add.w	r0, r4, #8
 80128fc:	4631      	mov	r1, r6
 80128fe:	f7ed fd47 	bl	8000390 <strcmp>
 8012902:	2800      	cmp	r0, #0
 8012904:	d1f5      	bne.n	80128f2 <chFactoryFindPipe.constprop.0+0x22>
  if (dep != NULL) {
 8012906:	b114      	cbz	r4, 801290e <chFactoryFindPipe.constprop.0+0x3e>
    dep->refs++;
 8012908:	6863      	ldr	r3, [r4, #4]
 801290a:	3301      	adds	r3, #1
 801290c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 801290e:	4806      	ldr	r0, [pc, #24]	; (8012928 <chFactoryFindPipe.constprop.0+0x58>)
 8012910:	f7f1 fc2e 	bl	8004170 <chMtxUnlock>
}
 8012914:	4620      	mov	r0, r4
 8012916:	bd70      	pop	{r4, r5, r6, pc}
  F_UNLOCK();
 8012918:	4803      	ldr	r0, [pc, #12]	; (8012928 <chFactoryFindPipe.constprop.0+0x58>)
  return NULL;
 801291a:	2400      	movs	r4, #0
  F_UNLOCK();
 801291c:	f7f1 fc28 	bl	8004170 <chMtxUnlock>
}
 8012920:	4620      	mov	r0, r4
 8012922:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8012924:	461c      	mov	r4, r3
 8012926:	e7f2      	b.n	801290e <chFactoryFindPipe.constprop.0+0x3e>
 8012928:	20000b18 	.word	0x20000b18
 801292c:	08016220 	.word	0x08016220

08012930 <chFactoryCreatePipe.constprop.0>:
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 8012930:	b538      	push	{r3, r4, r5, lr}
 8012932:	2330      	movs	r3, #48	; 0x30
 8012934:	f383 8811 	msr	BASEPRI, r3
 8012938:	4816      	ldr	r0, [pc, #88]	; (8012994 <chFactoryCreatePipe.constprop.0+0x64>)
 801293a:	f7f1 fb79 	bl	8004030 <chMtxLockS>
 801293e:	2500      	movs	r5, #0
 8012940:	f385 8811 	msr	BASEPRI, r5
  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 8012944:	4914      	ldr	r1, [pc, #80]	; (8012998 <chFactoryCreatePipe.constprop.0+0x68>)
 8012946:	4815      	ldr	r0, [pc, #84]	; (801299c <chFactoryCreatePipe.constprop.0+0x6c>)
 8012948:	2308      	movs	r3, #8
 801294a:	2270      	movs	r2, #112	; 0x70
 801294c:	f7f3 fe08 	bl	8006560 <dyn_create_object_heap.lto_priv.0>
  if (dpp != NULL) {
 8012950:	4604      	mov	r4, r0
 8012952:	b1d0      	cbz	r0, 801298a <chFactoryCreatePipe.constprop.0+0x5a>
    chPipeObjectInit(&dpp->pipe, (uint8_t *)(dpp + 1), size);
 8012954:	f100 0360 	add.w	r3, r0, #96	; 0x60
  PC_INIT(pp);
 8012958:	f100 0130 	add.w	r1, r0, #48	; 0x30
  PW_INIT(pp);
 801295c:	f100 0240 	add.w	r2, r0, #64	; 0x40
  pp->top    = &buf[n];
 8012960:	3070      	adds	r0, #112	; 0x70
  pp->buffer = buf;
 8012962:	e9c4 3004 	strd	r3, r0, [r4, #16]
  pp->wrptr  = buf;
 8012966:	e9c4 3306 	strd	r3, r3, [r4, #24]
  PR_INIT(pp);
 801296a:	f104 0350 	add.w	r3, r4, #80	; 0x50
  pp->rtr    = NULL;
 801296e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
  qp->prev = qp;
 8012972:	e9c4 110c 	strd	r1, r1, [r4, #48]	; 0x30
 8012976:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
 801297a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
  pp->cnt    = (size_t)0;
 801297e:	6225      	str	r5, [r4, #32]
  pp->reset  = false;
 8012980:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  mp->owner = NULL;
 8012984:	63a5      	str	r5, [r4, #56]	; 0x38
 8012986:	64a5      	str	r5, [r4, #72]	; 0x48
 8012988:	65a5      	str	r5, [r4, #88]	; 0x58
  F_UNLOCK();
 801298a:	4802      	ldr	r0, [pc, #8]	; (8012994 <chFactoryCreatePipe.constprop.0+0x64>)
 801298c:	f7f1 fbf0 	bl	8004170 <chMtxUnlock>
}
 8012990:	4620      	mov	r0, r4
 8012992:	bd38      	pop	{r3, r4, r5, pc}
 8012994:	20000b18 	.word	0x20000b18
 8012998:	20000b5c 	.word	0x20000b5c
 801299c:	08016220 	.word	0x08016220

080129a0 <chFactoryFindObjectsFIFO.constprop.0>:
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 80129a0:	b570      	push	{r4, r5, r6, lr}
 80129a2:	2330      	movs	r3, #48	; 0x30
 80129a4:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 80129a8:	4d13      	ldr	r5, [pc, #76]	; (80129f8 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
 80129aa:	4628      	mov	r0, r5
 80129ac:	f7f1 fb40 	bl	8004030 <chMtxLockS>
 80129b0:	2300      	movs	r3, #0
 80129b2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 80129b6:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 80129ba:	42ac      	cmp	r4, r5
 80129bc:	d01a      	beq.n	80129f4 <chFactoryFindObjectsFIFO.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80129be:	4e0f      	ldr	r6, [pc, #60]	; (80129fc <chFactoryFindObjectsFIFO.constprop.0+0x5c>)
 80129c0:	e002      	b.n	80129c8 <chFactoryFindObjectsFIFO.constprop.0+0x28>
    p = p->next;
 80129c2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80129c4:	42ac      	cmp	r4, r5
 80129c6:	d00f      	beq.n	80129e8 <chFactoryFindObjectsFIFO.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80129c8:	f104 0008 	add.w	r0, r4, #8
 80129cc:	4631      	mov	r1, r6
 80129ce:	f7ed fcdf 	bl	8000390 <strcmp>
 80129d2:	2800      	cmp	r0, #0
 80129d4:	d1f5      	bne.n	80129c2 <chFactoryFindObjectsFIFO.constprop.0+0x22>
  if (dep != NULL) {
 80129d6:	b114      	cbz	r4, 80129de <chFactoryFindObjectsFIFO.constprop.0+0x3e>
    dep->refs++;
 80129d8:	6863      	ldr	r3, [r4, #4]
 80129da:	3301      	adds	r3, #1
 80129dc:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 80129de:	4806      	ldr	r0, [pc, #24]	; (80129f8 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
 80129e0:	f7f1 fbc6 	bl	8004170 <chMtxUnlock>
}
 80129e4:	4620      	mov	r0, r4
 80129e6:	bd70      	pop	{r4, r5, r6, pc}
  F_UNLOCK();
 80129e8:	4803      	ldr	r0, [pc, #12]	; (80129f8 <chFactoryFindObjectsFIFO.constprop.0+0x58>)
  return NULL;
 80129ea:	2400      	movs	r4, #0
  F_UNLOCK();
 80129ec:	f7f1 fbc0 	bl	8004170 <chMtxUnlock>
}
 80129f0:	4620      	mov	r0, r4
 80129f2:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 80129f4:	461c      	mov	r4, r3
 80129f6:	e7f2      	b.n	80129de <chFactoryFindObjectsFIFO.constprop.0+0x3e>
 80129f8:	20000b18 	.word	0x20000b18
 80129fc:	08016200 	.word	0x08016200

08012a00 <chFactoryCreateObjectsFIFO.constprop.0>:
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 8012a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a04:	2730      	movs	r7, #48	; 0x30
 8012a06:	b083      	sub	sp, #12
 8012a08:	f387 8811 	msr	BASEPRI, r7
 8012a0c:	4837      	ldr	r0, [pc, #220]	; (8012aec <chFactoryCreateObjectsFIFO.constprop.0+0xec>)
 8012a0e:	f7f1 fb0f 	bl	8004030 <chMtxLockS>
 8012a12:	f04f 0800 	mov.w	r8, #0
 8012a16:	f388 8811 	msr	BASEPRI, r8
  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 8012a1a:	4935      	ldr	r1, [pc, #212]	; (8012af0 <chFactoryCreateObjectsFIFO.constprop.0+0xf0>)
 8012a1c:	4835      	ldr	r0, [pc, #212]	; (8012af4 <chFactoryCreateObjectsFIFO.constprop.0+0xf4>)
 8012a1e:	2304      	movs	r3, #4
 8012a20:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8012a24:	f7f3 fd9c 	bl	8006560 <dyn_create_object_heap.lto_priv.0>
  if (dofp != NULL) {
 8012a28:	4604      	mov	r4, r0
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	d057      	beq.n	8012ade <chFactoryCreateObjectsFIFO.constprop.0+0xde>
    msg_t *msgbuf = (msg_t *)(dofp + 1);
 8012a2e:	f100 0354 	add.w	r3, r0, #84	; 0x54
    uint8_t *objbuf = (uint8_t *)dofp + size1;
 8012a32:	f100 0594 	add.w	r5, r0, #148	; 0x94
    msg_t *msgbuf = (msg_t *)(dofp + 1);
 8012a36:	9300      	str	r3, [sp, #0]
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 8012a38:	f100 0b10 	add.w	fp, r0, #16
  mp->align = align;
 8012a3c:	2610      	movs	r6, #16
 8012a3e:	2304      	movs	r3, #4
 8012a40:	e9c0 bb04 	strd	fp, fp, [r0, #16]
 8012a44:	e9c0 6308 	strd	r6, r3, [r0, #32]
 8012a48:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8012af8 <chFactoryCreateObjectsFIFO.constprop.0+0xf8>
    uint8_t *objbuf = (uint8_t *)dofp + size1;
 8012a4c:	9501      	str	r5, [sp, #4]
  mp->next = NULL;
 8012a4e:	f8c0 801c 	str.w	r8, [r0, #28]
  mp->provider = provider;
 8012a52:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
  sp->cnt = n;
 8012a56:	f8c0 8018 	str.w	r8, [r0, #24]
    tp->u.rdymsg = MSG_OK;
 8012a5a:	46c1      	mov	r9, r8
 8012a5c:	e00f      	b.n	8012a7e <chFactoryCreateObjectsFIFO.constprop.0+0x7e>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8012a5e:	f8da 2000 	ldr.w	r2, [sl]
 8012a62:	f8da 300c 	ldr.w	r3, [sl, #12]
 8012a66:	6892      	ldr	r2, [r2, #8]
 8012a68:	689b      	ldr	r3, [r3, #8]
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d901      	bls.n	8012a72 <chFactoryCreateObjectsFIFO.constprop.0+0x72>
    __sch_reschedule_ahead();
 8012a6e:	f7ef fa6f 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8012a72:	f389 8811 	msr	BASEPRI, r9
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8012a76:	6a23      	ldr	r3, [r4, #32]
  while (n != 0U) {
 8012a78:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8012a7a:	441d      	add	r5, r3
  while (n != 0U) {
 8012a7c:	d01e      	beq.n	8012abc <chFactoryCreateObjectsFIFO.constprop.0+0xbc>
 8012a7e:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 8012a82:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
  if (++sp->cnt <= (cnt_t)0) {
 8012a86:	3301      	adds	r3, #1
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	602a      	str	r2, [r5, #0]
 8012a8c:	e9c4 3506 	strd	r3, r5, [r4, #24]
 8012a90:	dce5      	bgt.n	8012a5e <chFactoryCreateObjectsFIFO.constprop.0+0x5e>
  ch_queue_t *p = qp->next;
 8012a92:	6922      	ldr	r2, [r4, #16]
  qp->next       = p->next;
 8012a94:	6813      	ldr	r3, [r2, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8012a96:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8012a98:	6890      	ldr	r0, [r2, #8]
  qp->next       = p->next;
 8012a9a:	6123      	str	r3, [r4, #16]
  qp->next->prev = qp;
 8012a9c:	f8c3 b004 	str.w	fp, [r3, #4]
    tp->u.rdymsg = MSG_OK;
 8012aa0:	f8c2 8028 	str.w	r8, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8012aa4:	f882 8024 	strb.w	r8, [r2, #36]	; 0x24
    pqp = pqp->next;
 8012aa8:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8012aaa:	688b      	ldr	r3, [r1, #8]
 8012aac:	4283      	cmp	r3, r0
 8012aae:	d2fb      	bcs.n	8012aa8 <chFactoryCreateObjectsFIFO.constprop.0+0xa8>
  p->prev       = pqp->prev;
 8012ab0:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 8012ab2:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 8012ab4:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 8012ab6:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 8012ab8:	604a      	str	r2, [r1, #4]
  return __sch_ready_behind(tp);
 8012aba:	e7d0      	b.n	8012a5e <chFactoryCreateObjectsFIFO.constprop.0+0x5e>
  mbp->buffer = buf;
 8012abc:	9b00      	ldr	r3, [sp, #0]
 8012abe:	62e3      	str	r3, [r4, #44]	; 0x2c
  mbp->wrptr  = buf;
 8012ac0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
  mbp->top    = &buf[n];
 8012ac4:	9b01      	ldr	r3, [sp, #4]
 8012ac6:	6323      	str	r3, [r4, #48]	; 0x30
  ch_queue_init(&tqp->queue);
 8012ac8:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8012acc:	f104 034c 	add.w	r3, r4, #76	; 0x4c
  qp->prev = qp;
 8012ad0:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
 8012ad4:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  mbp->cnt    = (size_t)0;
 8012ad8:	63e6      	str	r6, [r4, #60]	; 0x3c
  mbp->reset  = false;
 8012ada:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  F_UNLOCK();
 8012ade:	4803      	ldr	r0, [pc, #12]	; (8012aec <chFactoryCreateObjectsFIFO.constprop.0+0xec>)
 8012ae0:	f7f1 fb46 	bl	8004170 <chMtxUnlock>
}
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	b003      	add	sp, #12
 8012ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aec:	20000b18 	.word	0x20000b18
 8012af0:	20000b58 	.word	0x20000b58
 8012af4:	08016200 	.word	0x08016200
 8012af8:	20000a90 	.word	0x20000a90
 8012afc:	00000000 	.word	0x00000000

08012b00 <chFactoryFindMailbox.constprop.0>:
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 8012b00:	b570      	push	{r4, r5, r6, lr}
 8012b02:	2330      	movs	r3, #48	; 0x30
 8012b04:	f383 8811 	msr	BASEPRI, r3
 8012b08:	4d13      	ldr	r5, [pc, #76]	; (8012b58 <chFactoryFindMailbox.constprop.0+0x58>)
 8012b0a:	4628      	mov	r0, r5
 8012b0c:	f7f1 fa90 	bl	8004030 <chMtxLockS>
 8012b10:	2300      	movs	r3, #0
 8012b12:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8012b16:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 8012b1a:	42ac      	cmp	r4, r5
 8012b1c:	d01a      	beq.n	8012b54 <chFactoryFindMailbox.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8012b1e:	4e0f      	ldr	r6, [pc, #60]	; (8012b5c <chFactoryFindMailbox.constprop.0+0x5c>)
 8012b20:	e002      	b.n	8012b28 <chFactoryFindMailbox.constprop.0+0x28>
    p = p->next;
 8012b22:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8012b24:	42ac      	cmp	r4, r5
 8012b26:	d00f      	beq.n	8012b48 <chFactoryFindMailbox.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8012b28:	f104 0008 	add.w	r0, r4, #8
 8012b2c:	4631      	mov	r1, r6
 8012b2e:	f7ed fc2f 	bl	8000390 <strcmp>
 8012b32:	2800      	cmp	r0, #0
 8012b34:	d1f5      	bne.n	8012b22 <chFactoryFindMailbox.constprop.0+0x22>
  if (dep != NULL) {
 8012b36:	b114      	cbz	r4, 8012b3e <chFactoryFindMailbox.constprop.0+0x3e>
    dep->refs++;
 8012b38:	6863      	ldr	r3, [r4, #4]
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 8012b3e:	4806      	ldr	r0, [pc, #24]	; (8012b58 <chFactoryFindMailbox.constprop.0+0x58>)
 8012b40:	f7f1 fb16 	bl	8004170 <chMtxUnlock>
}
 8012b44:	4620      	mov	r0, r4
 8012b46:	bd70      	pop	{r4, r5, r6, pc}
  F_UNLOCK();
 8012b48:	4803      	ldr	r0, [pc, #12]	; (8012b58 <chFactoryFindMailbox.constprop.0+0x58>)
  return NULL;
 8012b4a:	2400      	movs	r4, #0
  F_UNLOCK();
 8012b4c:	f7f1 fb10 	bl	8004170 <chMtxUnlock>
}
 8012b50:	4620      	mov	r0, r4
 8012b52:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8012b54:	461c      	mov	r4, r3
 8012b56:	e7f2      	b.n	8012b3e <chFactoryFindMailbox.constprop.0+0x3e>
 8012b58:	20000b18 	.word	0x20000b18
 8012b5c:	08016218 	.word	0x08016218

08012b60 <chFactoryCreateMailbox.constprop.0>:
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 8012b60:	b538      	push	{r3, r4, r5, lr}
 8012b62:	2330      	movs	r3, #48	; 0x30
 8012b64:	f383 8811 	msr	BASEPRI, r3
 8012b68:	4812      	ldr	r0, [pc, #72]	; (8012bb4 <chFactoryCreateMailbox.constprop.0+0x54>)
 8012b6a:	f7f1 fa61 	bl	8004030 <chMtxLockS>
 8012b6e:	2500      	movs	r5, #0
 8012b70:	f385 8811 	msr	BASEPRI, r5
  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 8012b74:	4910      	ldr	r1, [pc, #64]	; (8012bb8 <chFactoryCreateMailbox.constprop.0+0x58>)
 8012b76:	4811      	ldr	r0, [pc, #68]	; (8012bbc <chFactoryCreateMailbox.constprop.0+0x5c>)
 8012b78:	2308      	movs	r3, #8
 8012b7a:	2278      	movs	r2, #120	; 0x78
 8012b7c:	f7f3 fcf0 	bl	8006560 <dyn_create_object_heap.lto_priv.0>
  if (dmp != NULL) {
 8012b80:	4604      	mov	r4, r0
 8012b82:	b188      	cbz	r0, 8012ba8 <chFactoryCreateMailbox.constprop.0+0x48>
    chMBObjectInit(&dmp->mbx, (msg_t *)(dmp + 1), n);
 8012b84:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8012b88:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8012b8c:	f100 0230 	add.w	r2, r0, #48	; 0x30
  mbp->top    = &buf[n];
 8012b90:	3078      	adds	r0, #120	; 0x78
  mbp->buffer = buf;
 8012b92:	e9c4 3004 	strd	r3, r0, [r4, #16]
  mbp->wrptr  = buf;
 8012b96:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8012b9a:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 8012b9e:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 8012ba2:	6225      	str	r5, [r4, #32]
  mbp->reset  = false;
 8012ba4:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  F_UNLOCK();
 8012ba8:	4802      	ldr	r0, [pc, #8]	; (8012bb4 <chFactoryCreateMailbox.constprop.0+0x54>)
 8012baa:	f7f1 fae1 	bl	8004170 <chMtxUnlock>
}
 8012bae:	4620      	mov	r0, r4
 8012bb0:	bd38      	pop	{r3, r4, r5, pc}
 8012bb2:	bf00      	nop
 8012bb4:	20000b18 	.word	0x20000b18
 8012bb8:	20000b54 	.word	0x20000b54
 8012bbc:	08016218 	.word	0x08016218

08012bc0 <chFactoryFindSemaphore.constprop.0>:
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8012bc0:	b570      	push	{r4, r5, r6, lr}
 8012bc2:	2330      	movs	r3, #48	; 0x30
 8012bc4:	f383 8811 	msr	BASEPRI, r3
 8012bc8:	4d13      	ldr	r5, [pc, #76]	; (8012c18 <chFactoryFindSemaphore.constprop.0+0x58>)
 8012bca:	4628      	mov	r0, r5
 8012bcc:	f7f1 fa30 	bl	8004030 <chMtxLockS>
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8012bd6:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 8012bda:	42ac      	cmp	r4, r5
 8012bdc:	d01a      	beq.n	8012c14 <chFactoryFindSemaphore.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8012bde:	4e0f      	ldr	r6, [pc, #60]	; (8012c1c <chFactoryFindSemaphore.constprop.0+0x5c>)
 8012be0:	e002      	b.n	8012be8 <chFactoryFindSemaphore.constprop.0+0x28>
    p = p->next;
 8012be2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8012be4:	42ac      	cmp	r4, r5
 8012be6:	d00f      	beq.n	8012c08 <chFactoryFindSemaphore.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8012be8:	f104 0008 	add.w	r0, r4, #8
 8012bec:	4631      	mov	r1, r6
 8012bee:	f7ed fbcf 	bl	8000390 <strcmp>
 8012bf2:	2800      	cmp	r0, #0
 8012bf4:	d1f5      	bne.n	8012be2 <chFactoryFindSemaphore.constprop.0+0x22>
  if (dep != NULL) {
 8012bf6:	b114      	cbz	r4, 8012bfe <chFactoryFindSemaphore.constprop.0+0x3e>
    dep->refs++;
 8012bf8:	6863      	ldr	r3, [r4, #4]
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 8012bfe:	4806      	ldr	r0, [pc, #24]	; (8012c18 <chFactoryFindSemaphore.constprop.0+0x58>)
 8012c00:	f7f1 fab6 	bl	8004170 <chMtxUnlock>
}
 8012c04:	4620      	mov	r0, r4
 8012c06:	bd70      	pop	{r4, r5, r6, pc}
  F_UNLOCK();
 8012c08:	4803      	ldr	r0, [pc, #12]	; (8012c18 <chFactoryFindSemaphore.constprop.0+0x58>)
  return NULL;
 8012c0a:	2400      	movs	r4, #0
  F_UNLOCK();
 8012c0c:	f7f1 fab0 	bl	8004170 <chMtxUnlock>
}
 8012c10:	4620      	mov	r0, r4
 8012c12:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8012c14:	461c      	mov	r4, r3
 8012c16:	e7f2      	b.n	8012bfe <chFactoryFindSemaphore.constprop.0+0x3e>
 8012c18:	20000b18 	.word	0x20000b18
 8012c1c:	080162b0 	.word	0x080162b0

08012c20 <chFactoryCreateSemaphore.constprop.0>:
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 8012c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c22:	2330      	movs	r3, #48	; 0x30
 8012c24:	f383 8811 	msr	BASEPRI, r3
 8012c28:	4f2a      	ldr	r7, [pc, #168]	; (8012cd4 <chFactoryCreateSemaphore.constprop.0+0xb4>)
 8012c2a:	4638      	mov	r0, r7
 8012c2c:	f7f1 fa00 	bl	8004030 <chMtxLockS>
 8012c30:	2300      	movs	r3, #0
 8012c32:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8012c36:	463d      	mov	r5, r7
 8012c38:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 8012c3c:	42ac      	cmp	r4, r5
 8012c3e:	d012      	beq.n	8012c66 <chFactoryCreateSemaphore.constprop.0+0x46>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8012c40:	4e25      	ldr	r6, [pc, #148]	; (8012cd8 <chFactoryCreateSemaphore.constprop.0+0xb8>)
 8012c42:	e002      	b.n	8012c4a <chFactoryCreateSemaphore.constprop.0+0x2a>
    p = p->next;
 8012c44:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8012c46:	42ac      	cmp	r4, r5
 8012c48:	d00d      	beq.n	8012c66 <chFactoryCreateSemaphore.constprop.0+0x46>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8012c4a:	f104 0008 	add.w	r0, r4, #8
 8012c4e:	4631      	mov	r1, r6
 8012c50:	f7ed fb9e 	bl	8000390 <strcmp>
 8012c54:	2800      	cmp	r0, #0
 8012c56:	d1f5      	bne.n	8012c44 <chFactoryCreateSemaphore.constprop.0+0x24>
  if (dep != NULL) {
 8012c58:	b12c      	cbz	r4, 8012c66 <chFactoryCreateSemaphore.constprop.0+0x46>
    return NULL;
 8012c5a:	2400      	movs	r4, #0
  F_UNLOCK();
 8012c5c:	481d      	ldr	r0, [pc, #116]	; (8012cd4 <chFactoryCreateSemaphore.constprop.0+0xb4>)
 8012c5e:	f7f1 fa87 	bl	8004170 <chMtxUnlock>
}
 8012c62:	4620      	mov	r0, r4
 8012c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c66:	2330      	movs	r3, #48	; 0x30
 8012c68:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8012c6c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
  if (objp != NULL) {
 8012c6e:	b33c      	cbz	r4, 8012cc0 <chFactoryCreateSemaphore.constprop.0+0xa0>
    mp->next = mp->next->next;
 8012c70:	6823      	ldr	r3, [r4, #0]
 8012c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012c74:	2300      	movs	r3, #0
 8012c76:	f383 8811 	msr	BASEPRI, r3
  if (dep == NULL) {
 8012c7a:	2c00      	cmp	r4, #0
 8012c7c:	d0ed      	beq.n	8012c5a <chFactoryCreateSemaphore.constprop.0+0x3a>
    *dp++ = c;
 8012c7e:	226d      	movs	r2, #109	; 0x6d
 8012c80:	f104 0309 	add.w	r3, r4, #9
 8012c84:	7222      	strb	r2, [r4, #8]
 8012c86:	2279      	movs	r2, #121	; 0x79
 8012c88:	4914      	ldr	r1, [pc, #80]	; (8012cdc <chFactoryCreateSemaphore.constprop.0+0xbc>)
 8012c8a:	f803 2b01 	strb.w	r2, [r3], #1
 8012c8e:	f104 0010 	add.w	r0, r4, #16
  } while ((c != (char)0) && (i > 0U));
 8012c92:	b13a      	cbz	r2, 8012ca4 <chFactoryCreateSemaphore.constprop.0+0x84>
 8012c94:	4298      	cmp	r0, r3
 8012c96:	d005      	beq.n	8012ca4 <chFactoryCreateSemaphore.constprop.0+0x84>
    c = *sp++;
 8012c98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    *dp++ = c;
 8012c9c:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 8012ca0:	2a00      	cmp	r2, #0
 8012ca2:	d1f7      	bne.n	8012c94 <chFactoryCreateSemaphore.constprop.0+0x74>
  dep->refs = (ucnt_t)1;
 8012ca4:	2301      	movs	r3, #1
  dep->next = dlp->next;
 8012ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
  dep->refs = (ucnt_t)1;
 8012ca8:	6063      	str	r3, [r4, #4]
  sp->cnt = n;
 8012caa:	2300      	movs	r3, #0
  dep->next = dlp->next;
 8012cac:	6022      	str	r2, [r4, #0]
  dlp->next = (dyn_element_t *)dep;
 8012cae:	62bc      	str	r4, [r7, #40]	; 0x28
 8012cb0:	e9c4 0004 	strd	r0, r0, [r4, #16]
 8012cb4:	61a3      	str	r3, [r4, #24]
  F_UNLOCK();
 8012cb6:	4807      	ldr	r0, [pc, #28]	; (8012cd4 <chFactoryCreateSemaphore.constprop.0+0xb4>)
 8012cb8:	f7f1 fa5a 	bl	8004170 <chMtxUnlock>
}
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (mp->provider != NULL) {
 8012cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc2:	b123      	cbz	r3, 8012cce <chFactoryCreateSemaphore.constprop.0+0xae>
    objp = mp->provider(mp->object_size, mp->align);
 8012cc4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8012cc8:	4798      	blx	r3
 8012cca:	4604      	mov	r4, r0
 8012ccc:	e7d2      	b.n	8012c74 <chFactoryCreateSemaphore.constprop.0+0x54>
 8012cce:	f384 8811 	msr	BASEPRI, r4
 8012cd2:	e7c3      	b.n	8012c5c <chFactoryCreateSemaphore.constprop.0+0x3c>
 8012cd4:	20000b18 	.word	0x20000b18
 8012cd8:	080162b0 	.word	0x080162b0
 8012cdc:	080162b1 	.word	0x080162b1

08012ce0 <chFactoryFindBuffer.constprop.0>:
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 8012ce0:	b570      	push	{r4, r5, r6, lr}
 8012ce2:	2330      	movs	r3, #48	; 0x30
 8012ce4:	f383 8811 	msr	BASEPRI, r3
 8012ce8:	4d13      	ldr	r5, [pc, #76]	; (8012d38 <chFactoryFindBuffer.constprop.0+0x58>)
 8012cea:	4628      	mov	r0, r5
 8012cec:	f7f1 f9a0 	bl	8004030 <chMtxLockS>
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8012cf6:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 8012cfa:	42ac      	cmp	r4, r5
 8012cfc:	d01a      	beq.n	8012d34 <chFactoryFindBuffer.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8012cfe:	4e0f      	ldr	r6, [pc, #60]	; (8012d3c <chFactoryFindBuffer.constprop.0+0x5c>)
 8012d00:	e002      	b.n	8012d08 <chFactoryFindBuffer.constprop.0+0x28>
    p = p->next;
 8012d02:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8012d04:	42ac      	cmp	r4, r5
 8012d06:	d00f      	beq.n	8012d28 <chFactoryFindBuffer.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8012d08:	f104 0008 	add.w	r0, r4, #8
 8012d0c:	4631      	mov	r1, r6
 8012d0e:	f7ed fb3f 	bl	8000390 <strcmp>
 8012d12:	2800      	cmp	r0, #0
 8012d14:	d1f5      	bne.n	8012d02 <chFactoryFindBuffer.constprop.0+0x22>
  if (dep != NULL) {
 8012d16:	b114      	cbz	r4, 8012d1e <chFactoryFindBuffer.constprop.0+0x3e>
    dep->refs++;
 8012d18:	6863      	ldr	r3, [r4, #4]
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 8012d1e:	4806      	ldr	r0, [pc, #24]	; (8012d38 <chFactoryFindBuffer.constprop.0+0x58>)
 8012d20:	f7f1 fa26 	bl	8004170 <chMtxUnlock>
}
 8012d24:	4620      	mov	r0, r4
 8012d26:	bd70      	pop	{r4, r5, r6, pc}
  F_UNLOCK();
 8012d28:	4803      	ldr	r0, [pc, #12]	; (8012d38 <chFactoryFindBuffer.constprop.0+0x58>)
  return NULL;
 8012d2a:	2400      	movs	r4, #0
  F_UNLOCK();
 8012d2c:	f7f1 fa20 	bl	8004170 <chMtxUnlock>
}
 8012d30:	4620      	mov	r0, r4
 8012d32:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8012d34:	461c      	mov	r4, r3
 8012d36:	e7f2      	b.n	8012d1e <chFactoryFindBuffer.constprop.0+0x3e>
 8012d38:	20000b18 	.word	0x20000b18
 8012d3c:	08016210 	.word	0x08016210

08012d40 <chFactoryFindObject.constprop.0>:
registered_object_t *chFactoryFindObject(const char *name) {
 8012d40:	b570      	push	{r4, r5, r6, lr}
 8012d42:	2330      	movs	r3, #48	; 0x30
 8012d44:	f383 8811 	msr	BASEPRI, r3
 8012d48:	4d13      	ldr	r5, [pc, #76]	; (8012d98 <chFactoryFindObject.constprop.0+0x58>)
 8012d4a:	4628      	mov	r0, r5
 8012d4c:	f7f1 f970 	bl	8004030 <chMtxLockS>
 8012d50:	2300      	movs	r3, #0
 8012d52:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8012d56:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 8012d5a:	42ac      	cmp	r4, r5
 8012d5c:	d01a      	beq.n	8012d94 <chFactoryFindObject.constprop.0+0x54>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8012d5e:	4e0f      	ldr	r6, [pc, #60]	; (8012d9c <chFactoryFindObject.constprop.0+0x5c>)
 8012d60:	e002      	b.n	8012d68 <chFactoryFindObject.constprop.0+0x28>
    p = p->next;
 8012d62:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8012d64:	42ac      	cmp	r4, r5
 8012d66:	d00f      	beq.n	8012d88 <chFactoryFindObject.constprop.0+0x48>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8012d68:	f104 0008 	add.w	r0, r4, #8
 8012d6c:	4631      	mov	r1, r6
 8012d6e:	f7ed fb0f 	bl	8000390 <strcmp>
 8012d72:	2800      	cmp	r0, #0
 8012d74:	d1f5      	bne.n	8012d62 <chFactoryFindObject.constprop.0+0x22>
  if (dep != NULL) {
 8012d76:	b114      	cbz	r4, 8012d7e <chFactoryFindObject.constprop.0+0x3e>
    dep->refs++;
 8012d78:	6863      	ldr	r3, [r4, #4]
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 8012d7e:	4806      	ldr	r0, [pc, #24]	; (8012d98 <chFactoryFindObject.constprop.0+0x58>)
 8012d80:	f7f1 f9f6 	bl	8004170 <chMtxUnlock>
}
 8012d84:	4620      	mov	r0, r4
 8012d86:	bd70      	pop	{r4, r5, r6, pc}
  F_UNLOCK();
 8012d88:	4803      	ldr	r0, [pc, #12]	; (8012d98 <chFactoryFindObject.constprop.0+0x58>)
  return NULL;
 8012d8a:	2400      	movs	r4, #0
  F_UNLOCK();
 8012d8c:	f7f1 f9f0 	bl	8004170 <chMtxUnlock>
}
 8012d90:	4620      	mov	r0, r4
 8012d92:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8012d94:	461c      	mov	r4, r3
 8012d96:	e7f2      	b.n	8012d7e <chFactoryFindObject.constprop.0+0x3e>
 8012d98:	20000b18 	.word	0x20000b18
 8012d9c:	08016208 	.word	0x08016208

08012da0 <chFactoryRegisterObject.constprop.0>:
registered_object_t *chFactoryRegisterObject(const char *name,
 8012da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012da4:	2330      	movs	r3, #48	; 0x30
 8012da6:	4680      	mov	r8, r0
 8012da8:	f383 8811 	msr	BASEPRI, r3
 8012dac:	4f2a      	ldr	r7, [pc, #168]	; (8012e58 <chFactoryRegisterObject.constprop.0+0xb8>)
 8012dae:	4638      	mov	r0, r7
 8012db0:	f7f1 f93e 	bl	8004030 <chMtxLockS>
 8012db4:	2300      	movs	r3, #0
 8012db6:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 8012dba:	463d      	mov	r5, r7
 8012dbc:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 8012dc0:	42ac      	cmp	r4, r5
 8012dc2:	d013      	beq.n	8012dec <chFactoryRegisterObject.constprop.0+0x4c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8012dc4:	4e25      	ldr	r6, [pc, #148]	; (8012e5c <chFactoryRegisterObject.constprop.0+0xbc>)
 8012dc6:	e002      	b.n	8012dce <chFactoryRegisterObject.constprop.0+0x2e>
    p = p->next;
 8012dc8:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8012dca:	42ac      	cmp	r4, r5
 8012dcc:	d00e      	beq.n	8012dec <chFactoryRegisterObject.constprop.0+0x4c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8012dce:	f104 0008 	add.w	r0, r4, #8
 8012dd2:	4631      	mov	r1, r6
 8012dd4:	f7ed fadc 	bl	8000390 <strcmp>
 8012dd8:	2800      	cmp	r0, #0
 8012dda:	d1f5      	bne.n	8012dc8 <chFactoryRegisterObject.constprop.0+0x28>
  if (dep != NULL) {
 8012ddc:	b134      	cbz	r4, 8012dec <chFactoryRegisterObject.constprop.0+0x4c>
    return NULL;
 8012dde:	2400      	movs	r4, #0
  F_UNLOCK();
 8012de0:	481d      	ldr	r0, [pc, #116]	; (8012e58 <chFactoryRegisterObject.constprop.0+0xb8>)
 8012de2:	f7f1 f9c5 	bl	8004170 <chMtxUnlock>
}
 8012de6:	4620      	mov	r0, r4
 8012de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dec:	2330      	movs	r3, #48	; 0x30
 8012dee:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 8012df2:	697c      	ldr	r4, [r7, #20]
  if (objp != NULL) {
 8012df4:	b334      	cbz	r4, 8012e44 <chFactoryRegisterObject.constprop.0+0xa4>
    mp->next = mp->next->next;
 8012df6:	6823      	ldr	r3, [r4, #0]
 8012df8:	617b      	str	r3, [r7, #20]
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	f383 8811 	msr	BASEPRI, r3
  if (dep == NULL) {
 8012e00:	2c00      	cmp	r4, #0
 8012e02:	d0ec      	beq.n	8012dde <chFactoryRegisterObject.constprop.0+0x3e>
    *dp++ = c;
 8012e04:	226d      	movs	r2, #109	; 0x6d
 8012e06:	f104 0309 	add.w	r3, r4, #9
 8012e0a:	7222      	strb	r2, [r4, #8]
 8012e0c:	2279      	movs	r2, #121	; 0x79
 8012e0e:	4914      	ldr	r1, [pc, #80]	; (8012e60 <chFactoryRegisterObject.constprop.0+0xc0>)
 8012e10:	f803 2b01 	strb.w	r2, [r3], #1
 8012e14:	f104 0010 	add.w	r0, r4, #16
  } while ((c != (char)0) && (i > 0U));
 8012e18:	b13a      	cbz	r2, 8012e2a <chFactoryRegisterObject.constprop.0+0x8a>
 8012e1a:	4298      	cmp	r0, r3
 8012e1c:	d005      	beq.n	8012e2a <chFactoryRegisterObject.constprop.0+0x8a>
    c = *sp++;
 8012e1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    *dp++ = c;
 8012e22:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 8012e26:	2a00      	cmp	r2, #0
 8012e28:	d1f7      	bne.n	8012e1a <chFactoryRegisterObject.constprop.0+0x7a>
  dep->next = dlp->next;
 8012e2a:	693b      	ldr	r3, [r7, #16]
  F_UNLOCK();
 8012e2c:	480a      	ldr	r0, [pc, #40]	; (8012e58 <chFactoryRegisterObject.constprop.0+0xb8>)
  dep->refs = (ucnt_t)1;
 8012e2e:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8012e30:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = (dyn_element_t *)dep;
 8012e34:	613c      	str	r4, [r7, #16]
    rop->objp = objp;
 8012e36:	f8c4 8010 	str.w	r8, [r4, #16]
  F_UNLOCK();
 8012e3a:	f7f1 f999 	bl	8004170 <chMtxUnlock>
}
 8012e3e:	4620      	mov	r0, r4
 8012e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (mp->provider != NULL) {
 8012e44:	6a3b      	ldr	r3, [r7, #32]
 8012e46:	b123      	cbz	r3, 8012e52 <chFactoryRegisterObject.constprop.0+0xb2>
    objp = mp->provider(mp->object_size, mp->align);
 8012e48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012e4c:	4798      	blx	r3
 8012e4e:	4604      	mov	r4, r0
 8012e50:	e7d3      	b.n	8012dfa <chFactoryRegisterObject.constprop.0+0x5a>
 8012e52:	f384 8811 	msr	BASEPRI, r4
 8012e56:	e7c3      	b.n	8012de0 <chFactoryRegisterObject.constprop.0+0x40>
 8012e58:	20000b18 	.word	0x20000b18
 8012e5c:	08016208 	.word	0x08016208
 8012e60:	08016209 	.word	0x08016209
	...

08012e70 <chCacheGetObject.constprop.0>:
oc_object_t *chCacheGetObject(objects_cache_t *ocp,
 8012e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e74:	4605      	mov	r5, r0
 8012e76:	2330      	movs	r3, #48	; 0x30
 8012e78:	f383 8811 	msr	BASEPRI, r3
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 8012e7c:	4e53      	ldr	r6, [pc, #332]	; (8012fcc <chCacheGetObject.constprop.0+0x15c>)
 8012e7e:	e9d6 3100 	ldrd	r3, r1, [r6]
 8012e82:	3b01      	subs	r3, #1
 8012e84:	4003      	ands	r3, r0
 8012e86:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
  objp = hhp->hash_next;
 8012e8a:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
  while (objp != (oc_object_t *)hhp) {
 8012e8e:	42a2      	cmp	r2, r4
 8012e90:	d103      	bne.n	8012e9a <chCacheGetObject.constprop.0+0x2a>
 8012e92:	e01b      	b.n	8012ecc <chCacheGetObject.constprop.0+0x5c>
    objp = objp->hash_next;
 8012e94:	6824      	ldr	r4, [r4, #0]
  while (objp != (oc_object_t *)hhp) {
 8012e96:	42a2      	cmp	r2, r4
 8012e98:	d018      	beq.n	8012ecc <chCacheGetObject.constprop.0+0x5c>
    if ((objp->obj_key == key) && (objp->obj_group == group)) {
 8012e9a:	6963      	ldr	r3, [r4, #20]
 8012e9c:	429d      	cmp	r5, r3
 8012e9e:	d1f9      	bne.n	8012e94 <chCacheGetObject.constprop.0+0x24>
 8012ea0:	6923      	ldr	r3, [r4, #16]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d1f6      	bne.n	8012e94 <chCacheGetObject.constprop.0+0x24>
 */
static inline cnt_t chSemGetCounterI(const semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->cnt;
 8012ea6:	6a23      	ldr	r3, [r4, #32]
    if (chSemGetCounterI(&objp->obj_sem) > (cnt_t)0) {
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	dd50      	ble.n	8012f4e <chCacheGetObject.constprop.0+0xde>
      objp->obj_flags &= ~OC_FLAG_INLRU;
 8012eac:	6a62      	ldr	r2, [r4, #36]	; 0x24
      LRU_REMOVE(objp);
 8012eae:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
      objp->obj_flags &= ~OC_FLAG_INLRU;
 8012eb2:	f022 0201 	bic.w	r2, r2, #1
  sp->cnt--;
 8012eb6:	3b01      	subs	r3, #1
      LRU_REMOVE(objp);
 8012eb8:	6081      	str	r1, [r0, #8]
 8012eba:	60c8      	str	r0, [r1, #12]
 8012ebc:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	f383 8811 	msr	BASEPRI, r3
}
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    currtp->u.wtsemp = sp;
 8012ecc:	4f40      	ldr	r7, [pc, #256]	; (8012fd0 <chCacheGetObject.constprop.0+0x160>)
  return __sch_get_currthread();
 8012ece:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8012fd4 <chCacheGetObject.constprop.0+0x164>
    (void) ocp->writef(ocp, objp, true);
 8012ed2:	f1a7 0930 	sub.w	r9, r7, #48	; 0x30
 8012ed6:	e01b      	b.n	8012f10 <chCacheGetObject.constprop.0+0xa0>
    objp = ocp->lru.lru_prev;
 8012ed8:	6a34      	ldr	r4, [r6, #32]
 8012eda:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
    LRU_REMOVE(objp);
 8012ede:	68a1      	ldr	r1, [r4, #8]
 8012ee0:	68e0      	ldr	r0, [r4, #12]
 8012ee2:	3b01      	subs	r3, #1
 8012ee4:	6081      	str	r1, [r0, #8]
 8012ee6:	60c8      	str	r0, [r1, #12]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 8012ee8:	f022 0101 	bic.w	r1, r2, #1
 8012eec:	e9c4 3108 	strd	r3, r1, [r4, #32]
    if ((objp->obj_flags & OC_FLAG_LAZYWRITE) == 0U) {
 8012ef0:	06d1      	lsls	r1, r2, #27
 8012ef2:	f04f 0c00 	mov.w	ip, #0
 8012ef6:	d549      	bpl.n	8012f8c <chCacheGetObject.constprop.0+0x11c>
 8012ef8:	f38c 8811 	msr	BASEPRI, ip
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 8012efc:	2222      	movs	r2, #34	; 0x22
    (void) ocp->writef(ocp, objp, true);
 8012efe:	6c33      	ldr	r3, [r6, #64]	; 0x40
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 8012f00:	6262      	str	r2, [r4, #36]	; 0x24
    (void) ocp->writef(ocp, objp, true);
 8012f02:	4621      	mov	r1, r4
 8012f04:	2201      	movs	r2, #1
 8012f06:	4648      	mov	r0, r9
 8012f08:	4798      	blx	r3
 8012f0a:	2330      	movs	r3, #48	; 0x30
 8012f0c:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8012f10:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8012f12:	3b01      	subs	r3, #1
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	63b3      	str	r3, [r6, #56]	; 0x38
 8012f18:	dade      	bge.n	8012ed8 <chCacheGetObject.constprop.0+0x68>
 8012f1a:	f8d8 100c 	ldr.w	r1, [r8, #12]
  p->prev       = qp->prev;
 8012f1e:	6b73      	ldr	r3, [r6, #52]	; 0x34
  p->next       = qp;
 8012f20:	600f      	str	r7, [r1, #0]
  p->prev       = qp->prev;
 8012f22:	604b      	str	r3, [r1, #4]
  ch_priority_queue_t *p = pqp->next;
 8012f24:	f8d8 0000 	ldr.w	r0, [r8]
    currtp->u.wtsemp = sp;
 8012f28:	628f      	str	r7, [r1, #40]	; 0x28
  p->prev->next = p;
 8012f2a:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8012f2c:	2305      	movs	r3, #5
  qp->prev      = p;
 8012f2e:	6371      	str	r1, [r6, #52]	; 0x34
 8012f30:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8012f34:	6803      	ldr	r3, [r0, #0]
 8012f36:	f8c8 3000 	str.w	r3, [r8]
  pqp->next->prev = pqp;
 8012f3a:	f8c3 8004 	str.w	r8, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8012f3e:	2301      	movs	r3, #1
 8012f40:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8012f44:	f8c8 000c 	str.w	r0, [r8, #12]
  chSysSwitch(ntp, otp);
 8012f48:	f7ed f9ba 	bl	80002c0 <__port_switch>
 8012f4c:	e7c4      	b.n	8012ed8 <chCacheGetObject.constprop.0+0x68>
 8012f4e:	4a21      	ldr	r2, [pc, #132]	; (8012fd4 <chCacheGetObject.constprop.0+0x164>)
  p->prev       = qp->prev;
 8012f50:	69e5      	ldr	r5, [r4, #28]
 8012f52:	68d1      	ldr	r1, [r2, #12]
      (void) chSemWaitS(&objp->obj_sem);
 8012f54:	f104 0018 	add.w	r0, r4, #24
  if (--sp->cnt < (cnt_t)0) {
 8012f58:	3b01      	subs	r3, #1
 8012f5a:	6223      	str	r3, [r4, #32]
 8012f5c:	e9c1 0500 	strd	r0, r5, [r1]
    currtp->u.wtsemp = sp;
 8012f60:	6288      	str	r0, [r1, #40]	; 0x28
  otp->state = newstate;
 8012f62:	2305      	movs	r3, #5
  ch_priority_queue_t *p = pqp->next;
 8012f64:	6810      	ldr	r0, [r2, #0]
  p->prev->next = p;
 8012f66:	6029      	str	r1, [r5, #0]
  qp->prev      = p;
 8012f68:	61e1      	str	r1, [r4, #28]
 8012f6a:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8012f6e:	6803      	ldr	r3, [r0, #0]
 8012f70:	6013      	str	r3, [r2, #0]
  pqp->next->prev = pqp;
 8012f72:	605a      	str	r2, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 8012f74:	2301      	movs	r3, #1
 8012f76:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8012f7a:	60d0      	str	r0, [r2, #12]
  chSysSwitch(ntp, otp);
 8012f7c:	f7ed f9a0 	bl	80002c0 <__port_switch>
 8012f80:	2300      	movs	r3, #0
 8012f82:	f383 8811 	msr	BASEPRI, r3
}
 8012f86:	4620      	mov	r0, r4
 8012f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((objp->obj_flags & OC_FLAG_INHASH) != 0U) {
 8012f8c:	0793      	lsls	r3, r2, #30
 8012f8e:	d504      	bpl.n	8012f9a <chCacheGetObject.constprop.0+0x12a>
        HASH_REMOVE(objp);
 8012f90:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012f94:	601a      	str	r2, [r3, #0]
 8012f96:	6822      	ldr	r2, [r4, #0]
 8012f98:	6053      	str	r3, [r2, #4]
    HASH_INSERT(ocp, objp, group, key);
 8012f9a:	e9d6 3200 	ldrd	r3, r2, [r6]
 8012f9e:	3b01      	subs	r3, #1
 8012fa0:	402b      	ands	r3, r5
    objp->obj_group = group;
 8012fa2:	2100      	movs	r1, #0
 8012fa4:	6121      	str	r1, [r4, #16]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 8012fa6:	200a      	movs	r0, #10
    HASH_INSERT(ocp, objp, group, key);
 8012fa8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 8012fac:	6260      	str	r0, [r4, #36]	; 0x24
    HASH_INSERT(ocp, objp, group, key);
 8012fae:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    objp->obj_key   = key;
 8012fb2:	6165      	str	r5, [r4, #20]
    HASH_INSERT(ocp, objp, group, key);
 8012fb4:	6021      	str	r1, [r4, #0]
 8012fb6:	6060      	str	r0, [r4, #4]
 8012fb8:	604c      	str	r4, [r1, #4]
 8012fba:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	f383 8811 	msr	BASEPRI, r3
}
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fca:	bf00      	nop
 8012fcc:	20000a48 	.word	0x20000a48
 8012fd0:	20000a78 	.word	0x20000a78
 8012fd4:	20000a90 	.word	0x20000a90
	...

08012fe0 <chMBPostAheadI.constprop.0>:
  if (mbp->reset) {
 8012fe0:	4b1b      	ldr	r3, [pc, #108]	; (8013050 <chMBPostAheadI.constprop.0+0x70>)
 8012fe2:	7d1a      	ldrb	r2, [r3, #20]
 8012fe4:	2a00      	cmp	r2, #0
 8012fe6:	d12f      	bne.n	8013048 <chMBPostAheadI.constprop.0+0x68>
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8012fe8:	b430      	push	{r4, r5}
  return (size_t)(mbp->top - mbp->buffer);
 8012fea:	e9d3 2500 	ldrd	r2, r5, [r3]
  return mbp->cnt;
 8012fee:	691c      	ldr	r4, [r3, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8012ff0:	1aa9      	subs	r1, r5, r2
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8012ff2:	ebb4 0fa1 	cmp.w	r4, r1, asr #2
 8012ff6:	d024      	beq.n	8013042 <chMBPostAheadI.constprop.0+0x62>
    if (--mbp->rdptr < mbp->buffer) {
 8012ff8:	68d9      	ldr	r1, [r3, #12]
 8012ffa:	3904      	subs	r1, #4
 8012ffc:	428a      	cmp	r2, r1
      mbp->rdptr = mbp->top - 1;
 8012ffe:	bf88      	it	hi
 8013000:	1f29      	subhi	r1, r5, #4
  return (bool)(qp->next != qp);
 8013002:	6a1a      	ldr	r2, [r3, #32]
 8013004:	60d9      	str	r1, [r3, #12]
    *mbp->rdptr = msg;
 8013006:	6008      	str	r0, [r1, #0]
  if (ch_queue_notempty(&tqp->queue)) {
 8013008:	4912      	ldr	r1, [pc, #72]	; (8013054 <chMBPostAheadI.constprop.0+0x74>)
    mbp->cnt++;
 801300a:	3401      	adds	r4, #1
 801300c:	428a      	cmp	r2, r1
 801300e:	611c      	str	r4, [r3, #16]
 8013010:	d014      	beq.n	801303c <chMBPostAheadI.constprop.0+0x5c>
  qp->next       = p->next;
 8013012:	6814      	ldr	r4, [r2, #0]
 8013014:	621c      	str	r4, [r3, #32]
  tp->u.rdymsg = msg;
 8013016:	2000      	movs	r0, #0
  qp->next->prev = qp;
 8013018:	6061      	str	r1, [r4, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 801301a:	6993      	ldr	r3, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 801301c:	6894      	ldr	r4, [r2, #8]
 801301e:	6290      	str	r0, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8013020:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
    pqp = pqp->next;
 8013024:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8013026:	6899      	ldr	r1, [r3, #8]
 8013028:	42a1      	cmp	r1, r4
 801302a:	d2fb      	bcs.n	8013024 <chMBPostAheadI.constprop.0+0x44>
  p->prev       = pqp->prev;
 801302c:	6859      	ldr	r1, [r3, #4]
    return MSG_OK;
 801302e:	2000      	movs	r0, #0
 8013030:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 8013034:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 8013036:	605a      	str	r2, [r3, #4]
}
 8013038:	bc30      	pop	{r4, r5}
 801303a:	4770      	bx	lr
    return MSG_OK;
 801303c:	2000      	movs	r0, #0
}
 801303e:	bc30      	pop	{r4, r5}
 8013040:	4770      	bx	lr
  return MSG_TIMEOUT;
 8013042:	f04f 30ff 	mov.w	r0, #4294967295
 8013046:	e7f7      	b.n	8013038 <chMBPostAheadI.constprop.0+0x58>
    return MSG_RESET;
 8013048:	f06f 0001 	mvn.w	r0, #1
}
 801304c:	4770      	bx	lr
 801304e:	bf00      	nop
 8013050:	2000084c 	.word	0x2000084c
 8013054:	2000086c 	.word	0x2000086c
	...

08013060 <chMBPostAheadTimeout.constprop.0>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8013060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013064:	4681      	mov	r9, r0
 8013066:	4688      	mov	r8, r1
 8013068:	2330      	movs	r3, #48	; 0x30
 801306a:	f383 8811 	msr	BASEPRI, r3
 801306e:	4c29      	ldr	r4, [pc, #164]	; (8013114 <chMBPostAheadTimeout.constprop.0+0xb4>)
  return __sch_get_currthread();
 8013070:	4e29      	ldr	r6, [pc, #164]	; (8013118 <chMBPostAheadTimeout.constprop.0+0xb8>)
  p->next       = qp;
 8013072:	f104 0518 	add.w	r5, r4, #24
 8013076:	e010      	b.n	801309a <chMBPostAheadTimeout.constprop.0+0x3a>
 8013078:	e9d4 2700 	ldrd	r2, r7, [r4]
  return mbp->cnt;
 801307c:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 801307e:	eba7 0e02 	sub.w	lr, r7, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8013082:	ebb3 0fae 	cmp.w	r3, lr, asr #2
 8013086:	d114      	bne.n	80130b2 <chMBPostAheadTimeout.constprop.0+0x52>
 8013088:	68f3      	ldr	r3, [r6, #12]
  p->prev       = qp->prev;
 801308a:	69e2      	ldr	r2, [r4, #28]
 801308c:	e9c3 5200 	strd	r5, r2, [r3]
  p->prev->next = p;
 8013090:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8013092:	61e3      	str	r3, [r4, #28]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8013094:	f7ef fc44 	bl	8002920 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 8013098:	b930      	cbnz	r0, 80130a8 <chMBPostAheadTimeout.constprop.0+0x48>
    if (mbp->reset) {
 801309a:	7d23      	ldrb	r3, [r4, #20]
 801309c:	4641      	mov	r1, r8
 801309e:	2004      	movs	r0, #4
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d0e9      	beq.n	8013078 <chMBPostAheadTimeout.constprop.0+0x18>
      return MSG_RESET;
 80130a4:	f06f 0001 	mvn.w	r0, #1
 80130a8:	2300      	movs	r3, #0
 80130aa:	f383 8811 	msr	BASEPRI, r3
}
 80130ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (--mbp->rdptr < mbp->buffer) {
 80130b2:	68e1      	ldr	r1, [r4, #12]
 80130b4:	3904      	subs	r1, #4
 80130b6:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->top - 1;
 80130b8:	bf88      	it	hi
 80130ba:	1f39      	subhi	r1, r7, #4
  return (bool)(qp->next != qp);
 80130bc:	6a22      	ldr	r2, [r4, #32]
 80130be:	60e1      	str	r1, [r4, #12]
      *mbp->rdptr = msg;
 80130c0:	f8c1 9000 	str.w	r9, [r1]
  if (ch_queue_notempty(&tqp->queue)) {
 80130c4:	4915      	ldr	r1, [pc, #84]	; (801311c <chMBPostAheadTimeout.constprop.0+0xbc>)
      mbp->cnt++;
 80130c6:	3301      	adds	r3, #1
 80130c8:	428a      	cmp	r2, r1
 80130ca:	6123      	str	r3, [r4, #16]
 80130cc:	d011      	beq.n	80130f2 <chMBPostAheadTimeout.constprop.0+0x92>
  qp->next       = p->next;
 80130ce:	6813      	ldr	r3, [r2, #0]
 80130d0:	6223      	str	r3, [r4, #32]
  tp->u.rdymsg = msg;
 80130d2:	2000      	movs	r0, #0
  qp->next->prev = qp;
 80130d4:	6059      	str	r1, [r3, #4]
  } while (unlikely(pqp->prio >= p->prio));
 80130d6:	6894      	ldr	r4, [r2, #8]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80130d8:	6993      	ldr	r3, [r2, #24]
 80130da:	6290      	str	r0, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80130dc:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
    pqp = pqp->next;
 80130e0:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80130e2:	6899      	ldr	r1, [r3, #8]
 80130e4:	42a1      	cmp	r1, r4
 80130e6:	d2fb      	bcs.n	80130e0 <chMBPostAheadTimeout.constprop.0+0x80>
  p->prev       = pqp->prev;
 80130e8:	6859      	ldr	r1, [r3, #4]
 80130ea:	e9c2 3100 	strd	r3, r1, [r2]
  p->prev->next = p;
 80130ee:	600a      	str	r2, [r1, #0]
  pqp->prev     = p;
 80130f0:	605a      	str	r2, [r3, #4]
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80130f2:	4b09      	ldr	r3, [pc, #36]	; (8013118 <chMBPostAheadTimeout.constprop.0+0xb8>)
 80130f4:	681a      	ldr	r2, [r3, #0]
 80130f6:	68db      	ldr	r3, [r3, #12]
 80130f8:	6892      	ldr	r2, [r2, #8]
 80130fa:	689b      	ldr	r3, [r3, #8]
 80130fc:	429a      	cmp	r2, r3
 80130fe:	d907      	bls.n	8013110 <chMBPostAheadTimeout.constprop.0+0xb0>
    __sch_reschedule_ahead();
 8013100:	f7ee ff26 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
      return MSG_OK;
 8013104:	2000      	movs	r0, #0
 8013106:	2300      	movs	r3, #0
 8013108:	f383 8811 	msr	BASEPRI, r3
}
 801310c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return MSG_OK;
 8013110:	2000      	movs	r0, #0
 8013112:	e7c9      	b.n	80130a8 <chMBPostAheadTimeout.constprop.0+0x48>
 8013114:	2000084c 	.word	0x2000084c
 8013118:	20000a90 	.word	0x20000a90
 801311c:	2000086c 	.word	0x2000086c

08013120 <chMBReset.constprop.0>:
void chMBReset(mailbox_t *mbp) {
 8013120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013122:	2330      	movs	r3, #48	; 0x30
 8013124:	f383 8811 	msr	BASEPRI, r3
  mbp->wrptr = mbp->buffer;
 8013128:	4c26      	ldr	r4, [pc, #152]	; (80131c4 <chMBReset.constprop.0+0xa4>)
  return (bool)(qp->next != qp);
 801312a:	4625      	mov	r5, r4
 801312c:	6823      	ldr	r3, [r4, #0]
 801312e:	f855 1f18 	ldr.w	r1, [r5, #24]!
  mbp->cnt   = (size_t)0;
 8013132:	2700      	movs	r7, #0
  mbp->reset = true;
 8013134:	2201      	movs	r2, #1
  while (ch_queue_notempty(&tqp->queue)) {
 8013136:	42a9      	cmp	r1, r5
  mbp->rdptr = mbp->buffer;
 8013138:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 801313c:	6127      	str	r7, [r4, #16]
  mbp->reset = true;
 801313e:	7522      	strb	r2, [r4, #20]
 8013140:	d016      	beq.n	8013170 <chMBReset.constprop.0+0x50>
 8013142:	f06f 0c01 	mvn.w	ip, #1
 8013146:	460b      	mov	r3, r1
  qp->next       = p->next;
 8013148:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 801314a:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 801314c:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 801314e:	61a1      	str	r1, [r4, #24]
  qp->next->prev = qp;
 8013150:	604d      	str	r5, [r1, #4]
 8013152:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8013156:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
    pqp = pqp->next;
 801315a:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 801315c:	6890      	ldr	r0, [r2, #8]
 801315e:	42b0      	cmp	r0, r6
 8013160:	d2fb      	bcs.n	801315a <chMBReset.constprop.0+0x3a>
  p->prev       = pqp->prev;
 8013162:	6850      	ldr	r0, [r2, #4]
 8013164:	42a9      	cmp	r1, r5
 8013166:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 801316a:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 801316c:	6053      	str	r3, [r2, #4]
 801316e:	d1ea      	bne.n	8013146 <chMBReset.constprop.0+0x26>
  return (bool)(qp->next != qp);
 8013170:	6a21      	ldr	r1, [r4, #32]
 8013172:	4d15      	ldr	r5, [pc, #84]	; (80131c8 <chMBReset.constprop.0+0xa8>)
 8013174:	42a9      	cmp	r1, r5
 8013176:	d017      	beq.n	80131a8 <chMBReset.constprop.0+0x88>
 8013178:	f06f 0c01 	mvn.w	ip, #1
 801317c:	2700      	movs	r7, #0
 801317e:	460b      	mov	r3, r1
  qp->next       = p->next;
 8013180:	6809      	ldr	r1, [r1, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8013182:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8013184:	689e      	ldr	r6, [r3, #8]
  qp->next       = p->next;
 8013186:	6221      	str	r1, [r4, #32]
  qp->next->prev = qp;
 8013188:	604d      	str	r5, [r1, #4]
 801318a:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 801318e:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
    pqp = pqp->next;
 8013192:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8013194:	6890      	ldr	r0, [r2, #8]
 8013196:	42b0      	cmp	r0, r6
 8013198:	d2fb      	bcs.n	8013192 <chMBReset.constprop.0+0x72>
  p->prev       = pqp->prev;
 801319a:	6850      	ldr	r0, [r2, #4]
 801319c:	42a9      	cmp	r1, r5
 801319e:	e9c3 2000 	strd	r2, r0, [r3]
  p->prev->next = p;
 80131a2:	6003      	str	r3, [r0, #0]
  pqp->prev     = p;
 80131a4:	6053      	str	r3, [r2, #4]
 80131a6:	d1ea      	bne.n	801317e <chMBReset.constprop.0+0x5e>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80131a8:	4b08      	ldr	r3, [pc, #32]	; (80131cc <chMBReset.constprop.0+0xac>)
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	68db      	ldr	r3, [r3, #12]
 80131ae:	6892      	ldr	r2, [r2, #8]
 80131b0:	689b      	ldr	r3, [r3, #8]
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d901      	bls.n	80131ba <chMBReset.constprop.0+0x9a>
    __sch_reschedule_ahead();
 80131b6:	f7ee fecb 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 80131ba:	2300      	movs	r3, #0
 80131bc:	f383 8811 	msr	BASEPRI, r3
}
 80131c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131c2:	bf00      	nop
 80131c4:	2000084c 	.word	0x2000084c
 80131c8:	2000086c 	.word	0x2000086c
 80131cc:	20000a90 	.word	0x20000a90

080131d0 <chThdCreateFromMemoryPool.constprop.0>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 80131d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80131d4:	2330      	movs	r3, #48	; 0x30
 80131d6:	b087      	sub	sp, #28
 80131d8:	4607      	mov	r7, r0
 80131da:	460e      	mov	r6, r1
 80131dc:	4615      	mov	r5, r2
 80131de:	f383 8811 	msr	BASEPRI, r3
  objp = mp->next;
 80131e2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8013250 <chThdCreateFromMemoryPool.constprop.0+0x80>
 80131e6:	f8d8 4000 	ldr.w	r4, [r8]
  if (objp != NULL) {
 80131ea:	b334      	cbz	r4, 801323a <chThdCreateFromMemoryPool.constprop.0+0x6a>
    mp->next = mp->next->next;
 80131ec:	6823      	ldr	r3, [r4, #0]
 80131ee:	f8c8 3000 	str.w	r3, [r8]
 80131f2:	f04f 0900 	mov.w	r9, #0
 80131f6:	f389 8811 	msr	BASEPRI, r9
  void *wbase, *wend;

  chDbgCheck(mp != NULL);

  wbase = chPoolAlloc(mp);
  if (wbase == NULL) {
 80131fa:	b1d4      	cbz	r4, 8013232 <chThdCreateFromMemoryPool.constprop.0+0x62>
    return NULL;
  }
  wend = (void *)((uint8_t *)wbase + mp->object_size);

  thread_descriptor_t td = THD_DESCRIPTOR(name, wbase, wend, prio, pf, arg);
 80131fc:	4b15      	ldr	r3, [pc, #84]	; (8013254 <chThdCreateFromMemoryPool.constprop.0+0x84>)
 80131fe:	9603      	str	r6, [sp, #12]
 8013200:	e9cd 3504 	strd	r3, r5, [sp, #16]
  wend = (void *)((uint8_t *)wbase + mp->object_size);
 8013204:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013208:	4423      	add	r3, r4
  thread_descriptor_t td = THD_DESCRIPTOR(name, wbase, wend, prio, pf, arg);
 801320a:	e9cd 7400 	strd	r7, r4, [sp]
 801320e:	2230      	movs	r2, #48	; 0x30
 8013210:	9302      	str	r3, [sp, #8]
 8013212:	f382 8811 	msr	BASEPRI, r2
#if CH_DBG_FILL_THREADS == TRUE
  __thd_stackfill((uint8_t *)wbase, (uint8_t *)wend);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8013216:	4668      	mov	r0, sp
 8013218:	f7f0 fc62 	bl	8003ae0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 801321c:	2302      	movs	r3, #2
 801321e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tp->mpool = mp;
 8013222:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
  chSchWakeupS(tp, MSG_OK);
 8013226:	4649      	mov	r1, r9
  tp = chThdCreateSuspendedI(&td);
 8013228:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 801322a:	f7f0 fb29 	bl	8003880 <chSchWakeupS>
 801322e:	f389 8811 	msr	BASEPRI, r9
  chSysUnlock();

  return tp;
}
 8013232:	4620      	mov	r0, r4
 8013234:	b007      	add	sp, #28
 8013236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (mp->provider != NULL) {
 801323a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801323e:	b123      	cbz	r3, 801324a <chThdCreateFromMemoryPool.constprop.0+0x7a>
    objp = mp->provider(mp->object_size, mp->align);
 8013240:	e9d8 0101 	ldrd	r0, r1, [r8, #4]
 8013244:	4798      	blx	r3
 8013246:	4604      	mov	r4, r0
 8013248:	e7d3      	b.n	80131f2 <chThdCreateFromMemoryPool.constprop.0+0x22>
 801324a:	f384 8811 	msr	BASEPRI, r4
 801324e:	e7f0      	b.n	8013232 <chThdCreateFromMemoryPool.constprop.0+0x62>
 8013250:	20000c8c 	.word	0x20000c8c
 8013254:	08000a91 	.word	0x08000a91
	...

08013260 <chThdCreateFromHeap.constprop.0>:
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8013260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013264:	4605      	mov	r5, r0
 8013266:	b086      	sub	sp, #24
  wbase = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8013268:	4813      	ldr	r0, [pc, #76]	; (80132b8 <chThdCreateFromHeap.constprop.0+0x58>)
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 801326a:	4690      	mov	r8, r2
 801326c:	460f      	mov	r7, r1
  wbase = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 801326e:	2208      	movs	r2, #8
 8013270:	4629      	mov	r1, r5
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8013272:	461e      	mov	r6, r3
  wbase = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8013274:	f7f1 fa84 	bl	8004780 <chHeapAllocAligned>
  if (wbase == NULL) {
 8013278:	4604      	mov	r4, r0
 801327a:	b1c0      	cbz	r0, 80132ae <chThdCreateFromHeap.constprop.0+0x4e>
  thread_descriptor_t td = THD_DESCRIPTOR(name, wbase, wend, prio, pf, arg);
 801327c:	4b0f      	ldr	r3, [pc, #60]	; (80132bc <chThdCreateFromHeap.constprop.0+0x5c>)
 801327e:	9304      	str	r3, [sp, #16]
  wend = (void *)((uint8_t *)wbase + size);
 8013280:	4405      	add	r5, r0
  thread_descriptor_t td = THD_DESCRIPTOR(name, wbase, wend, prio, pf, arg);
 8013282:	9502      	str	r5, [sp, #8]
 8013284:	e9cd 7000 	strd	r7, r0, [sp]
 8013288:	f8cd 800c 	str.w	r8, [sp, #12]
 801328c:	9605      	str	r6, [sp, #20]
 801328e:	2330      	movs	r3, #48	; 0x30
 8013290:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(&td);
 8013294:	4668      	mov	r0, sp
 8013296:	f7f0 fc23 	bl	8003ae0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 801329a:	2301      	movs	r3, #1
 801329c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  chSchWakeupS(tp, MSG_OK);
 80132a0:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 80132a2:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 80132a4:	f7f0 faec 	bl	8003880 <chSchWakeupS>
 80132a8:	2300      	movs	r3, #0
 80132aa:	f383 8811 	msr	BASEPRI, r3
}
 80132ae:	4620      	mov	r0, r4
 80132b0:	b006      	add	sp, #24
 80132b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132b6:	bf00      	nop
 80132b8:	20000bfc 	.word	0x20000bfc
 80132bc:	08000a91 	.word	0x08000a91

080132c0 <chEvtWaitOne.constprop.0>:
  return __sch_get_currthread();
 80132c0:	4b11      	ldr	r3, [pc, #68]	; (8013308 <chEvtWaitOne.constprop.0+0x48>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 80132c2:	b510      	push	{r4, lr}
 80132c4:	2230      	movs	r2, #48	; 0x30
 80132c6:	68dc      	ldr	r4, [r3, #12]
 80132c8:	f382 8811 	msr	BASEPRI, r2
  m = currtp->epending & events;
 80132cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if (m == (eventmask_t)0) {
 80132ce:	b140      	cbz	r0, 80132e2 <chEvtWaitOne.constprop.0+0x22>
  m ^= m & (m - (eventmask_t)1);
 80132d0:	4243      	negs	r3, r0
  currtp->epending &= ~m;
 80132d2:	ea20 0203 	bic.w	r2, r0, r3
 80132d6:	63a2      	str	r2, [r4, #56]	; 0x38
  m ^= m & (m - (eventmask_t)1);
 80132d8:	4018      	ands	r0, r3
 80132da:	2300      	movs	r3, #0
 80132dc:	f383 8811 	msr	BASEPRI, r3
}
 80132e0:	bd10      	pop	{r4, pc}
  thread_t *otp = __instance_get_currthread(oip);
 80132e2:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 80132e4:	6818      	ldr	r0, [r3, #0]
    currtp->u.ewmask = events;
 80132e6:	f04f 32ff 	mov.w	r2, #4294967295
 80132ea:	62a2      	str	r2, [r4, #40]	; 0x28
  otp->state = newstate;
 80132ec:	220a      	movs	r2, #10
 80132ee:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pqp->next       = p->next;
 80132f2:	6802      	ldr	r2, [r0, #0]
 80132f4:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 80132f6:	6053      	str	r3, [r2, #4]
  ntp->state = CH_STATE_CURRENT;
 80132f8:	2201      	movs	r2, #1
 80132fa:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 80132fe:	60d8      	str	r0, [r3, #12]
  chSysSwitch(ntp, otp);
 8013300:	f7ec ffde 	bl	80002c0 <__port_switch>
    m = currtp->epending & events;
 8013304:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8013306:	e7e3      	b.n	80132d0 <chEvtWaitOne.constprop.0+0x10>
 8013308:	20000a90 	.word	0x20000a90
 801330c:	00000000 	.word	0x00000000

08013310 <chSemResetWithMessage.constprop.0>:
void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg) {
 8013310:	b538      	push	{r3, r4, r5, lr}
 8013312:	2330      	movs	r3, #48	; 0x30
 8013314:	f383 8811 	msr	BASEPRI, r3
  while (ch_queue_notempty(&sp->queue)) {
 8013318:	6803      	ldr	r3, [r0, #0]
  sp->cnt = n;
 801331a:	6081      	str	r1, [r0, #8]
  while (ch_queue_notempty(&sp->queue)) {
 801331c:	4298      	cmp	r0, r3
 801331e:	d018      	beq.n	8013352 <chSemResetWithMessage.constprop.0+0x42>
  tp->state = CH_STATE_READY;
 8013320:	f04f 0c00 	mov.w	ip, #0
    chSchReadyI(threadref(ch_queue_lifo_remove(&sp->queue)))->u.rdymsg = msg;
 8013324:	f06f 0501 	mvn.w	r5, #1
  ch_queue_t *p = qp->prev;
 8013328:	6843      	ldr	r3, [r0, #4]
  qp->prev       = p->prev;
 801332a:	6859      	ldr	r1, [r3, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 801332c:	699a      	ldr	r2, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 801332e:	689c      	ldr	r4, [r3, #8]
  qp->prev       = p->prev;
 8013330:	6041      	str	r1, [r0, #4]
  qp->prev->next = qp;
 8013332:	6008      	str	r0, [r1, #0]
  tp->state = CH_STATE_READY;
 8013334:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
    pqp = pqp->next;
 8013338:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 801333a:	6891      	ldr	r1, [r2, #8]
 801333c:	42a1      	cmp	r1, r4
 801333e:	d2fb      	bcs.n	8013338 <chSemResetWithMessage.constprop.0+0x28>
  while (ch_queue_notempty(&sp->queue)) {
 8013340:	6804      	ldr	r4, [r0, #0]
  p->prev       = pqp->prev;
 8013342:	6851      	ldr	r1, [r2, #4]
 8013344:	42a0      	cmp	r0, r4
 8013346:	e9c3 2100 	strd	r2, r1, [r3]
  p->prev->next = p;
 801334a:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 801334c:	6053      	str	r3, [r2, #4]
    chSchReadyI(threadref(ch_queue_lifo_remove(&sp->queue)))->u.rdymsg = msg;
 801334e:	629d      	str	r5, [r3, #40]	; 0x28
  while (ch_queue_notempty(&sp->queue)) {
 8013350:	d1ea      	bne.n	8013328 <chSemResetWithMessage.constprop.0+0x18>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8013352:	4b06      	ldr	r3, [pc, #24]	; (801336c <chSemResetWithMessage.constprop.0+0x5c>)
 8013354:	681a      	ldr	r2, [r3, #0]
 8013356:	68db      	ldr	r3, [r3, #12]
 8013358:	6892      	ldr	r2, [r2, #8]
 801335a:	689b      	ldr	r3, [r3, #8]
 801335c:	429a      	cmp	r2, r3
 801335e:	d901      	bls.n	8013364 <chSemResetWithMessage.constprop.0+0x54>
    __sch_reschedule_ahead();
 8013360:	f7ee fdf6 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 8013364:	2300      	movs	r3, #0
 8013366:	f383 8811 	msr	BASEPRI, r3
}
 801336a:	bd38      	pop	{r3, r4, r5, pc}
 801336c:	20000a90 	.word	0x20000a90

08013370 <_pal_lld_setgroupmode.constprop.0>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8013370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8013374:	2200      	movs	r2, #0

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8013376:	4c21      	ldr	r4, [pc, #132]	; (80133fc <_pal_lld_setgroupmode.constprop.0+0x8c>)
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8013378:	f04f 0c02 	mov.w	ip, #2
      altrmask = altr << ((bit & 7) * 4);
 801337c:	f04f 0807 	mov.w	r8, #7
      m4 = 15 << ((bit & 7) * 4);
 8013380:	270f      	movs	r7, #15
      m1 = 1 << bit;
 8013382:	2601      	movs	r6, #1
      m2 = 3 << (bit * 2);
 8013384:	f04f 0e03 	mov.w	lr, #3
 8013388:	e010      	b.n	80133ac <_pal_lld_setgroupmode.constprop.0+0x3c>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 801338a:	6a21      	ldr	r1, [r4, #32]
 801338c:	ea21 0303 	bic.w	r3, r1, r3
 8013390:	ea43 0309 	orr.w	r3, r3, r9
 8013394:	6223      	str	r3, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8013396:	6823      	ldr	r3, [r4, #0]
 8013398:	ea0a 0a03 	and.w	sl, sl, r3
 801339c:	ea4a 030c 	orr.w	r3, sl, ip
 80133a0:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80133a2:	0840      	lsrs	r0, r0, #1
 80133a4:	d028      	beq.n	80133f8 <_pal_lld_setgroupmode.constprop.0+0x88>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 80133a6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    bit++;
 80133aa:	3201      	adds	r2, #1
      altrmask = altr << ((bit & 7) * 4);
 80133ac:	f002 0307 	and.w	r3, r2, #7
 80133b0:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
 80133b2:	0051      	lsls	r1, r2, #1
    if ((mask & 1) != 0) {
 80133b4:	f010 0f01 	tst.w	r0, #1
      altrmask = altr << ((bit & 7) * 4);
 80133b8:	fa08 f903 	lsl.w	r9, r8, r3
      m1 = 1 << bit;
 80133bc:	fa06 fa02 	lsl.w	sl, r6, r2
      m2 = 3 << (bit * 2);
 80133c0:	fa0e f101 	lsl.w	r1, lr, r1
      m4 = 15 << ((bit & 7) * 4);
 80133c4:	fa07 f303 	lsl.w	r3, r7, r3
    if ((mask & 1) != 0) {
 80133c8:	d0eb      	beq.n	80133a2 <_pal_lld_setgroupmode.constprop.0+0x32>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80133ca:	6865      	ldr	r5, [r4, #4]
 80133cc:	ea25 050a 	bic.w	r5, r5, sl
 80133d0:	6065      	str	r5, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80133d2:	68a5      	ldr	r5, [r4, #8]
 80133d4:	ea25 0501 	bic.w	r5, r5, r1
 80133d8:	60a5      	str	r5, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80133da:	68e5      	ldr	r5, [r4, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80133dc:	ea6f 0a01 	mvn.w	sl, r1
        if (bit < 8)
 80133e0:	2a07      	cmp	r2, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80133e2:	ea25 0101 	bic.w	r1, r5, r1
 80133e6:	60e1      	str	r1, [r4, #12]
        if (bit < 8)
 80133e8:	d9cf      	bls.n	801338a <_pal_lld_setgroupmode.constprop.0+0x1a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80133ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80133ec:	ea21 0303 	bic.w	r3, r1, r3
 80133f0:	ea43 0309 	orr.w	r3, r3, r9
 80133f4:	6263      	str	r3, [r4, #36]	; 0x24
 80133f6:	e7ce      	b.n	8013396 <_pal_lld_setgroupmode.constprop.0+0x26>
  }
}
 80133f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133fc:	40020000 	.word	0x40020000

08013400 <vt_insert_first.constprop.0>:
  vtlp->lasttime = now;
 8013400:	4b16      	ldr	r3, [pc, #88]	; (801345c <vt_insert_first.constprop.0+0x5c>)
static void vt_insert_first(virtual_timers_list_t *vtlp,
 8013402:	b430      	push	{r4, r5}
  dlp->prev       = dlhp;
 8013404:	f103 0410 	add.w	r4, r3, #16
  vtlp->lasttime = now;
 8013408:	61d9      	str	r1, [r3, #28]
 801340a:	6044      	str	r4, [r0, #4]
  dlp->next       = dlp->prev->next;
 801340c:	691c      	ldr	r4, [r3, #16]
  dlp->delta      = delta;
 801340e:	6082      	str	r2, [r0, #8]
 8013410:	2a02      	cmp	r2, #2
  dlp->next       = dlp->prev->next;
 8013412:	6004      	str	r4, [r0, #0]
 8013414:	bf38      	it	cc
 8013416:	2202      	movcc	r2, #2
  dlp->next->prev = dlp;
 8013418:	6060      	str	r0, [r4, #4]
  dlhp->next      = dlp;
 801341a:	6118      	str	r0, [r3, #16]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 801341c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 8013420:	188c      	adds	r4, r1, r2
 8013422:	6344      	str	r4, [r0, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8013424:	2400      	movs	r4, #0
 8013426:	6104      	str	r4, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8013428:	2402      	movs	r4, #2
 801342a:	60c4      	str	r4, [r0, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 801342c:	6a45      	ldr	r5, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 801342e:	eba5 0c01 	sub.w	ip, r5, r1
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8013432:	4562      	cmp	r2, ip
 8013434:	d903      	bls.n	801343e <vt_insert_first.constprop.0+0x3e>
}
 8013436:	bc30      	pop	{r4, r5}
 8013438:	4770      	bx	lr
 801343a:	4629      	mov	r1, r5
 801343c:	4615      	mov	r5, r2
    currdelta += (sysinterval_t)1;
 801343e:	3401      	adds	r4, #1
  return systime + (systime_t)interval;
 8013440:	4421      	add	r1, r4
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8013442:	6341      	str	r1, [r0, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8013444:	6a42      	ldr	r2, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8013446:	1b51      	subs	r1, r2, r5
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8013448:	42a1      	cmp	r1, r4
 801344a:	d2f6      	bcs.n	801343a <vt_insert_first.constprop.0+0x3a>
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 801344c:	2c02      	cmp	r4, #2
 801344e:	d9f2      	bls.n	8013436 <vt_insert_first.constprop.0+0x36>
  currcore->rfcu.mask |= mask;
 8013450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013452:	f042 0201 	orr.w	r2, r2, #1
}
 8013456:	bc30      	pop	{r4, r5}
 8013458:	635a      	str	r2, [r3, #52]	; 0x34
 801345a:	4770      	bx	lr
 801345c:	20000a90 	.word	0x20000a90

08013460 <vt_enqueue.constprop.0>:
static void vt_enqueue(virtual_timers_list_t *vtlp,
 8013460:	b4f0      	push	{r4, r5, r6, r7}
  return (bool)(dlhp == dlhp->next);
 8013462:	4e25      	ldr	r6, [pc, #148]	; (80134f8 <vt_enqueue.constprop.0+0x98>)
 8013464:	4633      	mov	r3, r6
 8013466:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 801346a:	f853 2f10 	ldr.w	r2, [r3, #16]!
 801346e:	f8dc 7024 	ldr.w	r7, [ip, #36]	; 0x24
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8013472:	429a      	cmp	r2, r3
 8013474:	d038      	beq.n	80134e8 <vt_enqueue.constprop.0+0x88>
 8013476:	69f3      	ldr	r3, [r6, #28]
    if (delta < vtlp->dlist.next->delta) {
 8013478:	6894      	ldr	r4, [r2, #8]
 801347a:	1afb      	subs	r3, r7, r3
      delta = delay;
 801347c:	18cb      	adds	r3, r1, r3
 801347e:	bf28      	it	cs
 8013480:	460b      	movcs	r3, r1
    if (delta < vtlp->dlist.next->delta) {
 8013482:	429c      	cmp	r4, r3
 8013484:	4605      	mov	r5, r0
 8013486:	d903      	bls.n	8013490 <vt_enqueue.constprop.0+0x30>
 8013488:	e012      	b.n	80134b0 <vt_enqueue.constprop.0+0x50>
    dlp = dlp->next;
 801348a:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 801348c:	1b1b      	subs	r3, r3, r4
  while (likely(dlp->delta < delta)) {
 801348e:	6894      	ldr	r4, [r2, #8]
 8013490:	429c      	cmp	r4, r3
 8013492:	d3fa      	bcc.n	801348a <vt_enqueue.constprop.0+0x2a>
  dlp->prev       = dlp->next->prev;
 8013494:	6851      	ldr	r1, [r2, #4]
  dlp->delta      = delta;
 8013496:	60ab      	str	r3, [r5, #8]
  dlp->prev       = dlp->next->prev;
 8013498:	e9c5 2100 	strd	r2, r1, [r5]
  dlp->prev->next = dlp;
 801349c:	600d      	str	r5, [r1, #0]
  dlp->delta -= delta;
 801349e:	6891      	ldr	r1, [r2, #8]
  dlhp->prev      = dlp;
 80134a0:	6055      	str	r5, [r2, #4]
  dlp->delta -= delta;
 80134a2:	1ac9      	subs	r1, r1, r3
  dlhp->delta = (sysinterval_t)-1;
 80134a4:	f04f 33ff 	mov.w	r3, #4294967295
  dlp->delta -= delta;
 80134a8:	6091      	str	r1, [r2, #8]
  dlhp->delta = (sysinterval_t)-1;
 80134aa:	61b3      	str	r3, [r6, #24]
}
 80134ac:	bcf0      	pop	{r4, r5, r6, r7}
 80134ae:	4770      	bx	lr
 80134b0:	2902      	cmp	r1, #2
 80134b2:	bf38      	it	cc
 80134b4:	2102      	movcc	r1, #2
  return systime + (systime_t)interval;
 80134b6:	1878      	adds	r0, r7, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80134b8:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80134bc:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80134c0:	1bc7      	subs	r7, r0, r7
    if (likely(nowdelta < delay)) {
 80134c2:	428f      	cmp	r7, r1
 80134c4:	d3e4      	bcc.n	8013490 <vt_enqueue.constprop.0+0x30>
 80134c6:	2102      	movs	r1, #2
    currdelta += (sysinterval_t)1;
 80134c8:	3101      	adds	r1, #1
  return systime + (systime_t)interval;
 80134ca:	1847      	adds	r7, r0, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80134cc:	f8cc 7034 	str.w	r7, [ip, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80134d0:	f8dc 7024 	ldr.w	r7, [ip, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80134d4:	1a38      	subs	r0, r7, r0
    if (likely(nowdelta < delay)) {
 80134d6:	4288      	cmp	r0, r1
 80134d8:	d20b      	bcs.n	80134f2 <vt_enqueue.constprop.0+0x92>
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 80134da:	2902      	cmp	r1, #2
 80134dc:	d9d8      	bls.n	8013490 <vt_enqueue.constprop.0+0x30>
 80134de:	6b71      	ldr	r1, [r6, #52]	; 0x34
 80134e0:	f041 0101 	orr.w	r1, r1, #1
 80134e4:	6371      	str	r1, [r6, #52]	; 0x34
}
 80134e6:	e7d3      	b.n	8013490 <vt_enqueue.constprop.0+0x30>
      vt_insert_first(vtlp, vtp, now, delay);
 80134e8:	460a      	mov	r2, r1
 80134ea:	4639      	mov	r1, r7
}
 80134ec:	bcf0      	pop	{r4, r5, r6, r7}
      vt_insert_first(vtlp, vtp, now, delay);
 80134ee:	f7ff bf87 	b.w	8013400 <vt_insert_first.constprop.0>
 80134f2:	4638      	mov	r0, r7
 80134f4:	e7e8      	b.n	80134c8 <vt_enqueue.constprop.0+0x68>
 80134f6:	bf00      	nop
 80134f8:	20000a90 	.word	0x20000a90
 80134fc:	00000000 	.word	0x00000000

08013500 <chPipeReadTimeout.part.0.constprop.0>:
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 8013500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013504:	b083      	sub	sp, #12
 8013506:	4607      	mov	r7, r0
 8013508:	4688      	mov	r8, r1
 801350a:	9100      	str	r1, [sp, #0]
 801350c:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8013510:	f38b 8811 	msr	BASEPRI, fp
 8013514:	4830      	ldr	r0, [pc, #192]	; (80135d8 <chPipeReadTimeout.part.0.constprop.0+0xd8>)
 8013516:	f7f0 fd8b 	bl	8004030 <chMtxLockS>
 801351a:	2300      	movs	r3, #0
 801351c:	f383 8811 	msr	BASEPRI, r3
 8013520:	4d2e      	ldr	r5, [pc, #184]	; (80135dc <chPipeReadTimeout.part.0.constprop.0+0xdc>)
 8013522:	469a      	mov	sl, r3
 8013524:	f105 0920 	add.w	r9, r5, #32
 8013528:	f38b 8811 	msr	BASEPRI, fp
 801352c:	4648      	mov	r0, r9
 801352e:	f7f0 fd7f 	bl	8004030 <chMtxLockS>
 8013532:	f38a 8811 	msr	BASEPRI, sl
  s1 = (size_t)(pp->top - pp->rdptr);
 8013536:	e9d5 1303 	ldrd	r1, r3, [r5, #12]
 801353a:	686e      	ldr	r6, [r5, #4]
 801353c:	4543      	cmp	r3, r8
 801353e:	461c      	mov	r4, r3
 8013540:	eba6 0601 	sub.w	r6, r6, r1
 8013544:	bf28      	it	cs
 8013546:	4644      	movcs	r4, r8
  pp->cnt -= n;
 8013548:	1b1b      	subs	r3, r3, r4
  if (n < s1) {
 801354a:	42b4      	cmp	r4, r6
  pp->cnt -= n;
 801354c:	612b      	str	r3, [r5, #16]
  if (n < s1) {
 801354e:	d33b      	bcc.n	80135c8 <chPipeReadTimeout.part.0.constprop.0+0xc8>
    s2 = n - s1;
 8013550:	eba4 0306 	sub.w	r3, r4, r6
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8013554:	4632      	mov	r2, r6
    s2 = n - s1;
 8013556:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 8013558:	4638      	mov	r0, r7
  else if (n > s1) {
 801355a:	d930      	bls.n	80135be <chPipeReadTimeout.part.0.constprop.0+0xbe>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 801355c:	f001 fb92 	bl	8014c84 <memcpy>
    memcpy((void *)bp, (void *)pp->buffer, s2);
 8013560:	9b01      	ldr	r3, [sp, #4]
 8013562:	6829      	ldr	r1, [r5, #0]
 8013564:	461a      	mov	r2, r3
 8013566:	19b8      	adds	r0, r7, r6
 8013568:	f001 fb8c 	bl	8014c84 <memcpy>
    pp->rdptr = pp->buffer + s2;
 801356c:	682a      	ldr	r2, [r5, #0]
 801356e:	9b01      	ldr	r3, [sp, #4]
 8013570:	4413      	add	r3, r2
  PC_UNLOCK(pp);
 8013572:	4648      	mov	r0, r9
        break;
      }
    }
    else {
      n  -= done;
      bp += done;
 8013574:	4427      	add	r7, r4
    pp->rdptr += n;
 8013576:	60eb      	str	r3, [r5, #12]
  PC_UNLOCK(pp);
 8013578:	f7f0 fdfa 	bl	8004170 <chMtxUnlock>
    if (done == (size_t)0) {
 801357c:	b97c      	cbnz	r4, 801359e <chPipeReadTimeout.part.0.constprop.0+0x9e>
 801357e:	2330      	movs	r3, #48	; 0x30
 8013580:	f383 8811 	msr	BASEPRI, r3
 8013584:	f384 8811 	msr	BASEPRI, r4
    }
  }

  PR_UNLOCK(pp);

  return max - n;
 8013588:	9b00      	ldr	r3, [sp, #0]
 801358a:	eba3 0308 	sub.w	r3, r3, r8
 801358e:	9300      	str	r3, [sp, #0]
  PR_UNLOCK(pp);
 8013590:	4811      	ldr	r0, [pc, #68]	; (80135d8 <chPipeReadTimeout.part.0.constprop.0+0xd8>)
 8013592:	f7f0 fded 	bl	8004170 <chMtxUnlock>
}
 8013596:	9800      	ldr	r0, [sp, #0]
 8013598:	b003      	add	sp, #12
 801359a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n  -= done;
 801359e:	eba8 0804 	sub.w	r8, r8, r4
 80135a2:	f38b 8811 	msr	BASEPRI, fp
  if (*trp != NULL) {
 80135a6:	69a8      	ldr	r0, [r5, #24]
    chSchWakeupS(tp, msg);
 80135a8:	2100      	movs	r1, #0
  if (*trp != NULL) {
 80135aa:	b110      	cbz	r0, 80135b2 <chPipeReadTimeout.part.0.constprop.0+0xb2>
    *trp = NULL;
 80135ac:	61a9      	str	r1, [r5, #24]
    chSchWakeupS(tp, msg);
 80135ae:	f7f0 f967 	bl	8003880 <chSchWakeupS>
 80135b2:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 80135b6:	f1b8 0f00 	cmp.w	r8, #0
 80135ba:	d1b5      	bne.n	8013528 <chPipeReadTimeout.part.0.constprop.0+0x28>
 80135bc:	e7e8      	b.n	8013590 <chPipeReadTimeout.part.0.constprop.0+0x90>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 80135be:	4622      	mov	r2, r4
 80135c0:	f001 fb60 	bl	8014c84 <memcpy>
    pp->rdptr = pp->buffer;
 80135c4:	682b      	ldr	r3, [r5, #0]
 80135c6:	e7d4      	b.n	8013572 <chPipeReadTimeout.part.0.constprop.0+0x72>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 80135c8:	4622      	mov	r2, r4
 80135ca:	4638      	mov	r0, r7
 80135cc:	f001 fb5a 	bl	8014c84 <memcpy>
    pp->rdptr += n;
 80135d0:	68eb      	ldr	r3, [r5, #12]
 80135d2:	4423      	add	r3, r4
 80135d4:	e7cd      	b.n	8013572 <chPipeReadTimeout.part.0.constprop.0+0x72>
 80135d6:	bf00      	nop
 80135d8:	200008c4 	.word	0x200008c4
 80135dc:	20000884 	.word	0x20000884

080135e0 <chPipeWriteTimeout.part.0.constprop.0>:
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 80135e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e4:	b083      	sub	sp, #12
 80135e6:	4680      	mov	r8, r0
 80135e8:	9000      	str	r0, [sp, #0]
 80135ea:	f04f 0b30 	mov.w	fp, #48	; 0x30
 80135ee:	f38b 8811 	msr	BASEPRI, fp
 80135f2:	4831      	ldr	r0, [pc, #196]	; (80136b8 <chPipeWriteTimeout.part.0.constprop.0+0xd8>)
 80135f4:	f7f0 fd1c 	bl	8004030 <chMtxLockS>
 80135f8:	2300      	movs	r3, #0
 80135fa:	f383 8811 	msr	BASEPRI, r3
 80135fe:	4d2f      	ldr	r5, [pc, #188]	; (80136bc <chPipeWriteTimeout.part.0.constprop.0+0xdc>)
 8013600:	4f2f      	ldr	r7, [pc, #188]	; (80136c0 <chPipeWriteTimeout.part.0.constprop.0+0xe0>)
 8013602:	f105 0920 	add.w	r9, r5, #32
 8013606:	469a      	mov	sl, r3
 8013608:	4646      	mov	r6, r8
 801360a:	f38b 8811 	msr	BASEPRI, fp
 801360e:	4648      	mov	r0, r9
 8013610:	f7f0 fd0e 	bl	8004030 <chMtxLockS>
 8013614:	f38a 8811 	msr	BASEPRI, sl
  return (size_t)(pp->top - pp->buffer);
 8013618:	e9d5 4200 	ldrd	r4, r2, [r5]
  return pp->cnt;
 801361c:	692b      	ldr	r3, [r5, #16]
  s1 = (size_t)(pp->top - pp->wrptr);
 801361e:	68a8      	ldr	r0, [r5, #8]
  return (size_t)(pp->top - pp->buffer);
 8013620:	1b14      	subs	r4, r2, r4
  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 8013622:	1ae4      	subs	r4, r4, r3
 8013624:	42b4      	cmp	r4, r6
 8013626:	bf28      	it	cs
 8013628:	4634      	movcs	r4, r6
 801362a:	eba2 0800 	sub.w	r8, r2, r0
  pp->cnt += n;
 801362e:	4423      	add	r3, r4
  if (n < s1) {
 8013630:	4544      	cmp	r4, r8
  pp->cnt += n;
 8013632:	612b      	str	r3, [r5, #16]
  if (n < s1) {
 8013634:	d339      	bcc.n	80136aa <chPipeWriteTimeout.part.0.constprop.0+0xca>
    s2 = n - s1;
 8013636:	eba4 0308 	sub.w	r3, r4, r8
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 801363a:	4642      	mov	r2, r8
 801363c:	4639      	mov	r1, r7
    s2 = n - s1;
 801363e:	9301      	str	r3, [sp, #4]
  else if (n > s1) {
 8013640:	d92e      	bls.n	80136a0 <chPipeWriteTimeout.part.0.constprop.0+0xc0>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8013642:	f001 fb1f 	bl	8014c84 <memcpy>
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 8013646:	9b01      	ldr	r3, [sp, #4]
 8013648:	6828      	ldr	r0, [r5, #0]
 801364a:	461a      	mov	r2, r3
 801364c:	eb07 0108 	add.w	r1, r7, r8
 8013650:	f001 fb18 	bl	8014c84 <memcpy>
    pp->wrptr = pp->buffer + s2;
 8013654:	682a      	ldr	r2, [r5, #0]
 8013656:	9b01      	ldr	r3, [sp, #4]
 8013658:	4413      	add	r3, r2
  PC_UNLOCK(pp);
 801365a:	4648      	mov	r0, r9
      bp += done;
 801365c:	4427      	add	r7, r4
    pp->wrptr += n;
 801365e:	60ab      	str	r3, [r5, #8]
  PC_UNLOCK(pp);
 8013660:	f7f0 fd86 	bl	8004170 <chMtxUnlock>
    if (done == (size_t)0) {
 8013664:	b974      	cbnz	r4, 8013684 <chPipeWriteTimeout.part.0.constprop.0+0xa4>
 8013666:	2330      	movs	r3, #48	; 0x30
 8013668:	f383 8811 	msr	BASEPRI, r3
 801366c:	f384 8811 	msr	BASEPRI, r4
  return max - n;
 8013670:	9b00      	ldr	r3, [sp, #0]
 8013672:	1b9b      	subs	r3, r3, r6
 8013674:	9300      	str	r3, [sp, #0]
  PW_UNLOCK(pp);
 8013676:	4810      	ldr	r0, [pc, #64]	; (80136b8 <chPipeWriteTimeout.part.0.constprop.0+0xd8>)
 8013678:	f7f0 fd7a 	bl	8004170 <chMtxUnlock>
}
 801367c:	9800      	ldr	r0, [sp, #0]
 801367e:	b003      	add	sp, #12
 8013680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n  -= done;
 8013684:	1b36      	subs	r6, r6, r4
 8013686:	f38b 8811 	msr	BASEPRI, fp
  if (*trp != NULL) {
 801368a:	69e8      	ldr	r0, [r5, #28]
    chSchWakeupS(tp, msg);
 801368c:	2100      	movs	r1, #0
  if (*trp != NULL) {
 801368e:	b110      	cbz	r0, 8013696 <chPipeWriteTimeout.part.0.constprop.0+0xb6>
    *trp = NULL;
 8013690:	61e9      	str	r1, [r5, #28]
    chSchWakeupS(tp, msg);
 8013692:	f7f0 f8f5 	bl	8003880 <chSchWakeupS>
 8013696:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 801369a:	2e00      	cmp	r6, #0
 801369c:	d1b5      	bne.n	801360a <chPipeWriteTimeout.part.0.constprop.0+0x2a>
 801369e:	e7ea      	b.n	8013676 <chPipeWriteTimeout.part.0.constprop.0+0x96>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 80136a0:	4622      	mov	r2, r4
 80136a2:	f001 faef 	bl	8014c84 <memcpy>
    pp->wrptr = pp->buffer;
 80136a6:	682b      	ldr	r3, [r5, #0]
 80136a8:	e7d7      	b.n	801365a <chPipeWriteTimeout.part.0.constprop.0+0x7a>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 80136aa:	4622      	mov	r2, r4
 80136ac:	4639      	mov	r1, r7
 80136ae:	f001 fae9 	bl	8014c84 <memcpy>
    pp->wrptr += n;
 80136b2:	68ab      	ldr	r3, [r5, #8]
 80136b4:	4423      	add	r3, r4
 80136b6:	e7d0      	b.n	801365a <chPipeWriteTimeout.part.0.constprop.0+0x7a>
 80136b8:	200008b4 	.word	0x200008b4
 80136bc:	20000884 	.word	0x20000884
 80136c0:	08016158 	.word	0x08016158
	...

080136d0 <sdObjectInit.constprop.0>:
  sdp->vmt = &vmt;
 80136d0:	4603      	mov	r3, r0
 80136d2:	4a14      	ldr	r2, [pc, #80]	; (8013724 <sdObjectInit.constprop.0+0x54>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 80136d4:	b410      	push	{r4}
  sdp->vmt = &vmt;
 80136d6:	f843 2b04 	str.w	r2, [r3], #4
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 80136da:	f100 040c 	add.w	r4, r0, #12
 80136de:	f100 0254 	add.w	r2, r0, #84	; 0x54
  oqp->q_notify  = onfy;
 80136e2:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_counter = 0;
 80136e4:	2100      	movs	r1, #0
 80136e6:	6141      	str	r1, [r0, #20]
  qp->prev = qp;
 80136e8:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_wrptr   = bp;
 80136ec:	e9c0 2208 	strd	r2, r2, [r0, #32]
  oqp->q_counter = size;
 80136f0:	2410      	movs	r4, #16
  sdp->state = SD_STOP;
 80136f2:	f04f 0c01 	mov.w	ip, #1
  esp->next = (event_listener_t *)esp;
 80136f6:	6043      	str	r3, [r0, #4]
  iqp->q_notify  = infy;
 80136f8:	6281      	str	r1, [r0, #40]	; 0x28
  iqp->q_top     = bp + size;
 80136fa:	f100 0364 	add.w	r3, r0, #100	; 0x64
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 80136fe:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqp->q_buffer  = bp;
 8013702:	6182      	str	r2, [r0, #24]
  oqp->q_top     = bp + size;
 8013704:	f100 0274 	add.w	r2, r0, #116	; 0x74
  oqp->q_counter = size;
 8013708:	6384      	str	r4, [r0, #56]	; 0x38
  qp->next = qp;
 801370a:	e9c0 010b 	strd	r0, r1, [r0, #44]	; 0x2c
  oqp->q_wrptr   = bp;
 801370e:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
}
 8013712:	bc10      	pop	{r4}
  sdp->state = SD_STOP;
 8013714:	f880 c008 	strb.w	ip, [r0, #8]
  iqp->q_top     = bp + size;
 8013718:	61c3      	str	r3, [r0, #28]
  qp->prev = qp;
 801371a:	6341      	str	r1, [r0, #52]	; 0x34
  oqp->q_buffer  = bp;
 801371c:	63c3      	str	r3, [r0, #60]	; 0x3c
  oqp->q_top     = bp + size;
 801371e:	6402      	str	r2, [r0, #64]	; 0x40
  oqp->q_link    = link;
 8013720:	6500      	str	r0, [r0, #80]	; 0x50
}
 8013722:	4770      	bx	lr
 8013724:	0801eec8 	.word	0x0801eec8
	...

08013730 <chSemSignalWait.constprop.0.isra.0>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8013730:	b538      	push	{r3, r4, r5, lr}
 8013732:	2330      	movs	r3, #48	; 0x30
 8013734:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && ch_queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && ch_queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && ch_queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 8013738:	4b21      	ldr	r3, [pc, #132]	; (80137c0 <chSemSignalWait.constprop.0.isra.0+0x90>)
 801373a:	689a      	ldr	r2, [r3, #8]
 801373c:	1c51      	adds	r1, r2, #1
 801373e:	2900      	cmp	r1, #0
 8013740:	6099      	str	r1, [r3, #8]
 8013742:	dd28      	ble.n	8013796 <chSemSignalWait.constprop.0.isra.0+0x66>
    chSchReadyI(threadref(ch_queue_fifo_remove(&sps->queue)))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 8013744:	2a00      	cmp	r2, #0
 8013746:	609a      	str	r2, [r3, #8]
 8013748:	db0c      	blt.n	8013764 <chSemSignalWait.constprop.0.isra.0+0x34>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 801374a:	4b1e      	ldr	r3, [pc, #120]	; (80137c4 <chSemSignalWait.constprop.0.isra.0+0x94>)
 801374c:	681a      	ldr	r2, [r3, #0]
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	6892      	ldr	r2, [r2, #8]
 8013752:	689b      	ldr	r3, [r3, #8]
 8013754:	429a      	cmp	r2, r3
 8013756:	d901      	bls.n	801375c <chSemSignalWait.constprop.0.isra.0+0x2c>
    __sch_reschedule_ahead();
 8013758:	f7ee fbfa 	bl	8001f50 <__sch_reschedule_ahead.lto_priv.0>
 801375c:	2300      	movs	r3, #0
 801375e:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 8013762:	bd38      	pop	{r3, r4, r5, pc}
 8013764:	4a17      	ldr	r2, [pc, #92]	; (80137c4 <chSemSignalWait.constprop.0.isra.0+0x94>)
  p->prev       = qp->prev;
 8013766:	6858      	ldr	r0, [r3, #4]
 8013768:	68d1      	ldr	r1, [r2, #12]
  otp->state = newstate;
 801376a:	2405      	movs	r4, #5
 801376c:	e9c1 3000 	strd	r3, r0, [r1]
  p->prev->next = p;
 8013770:	6001      	str	r1, [r0, #0]
  ch_priority_queue_t *p = pqp->next;
 8013772:	6810      	ldr	r0, [r2, #0]
 8013774:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8013778:	6804      	ldr	r4, [r0, #0]
    currtp->u.wtsemp = spw;
 801377a:	628b      	str	r3, [r1, #40]	; 0x28
  qp->prev      = p;
 801377c:	6059      	str	r1, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 801377e:	2301      	movs	r3, #1
  pqp->next->prev = pqp;
 8013780:	6062      	str	r2, [r4, #4]
  pqp->next       = p->next;
 8013782:	6014      	str	r4, [r2, #0]
 8013784:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8013788:	60d0      	str	r0, [r2, #12]
  chSysSwitch(ntp, otp);
 801378a:	f7ec fd99 	bl	80002c0 <__port_switch>
 801378e:	2300      	movs	r3, #0
 8013790:	f383 8811 	msr	BASEPRI, r3
}
 8013794:	bd38      	pop	{r3, r4, r5, pc}
  ch_queue_t *p = qp->next;
 8013796:	6819      	ldr	r1, [r3, #0]
  qp->next       = p->next;
 8013798:	6808      	ldr	r0, [r1, #0]
 801379a:	6018      	str	r0, [r3, #0]
  qp->next->prev = qp;
 801379c:	6043      	str	r3, [r0, #4]
  tp->state = CH_STATE_READY;
 801379e:	2400      	movs	r4, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80137a0:	6988      	ldr	r0, [r1, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80137a2:	688d      	ldr	r5, [r1, #8]
  tp->state = CH_STATE_READY;
 80137a4:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
    pqp = pqp->next;
 80137a8:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80137aa:	6884      	ldr	r4, [r0, #8]
 80137ac:	42ac      	cmp	r4, r5
 80137ae:	d2fb      	bcs.n	80137a8 <chSemSignalWait.constprop.0.isra.0+0x78>
  p->prev       = pqp->prev;
 80137b0:	6844      	ldr	r4, [r0, #4]
 80137b2:	e9c1 0400 	strd	r0, r4, [r1]
  p->prev->next = p;
 80137b6:	6021      	str	r1, [r4, #0]
    chSchReadyI(threadref(ch_queue_fifo_remove(&sps->queue)))->u.rdymsg = MSG_OK;
 80137b8:	2400      	movs	r4, #0
  pqp->prev     = p;
 80137ba:	6041      	str	r1, [r0, #4]
 80137bc:	628c      	str	r4, [r1, #40]	; 0x28
 80137be:	e7c1      	b.n	8013744 <chSemSignalWait.constprop.0.isra.0+0x14>
 80137c0:	20000dbc 	.word	0x20000dbc
 80137c4:	20000a90 	.word	0x20000a90
	...

080137d0 <randombytes.isra.0>:
randombytes(unsigned char *x, unsigned long long xlen)
 80137d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137d4:	f8df b090 	ldr.w	fp, [pc, #144]	; 8013868 <randombytes.isra.0+0x98>
 80137d8:	b0c1      	sub	sp, #260	; 0x104
    int             i = 0;
 80137da:	f04f 0900 	mov.w	r9, #0
randombytes(unsigned char *x, unsigned long long xlen)
 80137de:	4682      	mov	sl, r0
 80137e0:	4616      	mov	r6, r2
 80137e2:	461f      	mov	r7, r3
 80137e4:	466c      	mov	r4, sp
 80137e6:	f10b 0820 	add.w	r8, fp, #32
                DRBG_ctx.V[j] = 0x00;
 80137ea:	464d      	mov	r5, r9
 80137ec:	4a1f      	ldr	r2, [pc, #124]	; (801386c <randombytes.isra.0+0x9c>)
        for (int j=15; j>=0; j--) {
 80137ee:	230f      	movs	r3, #15
            if ( DRBG_ctx.V[j] == 0xff )
 80137f0:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 80137f4:	29ff      	cmp	r1, #255	; 0xff
 80137f6:	d12a      	bne.n	801384e <randombytes.isra.0+0x7e>
        for (int j=15; j>=0; j--) {
 80137f8:	3b01      	subs	r3, #1
 80137fa:	1c59      	adds	r1, r3, #1
                DRBG_ctx.V[j] = 0x00;
 80137fc:	7015      	strb	r5, [r2, #0]
        for (int j=15; j>=0; j--) {
 80137fe:	d1f7      	bne.n	80137f0 <randombytes.isra.0+0x20>
	aes256_keysched(skey, key);
 8013800:	a804      	add	r0, sp, #16
 8013802:	f7fe fd2d 	bl	8012260 <aes256_keysched.constprop.0>
	memmove(buffer, ctr, 16);
 8013806:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801380a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	aes256_encrypt(skey, buffer);
 801380e:	4621      	mov	r1, r4
 8013810:	a804      	add	r0, sp, #16
 8013812:	f7fe fc25 	bl	8012060 <aes256_encrypt.lto_priv.0>
        if ( xlen > 15 ) {
 8013816:	2e10      	cmp	r6, #16
 8013818:	f177 0300 	sbcs.w	r3, r7, #0
 801381c:	d31c      	bcc.n	8013858 <randombytes.isra.0+0x88>
            memcpy(x+i, block, 16);
 801381e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
            xlen -= 16;
 8013822:	3e10      	subs	r6, #16
            memcpy(x+i, block, 16);
 8013824:	eb0a 0c09 	add.w	ip, sl, r9
            xlen -= 16;
 8013828:	f167 0700 	sbc.w	r7, r7, #0
            memcpy(x+i, block, 16);
 801382c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while ( xlen > 0 ) {
 8013830:	ea56 0307 	orrs.w	r3, r6, r7
            memcpy(x+i, block, 16);
 8013834:	f109 0910 	add.w	r9, r9, #16
    while ( xlen > 0 ) {
 8013838:	d1d8      	bne.n	80137ec <randombytes.isra.0+0x1c>
    AES256_CTR_DRBG_Update(NULL, DRBG_ctx.Key, DRBG_ctx.V);
 801383a:	f7fe fd51 	bl	80122e0 <AES256_CTR_DRBG_Update.constprop.0>
    DRBG_ctx.reseed_counter++;
 801383e:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8013842:	3301      	adds	r3, #1
 8013844:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
}
 8013848:	b041      	add	sp, #260	; 0x104
 801384a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                DRBG_ctx.V[j]++;
 801384e:	445b      	add	r3, fp
 8013850:	3101      	adds	r1, #1
 8013852:	f883 1020 	strb.w	r1, [r3, #32]
                break;
 8013856:	e7d3      	b.n	8013800 <randombytes.isra.0+0x30>
            memcpy(x+i, block, xlen);
 8013858:	4632      	mov	r2, r6
 801385a:	4621      	mov	r1, r4
 801385c:	eb0a 0009 	add.w	r0, sl, r9
 8013860:	f001 fa10 	bl	8014c84 <memcpy>
 8013864:	e7e9      	b.n	801383a <randombytes.isra.0+0x6a>
 8013866:	bf00      	nop
 8013868:	200181d0 	.word	0x200181d0
 801386c:	20018200 	.word	0x20018200

08013870 <test_execute_inner.isra.0>:
static bool test_execute_inner(const testsuite_t *tsp) {
 8013870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013874:	4681      	mov	r9, r0
 8013876:	b089      	sub	sp, #36	; 0x24
  test_printf(TEST_CFG_EOL_STRING);
 8013878:	4896      	ldr	r0, [pc, #600]	; (8013ad4 <test_execute_inner.isra.0+0x264>)
 801387a:	f7f3 ffe9 	bl	8007850 <test_printf>
  if (tsp->name != NULL) {
 801387e:	f8d9 1000 	ldr.w	r1, [r9]
 8013882:	2900      	cmp	r1, #0
 8013884:	f000 8122 	beq.w	8013acc <test_execute_inner.isra.0+0x25c>
    test_printf("*** %s"TEST_CFG_EOL_STRING, tsp->name);
 8013888:	4893      	ldr	r0, [pc, #588]	; (8013ad8 <test_execute_inner.isra.0+0x268>)
 801388a:	f7f3 ffe1 	bl	8007850 <test_printf>
  test_printf("***"TEST_CFG_EOL_STRING);
 801388e:	4893      	ldr	r0, [pc, #588]	; (8013adc <test_execute_inner.isra.0+0x26c>)
  chtest.global_fail = false;
 8013890:	4c93      	ldr	r4, [pc, #588]	; (8013ae0 <test_execute_inner.isra.0+0x270>)
  test_printf("***"TEST_CFG_EOL_STRING);
 8013892:	f7f3 ffdd 	bl	8007850 <test_printf>
  test_printf("*** Compiled:     %s"TEST_CFG_EOL_STRING, __DATE__ " - " __TIME__);
 8013896:	4993      	ldr	r1, [pc, #588]	; (8013ae4 <test_execute_inner.isra.0+0x274>)
 8013898:	4893      	ldr	r0, [pc, #588]	; (8013ae8 <test_execute_inner.isra.0+0x278>)
 801389a:	f7f3 ffd9 	bl	8007850 <test_printf>
  test_printf("*** Platform:     %s"TEST_CFG_EOL_STRING, PLATFORM_NAME);
 801389e:	4993      	ldr	r1, [pc, #588]	; (8013aec <test_execute_inner.isra.0+0x27c>)
 80138a0:	4893      	ldr	r0, [pc, #588]	; (8013af0 <test_execute_inner.isra.0+0x280>)
 80138a2:	f7f3 ffd5 	bl	8007850 <test_printf>
  test_printf("*** Test Board:   %s"TEST_CFG_EOL_STRING, BOARD_NAME);
 80138a6:	4993      	ldr	r1, [pc, #588]	; (8013af4 <test_execute_inner.isra.0+0x284>)
 80138a8:	4893      	ldr	r0, [pc, #588]	; (8013af8 <test_execute_inner.isra.0+0x288>)
 80138aa:	f7f3 ffd1 	bl	8007850 <test_printf>
    test_printf("***"TEST_CFG_EOL_STRING);
 80138ae:	488b      	ldr	r0, [pc, #556]	; (8013adc <test_execute_inner.isra.0+0x26c>)
 80138b0:	f7f3 ffce 	bl	8007850 <test_printf>
    test_printf("*** Text size:    %u bytes"TEST_CFG_EOL_STRING, &__text_end__   - &__text_base__);
 80138b4:	4b91      	ldr	r3, [pc, #580]	; (8013afc <test_execute_inner.isra.0+0x28c>)
 80138b6:	4992      	ldr	r1, [pc, #584]	; (8013b00 <test_execute_inner.isra.0+0x290>)
 80138b8:	4892      	ldr	r0, [pc, #584]	; (8013b04 <test_execute_inner.isra.0+0x294>)
 80138ba:	1ac9      	subs	r1, r1, r3
 80138bc:	f7f3 ffc8 	bl	8007850 <test_printf>
    test_printf("*** RO data size: %u bytes"TEST_CFG_EOL_STRING, &__rodata_end__ - &__rodata_base__);
 80138c0:	4b91      	ldr	r3, [pc, #580]	; (8013b08 <test_execute_inner.isra.0+0x298>)
 80138c2:	4992      	ldr	r1, [pc, #584]	; (8013b0c <test_execute_inner.isra.0+0x29c>)
 80138c4:	4892      	ldr	r0, [pc, #584]	; (8013b10 <test_execute_inner.isra.0+0x2a0>)
 80138c6:	1ac9      	subs	r1, r1, r3
 80138c8:	f7f3 ffc2 	bl	8007850 <test_printf>
    test_printf("*** Data size:    %u bytes"TEST_CFG_EOL_STRING, &__data_end__   - &__data_base__);
 80138cc:	4b91      	ldr	r3, [pc, #580]	; (8013b14 <test_execute_inner.isra.0+0x2a4>)
 80138ce:	4992      	ldr	r1, [pc, #584]	; (8013b18 <test_execute_inner.isra.0+0x2a8>)
 80138d0:	4892      	ldr	r0, [pc, #584]	; (8013b1c <test_execute_inner.isra.0+0x2ac>)
 80138d2:	1ac9      	subs	r1, r1, r3
 80138d4:	f7f3 ffbc 	bl	8007850 <test_printf>
    test_printf("*** BSS size:     %u bytes"TEST_CFG_EOL_STRING, &__bss_end__    - &__bss_base__);
 80138d8:	4b91      	ldr	r3, [pc, #580]	; (8013b20 <test_execute_inner.isra.0+0x2b0>)
 80138da:	4992      	ldr	r1, [pc, #584]	; (8013b24 <test_execute_inner.isra.0+0x2b4>)
 80138dc:	4892      	ldr	r0, [pc, #584]	; (8013b28 <test_execute_inner.isra.0+0x2b8>)
 80138de:	1ac9      	subs	r1, r1, r3
 80138e0:	f7f3 ffb6 	bl	8007850 <test_printf>
  test_printf(TEST_CFG_EOL_STRING);
 80138e4:	487b      	ldr	r0, [pc, #492]	; (8013ad4 <test_execute_inner.isra.0+0x264>)
 80138e6:	f7f3 ffb3 	bl	8007850 <test_printf>
  while (tsp->sequences[tseq] != NULL) {
 80138ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80138ee:	681a      	ldr	r2, [r3, #0]
  chtest.global_fail = false;
 80138f0:	2300      	movs	r3, #0
 80138f2:	7123      	strb	r3, [r4, #4]
  while (tsp->sequences[tseq] != NULL) {
 80138f4:	2a00      	cmp	r2, #0
 80138f6:	f000 80bf 	beq.w	8013a78 <test_execute_inner.isra.0+0x208>
 80138fa:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8013b2c <test_execute_inner.isra.0+0x2bc>
  tseq = 0U;
 80138fe:	9301      	str	r3, [sp, #4]
  while (tsp->sequences[tseq] != NULL) {
 8013900:	469b      	mov	fp, r3
  if (chtest.putchar != NULL) {
 8013902:	6a23      	ldr	r3, [r4, #32]
 8013904:	254c      	movs	r5, #76	; 0x4c
 8013906:	b173      	cbz	r3, 8013926 <test_execute_inner.isra.0+0xb6>
    chtest.putchar(c);
 8013908:	203d      	movs	r0, #61	; 0x3d
 801390a:	4798      	blx	r3
  if (chtest.putchar != NULL) {
 801390c:	6a23      	ldr	r3, [r4, #32]
  for (i = 0; i < 76; i++) {
 801390e:	3d01      	subs	r5, #1
 8013910:	d1f9      	bne.n	8013906 <test_execute_inner.isra.0+0x96>
  while ((c = *s) != '\0') {
 8013912:	260d      	movs	r6, #13
 8013914:	4d6f      	ldr	r5, [pc, #444]	; (8013ad4 <test_execute_inner.isra.0+0x264>)
 8013916:	4630      	mov	r0, r6
 8013918:	b103      	cbz	r3, 801391c <test_execute_inner.isra.0+0xac>
    chtest.putchar(c);
 801391a:	4798      	blx	r3
 801391c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8013920:	b138      	cbz	r0, 8013932 <test_execute_inner.isra.0+0xc2>
  if (chtest.putchar != NULL) {
 8013922:	6a23      	ldr	r3, [r4, #32]
 8013924:	e7f8      	b.n	8013918 <test_execute_inner.isra.0+0xa8>
  for (i = 0; i < 76; i++) {
 8013926:	3d01      	subs	r5, #1
 8013928:	d1f1      	bne.n	801390e <test_execute_inner.isra.0+0x9e>
  while ((c = *s) != '\0') {
 801392a:	260d      	movs	r6, #13
 801392c:	4d69      	ldr	r5, [pc, #420]	; (8013ad4 <test_execute_inner.isra.0+0x264>)
 801392e:	4630      	mov	r0, r6
 8013930:	e7f2      	b.n	8013918 <test_execute_inner.isra.0+0xa8>
    test_printf("=== Test Sequence %u (%s)"TEST_CFG_EOL_STRING, tseq + 1U, tsp->sequences[tseq]->name);
 8013932:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013936:	9901      	ldr	r1, [sp, #4]
 8013938:	f853 300b 	ldr.w	r3, [r3, fp]
 801393c:	3101      	adds	r1, #1
 801393e:	681a      	ldr	r2, [r3, #0]
 8013940:	9101      	str	r1, [sp, #4]
 8013942:	4606      	mov	r6, r0
 8013944:	487a      	ldr	r0, [pc, #488]	; (8013b30 <test_execute_inner.isra.0+0x2c0>)
 8013946:	f7f3 ff83 	bl	8007850 <test_printf>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 801394a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801394e:	f852 300b 	ldr.w	r3, [r2, fp]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	2b00      	cmp	r3, #0
 8013958:	f000 8087 	beq.w	8013a6a <test_execute_inner.isra.0+0x1fa>
 801395c:	6a23      	ldr	r3, [r4, #32]
 801395e:	00b7      	lsls	r7, r6, #2
 8013960:	254c      	movs	r5, #76	; 0x4c
 8013962:	b17b      	cbz	r3, 8013984 <test_execute_inner.isra.0+0x114>
    chtest.putchar(c);
 8013964:	202d      	movs	r0, #45	; 0x2d
 8013966:	4798      	blx	r3
  if (chtest.putchar != NULL) {
 8013968:	6a23      	ldr	r3, [r4, #32]
  for (i = 0; i < 76; i++) {
 801396a:	3d01      	subs	r5, #1
 801396c:	d1f9      	bne.n	8013962 <test_execute_inner.isra.0+0xf2>
  while ((c = *s) != '\0') {
 801396e:	250d      	movs	r5, #13
 8013970:	f8df a160 	ldr.w	sl, [pc, #352]	; 8013ad4 <test_execute_inner.isra.0+0x264>
 8013974:	4628      	mov	r0, r5
 8013976:	b103      	cbz	r3, 801397a <test_execute_inner.isra.0+0x10a>
    chtest.putchar(c);
 8013978:	4798      	blx	r3
 801397a:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 801397e:	b140      	cbz	r0, 8013992 <test_execute_inner.isra.0+0x122>
  if (chtest.putchar != NULL) {
 8013980:	6a23      	ldr	r3, [r4, #32]
 8013982:	e7f8      	b.n	8013976 <test_execute_inner.isra.0+0x106>
  for (i = 0; i < 76; i++) {
 8013984:	3d01      	subs	r5, #1
 8013986:	d1f0      	bne.n	801396a <test_execute_inner.isra.0+0xfa>
  while ((c = *s) != '\0') {
 8013988:	250d      	movs	r5, #13
 801398a:	f8df a148 	ldr.w	sl, [pc, #328]	; 8013ad4 <test_execute_inner.isra.0+0x264>
 801398e:	4628      	mov	r0, r5
 8013990:	e7f1      	b.n	8013976 <test_execute_inner.isra.0+0x106>
      test_printf("--- Test Case %u.%u (%s)"TEST_CFG_EOL_STRING, tseq + 1U, tcase + 1U, tsp->sequences[tseq]->cases[tcase]->name);
 8013992:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013996:	9901      	ldr	r1, [sp, #4]
 8013998:	f853 300b 	ldr.w	r3, [r3, fp]
 801399c:	685b      	ldr	r3, [r3, #4]
 801399e:	59db      	ldr	r3, [r3, r7]
 80139a0:	3601      	adds	r6, #1
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	4605      	mov	r5, r0
 80139a6:	4632      	mov	r2, r6
 80139a8:	4862      	ldr	r0, [pc, #392]	; (8013b34 <test_execute_inner.isra.0+0x2c4>)
 80139aa:	f7f3 ff51 	bl	8007850 <test_printf>
 80139ae:	2330      	movs	r3, #48	; 0x30
 80139b0:	f383 8811 	msr	BASEPRI, r3
  vtp->func    = vtfunc;
 80139b4:	4b60      	ldr	r3, [pc, #384]	; (8013b38 <test_execute_inner.isra.0+0x2c8>)
  vtp->reload  = (sysinterval_t)0;
 80139b6:	9507      	str	r5, [sp, #28]
  vt_enqueue(vtlp, vtp, delay);
 80139b8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
  thread_t *tp = __instance_get_currthread(currcore);
 80139bc:	f8d8 500c 	ldr.w	r5, [r8, #12]
  vtp->func    = vtfunc;
 80139c0:	9305      	str	r3, [sp, #20]
  vt_enqueue(vtlp, vtp, delay);
 80139c2:	a802      	add	r0, sp, #8
  vtp->par     = par;
 80139c4:	9506      	str	r5, [sp, #24]
  vt_enqueue(vtlp, vtp, delay);
 80139c6:	f7ff fd4b 	bl	8013460 <vt_enqueue.constprop.0>
  ch_priority_queue_t *p = pqp->next;
 80139ca:	f8d8 0000 	ldr.w	r0, [r8]
  otp->state = newstate;
 80139ce:	2308      	movs	r3, #8
 80139d0:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  pqp->next       = p->next;
 80139d4:	6803      	ldr	r3, [r0, #0]
 80139d6:	f8c8 3000 	str.w	r3, [r8]
  pqp->next->prev = pqp;
 80139da:	f8c3 8004 	str.w	r8, [r3, #4]
  ntp->state = CH_STATE_CURRENT;
 80139de:	2301      	movs	r3, #1
 80139e0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  chSysSwitch(ntp, otp);
 80139e4:	4629      	mov	r1, r5
  __instance_set_currthread(oip, ntp);
 80139e6:	f8c8 000c 	str.w	r0, [r8, #12]
  chSysSwitch(ntp, otp);
 80139ea:	f7ec fc69 	bl	80002c0 <__port_switch>
    if (chVTIsArmedI(&vt)) {
 80139ee:	9b02      	ldr	r3, [sp, #8]
 80139f0:	b113      	cbz	r3, 80139f8 <test_execute_inner.isra.0+0x188>
      chVTDoResetI(&vt);
 80139f2:	a802      	add	r0, sp, #8
 80139f4:	f7ee f9e4 	bl	8001dc0 <chVTDoResetI>
 80139f8:	2300      	movs	r3, #0
 80139fa:	f383 8811 	msr	BASEPRI, r3
      test_execute_case(tsp->sequences[tseq]->cases[tcase]);
 80139fe:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8013a02:	f852 200b 	ldr.w	r2, [r2, fp]
 8013a06:	6852      	ldr	r2, [r2, #4]
 8013a08:	59d5      	ldr	r5, [r2, r7]
  chtest.local_fail = false;
 8013a0a:	7163      	strb	r3, [r4, #5]
  chtest.tokp = chtest.tokens_buffer;
 8013a0c:	4b4b      	ldr	r3, [pc, #300]	; (8013b3c <test_execute_inner.isra.0+0x2cc>)
 8013a0e:	60e3      	str	r3, [r4, #12]
  if (tcp->setup != NULL) {
 8013a10:	686b      	ldr	r3, [r5, #4]
 8013a12:	b103      	cbz	r3, 8013a16 <test_execute_inner.isra.0+0x1a6>
    tcp->setup();
 8013a14:	4798      	blx	r3
  tcp->execute();
 8013a16:	68eb      	ldr	r3, [r5, #12]
 8013a18:	4798      	blx	r3
  if (tcp->teardown != NULL) {
 8013a1a:	68ab      	ldr	r3, [r5, #8]
 8013a1c:	b103      	cbz	r3, 8013a20 <test_execute_inner.isra.0+0x1b0>
    tcp->teardown();
 8013a1e:	4798      	blx	r3
      if (chtest.local_fail) {
 8013a20:	7963      	ldrb	r3, [r4, #5]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d039      	beq.n	8013a9a <test_execute_inner.isra.0+0x22a>
        test_printf("--- Result: FAILURE (#%u [", chtest.current_step, "", chtest.failure_message);
 8013a26:	68a3      	ldr	r3, [r4, #8]
 8013a28:	4a45      	ldr	r2, [pc, #276]	; (8013b40 <test_execute_inner.isra.0+0x2d0>)
 8013a2a:	6821      	ldr	r1, [r4, #0]
 8013a2c:	4845      	ldr	r0, [pc, #276]	; (8013b44 <test_execute_inner.isra.0+0x2d4>)
 8013a2e:	f7f3 ff0f 	bl	8007850 <test_printf>
  while (cp < chtest.tokp) {
 8013a32:	68e3      	ldr	r3, [r4, #12]
 8013a34:	4a41      	ldr	r2, [pc, #260]	; (8013b3c <test_execute_inner.isra.0+0x2cc>)
 8013a36:	4293      	cmp	r3, r2
 8013a38:	d909      	bls.n	8013a4e <test_execute_inner.isra.0+0x1de>
  char *cp = chtest.tokens_buffer;
 8013a3a:	4d40      	ldr	r5, [pc, #256]	; (8013b3c <test_execute_inner.isra.0+0x2cc>)
 8013a3c:	6a23      	ldr	r3, [r4, #32]
    test_putchar(*cp++);
 8013a3e:	3501      	adds	r5, #1
 8013a40:	b113      	cbz	r3, 8013a48 <test_execute_inner.isra.0+0x1d8>
    chtest.putchar(c);
 8013a42:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8013a46:	4798      	blx	r3
  while (cp < chtest.tokp) {
 8013a48:	68e3      	ldr	r3, [r4, #12]
 8013a4a:	429d      	cmp	r5, r3
 8013a4c:	d3f6      	bcc.n	8013a3c <test_execute_inner.isra.0+0x1cc>
        test_printf("] \"%s\")"TEST_CFG_EOL_STRING, chtest.failure_message);
 8013a4e:	68a1      	ldr	r1, [r4, #8]
 8013a50:	483d      	ldr	r0, [pc, #244]	; (8013b48 <test_execute_inner.isra.0+0x2d8>)
 8013a52:	f7f3 fefd 	bl	8007850 <test_printf>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8013a56:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8013a5a:	f852 300b 	ldr.w	r3, [r2, fp]
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	443b      	add	r3, r7
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	f47f af79 	bne.w	801395c <test_execute_inner.isra.0+0xec>
  while (tsp->sequences[tseq] != NULL) {
 8013a6a:	f10b 0b04 	add.w	fp, fp, #4
 8013a6e:	f852 300b 	ldr.w	r3, [r2, fp]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	f47f af45 	bne.w	8013902 <test_execute_inner.isra.0+0x92>
  if (chtest.putchar != NULL) {
 8013a78:	6a23      	ldr	r3, [r4, #32]
 8013a7a:	254c      	movs	r5, #76	; 0x4c
 8013a7c:	b18b      	cbz	r3, 8013aa2 <test_execute_inner.isra.0+0x232>
    chtest.putchar(c);
 8013a7e:	202d      	movs	r0, #45	; 0x2d
 8013a80:	4798      	blx	r3
  if (chtest.putchar != NULL) {
 8013a82:	6a23      	ldr	r3, [r4, #32]
  for (i = 0; i < 76; i++) {
 8013a84:	3d01      	subs	r5, #1
 8013a86:	d1f9      	bne.n	8013a7c <test_execute_inner.isra.0+0x20c>
 8013a88:	4d12      	ldr	r5, [pc, #72]	; (8013ad4 <test_execute_inner.isra.0+0x264>)
  while ((c = *s) != '\0') {
 8013a8a:	200d      	movs	r0, #13
 8013a8c:	b103      	cbz	r3, 8013a90 <test_execute_inner.isra.0+0x220>
    chtest.putchar(c);
 8013a8e:	4798      	blx	r3
 8013a90:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8013a94:	b150      	cbz	r0, 8013aac <test_execute_inner.isra.0+0x23c>
  if (chtest.putchar != NULL) {
 8013a96:	6a23      	ldr	r3, [r4, #32]
 8013a98:	e7f8      	b.n	8013a8c <test_execute_inner.isra.0+0x21c>
        test_printf("--- Result: SUCCESS"TEST_CFG_EOL_STRING);
 8013a9a:	482c      	ldr	r0, [pc, #176]	; (8013b4c <test_execute_inner.isra.0+0x2dc>)
 8013a9c:	f7f3 fed8 	bl	8007850 <test_printf>
 8013aa0:	e7d9      	b.n	8013a56 <test_execute_inner.isra.0+0x1e6>
  for (i = 0; i < 76; i++) {
 8013aa2:	3d01      	subs	r5, #1
 8013aa4:	d1ee      	bne.n	8013a84 <test_execute_inner.isra.0+0x214>
 8013aa6:	4d0b      	ldr	r5, [pc, #44]	; (8013ad4 <test_execute_inner.isra.0+0x264>)
  while ((c = *s) != '\0') {
 8013aa8:	200d      	movs	r0, #13
 8013aaa:	e7ef      	b.n	8013a8c <test_execute_inner.isra.0+0x21c>
  test_printf(TEST_CFG_EOL_STRING);
 8013aac:	4809      	ldr	r0, [pc, #36]	; (8013ad4 <test_execute_inner.isra.0+0x264>)
 8013aae:	f7f3 fecf 	bl	8007850 <test_printf>
  test_printf("Final result: %s"TEST_CFG_EOL_STRING,
 8013ab2:	7921      	ldrb	r1, [r4, #4]
 8013ab4:	4a26      	ldr	r2, [pc, #152]	; (8013b50 <test_execute_inner.isra.0+0x2e0>)
 8013ab6:	4b27      	ldr	r3, [pc, #156]	; (8013b54 <test_execute_inner.isra.0+0x2e4>)
 8013ab8:	4827      	ldr	r0, [pc, #156]	; (8013b58 <test_execute_inner.isra.0+0x2e8>)
 8013aba:	2900      	cmp	r1, #0
 8013abc:	bf14      	ite	ne
 8013abe:	4611      	movne	r1, r2
 8013ac0:	4619      	moveq	r1, r3
}
 8013ac2:	b009      	add	sp, #36	; 0x24
 8013ac4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_printf("Final result: %s"TEST_CFG_EOL_STRING,
 8013ac8:	f7f3 bec2 	b.w	8007850 <test_printf>
    test_printf("*** Test Suite"TEST_CFG_EOL_STRING);
 8013acc:	4823      	ldr	r0, [pc, #140]	; (8013b5c <test_execute_inner.isra.0+0x2ec>)
 8013ace:	f7f3 febf 	bl	8007850 <test_printf>
 8013ad2:	e6dc      	b.n	801388e <test_execute_inner.isra.0+0x1e>
 8013ad4:	0801de48 	.word	0x0801de48
 8013ad8:	0801dcb8 	.word	0x0801dcb8
 8013adc:	0801dcd8 	.word	0x0801dcd8
 8013ae0:	20000b74 	.word	0x20000b74
 8013ae4:	0801dce0 	.word	0x0801dce0
 8013ae8:	0801dcf8 	.word	0x0801dcf8
 8013aec:	0801dd10 	.word	0x0801dd10
 8013af0:	0801dd3c 	.word	0x0801dd3c
 8013af4:	0801dd54 	.word	0x0801dd54
 8013af8:	0801dd7c 	.word	0x0801dd7c
 8013afc:	080001e0 	.word	0x080001e0
 8013b00:	08014efc 	.word	0x08014efc
 8013b04:	0801dd94 	.word	0x0801dd94
 8013b08:	08014f00 	.word	0x08014f00
 8013b0c:	0801efd0 	.word	0x0801efd0
 8013b10:	0801ddb4 	.word	0x0801ddb4
 8013b14:	20000800 	.word	0x20000800
 8013b18:	20000938 	.word	0x20000938
 8013b1c:	0801ddd4 	.word	0x0801ddd4
 8013b20:	20000938 	.word	0x20000938
 8013b24:	20018350 	.word	0x20018350
 8013b28:	0801ddf4 	.word	0x0801ddf4
 8013b2c:	20000a90 	.word	0x20000a90
 8013b30:	0801de14 	.word	0x0801de14
 8013b34:	0801de30 	.word	0x0801de30
 8013b38:	08001051 	.word	0x08001051
 8013b3c:	20000b84 	.word	0x20000b84
 8013b40:	0801dcd4 	.word	0x0801dcd4
 8013b44:	0801de4c 	.word	0x0801de4c
 8013b48:	0801de68 	.word	0x0801de68
 8013b4c:	0801de74 	.word	0x0801de74
 8013b50:	0801dca8 	.word	0x0801dca8
 8013b54:	0801dcb0 	.word	0x0801dcb0
 8013b58:	0801de8c 	.word	0x0801de8c
 8013b5c:	0801dcc4 	.word	0x0801dcc4

08013b60 <falcon_inner_poly_muladj_fft.constprop.0>:
Zf(poly_muladj_fft)(
 8013b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b64:	f500 6bff 	add.w	fp, r0, #2040	; 0x7f8
 8013b68:	b087      	sub	sp, #28
 8013b6a:	46d9      	mov	r9, fp
 8013b6c:	f1a0 0508 	sub.w	r5, r0, #8
 8013b70:	f1a1 0408 	sub.w	r4, r1, #8
		b_re = b[u];
 8013b74:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
		a_im = a[u + hn];
 8013b78:	e9f9 6702 	ldrd	r6, r7, [r9, #8]!
		a_re = a[u];
 8013b7c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
	x ^= (uint64_t)1 << 63;
 8013b80:	f8d4 a800 	ldr.w	sl, [r4, #2048]	; 0x800
		a_im = a[u + hn];
 8013b84:	e9cd 6700 	strd	r6, r7, [sp]
		FPC_MUL(a[u], a[u + hn], a_re, a_im, b_re, b_im);
 8013b88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b8c:	f8d4 6804 	ldr.w	r6, [r4, #2052]	; 0x804
 8013b90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b94:	f7f8 fa64 	bl	800c060 <falcon_inner_fpr_mul>
 8013b98:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8013b9c:	4680      	mov	r8, r0
 8013b9e:	460f      	mov	r7, r1
 8013ba0:	4633      	mov	r3, r6
 8013ba2:	4652      	mov	r2, sl
 8013ba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ba8:	f7f8 fa5a 	bl	800c060 <falcon_inner_fpr_mul>
 8013bac:	4602      	mov	r2, r0
	return fpr_add(x, y);
 8013bae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013bb2:	4640      	mov	r0, r8
 8013bb4:	4639      	mov	r1, r7
 8013bb6:	f7f8 f99b 	bl	800bef0 <falcon_inner_fpr_add>
 8013bba:	4652      	mov	r2, sl
 8013bbc:	468c      	mov	ip, r1
 8013bbe:	4633      	mov	r3, r6
 8013bc0:	4607      	mov	r7, r0
 8013bc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013bc6:	4666      	mov	r6, ip
 8013bc8:	f7f8 fa4a 	bl	800c060 <falcon_inner_fpr_mul>
 8013bcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013bd0:	4682      	mov	sl, r0
 8013bd2:	4688      	mov	r8, r1
 8013bd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013bd8:	f7f8 fa42 	bl	800c060 <falcon_inner_fpr_mul>
 8013bdc:	4602      	mov	r2, r0
 8013bde:	460b      	mov	r3, r1
 8013be0:	4650      	mov	r0, sl
 8013be2:	4641      	mov	r1, r8
 8013be4:	f7f8 f984 	bl	800bef0 <falcon_inner_fpr_add>
	for (u = 0; u < hn; u ++) {
 8013be8:	455d      	cmp	r5, fp
		FPC_MUL(a[u], a[u + hn], a_re, a_im, b_re, b_im);
 8013bea:	e9c5 7600 	strd	r7, r6, [r5]
 8013bee:	e9c9 0100 	strd	r0, r1, [r9]
	for (u = 0; u < hn; u ++) {
 8013bf2:	d1bf      	bne.n	8013b74 <falcon_inner_poly_muladj_fft.constprop.0+0x14>
}
 8013bf4:	b007      	add	sp, #28
 8013bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bfa:	bf00      	nop
 8013bfc:	0000      	movs	r0, r0
	...

08013c00 <falcon_inner_poly_mulselfadj_fft.constprop.0>:
Zf(poly_mulselfadj_fft)(fpr *a, unsigned logn)
 8013c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c04:	f500 67ff 	add.w	r7, r0, #2040	; 0x7f8
 8013c08:	f1a0 0408 	sub.w	r4, r0, #8
 8013c0c:	46ba      	mov	sl, r7
		a_re = a[u];
 8013c0e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
	return fpr_mul(x, x);
 8013c12:	4610      	mov	r0, r2
 8013c14:	4619      	mov	r1, r3
		a_im = a[u + hn];
 8013c16:	e9f7 8902 	ldrd	r8, r9, [r7, #8]!
 8013c1a:	f7f8 fa21 	bl	800c060 <falcon_inner_fpr_mul>
 8013c1e:	4642      	mov	r2, r8
 8013c20:	4606      	mov	r6, r0
 8013c22:	460d      	mov	r5, r1
 8013c24:	464b      	mov	r3, r9
 8013c26:	4640      	mov	r0, r8
 8013c28:	4649      	mov	r1, r9
 8013c2a:	f7f8 fa19 	bl	800c060 <falcon_inner_fpr_mul>
 8013c2e:	4602      	mov	r2, r0
 8013c30:	460b      	mov	r3, r1
		a[u] = fpr_add(fpr_sqr(a_re), fpr_sqr(a_im));
 8013c32:	4630      	mov	r0, r6
 8013c34:	4629      	mov	r1, r5
 8013c36:	f7f8 f95b 	bl	800bef0 <falcon_inner_fpr_add>
		a[u + hn] = fpr_zero;
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	2300      	movs	r3, #0
	for (u = 0; u < hn; u ++) {
 8013c3e:	4554      	cmp	r4, sl
		a[u] = fpr_add(fpr_sqr(a_re), fpr_sqr(a_im));
 8013c40:	e9c4 0100 	strd	r0, r1, [r4]
		a[u + hn] = fpr_zero;
 8013c44:	e9c7 2300 	strd	r2, r3, [r7]
	for (u = 0; u < hn; u ++) {
 8013c48:	d1e1      	bne.n	8013c0e <falcon_inner_poly_mulselfadj_fft.constprop.0+0xe>
}
 8013c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c4e:	bf00      	nop

08013c50 <ffSampling_fft_dyntree.constprop.0>:
ffSampling_fft_dyntree(samplerZ samp, void *samp_ctx,
 8013c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c54:	b0a1      	sub	sp, #132	; 0x84
 8013c56:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
 8013c5a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8013c5c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8013c5e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8013c60:	9216      	str	r2, [sp, #88]	; 0x58
 8013c62:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8013c64:	911d      	str	r1, [sp, #116]	; 0x74
 8013c66:	e9cd 401a 	strd	r4, r0, [sp, #104]	; 0x68
 8013c6a:	9319      	str	r3, [sp, #100]	; 0x64
 8013c6c:	921c      	str	r2, [sp, #112]	; 0x70
	if (logn == 0) {
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	f000 81a6 	beq.w	8013fc0 <ffSampling_fft_dyntree.constprop.0+0x370>
	n = (size_t)1 << logn;
 8013c74:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013c76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013c78:	2301      	movs	r3, #1
 8013c7a:	fa03 f202 	lsl.w	r2, r3, r2
 8013c7e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013c82:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8013c86:	921e      	str	r2, [sp, #120]	; 0x78
	hn = n >> 1;
 8013c88:	0852      	lsrs	r2, r2, #1
 8013c8a:	9215      	str	r2, [sp, #84]	; 0x54
 8013c8c:	f1a1 0208 	sub.w	r2, r1, #8
 8013c90:	920d      	str	r2, [sp, #52]	; 0x34
 8013c92:	00da      	lsls	r2, r3, #3
 8013c94:	921f      	str	r2, [sp, #124]	; 0x7c
 8013c96:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8013c9a:	920c      	str	r2, [sp, #48]	; 0x30
 8013c9c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013c9e:	f1a2 0108 	sub.w	r1, r2, #8
 8013ca2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013ca6:	9207      	str	r2, [sp, #28]
 8013ca8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013caa:	9109      	str	r1, [sp, #36]	; 0x24
 8013cac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013cb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8013cb2:	f1a2 0308 	sub.w	r3, r2, #8
 8013cb6:	930a      	str	r3, [sp, #40]	; 0x28
	for (u = 0; u < hn; u ++) {
 8013cb8:	2300      	movs	r3, #0
 8013cba:	9308      	str	r3, [sp, #32]
		g01_im = g01[u + hn];
 8013cbc:	9a07      	ldr	r2, [sp, #28]
		g00_im = g00[u + hn];
 8013cbe:	990c      	ldr	r1, [sp, #48]	; 0x30
		g01_im = g01[u + hn];
 8013cc0:	f852 6f08 	ldr.w	r6, [r2, #8]!
		g00_im = g00[u + hn];
 8013cc4:	f851 5f08 	ldr.w	r5, [r1, #8]!
		g01_im = g01[u + hn];
 8013cc8:	f8d2 b004 	ldr.w	fp, [r2, #4]
		g00_im = g00[u + hn];
 8013ccc:	684c      	ldr	r4, [r1, #4]
	for (u = 0; u < hn; u ++) {
 8013cce:	9b08      	ldr	r3, [sp, #32]
		g00_im = g00[u + hn];
 8013cd0:	910c      	str	r1, [sp, #48]	; 0x30
	x ^= (uint64_t)1 << 63;
 8013cd2:	f10b 4100 	add.w	r1, fp, #2147483648	; 0x80000000
 8013cd6:	9114      	str	r1, [sp, #80]	; 0x50
		g01_re = g01[u];
 8013cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
		g01_im = g01[u + hn];
 8013cda:	9207      	str	r2, [sp, #28]
	for (u = 0; u < hn; u ++) {
 8013cdc:	3301      	adds	r3, #1
 8013cde:	9308      	str	r3, [sp, #32]
		g01_re = g01[u];
 8013ce0:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
		g00_re = g00[u];
 8013ce4:	980d      	ldr	r0, [sp, #52]	; 0x34
		g11_re = g11[u];
 8013ce6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		g01_re = g01[u];
 8013ce8:	9109      	str	r1, [sp, #36]	; 0x24
		g00_re = g00[u];
 8013cea:	e9f0 8902 	ldrd	r8, r9, [r0, #8]!
		g01_re = g01[u];
 8013cee:	e9cd 2304 	strd	r2, r3, [sp, #16]
		g11_re = g11[u];
 8013cf2:	e9f7 1202 	ldrd	r1, r2, [r7, #8]!
		g11_im = g11[u + hn];
 8013cf6:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		g00_re = g00[u];
 8013cfa:	900d      	str	r0, [sp, #52]	; 0x34
		g11_re = g11[u];
 8013cfc:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
	return fpr_mul(x, x);
 8013d00:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8013d04:	4642      	mov	r2, r8
 8013d06:	970a      	str	r7, [sp, #40]	; 0x28
 8013d08:	4640      	mov	r0, r8
		g11_im = g11[u + hn];
 8013d0a:	e9fe 7802 	ldrd	r7, r8, [lr, #8]!
 8013d0e:	464b      	mov	r3, r9
 8013d10:	4649      	mov	r1, r9
 8013d12:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8013d16:	e9cd 7812 	strd	r7, r8, [sp, #72]	; 0x48
 8013d1a:	f7f8 f9a1 	bl	800c060 <falcon_inner_fpr_mul>
 8013d1e:	462a      	mov	r2, r5
 8013d20:	4682      	mov	sl, r0
 8013d22:	460f      	mov	r7, r1
 8013d24:	4623      	mov	r3, r4
 8013d26:	4628      	mov	r0, r5
 8013d28:	4621      	mov	r1, r4
 8013d2a:	f7f8 f999 	bl	800c060 <falcon_inner_fpr_mul>
 8013d2e:	4602      	mov	r2, r0
 8013d30:	460b      	mov	r3, r1
		FPC_DIV(mu_re, mu_im, g01_re, g01_im, g00_re, g00_im);
 8013d32:	4650      	mov	r0, sl
 8013d34:	4639      	mov	r1, r7
 8013d36:	f7f8 f8db 	bl	800bef0 <falcon_inner_fpr_add>
 8013d3a:	4602      	mov	r2, r0
 8013d3c:	460b      	mov	r3, r1
	return fpr_div(4607182418800017408u, x);
 8013d3e:	2000      	movs	r0, #0
 8013d40:	49b9      	ldr	r1, [pc, #740]	; (8014028 <ffSampling_fft_dyntree.constprop.0+0x3d8>)
 8013d42:	f7f9 f91d 	bl	800cf80 <falcon_inner_fpr_div>
 8013d46:	4607      	mov	r7, r0
 8013d48:	468a      	mov	sl, r1
 8013d4a:	463a      	mov	r2, r7
 8013d4c:	4653      	mov	r3, sl
 8013d4e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013d52:	f7f8 f985 	bl	800c060 <falcon_inner_fpr_mul>
 8013d56:	463a      	mov	r2, r7
 8013d58:	468c      	mov	ip, r1
 8013d5a:	4680      	mov	r8, r0
 8013d5c:	4653      	mov	r3, sl
 8013d5e:	4628      	mov	r0, r5
 8013d60:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8013d64:	4667      	mov	r7, ip
 8013d66:	f7f8 f97b 	bl	800c060 <falcon_inner_fpr_mul>
 8013d6a:	4642      	mov	r2, r8
 8013d6c:	4682      	mov	sl, r0
 8013d6e:	4689      	mov	r9, r1
 8013d70:	463b      	mov	r3, r7
 8013d72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d76:	f7f8 f973 	bl	800c060 <falcon_inner_fpr_mul>
 8013d7a:	464b      	mov	r3, r9
 8013d7c:	4605      	mov	r5, r0
 8013d7e:	460c      	mov	r4, r1
 8013d80:	4652      	mov	r2, sl
 8013d82:	4630      	mov	r0, r6
 8013d84:	4659      	mov	r1, fp
 8013d86:	f7f8 f96b 	bl	800c060 <falcon_inner_fpr_mul>
 8013d8a:	4602      	mov	r2, r0
	return fpr_add(x, y);
 8013d8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d90:	4628      	mov	r0, r5
 8013d92:	4621      	mov	r1, r4
 8013d94:	f7f8 f8ac 	bl	800bef0 <falcon_inner_fpr_add>
 8013d98:	4652      	mov	r2, sl
 8013d9a:	460c      	mov	r4, r1
 8013d9c:	4605      	mov	r5, r0
 8013d9e:	464b      	mov	r3, r9
 8013da0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013da4:	f7f8 f95c 	bl	800c060 <falcon_inner_fpr_mul>
 8013da8:	4642      	mov	r2, r8
 8013daa:	4682      	mov	sl, r0
 8013dac:	4689      	mov	r9, r1
 8013dae:	463b      	mov	r3, r7
 8013db0:	4659      	mov	r1, fp
 8013db2:	4630      	mov	r0, r6
 8013db4:	f7f8 f954 	bl	800c060 <falcon_inner_fpr_mul>
 8013db8:	4602      	mov	r2, r0
 8013dba:	460b      	mov	r3, r1
 8013dbc:	4650      	mov	r0, sl
 8013dbe:	4649      	mov	r1, r9
 8013dc0:	f7f8 f896 	bl	800bef0 <falcon_inner_fpr_add>
		FPC_MUL(g01_re, g01_im, mu_re, mu_im, g01_re, fpr_neg(g01_im));
 8013dc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		FPC_DIV(mu_re, mu_im, g01_re, g01_im, g00_re, g00_im);
 8013dc8:	4680      	mov	r8, r0
 8013dca:	460f      	mov	r7, r1
		FPC_MUL(g01_re, g01_im, mu_re, mu_im, g01_re, fpr_neg(g01_im));
 8013dcc:	4628      	mov	r0, r5
 8013dce:	4621      	mov	r1, r4
 8013dd0:	f7f8 f946 	bl	800c060 <falcon_inner_fpr_mul>
 8013dd4:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8013dd8:	4682      	mov	sl, r0
 8013dda:	4689      	mov	r9, r1
 8013ddc:	465b      	mov	r3, fp
 8013dde:	4632      	mov	r2, r6
 8013de0:	4639      	mov	r1, r7
 8013de2:	4640      	mov	r0, r8
 8013de4:	f7f8 f93c 	bl	800c060 <falcon_inner_fpr_mul>
 8013de8:	4602      	mov	r2, r0
 8013dea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013dee:	4650      	mov	r0, sl
 8013df0:	4649      	mov	r1, r9
 8013df2:	f7f8 f87d 	bl	800bef0 <falcon_inner_fpr_add>
 8013df6:	4632      	mov	r2, r6
 8013df8:	465b      	mov	r3, fp
 8013dfa:	4681      	mov	r9, r0
 8013dfc:	460e      	mov	r6, r1
 8013dfe:	4628      	mov	r0, r5
 8013e00:	4621      	mov	r1, r4
 8013e02:	f7f8 f92d 	bl	800c060 <falcon_inner_fpr_mul>
 8013e06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e0a:	4683      	mov	fp, r0
 8013e0c:	468a      	mov	sl, r1
 8013e0e:	4640      	mov	r0, r8
 8013e10:	4639      	mov	r1, r7
 8013e12:	f7f8 f925 	bl	800c060 <falcon_inner_fpr_mul>
 8013e16:	4602      	mov	r2, r0
 8013e18:	460b      	mov	r3, r1
 8013e1a:	4658      	mov	r0, fp
 8013e1c:	4651      	mov	r1, sl
 8013e1e:	f7f8 f867 	bl	800bef0 <falcon_inner_fpr_add>
 8013e22:	464a      	mov	r2, r9
 8013e24:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013e28:	4683      	mov	fp, r0
 8013e2a:	468a      	mov	sl, r1
 8013e2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013e30:	f7f8 f85e 	bl	800bef0 <falcon_inner_fpr_add>
 8013e34:	465a      	mov	r2, fp
 8013e36:	4681      	mov	r9, r0
 8013e38:	460e      	mov	r6, r1
 8013e3a:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8013e3e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8013e42:	f7f8 f855 	bl	800bef0 <falcon_inner_fpr_add>
		g01[u + hn] = fpr_neg(mu_im);
 8013e46:	9a07      	ldr	r2, [sp, #28]
		g01[u] = mu_re;
 8013e48:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
	for (u = 0; u < hn; u ++) {
 8013e4c:	9b08      	ldr	r3, [sp, #32]
		FPC_SUB(g11[u], g11[u + hn], g11_re, g11_im, g01_re, g01_im);
 8013e4e:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
	x ^= (uint64_t)1 << 63;
 8013e52:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
		g01[u] = mu_re;
 8013e56:	e9cc 5400 	strd	r5, r4, [ip]
		g01[u + hn] = fpr_neg(mu_im);
 8013e5a:	f8c2 8000 	str.w	r8, [r2]
 8013e5e:	6057      	str	r7, [r2, #4]
	for (u = 0; u < hn; u ++) {
 8013e60:	9a15      	ldr	r2, [sp, #84]	; 0x54
		FPC_SUB(g11[u], g11[u + hn], g11_re, g11_im, g01_re, g01_im);
 8013e62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	for (u = 0; u < hn; u ++) {
 8013e64:	429a      	cmp	r2, r3
		FPC_SUB(g11[u], g11[u + hn], g11_re, g11_im, g01_re, g01_im);
 8013e66:	e9c4 9600 	strd	r9, r6, [r4]
 8013e6a:	e9ce 0100 	strd	r0, r1, [lr]
	for (u = 0; u < hn; u ++) {
 8013e6e:	f47f af25 	bne.w	8013cbc <ffSampling_fft_dyntree.constprop.0+0x6c>
	Zf(poly_split_fft)(tmp, tmp + hn, g00, logn);
 8013e72:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8013e74:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8013e76:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8013e7a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013e7e:	3708      	adds	r7, #8
 8013e80:	eb06 0b07 	add.w	fp, r6, r7
	memcpy(g00, tmp, n * sizeof *tmp);
 8013e84:	f04f 0908 	mov.w	r9, #8
 8013e88:	fa09 f90a 	lsl.w	r9, r9, sl
	Zf(poly_split_fft)(tmp, tmp + hn, g00, logn);
 8013e8c:	4653      	mov	r3, sl
 8013e8e:	4642      	mov	r2, r8
 8013e90:	4630      	mov	r0, r6
 8013e92:	4659      	mov	r1, fp
 8013e94:	f7f8 fe5c 	bl	800cb50 <falcon_inner_poly_split_fft>
	memcpy(g00, tmp, n * sizeof *tmp);
 8013e98:	4631      	mov	r1, r6
 8013e9a:	464a      	mov	r2, r9
 8013e9c:	4640      	mov	r0, r8
 8013e9e:	f000 fef1 	bl	8014c84 <memcpy>
	Zf(poly_split_fft)(tmp, tmp + hn, g11, logn);
 8013ea2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8013ea4:	4653      	mov	r3, sl
 8013ea6:	4622      	mov	r2, r4
 8013ea8:	4630      	mov	r0, r6
 8013eaa:	4659      	mov	r1, fp
 8013eac:	f7f8 fe50 	bl	800cb50 <falcon_inner_poly_split_fft>
	memcpy(g11, tmp, n * sizeof *tmp);
 8013eb0:	4631      	mov	r1, r6
 8013eb2:	464a      	mov	r2, r9
 8013eb4:	4620      	mov	r0, r4
 8013eb6:	9416      	str	r4, [sp, #88]	; 0x58
 8013eb8:	f000 fee4 	bl	8014c84 <memcpy>
	memcpy(tmp, g01, n * sizeof *g01);
 8013ebc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013ebe:	464a      	mov	r2, r9
 8013ec0:	4629      	mov	r1, r5
 8013ec2:	4630      	mov	r0, r6
 8013ec4:	f000 fede 	bl	8014c84 <memcpy>
	memcpy(g01, g00, hn * sizeof *g00);
 8013ec8:	463a      	mov	r2, r7
 8013eca:	4641      	mov	r1, r8
 8013ecc:	4628      	mov	r0, r5
	z1 = tmp + n;
 8013ece:	eb06 0809 	add.w	r8, r6, r9
	memcpy(g01 + hn, g11, hn * sizeof *g00);
 8013ed2:	443d      	add	r5, r7
	memcpy(g01, g00, hn * sizeof *g00);
 8013ed4:	f000 fed6 	bl	8014c84 <memcpy>
	Zf(poly_split_fft)(z1, z1 + hn, t1, logn);
 8013ed8:	eb08 0407 	add.w	r4, r8, r7
	memcpy(g01 + hn, g11, hn * sizeof *g00);
 8013edc:	463a      	mov	r2, r7
 8013ede:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013ee0:	4628      	mov	r0, r5
 8013ee2:	f000 fecf 	bl	8014c84 <memcpy>
	Zf(poly_split_fft)(z1, z1 + hn, t1, logn);
 8013ee6:	4653      	mov	r3, sl
 8013ee8:	4621      	mov	r1, r4
 8013eea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013eec:	4640      	mov	r0, r8
 8013eee:	f7f8 fe2f 	bl	800cb50 <falcon_inner_poly_split_fft>
	ffSampling_fft_dyntree(samp, samp_ctx, z1, z1 + hn,
 8013ef2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013ef4:	9501      	str	r5, [sp, #4]
 8013ef6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013efa:	4655      	mov	r5, sl
 8013efc:	9304      	str	r3, [sp, #16]
 8013efe:	9302      	str	r3, [sp, #8]
	Zf(poly_merge_fft)(tmp + (n << 1), z1, z1 + hn, logn);
 8013f00:	f04f 0a10 	mov.w	sl, #16
	ffSampling_fft_dyntree(samp, samp_ctx, z1, z1 + hn,
 8013f04:	eb08 0309 	add.w	r3, r8, r9
 8013f08:	9303      	str	r3, [sp, #12]
	Zf(poly_merge_fft)(tmp + (n << 1), z1, z1 + hn, logn);
 8013f0a:	fa0a fa05 	lsl.w	sl, sl, r5
	ffSampling_fft_dyntree(samp, samp_ctx, z1, z1 + hn,
 8013f0e:	19c3      	adds	r3, r0, r7
 8013f10:	4622      	mov	r2, r4
	Zf(poly_merge_fft)(tmp + (n << 1), z1, z1 + hn, logn);
 8013f12:	44b2      	add	sl, r6
	ffSampling_fft_dyntree(samp, samp_ctx, z1, z1 + hn,
 8013f14:	9300      	str	r3, [sp, #0]
 8013f16:	4641      	mov	r1, r8
 8013f18:	4603      	mov	r3, r0
 8013f1a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013f1c:	f7ff fe98 	bl	8013c50 <ffSampling_fft_dyntree.constprop.0>
	Zf(poly_merge_fft)(tmp + (n << 1), z1, z1 + hn, logn);
 8013f20:	4622      	mov	r2, r4
 8013f22:	462b      	mov	r3, r5
 8013f24:	4641      	mov	r1, r8
 8013f26:	4650      	mov	r0, sl
 8013f28:	f7f8 ff02 	bl	800cd30 <falcon_inner_poly_merge_fft>
	memcpy(z1, t1, n * sizeof *t1);
 8013f2c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8013f2e:	464a      	mov	r2, r9
 8013f30:	4640      	mov	r0, r8
 8013f32:	f000 fea7 	bl	8014c84 <memcpy>
	for (u = 0; u < n; u ++) {
 8013f36:	9707      	str	r7, [sp, #28]
 8013f38:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8013f3a:	f1a8 0608 	sub.w	r6, r8, #8
 8013f3e:	f1aa 0508 	sub.w	r5, sl, #8
 8013f42:	2400      	movs	r4, #0
	y ^= (uint64_t)1 << 63;
 8013f44:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8013f48:	686b      	ldr	r3, [r5, #4]
	return fpr_add(x, y);
 8013f4a:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 8013f4e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013f52:	f7f7 ffcd 	bl	800bef0 <falcon_inner_fpr_add>
 8013f56:	3401      	adds	r4, #1
 8013f58:	42a7      	cmp	r7, r4
		a[u] = fpr_sub(a[u], b[u]);
 8013f5a:	e9c6 0100 	strd	r0, r1, [r6]
	for (u = 0; u < n; u ++) {
 8013f5e:	d1f1      	bne.n	8013f44 <ffSampling_fft_dyntree.constprop.0+0x2f4>
	memcpy(t1, tmp + (n << 1), n * sizeof *tmp);
 8013f60:	464a      	mov	r2, r9
 8013f62:	4651      	mov	r1, sl
 8013f64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8013f66:	9f07      	ldr	r7, [sp, #28]
 8013f68:	f000 fe8c 	bl	8014c84 <memcpy>
	Zf(poly_mul_fft)(tmp, z1, logn);
 8013f6c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013f6e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8013f70:	4641      	mov	r1, r8
 8013f72:	462a      	mov	r2, r5
 8013f74:	4620      	mov	r0, r4
 8013f76:	f7f8 fd63 	bl	800ca40 <falcon_inner_poly_mul_fft>
	Zf(poly_add)(t0, tmp, logn);
 8013f7a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013f7c:	462a      	mov	r2, r5
 8013f7e:	4621      	mov	r1, r4
 8013f80:	4630      	mov	r0, r6
 8013f82:	f7f8 f855 	bl	800c030 <falcon_inner_poly_add>
	Zf(poly_split_fft)(z0, z0 + hn, t0, logn);
 8013f86:	462b      	mov	r3, r5
 8013f88:	4632      	mov	r2, r6
 8013f8a:	4659      	mov	r1, fp
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	f7f8 fddf 	bl	800cb50 <falcon_inner_poly_split_fft>
	ffSampling_fft_dyntree(samp, samp_ctx, z0, z0 + hn,
 8013f92:	9b04      	ldr	r3, [sp, #16]
 8013f94:	9302      	str	r3, [sp, #8]
 8013f96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013f98:	9301      	str	r3, [sp, #4]
 8013f9a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013f9c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013fa2:	441f      	add	r7, r3
 8013fa4:	465a      	mov	r2, fp
 8013fa6:	4621      	mov	r1, r4
 8013fa8:	9700      	str	r7, [sp, #0]
 8013faa:	f7ff fe51 	bl	8013c50 <ffSampling_fft_dyntree.constprop.0>
	Zf(poly_merge_fft)(t0, z0, z0 + hn, logn);
 8013fae:	462b      	mov	r3, r5
 8013fb0:	465a      	mov	r2, fp
 8013fb2:	4621      	mov	r1, r4
 8013fb4:	4630      	mov	r0, r6
}
 8013fb6:	b021      	add	sp, #132	; 0x84
 8013fb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Zf(poly_merge_fft)(t0, z0, z0 + hn, logn);
 8013fbc:	f7f8 beb8 	b.w	800cd30 <falcon_inner_poly_merge_fft>
		leaf = fpr_mul(fpr_sqrt(leaf), fpr_inv_sigma[orig_logn]);
 8013fc0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013fc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013fc6:	f7f9 fb6b 	bl	800d6a0 <falcon_inner_fpr_sqrt>
 8013fca:	a315      	add	r3, pc, #84	; (adr r3, 8014020 <ffSampling_fft_dyntree.constprop.0+0x3d0>)
 8013fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd0:	f7f8 f846 	bl	800c060 <falcon_inner_fpr_mul>
		t0[0] = fpr_of(samp(samp_ctx, t0[0], leaf));
 8013fd4:	e9cd 0100 	strd	r0, r1, [sp]
 8013fd8:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 8013fdc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
		leaf = fpr_mul(fpr_sqrt(leaf), fpr_inv_sigma[orig_logn]);
 8013fde:	4605      	mov	r5, r0
		t0[0] = fpr_of(samp(samp_ctx, t0[0], leaf));
 8013fe0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013fe4:	4640      	mov	r0, r8
		leaf = fpr_mul(fpr_sqrt(leaf), fpr_inv_sigma[orig_logn]);
 8013fe6:	460c      	mov	r4, r1
		t0[0] = fpr_of(samp(samp_ctx, t0[0], leaf));
 8013fe8:	f7f8 f8b2 	bl	800c150 <falcon_inner_sampler>
	return fpr_scaled(i, 0);
 8013fec:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8013fee:	17c1      	asrs	r1, r0, #31
 8013ff0:	463a      	mov	r2, r7
 8013ff2:	f7f7 ff35 	bl	800be60 <falcon_inner_fpr_scaled>
 8013ff6:	e9c6 0100 	strd	r0, r1, [r6]
		t1[0] = fpr_of(samp(samp_ctx, t1[0], leaf));
 8013ffa:	e9cd 5400 	strd	r5, r4, [sp]
 8013ffe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8014000:	4640      	mov	r0, r8
 8014002:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014006:	f7f8 f8a3 	bl	800c150 <falcon_inner_sampler>
 801400a:	463a      	mov	r2, r7
 801400c:	17c1      	asrs	r1, r0, #31
 801400e:	f7f7 ff27 	bl	800be60 <falcon_inner_fpr_scaled>
 8014012:	e9c4 0100 	strd	r0, r1, [r4]
}
 8014016:	b021      	add	sp, #132	; 0x84
 8014018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801401c:	f3af 8000 	nop.w
 8014020:	de64c7ca 	.word	0xde64c7ca
 8014024:	3f78b6c2 	.word	0x3f78b6c2
 8014028:	3ff00000 	.word	0x3ff00000

0801402c <rand>:
 801402c:	4b16      	ldr	r3, [pc, #88]	; (8014088 <rand+0x5c>)
 801402e:	b510      	push	{r4, lr}
 8014030:	681c      	ldr	r4, [r3, #0]
 8014032:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014034:	b9b3      	cbnz	r3, 8014064 <rand+0x38>
 8014036:	2018      	movs	r0, #24
 8014038:	f000 f854 	bl	80140e4 <malloc>
 801403c:	4602      	mov	r2, r0
 801403e:	6320      	str	r0, [r4, #48]	; 0x30
 8014040:	b920      	cbnz	r0, 801404c <rand+0x20>
 8014042:	4b12      	ldr	r3, [pc, #72]	; (801408c <rand+0x60>)
 8014044:	4812      	ldr	r0, [pc, #72]	; (8014090 <rand+0x64>)
 8014046:	2152      	movs	r1, #82	; 0x52
 8014048:	f000 f82e 	bl	80140a8 <__assert_func>
 801404c:	4911      	ldr	r1, [pc, #68]	; (8014094 <rand+0x68>)
 801404e:	4b12      	ldr	r3, [pc, #72]	; (8014098 <rand+0x6c>)
 8014050:	e9c0 1300 	strd	r1, r3, [r0]
 8014054:	4b11      	ldr	r3, [pc, #68]	; (801409c <rand+0x70>)
 8014056:	6083      	str	r3, [r0, #8]
 8014058:	230b      	movs	r3, #11
 801405a:	8183      	strh	r3, [r0, #12]
 801405c:	2100      	movs	r1, #0
 801405e:	2001      	movs	r0, #1
 8014060:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014064:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014066:	480e      	ldr	r0, [pc, #56]	; (80140a0 <rand+0x74>)
 8014068:	690b      	ldr	r3, [r1, #16]
 801406a:	694c      	ldr	r4, [r1, #20]
 801406c:	4a0d      	ldr	r2, [pc, #52]	; (80140a4 <rand+0x78>)
 801406e:	4358      	muls	r0, r3
 8014070:	fb02 0004 	mla	r0, r2, r4, r0
 8014074:	fba3 3202 	umull	r3, r2, r3, r2
 8014078:	3301      	adds	r3, #1
 801407a:	eb40 0002 	adc.w	r0, r0, r2
 801407e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014082:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014086:	bd10      	pop	{r4, pc}
 8014088:	20000928 	.word	0x20000928
 801408c:	0801eef0 	.word	0x0801eef0
 8014090:	0801ef07 	.word	0x0801ef07
 8014094:	abcd330e 	.word	0xabcd330e
 8014098:	e66d1234 	.word	0xe66d1234
 801409c:	0005deec 	.word	0x0005deec
 80140a0:	5851f42d 	.word	0x5851f42d
 80140a4:	4c957f2d 	.word	0x4c957f2d

080140a8 <__assert_func>:
 80140a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80140aa:	4614      	mov	r4, r2
 80140ac:	461a      	mov	r2, r3
 80140ae:	4b09      	ldr	r3, [pc, #36]	; (80140d4 <__assert_func+0x2c>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	4605      	mov	r5, r0
 80140b4:	68d8      	ldr	r0, [r3, #12]
 80140b6:	b14c      	cbz	r4, 80140cc <__assert_func+0x24>
 80140b8:	4b07      	ldr	r3, [pc, #28]	; (80140d8 <__assert_func+0x30>)
 80140ba:	9100      	str	r1, [sp, #0]
 80140bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80140c0:	4906      	ldr	r1, [pc, #24]	; (80140dc <__assert_func+0x34>)
 80140c2:	462b      	mov	r3, r5
 80140c4:	f000 f8b8 	bl	8014238 <fiprintf>
 80140c8:	f000 f8ca 	bl	8014260 <abort>
 80140cc:	4b04      	ldr	r3, [pc, #16]	; (80140e0 <__assert_func+0x38>)
 80140ce:	461c      	mov	r4, r3
 80140d0:	e7f3      	b.n	80140ba <__assert_func+0x12>
 80140d2:	bf00      	nop
 80140d4:	20000928 	.word	0x20000928
 80140d8:	0801ef60 	.word	0x0801ef60
 80140dc:	0801ef6d 	.word	0x0801ef6d
 80140e0:	0801ef9b 	.word	0x0801ef9b

080140e4 <malloc>:
 80140e4:	4b02      	ldr	r3, [pc, #8]	; (80140f0 <malloc+0xc>)
 80140e6:	4601      	mov	r1, r0
 80140e8:	6818      	ldr	r0, [r3, #0]
 80140ea:	f000 b823 	b.w	8014134 <_malloc_r>
 80140ee:	bf00      	nop
 80140f0:	20000928 	.word	0x20000928

080140f4 <sbrk_aligned>:
 80140f4:	b570      	push	{r4, r5, r6, lr}
 80140f6:	4e0e      	ldr	r6, [pc, #56]	; (8014130 <sbrk_aligned+0x3c>)
 80140f8:	460c      	mov	r4, r1
 80140fa:	6831      	ldr	r1, [r6, #0]
 80140fc:	4605      	mov	r5, r0
 80140fe:	b911      	cbnz	r1, 8014106 <sbrk_aligned+0x12>
 8014100:	f7f7 fc0e 	bl	800b920 <_sbrk_r>
 8014104:	6030      	str	r0, [r6, #0]
 8014106:	4621      	mov	r1, r4
 8014108:	4628      	mov	r0, r5
 801410a:	f7f7 fc09 	bl	800b920 <_sbrk_r>
 801410e:	1c43      	adds	r3, r0, #1
 8014110:	d00a      	beq.n	8014128 <sbrk_aligned+0x34>
 8014112:	1cc4      	adds	r4, r0, #3
 8014114:	f024 0403 	bic.w	r4, r4, #3
 8014118:	42a0      	cmp	r0, r4
 801411a:	d007      	beq.n	801412c <sbrk_aligned+0x38>
 801411c:	1a21      	subs	r1, r4, r0
 801411e:	4628      	mov	r0, r5
 8014120:	f7f7 fbfe 	bl	800b920 <_sbrk_r>
 8014124:	3001      	adds	r0, #1
 8014126:	d101      	bne.n	801412c <sbrk_aligned+0x38>
 8014128:	f04f 34ff 	mov.w	r4, #4294967295
 801412c:	4620      	mov	r0, r4
 801412e:	bd70      	pop	{r4, r5, r6, pc}
 8014130:	20018208 	.word	0x20018208

08014134 <_malloc_r>:
 8014134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014138:	1ccd      	adds	r5, r1, #3
 801413a:	f025 0503 	bic.w	r5, r5, #3
 801413e:	3508      	adds	r5, #8
 8014140:	2d0c      	cmp	r5, #12
 8014142:	bf38      	it	cc
 8014144:	250c      	movcc	r5, #12
 8014146:	2d00      	cmp	r5, #0
 8014148:	4607      	mov	r7, r0
 801414a:	db01      	blt.n	8014150 <_malloc_r+0x1c>
 801414c:	42a9      	cmp	r1, r5
 801414e:	d905      	bls.n	801415c <_malloc_r+0x28>
 8014150:	230c      	movs	r3, #12
 8014152:	603b      	str	r3, [r7, #0]
 8014154:	2600      	movs	r6, #0
 8014156:	4630      	mov	r0, r6
 8014158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801415c:	4e2f      	ldr	r6, [pc, #188]	; (801421c <_malloc_r+0xe8>)
 801415e:	f000 f85f 	bl	8014220 <__malloc_lock>
 8014162:	6833      	ldr	r3, [r6, #0]
 8014164:	461c      	mov	r4, r3
 8014166:	bb44      	cbnz	r4, 80141ba <_malloc_r+0x86>
 8014168:	4629      	mov	r1, r5
 801416a:	4638      	mov	r0, r7
 801416c:	f7ff ffc2 	bl	80140f4 <sbrk_aligned>
 8014170:	1c43      	adds	r3, r0, #1
 8014172:	4604      	mov	r4, r0
 8014174:	d14f      	bne.n	8014216 <_malloc_r+0xe2>
 8014176:	6834      	ldr	r4, [r6, #0]
 8014178:	4626      	mov	r6, r4
 801417a:	2e00      	cmp	r6, #0
 801417c:	d142      	bne.n	8014204 <_malloc_r+0xd0>
 801417e:	2c00      	cmp	r4, #0
 8014180:	d043      	beq.n	801420a <_malloc_r+0xd6>
 8014182:	6823      	ldr	r3, [r4, #0]
 8014184:	4631      	mov	r1, r6
 8014186:	4638      	mov	r0, r7
 8014188:	eb04 0803 	add.w	r8, r4, r3
 801418c:	f7f7 fbc8 	bl	800b920 <_sbrk_r>
 8014190:	4580      	cmp	r8, r0
 8014192:	d13a      	bne.n	801420a <_malloc_r+0xd6>
 8014194:	6823      	ldr	r3, [r4, #0]
 8014196:	3503      	adds	r5, #3
 8014198:	1aed      	subs	r5, r5, r3
 801419a:	f025 0503 	bic.w	r5, r5, #3
 801419e:	3508      	adds	r5, #8
 80141a0:	2d0c      	cmp	r5, #12
 80141a2:	bf38      	it	cc
 80141a4:	250c      	movcc	r5, #12
 80141a6:	4629      	mov	r1, r5
 80141a8:	4638      	mov	r0, r7
 80141aa:	f7ff ffa3 	bl	80140f4 <sbrk_aligned>
 80141ae:	3001      	adds	r0, #1
 80141b0:	d02b      	beq.n	801420a <_malloc_r+0xd6>
 80141b2:	6823      	ldr	r3, [r4, #0]
 80141b4:	442b      	add	r3, r5
 80141b6:	6023      	str	r3, [r4, #0]
 80141b8:	e00e      	b.n	80141d8 <_malloc_r+0xa4>
 80141ba:	6822      	ldr	r2, [r4, #0]
 80141bc:	1b52      	subs	r2, r2, r5
 80141be:	d41e      	bmi.n	80141fe <_malloc_r+0xca>
 80141c0:	2a0b      	cmp	r2, #11
 80141c2:	d916      	bls.n	80141f2 <_malloc_r+0xbe>
 80141c4:	1961      	adds	r1, r4, r5
 80141c6:	42a3      	cmp	r3, r4
 80141c8:	6025      	str	r5, [r4, #0]
 80141ca:	bf18      	it	ne
 80141cc:	6059      	strne	r1, [r3, #4]
 80141ce:	6863      	ldr	r3, [r4, #4]
 80141d0:	bf08      	it	eq
 80141d2:	6031      	streq	r1, [r6, #0]
 80141d4:	5162      	str	r2, [r4, r5]
 80141d6:	604b      	str	r3, [r1, #4]
 80141d8:	4638      	mov	r0, r7
 80141da:	f104 060b 	add.w	r6, r4, #11
 80141de:	f000 f825 	bl	801422c <__malloc_unlock>
 80141e2:	f026 0607 	bic.w	r6, r6, #7
 80141e6:	1d23      	adds	r3, r4, #4
 80141e8:	1af2      	subs	r2, r6, r3
 80141ea:	d0b4      	beq.n	8014156 <_malloc_r+0x22>
 80141ec:	1b9b      	subs	r3, r3, r6
 80141ee:	50a3      	str	r3, [r4, r2]
 80141f0:	e7b1      	b.n	8014156 <_malloc_r+0x22>
 80141f2:	6862      	ldr	r2, [r4, #4]
 80141f4:	42a3      	cmp	r3, r4
 80141f6:	bf0c      	ite	eq
 80141f8:	6032      	streq	r2, [r6, #0]
 80141fa:	605a      	strne	r2, [r3, #4]
 80141fc:	e7ec      	b.n	80141d8 <_malloc_r+0xa4>
 80141fe:	4623      	mov	r3, r4
 8014200:	6864      	ldr	r4, [r4, #4]
 8014202:	e7b0      	b.n	8014166 <_malloc_r+0x32>
 8014204:	4634      	mov	r4, r6
 8014206:	6876      	ldr	r6, [r6, #4]
 8014208:	e7b7      	b.n	801417a <_malloc_r+0x46>
 801420a:	230c      	movs	r3, #12
 801420c:	603b      	str	r3, [r7, #0]
 801420e:	4638      	mov	r0, r7
 8014210:	f000 f80c 	bl	801422c <__malloc_unlock>
 8014214:	e79f      	b.n	8014156 <_malloc_r+0x22>
 8014216:	6025      	str	r5, [r4, #0]
 8014218:	e7de      	b.n	80141d8 <_malloc_r+0xa4>
 801421a:	bf00      	nop
 801421c:	20018204 	.word	0x20018204

08014220 <__malloc_lock>:
 8014220:	4801      	ldr	r0, [pc, #4]	; (8014228 <__malloc_lock+0x8>)
 8014222:	f000 b81b 	b.w	801425c <__retarget_lock_acquire_recursive>
 8014226:	bf00      	nop
 8014228:	2001820c 	.word	0x2001820c

0801422c <__malloc_unlock>:
 801422c:	4801      	ldr	r0, [pc, #4]	; (8014234 <__malloc_unlock+0x8>)
 801422e:	f000 b816 	b.w	801425e <__retarget_lock_release_recursive>
 8014232:	bf00      	nop
 8014234:	2001820c 	.word	0x2001820c

08014238 <fiprintf>:
 8014238:	b40e      	push	{r1, r2, r3}
 801423a:	b503      	push	{r0, r1, lr}
 801423c:	4601      	mov	r1, r0
 801423e:	ab03      	add	r3, sp, #12
 8014240:	4805      	ldr	r0, [pc, #20]	; (8014258 <fiprintf+0x20>)
 8014242:	f853 2b04 	ldr.w	r2, [r3], #4
 8014246:	6800      	ldr	r0, [r0, #0]
 8014248:	9301      	str	r3, [sp, #4]
 801424a:	f000 f883 	bl	8014354 <_vfiprintf_r>
 801424e:	b002      	add	sp, #8
 8014250:	f85d eb04 	ldr.w	lr, [sp], #4
 8014254:	b003      	add	sp, #12
 8014256:	4770      	bx	lr
 8014258:	20000928 	.word	0x20000928

0801425c <__retarget_lock_acquire_recursive>:
 801425c:	4770      	bx	lr

0801425e <__retarget_lock_release_recursive>:
 801425e:	4770      	bx	lr

08014260 <abort>:
 8014260:	b508      	push	{r3, lr}
 8014262:	2006      	movs	r0, #6
 8014264:	f000 fcf2 	bl	8014c4c <raise>
 8014268:	2001      	movs	r0, #1
 801426a:	f7f7 fb91 	bl	800b990 <_exit>
	...

08014270 <_free_r>:
 8014270:	b538      	push	{r3, r4, r5, lr}
 8014272:	4605      	mov	r5, r0
 8014274:	2900      	cmp	r1, #0
 8014276:	d041      	beq.n	80142fc <_free_r+0x8c>
 8014278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801427c:	1f0c      	subs	r4, r1, #4
 801427e:	2b00      	cmp	r3, #0
 8014280:	bfb8      	it	lt
 8014282:	18e4      	addlt	r4, r4, r3
 8014284:	f7ff ffcc 	bl	8014220 <__malloc_lock>
 8014288:	4a1d      	ldr	r2, [pc, #116]	; (8014300 <_free_r+0x90>)
 801428a:	6813      	ldr	r3, [r2, #0]
 801428c:	b933      	cbnz	r3, 801429c <_free_r+0x2c>
 801428e:	6063      	str	r3, [r4, #4]
 8014290:	6014      	str	r4, [r2, #0]
 8014292:	4628      	mov	r0, r5
 8014294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014298:	f7ff bfc8 	b.w	801422c <__malloc_unlock>
 801429c:	42a3      	cmp	r3, r4
 801429e:	d908      	bls.n	80142b2 <_free_r+0x42>
 80142a0:	6820      	ldr	r0, [r4, #0]
 80142a2:	1821      	adds	r1, r4, r0
 80142a4:	428b      	cmp	r3, r1
 80142a6:	bf01      	itttt	eq
 80142a8:	6819      	ldreq	r1, [r3, #0]
 80142aa:	685b      	ldreq	r3, [r3, #4]
 80142ac:	1809      	addeq	r1, r1, r0
 80142ae:	6021      	streq	r1, [r4, #0]
 80142b0:	e7ed      	b.n	801428e <_free_r+0x1e>
 80142b2:	461a      	mov	r2, r3
 80142b4:	685b      	ldr	r3, [r3, #4]
 80142b6:	b10b      	cbz	r3, 80142bc <_free_r+0x4c>
 80142b8:	42a3      	cmp	r3, r4
 80142ba:	d9fa      	bls.n	80142b2 <_free_r+0x42>
 80142bc:	6811      	ldr	r1, [r2, #0]
 80142be:	1850      	adds	r0, r2, r1
 80142c0:	42a0      	cmp	r0, r4
 80142c2:	d10b      	bne.n	80142dc <_free_r+0x6c>
 80142c4:	6820      	ldr	r0, [r4, #0]
 80142c6:	4401      	add	r1, r0
 80142c8:	1850      	adds	r0, r2, r1
 80142ca:	4283      	cmp	r3, r0
 80142cc:	6011      	str	r1, [r2, #0]
 80142ce:	d1e0      	bne.n	8014292 <_free_r+0x22>
 80142d0:	6818      	ldr	r0, [r3, #0]
 80142d2:	685b      	ldr	r3, [r3, #4]
 80142d4:	6053      	str	r3, [r2, #4]
 80142d6:	4408      	add	r0, r1
 80142d8:	6010      	str	r0, [r2, #0]
 80142da:	e7da      	b.n	8014292 <_free_r+0x22>
 80142dc:	d902      	bls.n	80142e4 <_free_r+0x74>
 80142de:	230c      	movs	r3, #12
 80142e0:	602b      	str	r3, [r5, #0]
 80142e2:	e7d6      	b.n	8014292 <_free_r+0x22>
 80142e4:	6820      	ldr	r0, [r4, #0]
 80142e6:	1821      	adds	r1, r4, r0
 80142e8:	428b      	cmp	r3, r1
 80142ea:	bf04      	itt	eq
 80142ec:	6819      	ldreq	r1, [r3, #0]
 80142ee:	685b      	ldreq	r3, [r3, #4]
 80142f0:	6063      	str	r3, [r4, #4]
 80142f2:	bf04      	itt	eq
 80142f4:	1809      	addeq	r1, r1, r0
 80142f6:	6021      	streq	r1, [r4, #0]
 80142f8:	6054      	str	r4, [r2, #4]
 80142fa:	e7ca      	b.n	8014292 <_free_r+0x22>
 80142fc:	bd38      	pop	{r3, r4, r5, pc}
 80142fe:	bf00      	nop
 8014300:	20018204 	.word	0x20018204

08014304 <__sfputc_r>:
 8014304:	6893      	ldr	r3, [r2, #8]
 8014306:	3b01      	subs	r3, #1
 8014308:	2b00      	cmp	r3, #0
 801430a:	b410      	push	{r4}
 801430c:	6093      	str	r3, [r2, #8]
 801430e:	da07      	bge.n	8014320 <__sfputc_r+0x1c>
 8014310:	6994      	ldr	r4, [r2, #24]
 8014312:	42a3      	cmp	r3, r4
 8014314:	db01      	blt.n	801431a <__sfputc_r+0x16>
 8014316:	290a      	cmp	r1, #10
 8014318:	d102      	bne.n	8014320 <__sfputc_r+0x1c>
 801431a:	bc10      	pop	{r4}
 801431c:	f000 bbb7 	b.w	8014a8e <__swbuf_r>
 8014320:	6813      	ldr	r3, [r2, #0]
 8014322:	1c58      	adds	r0, r3, #1
 8014324:	6010      	str	r0, [r2, #0]
 8014326:	7019      	strb	r1, [r3, #0]
 8014328:	4608      	mov	r0, r1
 801432a:	bc10      	pop	{r4}
 801432c:	4770      	bx	lr

0801432e <__sfputs_r>:
 801432e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014330:	4606      	mov	r6, r0
 8014332:	460f      	mov	r7, r1
 8014334:	4614      	mov	r4, r2
 8014336:	18d5      	adds	r5, r2, r3
 8014338:	42ac      	cmp	r4, r5
 801433a:	d101      	bne.n	8014340 <__sfputs_r+0x12>
 801433c:	2000      	movs	r0, #0
 801433e:	e007      	b.n	8014350 <__sfputs_r+0x22>
 8014340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014344:	463a      	mov	r2, r7
 8014346:	4630      	mov	r0, r6
 8014348:	f7ff ffdc 	bl	8014304 <__sfputc_r>
 801434c:	1c43      	adds	r3, r0, #1
 801434e:	d1f3      	bne.n	8014338 <__sfputs_r+0xa>
 8014350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014354 <_vfiprintf_r>:
 8014354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014358:	460d      	mov	r5, r1
 801435a:	b09d      	sub	sp, #116	; 0x74
 801435c:	4614      	mov	r4, r2
 801435e:	4698      	mov	r8, r3
 8014360:	4606      	mov	r6, r0
 8014362:	b118      	cbz	r0, 801436c <_vfiprintf_r+0x18>
 8014364:	6a03      	ldr	r3, [r0, #32]
 8014366:	b90b      	cbnz	r3, 801436c <_vfiprintf_r+0x18>
 8014368:	f000 fb18 	bl	801499c <__sinit>
 801436c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801436e:	07d9      	lsls	r1, r3, #31
 8014370:	d405      	bmi.n	801437e <_vfiprintf_r+0x2a>
 8014372:	89ab      	ldrh	r3, [r5, #12]
 8014374:	059a      	lsls	r2, r3, #22
 8014376:	d402      	bmi.n	801437e <_vfiprintf_r+0x2a>
 8014378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801437a:	f7ff ff6f 	bl	801425c <__retarget_lock_acquire_recursive>
 801437e:	89ab      	ldrh	r3, [r5, #12]
 8014380:	071b      	lsls	r3, r3, #28
 8014382:	d501      	bpl.n	8014388 <_vfiprintf_r+0x34>
 8014384:	692b      	ldr	r3, [r5, #16]
 8014386:	b99b      	cbnz	r3, 80143b0 <_vfiprintf_r+0x5c>
 8014388:	4629      	mov	r1, r5
 801438a:	4630      	mov	r0, r6
 801438c:	f000 fbbc 	bl	8014b08 <__swsetup_r>
 8014390:	b170      	cbz	r0, 80143b0 <_vfiprintf_r+0x5c>
 8014392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014394:	07dc      	lsls	r4, r3, #31
 8014396:	d504      	bpl.n	80143a2 <_vfiprintf_r+0x4e>
 8014398:	f04f 30ff 	mov.w	r0, #4294967295
 801439c:	b01d      	add	sp, #116	; 0x74
 801439e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143a2:	89ab      	ldrh	r3, [r5, #12]
 80143a4:	0598      	lsls	r0, r3, #22
 80143a6:	d4f7      	bmi.n	8014398 <_vfiprintf_r+0x44>
 80143a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143aa:	f7ff ff58 	bl	801425e <__retarget_lock_release_recursive>
 80143ae:	e7f3      	b.n	8014398 <_vfiprintf_r+0x44>
 80143b0:	2300      	movs	r3, #0
 80143b2:	9309      	str	r3, [sp, #36]	; 0x24
 80143b4:	2320      	movs	r3, #32
 80143b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80143ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80143be:	2330      	movs	r3, #48	; 0x30
 80143c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014574 <_vfiprintf_r+0x220>
 80143c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80143c8:	f04f 0901 	mov.w	r9, #1
 80143cc:	4623      	mov	r3, r4
 80143ce:	469a      	mov	sl, r3
 80143d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143d4:	b10a      	cbz	r2, 80143da <_vfiprintf_r+0x86>
 80143d6:	2a25      	cmp	r2, #37	; 0x25
 80143d8:	d1f9      	bne.n	80143ce <_vfiprintf_r+0x7a>
 80143da:	ebba 0b04 	subs.w	fp, sl, r4
 80143de:	d00b      	beq.n	80143f8 <_vfiprintf_r+0xa4>
 80143e0:	465b      	mov	r3, fp
 80143e2:	4622      	mov	r2, r4
 80143e4:	4629      	mov	r1, r5
 80143e6:	4630      	mov	r0, r6
 80143e8:	f7ff ffa1 	bl	801432e <__sfputs_r>
 80143ec:	3001      	adds	r0, #1
 80143ee:	f000 80a9 	beq.w	8014544 <_vfiprintf_r+0x1f0>
 80143f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143f4:	445a      	add	r2, fp
 80143f6:	9209      	str	r2, [sp, #36]	; 0x24
 80143f8:	f89a 3000 	ldrb.w	r3, [sl]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	f000 80a1 	beq.w	8014544 <_vfiprintf_r+0x1f0>
 8014402:	2300      	movs	r3, #0
 8014404:	f04f 32ff 	mov.w	r2, #4294967295
 8014408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801440c:	f10a 0a01 	add.w	sl, sl, #1
 8014410:	9304      	str	r3, [sp, #16]
 8014412:	9307      	str	r3, [sp, #28]
 8014414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014418:	931a      	str	r3, [sp, #104]	; 0x68
 801441a:	4654      	mov	r4, sl
 801441c:	2205      	movs	r2, #5
 801441e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014422:	4854      	ldr	r0, [pc, #336]	; (8014574 <_vfiprintf_r+0x220>)
 8014424:	f7eb ff64 	bl	80002f0 <memchr>
 8014428:	9a04      	ldr	r2, [sp, #16]
 801442a:	b9d8      	cbnz	r0, 8014464 <_vfiprintf_r+0x110>
 801442c:	06d1      	lsls	r1, r2, #27
 801442e:	bf44      	itt	mi
 8014430:	2320      	movmi	r3, #32
 8014432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014436:	0713      	lsls	r3, r2, #28
 8014438:	bf44      	itt	mi
 801443a:	232b      	movmi	r3, #43	; 0x2b
 801443c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014440:	f89a 3000 	ldrb.w	r3, [sl]
 8014444:	2b2a      	cmp	r3, #42	; 0x2a
 8014446:	d015      	beq.n	8014474 <_vfiprintf_r+0x120>
 8014448:	9a07      	ldr	r2, [sp, #28]
 801444a:	4654      	mov	r4, sl
 801444c:	2000      	movs	r0, #0
 801444e:	f04f 0c0a 	mov.w	ip, #10
 8014452:	4621      	mov	r1, r4
 8014454:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014458:	3b30      	subs	r3, #48	; 0x30
 801445a:	2b09      	cmp	r3, #9
 801445c:	d94d      	bls.n	80144fa <_vfiprintf_r+0x1a6>
 801445e:	b1b0      	cbz	r0, 801448e <_vfiprintf_r+0x13a>
 8014460:	9207      	str	r2, [sp, #28]
 8014462:	e014      	b.n	801448e <_vfiprintf_r+0x13a>
 8014464:	eba0 0308 	sub.w	r3, r0, r8
 8014468:	fa09 f303 	lsl.w	r3, r9, r3
 801446c:	4313      	orrs	r3, r2
 801446e:	9304      	str	r3, [sp, #16]
 8014470:	46a2      	mov	sl, r4
 8014472:	e7d2      	b.n	801441a <_vfiprintf_r+0xc6>
 8014474:	9b03      	ldr	r3, [sp, #12]
 8014476:	1d19      	adds	r1, r3, #4
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	9103      	str	r1, [sp, #12]
 801447c:	2b00      	cmp	r3, #0
 801447e:	bfbb      	ittet	lt
 8014480:	425b      	neglt	r3, r3
 8014482:	f042 0202 	orrlt.w	r2, r2, #2
 8014486:	9307      	strge	r3, [sp, #28]
 8014488:	9307      	strlt	r3, [sp, #28]
 801448a:	bfb8      	it	lt
 801448c:	9204      	strlt	r2, [sp, #16]
 801448e:	7823      	ldrb	r3, [r4, #0]
 8014490:	2b2e      	cmp	r3, #46	; 0x2e
 8014492:	d10c      	bne.n	80144ae <_vfiprintf_r+0x15a>
 8014494:	7863      	ldrb	r3, [r4, #1]
 8014496:	2b2a      	cmp	r3, #42	; 0x2a
 8014498:	d134      	bne.n	8014504 <_vfiprintf_r+0x1b0>
 801449a:	9b03      	ldr	r3, [sp, #12]
 801449c:	1d1a      	adds	r2, r3, #4
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	9203      	str	r2, [sp, #12]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	bfb8      	it	lt
 80144a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80144aa:	3402      	adds	r4, #2
 80144ac:	9305      	str	r3, [sp, #20]
 80144ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014578 <_vfiprintf_r+0x224>
 80144b2:	7821      	ldrb	r1, [r4, #0]
 80144b4:	2203      	movs	r2, #3
 80144b6:	4650      	mov	r0, sl
 80144b8:	f7eb ff1a 	bl	80002f0 <memchr>
 80144bc:	b138      	cbz	r0, 80144ce <_vfiprintf_r+0x17a>
 80144be:	9b04      	ldr	r3, [sp, #16]
 80144c0:	eba0 000a 	sub.w	r0, r0, sl
 80144c4:	2240      	movs	r2, #64	; 0x40
 80144c6:	4082      	lsls	r2, r0
 80144c8:	4313      	orrs	r3, r2
 80144ca:	3401      	adds	r4, #1
 80144cc:	9304      	str	r3, [sp, #16]
 80144ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144d2:	482a      	ldr	r0, [pc, #168]	; (801457c <_vfiprintf_r+0x228>)
 80144d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80144d8:	2206      	movs	r2, #6
 80144da:	f7eb ff09 	bl	80002f0 <memchr>
 80144de:	2800      	cmp	r0, #0
 80144e0:	d03f      	beq.n	8014562 <_vfiprintf_r+0x20e>
 80144e2:	4b27      	ldr	r3, [pc, #156]	; (8014580 <_vfiprintf_r+0x22c>)
 80144e4:	bb1b      	cbnz	r3, 801452e <_vfiprintf_r+0x1da>
 80144e6:	9b03      	ldr	r3, [sp, #12]
 80144e8:	3307      	adds	r3, #7
 80144ea:	f023 0307 	bic.w	r3, r3, #7
 80144ee:	3308      	adds	r3, #8
 80144f0:	9303      	str	r3, [sp, #12]
 80144f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144f4:	443b      	add	r3, r7
 80144f6:	9309      	str	r3, [sp, #36]	; 0x24
 80144f8:	e768      	b.n	80143cc <_vfiprintf_r+0x78>
 80144fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80144fe:	460c      	mov	r4, r1
 8014500:	2001      	movs	r0, #1
 8014502:	e7a6      	b.n	8014452 <_vfiprintf_r+0xfe>
 8014504:	2300      	movs	r3, #0
 8014506:	3401      	adds	r4, #1
 8014508:	9305      	str	r3, [sp, #20]
 801450a:	4619      	mov	r1, r3
 801450c:	f04f 0c0a 	mov.w	ip, #10
 8014510:	4620      	mov	r0, r4
 8014512:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014516:	3a30      	subs	r2, #48	; 0x30
 8014518:	2a09      	cmp	r2, #9
 801451a:	d903      	bls.n	8014524 <_vfiprintf_r+0x1d0>
 801451c:	2b00      	cmp	r3, #0
 801451e:	d0c6      	beq.n	80144ae <_vfiprintf_r+0x15a>
 8014520:	9105      	str	r1, [sp, #20]
 8014522:	e7c4      	b.n	80144ae <_vfiprintf_r+0x15a>
 8014524:	fb0c 2101 	mla	r1, ip, r1, r2
 8014528:	4604      	mov	r4, r0
 801452a:	2301      	movs	r3, #1
 801452c:	e7f0      	b.n	8014510 <_vfiprintf_r+0x1bc>
 801452e:	ab03      	add	r3, sp, #12
 8014530:	9300      	str	r3, [sp, #0]
 8014532:	462a      	mov	r2, r5
 8014534:	4b13      	ldr	r3, [pc, #76]	; (8014584 <_vfiprintf_r+0x230>)
 8014536:	a904      	add	r1, sp, #16
 8014538:	4630      	mov	r0, r6
 801453a:	f3af 8000 	nop.w
 801453e:	4607      	mov	r7, r0
 8014540:	1c78      	adds	r0, r7, #1
 8014542:	d1d6      	bne.n	80144f2 <_vfiprintf_r+0x19e>
 8014544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014546:	07d9      	lsls	r1, r3, #31
 8014548:	d405      	bmi.n	8014556 <_vfiprintf_r+0x202>
 801454a:	89ab      	ldrh	r3, [r5, #12]
 801454c:	059a      	lsls	r2, r3, #22
 801454e:	d402      	bmi.n	8014556 <_vfiprintf_r+0x202>
 8014550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014552:	f7ff fe84 	bl	801425e <__retarget_lock_release_recursive>
 8014556:	89ab      	ldrh	r3, [r5, #12]
 8014558:	065b      	lsls	r3, r3, #25
 801455a:	f53f af1d 	bmi.w	8014398 <_vfiprintf_r+0x44>
 801455e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014560:	e71c      	b.n	801439c <_vfiprintf_r+0x48>
 8014562:	ab03      	add	r3, sp, #12
 8014564:	9300      	str	r3, [sp, #0]
 8014566:	462a      	mov	r2, r5
 8014568:	4b06      	ldr	r3, [pc, #24]	; (8014584 <_vfiprintf_r+0x230>)
 801456a:	a904      	add	r1, sp, #16
 801456c:	4630      	mov	r0, r6
 801456e:	f000 f879 	bl	8014664 <_printf_i>
 8014572:	e7e4      	b.n	801453e <_vfiprintf_r+0x1ea>
 8014574:	0801ef9c 	.word	0x0801ef9c
 8014578:	0801efa2 	.word	0x0801efa2
 801457c:	0801efa6 	.word	0x0801efa6
 8014580:	00000000 	.word	0x00000000
 8014584:	0801432f 	.word	0x0801432f

08014588 <_printf_common>:
 8014588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801458c:	4616      	mov	r6, r2
 801458e:	4699      	mov	r9, r3
 8014590:	688a      	ldr	r2, [r1, #8]
 8014592:	690b      	ldr	r3, [r1, #16]
 8014594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014598:	4293      	cmp	r3, r2
 801459a:	bfb8      	it	lt
 801459c:	4613      	movlt	r3, r2
 801459e:	6033      	str	r3, [r6, #0]
 80145a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80145a4:	4607      	mov	r7, r0
 80145a6:	460c      	mov	r4, r1
 80145a8:	b10a      	cbz	r2, 80145ae <_printf_common+0x26>
 80145aa:	3301      	adds	r3, #1
 80145ac:	6033      	str	r3, [r6, #0]
 80145ae:	6823      	ldr	r3, [r4, #0]
 80145b0:	0699      	lsls	r1, r3, #26
 80145b2:	bf42      	ittt	mi
 80145b4:	6833      	ldrmi	r3, [r6, #0]
 80145b6:	3302      	addmi	r3, #2
 80145b8:	6033      	strmi	r3, [r6, #0]
 80145ba:	6825      	ldr	r5, [r4, #0]
 80145bc:	f015 0506 	ands.w	r5, r5, #6
 80145c0:	d106      	bne.n	80145d0 <_printf_common+0x48>
 80145c2:	f104 0a19 	add.w	sl, r4, #25
 80145c6:	68e3      	ldr	r3, [r4, #12]
 80145c8:	6832      	ldr	r2, [r6, #0]
 80145ca:	1a9b      	subs	r3, r3, r2
 80145cc:	42ab      	cmp	r3, r5
 80145ce:	dc26      	bgt.n	801461e <_printf_common+0x96>
 80145d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80145d4:	1e13      	subs	r3, r2, #0
 80145d6:	6822      	ldr	r2, [r4, #0]
 80145d8:	bf18      	it	ne
 80145da:	2301      	movne	r3, #1
 80145dc:	0692      	lsls	r2, r2, #26
 80145de:	d42b      	bmi.n	8014638 <_printf_common+0xb0>
 80145e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80145e4:	4649      	mov	r1, r9
 80145e6:	4638      	mov	r0, r7
 80145e8:	47c0      	blx	r8
 80145ea:	3001      	adds	r0, #1
 80145ec:	d01e      	beq.n	801462c <_printf_common+0xa4>
 80145ee:	6823      	ldr	r3, [r4, #0]
 80145f0:	6922      	ldr	r2, [r4, #16]
 80145f2:	f003 0306 	and.w	r3, r3, #6
 80145f6:	2b04      	cmp	r3, #4
 80145f8:	bf02      	ittt	eq
 80145fa:	68e5      	ldreq	r5, [r4, #12]
 80145fc:	6833      	ldreq	r3, [r6, #0]
 80145fe:	1aed      	subeq	r5, r5, r3
 8014600:	68a3      	ldr	r3, [r4, #8]
 8014602:	bf0c      	ite	eq
 8014604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014608:	2500      	movne	r5, #0
 801460a:	4293      	cmp	r3, r2
 801460c:	bfc4      	itt	gt
 801460e:	1a9b      	subgt	r3, r3, r2
 8014610:	18ed      	addgt	r5, r5, r3
 8014612:	2600      	movs	r6, #0
 8014614:	341a      	adds	r4, #26
 8014616:	42b5      	cmp	r5, r6
 8014618:	d11a      	bne.n	8014650 <_printf_common+0xc8>
 801461a:	2000      	movs	r0, #0
 801461c:	e008      	b.n	8014630 <_printf_common+0xa8>
 801461e:	2301      	movs	r3, #1
 8014620:	4652      	mov	r2, sl
 8014622:	4649      	mov	r1, r9
 8014624:	4638      	mov	r0, r7
 8014626:	47c0      	blx	r8
 8014628:	3001      	adds	r0, #1
 801462a:	d103      	bne.n	8014634 <_printf_common+0xac>
 801462c:	f04f 30ff 	mov.w	r0, #4294967295
 8014630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014634:	3501      	adds	r5, #1
 8014636:	e7c6      	b.n	80145c6 <_printf_common+0x3e>
 8014638:	18e1      	adds	r1, r4, r3
 801463a:	1c5a      	adds	r2, r3, #1
 801463c:	2030      	movs	r0, #48	; 0x30
 801463e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014642:	4422      	add	r2, r4
 8014644:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014648:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801464c:	3302      	adds	r3, #2
 801464e:	e7c7      	b.n	80145e0 <_printf_common+0x58>
 8014650:	2301      	movs	r3, #1
 8014652:	4622      	mov	r2, r4
 8014654:	4649      	mov	r1, r9
 8014656:	4638      	mov	r0, r7
 8014658:	47c0      	blx	r8
 801465a:	3001      	adds	r0, #1
 801465c:	d0e6      	beq.n	801462c <_printf_common+0xa4>
 801465e:	3601      	adds	r6, #1
 8014660:	e7d9      	b.n	8014616 <_printf_common+0x8e>
	...

08014664 <_printf_i>:
 8014664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014668:	7e0f      	ldrb	r7, [r1, #24]
 801466a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801466c:	2f78      	cmp	r7, #120	; 0x78
 801466e:	4691      	mov	r9, r2
 8014670:	4680      	mov	r8, r0
 8014672:	460c      	mov	r4, r1
 8014674:	469a      	mov	sl, r3
 8014676:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801467a:	d807      	bhi.n	801468c <_printf_i+0x28>
 801467c:	2f62      	cmp	r7, #98	; 0x62
 801467e:	d80a      	bhi.n	8014696 <_printf_i+0x32>
 8014680:	2f00      	cmp	r7, #0
 8014682:	f000 80d4 	beq.w	801482e <_printf_i+0x1ca>
 8014686:	2f58      	cmp	r7, #88	; 0x58
 8014688:	f000 80c0 	beq.w	801480c <_printf_i+0x1a8>
 801468c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014690:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014694:	e03a      	b.n	801470c <_printf_i+0xa8>
 8014696:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801469a:	2b15      	cmp	r3, #21
 801469c:	d8f6      	bhi.n	801468c <_printf_i+0x28>
 801469e:	a101      	add	r1, pc, #4	; (adr r1, 80146a4 <_printf_i+0x40>)
 80146a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80146a4:	080146fd 	.word	0x080146fd
 80146a8:	08014711 	.word	0x08014711
 80146ac:	0801468d 	.word	0x0801468d
 80146b0:	0801468d 	.word	0x0801468d
 80146b4:	0801468d 	.word	0x0801468d
 80146b8:	0801468d 	.word	0x0801468d
 80146bc:	08014711 	.word	0x08014711
 80146c0:	0801468d 	.word	0x0801468d
 80146c4:	0801468d 	.word	0x0801468d
 80146c8:	0801468d 	.word	0x0801468d
 80146cc:	0801468d 	.word	0x0801468d
 80146d0:	08014815 	.word	0x08014815
 80146d4:	0801473d 	.word	0x0801473d
 80146d8:	080147cf 	.word	0x080147cf
 80146dc:	0801468d 	.word	0x0801468d
 80146e0:	0801468d 	.word	0x0801468d
 80146e4:	08014837 	.word	0x08014837
 80146e8:	0801468d 	.word	0x0801468d
 80146ec:	0801473d 	.word	0x0801473d
 80146f0:	0801468d 	.word	0x0801468d
 80146f4:	0801468d 	.word	0x0801468d
 80146f8:	080147d7 	.word	0x080147d7
 80146fc:	682b      	ldr	r3, [r5, #0]
 80146fe:	1d1a      	adds	r2, r3, #4
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	602a      	str	r2, [r5, #0]
 8014704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801470c:	2301      	movs	r3, #1
 801470e:	e09f      	b.n	8014850 <_printf_i+0x1ec>
 8014710:	6820      	ldr	r0, [r4, #0]
 8014712:	682b      	ldr	r3, [r5, #0]
 8014714:	0607      	lsls	r7, r0, #24
 8014716:	f103 0104 	add.w	r1, r3, #4
 801471a:	6029      	str	r1, [r5, #0]
 801471c:	d501      	bpl.n	8014722 <_printf_i+0xbe>
 801471e:	681e      	ldr	r6, [r3, #0]
 8014720:	e003      	b.n	801472a <_printf_i+0xc6>
 8014722:	0646      	lsls	r6, r0, #25
 8014724:	d5fb      	bpl.n	801471e <_printf_i+0xba>
 8014726:	f9b3 6000 	ldrsh.w	r6, [r3]
 801472a:	2e00      	cmp	r6, #0
 801472c:	da03      	bge.n	8014736 <_printf_i+0xd2>
 801472e:	232d      	movs	r3, #45	; 0x2d
 8014730:	4276      	negs	r6, r6
 8014732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014736:	485a      	ldr	r0, [pc, #360]	; (80148a0 <_printf_i+0x23c>)
 8014738:	230a      	movs	r3, #10
 801473a:	e012      	b.n	8014762 <_printf_i+0xfe>
 801473c:	682b      	ldr	r3, [r5, #0]
 801473e:	6820      	ldr	r0, [r4, #0]
 8014740:	1d19      	adds	r1, r3, #4
 8014742:	6029      	str	r1, [r5, #0]
 8014744:	0605      	lsls	r5, r0, #24
 8014746:	d501      	bpl.n	801474c <_printf_i+0xe8>
 8014748:	681e      	ldr	r6, [r3, #0]
 801474a:	e002      	b.n	8014752 <_printf_i+0xee>
 801474c:	0641      	lsls	r1, r0, #25
 801474e:	d5fb      	bpl.n	8014748 <_printf_i+0xe4>
 8014750:	881e      	ldrh	r6, [r3, #0]
 8014752:	4853      	ldr	r0, [pc, #332]	; (80148a0 <_printf_i+0x23c>)
 8014754:	2f6f      	cmp	r7, #111	; 0x6f
 8014756:	bf0c      	ite	eq
 8014758:	2308      	moveq	r3, #8
 801475a:	230a      	movne	r3, #10
 801475c:	2100      	movs	r1, #0
 801475e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014762:	6865      	ldr	r5, [r4, #4]
 8014764:	60a5      	str	r5, [r4, #8]
 8014766:	2d00      	cmp	r5, #0
 8014768:	bfa2      	ittt	ge
 801476a:	6821      	ldrge	r1, [r4, #0]
 801476c:	f021 0104 	bicge.w	r1, r1, #4
 8014770:	6021      	strge	r1, [r4, #0]
 8014772:	b90e      	cbnz	r6, 8014778 <_printf_i+0x114>
 8014774:	2d00      	cmp	r5, #0
 8014776:	d04b      	beq.n	8014810 <_printf_i+0x1ac>
 8014778:	4615      	mov	r5, r2
 801477a:	fbb6 f1f3 	udiv	r1, r6, r3
 801477e:	fb03 6711 	mls	r7, r3, r1, r6
 8014782:	5dc7      	ldrb	r7, [r0, r7]
 8014784:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014788:	4637      	mov	r7, r6
 801478a:	42bb      	cmp	r3, r7
 801478c:	460e      	mov	r6, r1
 801478e:	d9f4      	bls.n	801477a <_printf_i+0x116>
 8014790:	2b08      	cmp	r3, #8
 8014792:	d10b      	bne.n	80147ac <_printf_i+0x148>
 8014794:	6823      	ldr	r3, [r4, #0]
 8014796:	07de      	lsls	r6, r3, #31
 8014798:	d508      	bpl.n	80147ac <_printf_i+0x148>
 801479a:	6923      	ldr	r3, [r4, #16]
 801479c:	6861      	ldr	r1, [r4, #4]
 801479e:	4299      	cmp	r1, r3
 80147a0:	bfde      	ittt	le
 80147a2:	2330      	movle	r3, #48	; 0x30
 80147a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80147a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80147ac:	1b52      	subs	r2, r2, r5
 80147ae:	6122      	str	r2, [r4, #16]
 80147b0:	f8cd a000 	str.w	sl, [sp]
 80147b4:	464b      	mov	r3, r9
 80147b6:	aa03      	add	r2, sp, #12
 80147b8:	4621      	mov	r1, r4
 80147ba:	4640      	mov	r0, r8
 80147bc:	f7ff fee4 	bl	8014588 <_printf_common>
 80147c0:	3001      	adds	r0, #1
 80147c2:	d14a      	bne.n	801485a <_printf_i+0x1f6>
 80147c4:	f04f 30ff 	mov.w	r0, #4294967295
 80147c8:	b004      	add	sp, #16
 80147ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147ce:	6823      	ldr	r3, [r4, #0]
 80147d0:	f043 0320 	orr.w	r3, r3, #32
 80147d4:	6023      	str	r3, [r4, #0]
 80147d6:	4833      	ldr	r0, [pc, #204]	; (80148a4 <_printf_i+0x240>)
 80147d8:	2778      	movs	r7, #120	; 0x78
 80147da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80147de:	6823      	ldr	r3, [r4, #0]
 80147e0:	6829      	ldr	r1, [r5, #0]
 80147e2:	061f      	lsls	r7, r3, #24
 80147e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80147e8:	d402      	bmi.n	80147f0 <_printf_i+0x18c>
 80147ea:	065f      	lsls	r7, r3, #25
 80147ec:	bf48      	it	mi
 80147ee:	b2b6      	uxthmi	r6, r6
 80147f0:	07df      	lsls	r7, r3, #31
 80147f2:	bf48      	it	mi
 80147f4:	f043 0320 	orrmi.w	r3, r3, #32
 80147f8:	6029      	str	r1, [r5, #0]
 80147fa:	bf48      	it	mi
 80147fc:	6023      	strmi	r3, [r4, #0]
 80147fe:	b91e      	cbnz	r6, 8014808 <_printf_i+0x1a4>
 8014800:	6823      	ldr	r3, [r4, #0]
 8014802:	f023 0320 	bic.w	r3, r3, #32
 8014806:	6023      	str	r3, [r4, #0]
 8014808:	2310      	movs	r3, #16
 801480a:	e7a7      	b.n	801475c <_printf_i+0xf8>
 801480c:	4824      	ldr	r0, [pc, #144]	; (80148a0 <_printf_i+0x23c>)
 801480e:	e7e4      	b.n	80147da <_printf_i+0x176>
 8014810:	4615      	mov	r5, r2
 8014812:	e7bd      	b.n	8014790 <_printf_i+0x12c>
 8014814:	682b      	ldr	r3, [r5, #0]
 8014816:	6826      	ldr	r6, [r4, #0]
 8014818:	6961      	ldr	r1, [r4, #20]
 801481a:	1d18      	adds	r0, r3, #4
 801481c:	6028      	str	r0, [r5, #0]
 801481e:	0635      	lsls	r5, r6, #24
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	d501      	bpl.n	8014828 <_printf_i+0x1c4>
 8014824:	6019      	str	r1, [r3, #0]
 8014826:	e002      	b.n	801482e <_printf_i+0x1ca>
 8014828:	0670      	lsls	r0, r6, #25
 801482a:	d5fb      	bpl.n	8014824 <_printf_i+0x1c0>
 801482c:	8019      	strh	r1, [r3, #0]
 801482e:	2300      	movs	r3, #0
 8014830:	6123      	str	r3, [r4, #16]
 8014832:	4615      	mov	r5, r2
 8014834:	e7bc      	b.n	80147b0 <_printf_i+0x14c>
 8014836:	682b      	ldr	r3, [r5, #0]
 8014838:	1d1a      	adds	r2, r3, #4
 801483a:	602a      	str	r2, [r5, #0]
 801483c:	681d      	ldr	r5, [r3, #0]
 801483e:	6862      	ldr	r2, [r4, #4]
 8014840:	2100      	movs	r1, #0
 8014842:	4628      	mov	r0, r5
 8014844:	f7eb fd54 	bl	80002f0 <memchr>
 8014848:	b108      	cbz	r0, 801484e <_printf_i+0x1ea>
 801484a:	1b40      	subs	r0, r0, r5
 801484c:	6060      	str	r0, [r4, #4]
 801484e:	6863      	ldr	r3, [r4, #4]
 8014850:	6123      	str	r3, [r4, #16]
 8014852:	2300      	movs	r3, #0
 8014854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014858:	e7aa      	b.n	80147b0 <_printf_i+0x14c>
 801485a:	6923      	ldr	r3, [r4, #16]
 801485c:	462a      	mov	r2, r5
 801485e:	4649      	mov	r1, r9
 8014860:	4640      	mov	r0, r8
 8014862:	47d0      	blx	sl
 8014864:	3001      	adds	r0, #1
 8014866:	d0ad      	beq.n	80147c4 <_printf_i+0x160>
 8014868:	6823      	ldr	r3, [r4, #0]
 801486a:	079b      	lsls	r3, r3, #30
 801486c:	d413      	bmi.n	8014896 <_printf_i+0x232>
 801486e:	68e0      	ldr	r0, [r4, #12]
 8014870:	9b03      	ldr	r3, [sp, #12]
 8014872:	4298      	cmp	r0, r3
 8014874:	bfb8      	it	lt
 8014876:	4618      	movlt	r0, r3
 8014878:	e7a6      	b.n	80147c8 <_printf_i+0x164>
 801487a:	2301      	movs	r3, #1
 801487c:	4632      	mov	r2, r6
 801487e:	4649      	mov	r1, r9
 8014880:	4640      	mov	r0, r8
 8014882:	47d0      	blx	sl
 8014884:	3001      	adds	r0, #1
 8014886:	d09d      	beq.n	80147c4 <_printf_i+0x160>
 8014888:	3501      	adds	r5, #1
 801488a:	68e3      	ldr	r3, [r4, #12]
 801488c:	9903      	ldr	r1, [sp, #12]
 801488e:	1a5b      	subs	r3, r3, r1
 8014890:	42ab      	cmp	r3, r5
 8014892:	dcf2      	bgt.n	801487a <_printf_i+0x216>
 8014894:	e7eb      	b.n	801486e <_printf_i+0x20a>
 8014896:	2500      	movs	r5, #0
 8014898:	f104 0619 	add.w	r6, r4, #25
 801489c:	e7f5      	b.n	801488a <_printf_i+0x226>
 801489e:	bf00      	nop
 80148a0:	0801efad 	.word	0x0801efad
 80148a4:	0801efbe 	.word	0x0801efbe

080148a8 <std>:
 80148a8:	2300      	movs	r3, #0
 80148aa:	b510      	push	{r4, lr}
 80148ac:	4604      	mov	r4, r0
 80148ae:	e9c0 3300 	strd	r3, r3, [r0]
 80148b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148b6:	6083      	str	r3, [r0, #8]
 80148b8:	8181      	strh	r1, [r0, #12]
 80148ba:	6643      	str	r3, [r0, #100]	; 0x64
 80148bc:	81c2      	strh	r2, [r0, #14]
 80148be:	6183      	str	r3, [r0, #24]
 80148c0:	4619      	mov	r1, r3
 80148c2:	2208      	movs	r2, #8
 80148c4:	305c      	adds	r0, #92	; 0x5c
 80148c6:	f000 f991 	bl	8014bec <memset>
 80148ca:	4b05      	ldr	r3, [pc, #20]	; (80148e0 <std+0x38>)
 80148cc:	6263      	str	r3, [r4, #36]	; 0x24
 80148ce:	4b05      	ldr	r3, [pc, #20]	; (80148e4 <std+0x3c>)
 80148d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80148d2:	4b05      	ldr	r3, [pc, #20]	; (80148e8 <std+0x40>)
 80148d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80148d6:	4b05      	ldr	r3, [pc, #20]	; (80148ec <std+0x44>)
 80148d8:	6224      	str	r4, [r4, #32]
 80148da:	6323      	str	r3, [r4, #48]	; 0x30
 80148dc:	bd10      	pop	{r4, pc}
 80148de:	bf00      	nop
 80148e0:	08014a09 	.word	0x08014a09
 80148e4:	08014a2b 	.word	0x08014a2b
 80148e8:	08014a63 	.word	0x08014a63
 80148ec:	08014a87 	.word	0x08014a87

080148f0 <stdio_exit_handler>:
 80148f0:	4a02      	ldr	r2, [pc, #8]	; (80148fc <stdio_exit_handler+0xc>)
 80148f2:	4903      	ldr	r1, [pc, #12]	; (8014900 <stdio_exit_handler+0x10>)
 80148f4:	4803      	ldr	r0, [pc, #12]	; (8014904 <stdio_exit_handler+0x14>)
 80148f6:	f000 b869 	b.w	80149cc <_fwalk_sglue>
 80148fa:	bf00      	nop
 80148fc:	2000092c 	.word	0x2000092c
 8014900:	08014da5 	.word	0x08014da5
 8014904:	200008dc 	.word	0x200008dc

08014908 <cleanup_stdio>:
 8014908:	6841      	ldr	r1, [r0, #4]
 801490a:	4b0c      	ldr	r3, [pc, #48]	; (801493c <cleanup_stdio+0x34>)
 801490c:	4299      	cmp	r1, r3
 801490e:	b510      	push	{r4, lr}
 8014910:	4604      	mov	r4, r0
 8014912:	d001      	beq.n	8014918 <cleanup_stdio+0x10>
 8014914:	f000 fa46 	bl	8014da4 <_fflush_r>
 8014918:	68a1      	ldr	r1, [r4, #8]
 801491a:	4b09      	ldr	r3, [pc, #36]	; (8014940 <cleanup_stdio+0x38>)
 801491c:	4299      	cmp	r1, r3
 801491e:	d002      	beq.n	8014926 <cleanup_stdio+0x1e>
 8014920:	4620      	mov	r0, r4
 8014922:	f000 fa3f 	bl	8014da4 <_fflush_r>
 8014926:	68e1      	ldr	r1, [r4, #12]
 8014928:	4b06      	ldr	r3, [pc, #24]	; (8014944 <cleanup_stdio+0x3c>)
 801492a:	4299      	cmp	r1, r3
 801492c:	d004      	beq.n	8014938 <cleanup_stdio+0x30>
 801492e:	4620      	mov	r0, r4
 8014930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014934:	f000 ba36 	b.w	8014da4 <_fflush_r>
 8014938:	bd10      	pop	{r4, pc}
 801493a:	bf00      	nop
 801493c:	20018210 	.word	0x20018210
 8014940:	20018278 	.word	0x20018278
 8014944:	200182e0 	.word	0x200182e0

08014948 <global_stdio_init.part.0>:
 8014948:	b510      	push	{r4, lr}
 801494a:	4b0b      	ldr	r3, [pc, #44]	; (8014978 <global_stdio_init.part.0+0x30>)
 801494c:	4c0b      	ldr	r4, [pc, #44]	; (801497c <global_stdio_init.part.0+0x34>)
 801494e:	4a0c      	ldr	r2, [pc, #48]	; (8014980 <global_stdio_init.part.0+0x38>)
 8014950:	601a      	str	r2, [r3, #0]
 8014952:	4620      	mov	r0, r4
 8014954:	2200      	movs	r2, #0
 8014956:	2104      	movs	r1, #4
 8014958:	f7ff ffa6 	bl	80148a8 <std>
 801495c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014960:	2201      	movs	r2, #1
 8014962:	2109      	movs	r1, #9
 8014964:	f7ff ffa0 	bl	80148a8 <std>
 8014968:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801496c:	2202      	movs	r2, #2
 801496e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014972:	2112      	movs	r1, #18
 8014974:	f7ff bf98 	b.w	80148a8 <std>
 8014978:	20018348 	.word	0x20018348
 801497c:	20018210 	.word	0x20018210
 8014980:	080148f1 	.word	0x080148f1

08014984 <__sfp_lock_acquire>:
 8014984:	4801      	ldr	r0, [pc, #4]	; (801498c <__sfp_lock_acquire+0x8>)
 8014986:	f7ff bc69 	b.w	801425c <__retarget_lock_acquire_recursive>
 801498a:	bf00      	nop
 801498c:	2001820d 	.word	0x2001820d

08014990 <__sfp_lock_release>:
 8014990:	4801      	ldr	r0, [pc, #4]	; (8014998 <__sfp_lock_release+0x8>)
 8014992:	f7ff bc64 	b.w	801425e <__retarget_lock_release_recursive>
 8014996:	bf00      	nop
 8014998:	2001820d 	.word	0x2001820d

0801499c <__sinit>:
 801499c:	b510      	push	{r4, lr}
 801499e:	4604      	mov	r4, r0
 80149a0:	f7ff fff0 	bl	8014984 <__sfp_lock_acquire>
 80149a4:	6a23      	ldr	r3, [r4, #32]
 80149a6:	b11b      	cbz	r3, 80149b0 <__sinit+0x14>
 80149a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149ac:	f7ff bff0 	b.w	8014990 <__sfp_lock_release>
 80149b0:	4b04      	ldr	r3, [pc, #16]	; (80149c4 <__sinit+0x28>)
 80149b2:	6223      	str	r3, [r4, #32]
 80149b4:	4b04      	ldr	r3, [pc, #16]	; (80149c8 <__sinit+0x2c>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d1f5      	bne.n	80149a8 <__sinit+0xc>
 80149bc:	f7ff ffc4 	bl	8014948 <global_stdio_init.part.0>
 80149c0:	e7f2      	b.n	80149a8 <__sinit+0xc>
 80149c2:	bf00      	nop
 80149c4:	08014909 	.word	0x08014909
 80149c8:	20018348 	.word	0x20018348

080149cc <_fwalk_sglue>:
 80149cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149d0:	4607      	mov	r7, r0
 80149d2:	4688      	mov	r8, r1
 80149d4:	4614      	mov	r4, r2
 80149d6:	2600      	movs	r6, #0
 80149d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80149dc:	f1b9 0901 	subs.w	r9, r9, #1
 80149e0:	d505      	bpl.n	80149ee <_fwalk_sglue+0x22>
 80149e2:	6824      	ldr	r4, [r4, #0]
 80149e4:	2c00      	cmp	r4, #0
 80149e6:	d1f7      	bne.n	80149d8 <_fwalk_sglue+0xc>
 80149e8:	4630      	mov	r0, r6
 80149ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149ee:	89ab      	ldrh	r3, [r5, #12]
 80149f0:	2b01      	cmp	r3, #1
 80149f2:	d907      	bls.n	8014a04 <_fwalk_sglue+0x38>
 80149f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80149f8:	3301      	adds	r3, #1
 80149fa:	d003      	beq.n	8014a04 <_fwalk_sglue+0x38>
 80149fc:	4629      	mov	r1, r5
 80149fe:	4638      	mov	r0, r7
 8014a00:	47c0      	blx	r8
 8014a02:	4306      	orrs	r6, r0
 8014a04:	3568      	adds	r5, #104	; 0x68
 8014a06:	e7e9      	b.n	80149dc <_fwalk_sglue+0x10>

08014a08 <__sread>:
 8014a08:	b510      	push	{r4, lr}
 8014a0a:	460c      	mov	r4, r1
 8014a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a10:	f7f6 ff66 	bl	800b8e0 <_read_r>
 8014a14:	2800      	cmp	r0, #0
 8014a16:	bfab      	itete	ge
 8014a18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8014a1c:	181b      	addge	r3, r3, r0
 8014a1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014a22:	bfac      	ite	ge
 8014a24:	6563      	strge	r3, [r4, #84]	; 0x54
 8014a26:	81a3      	strhlt	r3, [r4, #12]
 8014a28:	bd10      	pop	{r4, pc}

08014a2a <__swrite>:
 8014a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a2e:	461f      	mov	r7, r3
 8014a30:	898b      	ldrh	r3, [r1, #12]
 8014a32:	05db      	lsls	r3, r3, #23
 8014a34:	4605      	mov	r5, r0
 8014a36:	460c      	mov	r4, r1
 8014a38:	4616      	mov	r6, r2
 8014a3a:	d505      	bpl.n	8014a48 <__swrite+0x1e>
 8014a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a40:	2302      	movs	r3, #2
 8014a42:	2200      	movs	r2, #0
 8014a44:	f7f6 ff54 	bl	800b8f0 <_lseek_r>
 8014a48:	89a3      	ldrh	r3, [r4, #12]
 8014a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014a52:	81a3      	strh	r3, [r4, #12]
 8014a54:	4632      	mov	r2, r6
 8014a56:	463b      	mov	r3, r7
 8014a58:	4628      	mov	r0, r5
 8014a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a5e:	f7f6 bf4f 	b.w	800b900 <_write_r>

08014a62 <__sseek>:
 8014a62:	b510      	push	{r4, lr}
 8014a64:	460c      	mov	r4, r1
 8014a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a6a:	f7f6 ff41 	bl	800b8f0 <_lseek_r>
 8014a6e:	1c43      	adds	r3, r0, #1
 8014a70:	89a3      	ldrh	r3, [r4, #12]
 8014a72:	bf15      	itete	ne
 8014a74:	6560      	strne	r0, [r4, #84]	; 0x54
 8014a76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014a7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014a7e:	81a3      	strheq	r3, [r4, #12]
 8014a80:	bf18      	it	ne
 8014a82:	81a3      	strhne	r3, [r4, #12]
 8014a84:	bd10      	pop	{r4, pc}

08014a86 <__sclose>:
 8014a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a8a:	f7f6 bf41 	b.w	800b910 <_close_r>

08014a8e <__swbuf_r>:
 8014a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a90:	460e      	mov	r6, r1
 8014a92:	4614      	mov	r4, r2
 8014a94:	4605      	mov	r5, r0
 8014a96:	b118      	cbz	r0, 8014aa0 <__swbuf_r+0x12>
 8014a98:	6a03      	ldr	r3, [r0, #32]
 8014a9a:	b90b      	cbnz	r3, 8014aa0 <__swbuf_r+0x12>
 8014a9c:	f7ff ff7e 	bl	801499c <__sinit>
 8014aa0:	69a3      	ldr	r3, [r4, #24]
 8014aa2:	60a3      	str	r3, [r4, #8]
 8014aa4:	89a3      	ldrh	r3, [r4, #12]
 8014aa6:	071a      	lsls	r2, r3, #28
 8014aa8:	d525      	bpl.n	8014af6 <__swbuf_r+0x68>
 8014aaa:	6923      	ldr	r3, [r4, #16]
 8014aac:	b31b      	cbz	r3, 8014af6 <__swbuf_r+0x68>
 8014aae:	6823      	ldr	r3, [r4, #0]
 8014ab0:	6922      	ldr	r2, [r4, #16]
 8014ab2:	1a98      	subs	r0, r3, r2
 8014ab4:	6963      	ldr	r3, [r4, #20]
 8014ab6:	b2f6      	uxtb	r6, r6
 8014ab8:	4283      	cmp	r3, r0
 8014aba:	4637      	mov	r7, r6
 8014abc:	dc04      	bgt.n	8014ac8 <__swbuf_r+0x3a>
 8014abe:	4621      	mov	r1, r4
 8014ac0:	4628      	mov	r0, r5
 8014ac2:	f000 f96f 	bl	8014da4 <_fflush_r>
 8014ac6:	b9e0      	cbnz	r0, 8014b02 <__swbuf_r+0x74>
 8014ac8:	68a3      	ldr	r3, [r4, #8]
 8014aca:	3b01      	subs	r3, #1
 8014acc:	60a3      	str	r3, [r4, #8]
 8014ace:	6823      	ldr	r3, [r4, #0]
 8014ad0:	1c5a      	adds	r2, r3, #1
 8014ad2:	6022      	str	r2, [r4, #0]
 8014ad4:	701e      	strb	r6, [r3, #0]
 8014ad6:	6962      	ldr	r2, [r4, #20]
 8014ad8:	1c43      	adds	r3, r0, #1
 8014ada:	429a      	cmp	r2, r3
 8014adc:	d004      	beq.n	8014ae8 <__swbuf_r+0x5a>
 8014ade:	89a3      	ldrh	r3, [r4, #12]
 8014ae0:	07db      	lsls	r3, r3, #31
 8014ae2:	d506      	bpl.n	8014af2 <__swbuf_r+0x64>
 8014ae4:	2e0a      	cmp	r6, #10
 8014ae6:	d104      	bne.n	8014af2 <__swbuf_r+0x64>
 8014ae8:	4621      	mov	r1, r4
 8014aea:	4628      	mov	r0, r5
 8014aec:	f000 f95a 	bl	8014da4 <_fflush_r>
 8014af0:	b938      	cbnz	r0, 8014b02 <__swbuf_r+0x74>
 8014af2:	4638      	mov	r0, r7
 8014af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014af6:	4621      	mov	r1, r4
 8014af8:	4628      	mov	r0, r5
 8014afa:	f000 f805 	bl	8014b08 <__swsetup_r>
 8014afe:	2800      	cmp	r0, #0
 8014b00:	d0d5      	beq.n	8014aae <__swbuf_r+0x20>
 8014b02:	f04f 37ff 	mov.w	r7, #4294967295
 8014b06:	e7f4      	b.n	8014af2 <__swbuf_r+0x64>

08014b08 <__swsetup_r>:
 8014b08:	b538      	push	{r3, r4, r5, lr}
 8014b0a:	4b2a      	ldr	r3, [pc, #168]	; (8014bb4 <__swsetup_r+0xac>)
 8014b0c:	4605      	mov	r5, r0
 8014b0e:	6818      	ldr	r0, [r3, #0]
 8014b10:	460c      	mov	r4, r1
 8014b12:	b118      	cbz	r0, 8014b1c <__swsetup_r+0x14>
 8014b14:	6a03      	ldr	r3, [r0, #32]
 8014b16:	b90b      	cbnz	r3, 8014b1c <__swsetup_r+0x14>
 8014b18:	f7ff ff40 	bl	801499c <__sinit>
 8014b1c:	89a3      	ldrh	r3, [r4, #12]
 8014b1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b22:	0718      	lsls	r0, r3, #28
 8014b24:	d422      	bmi.n	8014b6c <__swsetup_r+0x64>
 8014b26:	06d9      	lsls	r1, r3, #27
 8014b28:	d407      	bmi.n	8014b3a <__swsetup_r+0x32>
 8014b2a:	2309      	movs	r3, #9
 8014b2c:	602b      	str	r3, [r5, #0]
 8014b2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014b32:	81a3      	strh	r3, [r4, #12]
 8014b34:	f04f 30ff 	mov.w	r0, #4294967295
 8014b38:	e034      	b.n	8014ba4 <__swsetup_r+0x9c>
 8014b3a:	0758      	lsls	r0, r3, #29
 8014b3c:	d512      	bpl.n	8014b64 <__swsetup_r+0x5c>
 8014b3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b40:	b141      	cbz	r1, 8014b54 <__swsetup_r+0x4c>
 8014b42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b46:	4299      	cmp	r1, r3
 8014b48:	d002      	beq.n	8014b50 <__swsetup_r+0x48>
 8014b4a:	4628      	mov	r0, r5
 8014b4c:	f7ff fb90 	bl	8014270 <_free_r>
 8014b50:	2300      	movs	r3, #0
 8014b52:	6363      	str	r3, [r4, #52]	; 0x34
 8014b54:	89a3      	ldrh	r3, [r4, #12]
 8014b56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014b5a:	81a3      	strh	r3, [r4, #12]
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	6063      	str	r3, [r4, #4]
 8014b60:	6923      	ldr	r3, [r4, #16]
 8014b62:	6023      	str	r3, [r4, #0]
 8014b64:	89a3      	ldrh	r3, [r4, #12]
 8014b66:	f043 0308 	orr.w	r3, r3, #8
 8014b6a:	81a3      	strh	r3, [r4, #12]
 8014b6c:	6923      	ldr	r3, [r4, #16]
 8014b6e:	b94b      	cbnz	r3, 8014b84 <__swsetup_r+0x7c>
 8014b70:	89a3      	ldrh	r3, [r4, #12]
 8014b72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b7a:	d003      	beq.n	8014b84 <__swsetup_r+0x7c>
 8014b7c:	4621      	mov	r1, r4
 8014b7e:	4628      	mov	r0, r5
 8014b80:	f000 f95e 	bl	8014e40 <__smakebuf_r>
 8014b84:	89a0      	ldrh	r0, [r4, #12]
 8014b86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b8a:	f010 0301 	ands.w	r3, r0, #1
 8014b8e:	d00a      	beq.n	8014ba6 <__swsetup_r+0x9e>
 8014b90:	2300      	movs	r3, #0
 8014b92:	60a3      	str	r3, [r4, #8]
 8014b94:	6963      	ldr	r3, [r4, #20]
 8014b96:	425b      	negs	r3, r3
 8014b98:	61a3      	str	r3, [r4, #24]
 8014b9a:	6923      	ldr	r3, [r4, #16]
 8014b9c:	b943      	cbnz	r3, 8014bb0 <__swsetup_r+0xa8>
 8014b9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014ba2:	d1c4      	bne.n	8014b2e <__swsetup_r+0x26>
 8014ba4:	bd38      	pop	{r3, r4, r5, pc}
 8014ba6:	0781      	lsls	r1, r0, #30
 8014ba8:	bf58      	it	pl
 8014baa:	6963      	ldrpl	r3, [r4, #20]
 8014bac:	60a3      	str	r3, [r4, #8]
 8014bae:	e7f4      	b.n	8014b9a <__swsetup_r+0x92>
 8014bb0:	2000      	movs	r0, #0
 8014bb2:	e7f7      	b.n	8014ba4 <__swsetup_r+0x9c>
 8014bb4:	20000928 	.word	0x20000928

08014bb8 <memmove>:
 8014bb8:	4288      	cmp	r0, r1
 8014bba:	b510      	push	{r4, lr}
 8014bbc:	eb01 0402 	add.w	r4, r1, r2
 8014bc0:	d902      	bls.n	8014bc8 <memmove+0x10>
 8014bc2:	4284      	cmp	r4, r0
 8014bc4:	4623      	mov	r3, r4
 8014bc6:	d807      	bhi.n	8014bd8 <memmove+0x20>
 8014bc8:	1e43      	subs	r3, r0, #1
 8014bca:	42a1      	cmp	r1, r4
 8014bcc:	d008      	beq.n	8014be0 <memmove+0x28>
 8014bce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014bd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014bd6:	e7f8      	b.n	8014bca <memmove+0x12>
 8014bd8:	4402      	add	r2, r0
 8014bda:	4601      	mov	r1, r0
 8014bdc:	428a      	cmp	r2, r1
 8014bde:	d100      	bne.n	8014be2 <memmove+0x2a>
 8014be0:	bd10      	pop	{r4, pc}
 8014be2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014be6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014bea:	e7f7      	b.n	8014bdc <memmove+0x24>

08014bec <memset>:
 8014bec:	4402      	add	r2, r0
 8014bee:	4603      	mov	r3, r0
 8014bf0:	4293      	cmp	r3, r2
 8014bf2:	d100      	bne.n	8014bf6 <memset+0xa>
 8014bf4:	4770      	bx	lr
 8014bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8014bfa:	e7f9      	b.n	8014bf0 <memset+0x4>

08014bfc <_raise_r>:
 8014bfc:	291f      	cmp	r1, #31
 8014bfe:	b538      	push	{r3, r4, r5, lr}
 8014c00:	4604      	mov	r4, r0
 8014c02:	460d      	mov	r5, r1
 8014c04:	d904      	bls.n	8014c10 <_raise_r+0x14>
 8014c06:	2316      	movs	r3, #22
 8014c08:	6003      	str	r3, [r0, #0]
 8014c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8014c0e:	bd38      	pop	{r3, r4, r5, pc}
 8014c10:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014c12:	b112      	cbz	r2, 8014c1a <_raise_r+0x1e>
 8014c14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c18:	b94b      	cbnz	r3, 8014c2e <_raise_r+0x32>
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	f000 f830 	bl	8014c80 <_getpid_r>
 8014c20:	462a      	mov	r2, r5
 8014c22:	4601      	mov	r1, r0
 8014c24:	4620      	mov	r0, r4
 8014c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c2a:	f000 b817 	b.w	8014c5c <_kill_r>
 8014c2e:	2b01      	cmp	r3, #1
 8014c30:	d00a      	beq.n	8014c48 <_raise_r+0x4c>
 8014c32:	1c59      	adds	r1, r3, #1
 8014c34:	d103      	bne.n	8014c3e <_raise_r+0x42>
 8014c36:	2316      	movs	r3, #22
 8014c38:	6003      	str	r3, [r0, #0]
 8014c3a:	2001      	movs	r0, #1
 8014c3c:	e7e7      	b.n	8014c0e <_raise_r+0x12>
 8014c3e:	2400      	movs	r4, #0
 8014c40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014c44:	4628      	mov	r0, r5
 8014c46:	4798      	blx	r3
 8014c48:	2000      	movs	r0, #0
 8014c4a:	e7e0      	b.n	8014c0e <_raise_r+0x12>

08014c4c <raise>:
 8014c4c:	4b02      	ldr	r3, [pc, #8]	; (8014c58 <raise+0xc>)
 8014c4e:	4601      	mov	r1, r0
 8014c50:	6818      	ldr	r0, [r3, #0]
 8014c52:	f7ff bfd3 	b.w	8014bfc <_raise_r>
 8014c56:	bf00      	nop
 8014c58:	20000928 	.word	0x20000928

08014c5c <_kill_r>:
 8014c5c:	b538      	push	{r3, r4, r5, lr}
 8014c5e:	4d07      	ldr	r5, [pc, #28]	; (8014c7c <_kill_r+0x20>)
 8014c60:	2300      	movs	r3, #0
 8014c62:	4604      	mov	r4, r0
 8014c64:	4608      	mov	r0, r1
 8014c66:	4611      	mov	r1, r2
 8014c68:	602b      	str	r3, [r5, #0]
 8014c6a:	f7f6 fea1 	bl	800b9b0 <_kill>
 8014c6e:	1c43      	adds	r3, r0, #1
 8014c70:	d102      	bne.n	8014c78 <_kill_r+0x1c>
 8014c72:	682b      	ldr	r3, [r5, #0]
 8014c74:	b103      	cbz	r3, 8014c78 <_kill_r+0x1c>
 8014c76:	6023      	str	r3, [r4, #0]
 8014c78:	bd38      	pop	{r3, r4, r5, pc}
 8014c7a:	bf00      	nop
 8014c7c:	2001834c 	.word	0x2001834c

08014c80 <_getpid_r>:
 8014c80:	f7f6 bea6 	b.w	800b9d0 <_getpid>

08014c84 <memcpy>:
 8014c84:	440a      	add	r2, r1
 8014c86:	4291      	cmp	r1, r2
 8014c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8014c8c:	d100      	bne.n	8014c90 <memcpy+0xc>
 8014c8e:	4770      	bx	lr
 8014c90:	b510      	push	{r4, lr}
 8014c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c9a:	4291      	cmp	r1, r2
 8014c9c:	d1f9      	bne.n	8014c92 <memcpy+0xe>
 8014c9e:	bd10      	pop	{r4, pc}

08014ca0 <__sflush_r>:
 8014ca0:	898a      	ldrh	r2, [r1, #12]
 8014ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ca4:	4605      	mov	r5, r0
 8014ca6:	0710      	lsls	r0, r2, #28
 8014ca8:	460c      	mov	r4, r1
 8014caa:	d457      	bmi.n	8014d5c <__sflush_r+0xbc>
 8014cac:	684b      	ldr	r3, [r1, #4]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	dc04      	bgt.n	8014cbc <__sflush_r+0x1c>
 8014cb2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	dc01      	bgt.n	8014cbc <__sflush_r+0x1c>
 8014cb8:	2000      	movs	r0, #0
 8014cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014cbe:	2e00      	cmp	r6, #0
 8014cc0:	d0fa      	beq.n	8014cb8 <__sflush_r+0x18>
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014cc8:	682f      	ldr	r7, [r5, #0]
 8014cca:	6a21      	ldr	r1, [r4, #32]
 8014ccc:	602b      	str	r3, [r5, #0]
 8014cce:	d032      	beq.n	8014d36 <__sflush_r+0x96>
 8014cd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014cd2:	89a3      	ldrh	r3, [r4, #12]
 8014cd4:	075a      	lsls	r2, r3, #29
 8014cd6:	d505      	bpl.n	8014ce4 <__sflush_r+0x44>
 8014cd8:	6863      	ldr	r3, [r4, #4]
 8014cda:	1ac0      	subs	r0, r0, r3
 8014cdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014cde:	b10b      	cbz	r3, 8014ce4 <__sflush_r+0x44>
 8014ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014ce2:	1ac0      	subs	r0, r0, r3
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	4602      	mov	r2, r0
 8014ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014cea:	6a21      	ldr	r1, [r4, #32]
 8014cec:	4628      	mov	r0, r5
 8014cee:	47b0      	blx	r6
 8014cf0:	1c43      	adds	r3, r0, #1
 8014cf2:	89a3      	ldrh	r3, [r4, #12]
 8014cf4:	d106      	bne.n	8014d04 <__sflush_r+0x64>
 8014cf6:	6829      	ldr	r1, [r5, #0]
 8014cf8:	291d      	cmp	r1, #29
 8014cfa:	d82b      	bhi.n	8014d54 <__sflush_r+0xb4>
 8014cfc:	4a28      	ldr	r2, [pc, #160]	; (8014da0 <__sflush_r+0x100>)
 8014cfe:	410a      	asrs	r2, r1
 8014d00:	07d6      	lsls	r6, r2, #31
 8014d02:	d427      	bmi.n	8014d54 <__sflush_r+0xb4>
 8014d04:	2200      	movs	r2, #0
 8014d06:	6062      	str	r2, [r4, #4]
 8014d08:	04d9      	lsls	r1, r3, #19
 8014d0a:	6922      	ldr	r2, [r4, #16]
 8014d0c:	6022      	str	r2, [r4, #0]
 8014d0e:	d504      	bpl.n	8014d1a <__sflush_r+0x7a>
 8014d10:	1c42      	adds	r2, r0, #1
 8014d12:	d101      	bne.n	8014d18 <__sflush_r+0x78>
 8014d14:	682b      	ldr	r3, [r5, #0]
 8014d16:	b903      	cbnz	r3, 8014d1a <__sflush_r+0x7a>
 8014d18:	6560      	str	r0, [r4, #84]	; 0x54
 8014d1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d1c:	602f      	str	r7, [r5, #0]
 8014d1e:	2900      	cmp	r1, #0
 8014d20:	d0ca      	beq.n	8014cb8 <__sflush_r+0x18>
 8014d22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d26:	4299      	cmp	r1, r3
 8014d28:	d002      	beq.n	8014d30 <__sflush_r+0x90>
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	f7ff faa0 	bl	8014270 <_free_r>
 8014d30:	2000      	movs	r0, #0
 8014d32:	6360      	str	r0, [r4, #52]	; 0x34
 8014d34:	e7c1      	b.n	8014cba <__sflush_r+0x1a>
 8014d36:	2301      	movs	r3, #1
 8014d38:	4628      	mov	r0, r5
 8014d3a:	47b0      	blx	r6
 8014d3c:	1c41      	adds	r1, r0, #1
 8014d3e:	d1c8      	bne.n	8014cd2 <__sflush_r+0x32>
 8014d40:	682b      	ldr	r3, [r5, #0]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d0c5      	beq.n	8014cd2 <__sflush_r+0x32>
 8014d46:	2b1d      	cmp	r3, #29
 8014d48:	d001      	beq.n	8014d4e <__sflush_r+0xae>
 8014d4a:	2b16      	cmp	r3, #22
 8014d4c:	d101      	bne.n	8014d52 <__sflush_r+0xb2>
 8014d4e:	602f      	str	r7, [r5, #0]
 8014d50:	e7b2      	b.n	8014cb8 <__sflush_r+0x18>
 8014d52:	89a3      	ldrh	r3, [r4, #12]
 8014d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d58:	81a3      	strh	r3, [r4, #12]
 8014d5a:	e7ae      	b.n	8014cba <__sflush_r+0x1a>
 8014d5c:	690f      	ldr	r7, [r1, #16]
 8014d5e:	2f00      	cmp	r7, #0
 8014d60:	d0aa      	beq.n	8014cb8 <__sflush_r+0x18>
 8014d62:	0793      	lsls	r3, r2, #30
 8014d64:	680e      	ldr	r6, [r1, #0]
 8014d66:	bf08      	it	eq
 8014d68:	694b      	ldreq	r3, [r1, #20]
 8014d6a:	600f      	str	r7, [r1, #0]
 8014d6c:	bf18      	it	ne
 8014d6e:	2300      	movne	r3, #0
 8014d70:	1bf6      	subs	r6, r6, r7
 8014d72:	608b      	str	r3, [r1, #8]
 8014d74:	2e00      	cmp	r6, #0
 8014d76:	dd9f      	ble.n	8014cb8 <__sflush_r+0x18>
 8014d78:	6a21      	ldr	r1, [r4, #32]
 8014d7a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8014d7e:	4633      	mov	r3, r6
 8014d80:	463a      	mov	r2, r7
 8014d82:	4628      	mov	r0, r5
 8014d84:	47e0      	blx	ip
 8014d86:	2800      	cmp	r0, #0
 8014d88:	dc06      	bgt.n	8014d98 <__sflush_r+0xf8>
 8014d8a:	89a3      	ldrh	r3, [r4, #12]
 8014d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d90:	81a3      	strh	r3, [r4, #12]
 8014d92:	f04f 30ff 	mov.w	r0, #4294967295
 8014d96:	e790      	b.n	8014cba <__sflush_r+0x1a>
 8014d98:	4407      	add	r7, r0
 8014d9a:	1a36      	subs	r6, r6, r0
 8014d9c:	e7ea      	b.n	8014d74 <__sflush_r+0xd4>
 8014d9e:	bf00      	nop
 8014da0:	dfbffffe 	.word	0xdfbffffe

08014da4 <_fflush_r>:
 8014da4:	b538      	push	{r3, r4, r5, lr}
 8014da6:	690b      	ldr	r3, [r1, #16]
 8014da8:	4605      	mov	r5, r0
 8014daa:	460c      	mov	r4, r1
 8014dac:	b913      	cbnz	r3, 8014db4 <_fflush_r+0x10>
 8014dae:	2500      	movs	r5, #0
 8014db0:	4628      	mov	r0, r5
 8014db2:	bd38      	pop	{r3, r4, r5, pc}
 8014db4:	b118      	cbz	r0, 8014dbe <_fflush_r+0x1a>
 8014db6:	6a03      	ldr	r3, [r0, #32]
 8014db8:	b90b      	cbnz	r3, 8014dbe <_fflush_r+0x1a>
 8014dba:	f7ff fdef 	bl	801499c <__sinit>
 8014dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d0f3      	beq.n	8014dae <_fflush_r+0xa>
 8014dc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014dc8:	07d0      	lsls	r0, r2, #31
 8014dca:	d404      	bmi.n	8014dd6 <_fflush_r+0x32>
 8014dcc:	0599      	lsls	r1, r3, #22
 8014dce:	d402      	bmi.n	8014dd6 <_fflush_r+0x32>
 8014dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014dd2:	f7ff fa43 	bl	801425c <__retarget_lock_acquire_recursive>
 8014dd6:	4628      	mov	r0, r5
 8014dd8:	4621      	mov	r1, r4
 8014dda:	f7ff ff61 	bl	8014ca0 <__sflush_r>
 8014dde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014de0:	07da      	lsls	r2, r3, #31
 8014de2:	4605      	mov	r5, r0
 8014de4:	d4e4      	bmi.n	8014db0 <_fflush_r+0xc>
 8014de6:	89a3      	ldrh	r3, [r4, #12]
 8014de8:	059b      	lsls	r3, r3, #22
 8014dea:	d4e1      	bmi.n	8014db0 <_fflush_r+0xc>
 8014dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014dee:	f7ff fa36 	bl	801425e <__retarget_lock_release_recursive>
 8014df2:	e7dd      	b.n	8014db0 <_fflush_r+0xc>

08014df4 <__swhatbuf_r>:
 8014df4:	b570      	push	{r4, r5, r6, lr}
 8014df6:	460c      	mov	r4, r1
 8014df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dfc:	2900      	cmp	r1, #0
 8014dfe:	b096      	sub	sp, #88	; 0x58
 8014e00:	4615      	mov	r5, r2
 8014e02:	461e      	mov	r6, r3
 8014e04:	da0d      	bge.n	8014e22 <__swhatbuf_r+0x2e>
 8014e06:	89a3      	ldrh	r3, [r4, #12]
 8014e08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014e0c:	f04f 0100 	mov.w	r1, #0
 8014e10:	bf0c      	ite	eq
 8014e12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014e16:	2340      	movne	r3, #64	; 0x40
 8014e18:	2000      	movs	r0, #0
 8014e1a:	6031      	str	r1, [r6, #0]
 8014e1c:	602b      	str	r3, [r5, #0]
 8014e1e:	b016      	add	sp, #88	; 0x58
 8014e20:	bd70      	pop	{r4, r5, r6, pc}
 8014e22:	466a      	mov	r2, sp
 8014e24:	f7f6 fd9c 	bl	800b960 <_fstat_r>
 8014e28:	2800      	cmp	r0, #0
 8014e2a:	dbec      	blt.n	8014e06 <__swhatbuf_r+0x12>
 8014e2c:	9901      	ldr	r1, [sp, #4]
 8014e2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014e32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014e36:	4259      	negs	r1, r3
 8014e38:	4159      	adcs	r1, r3
 8014e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e3e:	e7eb      	b.n	8014e18 <__swhatbuf_r+0x24>

08014e40 <__smakebuf_r>:
 8014e40:	898b      	ldrh	r3, [r1, #12]
 8014e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014e44:	079d      	lsls	r5, r3, #30
 8014e46:	4606      	mov	r6, r0
 8014e48:	460c      	mov	r4, r1
 8014e4a:	d507      	bpl.n	8014e5c <__smakebuf_r+0x1c>
 8014e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014e50:	6023      	str	r3, [r4, #0]
 8014e52:	6123      	str	r3, [r4, #16]
 8014e54:	2301      	movs	r3, #1
 8014e56:	6163      	str	r3, [r4, #20]
 8014e58:	b002      	add	sp, #8
 8014e5a:	bd70      	pop	{r4, r5, r6, pc}
 8014e5c:	ab01      	add	r3, sp, #4
 8014e5e:	466a      	mov	r2, sp
 8014e60:	f7ff ffc8 	bl	8014df4 <__swhatbuf_r>
 8014e64:	9900      	ldr	r1, [sp, #0]
 8014e66:	4605      	mov	r5, r0
 8014e68:	4630      	mov	r0, r6
 8014e6a:	f7ff f963 	bl	8014134 <_malloc_r>
 8014e6e:	b948      	cbnz	r0, 8014e84 <__smakebuf_r+0x44>
 8014e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e74:	059a      	lsls	r2, r3, #22
 8014e76:	d4ef      	bmi.n	8014e58 <__smakebuf_r+0x18>
 8014e78:	f023 0303 	bic.w	r3, r3, #3
 8014e7c:	f043 0302 	orr.w	r3, r3, #2
 8014e80:	81a3      	strh	r3, [r4, #12]
 8014e82:	e7e3      	b.n	8014e4c <__smakebuf_r+0xc>
 8014e84:	89a3      	ldrh	r3, [r4, #12]
 8014e86:	6020      	str	r0, [r4, #0]
 8014e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e8c:	81a3      	strh	r3, [r4, #12]
 8014e8e:	9b00      	ldr	r3, [sp, #0]
 8014e90:	6163      	str	r3, [r4, #20]
 8014e92:	9b01      	ldr	r3, [sp, #4]
 8014e94:	6120      	str	r0, [r4, #16]
 8014e96:	b15b      	cbz	r3, 8014eb0 <__smakebuf_r+0x70>
 8014e98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e9c:	4630      	mov	r0, r6
 8014e9e:	f7f6 fd6f 	bl	800b980 <_isatty_r>
 8014ea2:	b128      	cbz	r0, 8014eb0 <__smakebuf_r+0x70>
 8014ea4:	89a3      	ldrh	r3, [r4, #12]
 8014ea6:	f023 0303 	bic.w	r3, r3, #3
 8014eaa:	f043 0301 	orr.w	r3, r3, #1
 8014eae:	81a3      	strh	r3, [r4, #12]
 8014eb0:	89a3      	ldrh	r3, [r4, #12]
 8014eb2:	431d      	orrs	r5, r3
 8014eb4:	81a5      	strh	r5, [r4, #12]
 8014eb6:	e7cf      	b.n	8014e58 <__smakebuf_r+0x18>

08014eb8 <memcmp>:
 8014eb8:	b510      	push	{r4, lr}
 8014eba:	3901      	subs	r1, #1
 8014ebc:	4402      	add	r2, r0
 8014ebe:	4290      	cmp	r0, r2
 8014ec0:	d101      	bne.n	8014ec6 <memcmp+0xe>
 8014ec2:	2000      	movs	r0, #0
 8014ec4:	e005      	b.n	8014ed2 <memcmp+0x1a>
 8014ec6:	7803      	ldrb	r3, [r0, #0]
 8014ec8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014ecc:	42a3      	cmp	r3, r4
 8014ece:	d001      	beq.n	8014ed4 <memcmp+0x1c>
 8014ed0:	1b18      	subs	r0, r3, r4
 8014ed2:	bd10      	pop	{r4, pc}
 8014ed4:	3001      	adds	r0, #1
 8014ed6:	e7f2      	b.n	8014ebe <memcmp+0x6>

08014ed8 <strncmp>:
 8014ed8:	b510      	push	{r4, lr}
 8014eda:	b16a      	cbz	r2, 8014ef8 <strncmp+0x20>
 8014edc:	3901      	subs	r1, #1
 8014ede:	1884      	adds	r4, r0, r2
 8014ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ee4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014ee8:	429a      	cmp	r2, r3
 8014eea:	d103      	bne.n	8014ef4 <strncmp+0x1c>
 8014eec:	42a0      	cmp	r0, r4
 8014eee:	d001      	beq.n	8014ef4 <strncmp+0x1c>
 8014ef0:	2a00      	cmp	r2, #0
 8014ef2:	d1f5      	bne.n	8014ee0 <strncmp+0x8>
 8014ef4:	1ad0      	subs	r0, r2, r3
 8014ef6:	bd10      	pop	{r4, pc}
 8014ef8:	4610      	mov	r0, r2
 8014efa:	e7fc      	b.n	8014ef6 <strncmp+0x1e>
